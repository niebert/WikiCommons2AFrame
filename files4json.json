{
    "date": "Sun Nov 22 2020",
    "generator": "https://niebert.github.io/WikiCommons2AFrame/create_file4json.html",
    "files": [
        {
            "name": "aframe-v1.0.4.js",
            "file": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuQUZSQU1FID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitpKyInIik7dGhyb3cgYS5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcKCm1vZHVsZS5leHBvcnRzID0gYW5BcnJheQoKZnVuY3Rpb24gYW5BcnJheShhcnIpIHsKICByZXR1cm4gKAogICAgICAgYXJyLkJZVEVTX1BFUl9FTEVNRU5UCiAgICAmJiBzdHIuY2FsbChhcnIuYnVmZmVyKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJwogICAgfHwgQXJyYXkuaXNBcnJheShhcnIpCiAgKQp9Cgp9LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBudW10eXBlKG51bSwgZGVmKSB7CglyZXR1cm4gdHlwZW9mIG51bSA9PT0gJ251bWJlcicKCQk/IG51bSAKCQk6ICh0eXBlb2YgZGVmID09PSAnbnVtYmVyJyA/IGRlZiA6IDApCn0KfSx7fV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JwoKZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aApleHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXkKZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheQoKdmFyIGxvb2t1cCA9IFtdCnZhciByZXZMb29rdXAgPSBbXQp2YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5Cgp2YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJwpmb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkgewogIGxvb2t1cFtpXSA9IGNvZGVbaV0KICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGkKfQoKLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLgovLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zCnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MgpyZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjMKCmZ1bmN0aW9uIGdldExlbnMgKGI2NCkgewogIHZhciBsZW4gPSBiNjQubGVuZ3RoCgogIGlmIChsZW4gJSA0ID4gMCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JykKICB9CgogIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZAogIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MgogIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JykKICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlbgoKICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlbgogICAgPyAwCiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KQoKICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dCn0KCi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YQpmdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHsKICB2YXIgbGVucyA9IGdldExlbnMoYjY0KQogIHZhciB2YWxpZExlbiA9IGxlbnNbMF0KICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXQogIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlbgp9CgpmdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7CiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuCn0KCmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHsKICB2YXIgdG1wCiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NCkKICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdCiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV0KCiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSkKCiAgdmFyIGN1ckJ5dGUgPSAwCgogIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnMKICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMAogICAgPyB2YWxpZExlbiAtIDQKICAgIDogdmFsaWRMZW4KCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkgewogICAgdG1wID0KICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwKICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8CiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldCiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRgogICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRgogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGCiAgfQoKICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7CiAgICB0bXAgPQogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KQogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGCiAgfQoKICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7CiAgICB0bXAgPQogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfAogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfAogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMikKICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkYKICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRgogIH0KCiAgcmV0dXJuIGFycgp9CgpmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkgewogIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKwogICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsKICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsKICAgIGxvb2t1cFtudW0gJiAweDNGXQp9CgpmdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHsKICB2YXIgdG1wCiAgdmFyIG91dHB1dCA9IFtdCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHsKICAgIHRtcCA9CiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICsKICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICsKICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpCiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSkKICB9CiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKQp9CgpmdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkgewogIHZhciB0bXAKICB2YXIgbGVuID0gdWludDgubGVuZ3RoCiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzCiAgdmFyIHBhcnRzID0gW10KICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDMKCiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlcgogIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHsKICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoCiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkKICAgICkpCiAgfQoKICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzCiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHsKICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdCiAgICBwYXJ0cy5wdXNoKAogICAgICBsb29rdXBbdG1wID4+IDJdICsKICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArCiAgICAgICc9PScKICAgICkKICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHsKICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdCiAgICBwYXJ0cy5wdXNoKAogICAgICBsb29rdXBbdG1wID4+IDEwXSArCiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gKwogICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICsKICAgICAgJz0nCiAgICApCiAgfQoKICByZXR1cm4gcGFydHMuam9pbignJykKfQoKfSx7fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYnJvd3NlciBmaWVsZCwgY2hlY2sgb3V0IHRoZSBicm93c2VyIGZpZWxkIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9zdWJzdGFjay9icm93c2VyaWZ5LWhhbmRib29rI2Jyb3dzZXItZmllbGQuCgptb2R1bGUuZXhwb3J0cyA9IHsKICAgIC8vIENyZWF0ZSBhIDxsaW5rPiB0YWcgd2l0aCBvcHRpb25hbCBkYXRhIGF0dHJpYnV0ZXMKICAgIGNyZWF0ZUxpbms6IGZ1bmN0aW9uKGhyZWYsIGF0dHJpYnV0ZXMpIHsKICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTsKICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKCiAgICAgICAgbGluay5ocmVmID0gaHJlZjsKICAgICAgICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0JzsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgaWYgKCAhIGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1trZXldOwogICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LCB2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICBoZWFkLmFwcGVuZENoaWxkKGxpbmspOwogICAgfSwKICAgIC8vIENyZWF0ZSBhIDxzdHlsZT4gdGFnIHdpdGggb3B0aW9uYWwgZGF0YSBhdHRyaWJ1dGVzCiAgICBjcmVhdGVTdHlsZTogZnVuY3Rpb24oY3NzVGV4dCwgYXR0cmlidXRlcykgewogICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLAogICAgICAgICAgICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CgogICAgICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnOwoKICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykgewogICAgICAgICAgICBpZiAoICEgYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07CiAgICAgICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChzdHlsZS5zaGVldCkgeyAvLyBmb3IganNkb20gYW5kIElFOSsKICAgICAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gY3NzVGV4dDsKICAgICAgICAgICAgc3R5bGUuc2hlZXQuY3NzVGV4dCA9IGNzc1RleHQ7CiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgICAgIH0gZWxzZSBpZiAoc3R5bGUuc3R5bGVTaGVldCkgeyAvLyBmb3IgSUU4IGFuZCBiZWxvdwogICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKICAgICAgICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzVGV4dDsKICAgICAgICB9IGVsc2UgeyAvLyBmb3IgQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpCiAgICAgICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc1RleHQpKTsKICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgICAgfQogICAgfQp9OwoKfSx7fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3Nlcgp2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307CgovLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXQKLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzCi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGEKLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy4KCnZhciBjYWNoZWRTZXRUaW1lb3V0Owp2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0OwoKZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHsKICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpOwp9CmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQooZnVuY3Rpb24gKCkgewogICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwogICAgfQogICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDsKICAgICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDsKICAgIH0KfSAoKSkKZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHsKICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7CiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0KICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkCiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHsKICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDsKICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApOwogICAgfQogICAgdHJ5IHsKICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0gY2F0Y2goZSl7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvcgogICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7CiAgICAgICAgfQogICAgfQoKCn0KZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikgewogICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpOwogICAgfQogICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0gY2F0Y2ggKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHkKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7CiAgICAgICAgfSBjYXRjaCAoZSl7CiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLgogICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpOwogICAgICAgIH0KICAgIH0KCgoKfQp2YXIgcXVldWUgPSBbXTsKdmFyIGRyYWluaW5nID0gZmFsc2U7CnZhciBjdXJyZW50UXVldWU7CnZhciBxdWV1ZUluZGV4ID0gLTE7CgpmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHsKICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOwogICAgfSBlbHNlIHsKICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CiAgICB9CiAgICBpZiAocXVldWUubGVuZ3RoKSB7CiAgICAgICAgZHJhaW5RdWV1ZSgpOwogICAgfQp9CgpmdW5jdGlvbiBkcmFpblF1ZXVlKCkgewogICAgaWYgKGRyYWluaW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7CiAgICBkcmFpbmluZyA9IHRydWU7CgogICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIHdoaWxlKGxlbikgewogICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlOwogICAgICAgIHF1ZXVlID0gW107CiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIH0KICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpOwp9Cgpwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikgewogICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgfQogICAgfQogICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTsKICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7CiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICAgIH0KfTsKCi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHMKZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7CiAgICB0aGlzLmZ1biA9IGZ1bjsKICAgIHRoaXMuYXJyYXkgPSBhcnJheTsKfQpJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTsKfTsKcHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJzsKcHJvY2Vzcy5icm93c2VyID0gdHJ1ZTsKcHJvY2Vzcy5lbnYgPSB7fTsKcHJvY2Vzcy5hcmd2ID0gW107CnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlcwpwcm9jZXNzLnZlcnNpb25zID0ge307CgpmdW5jdGlvbiBub29wKCkge30KCnByb2Nlc3Mub24gPSBub29wOwpwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5vbmNlID0gbm9vcDsKcHJvY2Vzcy5vZmYgPSBub29wOwpwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wOwpwcm9jZXNzLmVtaXQgPSBub29wOwpwcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7Cgpwcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9Cgpwcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpOwp9OwoKcHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTsKcHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07CnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07Cgp9LHt9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIEJ1ZmZlciA9IF9kZXJlcV8oJ2J1ZmZlcicpLkJ1ZmZlcjsgLy8gZm9yIHVzZSB3aXRoIGJyb3dzZXJpZnkKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpKSByZXR1cm4gdW5kZWZpbmVkOwogICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHJldHVybiB1bmRlZmluZWQ7CiAgICBpZiAodHlwZW9mIGEuZXF1YWxzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gYS5lcXVhbHMoYik7CiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7CiAgICAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAKICAgIHJldHVybiB0cnVlOwp9OwoKfSx7ImJ1ZmZlciI6N31dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7Ci8qIQogKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci4KICoKICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+CiAqIEBsaWNlbnNlICBNSVQKICovCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCgondXNlIHN0cmljdCcKCnZhciBiYXNlNjQgPSBfZGVyZXFfKCdiYXNlNjQtanMnKQp2YXIgaWVlZTc1NCA9IF9kZXJlcV8oJ2llZWU3NTQnKQp2YXIgaXNBcnJheSA9IF9kZXJlcV8oJ2lzYXJyYXknKQoKZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXIKZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlcgpleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTAKCi8qKgogKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOgogKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KQogKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpCiAqCiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywKICogT3BlcmEgMTEuNissIGlPUyA0LjIrLgogKgogKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuCiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLgogKgogKiBOb3RlOgogKgogKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLAogKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguCiAqCiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLgogKgogKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZgogKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuCgogKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleQogKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS4KICovCkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZAogID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQKICA6IHR5cGVkQXJyYXlTdXBwb3J0KCkKCi8qCiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC4KICovCmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKQoKZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkgewogIHRyeSB7CiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSkKICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fQogICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQKICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YAogICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgCiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlCiAgfQp9CgpmdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHsKICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQKICAgID8gMHg3ZmZmZmZmZgogICAgOiAweDNmZmZmZmZmCn0KCmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7CiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJykKICB9CiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2UKICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpCiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzcwogICAgaWYgKHRoYXQgPT09IG51bGwpIHsKICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKQogICAgfQogICAgdGhhdC5sZW5ndGggPSBsZW5ndGgKICB9CgogIHJldHVybiB0aGF0Cn0KCi8qKgogKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXIKICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZgogKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzCiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0CiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuCiAqCiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC4KICovCgpmdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7CiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKICB9CgogIC8vIENvbW1vbiBjYXNlLgogIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykgewogICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJwogICAgICApCiAgICB9CiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKQogIH0KICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKfQoKQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uCgovLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi4KQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikgewogIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlCiAgcmV0dXJuIGFycgp9CgpmdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKQogIH0KCiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQogIH0KCiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KQogIH0KCiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpCn0KCi8qKgogKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvcgogKiBpZiB2YWx1ZSBpcyBhIG51bWJlci4KICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKQogKiBCdWZmZXIuZnJvbShhcnJheSkKICogQnVmZmVyLmZyb20oYnVmZmVyKQogKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSkKICoqLwpCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKfQoKaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZQogIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5CiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmCiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikgewogICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTcKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7CiAgICAgIHZhbHVlOiBudWxsLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0pCiAgfQp9CgpmdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7CiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignInNpemUiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKQogIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKQogIH0KfQoKZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CiAgYXNzZXJ0U2l6ZShzaXplKQogIGlmIChzaXplIDw9IDApIHsKICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkKICB9CiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkgewogICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXMKICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGQKICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC4KICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnCiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpCiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCkKICB9CiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKQp9CgovKioKICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pCiAqKi8KQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKQp9CgpmdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkgewogIGFzc2VydFNpemUoc2l6ZSkKICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKQogIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7CiAgICAgIHRoYXRbaV0gPSAwCiAgICB9CiAgfQogIHJldHVybiB0aGF0Cn0KCi8qKgogKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKiAqLwpCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKQp9Ci8qKgogKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KICovCkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKQp9CgpmdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7CiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7CiAgICBlbmNvZGluZyA9ICd1dGY4JwogIH0KCiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJlbmNvZGluZyIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpCiAgfQoKICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDAKICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aCkKCiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZykKCiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7CiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGwKICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuCiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJykKICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCkKICB9CgogIHJldHVybiB0aGF0Cn0KCmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMAogIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHsKICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NQogIH0KICByZXR1cm4gdGhhdAp9CgpmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXIKCiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCdvZmZzZXRcJyBpcyBvdXQgb2YgYm91bmRzJykKICB9CgogIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ2xlbmd0aFwnIGlzIG91dCBvZiBib3VuZHMnKQogIH0KCiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSkKICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KQogIH0gZWxzZSB7CiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpCiAgfQoKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZQogICAgdGhhdCA9IGFycmF5CiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzcwogICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpCiAgfQogIHJldHVybiB0aGF0Cn0KCmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikgewogIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkgewogICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwCiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbikKCiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHRoYXQKICAgIH0KCiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pCiAgICByZXR1cm4gdGhhdAogIH0KCiAgaWYgKG9iaikgewogICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmCiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHsKICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkgewogICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMCkKICAgICAgfQogICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopCiAgICB9CgogICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkgewogICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSkKICAgIH0KICB9CgogIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKQp9CgpmdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHsKICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW4KICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLikKICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKQogIH0KICByZXR1cm4gbGVuZ3RoIHwgMAp9CgpmdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHsKICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEKICAgIGxlbmd0aCA9IDAKICB9CiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKQp9CgpCdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikgewogIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpCn0KCkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikgewogIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKQogIH0KCiAgaWYgKGEgPT09IGIpIHJldHVybiAwCgogIHZhciB4ID0gYS5sZW5ndGgKICB2YXIgeSA9IGIubGVuZ3RoCgogIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7CiAgICBpZiAoYVtpXSAhPT0gYltpXSkgewogICAgICB4ID0gYVtpXQogICAgICB5ID0gYltpXQogICAgICBicmVhawogICAgfQogIH0KCiAgaWYgKHggPCB5KSByZXR1cm4gLTEKICBpZiAoeSA8IHgpIHJldHVybiAxCiAgcmV0dXJuIDAKfQoKQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykgewogIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7CiAgICBjYXNlICdoZXgnOgogICAgY2FzZSAndXRmOCc6CiAgICBjYXNlICd1dGYtOCc6CiAgICBjYXNlICdhc2NpaSc6CiAgICBjYXNlICdsYXRpbjEnOgogICAgY2FzZSAnYmluYXJ5JzoKICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICBjYXNlICd1Y3MyJzoKICAgIGNhc2UgJ3Vjcy0yJzoKICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgY2FzZSAndXRmLTE2bGUnOgogICAgICByZXR1cm4gdHJ1ZQogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlCiAgfQp9CgpCdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHsKICBpZiAoIWlzQXJyYXkobGlzdCkpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQogIH0KCiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApCiAgfQoKICB2YXIgaQogIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgbGVuZ3RoID0gMAogICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoCiAgICB9CiAgfQoKICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCkKICB2YXIgcG9zID0gMAogIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CiAgICB2YXIgYnVmID0gbGlzdFtpXQogICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJykKICAgIH0KICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKQogICAgcG9zICs9IGJ1Zi5sZW5ndGgKICB9CiAgcmV0dXJuIGJ1ZmZlcgp9CgpmdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7CiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7CiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aAogIH0KICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmCiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHsKICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aAogIH0KICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHsKICAgIHN0cmluZyA9ICcnICsgc3RyaW5nCiAgfQoKICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aAogIGlmIChsZW4gPT09IDApIHJldHVybiAwCgogIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvbgogIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCiAgZm9yICg7OykgewogICAgc3dpdGNoIChlbmNvZGluZykgewogICAgICBjYXNlICdhc2NpaSc6CiAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgcmV0dXJuIGxlbgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGgKICAgICAgY2FzZSAndWNzMic6CiAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICByZXR1cm4gbGVuICogMgogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBsZW4gPj4+IDEKICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aAogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4CiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKQogICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZQogICAgfQogIH0KfQpCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGgKCmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHsKICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZQoKICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0ICJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5CiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS4KCiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kCiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLgogIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sCiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uCiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7CiAgICBzdGFydCA9IDAKICB9CiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzIKICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LgogIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7CiAgICByZXR1cm4gJycKICB9CgogIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgewogICAgZW5kID0gdGhpcy5sZW5ndGgKICB9CgogIGlmIChlbmQgPD0gMCkgewogICAgcmV0dXJuICcnCiAgfQoKICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLgogIGVuZCA+Pj49IDAKICBzdGFydCA+Pj49IDAKCiAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgcmV0dXJuICcnCiAgfQoKICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JwoKICB3aGlsZSAodHJ1ZSkgewogICAgc3dpdGNoIChlbmNvZGluZykgewogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgY2FzZSAndXRmOCc6CiAgICAgIGNhc2UgJ3V0Zi04JzoKICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICdhc2NpaSc6CiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCiAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgY2FzZSAndWNzMic6CiAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQogICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkKICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKICAgIH0KICB9Cn0KCi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0Ci8vIEJ1ZmZlciBpbnN0YW5jZXMuCkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZQoKZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkgewogIHZhciBpID0gYltuXQogIGJbbl0gPSBiW21dCiAgYlttXSA9IGkKfQoKQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aAogIGlmIChsZW4gJSAyICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKQogIH0KICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7CiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKQogIH0KICByZXR1cm4gdGhpcwp9CgpCdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7CiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCiAgaWYgKGxlbiAlIDQgIT09IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDMpCiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMikKICB9CiAgcmV0dXJuIHRoaXMKfQoKQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aAogIGlmIChsZW4gJSA4ICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKQogIH0KICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7CiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KQogICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpCiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSkKICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KQogIH0KICByZXR1cm4gdGhpcwp9CgpCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkgewogIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDAKICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJycKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpCiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpCn0KCkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKQogIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZQogIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMAp9CgpCdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHsKICB2YXIgc3RyID0gJycKICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUwogIGlmICh0aGlzLmxlbmd0aCA+IDApIHsKICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpCiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnCiAgfQogIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nCn0KCkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCiAgfQoKICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkgewogICAgc3RhcnQgPSAwCiAgfQogIGlmIChlbmQgPT09IHVuZGVmaW5lZCkgewogICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDAKICB9CiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7CiAgICB0aGlzU3RhcnQgPSAwCiAgfQogIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aAogIH0KCiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JykKICB9CgogIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHsKICAgIHJldHVybiAwCiAgfQogIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkgewogICAgcmV0dXJuIC0xCiAgfQogIGlmIChzdGFydCA+PSBlbmQpIHsKICAgIHJldHVybiAxCiAgfQoKICBzdGFydCA+Pj49IDAKICBlbmQgPj4+PSAwCiAgdGhpc1N0YXJ0ID4+Pj0gMAogIHRoaXNFbmQgPj4+PSAwCgogIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwCgogIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydAogIHZhciB5ID0gZW5kIC0gc3RhcnQKICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSkKCiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpCiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZCkKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkgewogICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7CiAgICAgIHggPSB0aGlzQ29weVtpXQogICAgICB5ID0gdGFyZ2V0Q29weVtpXQogICAgICBicmVhawogICAgfQogIH0KCiAgaWYgKHggPCB5KSByZXR1cm4gLTEKICBpZiAoeSA8IHgpIHJldHVybiAxCiAgcmV0dXJuIDAKfQoKLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLAovLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLgovLwovLyBBcmd1bWVudHM6Ci8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoCi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyCi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMgovLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZwovLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZgpmdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2gKICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xCgogIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0CiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0CiAgICBieXRlT2Zmc2V0ID0gMAogIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHsKICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmCiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHsKICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMAogIH0KICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuCiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7CiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCAiZm9vIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyCiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSkKICB9CgogIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyCiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXQKICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7CiAgICBpZiAoZGlyKSByZXR1cm4gLTEKICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxCiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkgewogICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDAKICAgIGVsc2UgcmV0dXJuIC0xCiAgfQoKICAvLyBOb3JtYWxpemUgdmFsCiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKQogIH0KCiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2YKICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHsKICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHMKICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiAtMQogICAgfQogICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV0KICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJgogICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmIChkaXIpIHsKICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQogICAgICB9CiAgICB9CiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKICB9CgogIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpCn0KCmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICB2YXIgaW5kZXhTaXplID0gMQogIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoCiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGgKCiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHsKICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fAogICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHsKICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7CiAgICAgICAgcmV0dXJuIC0xCiAgICAgIH0KICAgICAgaW5kZXhTaXplID0gMgogICAgICBhcnJMZW5ndGggLz0gMgogICAgICB2YWxMZW5ndGggLz0gMgogICAgICBieXRlT2Zmc2V0IC89IDIKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkgewogICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkgewogICAgICByZXR1cm4gYnVmW2ldCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKQogICAgfQogIH0KCiAgdmFyIGkKICBpZiAoZGlyKSB7CiAgICB2YXIgZm91bmRJbmRleCA9IC0xCiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkgewogICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGkKICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplCiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4CiAgICAgICAgZm91bmRJbmRleCA9IC0xCiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGgKICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHZhciBmb3VuZCA9IHRydWUKICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykgewogICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHsKICAgICAgICAgIGZvdW5kID0gZmFsc2UKICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGkKICAgIH0KICB9CgogIHJldHVybiAtMQp9CgpCdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMQp9CgpCdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpCn0KCkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewogIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSkKfQoKZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDAKICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldAogIGlmICghbGVuZ3RoKSB7CiAgICBsZW5ndGggPSByZW1haW5pbmcKICB9IGVsc2UgewogICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCkKICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHsKICAgICAgbGVuZ3RoID0gcmVtYWluaW5nCiAgICB9CiAgfQoKICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0cwogIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoCiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpCgogIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7CiAgICBsZW5ndGggPSBzdHJMZW4gLyAyCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpCiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGkKICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZAogIH0KICByZXR1cm4gaQp9CgpmdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHsKICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKQogIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgewogICAgZW5jb2RpbmcgPSAndXRmOCcKICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICBvZmZzZXQgPSAwCiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpCiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgZW5jb2RpbmcgPSBvZmZzZXQKICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICBvZmZzZXQgPSAwCiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSkKICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHsKICAgIG9mZnNldCA9IG9mZnNldCB8IDAKICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7CiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDAKICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnCiAgICB9IGVsc2UgewogICAgICBlbmNvZGluZyA9IGxlbmd0aAogICAgICBsZW5ndGggPSB1bmRlZmluZWQKICAgIH0KICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzCiAgfSBlbHNlIHsKICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJwogICAgKQogIH0KCiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0CiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nCgogIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKQogIH0KCiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCcKCiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2UKICBmb3IgKDs7KSB7CiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGUKICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ3VjczInOgogICAgICBjYXNlICd1Y3MtMic6CiAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgZGVmYXVsdDoKICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlCiAgICB9CiAgfQp9CgpCdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7CiAgcmV0dXJuIHsKICAgIHR5cGU6ICdCdWZmZXInLAogICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApCiAgfQp9CgpmdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkgewogICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZikKICB9IGVsc2UgewogICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSkKICB9Cn0KCmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKQogIHZhciByZXMgPSBbXQoKICB2YXIgaSA9IHN0YXJ0CiAgd2hpbGUgKGkgPCBlbmQpIHsKICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV0KICAgIHZhciBjb2RlUG9pbnQgPSBudWxsCiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDQKICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzCiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMgogICAgICA6IDEKCiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7CiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQKCiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7CiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZQogICAgICAgICAgfQogICAgICAgICAgYnJlYWsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpCiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RikgewogICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYnJlYWsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQogICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKQogICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgNDoKICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdCiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpCiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkgewogICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkgewogICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhCiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGUKICAgICAgY29kZVBvaW50ID0gMHhGRkZECiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxCiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikgewogICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKQogICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMAogICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApCiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGCiAgICB9CgogICAgcmVzLnB1c2goY29kZVBvaW50KQogICAgaSArPSBieXRlc1BlclNlcXVlbmNlCiAgfQoKICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcykKfQoKLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoCi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy4KLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eQp2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDAKCmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykgewogIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aAogIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHsKICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKQogIH0KCiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCAiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkIi4KICB2YXIgcmVzID0gJycKICB2YXIgaSA9IDAKICB3aGlsZSAoaSA8IGxlbikgewogICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoCiAgICAgIFN0cmluZywKICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKQogICAgKQogIH0KICByZXR1cm4gcmVzCn0KCmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciByZXQgPSAnJwogIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpCiAgfQogIHJldHVybiByZXQKfQoKZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciByZXQgPSAnJwogIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSkKICB9CiAgcmV0dXJuIHJldAp9CgpmdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGgKCiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMAogIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW4KCiAgdmFyIG91dCA9ICcnCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIG91dCArPSB0b0hleChidWZbaV0pCiAgfQogIHJldHVybiBvdXQKfQoKZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZCkKICB2YXIgcmVzID0gJycKICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7CiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NikKICB9CiAgcmV0dXJuIHJlcwp9CgpCdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKICBzdGFydCA9IH5+c3RhcnQKICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kCgogIGlmIChzdGFydCA8IDApIHsKICAgIHN0YXJ0ICs9IGxlbgogICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwCiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikgewogICAgc3RhcnQgPSBsZW4KICB9CgogIGlmIChlbmQgPCAwKSB7CiAgICBlbmQgKz0gbGVuCiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMAogIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7CiAgICBlbmQgPSBsZW4KICB9CgogIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQKCiAgdmFyIG5ld0J1ZgogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKQogICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnQKICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCkKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkgewogICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF0KICAgIH0KICB9CgogIHJldHVybiBuZXdCdWYKfQoKLyoKICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuCiAqLwpmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkgewogIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpCiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciB2YWwgPSB0aGlzW29mZnNldF0KICB2YXIgbXVsID0gMQogIHZhciBpID0gMAogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAogIH0KCiAgcmV0dXJuIHZhbAp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCiAgfQoKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdCiAgdmFyIG11bCA9IDEKICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWwKICB9CgogIHJldHVybiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKQogIHJldHVybiB0aGlzW29mZnNldF0KfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQogIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8CiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHwKICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArCiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArCiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHwKICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKICAgIHRoaXNbb2Zmc2V0ICsgM10pCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciB2YWwgPSB0aGlzW29mZnNldF0KICB2YXIgbXVsID0gMQogIHZhciBpID0gMAogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAogIH0KICBtdWwgKj0gMHg4MAoKICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKICByZXR1cm4gdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciBpID0gYnl0ZUxlbmd0aAogIHZhciBtdWwgPSAxCiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXQogIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bAogIH0KICBtdWwgKj0gMHg4MAoKICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKICByZXR1cm4gdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpCiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKQogIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQogIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQogIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOCkKICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdKSB8CiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8CiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfAogICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8CiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAogICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfAogICAgKHRoaXNbb2Zmc2V0ICsgM10pCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQogIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCkKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCkKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KQp9CgpmdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignImJ1ZmZlciIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpCiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignInZhbHVlIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJykKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDAKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxCiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCkKICB9CgogIHZhciBtdWwgPSAxCiAgdmFyIGkgPSAwCiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGCiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRgogIH0KCiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDEKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKQogIH0KCiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMQogIHZhciBtdWwgPSAxCiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApCiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKQogIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgcmV0dXJuIG9mZnNldCArIDEKfQoKZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7CiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDEKICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7CiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PgogICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDgKICB9Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyAyCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKQogIH0KICByZXR1cm4gb2Zmc2V0ICsgMgp9CgpmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHsKICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDEKICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7CiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmCiAgfQp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCkKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpCiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNikKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpCiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZikKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgewogICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKQoKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KQogIH0KCiAgdmFyIGkgPSAwCiAgdmFyIG11bCA9IDEKICB2YXIgc3ViID0gMAogIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkgewogICAgICBzdWIgPSAxCiAgICB9CiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkKCiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdCkKICB9CgogIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKICB2YXIgbXVsID0gMQogIHZhciBzdWIgPSAwCiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHsKICAgICAgc3ViID0gMQogICAgfQogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRgogIH0KCiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApCiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKQogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMQogIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgcmV0dXJuIG9mZnNldCArIDEKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyAyCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKQogIH0gZWxzZSB7CiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDIKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKQogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCkKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKQogIH0gZWxzZSB7CiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDQKfQoKZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKQp9CgpmdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOCkKICB9CiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpCiAgcmV0dXJuIG9mZnNldCArIDQKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCkKfQoKZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIHsKICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpCiAgfQogIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KQogIHJldHVybiBvZmZzZXQgKyA4Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpCn0KCi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aCkKQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkgewogIGlmICghc3RhcnQpIHN0YXJ0ID0gMAogIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGgKICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoCiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwCiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0CgogIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZQogIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMAogIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMAoKICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zCiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKQogIH0KICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpCiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpCgogIC8vIEFyZSB3ZSBvb2I/CiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aAogIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkgewogICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQKICB9CgogIHZhciBsZW4gPSBlbmQgLSBzdGFydAogIHZhciBpCgogIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkgewogICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kCiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkgewogICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XQogICAgfQogIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnQKICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkgewogICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XQogICAgfQogIH0gZWxzZSB7CiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbCgKICAgICAgdGFyZ2V0LAogICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksCiAgICAgIHRhcmdldFN0YXJ0CiAgICApCiAgfQoKICByZXR1cm4gbGVuCn0KCi8vIFVzYWdlOgovLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSkKLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pCi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKQpCdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7CiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczoKICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHsKICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVuY29kaW5nID0gc3RhcnQKICAgICAgc3RhcnQgPSAwCiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVuY29kaW5nID0gZW5kCiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCiAgICB9CiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkgewogICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApCiAgICAgIGlmIChjb2RlIDwgMjU2KSB7CiAgICAgICAgdmFsID0gY29kZQogICAgICB9CiAgICB9CiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKQogICAgfQogICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpCiAgICB9CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgewogICAgdmFsID0gdmFsICYgMjU1CiAgfQoKICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS4KICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKQogIH0KCiAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgcmV0dXJuIHRoaXMKICB9CgogIHN0YXJ0ID0gc3RhcnQgPj4+IDAKICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwCgogIGlmICghdmFsKSB2YWwgPSAwCgogIHZhciBpCiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CiAgICAgIHRoaXNbaV0gPSB2YWwKICAgIH0KICB9IGVsc2UgewogICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbCkKICAgICAgPyB2YWwKICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpCiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoCiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkgewogICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXQogICAgfQogIH0KCiAgcmV0dXJuIHRoaXMKfQoKLy8gSEVMUEVSIEZVTkNUSU9OUwovLyA9PT09PT09PT09PT09PT09Cgp2YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXC8wLTlBLVphLXotX10vZwoKZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikgewogIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcbiBhbmQgXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3QKICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpCiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJwogIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnCiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90CiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7CiAgICBzdHIgPSBzdHIgKyAnPScKICB9CiAgcmV0dXJuIHN0cgp9CgpmdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHsKICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpCiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpCn0KCmZ1bmN0aW9uIHRvSGV4IChuKSB7CiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpCiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpCn0KCmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7CiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eQogIHZhciBjb2RlUG9pbnQKICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aAogIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbAogIHZhciBieXRlcyA9IFtdCgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpCgogICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudAogICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHsKICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7CiAgICAgICAgLy8gbm8gbGVhZCB5ZXQKICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7CiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsCiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7CiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkCiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQoKICAgICAgICAvLyB2YWxpZCBsZWFkCiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludAoKICAgICAgICBjb250aW51ZQogICAgICB9CgogICAgICAvLyAyIGxlYWRzIGluIGEgcm93CiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHsKICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXIKICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMAogICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7CiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpCiAgICB9CgogICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGwKCiAgICAvLyBlbmNvZGUgdXRmOAogICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHsKICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KQogICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWsKICAgICAgYnl0ZXMucHVzaCgKICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCwKICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MAogICAgICApCiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHsKICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goCiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsCiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLAogICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCiAgICAgICkKICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHsKICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goCiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLAogICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCwKICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsCiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKICAgICAgKQogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKQogICAgfQogIH0KCiAgcmV0dXJuIGJ5dGVzCn0KCmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7CiAgdmFyIGJ5dGVBcnJheSA9IFtdCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLgogICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKQogIH0KICByZXR1cm4gYnl0ZUFycmF5Cn0KCmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7CiAgdmFyIGMsIGhpLCBsbwogIHZhciBieXRlQXJyYXkgPSBbXQogIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWsKCiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSkKICAgIGhpID0gYyA+PiA4CiAgICBsbyA9IGMgJSAyNTYKICAgIGJ5dGVBcnJheS5wdXNoKGxvKQogICAgYnl0ZUFycmF5LnB1c2goaGkpCiAgfQoKICByZXR1cm4gYnl0ZUFycmF5Cn0KCmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikgewogIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSkKfQoKZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVhawogICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldCiAgfQogIHJldHVybiBpCn0KCmZ1bmN0aW9uIGlzbmFuICh2YWwpIHsKICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmUKfQoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiYmFzZTY0LWpzIjozLCJpZWVlNzU0IjoxOCwiaXNhcnJheSI6OH1dLDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsKCm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nOwp9OwoKfSx7fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIFBvbHlmaWxsIGZvciBjcmVhdGluZyBDdXN0b21FdmVudHMgb24gSUU5LzEwLzExCgovLyBjb2RlIHB1bGxlZCBmcm9tOgovLyBodHRwczovL2dpdGh1Yi5jb20vZDR0b2NjaGluaS9jdXN0b21ldmVudC1wb2x5ZmlsbAovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQjUG9seWZpbGwKCihmdW5jdGlvbigpIHsKICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIHJldHVybjsKICB9CgogIHRyeSB7CiAgICB2YXIgY2UgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0ZXN0JywgeyBjYW5jZWxhYmxlOiB0cnVlIH0pOwogICAgY2UucHJldmVudERlZmF1bHQoKTsKICAgIGlmIChjZS5kZWZhdWx0UHJldmVudGVkICE9PSB0cnVlKSB7CiAgICAgIC8vIElFIGhhcyBwcm9ibGVtcyB3aXRoIC5wcmV2ZW50RGVmYXVsdCgpIG9uIGN1c3RvbSBldmVudHMKICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMzM0OTE5MQogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBwcmV2ZW50IGRlZmF1bHQnKTsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICB2YXIgQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbihldmVudCwgcGFyYW1zKSB7CiAgICAgIHZhciBldnQsIG9yaWdQcmV2ZW50OwogICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307CiAgICAgIHBhcmFtcy5idWJibGVzID0gISFwYXJhbXMuYnViYmxlczsKICAgICAgcGFyYW1zLmNhbmNlbGFibGUgPSAhIXBhcmFtcy5jYW5jZWxhYmxlOwoKICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7CiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoCiAgICAgICAgZXZlbnQsCiAgICAgICAgcGFyYW1zLmJ1YmJsZXMsCiAgICAgICAgcGFyYW1zLmNhbmNlbGFibGUsCiAgICAgICAgcGFyYW1zLmRldGFpbAogICAgICApOwogICAgICBvcmlnUHJldmVudCA9IGV2dC5wcmV2ZW50RGVmYXVsdDsKICAgICAgZXZ0LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgb3JpZ1ByZXZlbnQuY2FsbCh0aGlzKTsKICAgICAgICB0cnkgewogICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkZWZhdWx0UHJldmVudGVkJywgewogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfTsKICAgICAgcmV0dXJuIGV2dDsKICAgIH07CgogICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTsKICAgIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50OyAvLyBleHBvc2UgZGVmaW5pdGlvbiB0byB3aW5kb3cKICB9Cn0pKCk7Cgp9LHt9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CgovKioKICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLgogKgogKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuCiAqLwoKZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygnLi9kZWJ1ZycpOwpleHBvcnRzLmxvZyA9IGxvZzsKZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJnczsKZXhwb3J0cy5zYXZlID0gc2F2ZTsKZXhwb3J0cy5sb2FkID0gbG9hZDsKZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7CmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUKICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlCiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWwKICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTsKCi8qKgogKiBDb2xvcnMuCiAqLwoKZXhwb3J0cy5jb2xvcnMgPSBbCiAgJ2xpZ2h0c2VhZ3JlZW4nLAogICdmb3Jlc3RncmVlbicsCiAgJ2dvbGRlbnJvZCcsCiAgJ2RvZGdlcmJsdWUnLAogICdkYXJrb3JjaGlkJywKICAnY3JpbXNvbicKXTsKCi8qKgogKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLAogKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd24KICogdG8gc3VwcG9ydCAiJWMiIENTUyBjdXN0b21pemF0aW9ucy4KICoKICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnMKICovCgpmdW5jdGlvbiB1c2VDb2xvcnMoKSB7CiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzMKICByZXR1cm4gKCdXZWJraXRBcHBlYXJhbmNlJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHx8CiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczCiAgICAod2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCAoY29uc29sZS5leGNlcHRpb24gJiYgY29uc29sZS50YWJsZSkpKSB8fAogICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/CiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXMKICAgIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcLyhcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpOwp9CgovKioKICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LgogKi8KCmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikgewogIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTsKfTsKCgovKioKICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLgogKgogKiBAYXBpIHB1YmxpYwogKi8KCmZ1bmN0aW9uIGZvcm1hdEFyZ3MoKSB7CiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzOwoKICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJykKICAgICsgdGhpcy5uYW1lc3BhY2UKICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKQogICAgKyBhcmdzWzBdCiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJyk7CgogIGlmICghdXNlQ29sb3JzKSByZXR1cm4gYXJnczsKCiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yOwogIGFyZ3MgPSBbYXJnc1swXSwgYywgJ2NvbG9yOiBpbmhlcml0J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTsKCiAgLy8gdGhlIGZpbmFsICIlYyIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyCiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0bwogIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50bwogIHZhciBpbmRleCA9IDA7CiAgdmFyIGxhc3RDID0gMDsKICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16JV0vZywgZnVuY3Rpb24obWF0Y2gpIHsKICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuOwogICAgaW5kZXgrKzsKICAgIGlmICgnJWMnID09PSBtYXRjaCkgewogICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWMKICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bikKICAgICAgbGFzdEMgPSBpbmRleDsKICAgIH0KICB9KTsKCiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpOwogIHJldHVybiBhcmdzOwp9CgovKioKICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuCiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSAiZnVuY3Rpb24iLgogKgogKiBAYXBpIHB1YmxpYwogKi8KCmZ1bmN0aW9uIGxvZygpIHsKICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZQogIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknCiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZQogICAgJiYgY29uc29sZS5sb2cKICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpOwp9CgovKioKICogU2F2ZSBgbmFtZXNwYWNlc2AuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzCiAqIEBhcGkgcHJpdmF0ZQogKi8KCmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykgewogIHRyeSB7CiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7CiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpOwogICAgfSBlbHNlIHsKICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlczsKICAgIH0KICB9IGNhdGNoKGUpIHt9Cn0KCi8qKgogKiBMb2FkIGBuYW1lc3BhY2VzYC4KICoKICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2RlcwogKiBAYXBpIHByaXZhdGUKICovCgpmdW5jdGlvbiBsb2FkKCkgewogIHZhciByOwogIHRyeSB7CiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnOwogIH0gY2F0Y2goZSkge30KICByZXR1cm4gcjsKfQoKLyoqCiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuCiAqLwoKZXhwb3J0cy5lbmFibGUobG9hZCgpKTsKCi8qKgogKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuCiAqCiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93cwogKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZQogKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LgogKgogKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9CiAqIEBhcGkgcHJpdmF0ZQogKi8KCmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpewogIHRyeSB7CiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTsKICB9IGNhdGNoIChlKSB7fQp9Cgp9LHsiLi9kZWJ1ZyI6MTF9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CgovKioKICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlcgogKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLgogKgogKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuCiAqLwoKZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVidWc7CmV4cG9ydHMuY29lcmNlID0gY29lcmNlOwpleHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlOwpleHBvcnRzLmVuYWJsZSA9IGVuYWJsZTsKZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDsKCi8qKgogKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC4KICovCgpleHBvcnRzLm5hbWVzID0gW107CmV4cG9ydHMuc2tpcHMgPSBbXTsKCi8qKgogKiBNYXAgb2Ygc3BlY2lhbCAiJW4iIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyAiZm9ybWF0IiBhcmd1bWVudC4KICoKICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gIm4iLgogKi8KCmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9OwoKLyoqCiAqIFByZXZpb3VzbHkgYXNzaWduZWQgY29sb3IuCiAqLwoKdmFyIHByZXZDb2xvciA9IDA7CgovKioKICogU2VsZWN0IGEgY29sb3IuCiAqCiAqIEByZXR1cm4ge051bWJlcn0KICogQGFwaSBwcml2YXRlCiAqLwoKZnVuY3Rpb24gc2VsZWN0Q29sb3IoKSB7CiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTsKfQoKLyoqCiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLgogKgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlCiAqIEByZXR1cm4ge0Z1bmN0aW9ufQogKiBAYXBpIHB1YmxpYwogKi8KCmZ1bmN0aW9uIGRlYnVnKG5hbWVzcGFjZSkgewoKICAvLyBkZWZpbmUgdGhlIGBkaXNhYmxlZGAgdmVyc2lvbgogIGZ1bmN0aW9uIGRpc2FibGVkKCkgewogIH0KICBkaXNhYmxlZC5lbmFibGVkID0gZmFsc2U7CgogIC8vIGRlZmluZSB0aGUgYGVuYWJsZWRgIHZlcnNpb24KICBmdW5jdGlvbiBlbmFibGVkKCkgewoKICAgIHZhciBzZWxmID0gZW5hYmxlZDsKCiAgICAvLyBhZGQgdGhlIGBjb2xvcmAgaWYgbm90IHNldAogICAgaWYgKG51bGwgPT0gc2VsZi51c2VDb2xvcnMpIHNlbGYudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTsKICAgIGlmIChudWxsID09IHNlbGYuY29sb3IgJiYgc2VsZi51c2VDb2xvcnMpIHNlbGYuY29sb3IgPSBzZWxlY3RDb2xvcigpOwoKICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKCiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7CgogICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkgewogICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlbwogICAgICBhcmdzID0gWyclbyddLmNvbmNhdChhcmdzKTsKICAgIH0KCiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9ucwogICAgdmFyIGluZGV4ID0gMDsKICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EteiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7CiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXgKICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7CiAgICAgIGluZGV4Kys7CiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTsKICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHsKICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07CiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpOwoKICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgCiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgIGluZGV4LS07CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoOwogICAgfSk7CgogICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmZvcm1hdEFyZ3MpIHsKICAgICAgYXJncyA9IGV4cG9ydHMuZm9ybWF0QXJncy5hcHBseShzZWxmLCBhcmdzKTsKICAgIH0KICAgIHZhciBsb2dGbiA9IGVuYWJsZWQubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTsKICB9CiAgZW5hYmxlZC5lbmFibGVkID0gdHJ1ZTsKCiAgdmFyIGZuID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSkgPyBlbmFibGVkIDogZGlzYWJsZWQ7CgogIGZuLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTsKCiAgcmV0dXJuIGZuOwp9CgovKioKICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2RlcwogKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLgogKgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlcwogKiBAYXBpIHB1YmxpYwogKi8KCmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7CiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpOwoKICB2YXIgc3BsaXQgPSAobmFtZXNwYWNlcyB8fCAnJykuc3BsaXQoL1tccyxdKy8pOwogIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5ncwogICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1wqL2csICcuKj8nKTsKICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHsKICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTsKICAgIH0gZWxzZSB7CiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTsKICAgIH0KICB9Cn0KCi8qKgogKiBEaXNhYmxlIGRlYnVnIG91dHB1dC4KICoKICogQGFwaSBwdWJsaWMKICovCgpmdW5jdGlvbiBkaXNhYmxlKCkgewogIGV4cG9ydHMuZW5hYmxlKCcnKTsKfQoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKICogQHJldHVybiB7Qm9vbGVhbn0KICogQGFwaSBwdWJsaWMKICovCgpmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHsKICB2YXIgaSwgbGVuOwogIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCi8qKgogKiBDb2VyY2UgYHZhbGAuCiAqCiAqIEBwYXJhbSB7TWl4ZWR9IHZhbAogKiBAcmV0dXJuIHtNaXhlZH0KICogQGFwaSBwcml2YXRlCiAqLwoKZnVuY3Rpb24gY29lcmNlKHZhbCkgewogIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTsKICByZXR1cm4gdmFsOwp9Cgp9LHt9XSwxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGlzT2JqID0gX2RlcmVxXygnaXMtb2JqJyk7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKCmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkgewoJaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgewoJCXRocm93IG5ldyBUeXBlRXJyb3IoJ1NvdXJjZXMgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7Cgl9CgoJcmV0dXJuIE9iamVjdCh2YWwpOwp9CgpmdW5jdGlvbiBhc3NpZ25LZXkodG8sIGZyb20sIGtleSkgewoJdmFyIHZhbCA9IGZyb21ba2V5XTsKCglpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsKSB7CgkJcmV0dXJuOwoJfQoKCWlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRvLCBrZXkpKSB7CgkJaWYgKHRvW2tleV0gPT09IHVuZGVmaW5lZCB8fCB0b1trZXldID09PSBudWxsKSB7CgkJCXRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCAoJyArIGtleSArICcpJyk7CgkJfQoJfQoKCWlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0bywga2V5KSB8fCAhaXNPYmoodmFsKSkgewoJCXRvW2tleV0gPSB2YWw7Cgl9IGVsc2UgewoJCXRvW2tleV0gPSBhc3NpZ24oT2JqZWN0KHRvW2tleV0pLCBmcm9tW2tleV0pOwoJfQp9CgpmdW5jdGlvbiBhc3NpZ24odG8sIGZyb20pIHsKCWlmICh0byA9PT0gZnJvbSkgewoJCXJldHVybiB0bzsKCX0KCglmcm9tID0gT2JqZWN0KGZyb20pOwoKCWZvciAodmFyIGtleSBpbiBmcm9tKSB7CgkJaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkgewoJCQlhc3NpZ25LZXkodG8sIGZyb20sIGtleSk7CgkJfQoJfQoKCWlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CgkJdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pOwoKCQlmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHsKCQkJaWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkgewoJCQkJYXNzaWduS2V5KHRvLCBmcm9tLCBzeW1ib2xzW2ldKTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gdG87Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVlcEFzc2lnbih0YXJnZXQpIHsKCXRhcmdldCA9IHRvT2JqZWN0KHRhcmdldCk7CgoJZm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHsKCQlhc3NpZ24odGFyZ2V0LCBhcmd1bWVudHNbc10pOwoJfQoKCXJldHVybiB0YXJnZXQ7Cn07Cgp9LHsiaXMtb2JqIjoyM31dLDEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyohIChDKSBXZWJSZWZsZWN0aW9uIE1pdCBTdHlsZSBMaWNlbnNlICovCihmdW5jdGlvbih0LG4scixpKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gc3QoZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspZ3QoZVtuXSx0KX1mdW5jdGlvbiBvdChlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI7dDxuO3QrKylyPWVbdF0saXQocix3W2F0KHIpXSl9ZnVuY3Rpb24gdXQoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe0YodCkmJihndCh0LGUpLHN0KHQucXVlcnlTZWxlY3RvckFsbChFKSxlKSl9fWZ1bmN0aW9uIGF0KGUpe3ZhciB0PVIuY2FsbChlLCJpcyIpLG49ZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpLHI9eC5jYWxsKGIsdD9tK3QudG9VcHBlckNhc2UoKTp2K24pO3JldHVybiB0JiYtMTxyJiYhZnQobix0KT8tMTpyfWZ1bmN0aW9uIGZ0KGUsdCl7cmV0dXJuLTE8RS5pbmRleE9mKGUrJ1tpcz0iJyt0KyciXScpfWZ1bmN0aW9uIGx0KGUpe3ZhciB0PWUuY3VycmVudFRhcmdldCxuPWUuYXR0ckNoYW5nZSxyPWUuYXR0ck5hbWUsaT1lLnRhcmdldDtZJiYoIWl8fGk9PT10KSYmdC5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2smJnIhPT0ic3R5bGUiJiZlLnByZXZWYWx1ZSE9PWUubmV3VmFsdWUmJnQuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHIsbj09PWVbZl0/bnVsbDplLnByZXZWYWx1ZSxuPT09ZVtjXT9udWxsOmUubmV3VmFsdWUpfWZ1bmN0aW9uIGN0KGUpe3ZhciB0PXV0KGUpO3JldHVybiBmdW5jdGlvbihlKXskLnB1c2godCxlLnRhcmdldCl9fWZ1bmN0aW9uIGh0KGUpe0cmJihHPSExLGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHAsaHQpKSxzdCgoZS50YXJnZXR8fG4pLnF1ZXJ5U2VsZWN0b3JBbGwoRSksZS5kZXRhaWw9PT11P3U6byksaiYmdnQoKX1mdW5jdGlvbiBwdChlLHQpe3ZhciBuPXRoaXM7VS5jYWxsKG4sZSx0KSxaLmNhbGwobix7dGFyZ2V0Om59KX1mdW5jdGlvbiBkdChlLHQpe1AoZSx0KSxudD9udC5vYnNlcnZlKGUsWCk6KFEmJihlLnNldEF0dHJpYnV0ZT1wdCxlW3NdPXR0KGUpLGUuYWRkRXZlbnRMaXN0ZW5lcihkLFopKSxlLmFkZEV2ZW50TGlzdGVuZXIoaCxsdCkpLGUuY3JlYXRlZENhbGxiYWNrJiZZJiYoZS5jcmVhdGVkPSEwLGUuY3JlYXRlZENhbGxiYWNrKCksZS5jcmVhdGVkPSExKX1mdW5jdGlvbiB2dCgpe2Zvcih2YXIgZSx0PTAsbj1JLmxlbmd0aDt0PG47dCsrKWU9SVt0XSxTLmNvbnRhaW5zKGUpfHwobi0tLEkuc3BsaWNlKHQtLSwxKSxndChlLHUpKX1mdW5jdGlvbiBtdChlKXt0aHJvdyBuZXcgRXJyb3IoIkEgIitlKyIgdHlwZSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQiKX1mdW5jdGlvbiBndChlLHQpe3ZhciBuLHI9YXQoZSk7LTE8ciYmKHJ0KGUsd1tyXSkscj0wLHQ9PT1vJiYhZVtvXT8oZVt1XT0hMSxlW29dPSEwLHI9MSxqJiZ4LmNhbGwoSSxlKTwwJiZJLnB1c2goZSkpOnQ9PT11JiYhZVt1XSYmKGVbb109ITEsZVt1XT0hMCxyPTEpLHImJihuPWVbdCsiQ2FsbGJhY2siXSkmJm4uY2FsbChlKSl9aWYoaSBpbiBuKXJldHVybjt2YXIgcz0iX18iK2krKE1hdGgucmFuZG9tKCkqMWU1Pj4wKSxvPSJhdHRhY2hlZCIsdT0iZGV0YWNoZWQiLGE9ImV4dGVuZHMiLGY9IkFERElUSU9OIixsPSJNT0RJRklDQVRJT04iLGM9IlJFTU9WQUwiLGg9IkRPTUF0dHJNb2RpZmllZCIscD0iRE9NQ29udGVudExvYWRlZCIsZD0iRE9NU3VidHJlZU1vZGlmaWVkIix2PSI8IixtPSI9IixnPS9eW0EtWl1bQS1aMC05XSooPzotW0EtWjAtOV0rKSskLyx5PVsiQU5OT1RBVElPTi1YTUwiLCJDT0xPUi1QUk9GSUxFIiwiRk9OVC1GQUNFIiwiRk9OVC1GQUNFLVNSQyIsIkZPTlQtRkFDRS1VUkkiLCJGT05ULUZBQ0UtRk9STUFUIiwiRk9OVC1GQUNFLU5BTUUiLCJNSVNTSU5HLUdMWVBIIl0sYj1bXSx3PVtdLEU9IiIsUz1uLmRvY3VtZW50RWxlbWVudCx4PWIuaW5kZXhPZnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMubGVuZ3RoO3QtLSYmdGhpc1t0XSE9PWU7KTtyZXR1cm4gdH0sVD1yLnByb3RvdHlwZSxOPVQuaGFzT3duUHJvcGVydHksQz1ULmlzUHJvdG90eXBlT2Ysaz1yLmRlZmluZVByb3BlcnR5LEw9ci5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsQT1yLmdldE93blByb3BlcnR5TmFtZXMsTz1yLmdldFByb3RvdHlwZU9mLE09ci5zZXRQcm90b3R5cGVPZixfPSEhci5fX3Byb3RvX18sRD1yLmNyZWF0ZXx8ZnVuY3Rpb24geXQoZSl7cmV0dXJuIGU/KHl0LnByb3RvdHlwZT1lLG5ldyB5dCk6dGhpc30sUD1NfHwoXz9mdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9OkEmJkw/ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuLHI9QSh0KSxpPTAscz1yLmxlbmd0aDtpPHM7aSsrKW49cltpXSxOLmNhbGwoZSxuKXx8ayhlLG4sTCh0LG4pKX1yZXR1cm4gZnVuY3Rpb24odCxuKXtkbyBlKHQsbik7d2hpbGUoKG49TyhuKSkmJiFDLmNhbGwobix0KSk7cmV0dXJuIHR9fSgpOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpZVtuXT10W25dO3JldHVybiBlfSksSD10Lk11dGF0aW9uT2JzZXJ2ZXJ8fHQuV2ViS2l0TXV0YXRpb25PYnNlcnZlcixCPSh0LkhUTUxFbGVtZW50fHx0LkVsZW1lbnR8fHQuTm9kZSkucHJvdG90eXBlLGo9IUMuY2FsbChCLFMpLEY9aj9mdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlVHlwZT09PTF9OmZ1bmN0aW9uKGUpe3JldHVybiBDLmNhbGwoQixlKX0sST1qJiZbXSxxPUIuY2xvbmVOb2RlLFI9Qi5nZXRBdHRyaWJ1dGUsVT1CLnNldEF0dHJpYnV0ZSx6PUIucmVtb3ZlQXR0cmlidXRlLFc9bi5jcmVhdGVFbGVtZW50LFg9SCYme2F0dHJpYnV0ZXM6ITAsY2hhcmFjdGVyRGF0YTohMCxhdHRyaWJ1dGVPbGRWYWx1ZTohMH0sVj1IfHxmdW5jdGlvbihlKXtRPSExLFMucmVtb3ZlRXZlbnRMaXN0ZW5lcihoLFYpfSwkLEo9dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7c2V0VGltZW91dChlLDEwKX0sSz0hMSxRPSEwLEc9ITAsWT0hMCxaLGV0LHR0LG50LHJ0LGl0O018fF8/KHJ0PWZ1bmN0aW9uKGUsdCl7Qy5jYWxsKHQsZSl8fGR0KGUsdCl9LGl0PWR0KToocnQ9ZnVuY3Rpb24oZSx0KXtlW3NdfHwoZVtzXT1yKCEwKSxkdChlLHQpKX0saXQ9cnQpLGo/KFE9ITEsZnVuY3Rpb24oKXt2YXIgdD1MKEIsImFkZEV2ZW50TGlzdGVuZXIiKSxuPXQudmFsdWUscj1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQ3VzdG9tRXZlbnQoaCx7YnViYmxlczohMH0pO3QuYXR0ck5hbWU9ZSx0LnByZXZWYWx1ZT1SLmNhbGwodGhpcyxlKSx0Lm5ld1ZhbHVlPW51bGwsdFtjXT10LmF0dHJDaGFuZ2U9Mix6LmNhbGwodGhpcyxlKSx0aGlzLmRpc3BhdGNoRXZlbnQodCl9LGk9ZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzLmhhc0F0dHJpYnV0ZSh0KSxpPXImJlIuY2FsbCh0aGlzLHQpO2U9bmV3IEN1c3RvbUV2ZW50KGgse2J1YmJsZXM6ITB9KSxVLmNhbGwodGhpcyx0LG4pLGUuYXR0ck5hbWU9dCxlLnByZXZWYWx1ZT1yP2k6bnVsbCxlLm5ld1ZhbHVlPW4scj9lW2xdPWUuYXR0ckNoYW5nZT0xOmVbZl09ZS5hdHRyQ2hhbmdlPTAsdGhpcy5kaXNwYXRjaEV2ZW50KGUpfSxvPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY3VycmVudFRhcmdldCxuPXRbc10scj1lLnByb3BlcnR5TmFtZSxpO24uaGFzT3duUHJvcGVydHkocikmJihuPW5bcl0saT1uZXcgQ3VzdG9tRXZlbnQoaCx7YnViYmxlczohMH0pLGkuYXR0ck5hbWU9bi5uYW1lLGkucHJldlZhbHVlPW4udmFsdWV8fG51bGwsaS5uZXdWYWx1ZT1uLnZhbHVlPXRbcl18fG51bGwsaS5wcmV2VmFsdWU9PW51bGw/aVtmXT1pLmF0dHJDaGFuZ2U9MDppW2xdPWkuYXR0ckNoYW5nZT0xLHQuZGlzcGF0Y2hFdmVudChpKSl9O3QudmFsdWU9ZnVuY3Rpb24oZSx0LHUpe2U9PT1oJiZ0aGlzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayYmdGhpcy5zZXRBdHRyaWJ1dGUhPT1pJiYodGhpc1tzXT17Y2xhc3NOYW1lOntuYW1lOiJjbGFzcyIsdmFsdWU6dGhpcy5jbGFzc05hbWV9fSx0aGlzLnNldEF0dHJpYnV0ZT1pLHRoaXMucmVtb3ZlQXR0cmlidXRlPXIsbi5jYWxsKHRoaXMsInByb3BlcnR5Y2hhbmdlIixvKSksbi5jYWxsKHRoaXMsZSx0LHUpfSxrKEIsImFkZEV2ZW50TGlzdGVuZXIiLHQpfSgpKTpIfHwoUy5hZGRFdmVudExpc3RlbmVyKGgsViksUy5zZXRBdHRyaWJ1dGUocywxKSxTLnJlbW92ZUF0dHJpYnV0ZShzKSxRJiYoWj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG4scixpO2lmKHQ9PT1lLnRhcmdldCl7bj10W3NdLHRbc109cj10dCh0KTtmb3IoaSBpbiByKXtpZighKGkgaW4gbikpcmV0dXJuIGV0KDAsdCxpLG5baV0scltpXSxmKTtpZihyW2ldIT09bltpXSlyZXR1cm4gZXQoMSx0LGksbltpXSxyW2ldLGwpfWZvcihpIGluIG4paWYoIShpIGluIHIpKXJldHVybiBldCgyLHQsaSxuW2ldLHJbaV0sYyl9fSxldD1mdW5jdGlvbihlLHQsbixyLGkscyl7dmFyIG89e2F0dHJDaGFuZ2U6ZSxjdXJyZW50VGFyZ2V0OnQsYXR0ck5hbWU6bixwcmV2VmFsdWU6cixuZXdWYWx1ZTppfTtvW3NdPWUsbHQobyl9LHR0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHI9e30saT1lLmF0dHJpYnV0ZXMscz0wLG89aS5sZW5ndGg7czxvO3MrKyl0PWlbc10sbj10Lm5hbWUsbiE9PSJzZXRBdHRyaWJ1dGUiJiYocltuXT10LnZhbHVlKTtyZXR1cm4gcn0pKSxuW2ldPWZ1bmN0aW9uKHQscil7Yz10LnRvVXBwZXJDYXNlKCksS3x8KEs9ITAsSD8obnQ9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7dChlW24rK10pKTt9cmV0dXJuIG5ldyBIKGZ1bmN0aW9uKHIpe2Zvcih2YXIgaSxzLG8sdT0wLGE9ci5sZW5ndGg7dTxhO3UrKylpPXJbdV0saS50eXBlPT09ImNoaWxkTGlzdCI/KG4oaS5hZGRlZE5vZGVzLGUpLG4oaS5yZW1vdmVkTm9kZXMsdCkpOihzPWkudGFyZ2V0LFkmJnMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJiZpLmF0dHJpYnV0ZU5hbWUhPT0ic3R5bGUiJiYobz1SLmNhbGwocyxpLmF0dHJpYnV0ZU5hbWUpLG8hPT1pLm9sZFZhbHVlJiZzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhpLmF0dHJpYnV0ZU5hbWUsaS5vbGRWYWx1ZSxvKSkpfSl9KHV0KG8pLHV0KHUpKSxudC5vYnNlcnZlKG4se2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfSkpOigkPVtdLEooZnVuY3Rpb24gZCgpe3doaWxlKCQubGVuZ3RoKSQuc2hpZnQoKS5jYWxsKG51bGwsJC5zaGlmdCgpKTtKKGQpfSksbi5hZGRFdmVudExpc3RlbmVyKCJET01Ob2RlSW5zZXJ0ZWQiLGN0KG8pKSxuLmFkZEV2ZW50TGlzdGVuZXIoIkRPTU5vZGVSZW1vdmVkIixjdCh1KSkpLG4uYWRkRXZlbnRMaXN0ZW5lcihwLGh0KSxuLmFkZEV2ZW50TGlzdGVuZXIoInJlYWR5c3RhdGVjaGFuZ2UiLGh0KSxuLmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1XLmFwcGx5KG4sYXJndW1lbnRzKSxpPSIiK2Uscz14LmNhbGwoYiwodD9tOnYpKyh0fHxpKS50b1VwcGVyQ2FzZSgpKSxvPS0xPHM7cmV0dXJuIHQmJihyLnNldEF0dHJpYnV0ZSgiaXMiLHQ9dC50b0xvd2VyQ2FzZSgpKSxvJiYobz1mdChpLnRvVXBwZXJDYXNlKCksdCkpKSxZPSFuLmNyZWF0ZUVsZW1lbnQuaW5uZXJIVE1MSGVscGVyLG8mJml0KHIsd1tzXSkscn0sQi5jbG9uZU5vZGU9ZnVuY3Rpb24oZSl7dmFyIHQ9cS5jYWxsKHRoaXMsISFlKSxuPWF0KHQpO3JldHVybi0xPG4mJml0KHQsd1tuXSksZSYmb3QodC5xdWVyeVNlbGVjdG9yQWxsKEUpKSx0fSksLTI8eC5jYWxsKGIsbStjKSt4LmNhbGwoYix2K2MpJiZtdCh0KTtpZighZy50ZXN0KGMpfHwtMTx4LmNhbGwoeSxjKSl0aHJvdyBuZXcgRXJyb3IoIlRoZSB0eXBlICIrdCsiIGlzIGludmFsaWQiKTt2YXIgaT1mdW5jdGlvbigpe3JldHVybiBmP24uY3JlYXRlRWxlbWVudChsLGMpOm4uY3JlYXRlRWxlbWVudChsKX0scz1yfHxULGY9Ti5jYWxsKHMsYSksbD1mP3JbYV0udG9VcHBlckNhc2UoKTpjLGMsaDtyZXR1cm4gZiYmLTE8eC5jYWxsKGIsditsKSYmbXQobCksaD1iLnB1c2goKGY/bTp2KStjKS0xLEU9RS5jb25jYXQoRS5sZW5ndGg/IiwiOiIiLGY/bCsnW2lzPSInK3QudG9Mb3dlckNhc2UoKSsnIl0nOmwpLGkucHJvdG90eXBlPXdbaF09Ti5jYWxsKHMsInByb3RvdHlwZSIpP3MucHJvdG90eXBlOkQoQiksc3Qobi5xdWVyeVNlbGVjdG9yQWxsKEUpLG8pLGl9fSkod2luZG93LGRvY3VtZW50LE9iamVjdCwicmVnaXN0ZXJFbGVtZW50Iik7Cn0se31dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkdHlwZSkgewogIHN3aXRjaCAoZHR5cGUpIHsKICAgIGNhc2UgJ2ludDgnOgogICAgICByZXR1cm4gSW50OEFycmF5CiAgICBjYXNlICdpbnQxNic6CiAgICAgIHJldHVybiBJbnQxNkFycmF5CiAgICBjYXNlICdpbnQzMic6CiAgICAgIHJldHVybiBJbnQzMkFycmF5CiAgICBjYXNlICd1aW50OCc6CiAgICAgIHJldHVybiBVaW50OEFycmF5CiAgICBjYXNlICd1aW50MTYnOgogICAgICByZXR1cm4gVWludDE2QXJyYXkKICAgIGNhc2UgJ3VpbnQzMic6CiAgICAgIHJldHVybiBVaW50MzJBcnJheQogICAgY2FzZSAnZmxvYXQzMic6CiAgICAgIHJldHVybiBGbG9hdDMyQXJyYXkKICAgIGNhc2UgJ2Zsb2F0NjQnOgogICAgICByZXR1cm4gRmxvYXQ2NEFycmF5CiAgICBjYXNlICdhcnJheSc6CiAgICAgIHJldHVybiBBcnJheQogICAgY2FzZSAndWludDhfY2xhbXBlZCc6CiAgICAgIHJldHVybiBVaW50OENsYW1wZWRBcnJheQogIH0KfQoKfSx7fV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKmVzbGludCBuZXctY2FwOjAqLwp2YXIgZHR5cGUgPSBfZGVyZXFfKCdkdHlwZScpCgptb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5WZXJ0ZXhEYXRhCgpmdW5jdGlvbiBmbGF0dGVuVmVydGV4RGF0YSAoZGF0YSwgb3V0cHV0LCBvZmZzZXQpIHsKICBpZiAoIWRhdGEpIHRocm93IG5ldyBUeXBlRXJyb3IoJ211c3Qgc3BlY2lmeSBkYXRhIGFzIGZpcnN0IHBhcmFtZXRlcicpCiAgb2Zmc2V0ID0gKyhvZmZzZXQgfHwgMCkgfCAwCgogIGlmIChBcnJheS5pc0FycmF5KGRhdGEpICYmIChkYXRhWzBdICYmIHR5cGVvZiBkYXRhWzBdWzBdID09PSAnbnVtYmVyJykpIHsKICAgIHZhciBkaW0gPSBkYXRhWzBdLmxlbmd0aAogICAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoICogZGltCiAgICB2YXIgaSwgaiwgaywgbAoKICAgIC8vIG5vIG91dHB1dCBzcGVjaWZpZWQsIGNyZWF0ZSBhIG5ldyB0eXBlZCBhcnJheQogICAgaWYgKCFvdXRwdXQgfHwgdHlwZW9mIG91dHB1dCA9PT0gJ3N0cmluZycpIHsKICAgICAgb3V0cHV0ID0gbmV3IChkdHlwZShvdXRwdXQgfHwgJ2Zsb2F0MzInKSkobGVuZ3RoICsgb2Zmc2V0KQogICAgfQoKICAgIHZhciBkc3RMZW5ndGggPSBvdXRwdXQubGVuZ3RoIC0gb2Zmc2V0CiAgICBpZiAobGVuZ3RoICE9PSBkc3RMZW5ndGgpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2UgbGVuZ3RoICcgKyBsZW5ndGggKyAnICgnICsgZGltICsgJ3gnICsgZGF0YS5sZW5ndGggKyAnKScgKwogICAgICAgICcgZG9lcyBub3QgbWF0Y2ggZGVzdGluYXRpb24gbGVuZ3RoICcgKyBkc3RMZW5ndGgpCiAgICB9CgogICAgZm9yIChpID0gMCwgayA9IG9mZnNldDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgZm9yIChqID0gMDsgaiA8IGRpbTsgaisrKSB7CiAgICAgICAgb3V0cHV0W2srK10gPSBkYXRhW2ldW2pdID09PSBudWxsID8gTmFOIDogZGF0YVtpXVtqXQogICAgICB9CiAgICB9CiAgfSBlbHNlIHsKICAgIGlmICghb3V0cHV0IHx8IHR5cGVvZiBvdXRwdXQgPT09ICdzdHJpbmcnKSB7CiAgICAgIC8vIG5vIG91dHB1dCwgY3JlYXRlIGEgbmV3IG9uZQogICAgICB2YXIgQ3RvciA9IGR0eXBlKG91dHB1dCB8fCAnZmxvYXQzMicpCgogICAgICAvLyBoYW5kbGUgYXJyYXlzIHNlcGFyYXRlbHkgZHVlIHRvIHBvc3NpYmxlIG51bGxzCiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IG91dHB1dCA9PT0gJ2FycmF5JykgewogICAgICAgIG91dHB1dCA9IG5ldyBDdG9yKGRhdGEubGVuZ3RoICsgb2Zmc2V0KQogICAgICAgIGZvciAoaSA9IDAsIGsgPSBvZmZzZXQsIGwgPSBvdXRwdXQubGVuZ3RoOyBrIDwgbDsgaysrLCBpKyspIHsKICAgICAgICAgIG91dHB1dFtrXSA9IGRhdGFbaV0gPT09IG51bGwgPyBOYU4gOiBkYXRhW2ldCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChvZmZzZXQgPT09IDApIHsKICAgICAgICAgIG91dHB1dCA9IG5ldyBDdG9yKGRhdGEpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG91dHB1dCA9IG5ldyBDdG9yKGRhdGEubGVuZ3RoICsgb2Zmc2V0KQoKICAgICAgICAgIG91dHB1dC5zZXQoZGF0YSwgb2Zmc2V0KQogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gc3RvcmUgb3V0cHV0IGluIGV4aXN0aW5nIGFycmF5CiAgICAgIG91dHB1dC5zZXQoZGF0YSwgb2Zmc2V0KQogICAgfQogIH0KCiAgcmV0dXJuIG91dHB1dAp9Cgp9LHsiZHR5cGUiOjE0fV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgaXNDYWxsYWJsZSA9IF9kZXJlcV8oJ2lzLWNhbGxhYmxlJyk7Cgp2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwp2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoKdmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaSkpIHsKICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHsKICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycmF5W2ldLCBpLCBhcnJheSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKdmFyIGZvckVhY2hTdHJpbmcgPSBmdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgLy8gbm8gc3VjaCB0aGluZyBhcyBhIHNwYXJzZSBzdHJpbmcuCiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHsKICAgICAgICAgICAgaXRlcmF0b3Ioc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpOwogICAgICAgIH0KICAgIH0KfTsKCnZhciBmb3JFYWNoT2JqZWN0ID0gZnVuY3Rpb24gZm9yRWFjaE9iamVjdChvYmplY3QsIGl0ZXJhdG9yLCByZWNlaXZlcikgewogICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGspKSB7CiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBvYmplY3Rba10sIGssIG9iamVjdCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn07Cgp2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2gobGlzdCwgaXRlcmF0b3IsIHRoaXNBcmcpIHsKICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgIH0KCiAgICB2YXIgcmVjZWl2ZXI7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7CiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnOwogICAgfQoKICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7CiAgICAgICAgZm9yRWFjaEFycmF5KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ID09PSAnc3RyaW5nJykgewogICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTsKICAgIH0gZWxzZSB7CiAgICAgICAgZm9yRWFjaE9iamVjdChsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpOwogICAgfQp9OwoKbW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoOwoKfSx7ImlzLWNhbGxhYmxlIjoyMX1dLDE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewp2YXIgd2luOwoKaWYgKHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiKSB7CiAgICB3aW4gPSB3aW5kb3c7Cn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIpIHsKICAgIHdpbiA9IGdsb2JhbDsKfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIpewogICAgd2luID0gc2VsZjsKfSBlbHNlIHsKICAgIHdpbiA9IHt9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IHdpbjsKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoKfSx7fV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykgewogIHZhciBlLCBtCiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMQogIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxCiAgdmFyIGVCaWFzID0gZU1heCA+PiAxCiAgdmFyIG5CaXRzID0gLTcKICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwCiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxCiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV0KCiAgaSArPSBkCgogIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpCiAgcyA+Pj0gKC1uQml0cykKICBuQml0cyArPSBlTGVuCiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fQoKICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKQogIGUgPj49ICgtbkJpdHMpCiAgbkJpdHMgKz0gbUxlbgogIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge30KCiAgaWYgKGUgPT09IDApIHsKICAgIGUgPSAxIC0gZUJpYXMKICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHsKICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KQogIH0gZWxzZSB7CiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pCiAgICBlID0gZSAtIGVCaWFzCiAgfQogIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pCn0KCmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKICB2YXIgZSwgbSwgYwogIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDEKICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMQogIHZhciBlQmlhcyA9IGVNYXggPj4gMQogIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMCkKICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpCiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xCiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDAKCiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSkKCiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHsKICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMAogICAgZSA9IGVNYXgKICB9IGVsc2UgewogICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpCiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7CiAgICAgIGUtLQogICAgICBjICo9IDIKICAgIH0KICAgIGlmIChlICsgZUJpYXMgPj0gMSkgewogICAgICB2YWx1ZSArPSBydCAvIGMKICAgIH0gZWxzZSB7CiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKQogICAgfQogICAgaWYgKHZhbHVlICogYyA+PSAyKSB7CiAgICAgIGUrKwogICAgICBjIC89IDIKICAgIH0KCiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHsKICAgICAgbSA9IDAKICAgICAgZSA9IGVNYXgKICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHsKICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbikKICAgICAgZSA9IGUgKyBlQmlhcwogICAgfSBlbHNlIHsKICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pCiAgICAgIGUgPSAwCiAgICB9CiAgfQoKICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fQoKICBlID0gKGUgPDwgbUxlbikgfCBtCiAgZUxlbiArPSBtTGVuCiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fQoKICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjgKfQoKfSx7fV0sMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewppZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHsKICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZQogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcgogICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsKICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICB2YWx1ZTogY3RvciwKICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgfQogICAgfSk7CiAgfTsKfSBlbHNlIHsKICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2VycwogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcgogICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge30KICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGUKICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCkKICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcgogIH0KfQoKfSx7fV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiEKICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlcgogKgogKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPgogKiBAbGljZW5zZSAgTUlUCiAqLwoKLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZwovLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpCn0KCmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHsKICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKQp9CgovLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LgpmdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikgewogIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKQp9Cgp9LHt9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nOwoKdmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxzKmNsYXNzXGIvOwp2YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0Z1bmN0aW9uKHZhbHVlKSB7Cgl0cnkgewoJCXZhciBmblN0ciA9IGZuVG9TdHIuY2FsbCh2YWx1ZSk7CgkJcmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChmblN0cik7Cgl9IGNhdGNoIChlKSB7CgkJcmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvbgoJfQp9OwoKdmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkgewoJdHJ5IHsKCQlpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0KCQlmblRvU3RyLmNhbGwodmFsdWUpOwoJCXJldHVybiB0cnVlOwoJfSBjYXRjaCAoZSkgewoJCXJldHVybiBmYWxzZTsKCX0KfTsKdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKdmFyIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nOwp2YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nOwp2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7CglpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfQoJaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfQoJaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9CglpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfQoJaWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9Cgl2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTsKCXJldHVybiBzdHJDbGFzcyA9PT0gZm5DbGFzcyB8fCBzdHJDbGFzcyA9PT0gZ2VuQ2xhc3M7Cn07Cgp9LHt9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbgoKdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZwoKZnVuY3Rpb24gaXNGdW5jdGlvbiAoZm4pIHsKICB2YXIgc3RyaW5nID0gdG9TdHJpbmcuY2FsbChmbikKICByZXR1cm4gc3RyaW5nID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8CiAgICAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHN0cmluZyAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHx8CiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYKICAgICAvLyBJRTggYW5kIGJlbG93CiAgICAgKGZuID09PSB3aW5kb3cuc2V0VGltZW91dCB8fAogICAgICBmbiA9PT0gd2luZG93LmFsZXJ0IHx8CiAgICAgIGZuID09PSB3aW5kb3cuY29uZmlybSB8fAogICAgICBmbiA9PT0gd2luZG93LnByb21wdCkpCn07Cgp9LHt9XSwyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkgewoJdmFyIHR5cGUgPSB0eXBlb2YgeDsKCXJldHVybiB4ICE9PSBudWxsICYmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKTsKfTsKCn0se31dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHdvcmRXcmFwID0gX2RlcmVxXygnd29yZC13cmFwcGVyJykKdmFyIHh0ZW5kID0gX2RlcmVxXygneHRlbmQnKQp2YXIgbnVtYmVyID0gX2RlcmVxXygnYXMtbnVtYmVyJykKCnZhciBYX0hFSUdIVFMgPSBbJ3gnLCAnZScsICdhJywgJ28nLCAnbicsICdzJywgJ3InLCAnYycsICd1JywgJ20nLCAndicsICd3JywgJ3onXQp2YXIgTV9XSURUSFMgPSBbJ20nLCAndyddCnZhciBDQVBfSEVJR0hUUyA9IFsnSCcsICdJJywgJ04nLCAnRScsICdGJywgJ0snLCAnTCcsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJ10KCgp2YXIgVEFCX0lEID0gJ1x0Jy5jaGFyQ29kZUF0KDApCnZhciBTUEFDRV9JRCA9ICcgJy5jaGFyQ29kZUF0KDApCnZhciBBTElHTl9MRUZUID0gMCwgCiAgICBBTElHTl9DRU5URVIgPSAxLCAKICAgIEFMSUdOX1JJR0hUID0gMgoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVMYXlvdXQob3B0KSB7CiAgcmV0dXJuIG5ldyBUZXh0TGF5b3V0KG9wdCkKfQoKZnVuY3Rpb24gVGV4dExheW91dChvcHQpIHsKICB0aGlzLmdseXBocyA9IFtdCiAgdGhpcy5fbWVhc3VyZSA9IHRoaXMuY29tcHV0ZU1ldHJpY3MuYmluZCh0aGlzKQogIHRoaXMudXBkYXRlKG9wdCkKfQoKVGV4dExheW91dC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3B0KSB7CiAgb3B0ID0geHRlbmQoewogICAgbWVhc3VyZTogdGhpcy5fbWVhc3VyZQogIH0sIG9wdCkKICB0aGlzLl9vcHQgPSBvcHQKICB0aGlzLl9vcHQudGFiU2l6ZSA9IG51bWJlcih0aGlzLl9vcHQudGFiU2l6ZSwgNCkKCiAgaWYgKCFvcHQuZm9udCkKICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIGEgdmFsaWQgYml0bWFwIGZvbnQnKQoKICB2YXIgZ2x5cGhzID0gdGhpcy5nbHlwaHMKICB2YXIgdGV4dCA9IG9wdC50ZXh0fHwnJyAKICB2YXIgZm9udCA9IG9wdC5mb250CiAgdGhpcy5fc2V0dXBTcGFjZUdseXBocyhmb250KQogIAogIHZhciBsaW5lcyA9IHdvcmRXcmFwLmxpbmVzKHRleHQsIG9wdCkKICB2YXIgbWluV2lkdGggPSBvcHQud2lkdGggfHwgMAoKICAvL2NsZWFyIGdseXBocwogIGdseXBocy5sZW5ndGggPSAwCgogIC8vZ2V0IG1heCBsaW5lIHdpZHRoCiAgdmFyIG1heExpbmVXaWR0aCA9IGxpbmVzLnJlZHVjZShmdW5jdGlvbihwcmV2LCBsaW5lKSB7CiAgICByZXR1cm4gTWF0aC5tYXgocHJldiwgbGluZS53aWR0aCwgbWluV2lkdGgpCiAgfSwgMCkKCiAgLy90aGUgcGVuIHBvc2l0aW9uCiAgdmFyIHggPSAwCiAgdmFyIHkgPSAwCiAgdmFyIGxpbmVIZWlnaHQgPSBudW1iZXIob3B0LmxpbmVIZWlnaHQsIGZvbnQuY29tbW9uLmxpbmVIZWlnaHQpCiAgdmFyIGJhc2VsaW5lID0gZm9udC5jb21tb24uYmFzZQogIHZhciBkZXNjZW5kZXIgPSBsaW5lSGVpZ2h0LWJhc2VsaW5lCiAgdmFyIGxldHRlclNwYWNpbmcgPSBvcHQubGV0dGVyU3BhY2luZyB8fCAwCiAgdmFyIGhlaWdodCA9IGxpbmVIZWlnaHQgKiBsaW5lcy5sZW5ndGggLSBkZXNjZW5kZXIKICB2YXIgYWxpZ24gPSBnZXRBbGlnblR5cGUodGhpcy5fb3B0LmFsaWduKQoKICAvL2RyYXcgdGV4dCBhbG9uZyBiYXNlbGluZQogIHkgLT0gaGVpZ2h0CiAgCiAgLy90aGUgbWV0cmljcyBmb3IgdGhpcyB0ZXh0IGxheW91dAogIHRoaXMuX3dpZHRoID0gbWF4TGluZVdpZHRoCiAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0CiAgdGhpcy5fZGVzY2VuZGVyID0gbGluZUhlaWdodCAtIGJhc2VsaW5lCiAgdGhpcy5fYmFzZWxpbmUgPSBiYXNlbGluZQogIHRoaXMuX3hIZWlnaHQgPSBnZXRYSGVpZ2h0KGZvbnQpCiAgdGhpcy5fY2FwSGVpZ2h0ID0gZ2V0Q2FwSGVpZ2h0KGZvbnQpCiAgdGhpcy5fbGluZUhlaWdodCA9IGxpbmVIZWlnaHQKICB0aGlzLl9hc2NlbmRlciA9IGxpbmVIZWlnaHQgLSBkZXNjZW5kZXIgLSB0aGlzLl94SGVpZ2h0CiAgICAKICAvL2xheW91dCBlYWNoIGdseXBoCiAgdmFyIHNlbGYgPSB0aGlzCiAgbGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLCBsaW5lSW5kZXgpIHsKICAgIHZhciBzdGFydCA9IGxpbmUuc3RhcnQKICAgIHZhciBlbmQgPSBsaW5lLmVuZAogICAgdmFyIGxpbmVXaWR0aCA9IGxpbmUud2lkdGgKICAgIHZhciBsYXN0R2x5cGgKICAgIAogICAgLy9mb3IgZWFjaCBnbHlwaCBpbiB0aGF0IGxpbmUuLi4KICAgIGZvciAodmFyIGk9c3RhcnQ7IGk8ZW5kOyBpKyspIHsKICAgICAgdmFyIGlkID0gdGV4dC5jaGFyQ29kZUF0KGkpCiAgICAgIHZhciBnbHlwaCA9IHNlbGYuZ2V0R2x5cGgoZm9udCwgaWQpCiAgICAgIGlmIChnbHlwaCkgewogICAgICAgIGlmIChsYXN0R2x5cGgpIAogICAgICAgICAgeCArPSBnZXRLZXJuaW5nKGZvbnQsIGxhc3RHbHlwaC5pZCwgZ2x5cGguaWQpCgogICAgICAgIHZhciB0eCA9IHgKICAgICAgICBpZiAoYWxpZ24gPT09IEFMSUdOX0NFTlRFUikgCiAgICAgICAgICB0eCArPSAobWF4TGluZVdpZHRoLWxpbmVXaWR0aCkvMgogICAgICAgIGVsc2UgaWYgKGFsaWduID09PSBBTElHTl9SSUdIVCkKICAgICAgICAgIHR4ICs9IChtYXhMaW5lV2lkdGgtbGluZVdpZHRoKQoKICAgICAgICBnbHlwaHMucHVzaCh7CiAgICAgICAgICBwb3NpdGlvbjogW3R4LCB5XSwKICAgICAgICAgIGRhdGE6IGdseXBoLAogICAgICAgICAgaW5kZXg6IGksCiAgICAgICAgICBsaW5lOiBsaW5lSW5kZXgKICAgICAgICB9KSAgCgogICAgICAgIC8vbW92ZSBwZW4gZm9yd2FyZAogICAgICAgIHggKz0gZ2x5cGgueGFkdmFuY2UgKyBsZXR0ZXJTcGFjaW5nCiAgICAgICAgbGFzdEdseXBoID0gZ2x5cGgKICAgICAgfQogICAgfQoKICAgIC8vbmV4dCBsaW5lIGRvd24KICAgIHkgKz0gbGluZUhlaWdodAogICAgeCA9IDAKICB9KQogIHRoaXMuX2xpbmVzVG90YWwgPSBsaW5lcy5sZW5ndGg7Cn0KClRleHRMYXlvdXQucHJvdG90eXBlLl9zZXR1cFNwYWNlR2x5cGhzID0gZnVuY3Rpb24oZm9udCkgewogIC8vVGhlc2UgYXJlIGZhbGxiYWNrcywgd2hlbiB0aGUgZm9udCBkb2Vzbid0IGluY2x1ZGUKICAvLycgJyBvciAnXHQnIGdseXBocwogIHRoaXMuX2ZhbGxiYWNrU3BhY2VHbHlwaCA9IG51bGwKICB0aGlzLl9mYWxsYmFja1RhYkdseXBoID0gbnVsbAoKICBpZiAoIWZvbnQuY2hhcnMgfHwgZm9udC5jaGFycy5sZW5ndGggPT09IDApCiAgICByZXR1cm4KCiAgLy90cnkgdG8gZ2V0IHNwYWNlIGdseXBoCiAgLy90aGVuIGZhbGwgYmFjayB0byB0aGUgJ20nIG9yICd3JyBnbHlwaHMKICAvL3RoZW4gZmFsbCBiYWNrIHRvIHRoZSBmaXJzdCBnbHlwaCBhdmFpbGFibGUKICB2YXIgc3BhY2UgPSBnZXRHbHlwaEJ5SWQoZm9udCwgU1BBQ0VfSUQpIAogICAgICAgICAgfHwgZ2V0TUdseXBoKGZvbnQpIAogICAgICAgICAgfHwgZm9udC5jaGFyc1swXQoKICAvL2FuZCBjcmVhdGUgYSBmYWxsYmFjayBmb3IgdGFiCiAgdmFyIHRhYldpZHRoID0gdGhpcy5fb3B0LnRhYlNpemUgKiBzcGFjZS54YWR2YW5jZQogIHRoaXMuX2ZhbGxiYWNrU3BhY2VHbHlwaCA9IHNwYWNlCiAgdGhpcy5fZmFsbGJhY2tUYWJHbHlwaCA9IHh0ZW5kKHNwYWNlLCB7CiAgICB4OiAwLCB5OiAwLCB4YWR2YW5jZTogdGFiV2lkdGgsIGlkOiBUQUJfSUQsIAogICAgeG9mZnNldDogMCwgeW9mZnNldDogMCwgd2lkdGg6IDAsIGhlaWdodDogMAogIH0pCn0KClRleHRMYXlvdXQucHJvdG90eXBlLmdldEdseXBoID0gZnVuY3Rpb24oZm9udCwgaWQpIHsKICB2YXIgZ2x5cGggPSBnZXRHbHlwaEJ5SWQoZm9udCwgaWQpCiAgaWYgKGdseXBoKQogICAgcmV0dXJuIGdseXBoCiAgZWxzZSBpZiAoaWQgPT09IFRBQl9JRCkgCiAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUYWJHbHlwaAogIGVsc2UgaWYgKGlkID09PSBTUEFDRV9JRCkgCiAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tTcGFjZUdseXBoCiAgcmV0dXJuIG51bGwKfQoKVGV4dExheW91dC5wcm90b3R5cGUuY29tcHV0ZU1ldHJpY3MgPSBmdW5jdGlvbih0ZXh0LCBzdGFydCwgZW5kLCB3aWR0aCkgewogIHZhciBsZXR0ZXJTcGFjaW5nID0gdGhpcy5fb3B0LmxldHRlclNwYWNpbmcgfHwgMAogIHZhciBmb250ID0gdGhpcy5fb3B0LmZvbnQKICB2YXIgY3VyUGVuID0gMAogIHZhciBjdXJXaWR0aCA9IDAKICB2YXIgY291bnQgPSAwCiAgdmFyIGdseXBoCiAgdmFyIGxhc3RHbHlwaAoKICBpZiAoIWZvbnQuY2hhcnMgfHwgZm9udC5jaGFycy5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiB7CiAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgZW5kOiBzdGFydCwKICAgICAgd2lkdGg6IDAKICAgIH0KICB9CgogIGVuZCA9IE1hdGgubWluKHRleHQubGVuZ3RoLCBlbmQpCiAgZm9yICh2YXIgaT1zdGFydDsgaSA8IGVuZDsgaSsrKSB7CiAgICB2YXIgaWQgPSB0ZXh0LmNoYXJDb2RlQXQoaSkKICAgIHZhciBnbHlwaCA9IHRoaXMuZ2V0R2x5cGgoZm9udCwgaWQpCgogICAgaWYgKGdseXBoKSB7CiAgICAgIC8vbW92ZSBwZW4gZm9yd2FyZAogICAgICB2YXIgeG9mZiA9IGdseXBoLnhvZmZzZXQKICAgICAgdmFyIGtlcm4gPSBsYXN0R2x5cGggPyBnZXRLZXJuaW5nKGZvbnQsIGxhc3RHbHlwaC5pZCwgZ2x5cGguaWQpIDogMAogICAgICBjdXJQZW4gKz0ga2VybgoKICAgICAgdmFyIG5leHRQZW4gPSBjdXJQZW4gKyBnbHlwaC54YWR2YW5jZSArIGxldHRlclNwYWNpbmcKICAgICAgdmFyIG5leHRXaWR0aCA9IGN1clBlbiArIGdseXBoLndpZHRoCgogICAgICAvL3dlJ3ZlIGhpdCBvdXIgbGltaXQ7IHdlIGNhbid0IG1vdmUgb250byB0aGUgbmV4dCBnbHlwaAogICAgICBpZiAobmV4dFdpZHRoID49IHdpZHRoIHx8IG5leHRQZW4gPj0gd2lkdGgpCiAgICAgICAgYnJlYWsKCiAgICAgIC8vb3RoZXJ3aXNlIGNvbnRpbnVlIGFsb25nIG91ciBsaW5lCiAgICAgIGN1clBlbiA9IG5leHRQZW4KICAgICAgY3VyV2lkdGggPSBuZXh0V2lkdGgKICAgICAgbGFzdEdseXBoID0gZ2x5cGgKICAgIH0KICAgIGNvdW50KysKICB9CiAgCiAgLy9tYWtlIHN1cmUgcmlnaHRtb3N0IGVkZ2UgbGluZXMgdXAgd2l0aCByZW5kZXJlZCBnbHlwaHMKICBpZiAobGFzdEdseXBoKQogICAgY3VyV2lkdGggKz0gbGFzdEdseXBoLnhvZmZzZXQKCiAgcmV0dXJuIHsKICAgIHN0YXJ0OiBzdGFydCwKICAgIGVuZDogc3RhcnQgKyBjb3VudCwKICAgIHdpZHRoOiBjdXJXaWR0aAogIH0KfQoKLy9nZXR0ZXJzIGZvciB0aGUgcHJpdmF0ZSB2YXJzCjtbJ3dpZHRoJywgJ2hlaWdodCcsIAogICdkZXNjZW5kZXInLCAnYXNjZW5kZXInLAogICd4SGVpZ2h0JywgJ2Jhc2VsaW5lJywKICAnY2FwSGVpZ2h0JywKICAnbGluZUhlaWdodCcgXS5mb3JFYWNoKGFkZEdldHRlcikKCmZ1bmN0aW9uIGFkZEdldHRlcihuYW1lKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRleHRMYXlvdXQucHJvdG90eXBlLCBuYW1lLCB7CiAgICBnZXQ6IHdyYXBwZXIobmFtZSksCiAgICBjb25maWd1cmFibGU6IHRydWUKICB9KQp9CgovL2NyZWF0ZSBsb29rdXBzIGZvciBwcml2YXRlIHZhcnMKZnVuY3Rpb24gd3JhcHBlcihuYW1lKSB7CiAgcmV0dXJuIChuZXcgRnVuY3Rpb24oWwogICAgJ3JldHVybiBmdW5jdGlvbiAnK25hbWUrJygpIHsnLAogICAgJyAgcmV0dXJuIHRoaXMuXycrbmFtZSwKICAgICd9JwogIF0uam9pbignXG4nKSkpKCkKfQoKZnVuY3Rpb24gZ2V0R2x5cGhCeUlkKGZvbnQsIGlkKSB7CiAgaWYgKCFmb250LmNoYXJzIHx8IGZvbnQuY2hhcnMubGVuZ3RoID09PSAwKQogICAgcmV0dXJuIG51bGwKCiAgdmFyIGdseXBoSWR4ID0gZmluZENoYXIoZm9udC5jaGFycywgaWQpCiAgaWYgKGdseXBoSWR4ID49IDApCiAgICByZXR1cm4gZm9udC5jaGFyc1tnbHlwaElkeF0KICByZXR1cm4gbnVsbAp9CgpmdW5jdGlvbiBnZXRYSGVpZ2h0KGZvbnQpIHsKICBmb3IgKHZhciBpPTA7IGk8WF9IRUlHSFRTLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgaWQgPSBYX0hFSUdIVFNbaV0uY2hhckNvZGVBdCgwKQogICAgdmFyIGlkeCA9IGZpbmRDaGFyKGZvbnQuY2hhcnMsIGlkKQogICAgaWYgKGlkeCA+PSAwKSAKICAgICAgcmV0dXJuIGZvbnQuY2hhcnNbaWR4XS5oZWlnaHQKICB9CiAgcmV0dXJuIDAKfQoKZnVuY3Rpb24gZ2V0TUdseXBoKGZvbnQpIHsKICBmb3IgKHZhciBpPTA7IGk8TV9XSURUSFMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBpZCA9IE1fV0lEVEhTW2ldLmNoYXJDb2RlQXQoMCkKICAgIHZhciBpZHggPSBmaW5kQ2hhcihmb250LmNoYXJzLCBpZCkKICAgIGlmIChpZHggPj0gMCkgCiAgICAgIHJldHVybiBmb250LmNoYXJzW2lkeF0KICB9CiAgcmV0dXJuIDAKfQoKZnVuY3Rpb24gZ2V0Q2FwSGVpZ2h0KGZvbnQpIHsKICBmb3IgKHZhciBpPTA7IGk8Q0FQX0hFSUdIVFMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBpZCA9IENBUF9IRUlHSFRTW2ldLmNoYXJDb2RlQXQoMCkKICAgIHZhciBpZHggPSBmaW5kQ2hhcihmb250LmNoYXJzLCBpZCkKICAgIGlmIChpZHggPj0gMCkgCiAgICAgIHJldHVybiBmb250LmNoYXJzW2lkeF0uaGVpZ2h0CiAgfQogIHJldHVybiAwCn0KCmZ1bmN0aW9uIGdldEtlcm5pbmcoZm9udCwgbGVmdCwgcmlnaHQpIHsKICBpZiAoIWZvbnQua2VybmluZ3MgfHwgZm9udC5rZXJuaW5ncy5sZW5ndGggPT09IDApCiAgICByZXR1cm4gMAoKICB2YXIgdGFibGUgPSBmb250Lmtlcm5pbmdzCiAgZm9yICh2YXIgaT0wOyBpPHRhYmxlLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIga2VybiA9IHRhYmxlW2ldCiAgICBpZiAoa2Vybi5maXJzdCA9PT0gbGVmdCAmJiBrZXJuLnNlY29uZCA9PT0gcmlnaHQpCiAgICAgIHJldHVybiBrZXJuLmFtb3VudAogIH0KICByZXR1cm4gMAp9CgpmdW5jdGlvbiBnZXRBbGlnblR5cGUoYWxpZ24pIHsKICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKQogICAgcmV0dXJuIEFMSUdOX0NFTlRFUgogIGVsc2UgaWYgKGFsaWduID09PSAncmlnaHQnKQogICAgcmV0dXJuIEFMSUdOX1JJR0hUCiAgcmV0dXJuIEFMSUdOX0xFRlQKfQoKZnVuY3Rpb24gZmluZENoYXIgKGFycmF5LCB2YWx1ZSwgc3RhcnQpIHsKICBzdGFydCA9IHN0YXJ0IHx8IDAKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgaWYgKGFycmF5W2ldLmlkID09PSB2YWx1ZSkgewogICAgICByZXR1cm4gaQogICAgfQogIH0KICByZXR1cm4gLTEKfQp9LHsiYXMtbnVtYmVyIjoyLCJ3b3JkLXdyYXBwZXIiOjUwLCJ4dGVuZCI6NTN9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKdmFyIHhociA9IF9kZXJlcV8oJ3hocicpCnZhciBub29wID0gZnVuY3Rpb24oKXt9CnZhciBwYXJzZUFTQ0lJID0gX2RlcmVxXygncGFyc2UtYm1mb250LWFzY2lpJykKdmFyIHBhcnNlWE1MID0gX2RlcmVxXygncGFyc2UtYm1mb250LXhtbCcpCnZhciByZWFkQmluYXJ5ID0gX2RlcmVxXygncGFyc2UtYm1mb250LWJpbmFyeScpCnZhciBpc0JpbmFyeUZvcm1hdCA9IF9kZXJlcV8oJy4vbGliL2lzLWJpbmFyeScpCnZhciB4dGVuZCA9IF9kZXJlcV8oJ3h0ZW5kJykKCnZhciB4bWwyID0gKGZ1bmN0aW9uIGhhc1hNTDIoKSB7CiAgcmV0dXJuIHNlbGYuWE1MSHR0cFJlcXVlc3QgJiYgIndpdGhDcmVkZW50aWFscyIgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0Cn0pKCkKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0LCBjYikgewogIGNiID0gdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nID8gY2IgOiBub29wCgogIGlmICh0eXBlb2Ygb3B0ID09PSAnc3RyaW5nJykKICAgIG9wdCA9IHsgdXJpOiBvcHQgfQogIGVsc2UgaWYgKCFvcHQpCiAgICBvcHQgPSB7fQoKICB2YXIgZXhwZWN0QmluYXJ5ID0gb3B0LmJpbmFyeQogIGlmIChleHBlY3RCaW5hcnkpCiAgICBvcHQgPSBnZXRCaW5hcnlPcHRzKG9wdCkKCiAgeGhyKG9wdCwgZnVuY3Rpb24oZXJyLCByZXMsIGJvZHkpIHsKICAgIGlmIChlcnIpCiAgICAgIHJldHVybiBjYihlcnIpCiAgICBpZiAoIS9eMi8udGVzdChyZXMuc3RhdHVzQ29kZSkpCiAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoJ2h0dHAgc3RhdHVzIGNvZGU6ICcrcmVzLnN0YXR1c0NvZGUpKQogICAgaWYgKCFib2R5KQogICAgICByZXR1cm4gY2IobmV3IEVycm9yKCdubyBib2R5IHJlc3VsdCcpKQoKICAgIHZhciBiaW5hcnkgPSBmYWxzZSAKCiAgICAvL2lmIHRoZSByZXNwb25zZSB0eXBlIGlzIGFuIGFycmF5IGJ1ZmZlciwKICAgIC8vd2UgbmVlZCB0byBjb252ZXJ0IGl0IGludG8gYSByZWd1bGFyIEJ1ZmZlciBvYmplY3QKICAgIGlmIChpc0FycmF5QnVmZmVyKGJvZHkpKSB7CiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KGJvZHkpCiAgICAgIGJvZHkgPSBuZXcgQnVmZmVyKGFycmF5LCAnYmluYXJ5JykKICAgIH0KCiAgICAvL25vdyBjaGVjayB0aGUgc3RyaW5nL0J1ZmZlciByZXNwb25zZQogICAgLy9hbmQgc2VlIGlmIGl0IGhhcyBhIGJpbmFyeSBCTUYgaGVhZGVyCiAgICBpZiAoaXNCaW5hcnlGb3JtYXQoYm9keSkpIHsKICAgICAgYmluYXJ5ID0gdHJ1ZQogICAgICAvL2lmIHdlIGhhdmUgYSBzdHJpbmcsIHR1cm4gaXQgaW50byBhIEJ1ZmZlcgogICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSAKICAgICAgICBib2R5ID0gbmV3IEJ1ZmZlcihib2R5LCAnYmluYXJ5JykKICAgIH0gCgogICAgLy93ZSBhcmUgbm90IHBhcnNpbmcgYSBiaW5hcnkgZm9ybWF0LCBqdXN0IEFTQ0lJL1hNTC9ldGMKICAgIGlmICghYmluYXJ5KSB7CiAgICAgIC8vbWlnaHQgc3RpbGwgYmUgYSBidWZmZXIgaWYgcmVzcG9uc2VUeXBlIGlzICdhcnJheWJ1ZmZlcicKICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkKICAgICAgICBib2R5ID0gYm9keS50b1N0cmluZyhvcHQuZW5jb2RpbmcpCiAgICAgIGJvZHkgPSBib2R5LnRyaW0oKQogICAgfQoKICAgIHZhciByZXN1bHQKICAgIHRyeSB7CiAgICAgIHZhciB0eXBlID0gcmVzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddCiAgICAgIGlmIChiaW5hcnkpCiAgICAgICAgcmVzdWx0ID0gcmVhZEJpbmFyeShib2R5KQogICAgICBlbHNlIGlmICgvanNvbi8udGVzdCh0eXBlKSB8fCBib2R5LmNoYXJBdCgwKSA9PT0gJ3snKQogICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoYm9keSkKICAgICAgZWxzZSBpZiAoL3htbC8udGVzdCh0eXBlKSAgfHwgYm9keS5jaGFyQXQoMCkgPT09ICc8JykKICAgICAgICByZXN1bHQgPSBwYXJzZVhNTChib2R5KQogICAgICBlbHNlCiAgICAgICAgcmVzdWx0ID0gcGFyc2VBU0NJSShib2R5KQogICAgfSBjYXRjaCAoZSkgewogICAgICBjYihuZXcgRXJyb3IoJ2Vycm9yIHBhcnNpbmcgZm9udCAnK2UubWVzc2FnZSkpCiAgICAgIGNiID0gbm9vcAogICAgfQogICAgY2IobnVsbCwgcmVzdWx0KQogIH0pCn0KCmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIoYXJyKSB7CiAgdmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcKICByZXR1cm4gc3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJwp9CgpmdW5jdGlvbiBnZXRCaW5hcnlPcHRzKG9wdCkgewogIC8vSUUxMCsgYW5kIG90aGVyIG1vZGVybiBicm93c2VycyBzdXBwb3J0IGFycmF5IGJ1ZmZlcnMKICBpZiAoeG1sMikKICAgIHJldHVybiB4dGVuZChvcHQsIHsgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInIH0pCiAgCiAgaWYgKHR5cGVvZiBzZWxmLlhNTEh0dHBSZXF1ZXN0ID09PSAndW5kZWZpbmVkJykKICAgIHRocm93IG5ldyBFcnJvcigneW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgWEhSIGxvYWRpbmcnKQoKICAvL0lFOSBhbmQgWE1MMSBicm93c2VycyBjb3VsZCBzdGlsbCB1c2UgYW4gb3ZlcnJpZGUKICB2YXIgcmVxID0gbmV3IHNlbGYuWE1MSHR0cFJlcXVlc3QoKQogIHJlcS5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJykKICByZXR1cm4geHRlbmQoewogICAgeGhyOiByZXEKICB9LCBvcHQpCn0KCn0pLmNhbGwodGhpcyxfZGVyZXFfKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiLi9saWIvaXMtYmluYXJ5IjoyNiwiYnVmZmVyIjo3LCJwYXJzZS1ibWZvbnQtYXNjaWkiOjI4LCJwYXJzZS1ibWZvbnQtYmluYXJ5IjoyOSwicGFyc2UtYm1mb250LXhtbCI6MzAsInhociI6NTEsInh0ZW5kIjo1M31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChCdWZmZXIpewp2YXIgZXF1YWwgPSBfZGVyZXFfKCdidWZmZXItZXF1YWwnKQp2YXIgSEVBREVSID0gbmV3IEJ1ZmZlcihbNjYsIDc3LCA3MCwgM10pCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJ1ZikgewogIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykKICAgIHJldHVybiBidWYuc3Vic3RyaW5nKDAsIDMpID09PSAnQk1GJwogIHJldHVybiBidWYubGVuZ3RoID4gNCAmJiBlcXVhbChidWYuc2xpY2UoMCwgNCksIEhFQURFUikKfQp9KS5jYWxsKHRoaXMsX2RlcmVxXygiYnVmZmVyIikuQnVmZmVyKQoKfSx7ImJ1ZmZlciI6NywiYnVmZmVyLWVxdWFsIjo2fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKgpvYmplY3QtYXNzaWduCihjKSBTaW5kcmUgU29yaHVzCkBsaWNlbnNlIE1JVAoqLwoKJ3VzZSBzdHJpY3QnOwovKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqLwp2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsKdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlOwoKZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7CglpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7CgkJdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTsKCX0KCglyZXR1cm4gT2JqZWN0KHZhbCk7Cn0KCmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHsKCXRyeSB7CgkJaWYgKCFPYmplY3QuYXNzaWduKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy4KCgkJLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOAoJCXZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnMKCQl0ZXN0MVs1XSA9ICdkZSc7CgkJaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTYKCQl2YXIgdGVzdDIgPSB7fTsKCQlmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHsKCQkJdGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpOwoJCX0KCQl2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikgewoJCQlyZXR1cm4gdGVzdDJbbl07CgkJfSk7CgkJaWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTYKCQl2YXIgdGVzdDMgPSB7fTsKCQknYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHsKCQkJdGVzdDNbbGV0dGVyXSA9IGxldHRlcjsKCQl9KTsKCQlpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT0KCQkJCSdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJcmV0dXJuIHRydWU7Cgl9IGNhdGNoIChlcnIpIHsKCQkvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLgoJCXJldHVybiBmYWxzZTsKCX0KfQoKbW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHsKCXZhciBmcm9tOwoJdmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTsKCXZhciBzeW1ib2xzOwoKCWZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7CgkJZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pOwoKCQlmb3IgKHZhciBrZXkgaW4gZnJvbSkgewoJCQlpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7CgkJCQl0b1trZXldID0gZnJvbVtrZXldOwoJCQl9CgkJfQoKCQlpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CgkJCXN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7CgkJCWZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykgewoJCQkJaWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkgewoJCQkJCXRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTsKCQkJCX0KCQkJfQoJCX0KCX0KCglyZXR1cm4gdG87Cn07Cgp9LHt9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VCTUZvbnRBc2NpaShkYXRhKSB7CiAgaWYgKCFkYXRhKQogICAgdGhyb3cgbmV3IEVycm9yKCdubyBkYXRhIHByb3ZpZGVkJykKICBkYXRhID0gZGF0YS50b1N0cmluZygpLnRyaW0oKQoKICB2YXIgb3V0cHV0ID0gewogICAgcGFnZXM6IFtdLAogICAgY2hhcnM6IFtdLAogICAga2VybmluZ3M6IFtdCiAgfQoKICB2YXIgbGluZXMgPSBkYXRhLnNwbGl0KC9cclxuP3xcbi9nKQoKICBpZiAobGluZXMubGVuZ3RoID09PSAwKQogICAgdGhyb3cgbmV3IEVycm9yKCdubyBkYXRhIGluIEJNRm9udCBmaWxlJykKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGxpbmVEYXRhID0gc3BsaXRMaW5lKGxpbmVzW2ldLCBpKQogICAgaWYgKCFsaW5lRGF0YSkgLy9za2lwIGVtcHR5IGxpbmVzCiAgICAgIGNvbnRpbnVlCgogICAgaWYgKGxpbmVEYXRhLmtleSA9PT0gJ3BhZ2UnKSB7CiAgICAgIGlmICh0eXBlb2YgbGluZURhdGEuZGF0YS5pZCAhPT0gJ251bWJlcicpCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZmlsZSBhdCBsaW5lICcgKyBpICsgJyAtLSBuZWVkcyBwYWdlIGlkPU4nKQogICAgICBpZiAodHlwZW9mIGxpbmVEYXRhLmRhdGEuZmlsZSAhPT0gJ3N0cmluZycpCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZmlsZSBhdCBsaW5lICcgKyBpICsgJyAtLSBuZWVkcyBwYWdlIGZpbGU9InBhdGgiJykKICAgICAgb3V0cHV0LnBhZ2VzW2xpbmVEYXRhLmRhdGEuaWRdID0gbGluZURhdGEuZGF0YS5maWxlCiAgICB9IGVsc2UgaWYgKGxpbmVEYXRhLmtleSA9PT0gJ2NoYXJzJyB8fCBsaW5lRGF0YS5rZXkgPT09ICdrZXJuaW5ncycpIHsKICAgICAgLy8uLi4gZG8gbm90aGluZyBmb3IgdGhlc2UgdHdvIC4uLgogICAgfSBlbHNlIGlmIChsaW5lRGF0YS5rZXkgPT09ICdjaGFyJykgewogICAgICBvdXRwdXQuY2hhcnMucHVzaChsaW5lRGF0YS5kYXRhKQogICAgfSBlbHNlIGlmIChsaW5lRGF0YS5rZXkgPT09ICdrZXJuaW5nJykgewogICAgICBvdXRwdXQua2VybmluZ3MucHVzaChsaW5lRGF0YS5kYXRhKQogICAgfSBlbHNlIHsKICAgICAgb3V0cHV0W2xpbmVEYXRhLmtleV0gPSBsaW5lRGF0YS5kYXRhCiAgICB9CiAgfQoKICByZXR1cm4gb3V0cHV0Cn0KCmZ1bmN0aW9uIHNwbGl0TGluZShsaW5lLCBpZHgpIHsKICBsaW5lID0gbGluZS5yZXBsYWNlKC9cdCsvZywgJyAnKS50cmltKCkKICBpZiAoIWxpbmUpCiAgICByZXR1cm4gbnVsbAoKICB2YXIgc3BhY2UgPSBsaW5lLmluZGV4T2YoJyAnKQogIGlmIChzcGFjZSA9PT0gLTEpIAogICAgdGhyb3cgbmV3IEVycm9yKCJubyBuYW1lZCByb3cgYXQgbGluZSAiICsgaWR4KQoKICB2YXIga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgc3BhY2UpCgogIGxpbmUgPSBsaW5lLnN1YnN0cmluZyhzcGFjZSArIDEpCiAgLy9jbGVhciAibGV0dGVyIiBmaWVsZCBhcyBpdCBpcyBub24tc3RhbmRhcmQgYW5kCiAgLy9yZXF1aXJlcyBhZGRpdGlvbmFsIGNvbXBsZXhpdHkgdG8gcGFyc2UgIiAvID0gc3ltYm9scwogIGxpbmUgPSBsaW5lLnJlcGxhY2UoL2xldHRlcj1bXCdcIl1cUytbXCdcIl0vZ2ksICcnKSAgCiAgbGluZSA9IGxpbmUuc3BsaXQoIj0iKQogIGxpbmUgPSBsaW5lLm1hcChmdW5jdGlvbihzdHIpIHsKICAgIHJldHVybiBzdHIudHJpbSgpLm1hdGNoKCgvKCIuKj8ifFteIlxzXSspKyg/PVxzKnxccyokKS9nKSkKICB9KQoKICB2YXIgZGF0YSA9IFtdCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZHQgPSBsaW5lW2ldCiAgICBpZiAoaSA9PT0gMCkgewogICAgICBkYXRhLnB1c2goewogICAgICAgIGtleTogZHRbMF0sCiAgICAgICAgZGF0YTogIiIKICAgICAgfSkKICAgIH0gZWxzZSBpZiAoaSA9PT0gbGluZS5sZW5ndGggLSAxKSB7CiAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXS5kYXRhID0gcGFyc2VEYXRhKGR0WzBdKQogICAgfSBlbHNlIHsKICAgICAgZGF0YVtkYXRhLmxlbmd0aCAtIDFdLmRhdGEgPSBwYXJzZURhdGEoZHRbMF0pCiAgICAgIGRhdGEucHVzaCh7CiAgICAgICAga2V5OiBkdFsxXSwKICAgICAgICBkYXRhOiAiIgogICAgICB9KQogICAgfQogIH0KCiAgdmFyIG91dCA9IHsKICAgIGtleToga2V5LAogICAgZGF0YToge30KICB9CgogIGRhdGEuZm9yRWFjaChmdW5jdGlvbih2KSB7CiAgICBvdXQuZGF0YVt2LmtleV0gPSB2LmRhdGE7CiAgfSkKCiAgcmV0dXJuIG91dAp9CgpmdW5jdGlvbiBwYXJzZURhdGEoZGF0YSkgewogIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkKICAgIHJldHVybiAiIgoKICBpZiAoZGF0YS5pbmRleE9mKCciJykgPT09IDAgfHwgZGF0YS5pbmRleE9mKCInIikgPT09IDApCiAgICByZXR1cm4gZGF0YS5zdWJzdHJpbmcoMSwgZGF0YS5sZW5ndGggLSAxKQogIGlmIChkYXRhLmluZGV4T2YoJywnKSAhPT0gLTEpCiAgICByZXR1cm4gcGFyc2VJbnRMaXN0KGRhdGEpCiAgcmV0dXJuIHBhcnNlSW50KGRhdGEsIDEwKQp9CgpmdW5jdGlvbiBwYXJzZUludExpc3QoZGF0YSkgewogIHJldHVybiBkYXRhLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uKHZhbCkgewogICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApCiAgfSkKfQp9LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBIRUFERVIgPSBbNjYsIDc3LCA3MF0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVhZEJNRm9udEJpbmFyeShidWYpIHsKICBpZiAoYnVmLmxlbmd0aCA8IDYpCiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYnVmZmVyIGxlbmd0aCBmb3IgQk1Gb250JykKCiAgdmFyIGhlYWRlciA9IEhFQURFUi5ldmVyeShmdW5jdGlvbihieXRlLCBpKSB7CiAgICByZXR1cm4gYnVmLnJlYWRVSW50OChpKSA9PT0gYnl0ZQogIH0pCgogIGlmICghaGVhZGVyKQogICAgdGhyb3cgbmV3IEVycm9yKCdCTUZvbnQgbWlzc2luZyBCTUYgYnl0ZSBoZWFkZXInKQoKICB2YXIgaSA9IDMKICB2YXIgdmVycyA9IGJ1Zi5yZWFkVUludDgoaSsrKQogIGlmICh2ZXJzID4gMykKICAgIHRocm93IG5ldyBFcnJvcignT25seSBzdXBwb3J0cyBCTUZvbnQgQmluYXJ5IHYzIChCTUZvbnQgQXBwIHYxLjEwKScpCiAgCiAgdmFyIHRhcmdldCA9IHsga2VybmluZ3M6IFtdLCBjaGFyczogW10gfQogIGZvciAodmFyIGI9MDsgYjw1OyBiKyspCiAgICBpICs9IHJlYWRCbG9jayh0YXJnZXQsIGJ1ZiwgaSkKICByZXR1cm4gdGFyZ2V0Cn0KCmZ1bmN0aW9uIHJlYWRCbG9jayh0YXJnZXQsIGJ1ZiwgaSkgewogIGlmIChpID4gYnVmLmxlbmd0aC0xKQogICAgcmV0dXJuIDAKCiAgdmFyIGJsb2NrSUQgPSBidWYucmVhZFVJbnQ4KGkrKykKICB2YXIgYmxvY2tTaXplID0gYnVmLnJlYWRJbnQzMkxFKGkpCiAgaSArPSA0CgogIHN3aXRjaChibG9ja0lEKSB7CiAgICBjYXNlIDE6IAogICAgICB0YXJnZXQuaW5mbyA9IHJlYWRJbmZvKGJ1ZiwgaSkKICAgICAgYnJlYWsKICAgIGNhc2UgMjoKICAgICAgdGFyZ2V0LmNvbW1vbiA9IHJlYWRDb21tb24oYnVmLCBpKQogICAgICBicmVhawogICAgY2FzZSAzOgogICAgICB0YXJnZXQucGFnZXMgPSByZWFkUGFnZXMoYnVmLCBpLCBibG9ja1NpemUpCiAgICAgIGJyZWFrCiAgICBjYXNlIDQ6CiAgICAgIHRhcmdldC5jaGFycyA9IHJlYWRDaGFycyhidWYsIGksIGJsb2NrU2l6ZSkKICAgICAgYnJlYWsKICAgIGNhc2UgNToKICAgICAgdGFyZ2V0Lmtlcm5pbmdzID0gcmVhZEtlcm5pbmdzKGJ1ZiwgaSwgYmxvY2tTaXplKQogICAgICBicmVhawogIH0KICByZXR1cm4gNSArIGJsb2NrU2l6ZQp9CgpmdW5jdGlvbiByZWFkSW5mbyhidWYsIGkpIHsKICB2YXIgaW5mbyA9IHt9CiAgaW5mby5zaXplID0gYnVmLnJlYWRJbnQxNkxFKGkpCgogIHZhciBiaXRGaWVsZCA9IGJ1Zi5yZWFkVUludDgoaSsyKQogIGluZm8uc21vb3RoID0gKGJpdEZpZWxkID4+IDcpICYgMQogIGluZm8udW5pY29kZSA9IChiaXRGaWVsZCA+PiA2KSAmIDEKICBpbmZvLml0YWxpYyA9IChiaXRGaWVsZCA+PiA1KSAmIDEKICBpbmZvLmJvbGQgPSAoYml0RmllbGQgPj4gNCkgJiAxCiAgCiAgLy9maXhlZEhlaWdodCBpcyBvbmx5IG1lbnRpb25lZCBpbiBiaW5hcnkgc3BlYyAKICBpZiAoKGJpdEZpZWxkID4+IDMpICYgMSkKICAgIGluZm8uZml4ZWRIZWlnaHQgPSAxCiAgCiAgaW5mby5jaGFyc2V0ID0gYnVmLnJlYWRVSW50OChpKzMpIHx8ICcnCiAgaW5mby5zdHJldGNoSCA9IGJ1Zi5yZWFkVUludDE2TEUoaSs0KQogIGluZm8uYWEgPSBidWYucmVhZFVJbnQ4KGkrNikKICBpbmZvLnBhZGRpbmcgPSBbCiAgICBidWYucmVhZEludDgoaSs3KSwKICAgIGJ1Zi5yZWFkSW50OChpKzgpLAogICAgYnVmLnJlYWRJbnQ4KGkrOSksCiAgICBidWYucmVhZEludDgoaSsxMCkKICBdCiAgaW5mby5zcGFjaW5nID0gWwogICAgYnVmLnJlYWRJbnQ4KGkrMTEpLAogICAgYnVmLnJlYWRJbnQ4KGkrMTIpCiAgXQogIGluZm8ub3V0bGluZSA9IGJ1Zi5yZWFkVUludDgoaSsxMykKICBpbmZvLmZhY2UgPSByZWFkU3RyaW5nTlQoYnVmLCBpKzE0KQogIHJldHVybiBpbmZvCn0KCmZ1bmN0aW9uIHJlYWRDb21tb24oYnVmLCBpKSB7CiAgdmFyIGNvbW1vbiA9IHt9CiAgY29tbW9uLmxpbmVIZWlnaHQgPSBidWYucmVhZFVJbnQxNkxFKGkpCiAgY29tbW9uLmJhc2UgPSBidWYucmVhZFVJbnQxNkxFKGkrMikKICBjb21tb24uc2NhbGVXID0gYnVmLnJlYWRVSW50MTZMRShpKzQpCiAgY29tbW9uLnNjYWxlSCA9IGJ1Zi5yZWFkVUludDE2TEUoaSs2KQogIGNvbW1vbi5wYWdlcyA9IGJ1Zi5yZWFkVUludDE2TEUoaSs4KQogIHZhciBiaXRGaWVsZCA9IGJ1Zi5yZWFkVUludDgoaSsxMCkKICBjb21tb24ucGFja2VkID0gMAogIGNvbW1vbi5hbHBoYUNobmwgPSBidWYucmVhZFVJbnQ4KGkrMTEpCiAgY29tbW9uLnJlZENobmwgPSBidWYucmVhZFVJbnQ4KGkrMTIpCiAgY29tbW9uLmdyZWVuQ2hubCA9IGJ1Zi5yZWFkVUludDgoaSsxMykKICBjb21tb24uYmx1ZUNobmwgPSBidWYucmVhZFVJbnQ4KGkrMTQpCiAgcmV0dXJuIGNvbW1vbgp9CgpmdW5jdGlvbiByZWFkUGFnZXMoYnVmLCBpLCBzaXplKSB7CiAgdmFyIHBhZ2VzID0gW10KICB2YXIgdGV4dCA9IHJlYWROYW1lTlQoYnVmLCBpKQogIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aCsxCiAgdmFyIGNvdW50ID0gc2l6ZSAvIGxlbgogIGZvciAodmFyIGM9MDsgYzxjb3VudDsgYysrKSB7CiAgICBwYWdlc1tjXSA9IGJ1Zi5zbGljZShpLCBpK3RleHQubGVuZ3RoKS50b1N0cmluZygndXRmOCcpCiAgICBpICs9IGxlbgogIH0KICByZXR1cm4gcGFnZXMKfQoKZnVuY3Rpb24gcmVhZENoYXJzKGJ1ZiwgaSwgYmxvY2tTaXplKSB7CiAgdmFyIGNoYXJzID0gW10KCiAgdmFyIGNvdW50ID0gYmxvY2tTaXplIC8gMjAKICBmb3IgKHZhciBjPTA7IGM8Y291bnQ7IGMrKykgewogICAgdmFyIGNoYXIgPSB7fQogICAgdmFyIG9mZiA9IGMqMjAKICAgIGNoYXIuaWQgPSBidWYucmVhZFVJbnQzMkxFKGkgKyAwICsgb2ZmKQogICAgY2hhci54ID0gYnVmLnJlYWRVSW50MTZMRShpICsgNCArIG9mZikKICAgIGNoYXIueSA9IGJ1Zi5yZWFkVUludDE2TEUoaSArIDYgKyBvZmYpCiAgICBjaGFyLndpZHRoID0gYnVmLnJlYWRVSW50MTZMRShpICsgOCArIG9mZikKICAgIGNoYXIuaGVpZ2h0ID0gYnVmLnJlYWRVSW50MTZMRShpICsgMTAgKyBvZmYpCiAgICBjaGFyLnhvZmZzZXQgPSBidWYucmVhZEludDE2TEUoaSArIDEyICsgb2ZmKQogICAgY2hhci55b2Zmc2V0ID0gYnVmLnJlYWRJbnQxNkxFKGkgKyAxNCArIG9mZikKICAgIGNoYXIueGFkdmFuY2UgPSBidWYucmVhZEludDE2TEUoaSArIDE2ICsgb2ZmKQogICAgY2hhci5wYWdlID0gYnVmLnJlYWRVSW50OChpICsgMTggKyBvZmYpCiAgICBjaGFyLmNobmwgPSBidWYucmVhZFVJbnQ4KGkgKyAxOSArIG9mZikKICAgIGNoYXJzW2NdID0gY2hhcgogIH0KICByZXR1cm4gY2hhcnMKfQoKZnVuY3Rpb24gcmVhZEtlcm5pbmdzKGJ1ZiwgaSwgYmxvY2tTaXplKSB7CiAgdmFyIGtlcm5pbmdzID0gW10KICB2YXIgY291bnQgPSBibG9ja1NpemUgLyAxMAogIGZvciAodmFyIGM9MDsgYzxjb3VudDsgYysrKSB7CiAgICB2YXIga2VybiA9IHt9CiAgICB2YXIgb2ZmID0gYyoxMAogICAga2Vybi5maXJzdCA9IGJ1Zi5yZWFkVUludDMyTEUoaSArIDAgKyBvZmYpCiAgICBrZXJuLnNlY29uZCA9IGJ1Zi5yZWFkVUludDMyTEUoaSArIDQgKyBvZmYpCiAgICBrZXJuLmFtb3VudCA9IGJ1Zi5yZWFkSW50MTZMRShpICsgOCArIG9mZikKICAgIGtlcm5pbmdzW2NdID0ga2VybgogIH0KICByZXR1cm4ga2VybmluZ3MKfQoKZnVuY3Rpb24gcmVhZE5hbWVOVChidWYsIG9mZnNldCkgewogIHZhciBwb3M9b2Zmc2V0CiAgZm9yICg7IHBvczxidWYubGVuZ3RoOyBwb3MrKykgewogICAgaWYgKGJ1Zltwb3NdID09PSAweDAwKSAKICAgICAgYnJlYWsKICB9CiAgcmV0dXJuIGJ1Zi5zbGljZShvZmZzZXQsIHBvcykKfQoKZnVuY3Rpb24gcmVhZFN0cmluZ05UKGJ1Ziwgb2Zmc2V0KSB7CiAgcmV0dXJuIHJlYWROYW1lTlQoYnVmLCBvZmZzZXQpLnRvU3RyaW5nKCd1dGY4JykKfQp9LHt9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBwYXJzZUF0dHJpYnV0ZXMgPSBfZGVyZXFfKCcuL3BhcnNlLWF0dHJpYnMnKQp2YXIgcGFyc2VGcm9tU3RyaW5nID0gX2RlcmVxXygneG1sLXBhcnNlLWZyb20tc3RyaW5nJykKCi8vSW4gc29tZSBjYXNlcyBlbGVtZW50LmF0dHJpYnV0ZS5ub2RlTmFtZSBjYW4gcmV0dXJuCi8vYWxsIGxvd2VyY2FzZSB2YWx1ZXMuLiBzbyB3ZSBuZWVkIHRvIG1hcCB0aGVtIHRvIHRoZSBjb3JyZWN0IAovL2Nhc2UKdmFyIE5BTUVfTUFQID0gewogIHNjYWxlaDogJ3NjYWxlSCcsCiAgc2NhbGV3OiAnc2NhbGVXJywKICBzdHJldGNoaDogJ3N0cmV0Y2hIJywKICBsaW5laGVpZ2h0OiAnbGluZUhlaWdodCcsCiAgYWxwaGFjaG5sOiAnYWxwaGFDaG5sJywKICByZWRjaG5sOiAncmVkQ2hubCcsCiAgZ3JlZW5jaG5sOiAnZ3JlZW5DaG5sJywKICBibHVlY2hubDogJ2JsdWVDaG5sJwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlKGRhdGEpIHsKICBkYXRhID0gZGF0YS50b1N0cmluZygpCiAgCiAgdmFyIHhtbFJvb3QgPSBwYXJzZUZyb21TdHJpbmcoZGF0YSkKICB2YXIgb3V0cHV0ID0gewogICAgcGFnZXM6IFtdLAogICAgY2hhcnM6IFtdLAogICAga2VybmluZ3M6IFtdCiAgfQoKICAvL2dldCBjb25maWcgc2V0dGluZ3MKICA7WydpbmZvJywgJ2NvbW1vbiddLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICB2YXIgZWxlbWVudCA9IHhtbFJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoa2V5KVswXQogICAgaWYgKGVsZW1lbnQpCiAgICAgIG91dHB1dFtrZXldID0gcGFyc2VBdHRyaWJ1dGVzKGdldEF0dHJpYnMoZWxlbWVudCkpCiAgfSkKCiAgLy9nZXQgcGFnZSBpbmZvCiAgdmFyIHBhZ2VSb290ID0geG1sUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGFnZXMnKVswXQogIGlmICghcGFnZVJvb3QpCiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBmaWxlIC0tIG5vIDxwYWdlcz4gZWxlbWVudCcpCiAgdmFyIHBhZ2VzID0gcGFnZVJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhZ2UnKQogIGZvciAodmFyIGk9MDsgaTxwYWdlcy5sZW5ndGg7IGkrKykgewogICAgdmFyIHAgPSBwYWdlc1tpXQogICAgdmFyIGlkID0gcGFyc2VJbnQocC5nZXRBdHRyaWJ1dGUoJ2lkJyksIDEwKQogICAgdmFyIGZpbGUgPSBwLmdldEF0dHJpYnV0ZSgnZmlsZScpCiAgICBpZiAoaXNOYU4oaWQpKQogICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBmaWxlIC0tIHBhZ2UgImlkIiBhdHRyaWJ1dGUgaXMgTmFOJykKICAgIGlmICghZmlsZSkKICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZmlsZSAtLSBuZWVkcyBwYWdlICJmaWxlIiBhdHRyaWJ1dGUnKQogICAgb3V0cHV0LnBhZ2VzW3BhcnNlSW50KGlkLCAxMCldID0gZmlsZQogIH0KCiAgLy9nZXQga2VybmluZ3MgLyBjaGFycwogIDtbJ2NoYXJzJywgJ2tlcm5pbmdzJ10uZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgIHZhciBlbGVtZW50ID0geG1sUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShrZXkpWzBdCiAgICBpZiAoIWVsZW1lbnQpCiAgICAgIHJldHVybgogICAgdmFyIGNoaWxkVGFnID0ga2V5LnN1YnN0cmluZygwLCBrZXkubGVuZ3RoLTEpCiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKGNoaWxkVGFnKQogICAgZm9yICh2YXIgaT0wOyBpPGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7ICAgICAgCiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldCiAgICAgIG91dHB1dFtrZXldLnB1c2gocGFyc2VBdHRyaWJ1dGVzKGdldEF0dHJpYnMoY2hpbGQpKSkKICAgIH0KICB9KQogIHJldHVybiBvdXRwdXQKfQoKZnVuY3Rpb24gZ2V0QXR0cmlicyhlbGVtZW50KSB7CiAgdmFyIGF0dHJpYnMgPSBnZXRBdHRyaWJMaXN0KGVsZW1lbnQpCiAgcmV0dXJuIGF0dHJpYnMucmVkdWNlKGZ1bmN0aW9uKGRpY3QsIGF0dHJpYikgewogICAgdmFyIGtleSA9IG1hcE5hbWUoYXR0cmliLm5vZGVOYW1lKQogICAgZGljdFtrZXldID0gYXR0cmliLm5vZGVWYWx1ZQogICAgcmV0dXJuIGRpY3QKICB9LCB7fSkKfQoKZnVuY3Rpb24gZ2V0QXR0cmliTGlzdChlbGVtZW50KSB7CiAgLy9JRTgrIGFuZCBtb2Rlcm4gYnJvd3NlcnMKICB2YXIgYXR0cmlicyA9IFtdCiAgZm9yICh2YXIgaT0wOyBpPGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykKICAgIGF0dHJpYnMucHVzaChlbGVtZW50LmF0dHJpYnV0ZXNbaV0pCiAgcmV0dXJuIGF0dHJpYnMKfQoKZnVuY3Rpb24gbWFwTmFtZShub2RlTmFtZSkgewogIHJldHVybiBOQU1FX01BUFtub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBub2RlTmFtZQp9Cn0seyIuL3BhcnNlLWF0dHJpYnMiOjMxLCJ4bWwtcGFyc2UtZnJvbS1zdHJpbmciOjUyfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovL1NvbWUgdmVyc2lvbnMgb2YgR2x5cGhEZXNpZ25lciBoYXZlIGEgdHlwbwovL3RoYXQgY2F1c2VzIHNvbWUgYnVncyB3aXRoIHBhcnNpbmcuIAovL05lZWQgdG8gY29uZmlybSB3aXRoIHJlY2VudCB2ZXJzaW9uIG9mIHRoZSBzb2Z0d2FyZQovL3RvIHNlZSB3aGV0aGVyIHRoaXMgaXMgc3RpbGwgYW4gaXNzdWUgb3Igbm90Lgp2YXIgR0xZUEhfREVTSUdORVJfRVJST1IgPSAnY2hhc3JzZXQnCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhvYmopIHsKICBpZiAoR0xZUEhfREVTSUdORVJfRVJST1IgaW4gb2JqKSB7CiAgICBvYmpbJ2NoYXJzZXQnXSA9IG9ialtHTFlQSF9ERVNJR05FUl9FUlJPUl0KICAgIGRlbGV0ZSBvYmpbR0xZUEhfREVTSUdORVJfRVJST1JdCiAgfQoKICBmb3IgKHZhciBrIGluIG9iaikgewogICAgaWYgKGsgPT09ICdmYWNlJyB8fCBrID09PSAnY2hhcnNldCcpIAogICAgICBjb250aW51ZQogICAgZWxzZSBpZiAoayA9PT0gJ3BhZGRpbmcnIHx8IGsgPT09ICdzcGFjaW5nJykKICAgICAgb2JqW2tdID0gcGFyc2VJbnRMaXN0KG9ialtrXSkKICAgIGVsc2UKICAgICAgb2JqW2tdID0gcGFyc2VJbnQob2JqW2tdLCAxMCkgCiAgfQogIHJldHVybiBvYmoKfQoKZnVuY3Rpb24gcGFyc2VJbnRMaXN0KGRhdGEpIHsKICByZXR1cm4gZGF0YS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbih2YWwpIHsKICAgIHJldHVybiBwYXJzZUludCh2YWwsIDEwKQogIH0pCn0KfSx7fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgdHJpbSA9IF9kZXJlcV8oJ3RyaW0nKQogICwgZm9yRWFjaCA9IF9kZXJlcV8oJ2Zvci1lYWNoJykKICAsIGlzQXJyYXkgPSBmdW5jdGlvbihhcmcpIHsKICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBBcnJheV0nOwogICAgfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGVhZGVycykgewogIGlmICghaGVhZGVycykKICAgIHJldHVybiB7fQoKICB2YXIgcmVzdWx0ID0ge30KCiAgZm9yRWFjaCgKICAgICAgdHJpbShoZWFkZXJzKS5zcGxpdCgnXG4nKQogICAgLCBmdW5jdGlvbiAocm93KSB7CiAgICAgICAgdmFyIGluZGV4ID0gcm93LmluZGV4T2YoJzonKQogICAgICAgICAgLCBrZXkgPSB0cmltKHJvdy5zbGljZSgwLCBpbmRleCkpLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICwgdmFsdWUgPSB0cmltKHJvdy5zbGljZShpbmRleCArIDEpKQoKICAgICAgICBpZiAodHlwZW9mKHJlc3VsdFtrZXldKSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUKICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVzdWx0W2tleV0pKSB7CiAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHRba2V5XSA9IFsgcmVzdWx0W2tleV0sIHZhbHVlIF0KICAgICAgICB9CiAgICAgIH0KICApCgogIHJldHVybiByZXN1bHQKfQp9LHsiZm9yLWVhY2giOjE2LCJ0cmltIjo0OH1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewp2YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge307Cgp2YXIgcHJlc2VudCA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIG5hbWVzID0gWydub3cnLCAnd2Via2l0Tm93JywgJ21zTm93JywgJ21vek5vdycsICdvTm93J107CiAgd2hpbGUgKG5hbWVzLmxlbmd0aCkgewogICAgdmFyIG5hbWUgPSBuYW1lcy5zaGlmdCgpOwogICAgaWYgKG5hbWUgaW4gcGVyZm9ybWFuY2UpIHsKICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlW25hbWVdLmJpbmQocGVyZm9ybWFuY2UpOwogICAgfQogIH0KCiAgdmFyIGRhdGVOb3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTsKICB2YXIgbmF2aWdhdGlvblN0YXJ0ID0gKHBlcmZvcm1hbmNlLnRpbWluZyB8fCB7fSkubmF2aWdhdGlvblN0YXJ0IHx8IGRhdGVOb3coKTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGRhdGVOb3coKSAtIG5hdmlnYXRpb25TdGFydDsKICB9Owp9KCkpOwoKcHJlc2VudC5wZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdzsKcHJlc2VudC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogIHBlcmZvcm1hbmNlLm5vdyA9IHByZXNlbnQucGVyZm9ybWFuY2VOb3c7Cn07CnByZXNlbnQuY29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7CiAgcGVyZm9ybWFuY2Uubm93ID0gcHJlc2VudDsKfTsKcHJlc2VudC5jb25mbGljdCgpOwoKbW9kdWxlLmV4cG9ydHMgPSBwcmVzZW50OwoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHt9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoc2V0SW1tZWRpYXRlKXsKKGZ1bmN0aW9uKHJvb3QpIHsKCgkvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBwcm9taXNlLXBvbHlmaWxsIHdpbGwgYmUgdW5hZmZlY3RlZCBieQoJLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpCgl2YXIgc2V0VGltZW91dEZ1bmMgPSBzZXRUaW1lb3V0OwoKCS8vIFVzZSBwb2x5ZmlsbCBmb3Igc2V0SW1tZWRpYXRlIGZvciBwZXJmb3JtYW5jZSBnYWlucwoJdmFyIGFzYXAgPSAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXRJbW1lZGlhdGUpIHx8CgkJZnVuY3Rpb24oZm4pIHsgc2V0VGltZW91dEZ1bmMoZm4sIDEpOyB9OwoKCS8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZAoJZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykgewoJCXJldHVybiBmdW5jdGlvbigpIHsKCQkJZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTsKCQl9Cgl9CgoJdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAiW29iamVjdCBBcnJheV0iIH07CgoJZnVuY3Rpb24gUHJvbWlzZShmbikgewoJCWlmICh0eXBlb2YgdGhpcyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpOwoJCWlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7CgkJdGhpcy5fc3RhdGUgPSBudWxsOwoJCXRoaXMuX3ZhbHVlID0gbnVsbDsKCQl0aGlzLl9kZWZlcnJlZHMgPSBbXQoKCQlkb1Jlc29sdmUoZm4sIGJpbmQocmVzb2x2ZSwgdGhpcyksIGJpbmQocmVqZWN0LCB0aGlzKSkKCX0KCglmdW5jdGlvbiBoYW5kbGUoZGVmZXJyZWQpIHsKCQl2YXIgbWUgPSB0aGlzOwoJCWlmICh0aGlzLl9zdGF0ZSA9PT0gbnVsbCkgewoJCQl0aGlzLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7CgkJCXJldHVybgoJCX0KCQlhc2FwKGZ1bmN0aW9uKCkgewoJCQl2YXIgY2IgPSBtZS5fc3RhdGUgPyBkZWZlcnJlZC5vbkZ1bGZpbGxlZCA6IGRlZmVycmVkLm9uUmVqZWN0ZWQKCQkJaWYgKGNiID09PSBudWxsKSB7CgkJCQkobWUuX3N0YXRlID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkobWUuX3ZhbHVlKTsKCQkJCXJldHVybjsKCQkJfQoJCQl2YXIgcmV0OwoJCQl0cnkgewoJCQkJcmV0ID0gY2IobWUuX3ZhbHVlKTsKCQkJfQoJCQljYXRjaCAoZSkgewoJCQkJZGVmZXJyZWQucmVqZWN0KGUpOwoJCQkJcmV0dXJuOwoJCQl9CgkJCWRlZmVycmVkLnJlc29sdmUocmV0KTsKCQl9KQoJfQoKCWZ1bmN0aW9uIHJlc29sdmUobmV3VmFsdWUpIHsKCQl0cnkgeyAvL1Byb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlCgkJCWlmIChuZXdWYWx1ZSA9PT0gdGhpcykgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTsKCQkJaWYgKG5ld1ZhbHVlICYmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykpIHsKCQkJCXZhciB0aGVuID0gbmV3VmFsdWUudGhlbjsKCQkJCWlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykgewoJCQkJCWRvUmVzb2x2ZShiaW5kKHRoZW4sIG5ld1ZhbHVlKSwgYmluZChyZXNvbHZlLCB0aGlzKSwgYmluZChyZWplY3QsIHRoaXMpKTsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCX0KCQkJdGhpcy5fc3RhdGUgPSB0cnVlOwoJCQl0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlOwoJCQlmaW5hbGUuY2FsbCh0aGlzKTsKCQl9IGNhdGNoIChlKSB7IHJlamVjdC5jYWxsKHRoaXMsIGUpOyB9Cgl9CgoJZnVuY3Rpb24gcmVqZWN0KG5ld1ZhbHVlKSB7CgkJdGhpcy5fc3RhdGUgPSBmYWxzZTsKCQl0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlOwoJCWZpbmFsZS5jYWxsKHRoaXMpOwoJfQoKCWZ1bmN0aW9uIGZpbmFsZSgpIHsKCQlmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fZGVmZXJyZWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CgkJCWhhbmRsZS5jYWxsKHRoaXMsIHRoaXMuX2RlZmVycmVkc1tpXSk7CgkJfQoJCXRoaXMuX2RlZmVycmVkcyA9IG51bGw7Cgl9CgoJZnVuY3Rpb24gSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzb2x2ZSwgcmVqZWN0KXsKCQl0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsOwoJCXRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nID8gb25SZWplY3RlZCA6IG51bGw7CgkJdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTsKCQl0aGlzLnJlamVjdCA9IHJlamVjdDsKCX0KCgkvKioKCSAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlCgkgKiBvbkZ1bGZpbGxlZCBhbmQgb25SZWplY3RlZCBhcmUgb25seSBjYWxsZWQgb25jZS4KCSAqCgkgKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuCgkgKi8KCWZ1bmN0aW9uIGRvUmVzb2x2ZShmbiwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHsKCQl2YXIgZG9uZSA9IGZhbHNlOwoJCXRyeSB7CgkJCWZuKGZ1bmN0aW9uICh2YWx1ZSkgewoJCQkJaWYgKGRvbmUpIHJldHVybjsKCQkJCWRvbmUgPSB0cnVlOwoJCQkJb25GdWxmaWxsZWQodmFsdWUpOwoJCQl9LCBmdW5jdGlvbiAocmVhc29uKSB7CgkJCQlpZiAoZG9uZSkgcmV0dXJuOwoJCQkJZG9uZSA9IHRydWU7CgkJCQlvblJlamVjdGVkKHJlYXNvbik7CgkJCX0pCgkJfSBjYXRjaCAoZXgpIHsKCQkJaWYgKGRvbmUpIHJldHVybjsKCQkJZG9uZSA9IHRydWU7CgkJCW9uUmVqZWN0ZWQoZXgpOwoJCX0KCX0KCglQcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7CgkJcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTsKCX07CgoJUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7CgkJdmFyIG1lID0gdGhpczsKCQlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CgkJCWhhbmRsZS5jYWxsKG1lLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzb2x2ZSwgcmVqZWN0KSk7CgkJfSkKCX07CgoJUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoKSB7CgkJdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoYXJndW1lbnRzWzBdKSA/IGFyZ3VtZW50c1swXSA6IGFyZ3VtZW50cyk7CgoJCXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkJCWlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pOwoJCQl2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7CgkJCWZ1bmN0aW9uIHJlcyhpLCB2YWwpIHsKCQkJCXRyeSB7CgkJCQkJaWYgKHZhbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykpIHsKCQkJCQkJdmFyIHRoZW4gPSB2YWwudGhlbjsKCQkJCQkJaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7CgkJCQkJCQl0aGVuLmNhbGwodmFsLCBmdW5jdGlvbiAodmFsKSB7IHJlcyhpLCB2YWwpIH0sIHJlamVjdCk7CgkJCQkJCQlyZXR1cm47CgkJCQkJCX0KCQkJCQl9CgkJCQkJYXJnc1tpXSA9IHZhbDsKCQkJCQlpZiAoLS1yZW1haW5pbmcgPT09IDApIHsKCQkJCQkJcmVzb2x2ZShhcmdzKTsKCQkJCQl9CgkJCQl9IGNhdGNoIChleCkgewoJCQkJCXJlamVjdChleCk7CgkJCQl9CgkJCX0KCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7CgkJCQlyZXMoaSwgYXJnc1tpXSk7CgkJCX0KCQl9KTsKCX07CgoJUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7CgkJaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHsKCQkJcmV0dXJuIHZhbHVlOwoJCX0KCgkJcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CgkJCXJlc29sdmUodmFsdWUpOwoJCX0pOwoJfTsKCglQcm9taXNlLnJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkgewoJCXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkJCXJlamVjdCh2YWx1ZSk7CgkJfSk7Cgl9OwoKCVByb21pc2UucmFjZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHsKCQlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoJCQlmb3IodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKCQkJCXZhbHVlc1tpXS50aGVuKHJlc29sdmUsIHJlamVjdCk7CgkJCX0KCQl9KTsKCX07CgoJLyoqCgkgKiBTZXQgdGhlIGltbWVkaWF0ZSBmdW5jdGlvbiB0byBleGVjdXRlIGNhbGxiYWNrcwoJICogQHBhcmFtIGZuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdG8gZXhlY3V0ZQoJICogQHByaXZhdGUKCSAqLwoJUHJvbWlzZS5fc2V0SW1tZWRpYXRlRm4gPSBmdW5jdGlvbiBfc2V0SW1tZWRpYXRlRm4oZm4pIHsKCQlhc2FwID0gZm47Cgl9OwoKCWlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewoJCW1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTsKCX0gZWxzZSBpZiAoIXJvb3QuUHJvbWlzZSkgewoJCXJvb3QuUHJvbWlzZSA9IFByb21pc2U7Cgl9Cgp9KSh0aGlzKTsKCn0pLmNhbGwodGhpcyxfZGVyZXFfKCJ0aW1lcnMiKS5zZXRJbW1lZGlhdGUpCgp9LHsidGltZXJzIjo0Nn1dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGR0eXBlID0gX2RlcmVxXygnZHR5cGUnKQp2YXIgYW5BcnJheSA9IF9kZXJlcV8oJ2FuLWFycmF5JykKdmFyIGlzQnVmZmVyID0gX2RlcmVxXygnaXMtYnVmZmVyJykKCnZhciBDVyA9IFswLCAyLCAzXQp2YXIgQ0NXID0gWzIsIDEsIDNdCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZVF1YWRFbGVtZW50cyhhcnJheSwgb3B0KSB7CiAgICAvL2lmIHVzZXIgZGlkbid0IHNwZWNpZnkgYW4gb3V0cHV0IGFycmF5CiAgICBpZiAoIWFycmF5IHx8ICEoYW5BcnJheShhcnJheSkgfHwgaXNCdWZmZXIoYXJyYXkpKSkgewogICAgICAgIG9wdCA9IGFycmF5IHx8IHt9CiAgICAgICAgYXJyYXkgPSBudWxsCiAgICB9CgogICAgaWYgKHR5cGVvZiBvcHQgPT09ICdudW1iZXInKSAvL2JhY2t3YXJkcy1jb21wYXRpYmxlCiAgICAgICAgb3B0ID0geyBjb3VudDogb3B0IH0KICAgIGVsc2UKICAgICAgICBvcHQgPSBvcHQgfHwge30KCiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvcHQudHlwZSA9PT0gJ3N0cmluZycgPyBvcHQudHlwZSA6ICd1aW50MTYnCiAgICB2YXIgY291bnQgPSB0eXBlb2Ygb3B0LmNvdW50ID09PSAnbnVtYmVyJyA/IG9wdC5jb3VudCA6IDEKICAgIHZhciBzdGFydCA9IChvcHQuc3RhcnQgfHwgMCkgCgogICAgdmFyIGRpciA9IG9wdC5jbG9ja3dpc2UgIT09IGZhbHNlID8gQ1cgOiBDQ1csCiAgICAgICAgYSA9IGRpclswXSwgCiAgICAgICAgYiA9IGRpclsxXSwKICAgICAgICBjID0gZGlyWzJdCgogICAgdmFyIG51bUluZGljZXMgPSBjb3VudCAqIDYKCiAgICB2YXIgaW5kaWNlcyA9IGFycmF5IHx8IG5ldyAoZHR5cGUodHlwZSkpKG51bUluZGljZXMpCiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBudW1JbmRpY2VzOyBpICs9IDYsIGogKz0gNCkgewogICAgICAgIHZhciB4ID0gaSArIHN0YXJ0CiAgICAgICAgaW5kaWNlc1t4ICsgMF0gPSBqICsgMAogICAgICAgIGluZGljZXNbeCArIDFdID0gaiArIDEKICAgICAgICBpbmRpY2VzW3ggKyAyXSA9IGogKyAyCiAgICAgICAgaW5kaWNlc1t4ICsgM10gPSBqICsgYQogICAgICAgIGluZGljZXNbeCArIDRdID0gaiArIGIKICAgICAgICBpbmRpY2VzW3ggKyA1XSA9IGogKyBjCiAgICB9CiAgICByZXR1cm4gaW5kaWNlcwp9Cn0seyJhbi1hcnJheSI6MSwiZHR5cGUiOjE0LCJpcy1idWZmZXIiOjIwfV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKgogKiBhbmltZS5qcyB2My4wLjAKICogKGMpIDIwMTkgSnVsaWFuIEdhcm5pZXIKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlCiAqIGFuaW1lanMuY29tCiAqLwoKJ3VzZSBzdHJpY3QnOwoKLy8gRGVmYXVsdHMKCnZhciBkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncyA9IHsKICB1cGRhdGU6IG51bGwsCiAgYmVnaW46IG51bGwsCiAgbG9vcEJlZ2luOiBudWxsLAogIGNoYW5nZUJlZ2luOiBudWxsLAogIGNoYW5nZTogbnVsbCwKICBjaGFuZ2VDb21wbGV0ZTogbnVsbCwKICBsb29wQ29tcGxldGU6IG51bGwsCiAgY29tcGxldGU6IG51bGwsCiAgbG9vcDogMSwKICBkaXJlY3Rpb246ICdub3JtYWwnLAogIGF1dG9wbGF5OiB0cnVlLAogIHRpbWVsaW5lT2Zmc2V0OiAwCn07Cgp2YXIgZGVmYXVsdFR3ZWVuU2V0dGluZ3MgPSB7CiAgZHVyYXRpb246IDEwMDAsCiAgZGVsYXk6IDAsCiAgZW5kRGVsYXk6IDAsCiAgZWFzaW5nOiAnZWFzZU91dEVsYXN0aWMoMSwgLjUpJywKICByb3VuZDogMAp9OwoKdmFyIHZhbGlkVHJhbnNmb3JtcyA9IFsndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJywgJ3RyYW5zbGF0ZVonLCAncm90YXRlJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3NjYWxlJywgJ3NjYWxlWCcsICdzY2FsZVknLCAnc2NhbGVaJywgJ3NrZXcnLCAnc2tld1gnLCAnc2tld1knLCAncGVyc3BlY3RpdmUnXTsKCi8vIENhY2hpbmcKCnZhciBjYWNoZSA9IHsKICBDU1M6IHt9LAogIHNwcmluZ3M6IHt9Cn07CgovLyBVdGlscwoKZnVuY3Rpb24gbWluTWF4KHZhbCwgbWluLCBtYXgpIHsKICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsLCBtaW4pLCBtYXgpOwp9CgpmdW5jdGlvbiBzdHJpbmdDb250YWlucyhzdHIsIHRleHQpIHsKICByZXR1cm4gc3RyLmluZGV4T2YodGV4dCkgPiAtMTsKfQoKZnVuY3Rpb24gYXBwbHlBcmd1bWVudHMoZnVuYywgYXJncykgewogIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOwp9Cgp2YXIgaGV4UmVnZXggPSAvKF4jWzAtOUEtRl17Nn0kKXwoXiNbMC05QS1GXXszfSQpL2k7CnZhciByZ2JQcmVmaXhSZWdleCA9IC9ecmdiLzsKdmFyIGhzbFJlZ2V4ID0gL15oc2wvOwoKdmFyIGlzID0gewogIGFycjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSk7IH0sCiAgb2JqOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gc3RyaW5nQ29udGFpbnMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpLCAnT2JqZWN0Jyk7IH0sCiAgcHRoOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaXMub2JqKGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ3RvdGFsTGVuZ3RoJyk7IH0sCiAgc3ZnOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7IH0sCiAgaW5wOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQ7IH0sCiAgZG9tOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ub2RlVHlwZSB8fCBpcy5zdmcoYSk7IH0sCiAgc3RyOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnOyB9LAogIGZuYzogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nOyB9LAogIHVuZDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHR5cGVvZiBhID09PSAndW5kZWZpbmVkJzsgfSwKICBoZXg6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBoZXhSZWdleC50ZXN0KGEpOyB9LAogIHJnYjogZnVuY3Rpb24gKGEpIHsgcmV0dXJuIHJnYlByZWZpeFJlZ2V4LnRlc3QoYSk7IH0sCiAgaHNsOiBmdW5jdGlvbiAoYSkgeyByZXR1cm4gaHNsUmVnZXgudGVzdChhKTsgfSwKICBjb2w6IGZ1bmN0aW9uIChhKSB7IHJldHVybiAoaXMuaGV4KGEpIHx8IGlzLnJnYihhKSB8fCBpcy5oc2woYSkpOyB9LAogIGtleTogZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFkZWZhdWx0SW5zdGFuY2VTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShhKSAmJiAhZGVmYXVsdFR3ZWVuU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gJ3RhcmdldHMnICYmIGEgIT09ICdrZXlmcmFtZXMnOyB9Cn07CgovLyBFYXNpbmdzCgp2YXIgZWFzaW5nRnVuY3Rpb25SZWdleCA9IC9cKChbXildKylcKS87CgpmdW5jdGlvbiBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoc3RyaW5nKSB7CiAgdmFyIG1hdGNoID0gZWFzaW5nRnVuY3Rpb25SZWdleC5leGVjKHN0cmluZyk7CiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHBhcnNlRmxvYXQocCk7IH0pIDogW107Cn0KCi8vIFNwcmluZyBzb2x2ZXIgaW5zcGlyZWQgYnkgV2Via2l0IENvcHlyaWdodCDCqSAyMDE2IEFwcGxlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gaHR0cHM6Ly93ZWJraXQub3JnL2RlbW9zL3NwcmluZy9zcHJpbmcuanMKCmZ1bmN0aW9uIHNwcmluZyhzdHJpbmcsIGR1cmF0aW9uKSB7CgogIHZhciBwYXJhbXMgPSBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoc3RyaW5nKTsKICB2YXIgbWFzcyA9IG1pbk1heChpcy51bmQocGFyYW1zWzBdKSA/IDEgOiBwYXJhbXNbMF0sIC4xLCAxMDApOwogIHZhciBzdGlmZm5lc3MgPSBtaW5NYXgoaXMudW5kKHBhcmFtc1sxXSkgPyAxMDAgOiBwYXJhbXNbMV0sIC4xLCAxMDApOwogIHZhciBkYW1waW5nID0gbWluTWF4KGlzLnVuZChwYXJhbXNbMl0pID8gMTAgOiBwYXJhbXNbMl0sIC4xLCAxMDApOwogIHZhciB2ZWxvY2l0eSA9ICBtaW5NYXgoaXMudW5kKHBhcmFtc1szXSkgPyAwIDogcGFyYW1zWzNdLCAuMSwgMTAwKTsKICB2YXIgdzAgPSBNYXRoLnNxcnQoc3RpZmZuZXNzIC8gbWFzcyk7CiAgdmFyIHpldGEgPSBkYW1waW5nIC8gKDIgKiBNYXRoLnNxcnQoc3RpZmZuZXNzICogbWFzcykpOwogIHZhciB3ZCA9IHpldGEgPCAxID8gdzAgKiBNYXRoLnNxcnQoMSAtIHpldGEgKiB6ZXRhKSA6IDA7CiAgdmFyIGEgPSAxOwogIHZhciBiID0gemV0YSA8IDEgPyAoemV0YSAqIHcwICsgLXZlbG9jaXR5KSAvIHdkIDogLXZlbG9jaXR5ICsgdzA7CgogIGZ1bmN0aW9uIHNvbHZlcih0KSB7CiAgICB2YXIgcHJvZ3Jlc3MgPSBkdXJhdGlvbiA/IChkdXJhdGlvbiAqIHQpIC8gMTAwMCA6IHQ7CiAgICBpZiAoemV0YSA8IDEpIHsKICAgICAgcHJvZ3Jlc3MgPSBNYXRoLmV4cCgtcHJvZ3Jlc3MgKiB6ZXRhICogdzApICogKGEgKiBNYXRoLmNvcyh3ZCAqIHByb2dyZXNzKSArIGIgKiBNYXRoLnNpbih3ZCAqIHByb2dyZXNzKSk7CiAgICB9IGVsc2UgewogICAgICBwcm9ncmVzcyA9IChhICsgYiAqIHByb2dyZXNzKSAqIE1hdGguZXhwKC1wcm9ncmVzcyAqIHcwKTsKICAgIH0KICAgIGlmICh0ID09PSAwIHx8IHQgPT09IDEpIHsgcmV0dXJuIHQ7IH0KICAgIHJldHVybiAxIC0gcHJvZ3Jlc3M7CiAgfQoKICBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHsKICAgIHZhciBjYWNoZWQgPSBjYWNoZS5zcHJpbmdzW3N0cmluZ107CiAgICBpZiAoY2FjaGVkKSB7IHJldHVybiBjYWNoZWQ7IH0KICAgIHZhciBmcmFtZSA9IDEvNjsKICAgIHZhciBlbGFwc2VkID0gMDsKICAgIHZhciByZXN0ID0gMDsKICAgIHdoaWxlKHRydWUpIHsKICAgICAgZWxhcHNlZCArPSBmcmFtZTsKICAgICAgaWYgKHNvbHZlcihlbGFwc2VkKSA9PT0gMSkgewogICAgICAgIHJlc3QrKzsKICAgICAgICBpZiAocmVzdCA+PSAxNikgeyBicmVhazsgfQogICAgICB9IGVsc2UgewogICAgICAgIHJlc3QgPSAwOwogICAgICB9CiAgICB9CiAgICB2YXIgZHVyYXRpb24gPSBlbGFwc2VkICogZnJhbWUgKiAxMDAwOwogICAgY2FjaGUuc3ByaW5nc1tzdHJpbmddID0gZHVyYXRpb247CiAgICByZXR1cm4gZHVyYXRpb247CiAgfQoKICByZXR1cm4gZHVyYXRpb24gPyBzb2x2ZXIgOiBnZXREdXJhdGlvbjsKCn0KCi8vIEVsYXN0aWMgZWFzaW5nIGFkYXB0ZWQgZnJvbSBqUXVlcnlVSSBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9lYXNpbmdzLwoKZnVuY3Rpb24gZWxhc3RpYyhhbXBsaXR1ZGUsIHBlcmlvZCkgewogIGlmICggYW1wbGl0dWRlID09PSB2b2lkIDAgKSBhbXBsaXR1ZGUgPSAxOwogIGlmICggcGVyaW9kID09PSB2b2lkIDAgKSBwZXJpb2QgPSAuNTsKCiAgdmFyIGEgPSBtaW5NYXgoYW1wbGl0dWRlLCAxLCAxMCk7CiAgdmFyIHAgPSBtaW5NYXgocGVyaW9kLCAuMSwgMik7CiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7CiAgICByZXR1cm4gKHQgPT09IDAgfHwgdCA9PT0gMSkgPyB0IDoKICAgICAgLWEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpICogTWF0aC5zaW4oKCgodCAtIDEpIC0gKHAgLyAoTWF0aC5QSSAqIDIpICogTWF0aC5hc2luKDEgLyBhKSkpICogKE1hdGguUEkgKiAyKSkgLyBwKTsKICB9Cn0KCi8vIEJhc2ljIHN0ZXBzIGVhc2luZyBpbXBsZW1lbnRhdGlvbiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9mci9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24KCmZ1bmN0aW9uIHN0ZXBzKHN0ZXBzKSB7CiAgaWYgKCBzdGVwcyA9PT0gdm9pZCAwICkgc3RlcHMgPSAxMDsKCiAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiBNYXRoLnJvdW5kKHQgKiBzdGVwcykgKiAoMSAvIHN0ZXBzKTsgfTsKfQoKLy8gQmV6aWVyRWFzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZwoKdmFyIGJlemllciA9IChmdW5jdGlvbiAoKSB7CgogIHZhciBrU3BsaW5lVGFibGVTaXplID0gMTE7CiAgdmFyIGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTsKCiAgZnVuY3Rpb24gQShhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExIH0KICBmdW5jdGlvbiBCKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTEgfQogIGZ1bmN0aW9uIEMoYUExKSAgICAgIHsgcmV0dXJuIDMuMCAqIGFBMSB9CgogIGZ1bmN0aW9uIGNhbGNCZXppZXIoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVCB9CiAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpIH0KCiAgZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7CiAgICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDsKICAgIGRvIHsKICAgICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDsKICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDsKICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7IGFCID0gY3VycmVudFQ7IH0gZWxzZSB7IGFBID0gY3VycmVudFQ7IH0KICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IDAuMDAwMDAwMSAmJiArK2kgPCAxMCk7CiAgICByZXR1cm4gY3VycmVudFQ7CiAgfQoKICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7CiAgICAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7CiAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgeyByZXR1cm4gYUd1ZXNzVDsgfQogICAgICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYOwogICAgICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlOwogICAgfQogICAgcmV0dXJuIGFHdWVzc1Q7CiAgfQoKICBmdW5jdGlvbiBiZXppZXIobVgxLCBtWTEsIG1YMiwgbVkyKSB7CgogICAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7IHJldHVybjsgfQogICAgdmFyIHNhbXBsZVZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7CgogICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7CiAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRURm9yWChhWCkgewoKICAgICAgdmFyIGludGVydmFsU3RhcnQgPSAwOwogICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7CiAgICAgIHZhciBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7CgogICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkgewogICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplOwogICAgICB9CgogICAgICAtLWN1cnJlbnRTYW1wbGU7CgogICAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7CiAgICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTsKICAgICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpOwoKICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSAwLjAwMSkgewogICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7CiAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHsKICAgICAgICByZXR1cm4gZ3Vlc3NGb3JUOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTsKICAgICAgfQoKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHsKICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7IHJldHVybiB4OyB9CiAgICAgIGlmICh4ID09PSAwIHx8IHggPT09IDEpIHsgcmV0dXJuIHg7IH0KICAgICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTsKICAgIH0KCiAgfQoKICByZXR1cm4gYmV6aWVyOwoKfSkoKTsKCnZhciBwZW5uZXIgPSAoZnVuY3Rpb24gKCkgewoKICB2YXIgbmFtZXMgPSBbJ1F1YWQnLCAnQ3ViaWMnLCAnUXVhcnQnLCAnUXVpbnQnLCAnU2luZScsICdFeHBvJywgJ0NpcmMnLCAnQmFjaycsICdFbGFzdGljJ107CgogIC8vIEFwcHJveGltYXRlZCBQZW5uZXIgZXF1YXRpb25zIGh0dHA6Ly9tYXR0aGV3bGVpbi5jb20vY2Vhc2VyLwoKICB2YXIgY3VydmVzID0gewogICAgSW46IFsKICAgICAgWzAuNTUwLCAwLjA4NSwgMC42ODAsIDAuNTMwXSwgLyogaW5RdWFkICovCiAgICAgIFswLjU1MCwgMC4wNTUsIDAuNjc1LCAwLjE5MF0sIC8qIGluQ3ViaWMgKi8KICAgICAgWzAuODk1LCAwLjAzMCwgMC42ODUsIDAuMjIwXSwgLyogaW5RdWFydCAqLwogICAgICBbMC43NTUsIDAuMDUwLCAwLjg1NSwgMC4wNjBdLCAvKiBpblF1aW50ICovCiAgICAgIFswLjQ3MCwgMC4wMDAsIDAuNzQ1LCAwLjcxNV0sIC8qIGluU2luZSAqLwogICAgICBbMC45NTAsIDAuMDUwLCAwLjc5NSwgMC4wMzVdLCAvKiBpbkV4cG8gKi8KICAgICAgWzAuNjAwLCAwLjA0MCwgMC45ODAsIDAuMzM1XSwgLyogaW5DaXJjICovCiAgICAgIFswLjYwMCwtMC4yODAsIDAuNzM1LCAwLjA0NV0sIC8qIGluQmFjayAqLwogICAgICBlbGFzdGljIC8qIGluRWxhc3RpYyAqLwogICAgXSwKICAgIE91dDogWwogICAgICBbMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDBdLCAvKiBvdXRRdWFkICovCiAgICAgIFswLjIxNSwgMC42MTAsIDAuMzU1LCAxLjAwMF0sIC8qIG91dEN1YmljICovCiAgICAgIFswLjE2NSwgMC44NDAsIDAuNDQwLCAxLjAwMF0sIC8qIG91dFF1YXJ0ICovCiAgICAgIFswLjIzMCwgMS4wMDAsIDAuMzIwLCAxLjAwMF0sIC8qIG91dFF1aW50ICovCiAgICAgIFswLjM5MCwgMC41NzUsIDAuNTY1LCAxLjAwMF0sIC8qIG91dFNpbmUgKi8KICAgICAgWzAuMTkwLCAxLjAwMCwgMC4yMjAsIDEuMDAwXSwgLyogb3V0RXhwbyAqLwogICAgICBbMC4wNzUsIDAuODIwLCAwLjE2NSwgMS4wMDBdLCAvKiBvdXRDaXJjICovCiAgICAgIFswLjE3NSwgMC44ODUsIDAuMzIwLCAxLjI3NV0sIC8qIG91dEJhY2sgKi8KICAgICAgZnVuY3Rpb24gKGEsIHApIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiAxIC0gZWxhc3RpYyhhLCBwKSgxIC0gdCk7IH07IH0gLyogb3V0RWxhc3RpYyAqLwogICAgXSwKICAgIEluT3V0OiBbCiAgICAgIFswLjQ1NSwgMC4wMzAsIDAuNTE1LCAwLjk1NV0sIC8qIGluT3V0UXVhZCAqLwogICAgICBbMC42NDUsIDAuMDQ1LCAwLjM1NSwgMS4wMDBdLCAvKiBpbk91dEN1YmljICovCiAgICAgIFswLjc3MCwgMC4wMDAsIDAuMTc1LCAxLjAwMF0sIC8qIGluT3V0UXVhcnQgKi8KICAgICAgWzAuODYwLCAwLjAwMCwgMC4wNzAsIDEuMDAwXSwgLyogaW5PdXRRdWludCAqLwogICAgICBbMC40NDUsIDAuMDUwLCAwLjU1MCwgMC45NTBdLCAvKiBpbk91dFNpbmUgKi8KICAgICAgWzEuMDAwLCAwLjAwMCwgMC4wMDAsIDEuMDAwXSwgLyogaW5PdXRFeHBvICovCiAgICAgIFswLjc4NSwgMC4xMzUsIDAuMTUwLCAwLjg2MF0sIC8qIGluT3V0Q2lyYyAqLwogICAgICBbMC42ODAsLTAuNTUwLCAwLjI2NSwgMS41NTBdLCAvKiBpbk91dEJhY2sgKi8KICAgICAgZnVuY3Rpb24gKGEsIHApIHsgcmV0dXJuIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IDwgLjUgPyBlbGFzdGljKGEsIHApKHQgKiAyKSAvIDIgOiAxIC0gZWxhc3RpYyhhLCBwKSh0ICogLTIgKyAyKSAvIDI7IH07IH0gLyogaW5PdXRFbGFzdGljICovCiAgICBdCiAgfTsKCiAgdmFyIGVhc2VzID0gewogICAgbGluZWFyOiBbMC4yNTAsIDAuMjUwLCAwLjc1MCwgMC43NTBdCiAgfTsKCiAgZm9yICh2YXIgY29vcmRzIGluIGN1cnZlcykgewogICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGN1cnZlc1tjb29yZHNdLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGVhc2VzWydlYXNlJytjb29yZHMrbmFtZXNbaV1dID0gY3VydmVzW2Nvb3Jkc11baV07CiAgICB9CiAgfQoKICByZXR1cm4gZWFzZXM7Cgp9KSgpOwoKZnVuY3Rpb24gcGFyc2VFYXNpbmdzKGVhc2luZywgZHVyYXRpb24pIHsKICBpZiAoaXMuZm5jKGVhc2luZykpIHsgcmV0dXJuIGVhc2luZzsgfQogIHZhciBuYW1lID0gZWFzaW5nLnNwbGl0KCcoJylbMF07CiAgdmFyIGVhc2UgPSBwZW5uZXJbbmFtZV07CiAgdmFyIGFyZ3MgPSBwYXJzZUVhc2luZ1BhcmFtZXRlcnMoZWFzaW5nKTsKICBzd2l0Y2ggKG5hbWUpIHsKICAgIGNhc2UgJ3NwcmluZycgOiByZXR1cm4gc3ByaW5nKGVhc2luZywgZHVyYXRpb24pOwogICAgY2FzZSAnY3ViaWNCZXppZXInIDogcmV0dXJuIGFwcGx5QXJndW1lbnRzKGJlemllciwgYXJncyk7CiAgICBjYXNlICdzdGVwcycgOiByZXR1cm4gYXBwbHlBcmd1bWVudHMoc3RlcHMsIGFyZ3MpOwogICAgZGVmYXVsdCA6IHJldHVybiBpcy5mbmMoZWFzZSkgPyBhcHBseUFyZ3VtZW50cyhlYXNlLCBhcmdzKSA6IGFwcGx5QXJndW1lbnRzKGJlemllciwgZWFzZSk7CiAgfQp9CgovLyBTdHJpbmdzCgpmdW5jdGlvbiBzZWxlY3RTdHJpbmcoc3RyKSB7CiAgdHJ5IHsKICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc3RyKTsKICAgIHJldHVybiBub2RlczsKICB9IGNhdGNoKGUpIHsKICAgIHJldHVybjsKICB9Cn0KCi8vIEFycmF5cwoKdmFyIGF1eEFycmF5RmlsdGVyID0gW107CgpmdW5jdGlvbiBmaWx0ZXJBcnJheShhcnIsIGNhbGxiYWNrKSB7CiAgdmFyIHJlc3VsdCA9IGF1eEFycmF5RmlsdGVyOwoKICB2YXIgbGVuID0gYXJyLmxlbmd0aDsKICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDsKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBpZiAoaSBpbiBhcnIpIHsKICAgICAgdmFyIHZhbCA9IGFycltpXTsKICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsLCBpLCBhcnIpKSB7CiAgICAgICAgcmVzdWx0LnB1c2godmFsKTsKICAgICAgfQogICAgfQogIH0KCiAgLy8gYXJyIHR1cm5zIGludG8gdGhlIGF1eEFycmF5IGFuZCB3ZSByZXR1cm4gdGhlIHByZXZpb3VzbHkgYXV4IGFycmF5LgogIGF1eEFycmF5RmlsdGVyID0gYXJyOwogIGF1eEFycmF5RmlsdGVyLmxlbmd0aCA9IDA7CiAgcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gZmxhdHRlbkFycmF5IChhcnIsIHJlc3VsdCkgewogIGlmICghcmVzdWx0KSB7IHJlc3VsdCA9IFtdOyB9CiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFyci5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgdmFyIHZhbHVlID0gYXJyW2ldOwogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICAgIGZsYXR0ZW5BcnJheSh2YWx1ZSwgcmVzdWx0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgIH0KICB9CiAgcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gdG9BcnJheShvKSB7CiAgaWYgKGlzLmFycihvKSkgeyByZXR1cm4gbzsgfQogIGlmIChpcy5zdHIobykpIHsgbyA9IHNlbGVjdFN0cmluZyhvKSB8fCBvOyB9CiAgaWYgKG8gaW5zdGFuY2VvZiBOb2RlTGlzdCB8fCBvIGluc3RhbmNlb2YgSFRNTENvbGxlY3Rpb24pIHsgcmV0dXJuIFtdLnNsaWNlLmNhbGwobyk7IH0KICByZXR1cm4gW29dOwp9CgpmdW5jdGlvbiBhcnJheUNvbnRhaW5zKGFyciwgdmFsKSB7CiAgcmV0dXJuIGFyci5zb21lKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhID09PSB2YWw7IH0pOwp9CgovLyBPYmplY3RzCgpmdW5jdGlvbiBjbG9uZU9iamVjdChvKSB7CiAgdmFyIGNsb25lID0ge307CiAgZm9yICh2YXIgcCBpbiBvKSB7IGNsb25lW3BdID0gb1twXTsgfQogIHJldHVybiBjbG9uZTsKfQoKZnVuY3Rpb24gcmVwbGFjZU9iamVjdFByb3BzKG8xLCBvMikgewogIHZhciBvID0gY2xvbmVPYmplY3QobzEpOwogIGZvciAodmFyIHAgaW4gbzEpIHsgb1twXSA9IG8yLmhhc093blByb3BlcnR5KHApID8gbzJbcF0gOiBvMVtwXTsgfQogIHJldHVybiBvOwp9CgpmdW5jdGlvbiBtZXJnZU9iamVjdHMobzEsIG8yKSB7CiAgdmFyIG8gPSBjbG9uZU9iamVjdChvMSk7CiAgZm9yICh2YXIgcCBpbiBvMikgeyBvW3BdID0gaXMudW5kKG8xW3BdKSA/IG8yW3BdIDogbzFbcF07IH0KICByZXR1cm4gbzsKfQoKLy8gQ29sb3JzCgp2YXIgcmdiUmVnZXggPSAvcmdiXCgoXGQrLFxzKltcZF0rLFxzKltcZF0rKVwpL2c7CgpmdW5jdGlvbiByZ2JUb1JnYmEocmdiVmFsdWUpIHsKICB2YXIgcmdiID0gcmdiUmVnZXguZXhlYyhyZ2JWYWx1ZSk7CiAgcmV0dXJuIHJnYiA/ICgicmdiYSgiICsgKHJnYlsxXSkgKyAiLDEpIikgOiByZ2JWYWx1ZTsKfQoKdmFyIGhleFRvUmdiYUhleFJlZ2V4ID0gL14jPyhbYS1mXGRdKShbYS1mXGRdKShbYS1mXGRdKSQvaTsKdmFyIGhleFRvUmdiYVJnYlJlZ2V4ID0gL14jPyhbYS1mXGRdezJ9KShbYS1mXGRdezJ9KShbYS1mXGRdezJ9KSQvaTsKCmZ1bmN0aW9uIGhleFRvUmdiYShoZXhWYWx1ZSkgewogIHZhciBoZXggPSBoZXhWYWx1ZS5yZXBsYWNlKGhleFRvUmdiYUhleFJlZ2V4LCBmdW5jdGlvbiAobSwgciwgZywgYikgeyByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiOyB9ICk7CiAgdmFyIHJnYiA9IGhleFRvUmdiYVJnYlJlZ2V4LmV4ZWMoaGV4KTsKICB2YXIgciA9IHBhcnNlSW50KHJnYlsxXSwgMTYpOwogIHZhciBnID0gcGFyc2VJbnQocmdiWzJdLCAxNik7CiAgdmFyIGIgPSBwYXJzZUludChyZ2JbM10sIDE2KTsKICByZXR1cm4gKCJyZ2JhKCIgKyByICsgIiwiICsgZyArICIsIiArIGIgKyAiLDEpIik7Cn0KCnZhciBoc2xUb1JnYmFIc2wxUmVnZXggPSAvaHNsXCgoXGQrKSxccyooW1xkLl0rKSUsXHMqKFtcZC5dKyklXCkvZzsKdmFyIGhzbFRvUmdiYUhzbDJSZWdleCA9IC9oc2xhXCgoXGQrKSxccyooW1xkLl0rKSUsXHMqKFtcZC5dKyklLFxzKihbXGQuXSspXCkvZzsKCmZ1bmN0aW9uIGhzbFRvUmdiYShoc2xWYWx1ZSkgewogIHZhciBoc2wgPSBoc2xUb1JnYmFIc2wxUmVnZXguZXhlYyhoc2xWYWx1ZSkgfHwgaHNsVG9SZ2JhSHNsMlJlZ2V4LmV4ZWMoaHNsVmFsdWUpOwogIHZhciBoID0gcGFyc2VJbnQoaHNsWzFdLCAxMCkgLyAzNjA7CiAgdmFyIHMgPSBwYXJzZUludChoc2xbMl0sIDEwKSAvIDEwMDsKICB2YXIgbCA9IHBhcnNlSW50KGhzbFszXSwgMTApIC8gMTAwOwogIHZhciBhID0gaHNsWzRdIHx8IDE7CiAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7CiAgICBpZiAodCA8IDApIHsgdCArPSAxOyB9CiAgICBpZiAodCA+IDEpIHsgdCAtPSAxOyB9CiAgICBpZiAodCA8IDEvNikgeyByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDsgfQogICAgaWYgKHQgPCAxLzIpIHsgcmV0dXJuIHE7IH0KICAgIGlmICh0IDwgMi8zKSB7IHJldHVybiBwICsgKHEgLSBwKSAqICgyLzMgLSB0KSAqIDY7IH0KICAgIHJldHVybiBwOwogIH0KICB2YXIgciwgZywgYjsKICBpZiAocyA9PSAwKSB7CiAgICByID0gZyA9IGIgPSBsOwogIH0gZWxzZSB7CiAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7CiAgICB2YXIgcCA9IDIgKiBsIC0gcTsKICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxLzMpOwogICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7CiAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMS8zKTsKICB9CiAgcmV0dXJuICgicmdiYSgiICsgKHIgKiAyNTUpICsgIiwiICsgKGcgKiAyNTUpICsgIiwiICsgKGIgKiAyNTUpICsgIiwiICsgYSArICIpIik7Cn0KCmZ1bmN0aW9uIGNvbG9yVG9SZ2IodmFsKSB7CiAgaWYgKGlzLnJnYih2YWwpKSB7IHJldHVybiByZ2JUb1JnYmEodmFsKTsgfQogIGlmIChpcy5oZXgodmFsKSkgeyByZXR1cm4gaGV4VG9SZ2JhKHZhbCk7IH0KICBpZiAoaXMuaHNsKHZhbCkpIHsgcmV0dXJuIGhzbFRvUmdiYSh2YWwpOyB9Cn0KCi8vIFVuaXRzCgp2YXIgdW5pdFJlZ2V4ID0gLyhbXCtcLV0/WzAtOSNcLl0rKSglfHB4fHB0fGVtfHJlbXxpbnxjbXxtbXxleHxjaHxwY3x2d3x2aHx2bWlufHZtYXh8ZGVnfHJhZHx0dXJuKT8kLzsKCmZ1bmN0aW9uIGdldFVuaXQodmFsKSB7CiAgdmFyIHNwbGl0ID0gdW5pdFJlZ2V4LmV4ZWModmFsKTsKICBpZiAoc3BsaXQpIHsgcmV0dXJuIHNwbGl0WzJdOyB9Cn0KCmZ1bmN0aW9uIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpIHsKICBpZiAoc3RyaW5nQ29udGFpbnMocHJvcE5hbWUsICd0cmFuc2xhdGUnKSB8fCBwcm9wTmFtZSA9PT0gJ3BlcnNwZWN0aXZlJykgeyByZXR1cm4gJ3B4JzsgfQogIGlmIChzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3JvdGF0ZScpIHx8IHN0cmluZ0NvbnRhaW5zKHByb3BOYW1lLCAnc2tldycpKSB7IHJldHVybiAnZGVnJzsgfQp9CgovLyBWYWx1ZXMKCmZ1bmN0aW9uIGdldEZ1bmN0aW9uVmFsdWUodmFsLCBhbmltYXRhYmxlKSB7CiAgaWYgKCFpcy5mbmModmFsKSkgeyByZXR1cm4gdmFsOyB9CiAgcmV0dXJuIHZhbChhbmltYXRhYmxlLnRhcmdldCwgYW5pbWF0YWJsZS5pZCwgYW5pbWF0YWJsZS50b3RhbCk7Cn0KCmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbCwgcHJvcCkgewogIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7Cn0KCmZ1bmN0aW9uIGNvbnZlcnRQeFRvVW5pdChlbCwgdmFsdWUsIHVuaXQpIHsKICB2YXIgdmFsdWVVbml0ID0gZ2V0VW5pdCh2YWx1ZSk7CiAgaWYgKGFycmF5Q29udGFpbnMoW3VuaXQsICdkZWcnLCAncmFkJywgJ3R1cm4nXSwgdmFsdWVVbml0KSkgeyByZXR1cm4gdmFsdWU7IH0KICB2YXIgY2FjaGVkID0gY2FjaGUuQ1NTW3ZhbHVlICsgdW5pdF07CiAgaWYgKCFpcy51bmQoY2FjaGVkKSkgeyByZXR1cm4gY2FjaGVkOyB9CiAgdmFyIGJhc2VsaW5lID0gMTAwOwogIHZhciB0ZW1wRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsLnRhZ05hbWUpOwogIHZhciBwYXJlbnRFbCA9IChlbC5wYXJlbnROb2RlICYmIChlbC5wYXJlbnROb2RlICE9PSBkb2N1bWVudCkpID8gZWwucGFyZW50Tm9kZSA6IGRvY3VtZW50LmJvZHk7CiAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGVtcEVsKTsKICB0ZW1wRWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOwogIHRlbXBFbC5zdHlsZS53aWR0aCA9IGJhc2VsaW5lICsgdW5pdDsKICB2YXIgZmFjdG9yID0gYmFzZWxpbmUgLyB0ZW1wRWwub2Zmc2V0V2lkdGg7CiAgcGFyZW50RWwucmVtb3ZlQ2hpbGQodGVtcEVsKTsKICB2YXIgY29udmVydGVkVW5pdCA9IGZhY3RvciAqIHBhcnNlRmxvYXQodmFsdWUpOwogIGNhY2hlLkNTU1t2YWx1ZSArIHVuaXRdID0gY29udmVydGVkVW5pdDsKICByZXR1cm4gY29udmVydGVkVW5pdDsKfQoKZnVuY3Rpb24gZ2V0Q1NTVmFsdWUoZWwsIHByb3AsIHVuaXQpIHsKICBpZiAocHJvcCBpbiBlbC5zdHlsZSkgewogICAgdmFyIHVwcGVyY2FzZVByb3BOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpOwogICAgdmFyIHZhbHVlID0gZWwuc3R5bGVbcHJvcF0gfHwgZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSh1cHBlcmNhc2VQcm9wTmFtZSkgfHwgJzAnOwogICAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlOwogIH0KfQoKZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShlbCwgcHJvcCkgewogIGlmIChpcy5kb20oZWwpICYmICFpcy5pbnAoZWwpICYmIChnZXRBdHRyaWJ1dGUoZWwsIHByb3ApIHx8IChpcy5zdmcoZWwpICYmIGVsW3Byb3BdKSkpIHsgcmV0dXJuICdhdHRyaWJ1dGUnOyB9CiAgaWYgKGlzLmRvbShlbCkgJiYgYXJyYXlDb250YWlucyh2YWxpZFRyYW5zZm9ybXMsIHByb3ApKSB7IHJldHVybiAndHJhbnNmb3JtJzsgfQogIGlmIChpcy5kb20oZWwpICYmIChwcm9wICE9PSAndHJhbnNmb3JtJyAmJiBnZXRDU1NWYWx1ZShlbCwgcHJvcCkpKSB7IHJldHVybiAnY3NzJzsgfQogIGlmIChlbFtwcm9wXSAhPSBudWxsKSB7IHJldHVybiAnb2JqZWN0JzsgfQp9Cgp2YXIgdHJhbnNmb3JtUmVnZXggPSAvKFx3KylcKChbXildKilcKS9nOwoKZnVuY3Rpb24gZ2V0RWxlbWVudFRyYW5zZm9ybXMoZWwpIHsKICBpZiAoIWlzLmRvbShlbCkpIHsgcmV0dXJuOyB9CiAgdmFyIHN0ciA9IGVsLnN0eWxlLnRyYW5zZm9ybSB8fCAnJzsKICB2YXIgdHJhbnNmb3JtcyA9IG5ldyBNYXAoKTsKICB2YXIgbTsgd2hpbGUgKG0gPSB0cmFuc2Zvcm1SZWdleC5leGVjKHN0cikpIHsgdHJhbnNmb3Jtcy5zZXQobVsxXSwgbVsyXSk7IH0KICByZXR1cm4gdHJhbnNmb3JtczsKfQoKZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWUoZWwsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KSB7CiAgdmFyIGRlZmF1bHRWYWwgPSBzdHJpbmdDb250YWlucyhwcm9wTmFtZSwgJ3NjYWxlJykgPyAxIDogMCArIGdldFRyYW5zZm9ybVVuaXQocHJvcE5hbWUpOwogIHZhciB2YWx1ZSA9IGdldEVsZW1lbnRUcmFuc2Zvcm1zKGVsKS5nZXQocHJvcE5hbWUpIHx8IGRlZmF1bHRWYWw7CiAgaWYgKGFuaW1hdGFibGUpIHsKICAgIGFuaW1hdGFibGUudHJhbnNmb3Jtcy5saXN0LnNldChwcm9wTmFtZSwgdmFsdWUpOwogICAgYW5pbWF0YWJsZS50cmFuc2Zvcm1zWydsYXN0J10gPSBwcm9wTmFtZTsKICB9CiAgcmV0dXJuIHVuaXQgPyBjb252ZXJ0UHhUb1VuaXQoZWwsIHZhbHVlLCB1bml0KSA6IHZhbHVlOwp9CgpmdW5jdGlvbiBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcE5hbWUsIHVuaXQsIGFuaW1hdGFibGUpIHsKICBzd2l0Y2ggKGdldEFuaW1hdGlvblR5cGUodGFyZ2V0LCBwcm9wTmFtZSkpIHsKICAgIGNhc2UgJ3RyYW5zZm9ybSc6IHJldHVybiBnZXRUcmFuc2Zvcm1WYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCBhbmltYXRhYmxlLCB1bml0KTsKICAgIGNhc2UgJ2Nzcyc6IHJldHVybiBnZXRDU1NWYWx1ZSh0YXJnZXQsIHByb3BOYW1lLCB1bml0KTsKICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHJldHVybiBnZXRBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wTmFtZSk7CiAgICBkZWZhdWx0OiByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXSB8fCAwOwogIH0KfQoKdmFyIG9wZXJhdG9yUmVnZXggPSAvXihcKj18XCs9fC09KS87CgpmdW5jdGlvbiBnZXRSZWxhdGl2ZVZhbHVlKHRvLCBmcm9tKSB7CiAgdmFyIG9wZXJhdG9yID0gb3BlcmF0b3JSZWdleC5leGVjKHRvKTsKICBpZiAoIW9wZXJhdG9yKSB7IHJldHVybiB0bzsgfQogIHZhciB1ID0gZ2V0VW5pdCh0bykgfHwgMDsKICB2YXIgeCA9IHBhcnNlRmxvYXQoZnJvbSk7CiAgdmFyIHkgPSBwYXJzZUZsb2F0KHRvLnJlcGxhY2Uob3BlcmF0b3JbMF0sICcnKSk7CiAgc3dpdGNoIChvcGVyYXRvclswXVswXSkgewogICAgY2FzZSAnKyc6IHJldHVybiB4ICsgeSArIHU7CiAgICBjYXNlICctJzogcmV0dXJuIHggLSB5ICsgdTsKICAgIGNhc2UgJyonOiByZXR1cm4geCAqIHkgKyB1OwogIH0KfQoKdmFyIHdoaXRlc3BhY2VSZWdleCA9IC9ccy9nOwoKZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWwsIHVuaXQpIHsKICBpZiAoaXMuY29sKHZhbCkpIHsgcmV0dXJuIGNvbG9yVG9SZ2IodmFsKTsgfQogIHZhciBvcmlnaW5hbFVuaXQgPSBnZXRVbml0KHZhbCk7CiAgdmFyIHVuaXRMZXNzID0gb3JpZ2luYWxVbml0ID8gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gb3JpZ2luYWxVbml0Lmxlbmd0aCkgOiB2YWw7CiAgcmV0dXJuIHVuaXQgJiYgIXdoaXRlc3BhY2VSZWdleC50ZXN0KHZhbCkgPyB1bml0TGVzcyArIHVuaXQgOiB1bml0TGVzczsKfQoKLy8gZ2V0VG90YWxMZW5ndGgoKSBlcXVpdmFsZW50IGZvciBjaXJjbGUsIHJlY3QsIHBvbHlsaW5lLCBwb2x5Z29uIGFuZCBsaW5lIHNoYXBlcwovLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vU2ViTGFtYmxhLzNlMDU1MGM0OTZjMjM2NzA5NzQ0CgpmdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIpIHsKICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSk7Cn0KCmZ1bmN0aW9uIGdldENpcmNsZUxlbmd0aChlbCkgewogIHJldHVybiBNYXRoLlBJICogMiAqIGdldEF0dHJpYnV0ZShlbCwgJ3InKTsKfQoKZnVuY3Rpb24gZ2V0UmVjdExlbmd0aChlbCkgewogIHJldHVybiAoZ2V0QXR0cmlidXRlKGVsLCAnd2lkdGgnKSAqIDIpICsgKGdldEF0dHJpYnV0ZShlbCwgJ2hlaWdodCcpICogMik7Cn0KCmZ1bmN0aW9uIGdldExpbmVMZW5ndGgoZWwpIHsKICByZXR1cm4gZ2V0RGlzdGFuY2UoCiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDEnKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTEnKX0sCiAgICB7eDogZ2V0QXR0cmlidXRlKGVsLCAneDInKSwgeTogZ2V0QXR0cmlidXRlKGVsLCAneTInKX0KICApOwp9CgpmdW5jdGlvbiBnZXRQb2x5bGluZUxlbmd0aChlbCkgewogIHZhciBwb2ludHMgPSBlbC5wb2ludHM7CiAgdmFyIHRvdGFsTGVuZ3RoID0gMDsKICB2YXIgcHJldmlvdXNQb3M7CiAgZm9yICh2YXIgaSA9IDAgOyBpIDwgcG9pbnRzLm51bWJlck9mSXRlbXM7IGkrKykgewogICAgdmFyIGN1cnJlbnRQb3MgPSBwb2ludHMuZ2V0SXRlbShpKTsKICAgIGlmIChpID4gMCkgeyB0b3RhbExlbmd0aCArPSBnZXREaXN0YW5jZShwcmV2aW91c1BvcywgY3VycmVudFBvcyk7IH0KICAgIHByZXZpb3VzUG9zID0gY3VycmVudFBvczsKICB9CiAgcmV0dXJuIHRvdGFsTGVuZ3RoOwp9CgpmdW5jdGlvbiBnZXRQb2x5Z29uTGVuZ3RoKGVsKSB7CiAgdmFyIHBvaW50cyA9IGVsLnBvaW50czsKICByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpICsgZ2V0RGlzdGFuY2UocG9pbnRzLmdldEl0ZW0ocG9pbnRzLm51bWJlck9mSXRlbXMgLSAxKSwgcG9pbnRzLmdldEl0ZW0oMCkpOwp9CgovLyBQYXRoIGFuaW1hdGlvbgoKZnVuY3Rpb24gZ2V0VG90YWxMZW5ndGgoZWwpIHsKICBpZiAoZWwuZ2V0VG90YWxMZW5ndGgpIHsgcmV0dXJuIGVsLmdldFRvdGFsTGVuZ3RoKCk7IH0KICBzd2l0Y2goZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7CiAgICBjYXNlICdjaXJjbGUnOiByZXR1cm4gZ2V0Q2lyY2xlTGVuZ3RoKGVsKTsKICAgIGNhc2UgJ3JlY3QnOiByZXR1cm4gZ2V0UmVjdExlbmd0aChlbCk7CiAgICBjYXNlICdsaW5lJzogcmV0dXJuIGdldExpbmVMZW5ndGgoZWwpOwogICAgY2FzZSAncG9seWxpbmUnOiByZXR1cm4gZ2V0UG9seWxpbmVMZW5ndGgoZWwpOwogICAgY2FzZSAncG9seWdvbic6IHJldHVybiBnZXRQb2x5Z29uTGVuZ3RoKGVsKTsKICB9Cn0KCmZ1bmN0aW9uIHNldERhc2hvZmZzZXQoZWwpIHsKICB2YXIgcGF0aExlbmd0aCA9IGdldFRvdGFsTGVuZ3RoKGVsKTsKICBlbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwYXRoTGVuZ3RoKTsKICByZXR1cm4gcGF0aExlbmd0aDsKfQoKLy8gTW90aW9uIHBhdGgKCmZ1bmN0aW9uIGdldFBhcmVudFN2Z0VsKGVsKSB7CiAgdmFyIHBhcmVudEVsID0gZWwucGFyZW50Tm9kZTsKICB3aGlsZSAoaXMuc3ZnKHBhcmVudEVsKSkgewogICAgcGFyZW50RWwgPSBwYXJlbnRFbC5wYXJlbnROb2RlOwogICAgaWYgKCFpcy5zdmcocGFyZW50RWwucGFyZW50Tm9kZSkpIHsgYnJlYWs7IH0KICB9CiAgcmV0dXJuIHBhcmVudEVsOwp9CgpmdW5jdGlvbiBnZXRQYXJlbnRTdmcocGF0aEVsLCBzdmdEYXRhKSB7CiAgdmFyIHN2ZyA9IHN2Z0RhdGEgfHwge307CiAgdmFyIHBhcmVudFN2Z0VsID0gc3ZnLmVsIHx8IGdldFBhcmVudFN2Z0VsKHBhdGhFbCk7CiAgdmFyIHJlY3QgPSBwYXJlbnRTdmdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICB2YXIgdmlld0JveEF0dHIgPSBnZXRBdHRyaWJ1dGUocGFyZW50U3ZnRWwsICd2aWV3Qm94Jyk7CiAgdmFyIHdpZHRoID0gcmVjdC53aWR0aDsKICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7CiAgdmFyIHZpZXdCb3ggPSBzdmcudmlld0JveCB8fCAodmlld0JveEF0dHIgPyB2aWV3Qm94QXR0ci5zcGxpdCgnICcpIDogWzAsIDAsIHdpZHRoLCBoZWlnaHRdKTsKICByZXR1cm4gewogICAgZWw6IHBhcmVudFN2Z0VsLAogICAgdmlld0JveDogdmlld0JveCwKICAgIHg6IHZpZXdCb3hbMF0gLyAxLAogICAgeTogdmlld0JveFsxXSAvIDEsCiAgICB3OiB3aWR0aCAvIHZpZXdCb3hbMl0sCiAgICBoOiBoZWlnaHQgLyB2aWV3Qm94WzNdCiAgfQp9CgpmdW5jdGlvbiBnZXRQYXRoKHBhdGgsIHBlcmNlbnQpIHsKICB2YXIgcGF0aEVsID0gaXMuc3RyKHBhdGgpID8gc2VsZWN0U3RyaW5nKHBhdGgpWzBdIDogcGF0aDsKICB2YXIgcCA9IHBlcmNlbnQgfHwgMTAwOwogIHJldHVybiBmdW5jdGlvbihwcm9wZXJ0eSkgewogICAgcmV0dXJuIHsKICAgICAgcHJvcGVydHk6IHByb3BlcnR5LAogICAgICBlbDogcGF0aEVsLAogICAgICBzdmc6IGdldFBhcmVudFN2ZyhwYXRoRWwpLAogICAgICB0b3RhbExlbmd0aDogZ2V0VG90YWxMZW5ndGgocGF0aEVsKSAqIChwIC8gMTAwKQogICAgfQogIH0KfQoKZnVuY3Rpb24gZ2V0UGF0aFByb2dyZXNzKHBhdGgsIHByb2dyZXNzKSB7CiAgZnVuY3Rpb24gcG9pbnQob2Zmc2V0KSB7CiAgICBpZiAoIG9mZnNldCA9PT0gdm9pZCAwICkgb2Zmc2V0ID0gMDsKCiAgICB2YXIgbCA9IHByb2dyZXNzICsgb2Zmc2V0ID49IDEgPyBwcm9ncmVzcyArIG9mZnNldCA6IDA7CiAgICByZXR1cm4gcGF0aC5lbC5nZXRQb2ludEF0TGVuZ3RoKGwpOwogIH0KICB2YXIgc3ZnID0gZ2V0UGFyZW50U3ZnKHBhdGguZWwsIHBhdGguc3ZnKTsKICB2YXIgcCA9IHBvaW50KCk7CiAgdmFyIHAwID0gcG9pbnQoLTEpOwogIHZhciBwMSA9IHBvaW50KCsxKTsKICBzd2l0Y2ggKHBhdGgucHJvcGVydHkpIHsKICAgIGNhc2UgJ3gnOiByZXR1cm4gKHAueCAtIHN2Zy54KSAqIHN2Zy53OwogICAgY2FzZSAneSc6IHJldHVybiAocC55IC0gc3ZnLnkpICogc3ZnLmg7CiAgICBjYXNlICdhbmdsZSc6IHJldHVybiBNYXRoLmF0YW4yKHAxLnkgLSBwMC55LCBwMS54IC0gcDAueCkgKiAxODAgLyBNYXRoLlBJOwogIH0KfQoKLy8gRGVjb21wb3NlIHZhbHVlCgp2YXIgdmFsdWVSZWdleCA9IC8tP1xkKlwuP1xkKy9nOwoKZnVuY3Rpb24gZGVjb21wb3NlVmFsdWUodmFsLCB1bml0KSB7CiAgdmFyIHZhbHVlID0gdmFsaWRhdGVWYWx1ZSgoaXMucHRoKHZhbCkgPyB2YWwudG90YWxMZW5ndGggOiB2YWwpLCB1bml0KSArICcnOwogIHJldHVybiB7CiAgICBvcmlnaW5hbDogdmFsdWUsCiAgICBudW1iZXJzOiB2YWx1ZS5tYXRjaCh2YWx1ZVJlZ2V4KSA/IHZhbHVlLm1hdGNoKHZhbHVlUmVnZXgpLm1hcChOdW1iZXIpIDogWzBdLAogICAgc3RyaW5nczogKGlzLnN0cih2YWwpIHx8IHVuaXQpID8gdmFsdWUuc3BsaXQodmFsdWVSZWdleCkgOiBbXQogIH0KfQoKLy8gQW5pbWF0YWJsZXMKCmZ1bmN0aW9uIHBhcnNlVGFyZ2V0cyh0YXJnZXRzKSB7CiAgdmFyIHRhcmdldHNBcnJheSA9IHRhcmdldHMgPyAoZmxhdHRlbkFycmF5KGlzLmFycih0YXJnZXRzKSA/IHRhcmdldHMubWFwKHRvQXJyYXkpIDogdG9BcnJheSh0YXJnZXRzKSkpIDogW107CiAgcmV0dXJuIGZpbHRlckFycmF5KHRhcmdldHNBcnJheSwgZnVuY3Rpb24gKGl0ZW0sIHBvcywgc2VsZikgeyByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09PSBwb3M7IH0pOwp9CgpmdW5jdGlvbiBnZXRBbmltYXRhYmxlcyh0YXJnZXRzKSB7CiAgdmFyIHBhcnNlZCA9IHBhcnNlVGFyZ2V0cyh0YXJnZXRzKTsKICByZXR1cm4gcGFyc2VkLm1hcChmdW5jdGlvbiAodCwgaSkgewogICAgcmV0dXJuIHt0YXJnZXQ6IHQsIGlkOiBpLCB0b3RhbDogcGFyc2VkLmxlbmd0aCwgdHJhbnNmb3JtczogeyBsaXN0OiBnZXRFbGVtZW50VHJhbnNmb3Jtcyh0KSB9IH07CiAgfSk7Cn0KCi8vIFByb3BlcnRpZXMKCnZhciBzcHJpbmdSZWdleCA9IC9ec3ByaW5nLzsKCmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5VHdlZW5zKHByb3AsIHR3ZWVuU2V0dGluZ3MpIHsKICB2YXIgc2V0dGluZ3MgPSBjbG9uZU9iamVjdCh0d2VlblNldHRpbmdzKTsKICAvLyBPdmVycmlkZSBkdXJhdGlvbiBpZiBlYXNpbmcgaXMgYSBzcHJpbmcKICBpZiAoc3ByaW5nUmVnZXgudGVzdChzZXR0aW5ncy5lYXNpbmcpKSB7IHNldHRpbmdzLmR1cmF0aW9uID0gc3ByaW5nKHNldHRpbmdzLmVhc2luZyk7IH0KICBpZiAoaXMuYXJyKHByb3ApKSB7CiAgICB2YXIgbCA9IHByb3AubGVuZ3RoOwogICAgdmFyIGlzRnJvbVRvID0gKGwgPT09IDIgJiYgIWlzLm9iaihwcm9wWzBdKSk7CiAgICBpZiAoIWlzRnJvbVRvKSB7CiAgICAgIC8vIER1cmF0aW9uIGRpdmlkZWQgYnkgdGhlIG51bWJlciBvZiB0d2VlbnMKICAgICAgaWYgKCFpcy5mbmModHdlZW5TZXR0aW5ncy5kdXJhdGlvbikpIHsgc2V0dGluZ3MuZHVyYXRpb24gPSB0d2VlblNldHRpbmdzLmR1cmF0aW9uIC8gbDsgfQogICAgfSBlbHNlIHsKICAgICAgLy8gVHJhbnNmb3JtIFtmcm9tLCB0b10gdmFsdWVzIHNob3J0aGFuZCB0byBhIHZhbGlkIHR3ZWVuIHZhbHVlCiAgICAgIHByb3AgPSB7dmFsdWU6IHByb3B9OwogICAgfQogIH0KICB2YXIgcHJvcEFycmF5ID0gaXMuYXJyKHByb3ApID8gcHJvcCA6IFtwcm9wXTsKICByZXR1cm4gcHJvcEFycmF5Lm1hcChmdW5jdGlvbiAodiwgaSkgewogICAgdmFyIG9iaiA9IChpcy5vYmoodikgJiYgIWlzLnB0aCh2KSkgPyB2IDoge3ZhbHVlOiB2fTsKICAgIC8vIERlZmF1bHQgZGVsYXkgdmFsdWUgc2hvdWxkIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZmlyc3QgdHdlZW4KICAgIGlmIChpcy51bmQob2JqLmRlbGF5KSkgeyBvYmouZGVsYXkgPSAhaSA/IHR3ZWVuU2V0dGluZ3MuZGVsYXkgOiAwOyB9CiAgICAvLyBEZWZhdWx0IGVuZERlbGF5IHZhbHVlIHNob3VsZCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGxhc3QgdHdlZW4KICAgIGlmIChpcy51bmQob2JqLmVuZERlbGF5KSkgeyBvYmouZW5kRGVsYXkgPSBpID09PSBwcm9wQXJyYXkubGVuZ3RoIC0gMSA/IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXkgOiAwOyB9CiAgICByZXR1cm4gb2JqOwogIH0pLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gbWVyZ2VPYmplY3RzKGssIHNldHRpbmdzKTsgfSk7Cn0KCgpmdW5jdGlvbiBmbGF0dGVuS2V5ZnJhbWVzKGtleWZyYW1lcykgewogIHZhciBwcm9wZXJ0eU5hbWVzID0gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGtleWZyYW1lcy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gT2JqZWN0LmtleXMoa2V5KTsgfSkpLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gaXMua2V5KHApOyB9KQogIC5yZWR1Y2UoZnVuY3Rpb24gKGEsYikgeyBpZiAoYS5pbmRleE9mKGIpIDwgMCkgeyBhLnB1c2goYik7IH0gcmV0dXJuIGE7IH0sIFtdKTsKICB2YXIgcHJvcGVydGllcyA9IHt9OwogIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkgewogICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlOYW1lc1tpXTsKICAgIHByb3BlcnRpZXNbcHJvcE5hbWVdID0ga2V5ZnJhbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHZhciBuZXdLZXkgPSB7fTsKICAgICAgZm9yICh2YXIgcCBpbiBrZXkpIHsKICAgICAgICBpZiAoaXMua2V5KHApKSB7CiAgICAgICAgICBpZiAocCA9PSBwcm9wTmFtZSkgeyBuZXdLZXkudmFsdWUgPSBrZXlbcF07IH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbmV3S2V5W3BdID0ga2V5W3BdOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbmV3S2V5OwogICAgfSk7CiAgfTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7CiAgcmV0dXJuIHByb3BlcnRpZXM7Cn0KCmZ1bmN0aW9uIGdldFByb3BlcnRpZXModHdlZW5TZXR0aW5ncywgcGFyYW1zKSB7CiAgdmFyIHByb3BlcnRpZXMgPSBbXTsKICB2YXIga2V5ZnJhbWVzID0gcGFyYW1zLmtleWZyYW1lczsKICBpZiAoa2V5ZnJhbWVzKSB7IHBhcmFtcyA9IG1lcmdlT2JqZWN0cyhmbGF0dGVuS2V5ZnJhbWVzKGtleWZyYW1lcyksIHBhcmFtcyk7IH0KICBmb3IgKHZhciBwIGluIHBhcmFtcykgewogICAgaWYgKGlzLmtleShwKSkgewogICAgICBwcm9wZXJ0aWVzLnB1c2goewogICAgICAgIG5hbWU6IHAsCiAgICAgICAgdHdlZW5zOiBub3JtYWxpemVQcm9wZXJ0eVR3ZWVucyhwYXJhbXNbcF0sIHR3ZWVuU2V0dGluZ3MpCiAgICAgIH0pOwogICAgfQogIH0KICByZXR1cm4gcHJvcGVydGllczsKfQoKLy8gVHdlZW5zCgpmdW5jdGlvbiBub3JtYWxpemVUd2VlblZhbHVlcyh0d2VlbiwgYW5pbWF0YWJsZSkgewogIHZhciB0ID0ge307CiAgZm9yICh2YXIgcCBpbiB0d2VlbikgewogICAgdmFyIHZhbHVlID0gZ2V0RnVuY3Rpb25WYWx1ZSh0d2VlbltwXSwgYW5pbWF0YWJsZSk7CiAgICBpZiAoaXMuYXJyKHZhbHVlKSkgewogICAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gZ2V0RnVuY3Rpb25WYWx1ZSh2LCBhbmltYXRhYmxlKTsgfSk7CiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDEpIHsgdmFsdWUgPSB2YWx1ZVswXTsgfQogICAgfQogICAgdFtwXSA9IHZhbHVlOwogIH0KICB0LmR1cmF0aW9uID0gcGFyc2VGbG9hdCh0LmR1cmF0aW9uKTsKICB0LmRlbGF5ID0gcGFyc2VGbG9hdCh0LmRlbGF5KTsKICByZXR1cm4gdDsKfQoKZnVuY3Rpb24gbm9ybWFsaXplVHdlZW5zKHByb3AsIGFuaW1hdGFibGUpIHsKICB2YXIgcHJldmlvdXNUd2VlbjsKICByZXR1cm4gcHJvcC50d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7CiAgICB2YXIgdHdlZW4gPSBub3JtYWxpemVUd2VlblZhbHVlcyh0LCBhbmltYXRhYmxlKTsKICAgIHZhciB0d2VlblZhbHVlID0gdHdlZW4udmFsdWU7CiAgICB2YXIgdG8gPSBpcy5hcnIodHdlZW5WYWx1ZSkgPyB0d2VlblZhbHVlWzFdIDogdHdlZW5WYWx1ZTsKICAgIHZhciB0b1VuaXQgPSBnZXRVbml0KHRvKTsKICAgIHZhciBvcmlnaW5hbFZhbHVlID0gZ2V0T3JpZ2luYWxUYXJnZXRWYWx1ZShhbmltYXRhYmxlLnRhcmdldCwgcHJvcC5uYW1lLCB0b1VuaXQsIGFuaW1hdGFibGUpOwogICAgdmFyIHByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi50by5vcmlnaW5hbCA6IG9yaWdpbmFsVmFsdWU7CiAgICB2YXIgZnJvbSA9IGlzLmFycih0d2VlblZhbHVlKSA/IHR3ZWVuVmFsdWVbMF0gOiBwcmV2aW91c1ZhbHVlOwogICAgdmFyIGZyb21Vbml0ID0gZ2V0VW5pdChmcm9tKSB8fCBnZXRVbml0KG9yaWdpbmFsVmFsdWUpOwogICAgdmFyIHVuaXQgPSB0b1VuaXQgfHwgZnJvbVVuaXQ7CiAgICBpZiAoaXMudW5kKHRvKSkgeyB0byA9IHByZXZpb3VzVmFsdWU7IH0KICAgIHR3ZWVuLmZyb20gPSBkZWNvbXBvc2VWYWx1ZShmcm9tLCB1bml0KTsKICAgIHR3ZWVuLnRvID0gZGVjb21wb3NlVmFsdWUoZ2V0UmVsYXRpdmVWYWx1ZSh0bywgZnJvbSksIHVuaXQpOwogICAgdHdlZW4uc3RhcnQgPSBwcmV2aW91c1R3ZWVuID8gcHJldmlvdXNUd2Vlbi5lbmQgOiAwOwogICAgdHdlZW4uZW5kID0gdHdlZW4uc3RhcnQgKyB0d2Vlbi5kZWxheSArIHR3ZWVuLmR1cmF0aW9uICsgdHdlZW4uZW5kRGVsYXk7CiAgICB0d2Vlbi5lYXNpbmcgPSBwYXJzZUVhc2luZ3ModHdlZW4uZWFzaW5nLCB0d2Vlbi5kdXJhdGlvbik7CiAgICB0d2Vlbi5pc1BhdGggPSBpcy5wdGgodHdlZW5WYWx1ZSk7CiAgICB0d2Vlbi5pc0NvbG9yID0gaXMuY29sKHR3ZWVuLmZyb20ub3JpZ2luYWwpOwogICAgaWYgKHR3ZWVuLmlzQ29sb3IpIHsgdHdlZW4ucm91bmQgPSAxOyB9CiAgICBwcmV2aW91c1R3ZWVuID0gdHdlZW47CiAgICByZXR1cm4gdHdlZW47CiAgfSk7Cn0KCi8vIFR3ZWVuIHByb2dyZXNzCgp2YXIgc2V0UHJvZ3Jlc3NWYWx1ZSA9IHsKICBjc3M6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnN0eWxlW3BdID0gdjsgfSwKICBhdHRyaWJ1dGU6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0LnNldEF0dHJpYnV0ZShwLCB2KTsgfSwKICBvYmplY3Q6IGZ1bmN0aW9uICh0LCBwLCB2KSB7IHJldHVybiB0W3BdID0gdjsgfSwKICB0cmFuc2Zvcm06IGZ1bmN0aW9uICh0LCBwLCB2LCB0cmFuc2Zvcm1zLCBtYW51YWwpIHsKICAgIHRyYW5zZm9ybXMubGlzdC5zZXQocCwgdik7CiAgICBpZiAocCA9PT0gdHJhbnNmb3Jtcy5sYXN0IHx8IG1hbnVhbCkgewogICAgICB2YXIgc3RyID0gJyc7CiAgICAgIHRyYW5zZm9ybXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkgeyBzdHIgKz0gcHJvcCArICIoIiArIHZhbHVlICsgIikgIjsgfSk7CiAgICAgIHQuc3R5bGUudHJhbnNmb3JtID0gc3RyOwogICAgfQogIH0KfTsKCi8vIFNldCBWYWx1ZSBoZWxwZXIKCmZ1bmN0aW9uIHNldFRhcmdldHNWYWx1ZSh0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7CiAgdmFyIGFuaW1hdGFibGVzID0gZ2V0QW5pbWF0YWJsZXModGFyZ2V0cyk7CgogIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbmltYXRhYmxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgdmFyIGFuaW1hdGFibGUgPSBhbmltYXRhYmxlc1tpXTsKCiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKSB7CiAgICAgIHZhciB2YWx1ZSA9IGdldEZ1bmN0aW9uVmFsdWUocHJvcGVydGllc1twcm9wZXJ0eV0sIGFuaW1hdGFibGUpOwogICAgICB2YXIgdGFyZ2V0ID0gYW5pbWF0YWJsZS50YXJnZXQ7CiAgICAgIHZhciB2YWx1ZVVuaXQgPSBnZXRVbml0KHZhbHVlKTsKICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBnZXRPcmlnaW5hbFRhcmdldFZhbHVlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlVW5pdCwgYW5pbWF0YWJsZSk7CiAgICAgIHZhciB1bml0ID0gdmFsdWVVbml0IHx8IGdldFVuaXQob3JpZ2luYWxWYWx1ZSk7CiAgICAgIHZhciB0byA9IGdldFJlbGF0aXZlVmFsdWUodmFsaWRhdGVWYWx1ZSh2YWx1ZSwgdW5pdCksIG9yaWdpbmFsVmFsdWUpOwogICAgICB2YXIgYW5pbVR5cGUgPSBnZXRBbmltYXRpb25UeXBlKHRhcmdldCwgcHJvcGVydHkpOwogICAgICBzZXRQcm9ncmVzc1ZhbHVlW2FuaW1UeXBlXSh0YXJnZXQsIHByb3BlcnR5LCB0bywgYW5pbWF0YWJsZS50cmFuc2Zvcm1zLCB0cnVlKTsKICAgIH0KICB9Cn0KCi8vIEFuaW1hdGlvbnMKCmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbihhbmltYXRhYmxlLCBwcm9wKSB7CiAgdmFyIGFuaW1UeXBlID0gZ2V0QW5pbWF0aW9uVHlwZShhbmltYXRhYmxlLnRhcmdldCwgcHJvcC5uYW1lKTsKICBpZiAoYW5pbVR5cGUpIHsKICAgIHZhciB0d2VlbnMgPSBub3JtYWxpemVUd2VlbnMocHJvcCwgYW5pbWF0YWJsZSk7CiAgICB2YXIgbGFzdFR3ZWVuID0gdHdlZW5zW3R3ZWVucy5sZW5ndGggLSAxXTsKICAgIHJldHVybiB7CiAgICAgIHR5cGU6IGFuaW1UeXBlLAogICAgICBwcm9wZXJ0eTogcHJvcC5uYW1lLAogICAgICBhbmltYXRhYmxlOiBhbmltYXRhYmxlLAogICAgICB0d2VlbnM6IHR3ZWVucywKICAgICAgZHVyYXRpb246IGxhc3RUd2Vlbi5lbmQsCiAgICAgIGRlbGF5OiB0d2VlbnNbMF0uZGVsYXksCiAgICAgIGVuZERlbGF5OiBsYXN0VHdlZW4uZW5kRGVsYXkKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpIHsKICByZXR1cm4gZmlsdGVyQXJyYXkoZmxhdHRlbkFycmF5KGFuaW1hdGFibGVzLm1hcChmdW5jdGlvbiAoYW5pbWF0YWJsZSkgewogICAgcmV0dXJuIHByb3BlcnRpZXMubWFwKGZ1bmN0aW9uIChwcm9wKSB7CiAgICAgIHJldHVybiBjcmVhdGVBbmltYXRpb24oYW5pbWF0YWJsZSwgcHJvcCk7CiAgICB9KTsKICB9KSksIGZ1bmN0aW9uIChhKSB7IHJldHVybiAhaXMudW5kKGEpOyB9KTsKfQoKLy8gQ3JlYXRlIEluc3RhbmNlCgpmdW5jdGlvbiBnZXRJbnN0YW5jZVRpbWluZ3MoYW5pbWF0aW9ucywgdHdlZW5TZXR0aW5ncykgewogIHZhciBhbmltTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7CiAgdmFyIGdldFRsT2Zmc2V0ID0gZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGFuaW0udGltZWxpbmVPZmZzZXQgPyBhbmltLnRpbWVsaW5lT2Zmc2V0IDogMDsgfTsKICB2YXIgdGltaW5ncyA9IHt9OwogIHRpbWluZ3MuZHVyYXRpb24gPSBhbmltTGVuZ3RoID8gTWF0aC5tYXguYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kdXJhdGlvbjsgfSkpIDogdHdlZW5TZXR0aW5ncy5kdXJhdGlvbjsKICB0aW1pbmdzLmRlbGF5ID0gYW5pbUxlbmd0aCA/IE1hdGgubWluLmFwcGx5KE1hdGgsIGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChhbmltKSB7IHJldHVybiBnZXRUbE9mZnNldChhbmltKSArIGFuaW0uZGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZGVsYXk7CiAgdGltaW5ncy5lbmREZWxheSA9IGFuaW1MZW5ndGggPyB0aW1pbmdzLmR1cmF0aW9uIC0gTWF0aC5tYXguYXBwbHkoTWF0aCwgYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGFuaW0pIHsgcmV0dXJuIGdldFRsT2Zmc2V0KGFuaW0pICsgYW5pbS5kdXJhdGlvbiAtIGFuaW0uZW5kRGVsYXk7IH0pKSA6IHR3ZWVuU2V0dGluZ3MuZW5kRGVsYXk7CiAgcmV0dXJuIHRpbWluZ3M7Cn0KCnZhciBpbnN0YW5jZUlEID0gMDsKCmZ1bmN0aW9uIGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcykgewogIHZhciBpbnN0YW5jZVNldHRpbmdzID0gcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRJbnN0YW5jZVNldHRpbmdzLCBwYXJhbXMpOwogIHZhciB0d2VlblNldHRpbmdzID0gcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpOwogIHZhciBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyh0d2VlblNldHRpbmdzLCBwYXJhbXMpOwogIHZhciBhbmltYXRhYmxlcyA9IGdldEFuaW1hdGFibGVzKHBhcmFtcy50YXJnZXRzKTsKICB2YXIgYW5pbWF0aW9ucyA9IGdldEFuaW1hdGlvbnMoYW5pbWF0YWJsZXMsIHByb3BlcnRpZXMpOwogIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGFuaW1hdGlvbnMsIHR3ZWVuU2V0dGluZ3MpOwogIHZhciBpZCA9IGluc3RhbmNlSUQ7CiAgaW5zdGFuY2VJRCsrOwogIHJldHVybiBtZXJnZU9iamVjdHMoaW5zdGFuY2VTZXR0aW5ncywgewogICAgaWQ6IGlkLAogICAgY2hpbGRyZW46IFtdLAogICAgYW5pbWF0YWJsZXM6IGFuaW1hdGFibGVzLAogICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucywKICAgIGR1cmF0aW9uOiB0aW1pbmdzLmR1cmF0aW9uLAogICAgZGVsYXk6IHRpbWluZ3MuZGVsYXksCiAgICBlbmREZWxheTogdGltaW5ncy5lbmREZWxheQogIH0pOwp9CgovLyBDb3JlCgp2YXIgYWN0aXZlSW5zdGFuY2VzID0gW107CnZhciBwYXVzZWRJbnN0YW5jZXMgPSBbXTsKdmFyIHJhZjsKCnZhciBlbmdpbmUgPSAoZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIHBsYXkoKSB7CiAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7CiAgfQogIGZ1bmN0aW9uIHN0ZXAodCkgewogICAgdmFyIGFjdGl2ZUluc3RhbmNlc0xlbmd0aCA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7CiAgICBpZiAoYWN0aXZlSW5zdGFuY2VzTGVuZ3RoKSB7CiAgICAgIHZhciBpID0gMDsKICAgICAgd2hpbGUgKGkgPCBhY3RpdmVJbnN0YW5jZXNMZW5ndGgpIHsKICAgICAgICB2YXIgYWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZXNbaV07CiAgICAgICAgaWYgKCFhY3RpdmVJbnN0YW5jZS5wYXVzZWQpIHsKICAgICAgICAgIGFjdGl2ZUluc3RhbmNlLnRpY2sodCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBpbnN0YW5jZUluZGV4ID0gYWN0aXZlSW5zdGFuY2VzLmluZGV4T2YoYWN0aXZlSW5zdGFuY2UpOwogICAgICAgICAgaWYgKGluc3RhbmNlSW5kZXggPiAtMSkgewogICAgICAgICAgICBhY3RpdmVJbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlSW5kZXgsIDEpOwogICAgICAgICAgICBhY3RpdmVJbnN0YW5jZXNMZW5ndGggPSBhY3RpdmVJbnN0YW5jZXMubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpKys7CiAgICAgIH0KICAgICAgcGxheSgpOwogICAgfSBlbHNlIHsKICAgICAgcmFmID0gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTsKICAgIH0KICB9CiAgcmV0dXJuIHBsYXk7Cn0pKCk7CgpmdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkgewogIGlmIChkb2N1bWVudC5oaWRkZW4pIHsKICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhY3RpdmVJbnN0YW5jZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgYWN0aXZlSW5zdGFuY2VbaV0ucGF1c2UoKTsKICAgIH0KICAgIHBhdXNlZEluc3RhbmNlcyA9IGFjdGl2ZUluc3RhbmNlcy5zbGljZSgwKTsKICAgIGFjdGl2ZUluc3RhbmNlcyA9IFtdOwogIH0gZWxzZSB7CiAgICBmb3IgKHZhciBpJDEgPSAwLCBsZW4kMSA9IHBhdXNlZEluc3RhbmNlcy5sZW5ndGg7IGkkMSA8IGxlbiQxOyBpJDErKykgewogICAgICBwYXVzZWRJbnN0YW5jZXNbaSQxXS5wbGF5KCk7CiAgICB9CiAgfQp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7CgovLyBQdWJsaWMgSW5zdGFuY2UKCmZ1bmN0aW9uIGFuaW1lKHBhcmFtcykgewogIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTsKCgogIHZhciBzdGFydFRpbWUgPSAwLCBsYXN0VGltZSA9IDAsIG5vdyA9IDA7CiAgdmFyIGNoaWxkcmVuLCBjaGlsZHJlbkxlbmd0aCA9IDA7CiAgdmFyIHJlc29sdmUgPSBudWxsOwoKICBmdW5jdGlvbiBtYWtlUHJvbWlzZSgpIHsKICAgIHJldHVybiB3aW5kb3cuUHJvbWlzZSAmJiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoX3Jlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUgPSBfcmVzb2x2ZTsgfSk7CiAgfQoKICB2YXIgcHJvbWlzZSA9IG1ha2VQcm9taXNlKCk7CgogIHZhciBpbnN0YW5jZSA9IGNyZWF0ZU5ld0luc3RhbmNlKHBhcmFtcyk7CgogIGZ1bmN0aW9uIHRvZ2dsZUluc3RhbmNlRGlyZWN0aW9uKCkgewogICAgaW5zdGFuY2UucmV2ZXJzZWQgPSAhaW5zdGFuY2UucmV2ZXJzZWQ7CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgY2hpbGRyZW5baV0ucmV2ZXJzZWQgPSBpbnN0YW5jZS5yZXZlcnNlZDsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGFkanVzdFRpbWUodGltZSkgewogICAgcmV0dXJuIGluc3RhbmNlLnJldmVyc2VkID8gaW5zdGFuY2UuZHVyYXRpb24gLSB0aW1lIDogdGltZTsKICB9CgogIGZ1bmN0aW9uIHJlc2V0VGltZSgpIHsKICAgIHN0YXJ0VGltZSA9IDA7CiAgICBsYXN0VGltZSA9IGFkanVzdFRpbWUoaW5zdGFuY2UuY3VycmVudFRpbWUpICogKDEgLyBhbmltZS5zcGVlZCk7CiAgfQoKICBmdW5jdGlvbiBzZWVrQ2lsZCh0aW1lLCBjaGlsZCkgewogICAgaWYgKGNoaWxkKSB7IGNoaWxkLnNlZWsodGltZSAtIGNoaWxkLnRpbWVsaW5lT2Zmc2V0KTsgfQogIH0KCiAgZnVuY3Rpb24gc3luY0luc3RhbmNlQ2hpbGRyZW4odGltZSkgewogICAgaWYgKCFpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2spIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7IHNlZWtDaWxkKHRpbWUsIGNoaWxkcmVuW2ldKTsgfQogICAgfSBlbHNlIHsKICAgICAgZm9yICh2YXIgaSQxID0gY2hpbGRyZW5MZW5ndGg7IGkkMS0tOykgeyBzZWVrQ2lsZCh0aW1lLCBjaGlsZHJlbltpJDFdKTsgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpIHsKICAgIHZhciBpID0gMDsKICAgIHZhciBhbmltYXRpb25zID0gaW5zdGFuY2UuYW5pbWF0aW9uczsKICAgIHZhciBhbmltYXRpb25zTGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7CiAgICB3aGlsZSAoaSA8IGFuaW1hdGlvbnNMZW5ndGgpIHsKICAgICAgdmFyIGFuaW0gPSBhbmltYXRpb25zW2ldOwogICAgICB2YXIgYW5pbWF0YWJsZSA9IGFuaW0uYW5pbWF0YWJsZTsKICAgICAgdmFyIHR3ZWVucyA9IGFuaW0udHdlZW5zOwogICAgICB2YXIgdHdlZW5MZW5ndGggPSB0d2VlbnMubGVuZ3RoIC0gMTsKICAgICAgdmFyIHR3ZWVuID0gdHdlZW5zW3R3ZWVuTGVuZ3RoXTsKICAgICAgLy8gT25seSBjaGVjayBmb3Iga2V5ZnJhbWVzIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgdHdlZW4KICAgICAgaWYgKHR3ZWVuTGVuZ3RoKSB7IHR3ZWVuID0gZmlsdGVyQXJyYXkodHdlZW5zLCBmdW5jdGlvbiAodCkgeyByZXR1cm4gKGluc1RpbWUgPCB0LmVuZCk7IH0pWzBdIHx8IHR3ZWVuOyB9CiAgICAgIHZhciBlbGFwc2VkID0gbWluTWF4KGluc1RpbWUgLSB0d2Vlbi5zdGFydCAtIHR3ZWVuLmRlbGF5LCAwLCB0d2Vlbi5kdXJhdGlvbikgLyB0d2Vlbi5kdXJhdGlvbjsKICAgICAgdmFyIGVhc2VkID0gaXNOYU4oZWxhcHNlZCkgPyAxIDogdHdlZW4uZWFzaW5nKGVsYXBzZWQpOwogICAgICB2YXIgc3RyaW5ncyA9IHR3ZWVuLnRvLnN0cmluZ3M7CiAgICAgIHZhciByb3VuZCA9IHR3ZWVuLnJvdW5kOwogICAgICB2YXIgbnVtYmVycyA9IFtdOwogICAgICB2YXIgdG9OdW1iZXJzTGVuZ3RoID0gdHdlZW4udG8ubnVtYmVycy5sZW5ndGg7CiAgICAgIHZhciBwcm9ncmVzcyA9ICh2b2lkIDApOwogICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRvTnVtYmVyc0xlbmd0aDsgbisrKSB7CiAgICAgICAgdmFyIHZhbHVlID0gKHZvaWQgMCk7CiAgICAgICAgdmFyIHRvTnVtYmVyID0gdHdlZW4udG8ubnVtYmVyc1tuXTsKICAgICAgICB2YXIgZnJvbU51bWJlciA9IHR3ZWVuLmZyb20ubnVtYmVyc1tuXSB8fCAwOwogICAgICAgIGlmICghdHdlZW4uaXNQYXRoKSB7CiAgICAgICAgICB2YWx1ZSA9IGZyb21OdW1iZXIgKyAoZWFzZWQgKiAodG9OdW1iZXIgLSBmcm9tTnVtYmVyKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbHVlID0gZ2V0UGF0aFByb2dyZXNzKHR3ZWVuLnZhbHVlLCBlYXNlZCAqIHRvTnVtYmVyKTsKICAgICAgICB9CiAgICAgICAgaWYgKHJvdW5kKSB7CiAgICAgICAgICBpZiAoISh0d2Vlbi5pc0NvbG9yICYmIG4gPiAyKSkgewogICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiByb3VuZCkgLyByb3VuZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgICAvLyBNYW51YWwgQXJyYXkucmVkdWNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VzCiAgICAgIHZhciBzdHJpbmdzTGVuZ3RoID0gc3RyaW5ncy5sZW5ndGg7CiAgICAgIGlmICghc3RyaW5nc0xlbmd0aCkgewogICAgICAgIHByb2dyZXNzID0gbnVtYmVyc1swXTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwcm9ncmVzcyA9IHN0cmluZ3NbMF07CiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdHJpbmdzTGVuZ3RoOyBzKyspIHsKICAgICAgICAgIHZhciBhID0gc3RyaW5nc1tzXTsKICAgICAgICAgIHZhciBiID0gc3RyaW5nc1tzICsgMV07CiAgICAgICAgICB2YXIgbiQxID0gbnVtYmVyc1tzXTsKICAgICAgICAgIGlmICghaXNOYU4obiQxKSkgewogICAgICAgICAgICBpZiAoIWIpIHsKICAgICAgICAgICAgICBwcm9ncmVzcyArPSBuJDEgKyAnICc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gbiQxICsgYjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBzZXRQcm9ncmVzc1ZhbHVlW2FuaW0udHlwZV0oYW5pbWF0YWJsZS50YXJnZXQsIGFuaW0ucHJvcGVydHksIHByb2dyZXNzLCBhbmltYXRhYmxlLnRyYW5zZm9ybXMpOwogICAgICBhbmltLmN1cnJlbnRWYWx1ZSA9IHByb2dyZXNzOwogICAgICBpKys7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBzZXRDYWxsYmFjayhjYikgewogICAgaWYgKGluc3RhbmNlW2NiXSAmJiAhaW5zdGFuY2UucGFzc1Rocm91Z2gpIHsgaW5zdGFuY2VbY2JdKGluc3RhbmNlKTsgfQogIH0KCiAgZnVuY3Rpb24gY291bnRJdGVyYXRpb24oKSB7CiAgICBpZiAoaW5zdGFuY2UucmVtYWluaW5nICYmIGluc3RhbmNlLnJlbWFpbmluZyAhPT0gdHJ1ZSkgewogICAgICBpbnN0YW5jZS5yZW1haW5pbmctLTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHNldEluc3RhbmNlUHJvZ3Jlc3MoZW5naW5lVGltZSkgewogICAgdmFyIGluc0R1cmF0aW9uID0gaW5zdGFuY2UuZHVyYXRpb247CiAgICB2YXIgaW5zRGVsYXkgPSBpbnN0YW5jZS5kZWxheTsKICAgIHZhciBpbnNFbmREZWxheSA9IGluc0R1cmF0aW9uIC0gaW5zdGFuY2UuZW5kRGVsYXk7CiAgICB2YXIgaW5zVGltZSA9IGFkanVzdFRpbWUoZW5naW5lVGltZSk7CiAgICBpbnN0YW5jZS5wcm9ncmVzcyA9IG1pbk1heCgoaW5zVGltZSAvIGluc0R1cmF0aW9uKSAqIDEwMCwgMCwgMTAwKTsKICAgIGluc3RhbmNlLnJldmVyc2VQbGF5YmFjayA9IGluc1RpbWUgPCBpbnN0YW5jZS5jdXJyZW50VGltZTsKICAgIGlmIChjaGlsZHJlbikgeyBzeW5jSW5zdGFuY2VDaGlsZHJlbihpbnNUaW1lKTsgfQogICAgaWYgKCFpbnN0YW5jZS5iZWdhbiAmJiBpbnN0YW5jZS5jdXJyZW50VGltZSA+IDApIHsKICAgICAgaW5zdGFuY2UuYmVnYW4gPSB0cnVlOwogICAgICBzZXRDYWxsYmFjaygnYmVnaW4nKTsKICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BCZWdpbicpOwogICAgfQogICAgaWYgKGluc1RpbWUgPD0gaW5zRGVsYXkgJiYgaW5zdGFuY2UuY3VycmVudFRpbWUgIT09IDApIHsKICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKDApOwogICAgfQogICAgaWYgKChpbnNUaW1lID49IGluc0VuZERlbGF5ICYmIGluc3RhbmNlLmN1cnJlbnRUaW1lICE9PSBpbnNEdXJhdGlvbikgfHwgIWluc0R1cmF0aW9uKSB7CiAgICAgIHNldEFuaW1hdGlvbnNQcm9ncmVzcyhpbnNEdXJhdGlvbik7CiAgICB9CiAgICBpZiAoaW5zVGltZSA+IGluc0RlbGF5ICYmIGluc1RpbWUgPCBpbnNFbmREZWxheSkgewogICAgICBpZiAoIWluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7CiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSB0cnVlOwogICAgICAgIGluc3RhbmNlLmNoYW5nZUNvbXBsZXRlZCA9IGZhbHNlOwogICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VCZWdpbicpOwogICAgICB9CiAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2UnKTsKICAgICAgc2V0QW5pbWF0aW9uc1Byb2dyZXNzKGluc1RpbWUpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGluc3RhbmNlLmNoYW5nZUJlZ2FuKSB7CiAgICAgICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gdHJ1ZTsKICAgICAgICBpbnN0YW5jZS5jaGFuZ2VCZWdhbiA9IGZhbHNlOwogICAgICAgIHNldENhbGxiYWNrKCdjaGFuZ2VDb21wbGV0ZScpOwogICAgICB9CiAgICB9CiAgICBpbnN0YW5jZS5jdXJyZW50VGltZSA9IG1pbk1heChpbnNUaW1lLCAwLCBpbnNEdXJhdGlvbik7CiAgICBpZiAoaW5zdGFuY2UuYmVnYW4pIHsgc2V0Q2FsbGJhY2soJ3VwZGF0ZScpOyB9CiAgICBpZiAoZW5naW5lVGltZSA+PSBpbnNEdXJhdGlvbikgewogICAgICBsYXN0VGltZSA9IDA7CiAgICAgIGNvdW50SXRlcmF0aW9uKCk7CiAgICAgIGlmIChpbnN0YW5jZS5yZW1haW5pbmcpIHsKICAgICAgICBzdGFydFRpbWUgPSBub3c7CiAgICAgICAgc2V0Q2FsbGJhY2soJ2xvb3BDb21wbGV0ZScpOwogICAgICAgIHNldENhbGxiYWNrKCdsb29wQmVnaW4nKTsKICAgICAgICBpZiAoaW5zdGFuY2UuZGlyZWN0aW9uID09PSAnYWx0ZXJuYXRlJykgeyB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpOyB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW5zdGFuY2UucGF1c2VkID0gdHJ1ZTsKICAgICAgICBpZiAoIWluc3RhbmNlLmNvbXBsZXRlZCkgewogICAgICAgICAgaW5zdGFuY2UuY29tcGxldGVkID0gdHJ1ZTsKICAgICAgICAgIHNldENhbGxiYWNrKCdsb29wQ29tcGxldGUnKTsKICAgICAgICAgIHNldENhbGxiYWNrKCdjb21wbGV0ZScpOwogICAgICAgICAgaWYgKCdQcm9taXNlJyBpbiB3aW5kb3cpIHsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgICBwcm9taXNlID0gbWFrZVByb21pc2UoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgZGlyZWN0aW9uID0gaW5zdGFuY2UuZGlyZWN0aW9uOwogICAgaW5zdGFuY2UucGFzc1Rocm91Z2ggPSBmYWxzZTsKICAgIGluc3RhbmNlLmN1cnJlbnRUaW1lID0gMDsKICAgIGluc3RhbmNlLnByb2dyZXNzID0gMDsKICAgIGluc3RhbmNlLnBhdXNlZCA9IHRydWU7CiAgICBpbnN0YW5jZS5iZWdhbiA9IGZhbHNlOwogICAgaW5zdGFuY2UuY2hhbmdlQmVnYW4gPSBmYWxzZTsKICAgIGluc3RhbmNlLmNvbXBsZXRlZCA9IGZhbHNlOwogICAgaW5zdGFuY2UuY2hhbmdlQ29tcGxldGVkID0gZmFsc2U7CiAgICBpbnN0YW5jZS5yZXZlcnNlUGxheWJhY2sgPSBmYWxzZTsKICAgIGluc3RhbmNlLnJldmVyc2VkID0gZGlyZWN0aW9uID09PSAncmV2ZXJzZSc7CiAgICBpbnN0YW5jZS5yZW1haW5pbmcgPSBpbnN0YW5jZS5sb29wOwogICAgY2hpbGRyZW4gPSBpbnN0YW5jZS5jaGlsZHJlbjsKICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoOwogICAgZm9yICh2YXIgaSA9IGNoaWxkcmVuTGVuZ3RoOyBpLS07KSB7IGluc3RhbmNlLmNoaWxkcmVuW2ldLnJlc2V0KCk7IH0KICAgIGlmIChpbnN0YW5jZS5yZXZlcnNlZCAmJiBpbnN0YW5jZS5sb29wICE9PSB0cnVlIHx8IChkaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUnICYmIGluc3RhbmNlLmxvb3AgPT09IDEpKSB7IGluc3RhbmNlLnJlbWFpbmluZysrOyB9CiAgICBzZXRBbmltYXRpb25zUHJvZ3Jlc3MoMCk7CiAgfTsKCiAgLy8gU2V0IFZhbHVlIGhlbHBlcgoKICBpbnN0YW5jZS5zZXQgPSBmdW5jdGlvbih0YXJnZXRzLCBwcm9wZXJ0aWVzKSB7CiAgICBzZXRUYXJnZXRzVmFsdWUodGFyZ2V0cywgcHJvcGVydGllcyk7CiAgICByZXR1cm4gaW5zdGFuY2U7CiAgfTsKCiAgaW5zdGFuY2UudGljayA9IGZ1bmN0aW9uKHQpIHsKICAgIG5vdyA9IHQ7CiAgICBpZiAoIXN0YXJ0VGltZSkgeyBzdGFydFRpbWUgPSBub3c7IH0KICAgIHNldEluc3RhbmNlUHJvZ3Jlc3MoKG5vdyArIChsYXN0VGltZSAtIHN0YXJ0VGltZSkpICogYW5pbWUuc3BlZWQpOwogIH07CgogIGluc3RhbmNlLnNlZWsgPSBmdW5jdGlvbih0aW1lKSB7CiAgICBzZXRJbnN0YW5jZVByb2dyZXNzKGFkanVzdFRpbWUodGltZSkpOwogIH07CgogIGluc3RhbmNlLnBhdXNlID0gZnVuY3Rpb24oKSB7CiAgICBpbnN0YW5jZS5wYXVzZWQgPSB0cnVlOwogICAgcmVzZXRUaW1lKCk7CiAgfTsKCiAgaW5zdGFuY2UucGxheSA9IGZ1bmN0aW9uKCkgewogICAgaWYgKCFpbnN0YW5jZS5wYXVzZWQpIHsgcmV0dXJuOyB9CiAgICBpbnN0YW5jZS5wYXVzZWQgPSBmYWxzZTsKICAgIGFjdGl2ZUluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTsKICAgIHJlc2V0VGltZSgpOwogICAgaWYgKCFyYWYpIHsgZW5naW5lKCk7IH0KICB9OwoKICBpbnN0YW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7CiAgICB0b2dnbGVJbnN0YW5jZURpcmVjdGlvbigpOwogICAgcmVzZXRUaW1lKCk7CiAgfTsKCiAgaW5zdGFuY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkgewogICAgaW5zdGFuY2UucmVzZXQoKTsKICAgIGluc3RhbmNlLnBsYXkoKTsKICB9OwoKICBpbnN0YW5jZS5maW5pc2hlZCA9IHByb21pc2U7CiAgaW5zdGFuY2UucmVzZXQoKTsKCiAgaWYgKGluc3RhbmNlLmF1dG9wbGF5KSB7IGluc3RhbmNlLnBsYXkoKTsgfQoKICByZXR1cm4gaW5zdGFuY2U7Cgp9CgovLyBSZW1vdmUgdGFyZ2V0cyBmcm9tIGFuaW1hdGlvbgoKZnVuY3Rpb24gcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9ucykgewogIGZvciAodmFyIGEgPSBhbmltYXRpb25zLmxlbmd0aDsgYS0tOykgewogICAgaWYgKGFycmF5Q29udGFpbnModGFyZ2V0c0FycmF5LCBhbmltYXRpb25zW2FdLmFuaW1hdGFibGUudGFyZ2V0KSkgewogICAgICBhbmltYXRpb25zLnNwbGljZShhLCAxKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHJlbW92ZVRhcmdldHModGFyZ2V0cykgewogIHZhciB0YXJnZXRzQXJyYXkgPSBwYXJzZVRhcmdldHModGFyZ2V0cyk7CiAgZm9yICh2YXIgaSA9IGFjdGl2ZUluc3RhbmNlcy5sZW5ndGg7IGktLTspIHsKICAgIHZhciBpbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlc1tpXTsKICAgIHZhciBhbmltYXRpb25zID0gaW5zdGFuY2UuYW5pbWF0aW9uczsKICAgIHZhciBjaGlsZHJlbiA9IGluc3RhbmNlLmNoaWxkcmVuOwogICAgcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgYW5pbWF0aW9ucyk7CiAgICBmb3IgKHZhciBjID0gY2hpbGRyZW4ubGVuZ3RoOyBjLS07KSB7CiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2NdOwogICAgICB2YXIgY2hpbGRBbmltYXRpb25zID0gY2hpbGQuYW5pbWF0aW9uczsKICAgICAgcmVtb3ZlVGFyZ2V0c0Zyb21BbmltYXRpb25zKHRhcmdldHNBcnJheSwgY2hpbGRBbmltYXRpb25zKTsKICAgICAgaWYgKCFjaGlsZEFuaW1hdGlvbnMubGVuZ3RoICYmICFjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIHsgY2hpbGRyZW4uc3BsaWNlKGMsIDEpOyB9CiAgICB9CiAgICBpZiAoIWFuaW1hdGlvbnMubGVuZ3RoICYmICFjaGlsZHJlbi5sZW5ndGgpIHsgaW5zdGFuY2UucGF1c2UoKTsgfQogIH0KfQoKLy8gU3RhZ2dlciBoZWxwZXJzCgpmdW5jdGlvbiBzdGFnZ2VyKHZhbCwgcGFyYW1zKSB7CiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9OwoKICB2YXIgZGlyZWN0aW9uID0gcGFyYW1zLmRpcmVjdGlvbiB8fCAnbm9ybWFsJzsKICB2YXIgZWFzaW5nID0gcGFyYW1zLmVhc2luZyA/IHBhcnNlRWFzaW5ncyhwYXJhbXMuZWFzaW5nKSA6IG51bGw7CiAgdmFyIGdyaWQgPSBwYXJhbXMuZ3JpZDsKICB2YXIgYXhpcyA9IHBhcmFtcy5heGlzOwogIHZhciBmcm9tSW5kZXggPSBwYXJhbXMuZnJvbSB8fCAwOwogIHZhciBmcm9tRmlyc3QgPSBmcm9tSW5kZXggPT09ICdmaXJzdCc7CiAgdmFyIGZyb21DZW50ZXIgPSBmcm9tSW5kZXggPT09ICdjZW50ZXInOwogIHZhciBmcm9tTGFzdCA9IGZyb21JbmRleCA9PT0gJ2xhc3QnOwogIHZhciBpc1JhbmdlID0gaXMuYXJyKHZhbCk7CiAgdmFyIHZhbDEgPSBpc1JhbmdlID8gcGFyc2VGbG9hdCh2YWxbMF0pIDogcGFyc2VGbG9hdCh2YWwpOwogIHZhciB2YWwyID0gaXNSYW5nZSA/IHBhcnNlRmxvYXQodmFsWzFdKSA6IDA7CiAgdmFyIHVuaXQgPSBnZXRVbml0KGlzUmFuZ2UgPyB2YWxbMV0gOiB2YWwpIHx8IDA7CiAgdmFyIHN0YXJ0ID0gcGFyYW1zLnN0YXJ0IHx8IDAgKyAoaXNSYW5nZSA/IHZhbDEgOiAwKTsKICB2YXIgdmFsdWVzID0gW107CiAgdmFyIG1heFZhbHVlID0gMDsKICByZXR1cm4gZnVuY3Rpb24gKGVsLCBpLCB0KSB7CiAgICBpZiAoZnJvbUZpcnN0KSB7IGZyb21JbmRleCA9IDA7IH0KICAgIGlmIChmcm9tQ2VudGVyKSB7IGZyb21JbmRleCA9ICh0IC0gMSkgLyAyOyB9CiAgICBpZiAoZnJvbUxhc3QpIHsgZnJvbUluZGV4ID0gdCAtIDE7IH0KICAgIGlmICghdmFsdWVzLmxlbmd0aCkgewogICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdDsgaW5kZXgrKykgewogICAgICAgIGlmICghZ3JpZCkgewogICAgICAgICAgdmFsdWVzLnB1c2goTWF0aC5hYnMoZnJvbUluZGV4IC0gaW5kZXgpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGZyb21YID0gIWZyb21DZW50ZXIgPyBmcm9tSW5kZXglZ3JpZFswXSA6IChncmlkWzBdLTEpLzI7CiAgICAgICAgICB2YXIgZnJvbVkgPSAhZnJvbUNlbnRlciA/IE1hdGguZmxvb3IoZnJvbUluZGV4L2dyaWRbMF0pIDogKGdyaWRbMV0tMSkvMjsKICAgICAgICAgIHZhciB0b1ggPSBpbmRleCVncmlkWzBdOwogICAgICAgICAgdmFyIHRvWSA9IE1hdGguZmxvb3IoaW5kZXgvZ3JpZFswXSk7CiAgICAgICAgICB2YXIgZGlzdGFuY2VYID0gZnJvbVggLSB0b1g7CiAgICAgICAgICB2YXIgZGlzdGFuY2VZID0gZnJvbVkgLSB0b1k7CiAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLnNxcnQoZGlzdGFuY2VYICogZGlzdGFuY2VYICsgZGlzdGFuY2VZICogZGlzdGFuY2VZKTsKICAgICAgICAgIGlmIChheGlzID09PSAneCcpIHsgdmFsdWUgPSAtZGlzdGFuY2VYOyB9CiAgICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7IHZhbHVlID0gLWRpc3RhbmNlWTsgfQogICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpOwogICAgICAgIH0KICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7CiAgICAgIH0KICAgICAgaWYgKGVhc2luZykgeyB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIGVhc2luZyh2YWwgLyBtYXhWYWx1ZSkgKiBtYXhWYWx1ZTsgfSk7IH0KICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JldmVyc2UnKSB7IHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gYXhpcyA/ICh2YWwgPCAwKSA/IHZhbCAqIC0xIDogLXZhbCA6IE1hdGguYWJzKG1heFZhbHVlIC0gdmFsKTsgfSk7IH0KICAgIH0KICAgIHZhciBzcGFjaW5nID0gaXNSYW5nZSA/ICh2YWwyIC0gdmFsMSkgLyBtYXhWYWx1ZSA6IHZhbDE7CiAgICByZXR1cm4gc3RhcnQgKyAoc3BhY2luZyAqIChNYXRoLnJvdW5kKHZhbHVlc1tpXSAqIDEwMCkgLyAxMDApKSArIHVuaXQ7CiAgfQp9CgovLyBUaW1lbGluZQoKZnVuY3Rpb24gdGltZWxpbmUocGFyYW1zKSB7CiAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9OwoKICB2YXIgdGwgPSBhbmltZShwYXJhbXMpOwogIHRsLmR1cmF0aW9uID0gMDsKICB0bC5hZGQgPSBmdW5jdGlvbihpbnN0YW5jZVBhcmFtcywgdGltZWxpbmVPZmZzZXQpIHsKICAgIHZhciB0bEluZGV4ID0gYWN0aXZlSW5zdGFuY2VzLmluZGV4T2YodGwpOwogICAgdmFyIGNoaWxkcmVuID0gdGwuY2hpbGRyZW47CiAgICBpZiAodGxJbmRleCA+IC0xKSB7IGFjdGl2ZUluc3RhbmNlcy5zcGxpY2UodGxJbmRleCwgMSk7IH0KICAgIGZ1bmN0aW9uIHBhc3NUaHJvdWdoKGlucykgeyBpbnMucGFzc1Rocm91Z2ggPSB0cnVlOyB9CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7IHBhc3NUaHJvdWdoKGNoaWxkcmVuW2ldKTsgfQogICAgdmFyIGluc1BhcmFtcyA9IG1lcmdlT2JqZWN0cyhpbnN0YW5jZVBhcmFtcywgcmVwbGFjZU9iamVjdFByb3BzKGRlZmF1bHRUd2VlblNldHRpbmdzLCBwYXJhbXMpKTsKICAgIGluc1BhcmFtcy50YXJnZXRzID0gaW5zUGFyYW1zLnRhcmdldHMgfHwgcGFyYW1zLnRhcmdldHM7CiAgICB2YXIgdGxEdXJhdGlvbiA9IHRsLmR1cmF0aW9uOwogICAgaW5zUGFyYW1zLmF1dG9wbGF5ID0gZmFsc2U7CiAgICBpbnNQYXJhbXMuZGlyZWN0aW9uID0gdGwuZGlyZWN0aW9uOwogICAgaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0ID0gaXMudW5kKHRpbWVsaW5lT2Zmc2V0KSA/IHRsRHVyYXRpb24gOiBnZXRSZWxhdGl2ZVZhbHVlKHRpbWVsaW5lT2Zmc2V0LCB0bER1cmF0aW9uKTsKICAgIHBhc3NUaHJvdWdoKHRsKTsKICAgIHRsLnNlZWsoaW5zUGFyYW1zLnRpbWVsaW5lT2Zmc2V0KTsKICAgIHZhciBpbnMgPSBhbmltZShpbnNQYXJhbXMpOwogICAgcGFzc1Rocm91Z2goaW5zKTsKICAgIGNoaWxkcmVuLnB1c2goaW5zKTsKICAgIHZhciB0aW1pbmdzID0gZ2V0SW5zdGFuY2VUaW1pbmdzKGNoaWxkcmVuLCBwYXJhbXMpOwogICAgdGwuZGVsYXkgPSB0aW1pbmdzLmRlbGF5OwogICAgdGwuZW5kRGVsYXkgPSB0aW1pbmdzLmVuZERlbGF5OwogICAgdGwuZHVyYXRpb24gPSB0aW1pbmdzLmR1cmF0aW9uOwogICAgdGwuc2VlaygwKTsKICAgIHRsLnJlc2V0KCk7CiAgICBpZiAodGwuYXV0b3BsYXkpIHsgdGwucGxheSgpOyB9CiAgICByZXR1cm4gdGw7CiAgfTsKICByZXR1cm4gdGw7Cn0KCmFuaW1lLnZlcnNpb24gPSAnMy4wLjAnOwphbmltZS5zcGVlZCA9IDE7CmFuaW1lLnJ1bm5pbmcgPSBhY3RpdmVJbnN0YW5jZXM7CmFuaW1lLnJlbW92ZSA9IHJlbW92ZVRhcmdldHM7CmFuaW1lLmdldCA9IGdldE9yaWdpbmFsVGFyZ2V0VmFsdWU7CmFuaW1lLnNldCA9IHNldFRhcmdldHNWYWx1ZTsKYW5pbWUuY29udmVydFB4ID0gY29udmVydFB4VG9Vbml0OwphbmltZS5wYXRoID0gZ2V0UGF0aDsKYW5pbWUuc2V0RGFzaG9mZnNldCA9IHNldERhc2hvZmZzZXQ7CmFuaW1lLnN0YWdnZXIgPSBzdGFnZ2VyOwphbmltZS50aW1lbGluZSA9IHRpbWVsaW5lOwphbmltZS5lYXNpbmcgPSBwYXJzZUVhc2luZ3M7CmFuaW1lLnBlbm5lciA9IHBlbm5lcjsKYW5pbWUucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyB9OwoKbW9kdWxlLmV4cG9ydHMgPSBhbmltZTsKCn0se31dLDM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKCXR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOgoJdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6CgkoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLlRIUkVFID0ge30pKTsKfSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnOwoKCS8vIFBvbHlmaWxscwoKCWlmICggTnVtYmVyLkVQU0lMT04gPT09IHVuZGVmaW5lZCApIHsKCgkJTnVtYmVyLkVQU0lMT04gPSBNYXRoLnBvdyggMiwgLSA1MiApOwoKCX0KCglpZiAoIE51bWJlci5pc0ludGVnZXIgPT09IHVuZGVmaW5lZCApIHsKCgkJLy8gTWlzc2luZyBpbiBJRQoJCS8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9pc0ludGVnZXIKCgkJTnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSggdmFsdWUgKSAmJiBNYXRoLmZsb29yKCB2YWx1ZSApID09PSB2YWx1ZTsKCgkJfTsKCgl9CgoJLy8KCglpZiAoIE1hdGguc2lnbiA9PT0gdW5kZWZpbmVkICkgewoKCQkvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3NpZ24KCgkJTWF0aC5zaWduID0gZnVuY3Rpb24gKCB4ICkgewoKCQkJcmV0dXJuICggeCA8IDAgKSA/IC0gMSA6ICggeCA+IDAgKSA/IDEgOiArIHg7CgoJCX07CgoJfQoKCWlmICggJ25hbWUnIGluIEZ1bmN0aW9uLnByb3RvdHlwZSA9PT0gZmFsc2UgKSB7CgoJCS8vIE1pc3NpbmcgaW4gSUUKCQkvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GdW5jdGlvbi9uYW1lCgoJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggRnVuY3Rpb24ucHJvdG90eXBlLCAnbmFtZScsIHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLnRvU3RyaW5nKCkubWF0Y2goIC9eXHMqZnVuY3Rpb25ccyooW15cKFxzXSopLyApWyAxIF07CgoJCQl9CgoJCX0gKTsKCgl9CgoJaWYgKCBPYmplY3QuYXNzaWduID09PSB1bmRlZmluZWQgKSB7CgoJCS8vIE1pc3NpbmcgaW4gSUUKCQkvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduCgoJCU9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsICkgewoKCQkJCXRocm93IG5ldyBUeXBlRXJyb3IoICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnICk7CgoJCQl9CgoJCQl2YXIgb3V0cHV0ID0gT2JqZWN0KCB0YXJnZXQgKTsKCgkJCWZvciAoIHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggKysgKSB7CgoJCQkJdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1sgaW5kZXggXTsKCgkJCQlpZiAoIHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCApIHsKCgkJCQkJZm9yICggdmFyIG5leHRLZXkgaW4gc291cmNlICkgewoKCQkJCQkJaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIHNvdXJjZSwgbmV4dEtleSApICkgewoKCQkJCQkJCW91dHB1dFsgbmV4dEtleSBdID0gc291cmNlWyBuZXh0S2V5IF07CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gb3V0cHV0OwoKCQl9OwoKCX0KCgl2YXIgUkVWSVNJT04gPSAnMTExZGV2JzsKCXZhciBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyIH07Cgl2YXIgVE9VQ0ggPSB7IFJPVEFURTogMCwgUEFOOiAxLCBET0xMWV9QQU46IDIsIERPTExZX1JPVEFURTogMyB9OwoJdmFyIEN1bGxGYWNlTm9uZSA9IDA7Cgl2YXIgQ3VsbEZhY2VCYWNrID0gMTsKCXZhciBDdWxsRmFjZUZyb250ID0gMjsKCXZhciBDdWxsRmFjZUZyb250QmFjayA9IDM7Cgl2YXIgRnJvbnRGYWNlRGlyZWN0aW9uQ1cgPSAwOwoJdmFyIEZyb250RmFjZURpcmVjdGlvbkNDVyA9IDE7Cgl2YXIgQmFzaWNTaGFkb3dNYXAgPSAwOwoJdmFyIFBDRlNoYWRvd01hcCA9IDE7Cgl2YXIgUENGU29mdFNoYWRvd01hcCA9IDI7Cgl2YXIgVlNNU2hhZG93TWFwID0gMzsKCXZhciBGcm9udFNpZGUgPSAwOwoJdmFyIEJhY2tTaWRlID0gMTsKCXZhciBEb3VibGVTaWRlID0gMjsKCXZhciBGbGF0U2hhZGluZyA9IDE7Cgl2YXIgU21vb3RoU2hhZGluZyA9IDI7Cgl2YXIgTm9Db2xvcnMgPSAwOwoJdmFyIEZhY2VDb2xvcnMgPSAxOwoJdmFyIFZlcnRleENvbG9ycyA9IDI7Cgl2YXIgTm9CbGVuZGluZyA9IDA7Cgl2YXIgTm9ybWFsQmxlbmRpbmcgPSAxOwoJdmFyIEFkZGl0aXZlQmxlbmRpbmcgPSAyOwoJdmFyIFN1YnRyYWN0aXZlQmxlbmRpbmcgPSAzOwoJdmFyIE11bHRpcGx5QmxlbmRpbmcgPSA0OwoJdmFyIEN1c3RvbUJsZW5kaW5nID0gNTsKCXZhciBBZGRFcXVhdGlvbiA9IDEwMDsKCXZhciBTdWJ0cmFjdEVxdWF0aW9uID0gMTAxOwoJdmFyIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uID0gMTAyOwoJdmFyIE1pbkVxdWF0aW9uID0gMTAzOwoJdmFyIE1heEVxdWF0aW9uID0gMTA0OwoJdmFyIFplcm9GYWN0b3IgPSAyMDA7Cgl2YXIgT25lRmFjdG9yID0gMjAxOwoJdmFyIFNyY0NvbG9yRmFjdG9yID0gMjAyOwoJdmFyIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgPSAyMDM7Cgl2YXIgU3JjQWxwaGFGYWN0b3IgPSAyMDQ7Cgl2YXIgT25lTWludXNTcmNBbHBoYUZhY3RvciA9IDIwNTsKCXZhciBEc3RBbHBoYUZhY3RvciA9IDIwNjsKCXZhciBPbmVNaW51c0RzdEFscGhhRmFjdG9yID0gMjA3OwoJdmFyIERzdENvbG9yRmFjdG9yID0gMjA4OwoJdmFyIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgPSAyMDk7Cgl2YXIgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciA9IDIxMDsKCXZhciBOZXZlckRlcHRoID0gMDsKCXZhciBBbHdheXNEZXB0aCA9IDE7Cgl2YXIgTGVzc0RlcHRoID0gMjsKCXZhciBMZXNzRXF1YWxEZXB0aCA9IDM7Cgl2YXIgRXF1YWxEZXB0aCA9IDQ7Cgl2YXIgR3JlYXRlckVxdWFsRGVwdGggPSA1OwoJdmFyIEdyZWF0ZXJEZXB0aCA9IDY7Cgl2YXIgTm90RXF1YWxEZXB0aCA9IDc7Cgl2YXIgTXVsdGlwbHlPcGVyYXRpb24gPSAwOwoJdmFyIE1peE9wZXJhdGlvbiA9IDE7Cgl2YXIgQWRkT3BlcmF0aW9uID0gMjsKCXZhciBOb1RvbmVNYXBwaW5nID0gMDsKCXZhciBMaW5lYXJUb25lTWFwcGluZyA9IDE7Cgl2YXIgUmVpbmhhcmRUb25lTWFwcGluZyA9IDI7Cgl2YXIgVW5jaGFydGVkMlRvbmVNYXBwaW5nID0gMzsKCXZhciBDaW5lb25Ub25lTWFwcGluZyA9IDQ7Cgl2YXIgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNTsKCgl2YXIgVVZNYXBwaW5nID0gMzAwOwoJdmFyIEN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IDMwMTsKCXZhciBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDI7Cgl2YXIgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDM7Cgl2YXIgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDQ7Cgl2YXIgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDU7Cgl2YXIgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDY7Cgl2YXIgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDc7Cgl2YXIgUmVwZWF0V3JhcHBpbmcgPSAxMDAwOwoJdmFyIENsYW1wVG9FZGdlV3JhcHBpbmcgPSAxMDAxOwoJdmFyIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgPSAxMDAyOwoJdmFyIE5lYXJlc3RGaWx0ZXIgPSAxMDAzOwoJdmFyIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNDsKCXZhciBOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDQ7Cgl2YXIgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciA9IDEwMDU7Cgl2YXIgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IDEwMDU7Cgl2YXIgTGluZWFyRmlsdGVyID0gMTAwNjsKCXZhciBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNzsKCXZhciBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNzsKCXZhciBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA4OwoJdmFyIExpbmVhck1pcE1hcExpbmVhckZpbHRlciA9IDEwMDg7Cgl2YXIgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7Cgl2YXIgQnl0ZVR5cGUgPSAxMDEwOwoJdmFyIFNob3J0VHlwZSA9IDEwMTE7Cgl2YXIgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyOwoJdmFyIEludFR5cGUgPSAxMDEzOwoJdmFyIFVuc2lnbmVkSW50VHlwZSA9IDEwMTQ7Cgl2YXIgRmxvYXRUeXBlID0gMTAxNTsKCXZhciBIYWxmRmxvYXRUeXBlID0gMTAxNjsKCXZhciBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSAxMDE3OwoJdmFyIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7Cgl2YXIgVW5zaWduZWRTaG9ydDU2NVR5cGUgPSAxMDE5OwoJdmFyIFVuc2lnbmVkSW50MjQ4VHlwZSA9IDEwMjA7Cgl2YXIgQWxwaGFGb3JtYXQgPSAxMDIxOwoJdmFyIFJHQkZvcm1hdCA9IDEwMjI7Cgl2YXIgUkdCQUZvcm1hdCA9IDEwMjM7Cgl2YXIgTHVtaW5hbmNlRm9ybWF0ID0gMTAyNDsKCXZhciBMdW1pbmFuY2VBbHBoYUZvcm1hdCA9IDEwMjU7Cgl2YXIgUkdCRUZvcm1hdCA9IFJHQkFGb3JtYXQ7Cgl2YXIgRGVwdGhGb3JtYXQgPSAxMDI2OwoJdmFyIERlcHRoU3RlbmNpbEZvcm1hdCA9IDEwMjc7Cgl2YXIgUmVkRm9ybWF0ID0gMTAyODsKCXZhciBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2OwoJdmFyIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc3OwoJdmFyIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCA9IDMzNzc4OwoJdmFyIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5OwoJdmFyIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDA7Cgl2YXIgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTsKCXZhciBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MjsKCXZhciBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MzsKCXZhciBSR0JfRVRDMV9Gb3JtYXQgPSAzNjE5NjsKCXZhciBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4OwoJdmFyIFJHQkFfQVNUQ181eDRfRm9ybWF0ID0gMzc4MDk7Cgl2YXIgUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSAzNzgxMDsKCXZhciBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExOwoJdmFyIFJHQkFfQVNUQ182eDZfRm9ybWF0ID0gMzc4MTI7Cgl2YXIgUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSAzNzgxMzsKCXZhciBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0OwoJdmFyIFJHQkFfQVNUQ184eDhfRm9ybWF0ID0gMzc4MTU7Cgl2YXIgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7Cgl2YXIgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7Cgl2YXIgUkdCQV9BU1RDXzEweDhfRm9ybWF0ID0gMzc4MTg7Cgl2YXIgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5OwoJdmFyIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDsKCXZhciBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gMzc4MjE7Cgl2YXIgTG9vcE9uY2UgPSAyMjAwOwoJdmFyIExvb3BSZXBlYXQgPSAyMjAxOwoJdmFyIExvb3BQaW5nUG9uZyA9IDIyMDI7Cgl2YXIgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7Cgl2YXIgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxOwoJdmFyIEludGVycG9sYXRlU21vb3RoID0gMjMwMjsKCXZhciBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDsKCXZhciBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxOwoJdmFyIFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyOwoJdmFyIFRyaWFuZ2xlc0RyYXdNb2RlID0gMDsKCXZhciBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxOwoJdmFyIFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyOwoJdmFyIExpbmVhckVuY29kaW5nID0gMzAwMDsKCXZhciBzUkdCRW5jb2RpbmcgPSAzMDAxOwoJdmFyIEdhbW1hRW5jb2RpbmcgPSAzMDA3OwoJdmFyIFJHQkVFbmNvZGluZyA9IDMwMDI7Cgl2YXIgTG9nTHV2RW5jb2RpbmcgPSAzMDAzOwoJdmFyIFJHQk03RW5jb2RpbmcgPSAzMDA0OwoJdmFyIFJHQk0xNkVuY29kaW5nID0gMzAwNTsKCXZhciBSR0JERW5jb2RpbmcgPSAzMDA2OwoJdmFyIEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDsKCXZhciBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTsKCXZhciBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwOwoJdmFyIE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTsKCgl2YXIgWmVyb1N0ZW5jaWxPcCA9IDA7Cgl2YXIgS2VlcFN0ZW5jaWxPcCA9IDc2ODA7Cgl2YXIgUmVwbGFjZVN0ZW5jaWxPcCA9IDc2ODE7Cgl2YXIgSW5jcmVtZW50U3RlbmNpbE9wID0gNzY4MjsKCXZhciBEZWNyZW1lbnRTdGVuY2lsT3AgPSA3NjgzOwoJdmFyIEluY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NTsKCXZhciBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTY7Cgl2YXIgSW52ZXJ0U3RlbmNpbE9wID0gNTM4NjsKCgl2YXIgTmV2ZXJTdGVuY2lsRnVuYyA9IDUxMjsKCXZhciBMZXNzU3RlbmNpbEZ1bmMgPSA1MTM7Cgl2YXIgRXF1YWxTdGVuY2lsRnVuYyA9IDUxNDsKCXZhciBMZXNzRXF1YWxTdGVuY2lsRnVuYyA9IDUxNTsKCXZhciBHcmVhdGVyU3RlbmNpbEZ1bmMgPSA1MTY7Cgl2YXIgTm90RXF1YWxTdGVuY2lsRnVuYyA9IDUxNzsKCXZhciBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYyA9IDUxODsKCXZhciBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTsKCgl2YXIgU3RhdGljRHJhd1VzYWdlID0gMzUwNDQ7Cgl2YXIgRHluYW1pY0RyYXdVc2FnZSA9IDM1MDQ4OwoJdmFyIFN0cmVhbURyYXdVc2FnZSA9IDM1MDQwOwoJdmFyIFN0YXRpY1JlYWRVc2FnZSA9IDM1MDQ1OwoJdmFyIER5bmFtaWNSZWFkVXNhZ2UgPSAzNTA0OTsKCXZhciBTdHJlYW1SZWFkVXNhZ2UgPSAzNTA0MTsKCXZhciBTdGF0aWNDb3B5VXNhZ2UgPSAzNTA0NjsKCXZhciBEeW5hbWljQ29weVVzYWdlID0gMzUwNTA7Cgl2YXIgU3RyZWFtQ29weVVzYWdlID0gMzUwNDI7CgoJLyoqCgkgKiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL2V2ZW50ZGlzcGF0Y2hlci5qcy8KCSAqLwoKCWZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcigpIHt9CgoJT2JqZWN0LmFzc2lnbiggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSwgewoKCQlhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoIHR5cGUsIGxpc3RlbmVyICkgewoKCQkJaWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHsgdGhpcy5fbGlzdGVuZXJzID0ge307IH0KCgkJCXZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgoJCQlpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJbGlzdGVuZXJzWyB0eXBlIF0gPSBbXTsKCgkJCX0KCgkJCWlmICggbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSA9PT0gLSAxICkgewoKCQkJCWxpc3RlbmVyc1sgdHlwZSBdLnB1c2goIGxpc3RlbmVyICk7CgoJCQl9CgoJCX0sCgoJCWhhc0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7CgoJCQlpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm4gZmFsc2U7IH0KCgkJCXZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgoJCQlyZXR1cm4gbGlzdGVuZXJzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApICE9PSAtIDE7CgoJCX0sCgoJCXJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7CgoJCQlpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KCgkJCXZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgkJCXZhciBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyB0eXBlIF07CgoJCQlpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YoIGxpc3RlbmVyICk7CgoJCQkJaWYgKCBpbmRleCAhPT0gLSAxICkgewoKCQkJCQlsaXN0ZW5lckFycmF5LnNwbGljZSggaW5kZXgsIDEgKTsKCgkJCQl9CgoJCQl9CgoJCX0sCgoJCWRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICggZXZlbnQgKSB7CgoJCQlpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KCgkJCXZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CgkJCXZhciBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyBldmVudC50eXBlIF07CgoJCQlpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlldmVudC50YXJnZXQgPSB0aGlzOwoKCQkJCXZhciBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoIDAgKTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQlhcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7CgoJCQkJfQoKCQkJfQoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgX2x1dCA9IFtdOwoKCWZvciAoIHZhciBpID0gMDsgaSA8IDI1NjsgaSArKyApIHsKCgkJX2x1dFsgaSBdID0gKCBpIDwgMTYgPyAnMCcgOiAnJyApICsgKCBpICkudG9TdHJpbmcoIDE2ICk7CgoJfQoKCXZhciBfTWF0aCA9IHsKCgkJREVHMlJBRDogTWF0aC5QSSAvIDE4MCwKCQlSQUQyREVHOiAxODAgLyBNYXRoLlBJLAoKCQlnZW5lcmF0ZVVVSUQ6IGZ1bmN0aW9uICgpIHsKCgkJCS8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdC8yMTk2MzEzNiMyMTk2MzEzNgoKCQkJdmFyIGQwID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwOwoJCQl2YXIgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7CgkJCXZhciBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDsKCQkJdmFyIGQzID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwOwoJCQl2YXIgdXVpZCA9IF9sdXRbIGQwICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgKwoJCQkJX2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgKwoJCQkJX2x1dFsgZDIgJiAweDNmIHwgMHg4MCBdICsgX2x1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDIgPj4gMjQgJiAweGZmIF0gKwoJCQkJX2x1dFsgZDMgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTsKCgkJCS8vIC50b1VwcGVyQ2FzZSgpIGhlcmUgZmxhdHRlbnMgY29uY2F0ZW5hdGVkIHN0cmluZ3MgdG8gc2F2ZSBoZWFwIG1lbW9yeSBzcGFjZS4KCQkJcmV0dXJuIHV1aWQudG9VcHBlckNhc2UoKTsKCgkJfSwKCgkJY2xhbXA6IGZ1bmN0aW9uICggdmFsdWUsIG1pbiwgbWF4ICkgewoKCQkJcmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTsKCgkJfSwKCgkJLy8gY29tcHV0ZSBldWNsaWRpYW4gbW9kdWxvIG9mIG0gJSBuCgkJLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxvX29wZXJhdGlvbgoKCQlldWNsaWRlYW5Nb2R1bG86IGZ1bmN0aW9uICggbiwgbSApIHsKCgkJCXJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07CgoJCX0sCgoJCS8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj4KCgkJbWFwTGluZWFyOiBmdW5jdGlvbiAoIHgsIGExLCBhMiwgYjEsIGIyICkgewoKCQkJcmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7CgoJCX0sCgoJCS8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9pbnRlcnBvbGF0aW9uCgoJCWxlcnA6IGZ1bmN0aW9uICggeCwgeSwgdCApIHsKCgkJCXJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7CgoJCX0sCgoJCS8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU21vb3Roc3RlcAoKCQlzbW9vdGhzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkgewoKCQkJaWYgKCB4IDw9IG1pbiApIHsgcmV0dXJuIDA7IH0KCQkJaWYgKCB4ID49IG1heCApIHsgcmV0dXJuIDE7IH0KCgkJCXggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7CgoJCQlyZXR1cm4geCAqIHggKiAoIDMgLSAyICogeCApOwoKCQl9LAoKCQlzbW9vdGhlcnN0ZXA6IGZ1bmN0aW9uICggeCwgbWluLCBtYXggKSB7CgoJCQlpZiAoIHggPD0gbWluICkgeyByZXR1cm4gMDsgfQoJCQlpZiAoIHggPj0gbWF4ICkgeyByZXR1cm4gMTsgfQoKCQkJeCA9ICggeCAtIG1pbiApIC8gKCBtYXggLSBtaW4gKTsKCgkJCXJldHVybiB4ICogeCAqIHggKiAoIHggKiAoIHggKiA2IC0gMTUgKSArIDEwICk7CgoJCX0sCgoJCS8vIFJhbmRvbSBpbnRlZ2VyIGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWwKCgkJcmFuZEludDogZnVuY3Rpb24gKCBsb3csIGhpZ2ggKSB7CgoJCQlyZXR1cm4gbG93ICsgTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqICggaGlnaCAtIGxvdyArIDEgKSApOwoKCQl9LAoKCQkvLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbAoKCQlyYW5kRmxvYXQ6IGZ1bmN0aW9uICggbG93LCBoaWdoICkgewoKCQkJcmV0dXJuIGxvdyArIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKTsKCgkJfSwKCgkJLy8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbAoKCQlyYW5kRmxvYXRTcHJlYWQ6IGZ1bmN0aW9uICggcmFuZ2UgKSB7CgoJCQlyZXR1cm4gcmFuZ2UgKiAoIDAuNSAtIE1hdGgucmFuZG9tKCkgKTsKCgkJfSwKCgkJZGVnVG9SYWQ6IGZ1bmN0aW9uICggZGVncmVlcyApIHsKCgkJCXJldHVybiBkZWdyZWVzICogX01hdGguREVHMlJBRDsKCgkJfSwKCgkJcmFkVG9EZWc6IGZ1bmN0aW9uICggcmFkaWFucyApIHsKCgkJCXJldHVybiByYWRpYW5zICogX01hdGguUkFEMkRFRzsKCgkJfSwKCgkJaXNQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJcmV0dXJuICggdmFsdWUgJiAoIHZhbHVlIC0gMSApICkgPT09IDAgJiYgdmFsdWUgIT09IDA7CgoJCX0sCgoJCWNlaWxQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJcmV0dXJuIE1hdGgucG93KCAyLCBNYXRoLmNlaWwoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApOwoKCQl9LAoKCQlmbG9vclBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApOwoKCQl9CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnLwoJICogQGF1dGhvciBlZ3JhZXRoZXIgLyBodHRwOi8vZWdyYWV0aGVyLmNvbS8KCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2cKCSAqLwoKCWZ1bmN0aW9uIFZlY3RvcjIoIHgsIHkgKSB7CgoJCXRoaXMueCA9IHggfHwgMDsKCQl0aGlzLnkgPSB5IHx8IDA7CgoJfQoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWZWN0b3IyLnByb3RvdHlwZSwgewoKCQkid2lkdGgiOiB7CgoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQlyZXR1cm4gdGhpcy54OwoKCQkJfSwKCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQl0aGlzLnggPSB2YWx1ZTsKCgkJCX0KCgkJfSwKCgkJImhlaWdodCI6IHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLnk7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMueSA9IHZhbHVlOwoKCQkJfQoKCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIFZlY3RvcjIucHJvdG90eXBlLCB7CgoJCWlzVmVjdG9yMjogdHJ1ZSwKCgkJc2V0OiBmdW5jdGlvbiAoIHgsIHkgKSB7CgoJCQl0aGlzLnggPSB4OwoJCQl0aGlzLnkgPSB5OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7CgoJCQl0aGlzLnggPSBzY2FsYXI7CgkJCXRoaXMueSA9IHNjYWxhcjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRYOiBmdW5jdGlvbiAoIHggKSB7CgoJCQl0aGlzLnggPSB4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFk6IGZ1bmN0aW9uICggeSApIHsKCgkJCXRoaXMueSA9IHk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4LCB2YWx1ZSApIHsKCgkJCXN3aXRjaCAoIGluZGV4ICkgewoKCQkJCWNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrOwoJCQkJY2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7CgkJCQlkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHsKCgkJCXN3aXRjaCAoIGluZGV4ICkgewoKCQkJCWNhc2UgMDogcmV0dXJuIHRoaXMueDsKCQkJCWNhc2UgMTogcmV0dXJuIHRoaXMueTsKCQkJCWRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7CgoJCQl9CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggdiApIHsKCgkJCXRoaXMueCA9IHYueDsKCQkJdGhpcy55ID0gdi55OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWFkZDogZnVuY3Rpb24gKCB2LCB3ICkgewoKCQkJaWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTsKCQkJCXJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTsKCgkJCX0KCgkJCXRoaXMueCArPSB2Lng7CgkJCXRoaXMueSArPSB2Lnk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7CgoJCQl0aGlzLnggKz0gczsKCQkJdGhpcy55ICs9IHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkgewoKCQkJdGhpcy54ID0gYS54ICsgYi54OwoJCQl0aGlzLnkgPSBhLnkgKyBiLnk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAoIHYsIHMgKSB7CgoJCQl0aGlzLnggKz0gdi54ICogczsKCQkJdGhpcy55ICs9IHYueSAqIHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7CgoJCQlpZiAoIHcgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApOwoKCQkJfQoKCQkJdGhpcy54IC09IHYueDsKCQkJdGhpcy55IC09IHYueTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXRoaXMueCAtPSBzOwoJCQl0aGlzLnkgLT0gczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQl0aGlzLnggPSBhLnggLSBiLng7CgkJCXRoaXMueSA9IGEueSAtIGIueTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseTogZnVuY3Rpb24gKCB2ICkgewoKCQkJdGhpcy54ICo9IHYueDsKCQkJdGhpcy55ICo9IHYueTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7CgoJCQl0aGlzLnggKj0gc2NhbGFyOwoJCQl0aGlzLnkgKj0gc2NhbGFyOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWRpdmlkZTogZnVuY3Rpb24gKCB2ICkgewoKCQkJdGhpcy54IC89IHYueDsKCQkJdGhpcy55IC89IHYueTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkgewoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTsKCgkJfSwKCgkJYXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7CgoJCQl2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTsKCQkJdmFyIGUgPSBtLmVsZW1lbnRzOwoKCQkJdGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07CgkJCXRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW1pbjogZnVuY3Rpb24gKCB2ICkgewoKCQkJdGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7CgkJCXRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW1heDogZnVuY3Rpb24gKCB2ICkgewoKCQkJdGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7CgkJCXRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkgewoKCQkJLy8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2UKCgkJCXRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApOwoJCQl0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbGFtcFNjYWxhcjogZnVuY3Rpb24gKCBtaW5WYWwsIG1heFZhbCApIHsKCgkJCXRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7CgkJCXRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xhbXBMZW5ndGg6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7CgoJCQl2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTsKCgkJCXJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApOwoKCQl9LAoKCQlmbG9vcjogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7CgkJCXRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNlaWw6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7CgkJCXRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcm91bmQ6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApOwoJCQl0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7CgkJCXRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW5lZ2F0ZTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gLSB0aGlzLng7CgkJCXRoaXMueSA9IC0gdGhpcy55OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWRvdDogZnVuY3Rpb24gKCB2ICkgewoKCQkJcmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTsKCgkJfSwKCgkJY3Jvc3M6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7CgoJCX0sCgoJCWxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55OwoKCQl9LAoKCQlsZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApOwoKCQl9LAoKCQltYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICk7CgoJCX0sCgoJCW5vcm1hbGl6ZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTsKCgkJfSwKCgkJYW5nbGU6IGZ1bmN0aW9uICgpIHsKCgkJCS8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzCgoJCQl2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKCB0aGlzLnksIHRoaXMueCApOwoKCQkJaWYgKCBhbmdsZSA8IDAgKSB7IGFuZ2xlICs9IDIgKiBNYXRoLlBJOyB9CgoJCQlyZXR1cm4gYW5nbGU7CgoJCX0sCgoJCWRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApOwoKCQl9LAoKCQlkaXN0YW5jZVRvU3F1YXJlZDogZnVuY3Rpb24gKCB2ICkgewoKCQkJdmFyIGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueTsKCQkJcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5OwoKCQl9LAoKCQltYW5oYXR0YW5EaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQlyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApOwoKCQl9LAoKCQlzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkgewoKCQkJcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApOwoKCQl9LAoKCQlsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkgewoKCQkJdGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTsKCQkJdGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkgewoKCQkJcmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApOwoKCQl9LAoKCQllcXVhbHM6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTsKCgkJfSwKCgkJZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7CgoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgeyBvZmZzZXQgPSAwOyB9CgoJCQl0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07CgkJCXRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgeyBhcnJheSA9IFtdOyB9CgkJCWlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG9mZnNldCA9IDA7IH0KCgkJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDsKCQkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTsKCgkJCXJldHVybiBhcnJheTsKCgkJfSwKCgkJZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7CgoJCQlpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7CgoJCQl9CgoJCQl0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKCQkJdGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcm90YXRlQXJvdW5kOiBmdW5jdGlvbiAoIGNlbnRlciwgYW5nbGUgKSB7CgoJCQl2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApLCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7CgoJCQl2YXIgeCA9IHRoaXMueCAtIGNlbnRlci54OwoJCQl2YXIgeSA9IHRoaXMueSAtIGNlbnRlci55OwoKCQkJdGhpcy54ID0geCAqIGMgLSB5ICogcyArIGNlbnRlci54OwoJCQl0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKi8KCglmdW5jdGlvbiBRdWF0ZXJuaW9uKCB4LCB5LCB6LCB3ICkgewoKCQl0aGlzLl94ID0geCB8fCAwOwoJCXRoaXMuX3kgPSB5IHx8IDA7CgkJdGhpcy5feiA9IHogfHwgMDsKCQl0aGlzLl93ID0gKCB3ICE9PSB1bmRlZmluZWQgKSA/IHcgOiAxOwoKCX0KCglPYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLCB7CgoJCXNsZXJwOiBmdW5jdGlvbiAoIHFhLCBxYiwgcW0sIHQgKSB7CgoJCQlyZXR1cm4gcW0uY29weSggcWEgKS5zbGVycCggcWIsIHQgKTsKCgkJfSwKCgkJc2xlcnBGbGF0OiBmdW5jdGlvbiAoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkgewoKCQkJLy8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvbgoKCQkJdmFyIHgwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDAgXSwKCQkJCXkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXSwKCQkJCXowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSwKCQkJCXcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXSwKCgkJCQl4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sCgkJCQl5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sCgkJCQl6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sCgkJCQl3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07CgoJCQlpZiAoIHcwICE9PSB3MSB8fCB4MCAhPT0geDEgfHwgeTAgIT09IHkxIHx8IHowICE9PSB6MSApIHsKCgkJCQl2YXIgcyA9IDEgLSB0LAoKCQkJCQljb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLAoKCQkJCQlkaXIgPSAoIGNvcyA+PSAwID8gMSA6IC0gMSApLAoJCQkJCXNxclNpbiA9IDEgLSBjb3MgKiBjb3M7CgoJCQkJLy8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczoKCQkJCWlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7CgoJCQkJCXZhciBzaW4gPSBNYXRoLnNxcnQoIHNxclNpbiApLAoJCQkJCQlsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApOwoKCQkJCQlzID0gTWF0aC5zaW4oIHMgKiBsZW4gKSAvIHNpbjsKCQkJCQl0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjsKCgkJCQl9CgoJCQkJdmFyIHREaXIgPSB0ICogZGlyOwoKCQkJCXgwID0geDAgKiBzICsgeDEgKiB0RGlyOwoJCQkJeTAgPSB5MCAqIHMgKyB5MSAqIHREaXI7CgkJCQl6MCA9IHowICogcyArIHoxICogdERpcjsKCQkJCXcwID0gdzAgKiBzICsgdzEgKiB0RGlyOwoKCQkJCS8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDoKCQkJCWlmICggcyA9PT0gMSAtIHQgKSB7CgoJCQkJCXZhciBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApOwoKCQkJCQl4MCAqPSBmOwoJCQkJCXkwICo9IGY7CgkJCQkJejAgKj0gZjsKCQkJCQl3MCAqPSBmOwoKCQkJCX0KCgkJCX0KCgkJCWRzdFsgZHN0T2Zmc2V0IF0gPSB4MDsKCQkJZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDsKCQkJZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDsKCQkJZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDsKCgkJfQoKCX0gKTsKCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggUXVhdGVybmlvbi5wcm90b3R5cGUsIHsKCgkJeDogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuX3g7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMuX3ggPSB2YWx1ZTsKCQkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCX0KCgkJfSwKCgkJeTogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuX3k7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMuX3kgPSB2YWx1ZTsKCQkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCX0KCgkJfSwKCgkJejogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuX3o7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMuX3ogPSB2YWx1ZTsKCQkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCX0KCgkJfSwKCgkJdzogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuX3c7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMuX3cgPSB2YWx1ZTsKCQkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCX0KCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLnByb3RvdHlwZSwgewoKCQlpc1F1YXRlcm5pb246IHRydWUsCgoJCXNldDogZnVuY3Rpb24gKCB4LCB5LCB6LCB3ICkgewoKCQkJdGhpcy5feCA9IHg7CgkJCXRoaXMuX3kgPSB5OwoJCQl0aGlzLl96ID0gejsKCQkJdGhpcy5fdyA9IHc7CgoJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7CgoJCQl0aGlzLl94ID0gcXVhdGVybmlvbi54OwoJCQl0aGlzLl95ID0gcXVhdGVybmlvbi55OwoJCQl0aGlzLl96ID0gcXVhdGVybmlvbi56OwoJCQl0aGlzLl93ID0gcXVhdGVybmlvbi53OwoKCQkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciwgdXBkYXRlICkgewoKCQkJaWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkgewoKCQkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTsKCgkJCX0KCgkJCXZhciB4ID0gZXVsZXIuX3gsIHkgPSBldWxlci5feSwgeiA9IGV1bGVyLl96LCBvcmRlciA9IGV1bGVyLm9yZGVyOwoKCQkJLy8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlLwoJCQkvLyAJMjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvCgkJCS8vCWNvbnRlbnQvU3BpbkNhbGMubQoKCQkJdmFyIGNvcyA9IE1hdGguY29zOwoJCQl2YXIgc2luID0gTWF0aC5zaW47CgoJCQl2YXIgYzEgPSBjb3MoIHggLyAyICk7CgkJCXZhciBjMiA9IGNvcyggeSAvIDIgKTsKCQkJdmFyIGMzID0gY29zKCB6IC8gMiApOwoKCQkJdmFyIHMxID0gc2luKCB4IC8gMiApOwoJCQl2YXIgczIgPSBzaW4oIHkgLyAyICk7CgkJCXZhciBzMyA9IHNpbiggeiAvIDIgKTsKCgkJCWlmICggb3JkZXIgPT09ICdYWVonICkgewoKCQkJCXRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7CgkJCQl0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzOwoJCQkJdGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMzsKCQkJCXRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7CgoJCQl9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7CgoJCQkJdGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMzsKCQkJCXRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7CgkJCQl0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzOwoJCQkJdGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMzsKCgkJCX0gZWxzZSBpZiAoIG9yZGVyID09PSAnWlhZJyApIHsKCgkJCQl0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzOwoJCQkJdGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMzsKCQkJCXRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7CgkJCQl0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzOwoKCQkJfSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVgnICkgewoKCQkJCXRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7CgkJCQl0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzOwoJCQkJdGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMzsKCQkJCXRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7CgoJCQl9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7CgoJCQkJdGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMzsKCQkJCXRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7CgkJCQl0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzOwoJCQkJdGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMzsKCgkJCX0gZWxzZSBpZiAoIG9yZGVyID09PSAnWFpZJyApIHsKCgkJCQl0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzOwoJCQkJdGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMzsKCQkJCXRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7CgkJCQl0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzOwoKCQkJfQoKCQkJaWYgKCB1cGRhdGUgIT09IGZhbHNlICkgeyB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7IH0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkgewoKCQkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bQoKCQkJLy8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWQKCgkJCXZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7CgoJCQl0aGlzLl94ID0gYXhpcy54ICogczsKCQkJdGhpcy5feSA9IGF4aXMueSAqIHM7CgkJCXRoaXMuX3ogPSBheGlzLnogKiBzOwoJCQl0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApOwoKCQkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkgewoKCQkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG0KCgkJCS8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpCgoJCQl2YXIgdGUgPSBtLmVsZW1lbnRzLAoKCQkJCW0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sCgkJCQltMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLAoJCQkJbTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF0sCgoJCQkJdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsCgkJCQlzOwoKCQkJaWYgKCB0cmFjZSA+IDAgKSB7CgoJCQkJcyA9IDAuNSAvIE1hdGguc3FydCggdHJhY2UgKyAxLjAgKTsKCgkJCQl0aGlzLl93ID0gMC4yNSAvIHM7CgkJCQl0aGlzLl94ID0gKCBtMzIgLSBtMjMgKSAqIHM7CgkJCQl0aGlzLl95ID0gKCBtMTMgLSBtMzEgKSAqIHM7CgkJCQl0aGlzLl96ID0gKCBtMjEgLSBtMTIgKSAqIHM7CgoJCQl9IGVsc2UgaWYgKCBtMTEgPiBtMjIgJiYgbTExID4gbTMzICkgewoKCQkJCXMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApOwoKCQkJCXRoaXMuX3cgPSAoIG0zMiAtIG0yMyApIC8gczsKCQkJCXRoaXMuX3ggPSAwLjI1ICogczsKCQkJCXRoaXMuX3kgPSAoIG0xMiArIG0yMSApIC8gczsKCQkJCXRoaXMuX3ogPSAoIG0xMyArIG0zMSApIC8gczsKCgkJCX0gZWxzZSBpZiAoIG0yMiA+IG0zMyApIHsKCgkJCQlzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMjIgLSBtMTEgLSBtMzMgKTsKCgkJCQl0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7CgkJCQl0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7CgkJCQl0aGlzLl95ID0gMC4yNSAqIHM7CgkJCQl0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7CgoJCQl9IGVsc2UgewoKCQkJCXMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0zMyAtIG0xMSAtIG0yMiApOwoKCQkJCXRoaXMuX3cgPSAoIG0yMSAtIG0xMiApIC8gczsKCQkJCXRoaXMuX3ggPSAoIG0xMyArIG0zMSApIC8gczsKCQkJCXRoaXMuX3kgPSAoIG0yMyArIG0zMiApIC8gczsKCQkJCXRoaXMuX3ogPSAwLjI1ICogczsKCgkJCX0KCgkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tVW5pdFZlY3RvcnM6IGZ1bmN0aW9uICggdkZyb20sIHZUbyApIHsKCgkJCS8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZAoKCQkJdmFyIEVQUyA9IDAuMDAwMDAxOwoKCQkJdmFyIHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTsKCgkJCWlmICggciA8IEVQUyApIHsKCgkJCQlyID0gMDsKCgkJCQlpZiAoIE1hdGguYWJzKCB2RnJvbS54ICkgPiBNYXRoLmFicyggdkZyb20ueiApICkgewoKCQkJCQl0aGlzLl94ID0gLSB2RnJvbS55OwoJCQkJCXRoaXMuX3kgPSB2RnJvbS54OwoJCQkJCXRoaXMuX3ogPSAwOwoJCQkJCXRoaXMuX3cgPSByOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRoaXMuX3ggPSAwOwoJCQkJCXRoaXMuX3kgPSAtIHZGcm9tLno7CgkJCQkJdGhpcy5feiA9IHZGcm9tLnk7CgkJCQkJdGhpcy5fdyA9IHI7CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQkvLyBjcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTsgLy8gaW5saW5lZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeSBvbiBWZWN0b3IzCgoJCQkJdGhpcy5feCA9IHZGcm9tLnkgKiB2VG8ueiAtIHZGcm9tLnogKiB2VG8ueTsKCQkJCXRoaXMuX3kgPSB2RnJvbS56ICogdlRvLnggLSB2RnJvbS54ICogdlRvLno7CgkJCQl0aGlzLl96ID0gdkZyb20ueCAqIHZUby55IC0gdkZyb20ueSAqIHZUby54OwoJCQkJdGhpcy5fdyA9IHI7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTsKCgkJfSwKCgkJYW5nbGVUbzogZnVuY3Rpb24gKCBxICkgewoKCQkJcmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBfTWF0aC5jbGFtcCggdGhpcy5kb3QoIHEgKSwgLSAxLCAxICkgKSApOwoKCQl9LAoKCQlyb3RhdGVUb3dhcmRzOiBmdW5jdGlvbiAoIHEsIHN0ZXAgKSB7CgoJCQl2YXIgYW5nbGUgPSB0aGlzLmFuZ2xlVG8oIHEgKTsKCgkJCWlmICggYW5nbGUgPT09IDAgKSB7IHJldHVybiB0aGlzOyB9CgoJCQl2YXIgdCA9IE1hdGgubWluKCAxLCBzdGVwIC8gYW5nbGUgKTsKCgkJCXRoaXMuc2xlcnAoIHEsIHQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlpbnZlcnNlOiBmdW5jdGlvbiAoKSB7CgoJCQkvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aAoKCQkJcmV0dXJuIHRoaXMuY29uanVnYXRlKCk7CgoJCX0sCgoJCWNvbmp1Z2F0ZTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5feCAqPSAtIDE7CgkJCXRoaXMuX3kgKj0gLSAxOwoJCQl0aGlzLl96ICo9IC0gMTsKCgkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkb3Q6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdzsKCgkJfSwKCgkJbGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdzsKCgkJfSwKCgkJbGVuZ3RoOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdyApOwoKCQl9LAoKCQlub3JtYWxpemU6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBsID0gdGhpcy5sZW5ndGgoKTsKCgkJCWlmICggbCA9PT0gMCApIHsKCgkJCQl0aGlzLl94ID0gMDsKCQkJCXRoaXMuX3kgPSAwOwoJCQkJdGhpcy5feiA9IDA7CgkJCQl0aGlzLl93ID0gMTsKCgkJCX0gZWxzZSB7CgoJCQkJbCA9IDEgLyBsOwoKCQkJCXRoaXMuX3ggPSB0aGlzLl94ICogbDsKCQkJCXRoaXMuX3kgPSB0aGlzLl95ICogbDsKCQkJCXRoaXMuX3ogPSB0aGlzLl96ICogbDsKCQkJCXRoaXMuX3cgPSB0aGlzLl93ICogbDsKCgkJCX0KCgkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseTogZnVuY3Rpb24gKCBxLCBwICkgewoKCQkJaWYgKCBwICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgcCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApOwoKCQl9LAoKCQlwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBxICkgewoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApOwoKCQl9LAoKCQltdWx0aXBseVF1YXRlcm5pb25zOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQkvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG0KCgkJCXZhciBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93OwoJCQl2YXIgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdzsKCgkJCXRoaXMuX3ggPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7CgkJCXRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7CgkJCXRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7CgkJCXRoaXMuX3cgPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7CgoJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2xlcnA6IGZ1bmN0aW9uICggcWIsIHQgKSB7CgoJCQlpZiAoIHQgPT09IDAgKSB7IHJldHVybiB0aGlzOyB9CgkJCWlmICggdCA9PT0gMSApIHsgcmV0dXJuIHRoaXMuY29weSggcWIgKTsgfQoKCQkJdmFyIHggPSB0aGlzLl94LCB5ID0gdGhpcy5feSwgeiA9IHRoaXMuX3osIHcgPSB0aGlzLl93OwoKCQkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9zbGVycC8KCgkJCXZhciBjb3NIYWxmVGhldGEgPSB3ICogcWIuX3cgKyB4ICogcWIuX3ggKyB5ICogcWIuX3kgKyB6ICogcWIuX3o7CgoJCQlpZiAoIGNvc0hhbGZUaGV0YSA8IDAgKSB7CgoJCQkJdGhpcy5fdyA9IC0gcWIuX3c7CgkJCQl0aGlzLl94ID0gLSBxYi5feDsKCQkJCXRoaXMuX3kgPSAtIHFiLl95OwoJCQkJdGhpcy5feiA9IC0gcWIuX3o7CgoJCQkJY29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMuY29weSggcWIgKTsKCgkJCX0KCgkJCWlmICggY29zSGFsZlRoZXRhID49IDEuMCApIHsKCgkJCQl0aGlzLl93ID0gdzsKCQkJCXRoaXMuX3ggPSB4OwoJCQkJdGhpcy5feSA9IHk7CgkJCQl0aGlzLl96ID0gejsKCgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCgkJCXZhciBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7CgoJCQlpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCQl2YXIgcyA9IDEgLSB0OwoJCQkJdGhpcy5fdyA9IHMgKiB3ICsgdCAqIHRoaXMuX3c7CgkJCQl0aGlzLl94ID0gcyAqIHggKyB0ICogdGhpcy5feDsKCQkJCXRoaXMuX3kgPSBzICogeSArIHQgKiB0aGlzLl95OwoJCQkJdGhpcy5feiA9IHMgKiB6ICsgdCAqIHRoaXMuX3o7CgoJCQkJdGhpcy5ub3JtYWxpemUoKTsKCQkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsKCgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCgkJCXZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApOwoJCQl2YXIgaGFsZlRoZXRhID0gTWF0aC5hdGFuMiggc2luSGFsZlRoZXRhLCBjb3NIYWxmVGhldGEgKTsKCQkJdmFyIHJhdGlvQSA9IE1hdGguc2luKCAoIDEgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YSwKCQkJCXJhdGlvQiA9IE1hdGguc2luKCB0ICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGE7CgoJCQl0aGlzLl93ID0gKCB3ICogcmF0aW9BICsgdGhpcy5fdyAqIHJhdGlvQiApOwoJCQl0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApOwoJCQl0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApOwoJCQl0aGlzLl96ID0gKCB6ICogcmF0aW9BICsgdGhpcy5feiAqIHJhdGlvQiApOwoKCQkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVxdWFsczogZnVuY3Rpb24gKCBxdWF0ZXJuaW9uICkgewoKCQkJcmV0dXJuICggcXVhdGVybmlvbi5feCA9PT0gdGhpcy5feCApICYmICggcXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSApICYmICggcXVhdGVybmlvbi5feiA9PT0gdGhpcy5feiApICYmICggcXVhdGVybmlvbi5fdyA9PT0gdGhpcy5fdyApOwoKCQl9LAoKCQlmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHsKCgkJCWlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG9mZnNldCA9IDA7IH0KCgkJCXRoaXMuX3ggPSBhcnJheVsgb2Zmc2V0IF07CgkJCXRoaXMuX3kgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwoJCQl0aGlzLl96ID0gYXJyYXlbIG9mZnNldCArIDIgXTsKCQkJdGhpcy5fdyA9IGFycmF5WyBvZmZzZXQgKyAzIF07CgoJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgeyBhcnJheSA9IFtdOyB9CgkJCWlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG9mZnNldCA9IDA7IH0KCgkJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7CgkJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95OwoJCQlhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejsKCQkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX3c7CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0sCgoJCV9vbkNoYW5nZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHsKCgkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjazsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlfb25DaGFuZ2VDYWxsYmFjazogZnVuY3Rpb24gKCkge30KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBraWxlIC8gaHR0cDovL2tpbGUuc3RyYXZhZ2FuemEub3JnLwoJICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy8KCSAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvCgkgKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKi8KCgl2YXIgX3ZlY3RvciA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3F1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpOwoKCWZ1bmN0aW9uIFZlY3RvcjMoIHgsIHksIHogKSB7CgoJCXRoaXMueCA9IHggfHwgMDsKCQl0aGlzLnkgPSB5IHx8IDA7CgkJdGhpcy56ID0geiB8fCAwOwoKCX0KCglPYmplY3QuYXNzaWduKCBWZWN0b3IzLnByb3RvdHlwZSwgewoKCQlpc1ZlY3RvcjM6IHRydWUsCgoJCXNldDogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJdGhpcy54ID0geDsKCQkJdGhpcy55ID0geTsKCQkJdGhpcy56ID0gejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkgewoKCQkJdGhpcy54ID0gc2NhbGFyOwoJCQl0aGlzLnkgPSBzY2FsYXI7CgkJCXRoaXMueiA9IHNjYWxhcjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRYOiBmdW5jdGlvbiAoIHggKSB7CgoJCQl0aGlzLnggPSB4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFk6IGZ1bmN0aW9uICggeSApIHsKCgkJCXRoaXMueSA9IHk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0WjogZnVuY3Rpb24gKCB6ICkgewoKCQkJdGhpcy56ID0gejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkgewoKCQkJc3dpdGNoICggaW5kZXggKSB7CgoJCQkJY2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7CgkJCQljYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhazsKCQkJCWNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrOwoJCQkJZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQlzd2l0Y2ggKCBpbmRleCApIHsKCgkJCQljYXNlIDA6IHJldHVybiB0aGlzLng7CgkJCQljYXNlIDE6IHJldHVybiB0aGlzLnk7CgkJCQljYXNlIDI6IHJldHVybiB0aGlzLno7CgkJCQlkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApOwoKCQkJfQoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggdiApIHsKCgkJCXRoaXMueCA9IHYueDsKCQkJdGhpcy55ID0gdi55OwoJCQl0aGlzLnogPSB2Lno7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7CgoJCQlpZiAoIHcgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApOwoKCQkJfQoKCQkJdGhpcy54ICs9IHYueDsKCQkJdGhpcy55ICs9IHYueTsKCQkJdGhpcy56ICs9IHYuejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXRoaXMueCArPSBzOwoJCQl0aGlzLnkgKz0gczsKCQkJdGhpcy56ICs9IHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkgewoKCQkJdGhpcy54ID0gYS54ICsgYi54OwoJCQl0aGlzLnkgPSBhLnkgKyBiLnk7CgkJCXRoaXMueiA9IGEueiArIGIuejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRTY2FsZWRWZWN0b3I6IGZ1bmN0aW9uICggdiwgcyApIHsKCgkJCXRoaXMueCArPSB2LnggKiBzOwoJCQl0aGlzLnkgKz0gdi55ICogczsKCQkJdGhpcy56ICs9IHYueiAqIHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7CgoJCQlpZiAoIHcgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApOwoKCQkJfQoKCQkJdGhpcy54IC09IHYueDsKCQkJdGhpcy55IC09IHYueTsKCQkJdGhpcy56IC09IHYuejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXRoaXMueCAtPSBzOwoJCQl0aGlzLnkgLT0gczsKCQkJdGhpcy56IC09IHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkgewoKCQkJdGhpcy54ID0gYS54IC0gYi54OwoJCQl0aGlzLnkgPSBhLnkgLSBiLnk7CgkJCXRoaXMueiA9IGEueiAtIGIuejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseTogZnVuY3Rpb24gKCB2LCB3ICkgewoKCQkJaWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpcy5tdWx0aXBseVZlY3RvcnMoIHYsIHcgKTsKCgkJCX0KCgkJCXRoaXMueCAqPSB2Lng7CgkJCXRoaXMueSAqPSB2Lnk7CgkJCXRoaXMueiAqPSB2Lno7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkgewoKCQkJdGhpcy54ICo9IHNjYWxhcjsKCQkJdGhpcy55ICo9IHNjYWxhcjsKCQkJdGhpcy56ICo9IHNjYWxhcjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseVZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHsKCgkJCXRoaXMueCA9IGEueCAqIGIueDsKCQkJdGhpcy55ID0gYS55ICogYi55OwoJCQl0aGlzLnogPSBhLnogKiBiLno7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlFdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHsKCgkJCWlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5RXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApICk7CgoJCX0sCgoJCWFwcGx5QXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkgewoKCQkJcmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7CgoJCX0sCgoJCWFwcGx5TWF0cml4MzogZnVuY3Rpb24gKCBtICkgewoKCQkJdmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7CgkJCXZhciBlID0gbS5lbGVtZW50czsKCgkJCXRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejsKCQkJdGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF0gKiB6OwoJCQl0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDggXSAqIHo7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlOb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbSApIHsKCgkJCXJldHVybiB0aGlzLmFwcGx5TWF0cml4MyggbSApLm5vcm1hbGl6ZSgpOwoKCQl9LAoKCQlhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHsKCgkJCXZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56OwoJCQl2YXIgZSA9IG0uZWxlbWVudHM7CgoJCQl2YXIgdyA9IDEgLyAoIGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICk7CgoJCQl0aGlzLnggPSAoIGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKSAqIHc7CgkJCXRoaXMueSA9ICggZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSApICogdzsKCQkJdGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdzsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHsKCgkJCXZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56OwoJCQl2YXIgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7CgoJCQkvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvcgoKCQkJdmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5OwoJCQl2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7CgkJCXZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDsKCQkJdmFyIGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7CgoJCQkvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0CgoJCQl0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5OwoJCQl0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtIHF5ICsgaXogKiAtIHF4IC0gaXggKiAtIHF6OwoJCQl0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtIHF6ICsgaXggKiAtIHF5IC0gaXkgKiAtIHF4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXByb2plY3Q6IGZ1bmN0aW9uICggY2FtZXJhICkgewoKCQkJcmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApOwoKCQl9LAoKCQl1bnByb2plY3Q6IGZ1bmN0aW9uICggY2FtZXJhICkgewoKCQkJcmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZCApOwoKCQl9LAoKCQl0cmFuc2Zvcm1EaXJlY3Rpb246IGZ1bmN0aW9uICggbSApIHsKCgkJCS8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXgKCQkJLy8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uCgoJCQl2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejsKCQkJdmFyIGUgPSBtLmVsZW1lbnRzOwoKCQkJdGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6OwoJCQl0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHo7CgkJCXRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHo7CgoJCQlyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTsKCgkJfSwKCgkJZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQl0aGlzLnggLz0gdi54OwoJCQl0aGlzLnkgLz0gdi55OwoJCQl0aGlzLnogLz0gdi56OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7CgoJCQlyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApOwoKCQl9LAoKCQltaW46IGZ1bmN0aW9uICggdiApIHsKCgkJCXRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApOwoJCQl0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTsKCQkJdGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWF4OiBmdW5jdGlvbiAoIHYgKSB7CgoJCQl0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTsKCQkJdGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7CgkJCXRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkgewoKCQkJLy8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2UKCgkJCXRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApOwoJCQl0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTsKCQkJdGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xhbXBTY2FsYXI6IGZ1bmN0aW9uICggbWluVmFsLCBtYXhWYWwgKSB7CgoJCQl0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApOwoJCQl0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApOwoJCQl0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkgewoKCQkJdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7CgoJCQlyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTsKCgkJfSwKCgkJZmxvb3I6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApOwoJCQl0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTsKCQkJdGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2VpbDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTsKCQkJdGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTsKCQkJdGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3VuZDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7CgkJCXRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApOwoJCQl0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7CgkJCXRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApOwoJCQl0aGlzLnogPSAoIHRoaXMueiA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQluZWdhdGU6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMueCA9IC0gdGhpcy54OwoJCQl0aGlzLnkgPSAtIHRoaXMueTsKCQkJdGhpcy56ID0gLSB0aGlzLno7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZG90OiBmdW5jdGlvbiAoIHYgKSB7CgoJCQlyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56OwoKCQl9LAoKCQkvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/CgoJCWxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56OwoKCQl9LAoKCQlsZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApOwoKCQl9LAoKCQltYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICk7CgoJCX0sCgoJCW5vcm1hbGl6ZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTsKCgkJfSwKCgkJc2V0TGVuZ3RoOiBmdW5jdGlvbiAoIGxlbmd0aCApIHsKCgkJCXJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTsKCgkJfSwKCgkJbGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHsKCgkJCXRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7CgkJCXRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7CgkJCXRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHsKCgkJCXJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTsKCgkJfSwKCgkJY3Jvc3M6IGZ1bmN0aW9uICggdiwgdyApIHsKCgkJCWlmICggdyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB2LCB3ICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHRoaXMsIHYgKTsKCgkJfSwKCgkJY3Jvc3NWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQl2YXIgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejsKCQkJdmFyIGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7CgoJCQl0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTsKCQkJdGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7CgkJCXRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXByb2plY3RPblZlY3RvcjogZnVuY3Rpb24gKCB2ICkgewoKCQkJLy8gdiBjYW5ub3QgYmUgdGhlIHplcm8gdgoKCQkJdmFyIHNjYWxhciA9IHYuZG90KCB0aGlzICkgLyB2Lmxlbmd0aFNxKCk7CgoJCQlyZXR1cm4gdGhpcy5jb3B5KCB2ICkubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApOwoKCQl9LAoKCQlwcm9qZWN0T25QbGFuZTogZnVuY3Rpb24gKCBwbGFuZU5vcm1hbCApIHsKCgkJCV92ZWN0b3IuY29weSggdGhpcyApLnByb2plY3RPblZlY3RvciggcGxhbmVOb3JtYWwgKTsKCgkJCXJldHVybiB0aGlzLnN1YiggX3ZlY3RvciApOwoKCQl9LAoKCQlyZWZsZWN0OiBmdW5jdGlvbiAoIG5vcm1hbCApIHsKCgkJCS8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbAoJCQkvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoCgoJCQlyZXR1cm4gdGhpcy5zdWIoIF92ZWN0b3IuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApOwoKCQl9LAoKCQlhbmdsZVRvOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQl2YXIgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApOwoKCQkJaWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHsgY29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IGFuZ2xlVG8oKSBjYW5cJ3QgaGFuZGxlIHplcm8gbGVuZ3RoIHZlY3RvcnMuJyApOyB9CgoJCQl2YXIgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gZGVub21pbmF0b3I7CgoJCQkvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtcwoKCQkJcmV0dXJuIE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRoZXRhLCAtIDEsIDEgKSApOwoKCQl9LAoKCQlkaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTsKCgkJfSwKCgkJZGlzdGFuY2VUb1NxdWFyZWQ6IGZ1bmN0aW9uICggdiApIHsKCgkJCXZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56OwoKCQkJcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejsKCgkJfSwKCgkJbWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkgewoKCQkJcmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTsKCgkJfSwKCgkJc2V0RnJvbVNwaGVyaWNhbDogZnVuY3Rpb24gKCBzICkgewoKCQkJcmV0dXJuIHRoaXMuc2V0RnJvbVNwaGVyaWNhbENvb3Jkcyggcy5yYWRpdXMsIHMucGhpLCBzLnRoZXRhICk7CgoJCX0sCgoJCXNldEZyb21TcGhlcmljYWxDb29yZHM6IGZ1bmN0aW9uICggcmFkaXVzLCBwaGksIHRoZXRhICkgewoKCQkJdmFyIHNpblBoaVJhZGl1cyA9IE1hdGguc2luKCBwaGkgKSAqIHJhZGl1czsKCgkJCXRoaXMueCA9IHNpblBoaVJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApOwoJCQl0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7CgkJCXRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21DeWxpbmRyaWNhbDogZnVuY3Rpb24gKCBjICkgewoKCQkJcmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7CgoJCX0sCgoJCXNldEZyb21DeWxpbmRyaWNhbENvb3JkczogZnVuY3Rpb24gKCByYWRpdXMsIHRoZXRhLCB5ICkgewoKCQkJdGhpcy54ID0gcmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7CgkJCXRoaXMueSA9IHk7CgkJCXRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21NYXRyaXhQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkgewoKCQkJdmFyIGUgPSBtLmVsZW1lbnRzOwoKCQkJdGhpcy54ID0gZVsgMTIgXTsKCQkJdGhpcy55ID0gZVsgMTMgXTsKCQkJdGhpcy56ID0gZVsgMTQgXTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tTWF0cml4U2NhbGU6IGZ1bmN0aW9uICggbSApIHsKCgkJCXZhciBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpOwoJCQl2YXIgc3kgPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTsKCQkJdmFyIHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7CgoJCQl0aGlzLnggPSBzeDsKCQkJdGhpcy55ID0gc3k7CgkJCXRoaXMueiA9IHN6OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21NYXRyaXhDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7CgoJCQlyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApOwoKCQl9LAoKCQllcXVhbHM6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7CgoJCX0sCgoJCWZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdGhpcy54ID0gYXJyYXlbIG9mZnNldCBdOwoJCQl0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwoJCQl0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHsKCgkJCWlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIHsgYXJyYXkgPSBbXTsgfQoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgeyBvZmZzZXQgPSAwOyB9CgoJCQlhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7CgkJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7CgkJCWFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0sCgoJCWZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApOwoKCQkJfQoKCQkJdGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7CgkJCXRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApOwoJCQl0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICogQGF1dGhvciB0c2NodwoJICovCgoJdmFyIF92ZWN0b3IkMSA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gTWF0cml4MygpIHsKCgkJdGhpcy5lbGVtZW50cyA9IFsKCgkJCTEsIDAsIDAsCgkJCTAsIDEsIDAsCgkJCTAsIDAsIDEKCgkJXTsKCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLicgKTsKCgkJfQoKCX0KCglPYmplY3QuYXNzaWduKCBNYXRyaXgzLnByb3RvdHlwZSwgewoKCQlpc01hdHJpeDM6IHRydWUsCgoJCXNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCgkJCXRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7CgkJCXRlWyAzIF0gPSBuMTI7IHRlWyA0IF0gPSBuMjI7IHRlWyA1IF0gPSBuMzI7CgkJCXRlWyA2IF0gPSBuMTM7IHRlWyA3IF0gPSBuMjM7IHRlWyA4IF0gPSBuMzM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJaWRlbnRpdHk6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuc2V0KAoKCQkJCTEsIDAsIDAsCgkJCQkwLCAxLCAwLAoJCQkJMCwgMCwgMQoKCQkJKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggbSApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgkJCXZhciBtZSA9IG0uZWxlbWVudHM7CgoJCQl0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdOwoJCQl0ZVsgMyBdID0gbWVbIDMgXTsgdGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdOwoJCQl0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07IHRlWyA4IF0gPSBtZVsgOCBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21NYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7CgoJCQl2YXIgbWUgPSBtLmVsZW1lbnRzOwoKCQkJdGhpcy5zZXQoCgoJCQkJbWVbIDAgXSwgbWVbIDQgXSwgbWVbIDggXSwKCQkJCW1lWyAxIF0sIG1lWyA1IF0sIG1lWyA5IF0sCgkJCQltZVsgMiBdLCBtZVsgNiBdLCBtZVsgMTAgXQoKCQkJKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhcHBseVRvQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJX3ZlY3RvciQxLnggPSBhdHRyaWJ1dGUuZ2V0WCggaSApOwoJCQkJX3ZlY3RvciQxLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApOwoJCQkJX3ZlY3RvciQxLnogPSBhdHRyaWJ1dGUuZ2V0WiggaSApOwoKCQkJCV92ZWN0b3IkMS5hcHBseU1hdHJpeDMoIHRoaXMgKTsKCgkJCQlhdHRyaWJ1dGUuc2V0WFlaKCBpLCBfdmVjdG9yJDEueCwgX3ZlY3RvciQxLnksIF92ZWN0b3IkMS56ICk7CgoJCQl9CgoJCQlyZXR1cm4gYXR0cmlidXRlOwoKCQl9LAoKCQltdWx0aXBseTogZnVuY3Rpb24gKCBtICkgewoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApOwoKCQl9LAoKCQlwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkgewoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApOwoKCQl9LAoKCQltdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQl2YXIgYWUgPSBhLmVsZW1lbnRzOwoJCQl2YXIgYmUgPSBiLmVsZW1lbnRzOwoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdmFyIGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyAzIF0sIGExMyA9IGFlWyA2IF07CgkJCXZhciBhMjEgPSBhZVsgMSBdLCBhMjIgPSBhZVsgNCBdLCBhMjMgPSBhZVsgNyBdOwoJCQl2YXIgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTsKCgkJCXZhciBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgMyBdLCBiMTMgPSBiZVsgNiBdOwoJCQl2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTsKCQkJdmFyIGIzMSA9IGJlWyAyIF0sIGIzMiA9IGJlWyA1IF0sIGIzMyA9IGJlWyA4IF07CgoJCQl0ZVsgMCBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxOwoJCQl0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyOwoJCQl0ZVsgNiBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzOwoKCQkJdGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTsKCQkJdGVbIDQgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMjsKCQkJdGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMzsKCgkJCXRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7CgkJCXRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7CgkJCXRlWyA4IF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl0ZVsgMCBdICo9IHM7IHRlWyAzIF0gKj0gczsgdGVbIDYgXSAqPSBzOwoJCQl0ZVsgMSBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDcgXSAqPSBzOwoJCQl0ZVsgMiBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDggXSAqPSBzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWRldGVybWluYW50OiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdmFyIGEgPSB0ZVsgMCBdLCBiID0gdGVbIDEgXSwgYyA9IHRlWyAyIF0sCgkJCQlkID0gdGVbIDMgXSwgZSA9IHRlWyA0IF0sIGYgPSB0ZVsgNSBdLAoJCQkJZyA9IHRlWyA2IF0sIGggPSB0ZVsgNyBdLCBpID0gdGVbIDggXTsKCgkJCXJldHVybiBhICogZSAqIGkgLSBhICogZiAqIGggLSBiICogZCAqIGkgKyBiICogZiAqIGcgKyBjICogZCAqIGggLSBjICogZSAqIGc7CgoJCX0sCgoJCWdldEludmVyc2U6IGZ1bmN0aW9uICggbWF0cml4LCB0aHJvd09uRGVnZW5lcmF0ZSApIHsKCgkJCWlmICggbWF0cml4ICYmIG1hdHJpeC5pc01hdHJpeDQgKSB7CgoJCQkJY29uc29sZS5lcnJvciggIlRIUkVFLk1hdHJpeDM6IC5nZXRJbnZlcnNlKCkgbm8gbG9uZ2VyIHRha2VzIGEgTWF0cml4NCBhcmd1bWVudC4iICk7CgoJCQl9CgoJCQl2YXIgbWUgPSBtYXRyaXguZWxlbWVudHMsCgkJCQl0ZSA9IHRoaXMuZWxlbWVudHMsCgoJCQkJbjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSwKCQkJCW4xMiA9IG1lWyAzIF0sIG4yMiA9IG1lWyA0IF0sIG4zMiA9IG1lWyA1IF0sCgkJCQluMTMgPSBtZVsgNiBdLCBuMjMgPSBtZVsgNyBdLCBuMzMgPSBtZVsgOCBdLAoKCQkJCXQxMSA9IG4zMyAqIG4yMiAtIG4zMiAqIG4yMywKCQkJCXQxMiA9IG4zMiAqIG4xMyAtIG4zMyAqIG4xMiwKCQkJCXQxMyA9IG4yMyAqIG4xMiAtIG4yMiAqIG4xMywKCgkJCQlkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7CgoJCQlpZiAoIGRldCA9PT0gMCApIHsKCgkJCQl2YXIgbXNnID0gIlRIUkVFLk1hdHJpeDM6IC5nZXRJbnZlcnNlKCkgY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMCI7CgoJCQkJaWYgKCB0aHJvd09uRGVnZW5lcmF0ZSA9PT0gdHJ1ZSApIHsKCgkJCQkJdGhyb3cgbmV3IEVycm9yKCBtc2cgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQljb25zb2xlLndhcm4oIG1zZyApOwoKCQkJCX0KCgkJCQlyZXR1cm4gdGhpcy5pZGVudGl0eSgpOwoKCQkJfQoKCQkJdmFyIGRldEludiA9IDEgLyBkZXQ7CgoJCQl0ZVsgMCBdID0gdDExICogZGV0SW52OwoJCQl0ZVsgMSBdID0gKCBuMzEgKiBuMjMgLSBuMzMgKiBuMjEgKSAqIGRldEludjsKCQkJdGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7CgoJCQl0ZVsgMyBdID0gdDEyICogZGV0SW52OwoJCQl0ZVsgNCBdID0gKCBuMzMgKiBuMTEgLSBuMzEgKiBuMTMgKSAqIGRldEludjsKCQkJdGVbIDUgXSA9ICggbjMxICogbjEyIC0gbjMyICogbjExICkgKiBkZXRJbnY7CgoJCQl0ZVsgNiBdID0gdDEzICogZGV0SW52OwoJCQl0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjsKCQkJdGVbIDggXSA9ICggbjIyICogbjExIC0gbjIxICogbjEyICkgKiBkZXRJbnY7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdG1wLCBtID0gdGhpcy5lbGVtZW50czsKCgkJCXRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7CgkJCXRtcCA9IG1bIDIgXTsgbVsgMiBdID0gbVsgNiBdOyBtWyA2IF0gPSB0bXA7CgkJCXRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0Tm9ybWFsTWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeDQgKSB7CgoJCQlyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4NCggbWF0cml4NCApLmdldEludmVyc2UoIHRoaXMgKS50cmFuc3Bvc2UoKTsKCgkJfSwKCgkJdHJhbnNwb3NlSW50b0FycmF5OiBmdW5jdGlvbiAoIHIgKSB7CgoJCQl2YXIgbSA9IHRoaXMuZWxlbWVudHM7CgoJCQlyWyAwIF0gPSBtWyAwIF07CgkJCXJbIDEgXSA9IG1bIDMgXTsKCQkJclsgMiBdID0gbVsgNiBdOwoJCQlyWyAzIF0gPSBtWyAxIF07CgkJCXJbIDQgXSA9IG1bIDQgXTsKCQkJclsgNSBdID0gbVsgNyBdOwoJCQlyWyA2IF0gPSBtWyAyIF07CgkJCXJbIDcgXSA9IG1bIDUgXTsKCQkJclsgOCBdID0gbVsgOCBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFV2VHJhbnNmb3JtOiBmdW5jdGlvbiAoIHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5ICkgewoKCQkJdmFyIGMgPSBNYXRoLmNvcyggcm90YXRpb24gKTsKCQkJdmFyIHMgPSBNYXRoLnNpbiggcm90YXRpb24gKTsKCgkJCXRoaXMuc2V0KAoJCQkJc3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoIGMgKiBjeCArIHMgKiBjeSApICsgY3ggKyB0eCwKCQkJCS0gc3kgKiBzLCBzeSAqIGMsIC0gc3kgKiAoIC0gcyAqIGN4ICsgYyAqIGN5ICkgKyBjeSArIHR5LAoJCQkJMCwgMCwgMQoJCQkpOwoKCQl9LAoKCQlzY2FsZTogZnVuY3Rpb24gKCBzeCwgc3kgKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdGVbIDAgXSAqPSBzeDsgdGVbIDMgXSAqPSBzeDsgdGVbIDYgXSAqPSBzeDsKCQkJdGVbIDEgXSAqPSBzeTsgdGVbIDQgXSAqPSBzeTsgdGVbIDcgXSAqPSBzeTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3RhdGU6IGZ1bmN0aW9uICggdGhldGEgKSB7CgoJCQl2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApOwoJCQl2YXIgcyA9IE1hdGguc2luKCB0aGV0YSApOwoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCgkJCXZhciBhMTEgPSB0ZVsgMCBdLCBhMTIgPSB0ZVsgMyBdLCBhMTMgPSB0ZVsgNiBdOwoJCQl2YXIgYTIxID0gdGVbIDEgXSwgYTIyID0gdGVbIDQgXSwgYTIzID0gdGVbIDcgXTsKCgkJCXRlWyAwIF0gPSBjICogYTExICsgcyAqIGEyMTsKCQkJdGVbIDMgXSA9IGMgKiBhMTIgKyBzICogYTIyOwoJCQl0ZVsgNiBdID0gYyAqIGExMyArIHMgKiBhMjM7CgoJCQl0ZVsgMSBdID0gLSBzICogYTExICsgYyAqIGEyMTsKCQkJdGVbIDQgXSA9IC0gcyAqIGExMiArIGMgKiBhMjI7CgkJCXRlWyA3IF0gPSAtIHMgKiBhMTMgKyBjICogYTIzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRyYW5zbGF0ZTogZnVuY3Rpb24gKCB0eCwgdHkgKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdGVbIDAgXSArPSB0eCAqIHRlWyAyIF07IHRlWyAzIF0gKz0gdHggKiB0ZVsgNSBdOyB0ZVsgNiBdICs9IHR4ICogdGVbIDggXTsKCQkJdGVbIDEgXSArPSB0eSAqIHRlWyAyIF07IHRlWyA0IF0gKz0gdHkgKiB0ZVsgNSBdOyB0ZVsgNyBdICs9IHR5ICogdGVbIDggXTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQllcXVhbHM6IGZ1bmN0aW9uICggbWF0cml4ICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCQkJdmFyIG1lID0gbWF0cml4LmVsZW1lbnRzOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQlpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSB7IHJldHVybiBmYWxzZTsgfQoKCQkJfQoKCQkJcmV0dXJuIHRydWU7CgoJCX0sCgoJCWZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQl0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHsKCgkJCWlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIHsgYXJyYXkgPSBbXTsgfQoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgeyBvZmZzZXQgPSAwOyB9CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJYXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTsKCQkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07CgkJCWFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdOwoKCQkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07CgkJCWFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdOwoJCQlhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTsKCgkJCWFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdOwoJCQlhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTsKCQkJYXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay8KCSAqLwoKCXZhciBfY2FudmFzOwoKCXZhciBJbWFnZVV0aWxzID0gewoKCQlnZXREYXRhVVJMOiBmdW5jdGlvbiAoIGltYWdlICkgewoKCQkJdmFyIGNhbnZhczsKCgkJCWlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09ICd1bmRlZmluZWQnICkgewoKCQkJCXJldHVybiBpbWFnZS5zcmM7CgoJCQl9IGVsc2UgaWYgKCBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgewoKCQkJCWNhbnZhcyA9IGltYWdlOwoKCQkJfSBlbHNlIHsKCgkJCQlpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIHsgX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApOyB9CgoJCQkJX2NhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoOwoJCQkJX2NhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7CgoJCQkJdmFyIGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoICcyZCcgKTsKCgkJCQlpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkgewoKCQkJCQljb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2UsIDAsIDAgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQljb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCgkJCQl9CgoJCQkJY2FudmFzID0gX2NhbnZhczsKCgkJCX0KCgkJCWlmICggY2FudmFzLndpZHRoID4gMjA0OCB8fCBjYW52YXMuaGVpZ2h0ID4gMjA0OCApIHsKCgkJCQlyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggJ2ltYWdlL2pwZWcnLCAwLjYgKTsKCgkJCX0gZWxzZSB7CgoJCQkJcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9wbmcnICk7CgoJCQl9CgoJCX0KCgl9OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvCgkgKi8KCgl2YXIgdGV4dHVyZUlkID0gMDsKCglmdW5jdGlvbiBUZXh0dXJlKCBpbWFnZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHsKCgkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiB0ZXh0dXJlSWQgKysgfSApOwoKCQl0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsKCgkJdGhpcy5uYW1lID0gJyc7CgoJCXRoaXMuaW1hZ2UgPSBpbWFnZSAhPT0gdW5kZWZpbmVkID8gaW1hZ2UgOiBUZXh0dXJlLkRFRkFVTFRfSU1BR0U7CgkJdGhpcy5taXBtYXBzID0gW107CgoJCXRoaXMubWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBUZXh0dXJlLkRFRkFVTFRfTUFQUElORzsKCgkJdGhpcy53cmFwUyA9IHdyYXBTICE9PSB1bmRlZmluZWQgPyB3cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7CgkJdGhpcy53cmFwVCA9IHdyYXBUICE9PSB1bmRlZmluZWQgPyB3cmFwVCA6IENsYW1wVG9FZGdlV3JhcHBpbmc7CgoJCXRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7CgkJdGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjsKCgkJdGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gYW5pc290cm9weSA6IDE7CgoJCXRoaXMuZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBSR0JBRm9ybWF0OwoJCXRoaXMudHlwZSA9IHR5cGUgIT09IHVuZGVmaW5lZCA/IHR5cGUgOiBVbnNpZ25lZEJ5dGVUeXBlOwoKCQl0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7CgkJdGhpcy5yZXBlYXQgPSBuZXcgVmVjdG9yMiggMSwgMSApOwoJCXRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAsIDAgKTsKCQl0aGlzLnJvdGF0aW9uID0gMDsKCgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTsKCQl0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7CgoJCXRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTsKCQl0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTsKCQl0aGlzLmZsaXBZID0gdHJ1ZTsKCQl0aGlzLnVucGFja0FsaWdubWVudCA9IDQ7CS8vIHZhbGlkIHZhbHVlczogMSwgMiwgNCwgOCAoc2VlIGh0dHA6Ly93d3cua2hyb25vcy5vcmcvb3BlbmdsZXMvc2RrL2RvY3MvbWFuL3hodG1sL2dsUGl4ZWxTdG9yZWkueG1sKQoKCQkvLyBWYWx1ZXMgb2YgZW5jb2RpbmcgIT09IFRIUkVFLkxpbmVhckVuY29kaW5nIG9ubHkgc3VwcG9ydGVkIG9uIG1hcCwgZW52TWFwIGFuZCBlbWlzc2l2ZU1hcC4KCQkvLwoJCS8vIEFsc28gY2hhbmdpbmcgdGhlIGVuY29kaW5nIGFmdGVyIGFscmVhZHkgdXNlZCBieSBhIE1hdGVyaWFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgbWFrZSB0aGUgTWF0ZXJpYWwKCQkvLyB1cGRhdGUuIFlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBNYXRlcmlhbC5uZWVkc1VwZGF0ZSB0byB0cmlnZ2VyIGl0IHRvIHJlY29tcGlsZS4KCQl0aGlzLmVuY29kaW5nID0gZW5jb2RpbmcgIT09IHVuZGVmaW5lZCA/IGVuY29kaW5nIDogTGluZWFyRW5jb2Rpbmc7CgoJCXRoaXMudmVyc2lvbiA9IDA7CgkJdGhpcy5vblVwZGF0ZSA9IG51bGw7CgoJfQoKCVRleHR1cmUuREVGQVVMVF9JTUFHRSA9IHVuZGVmaW5lZDsKCVRleHR1cmUuREVGQVVMVF9NQVBQSU5HID0gVVZNYXBwaW5nOwoKCVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBUZXh0dXJlLAoKCQlpc1RleHR1cmU6IHRydWUsCgoJCXVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnksIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnksIHRoaXMucm90YXRpb24sIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgKTsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQl0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTsKCgkJCXRoaXMuaW1hZ2UgPSBzb3VyY2UuaW1hZ2U7CgkJCXRoaXMubWlwbWFwcyA9IHNvdXJjZS5taXBtYXBzLnNsaWNlKCAwICk7CgoJCQl0aGlzLm1hcHBpbmcgPSBzb3VyY2UubWFwcGluZzsKCgkJCXRoaXMud3JhcFMgPSBzb3VyY2Uud3JhcFM7CgkJCXRoaXMud3JhcFQgPSBzb3VyY2Uud3JhcFQ7CgoJCQl0aGlzLm1hZ0ZpbHRlciA9IHNvdXJjZS5tYWdGaWx0ZXI7CgkJCXRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjsKCgkJCXRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5OwoKCQkJdGhpcy5mb3JtYXQgPSBzb3VyY2UuZm9ybWF0OwoJCQl0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTsKCgkJCXRoaXMub2Zmc2V0LmNvcHkoIHNvdXJjZS5vZmZzZXQgKTsKCQkJdGhpcy5yZXBlYXQuY29weSggc291cmNlLnJlcGVhdCApOwoJCQl0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7CgkJCXRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247CgoJCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTsKCQkJdGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApOwoKCQkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBzb3VyY2UuZ2VuZXJhdGVNaXBtYXBzOwoJCQl0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbHlBbHBoYTsKCQkJdGhpcy5mbGlwWSA9IHNvdXJjZS5mbGlwWTsKCQkJdGhpcy51bnBhY2tBbGlnbm1lbnQgPSBzb3VyY2UudW5wYWNrQWxpZ25tZW50OwoJCQl0aGlzLmVuY29kaW5nID0gc291cmNlLmVuY29kaW5nOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkgewoKCQkJdmFyIGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApOwoKCQkJaWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTsKCgkJCX0KCgkJCXZhciBvdXRwdXQgPSB7CgoJCQkJbWV0YWRhdGE6IHsKCQkJCQl2ZXJzaW9uOiA0LjUsCgkJCQkJdHlwZTogJ1RleHR1cmUnLAoJCQkJCWdlbmVyYXRvcjogJ1RleHR1cmUudG9KU09OJwoJCQkJfSwKCgkJCQl1dWlkOiB0aGlzLnV1aWQsCgkJCQluYW1lOiB0aGlzLm5hbWUsCgoJCQkJbWFwcGluZzogdGhpcy5tYXBwaW5nLAoKCQkJCXJlcGVhdDogWyB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55IF0sCgkJCQlvZmZzZXQ6IFsgdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSBdLAoJCQkJY2VudGVyOiBbIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgXSwKCQkJCXJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLAoKCQkJCXdyYXA6IFsgdGhpcy53cmFwUywgdGhpcy53cmFwVCBdLAoKCQkJCWZvcm1hdDogdGhpcy5mb3JtYXQsCgkJCQl0eXBlOiB0aGlzLnR5cGUsCgkJCQllbmNvZGluZzogdGhpcy5lbmNvZGluZywKCgkJCQltaW5GaWx0ZXI6IHRoaXMubWluRmlsdGVyLAoJCQkJbWFnRmlsdGVyOiB0aGlzLm1hZ0ZpbHRlciwKCQkJCWFuaXNvdHJvcHk6IHRoaXMuYW5pc290cm9weSwKCgkJCQlmbGlwWTogdGhpcy5mbGlwWSwKCgkJCQlwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsCgkJCQl1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50CgoJCQl9OwoKCQkJaWYgKCB0aGlzLmltYWdlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJLy8gVE9ETzogTW92ZSB0byBUSFJFRS5JbWFnZQoKCQkJCXZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7CgoJCQkJaWYgKCBpbWFnZS51dWlkID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWltYWdlLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsgLy8gVUdICgoJCQkJfQoKCQkJCWlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS5pbWFnZXNbIGltYWdlLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQl2YXIgdXJsOwoKCQkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIGltYWdlICkgKSB7CgoJCQkJCQkvLyBwcm9jZXNzIGFycmF5IG9mIGltYWdlcyBlLmcuIEN1YmVUZXh0dXJlCgoJCQkJCQl1cmwgPSBbXTsKCgkJCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGltYWdlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCQkJdXJsLnB1c2goIEltYWdlVXRpbHMuZ2V0RGF0YVVSTCggaW1hZ2VbIGkgXSApICk7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBwcm9jZXNzIHNpbmdsZSBpbWFnZQoKCQkJCQkJdXJsID0gSW1hZ2VVdGlscy5nZXREYXRhVVJMKCBpbWFnZSApOwoKCQkJCQl9CgoJCQkJCW1ldGEuaW1hZ2VzWyBpbWFnZS51dWlkIF0gPSB7CgkJCQkJCXV1aWQ6IGltYWdlLnV1aWQsCgkJCQkJCXVybDogdXJsCgkJCQkJfTsKCgkJCQl9CgoJCQkJb3V0cHV0LmltYWdlID0gaW1hZ2UudXVpZDsKCgkJCX0KCgkJCWlmICggISBpc1Jvb3RPYmplY3QgKSB7CgoJCQkJbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7CgoJCQl9CgoJCQlyZXR1cm4gb3V0cHV0OwoKCQl9LAoKCQlkaXNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCgkJfSwKCgkJdHJhbnNmb3JtVXY6IGZ1bmN0aW9uICggdXYgKSB7CgoJCQlpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgeyByZXR1cm4gdXY7IH0KCgkJCXV2LmFwcGx5TWF0cml4MyggdGhpcy5tYXRyaXggKTsKCgkJCWlmICggdXYueCA8IDAgfHwgdXYueCA+IDEgKSB7CgoJCQkJc3dpdGNoICggdGhpcy53cmFwUyApIHsKCgkJCQkJY2FzZSBSZXBlYXRXcmFwcGluZzoKCgkJCQkJCXV2LnggPSB1di54IC0gTWF0aC5mbG9vciggdXYueCApOwoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOgoKCQkJCQkJdXYueCA9IHV2LnggPCAwID8gMCA6IDE7CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6CgoJCQkJCQlpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di54ICkgJSAyICkgPT09IDEgKSB7CgoJCQkJCQkJdXYueCA9IE1hdGguY2VpbCggdXYueCApIC0gdXYueDsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJdXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7CgoJCQkJCQl9CgkJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggdXYueSA8IDAgfHwgdXYueSA+IDEgKSB7CgoJCQkJc3dpdGNoICggdGhpcy53cmFwVCApIHsKCgkJCQkJY2FzZSBSZXBlYXRXcmFwcGluZzoKCgkJCQkJCXV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApOwoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOgoKCQkJCQkJdXYueSA9IHV2LnkgPCAwID8gMCA6IDE7CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6CgoJCQkJCQlpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di55ICkgJSAyICkgPT09IDEgKSB7CgoJCQkJCQkJdXYueSA9IE1hdGguY2VpbCggdXYueSApIC0gdXYueTsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJdXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7CgoJCQkJCQl9CgkJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggdGhpcy5mbGlwWSApIHsKCgkJCQl1di55ID0gMSAtIHV2Lnk7CgoJCQl9CgoJCQlyZXR1cm4gdXY7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KCBUZXh0dXJlLnByb3RvdHlwZSwgIm5lZWRzVXBkYXRlIiwgewoKCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoIHZhbHVlID09PSB0cnVlICkgeyB0aGlzLnZlcnNpb24gKys7IH0KCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvCgkgKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnLwoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIFZlY3RvcjQoIHgsIHksIHosIHcgKSB7CgoJCXRoaXMueCA9IHggfHwgMDsKCQl0aGlzLnkgPSB5IHx8IDA7CgkJdGhpcy56ID0geiB8fCAwOwoJCXRoaXMudyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTsKCgl9CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZlY3RvcjQucHJvdG90eXBlLCB7CgoJCSJ3aWR0aCI6IHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLno7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMueiA9IHZhbHVlOwoKCQkJfQoKCQl9LAoKCQkiaGVpZ2h0IjogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMudzsKCgkJCX0sCgoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJdGhpcy53ID0gdmFsdWU7CgoJCQl9CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggVmVjdG9yNC5wcm90b3R5cGUsIHsKCgkJaXNWZWN0b3I0OiB0cnVlLAoKCQlzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHsKCgkJCXRoaXMueCA9IHg7CgkJCXRoaXMueSA9IHk7CgkJCXRoaXMueiA9IHo7CgkJCXRoaXMudyA9IHc7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHsKCgkJCXRoaXMueCA9IHNjYWxhcjsKCQkJdGhpcy55ID0gc2NhbGFyOwoJCQl0aGlzLnogPSBzY2FsYXI7CgkJCXRoaXMudyA9IHNjYWxhcjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRYOiBmdW5jdGlvbiAoIHggKSB7CgoJCQl0aGlzLnggPSB4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFk6IGZ1bmN0aW9uICggeSApIHsKCgkJCXRoaXMueSA9IHk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0WjogZnVuY3Rpb24gKCB6ICkgewoKCQkJdGhpcy56ID0gejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRXOiBmdW5jdGlvbiAoIHcgKSB7CgoJCQl0aGlzLncgPSB3OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7CgoJCQlzd2l0Y2ggKCBpbmRleCApIHsKCgkJCQljYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhazsKCQkJCWNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrOwoJCQkJY2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7CgkJCQljYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhazsKCQkJCWRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkJc3dpdGNoICggaW5kZXggKSB7CgoJCQkJY2FzZSAwOiByZXR1cm4gdGhpcy54OwoJCQkJY2FzZSAxOiByZXR1cm4gdGhpcy55OwoJCQkJY2FzZSAyOiByZXR1cm4gdGhpcy56OwoJCQkJY2FzZSAzOiByZXR1cm4gdGhpcy53OwoJCQkJZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTsKCgkJCX0KCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53ICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggdiApIHsKCgkJCXRoaXMueCA9IHYueDsKCQkJdGhpcy55ID0gdi55OwoJCQl0aGlzLnogPSB2Lno7CgkJCXRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7CgoJCQlpZiAoIHcgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApOwoKCQkJfQoKCQkJdGhpcy54ICs9IHYueDsKCQkJdGhpcy55ICs9IHYueTsKCQkJdGhpcy56ICs9IHYuejsKCQkJdGhpcy53ICs9IHYudzsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXRoaXMueCArPSBzOwoJCQl0aGlzLnkgKz0gczsKCQkJdGhpcy56ICs9IHM7CgkJCXRoaXMudyArPSBzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHsKCgkJCXRoaXMueCA9IGEueCArIGIueDsKCQkJdGhpcy55ID0gYS55ICsgYi55OwoJCQl0aGlzLnogPSBhLnogKyBiLno7CgkJCXRoaXMudyA9IGEudyArIGIudzsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRTY2FsZWRWZWN0b3I6IGZ1bmN0aW9uICggdiwgcyApIHsKCgkJCXRoaXMueCArPSB2LnggKiBzOwoJCQl0aGlzLnkgKz0gdi55ICogczsKCQkJdGhpcy56ICs9IHYueiAqIHM7CgkJCXRoaXMudyArPSB2LncgKiBzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXN1YjogZnVuY3Rpb24gKCB2LCB3ICkgewoKCQkJaWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTsKCQkJCXJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTsKCgkJCX0KCgkJCXRoaXMueCAtPSB2Lng7CgkJCXRoaXMueSAtPSB2Lnk7CgkJCXRoaXMueiAtPSB2Lno7CgkJCXRoaXMudyAtPSB2Lnc7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3ViU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7CgoJCQl0aGlzLnggLT0gczsKCQkJdGhpcy55IC09IHM7CgkJCXRoaXMueiAtPSBzOwoJCQl0aGlzLncgLT0gczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQl0aGlzLnggPSBhLnggLSBiLng7CgkJCXRoaXMueSA9IGEueSAtIGIueTsKCQkJdGhpcy56ID0gYS56IC0gYi56OwoJCQl0aGlzLncgPSBhLncgLSBiLnc7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkgewoKCQkJdGhpcy54ICo9IHNjYWxhcjsKCQkJdGhpcy55ICo9IHNjYWxhcjsKCQkJdGhpcy56ICo9IHNjYWxhcjsKCQkJdGhpcy53ICo9IHNjYWxhcjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHsKCgkJCXZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53OwoJCQl2YXIgZSA9IG0uZWxlbWVudHM7CgoJCQl0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdzsKCQkJdGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7CgkJCXRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICogdzsKCQkJdGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7CgoJCQlyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApOwoKCQl9LAoKCQlzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkgewoKCQkJLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bQoKCQkJLy8gcSBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQKCgkJCXRoaXMudyA9IDIgKiBNYXRoLmFjb3MoIHEudyApOwoKCQkJdmFyIHMgPSBNYXRoLnNxcnQoIDEgLSBxLncgKiBxLncgKTsKCgkJCWlmICggcyA8IDAuMDAwMSApIHsKCgkJCQl0aGlzLnggPSAxOwoJCQkJdGhpcy55ID0gMDsKCQkJCXRoaXMueiA9IDA7CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMueCA9IHEueCAvIHM7CgkJCQl0aGlzLnkgPSBxLnkgLyBzOwoJCQkJdGhpcy56ID0gcS56IC8gczsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHsKCgkJCS8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb0FuZ2xlL2luZGV4Lmh0bQoKCQkJLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZCkKCgkJCXZhciBhbmdsZSwgeCwgeSwgeiwJCS8vIHZhcmlhYmxlcyBmb3IgcmVzdWx0CgkJCQllcHNpbG9uID0gMC4wMSwJCS8vIG1hcmdpbiB0byBhbGxvdyBmb3Igcm91bmRpbmcgZXJyb3JzCgkJCQllcHNpbG9uMiA9IDAuMSwJCS8vIG1hcmdpbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDAgYW5kIDE4MCBkZWdyZWVzCgoJCQkJdGUgPSBtLmVsZW1lbnRzLAoKCQkJCW0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sCgkJCQltMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLAoJCQkJbTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07CgoJCQlpZiAoICggTWF0aC5hYnMoIG0xMiAtIG0yMSApIDwgZXBzaWxvbiApICYmCgkJCSAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiYKCQkJICAgICAoIE1hdGguYWJzKCBtMjMgLSBtMzIgKSA8IGVwc2lsb24gKSApIHsKCgkJCQkvLyBzaW5ndWxhcml0eSBmb3VuZAoJCQkJLy8gZmlyc3QgY2hlY2sgZm9yIGlkZW50aXR5IG1hdHJpeCB3aGljaCBtdXN0IGhhdmUgKzEgZm9yIGFsbCB0ZXJtcwoJCQkJLy8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtcwoKCQkJCWlmICggKCBNYXRoLmFicyggbTEyICsgbTIxICkgPCBlcHNpbG9uMiApICYmCgkJCQkgICAgICggTWF0aC5hYnMoIG0xMyArIG0zMSApIDwgZXBzaWxvbjIgKSAmJgoJCQkJICAgICAoIE1hdGguYWJzKCBtMjMgKyBtMzIgKSA8IGVwc2lsb24yICkgJiYKCQkJCSAgICAgKCBNYXRoLmFicyggbTExICsgbTIyICsgbTMzIC0gMyApIDwgZXBzaWxvbjIgKSApIHsKCgkJCQkJLy8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwCgoJCQkJCXRoaXMuc2V0KCAxLCAwLCAwLCAwICk7CgoJCQkJCXJldHVybiB0aGlzOyAvLyB6ZXJvIGFuZ2xlLCBhcmJpdHJhcnkgYXhpcwoKCQkJCX0KCgkJCQkvLyBvdGhlcndpc2UgdGhpcyBzaW5ndWxhcml0eSBpcyBhbmdsZSA9IDE4MAoKCQkJCWFuZ2xlID0gTWF0aC5QSTsKCgkJCQl2YXIgeHggPSAoIG0xMSArIDEgKSAvIDI7CgkJCQl2YXIgeXkgPSAoIG0yMiArIDEgKSAvIDI7CgkJCQl2YXIgenogPSAoIG0zMyArIDEgKSAvIDI7CgkJCQl2YXIgeHkgPSAoIG0xMiArIG0yMSApIC8gNDsKCQkJCXZhciB4eiA9ICggbTEzICsgbTMxICkgLyA0OwoJCQkJdmFyIHl6ID0gKCBtMjMgKyBtMzIgKSAvIDQ7CgoJCQkJaWYgKCAoIHh4ID4geXkgKSAmJiAoIHh4ID4genogKSApIHsKCgkJCQkJLy8gbTExIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0KCgkJCQkJaWYgKCB4eCA8IGVwc2lsb24gKSB7CgoJCQkJCQl4ID0gMDsKCQkJCQkJeSA9IDAuNzA3MTA2NzgxOwoJCQkJCQl6ID0gMC43MDcxMDY3ODE7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl4ID0gTWF0aC5zcXJ0KCB4eCApOwoJCQkJCQl5ID0geHkgLyB4OwoJCQkJCQl6ID0geHogLyB4OwoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggeXkgPiB6eiApIHsKCgkJCQkJLy8gbTIyIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0KCgkJCQkJaWYgKCB5eSA8IGVwc2lsb24gKSB7CgoJCQkJCQl4ID0gMC43MDcxMDY3ODE7CgkJCQkJCXkgPSAwOwoJCQkJCQl6ID0gMC43MDcxMDY3ODE7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl5ID0gTWF0aC5zcXJ0KCB5eSApOwoJCQkJCQl4ID0geHkgLyB5OwoJCQkJCQl6ID0geXogLyB5OwoKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpcwoKCQkJCQlpZiAoIHp6IDwgZXBzaWxvbiApIHsKCgkJCQkJCXggPSAwLjcwNzEwNjc4MTsKCQkJCQkJeSA9IDAuNzA3MTA2NzgxOwoJCQkJCQl6ID0gMDsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXogPSBNYXRoLnNxcnQoIHp6ICk7CgkJCQkJCXggPSB4eiAvIHo7CgkJCQkJCXkgPSB5eiAvIHo7CgoJCQkJCX0KCgkJCQl9CgoJCQkJdGhpcy5zZXQoIHgsIHksIHosIGFuZ2xlICk7CgoJCQkJcmV0dXJuIHRoaXM7IC8vIHJldHVybiAxODAgZGVnIHJvdGF0aW9uCgoJCQl9CgoJCQkvLyBhcyB3ZSBoYXZlIHJlYWNoZWQgaGVyZSB0aGVyZSBhcmUgbm8gc2luZ3VsYXJpdGllcyBzbyB3ZSBjYW4gaGFuZGxlIG5vcm1hbGx5CgoJCQl2YXIgcyA9IE1hdGguc3FydCggKCBtMzIgLSBtMjMgKSAqICggbTMyIC0gbTIzICkgKwoJCQkgICAgICAgICAgICAgICAgICAgKCBtMTMgLSBtMzEgKSAqICggbTEzIC0gbTMxICkgKwoJCQkgICAgICAgICAgICAgICAgICAgKCBtMjEgLSBtMTIgKSAqICggbTIxIC0gbTEyICkgKTsgLy8gdXNlZCB0byBub3JtYWxpemUKCgkJCWlmICggTWF0aC5hYnMoIHMgKSA8IDAuMDAxICkgeyBzID0gMTsgfQoKCQkJLy8gcHJldmVudCBkaXZpZGUgYnkgemVybywgc2hvdWxkIG5vdCBoYXBwZW4gaWYgbWF0cml4IGlzIG9ydGhvZ29uYWwgYW5kIHNob3VsZCBiZQoJCQkvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2UKCgkJCXRoaXMueCA9ICggbTMyIC0gbTIzICkgLyBzOwoJCQl0aGlzLnkgPSAoIG0xMyAtIG0zMSApIC8gczsKCQkJdGhpcy56ID0gKCBtMjEgLSBtMTIgKSAvIHM7CgkJCXRoaXMudyA9IE1hdGguYWNvcyggKCBtMTEgKyBtMjIgKyBtMzMgLSAxICkgLyAyICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWluOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQl0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTsKCQkJdGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7CgkJCXRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApOwoJCQl0aGlzLncgPSBNYXRoLm1pbiggdGhpcy53LCB2LncgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltYXg6IGZ1bmN0aW9uICggdiApIHsKCgkJCXRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApOwoJCQl0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTsKCQkJdGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7CgkJCXRoaXMudyA9IE1hdGgubWF4KCB0aGlzLncsIHYudyApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkgewoKCQkJLy8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2UKCgkJCXRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApOwoJCQl0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTsKCQkJdGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7CgkJCXRoaXMudyA9IE1hdGgubWF4KCBtaW4udywgTWF0aC5taW4oIG1heC53LCB0aGlzLncgKSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoIG1pblZhbCwgbWF4VmFsICkgewoKCQkJdGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTsKCQkJdGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTsKCQkJdGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy56ICkgKTsKCQkJdGhpcy53ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy53ICkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHsKCgkJCXZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpOwoKCQkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7CgoJCX0sCgoJCWZsb29yOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTsKCQkJdGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7CgkJCXRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApOwoJCQl0aGlzLncgPSBNYXRoLmZsb29yKCB0aGlzLncgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljZWlsOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApOwoJCQl0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApOwoJCQl0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApOwoJCQl0aGlzLncgPSBNYXRoLmNlaWwoIHRoaXMudyApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXJvdW5kOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTsKCQkJdGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7CgkJCXRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApOwoJCQl0aGlzLncgPSBNYXRoLnJvdW5kKCB0aGlzLncgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7CgkJCXRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApOwoJCQl0aGlzLnogPSAoIHRoaXMueiA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTsKCQkJdGhpcy53ID0gKCB0aGlzLncgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMudyApIDogTWF0aC5mbG9vciggdGhpcy53ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbmVnYXRlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnggPSAtIHRoaXMueDsKCQkJdGhpcy55ID0gLSB0aGlzLnk7CgkJCXRoaXMueiA9IC0gdGhpcy56OwoJCQl0aGlzLncgPSAtIHRoaXMudzsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkb3Q6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7CgoJCX0sCgoJCWxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53OwoKCQl9LAoKCQlsZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyApOwoKCQl9LAoKCQltYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICkgKyBNYXRoLmFicyggdGhpcy53ICk7CgoJCX0sCgoJCW5vcm1hbGl6ZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTsKCgkJfSwKCgkJc2V0TGVuZ3RoOiBmdW5jdGlvbiAoIGxlbmd0aCApIHsKCgkJCXJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTsKCgkJfSwKCgkJbGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHsKCgkJCXRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7CgkJCXRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7CgkJCXRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7CgkJCXRoaXMudyArPSAoIHYudyAtIHRoaXMudyApICogYWxwaGE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHsKCgkJCXJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQlyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSAmJiAoIHYudyA9PT0gdGhpcy53ICkgKTsKCgkJfSwKCgkJZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7CgoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgeyBvZmZzZXQgPSAwOyB9CgoJCQl0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07CgkJCXRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07CgkJCXRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07CgkJCXRoaXMudyA9IGFycmF5WyBvZmZzZXQgKyAzIF07CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgeyBhcnJheSA9IFtdOyB9CgkJCWlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG9mZnNldCA9IDA7IH0KCgkJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDsKCQkJYXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTsKCQkJYXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejsKCQkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMudzsKCgkJCXJldHVybiBhcnJheTsKCgkJfSwKCgkJZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7CgoJCQlpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7CgoJCQl9CgoJCQl0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTsKCQkJdGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7CgkJCXRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApOwoJCQl0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgTWFyaXVzIEtpbnRlbCAvIGh0dHBzOi8vZ2l0aHViLmNvbS9raW50ZWwKCSAqLwoKCS8qCgkgSW4gb3B0aW9ucywgd2UgY2FuIHNwZWNpZnk6CgkgKiBUZXh0dXJlIHBhcmFtZXRlcnMgZm9yIGFuIGF1dG8tZ2VuZXJhdGVkIHRhcmdldCB0ZXh0dXJlCgkgKiBkZXB0aEJ1ZmZlci9zdGVuY2lsQnVmZmVyOiBCb29sZWFucyB0byBpbmRpY2F0ZSBpZiB3ZSBzaG91bGQgZ2VuZXJhdGUgdGhlc2UgYnVmZmVycwoJKi8KCWZ1bmN0aW9uIFdlYkdMUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkgewoKCQl0aGlzLndpZHRoID0gd2lkdGg7CgkJdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CgoJCXRoaXMuc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7CgkJdGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlOwoKCQl0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCgkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgoJCXRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuZW5jb2RpbmcgKTsKCgkJdGhpcy50ZXh0dXJlLmltYWdlID0ge307CgkJdGhpcy50ZXh0dXJlLmltYWdlLndpZHRoID0gd2lkdGg7CgkJdGhpcy50ZXh0dXJlLmltYWdlLmhlaWdodCA9IGhlaWdodDsKCgkJdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IGZhbHNlOwoJCXRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSBvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7CgoJCXRoaXMuZGVwdGhCdWZmZXIgPSBvcHRpb25zLmRlcHRoQnVmZmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoQnVmZmVyIDogdHJ1ZTsKCQl0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciA6IHRydWU7CgkJdGhpcy5kZXB0aFRleHR1cmUgPSBvcHRpb25zLmRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aFRleHR1cmUgOiBudWxsOwoKCX0KCglXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFdlYkdMUmVuZGVyVGFyZ2V0LAoKCQlpc1dlYkdMUmVuZGVyVGFyZ2V0OiB0cnVlLAoKCQlzZXRTaXplOiBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQgKSB7CgoJCQlpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgKSB7CgoJCQkJdGhpcy53aWR0aCA9IHdpZHRoOwoJCQkJdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CgoJCQkJdGhpcy50ZXh0dXJlLmltYWdlLndpZHRoID0gd2lkdGg7CgkJCQl0aGlzLnRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0OwoKCQkJCXRoaXMuZGlzcG9zZSgpOwoKCQkJfQoKCQkJdGhpcy52aWV3cG9ydC5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCQkJdGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCXRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7CgkJCXRoaXMuaGVpZ2h0ID0gc291cmNlLmhlaWdodDsKCgkJCXRoaXMudmlld3BvcnQuY29weSggc291cmNlLnZpZXdwb3J0ICk7CgoJCQl0aGlzLnRleHR1cmUgPSBzb3VyY2UudGV4dHVyZS5jbG9uZSgpOwoKCQkJdGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjsKCQkJdGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7CgkJCXRoaXMuZGVwdGhUZXh0dXJlID0gc291cmNlLmRlcHRoVGV4dHVyZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkaXNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKiBAYXV0aG9yIE1hdHQgRGVzTGF1cmllcnMgLyBAbWF0dGRlc2wKCSAqLwoKCWZ1bmN0aW9uIFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKSB7CgoJCVdlYkdMUmVuZGVyVGFyZ2V0LmNhbGwoIHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTsKCgkJdGhpcy5zYW1wbGVzID0gNDsKCgl9CgoJV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCwKCgkJaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0OiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCVdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5zYW1wbGVzID0gc291cmNlLnNhbXBsZXM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgl2YXIgX3YxID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfbTEgPSBuZXcgTWF0cml4NCgpOwoJdmFyIF96ZXJvID0gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTsKCXZhciBfb25lID0gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTsKCXZhciBfeCA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3kgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF96ID0gbmV3IFZlY3RvcjMoKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrLwoJICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy8KCSAqIEBhdXRob3Igam9yZGlfcm9zIC8gaHR0cDovL3BsYXR0c29mdC5jb20KCSAqIEBhdXRob3IgRDFwbG8xZCAvIGh0dHA6Ly9naXRodWIuY29tL0QxcGxvMWQKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlLwoJICogQGF1dGhvciB0aW1rbmlwIC8gaHR0cDovL3d3dy5mbG9vcnBsYW5uZXIuY29tLwoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKi8KCglmdW5jdGlvbiBNYXRyaXg0KCkgewoKCQl0aGlzLmVsZW1lbnRzID0gWwoKCQkJMSwgMCwgMCwgMCwKCQkJMCwgMSwgMCwgMCwKCQkJMCwgMCwgMSwgMCwKCQkJMCwgMCwgMCwgMQoKCQldOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAwICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyApOwoKCQl9CgoJfQoKCU9iamVjdC5hc3NpZ24oIE1hdHJpeDQucHJvdG90eXBlLCB7CgoJCWlzTWF0cml4NDogdHJ1ZSwKCgkJc2V0OiBmdW5jdGlvbiAoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDsKCQkJdGVbIDEgXSA9IG4yMTsgdGVbIDUgXSA9IG4yMjsgdGVbIDkgXSA9IG4yMzsgdGVbIDEzIF0gPSBuMjQ7CgkJCXRlWyAyIF0gPSBuMzE7IHRlWyA2IF0gPSBuMzI7IHRlWyAxMCBdID0gbjMzOyB0ZVsgMTQgXSA9IG4zNDsKCQkJdGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWlkZW50aXR5OiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnNldCgKCgkJCQkxLCAwLCAwLCAwLAoJCQkJMCwgMSwgMCwgMCwKCQkJCTAsIDAsIDEsIDAsCgkJCQkwLCAwLCAwLCAxCgoJCQkpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBtICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCQkJdmFyIG1lID0gbS5lbGVtZW50czsKCgkJCXRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdOwoJCQl0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsKCQkJdGVbIDggXSA9IG1lWyA4IF07IHRlWyA5IF0gPSBtZVsgOSBdOyB0ZVsgMTAgXSA9IG1lWyAxMCBdOyB0ZVsgMTEgXSA9IG1lWyAxMSBdOwoJCQl0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50cywgbWUgPSBtLmVsZW1lbnRzOwoKCQkJdGVbIDEyIF0gPSBtZVsgMTIgXTsKCQkJdGVbIDEzIF0gPSBtZVsgMTMgXTsKCQkJdGVbIDE0IF0gPSBtZVsgMTQgXTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlleHRyYWN0QmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHsKCgkJCXhBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDAgKTsKCQkJeUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApOwoJCQl6QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAyICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZUJhc2lzOiBmdW5jdGlvbiAoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7CgoJCQl0aGlzLnNldCgKCQkJCXhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsCgkJCQl4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLAoJCQkJeEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCwKCQkJCTAsIDAsIDAsIDEKCQkJKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlleHRyYWN0Um90YXRpb246IGZ1bmN0aW9uICggbSApIHsKCgkJCS8vIHRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgcmVmbGVjdGlvbiBtYXRyaWNlcwoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCQkJdmFyIG1lID0gbS5lbGVtZW50czsKCgkJCXZhciBzY2FsZVggPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTsKCQkJdmFyIHNjYWxlWSA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpOwoJCQl2YXIgc2NhbGVaID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7CgoJCQl0ZVsgMCBdID0gbWVbIDAgXSAqIHNjYWxlWDsKCQkJdGVbIDEgXSA9IG1lWyAxIF0gKiBzY2FsZVg7CgkJCXRlWyAyIF0gPSBtZVsgMiBdICogc2NhbGVYOwoJCQl0ZVsgMyBdID0gMDsKCgkJCXRlWyA0IF0gPSBtZVsgNCBdICogc2NhbGVZOwoJCQl0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTsKCQkJdGVbIDYgXSA9IG1lWyA2IF0gKiBzY2FsZVk7CgkJCXRlWyA3IF0gPSAwOwoKCQkJdGVbIDggXSA9IG1lWyA4IF0gKiBzY2FsZVo7CgkJCXRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaOwoJCQl0ZVsgMTAgXSA9IG1lWyAxMCBdICogc2NhbGVaOwoJCQl0ZVsgMTEgXSA9IDA7CgoJCQl0ZVsgMTIgXSA9IDA7CgkJCXRlWyAxMyBdID0gMDsKCQkJdGVbIDE0IF0gPSAwOwoJCQl0ZVsgMTUgXSA9IDE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZVJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkgewoKCQkJaWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTsKCgkJCX0KCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl2YXIgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejsKCQkJdmFyIGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTsKCQkJdmFyIGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTsKCQkJdmFyIGUgPSBNYXRoLmNvcyggeiApLCBmID0gTWF0aC5zaW4oIHogKTsKCgkJCWlmICggZXVsZXIub3JkZXIgPT09ICdYWVonICkgewoKCQkJCXZhciBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmOwoKCQkJCXRlWyAwIF0gPSBjICogZTsKCQkJCXRlWyA0IF0gPSAtIGMgKiBmOwoJCQkJdGVbIDggXSA9IGQ7CgoJCQkJdGVbIDEgXSA9IGFmICsgYmUgKiBkOwoJCQkJdGVbIDUgXSA9IGFlIC0gYmYgKiBkOwoJCQkJdGVbIDkgXSA9IC0gYiAqIGM7CgoJCQkJdGVbIDIgXSA9IGJmIC0gYWUgKiBkOwoJCQkJdGVbIDYgXSA9IGJlICsgYWYgKiBkOwoJCQkJdGVbIDEwIF0gPSBhICogYzsKCgkJCX0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVhaJyApIHsKCgkJCQl2YXIgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjsKCgkJCQl0ZVsgMCBdID0gY2UgKyBkZiAqIGI7CgkJCQl0ZVsgNCBdID0gZGUgKiBiIC0gY2Y7CgkJCQl0ZVsgOCBdID0gYSAqIGQ7CgoJCQkJdGVbIDEgXSA9IGEgKiBmOwoJCQkJdGVbIDUgXSA9IGEgKiBlOwoJCQkJdGVbIDkgXSA9IC0gYjsKCgkJCQl0ZVsgMiBdID0gY2YgKiBiIC0gZGU7CgkJCQl0ZVsgNiBdID0gZGYgKyBjZSAqIGI7CgkJCQl0ZVsgMTAgXSA9IGEgKiBjOwoKCQkJfSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWFknICkgewoKCQkJCXZhciBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmOwoKCQkJCXRlWyAwIF0gPSBjZSAtIGRmICogYjsKCQkJCXRlWyA0IF0gPSAtIGEgKiBmOwoJCQkJdGVbIDggXSA9IGRlICsgY2YgKiBiOwoKCQkJCXRlWyAxIF0gPSBjZiArIGRlICogYjsKCQkJCXRlWyA1IF0gPSBhICogZTsKCQkJCXRlWyA5IF0gPSBkZiAtIGNlICogYjsKCgkJCQl0ZVsgMiBdID0gLSBhICogZDsKCQkJCXRlWyA2IF0gPSBiOwoJCQkJdGVbIDEwIF0gPSBhICogYzsKCgkJCX0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWllYJyApIHsKCgkJCQl2YXIgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjsKCgkJCQl0ZVsgMCBdID0gYyAqIGU7CgkJCQl0ZVsgNCBdID0gYmUgKiBkIC0gYWY7CgkJCQl0ZVsgOCBdID0gYWUgKiBkICsgYmY7CgoJCQkJdGVbIDEgXSA9IGMgKiBmOwoJCQkJdGVbIDUgXSA9IGJmICogZCArIGFlOwoJCQkJdGVbIDkgXSA9IGFmICogZCAtIGJlOwoKCQkJCXRlWyAyIF0gPSAtIGQ7CgkJCQl0ZVsgNiBdID0gYiAqIGM7CgkJCQl0ZVsgMTAgXSA9IGEgKiBjOwoKCQkJfSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWlgnICkgewoKCQkJCXZhciBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkOwoKCQkJCXRlWyAwIF0gPSBjICogZTsKCQkJCXRlWyA0IF0gPSBiZCAtIGFjICogZjsKCQkJCXRlWyA4IF0gPSBiYyAqIGYgKyBhZDsKCgkJCQl0ZVsgMSBdID0gZjsKCQkJCXRlWyA1IF0gPSBhICogZTsKCQkJCXRlWyA5IF0gPSAtIGIgKiBlOwoKCQkJCXRlWyAyIF0gPSAtIGQgKiBlOwoJCQkJdGVbIDYgXSA9IGFkICogZiArIGJjOwoJCQkJdGVbIDEwIF0gPSBhYyAtIGJkICogZjsKCgkJCX0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWFpZJyApIHsKCgkJCQl2YXIgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDsKCgkJCQl0ZVsgMCBdID0gYyAqIGU7CgkJCQl0ZVsgNCBdID0gLSBmOwoJCQkJdGVbIDggXSA9IGQgKiBlOwoKCQkJCXRlWyAxIF0gPSBhYyAqIGYgKyBiZDsKCQkJCXRlWyA1IF0gPSBhICogZTsKCQkJCXRlWyA5IF0gPSBhZCAqIGYgLSBiYzsKCgkJCQl0ZVsgMiBdID0gYmMgKiBmIC0gYWQ7CgkJCQl0ZVsgNiBdID0gYiAqIGU7CgkJCQl0ZVsgMTAgXSA9IGJkICogZiArIGFjOwoKCQkJfQoKCQkJLy8gYm90dG9tIHJvdwoJCQl0ZVsgMyBdID0gMDsKCQkJdGVbIDcgXSA9IDA7CgkJCXRlWyAxMSBdID0gMDsKCgkJCS8vIGxhc3QgY29sdW1uCgkJCXRlWyAxMiBdID0gMDsKCQkJdGVbIDEzIF0gPSAwOwoJCQl0ZVsgMTQgXSA9IDA7CgkJCXRlWyAxNSBdID0gMTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkgewoKCQkJcmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTsKCgkJfSwKCgkJbG9va0F0OiBmdW5jdGlvbiAoIGV5ZSwgdGFyZ2V0LCB1cCApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQlfei5zdWJWZWN0b3JzKCBleWUsIHRhcmdldCApOwoKCQkJaWYgKCBfei5sZW5ndGhTcSgpID09PSAwICkgewoKCQkJCS8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvbgoKCQkJCV96LnogPSAxOwoKCQkJfQoKCQkJX3oubm9ybWFsaXplKCk7CgkJCV94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7CgoJCQlpZiAoIF94Lmxlbmd0aFNxKCkgPT09IDAgKSB7CgoJCQkJLy8gdXAgYW5kIHogYXJlIHBhcmFsbGVsCgoJCQkJaWYgKCBNYXRoLmFicyggdXAueiApID09PSAxICkgewoKCQkJCQlfei54ICs9IDAuMDAwMTsKCgkJCQl9IGVsc2UgewoKCQkJCQlfei56ICs9IDAuMDAwMTsKCgkJCQl9CgoJCQkJX3oubm9ybWFsaXplKCk7CgkJCQlfeC5jcm9zc1ZlY3RvcnMoIHVwLCBfeiApOwoKCQkJfQoKCQkJX3gubm9ybWFsaXplKCk7CgkJCV95LmNyb3NzVmVjdG9ycyggX3osIF94ICk7CgoJCQl0ZVsgMCBdID0gX3gueDsgdGVbIDQgXSA9IF95Lng7IHRlWyA4IF0gPSBfei54OwoJCQl0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55OwoJCQl0ZVsgMiBdID0gX3guejsgdGVbIDYgXSA9IF95Lno7IHRlWyAxMCBdID0gX3ouejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseTogZnVuY3Rpb24gKCBtLCBuICkgewoKCQkJaWYgKCBuICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgbiApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApOwoKCQl9LAoKCQlwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkgewoKCQkJcmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApOwoKCQl9LAoKCQltdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgoJCQl2YXIgYWUgPSBhLmVsZW1lbnRzOwoJCQl2YXIgYmUgPSBiLmVsZW1lbnRzOwoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdmFyIGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyA0IF0sIGExMyA9IGFlWyA4IF0sIGExNCA9IGFlWyAxMiBdOwoJCQl2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07CgkJCXZhciBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNiBdLCBhMzMgPSBhZVsgMTAgXSwgYTM0ID0gYWVbIDE0IF07CgkJCXZhciBhNDEgPSBhZVsgMyBdLCBhNDIgPSBhZVsgNyBdLCBhNDMgPSBhZVsgMTEgXSwgYTQ0ID0gYWVbIDE1IF07CgoJCQl2YXIgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDQgXSwgYjEzID0gYmVbIDggXSwgYjE0ID0gYmVbIDEyIF07CgkJCXZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTsKCQkJdmFyIGIzMSA9IGJlWyAyIF0sIGIzMiA9IGJlWyA2IF0sIGIzMyA9IGJlWyAxMCBdLCBiMzQgPSBiZVsgMTQgXTsKCQkJdmFyIGI0MSA9IGJlWyAzIF0sIGI0MiA9IGJlWyA3IF0sIGI0MyA9IGJlWyAxMSBdLCBiNDQgPSBiZVsgMTUgXTsKCgkJCXRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEgKyBhMTQgKiBiNDE7CgkJCXRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7CgkJCXRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7CgkJCXRlWyAxMiBdID0gYTExICogYjE0ICsgYTEyICogYjI0ICsgYTEzICogYjM0ICsgYTE0ICogYjQ0OwoKCQkJdGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTsKCQkJdGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0MjsKCQkJdGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0MzsKCQkJdGVbIDEzIF0gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7CgoJCQl0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxICsgYTM0ICogYjQxOwoJCQl0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyOwoJCQl0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0MzsKCQkJdGVbIDE0IF0gPSBhMzEgKiBiMTQgKyBhMzIgKiBiMjQgKyBhMzMgKiBiMzQgKyBhMzQgKiBiNDQ7CgoJCQl0ZVsgMyBdID0gYTQxICogYjExICsgYTQyICogYjIxICsgYTQzICogYjMxICsgYTQ0ICogYjQxOwoJCQl0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyOwoJCQl0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0MzsKCQkJdGVbIDE1IF0gPSBhNDEgKiBiMTQgKyBhNDIgKiBiMjQgKyBhNDMgKiBiMzQgKyBhNDQgKiBiNDQ7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzOwoJCQl0ZVsgMSBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDkgXSAqPSBzOyB0ZVsgMTMgXSAqPSBzOwoJCQl0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gczsKCQkJdGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUgKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkgewoKCQkJCV92MS54ID0gYXR0cmlidXRlLmdldFgoIGkgKTsKCQkJCV92MS55ID0gYXR0cmlidXRlLmdldFkoIGkgKTsKCQkJCV92MS56ID0gYXR0cmlidXRlLmdldFooIGkgKTsKCgkJCQlfdjEuYXBwbHlNYXRyaXg0KCB0aGlzICk7CgoJCQkJYXR0cmlidXRlLnNldFhZWiggaSwgX3YxLngsIF92MS55LCBfdjEueiApOwoKCQkJfQoKCQkJcmV0dXJuIGF0dHJpYnV0ZTsKCgkJfSwKCgkJZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl2YXIgbjExID0gdGVbIDAgXSwgbjEyID0gdGVbIDQgXSwgbjEzID0gdGVbIDggXSwgbjE0ID0gdGVbIDEyIF07CgkJCXZhciBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTsKCQkJdmFyIG4zMSA9IHRlWyAyIF0sIG4zMiA9IHRlWyA2IF0sIG4zMyA9IHRlWyAxMCBdLCBuMzQgPSB0ZVsgMTQgXTsKCQkJdmFyIG40MSA9IHRlWyAzIF0sIG40MiA9IHRlWyA3IF0sIG40MyA9IHRlWyAxMSBdLCBuNDQgPSB0ZVsgMTUgXTsKCgkJCS8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50CgkJCS8vKCBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG0gKQoKCQkJcmV0dXJuICgKCQkJCW40MSAqICgKCQkJCQkrIG4xNCAqIG4yMyAqIG4zMgoJCQkJCSAtIG4xMyAqIG4yNCAqIG4zMgoJCQkJCSAtIG4xNCAqIG4yMiAqIG4zMwoJCQkJCSArIG4xMiAqIG4yNCAqIG4zMwoJCQkJCSArIG4xMyAqIG4yMiAqIG4zNAoJCQkJCSAtIG4xMiAqIG4yMyAqIG4zNAoJCQkJKSArCgkJCQluNDIgKiAoCgkJCQkJKyBuMTEgKiBuMjMgKiBuMzQKCQkJCQkgLSBuMTEgKiBuMjQgKiBuMzMKCQkJCQkgKyBuMTQgKiBuMjEgKiBuMzMKCQkJCQkgLSBuMTMgKiBuMjEgKiBuMzQKCQkJCQkgKyBuMTMgKiBuMjQgKiBuMzEKCQkJCQkgLSBuMTQgKiBuMjMgKiBuMzEKCQkJCSkgKwoJCQkJbjQzICogKAoJCQkJCSsgbjExICogbjI0ICogbjMyCgkJCQkJIC0gbjExICogbjIyICogbjM0CgkJCQkJIC0gbjE0ICogbjIxICogbjMyCgkJCQkJICsgbjEyICogbjIxICogbjM0CgkJCQkJICsgbjE0ICogbjIyICogbjMxCgkJCQkJIC0gbjEyICogbjI0ICogbjMxCgkJCQkpICsKCQkJCW40NCAqICgKCQkJCQktIG4xMyAqIG4yMiAqIG4zMQoJCQkJCSAtIG4xMSAqIG4yMyAqIG4zMgoJCQkJCSArIG4xMSAqIG4yMiAqIG4zMwoJCQkJCSArIG4xMyAqIG4yMSAqIG4zMgoJCQkJCSAtIG4xMiAqIG4yMSAqIG4zMwoJCQkJCSArIG4xMiAqIG4yMyAqIG4zMQoJCQkJKQoKCQkJKTsKCgkJfSwKCgkJdHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoJCQl2YXIgdG1wOwoKCQkJdG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7CgkJCXRtcCA9IHRlWyAyIF07IHRlWyAyIF0gPSB0ZVsgOCBdOyB0ZVsgOCBdID0gdG1wOwoJCQl0bXAgPSB0ZVsgNiBdOyB0ZVsgNiBdID0gdGVbIDkgXTsgdGVbIDkgXSA9IHRtcDsKCgkJCXRtcCA9IHRlWyAzIF07IHRlWyAzIF0gPSB0ZVsgMTIgXTsgdGVbIDEyIF0gPSB0bXA7CgkJCXRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7CgkJCXRtcCA9IHRlWyAxMSBdOyB0ZVsgMTEgXSA9IHRlWyAxNCBdOyB0ZVsgMTQgXSA9IHRtcDsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRQb3NpdGlvbjogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCgkJCWlmICggeC5pc1ZlY3RvcjMgKSB7CgoJCQkJdGVbIDEyIF0gPSB4Lng7CgkJCQl0ZVsgMTMgXSA9IHgueTsKCQkJCXRlWyAxNCBdID0geC56OwoKCQkJfSBlbHNlIHsKCgkJCQl0ZVsgMTIgXSA9IHg7CgkJCQl0ZVsgMTMgXSA9IHk7CgkJCQl0ZVsgMTQgXSA9IHo7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtLCB0aHJvd09uRGVnZW5lcmF0ZSApIHsKCgkJCS8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bQoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLAoJCQkJbWUgPSBtLmVsZW1lbnRzLAoKCQkJCW4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sIG40MSA9IG1lWyAzIF0sCgkJCQluMTIgPSBtZVsgNCBdLCBuMjIgPSBtZVsgNSBdLCBuMzIgPSBtZVsgNiBdLCBuNDIgPSBtZVsgNyBdLAoJCQkJbjEzID0gbWVbIDggXSwgbjIzID0gbWVbIDkgXSwgbjMzID0gbWVbIDEwIF0sIG40MyA9IG1lWyAxMSBdLAoJCQkJbjE0ID0gbWVbIDEyIF0sIG4yNCA9IG1lWyAxMyBdLCBuMzQgPSBtZVsgMTQgXSwgbjQ0ID0gbWVbIDE1IF0sCgoJCQkJdDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LAoJCQkJdDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LAoJCQkJdDEzID0gbjEzICogbjI0ICogbjQyIC0gbjE0ICogbjIzICogbjQyICsgbjE0ICogbjIyICogbjQzIC0gbjEyICogbjI0ICogbjQzIC0gbjEzICogbjIyICogbjQ0ICsgbjEyICogbjIzICogbjQ0LAoJCQkJdDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0OwoKCQkJdmFyIGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMyArIG40MSAqIHQxNDsKCgkJCWlmICggZGV0ID09PSAwICkgewoKCQkJCXZhciBtc2cgPSAiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwIjsKCgkJCQlpZiAoIHRocm93T25EZWdlbmVyYXRlID09PSB0cnVlICkgewoKCQkJCQl0aHJvdyBuZXcgRXJyb3IoIG1zZyApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCWNvbnNvbGUud2FybiggbXNnICk7CgoJCQkJfQoKCQkJCXJldHVybiB0aGlzLmlkZW50aXR5KCk7CgoJCQl9CgoJCQl2YXIgZGV0SW52ID0gMSAvIGRldDsKCgkJCXRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7CgkJCXRlWyAxIF0gPSAoIG4yNCAqIG4zMyAqIG40MSAtIG4yMyAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMSAqIG40MyArIG4yMSAqIG4zNCAqIG40MyArIG4yMyAqIG4zMSAqIG40NCAtIG4yMSAqIG4zMyAqIG40NCApICogZGV0SW52OwoJCQl0ZVsgMiBdID0gKCBuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQgKSAqIGRldEludjsKCQkJdGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7CgoJCQl0ZVsgNCBdID0gdDEyICogZGV0SW52OwoJCQl0ZVsgNSBdID0gKCBuMTMgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzMgKiBuNDEgKyBuMTQgKiBuMzEgKiBuNDMgLSBuMTEgKiBuMzQgKiBuNDMgLSBuMTMgKiBuMzEgKiBuNDQgKyBuMTEgKiBuMzMgKiBuNDQgKSAqIGRldEludjsKCQkJdGVbIDYgXSA9ICggbjE0ICogbjMyICogbjQxIC0gbjEyICogbjM0ICogbjQxIC0gbjE0ICogbjMxICogbjQyICsgbjExICogbjM0ICogbjQyICsgbjEyICogbjMxICogbjQ0IC0gbjExICogbjMyICogbjQ0ICkgKiBkZXRJbnY7CgkJCXRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52OwoKCQkJdGVbIDggXSA9IHQxMyAqIGRldEludjsKCQkJdGVbIDkgXSA9ICggbjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0ICkgKiBkZXRJbnY7CgkJCXRlWyAxMCBdID0gKCBuMTIgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjIgKiBuNDEgKyBuMTQgKiBuMjEgKiBuNDIgLSBuMTEgKiBuMjQgKiBuNDIgLSBuMTIgKiBuMjEgKiBuNDQgKyBuMTEgKiBuMjIgKiBuNDQgKSAqIGRldEludjsKCQkJdGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52OwoKCQkJdGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7CgkJCXRlWyAxMyBdID0gKCBuMTMgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjMgKiBuMzEgKyBuMTQgKiBuMjEgKiBuMzMgLSBuMTEgKiBuMjQgKiBuMzMgLSBuMTMgKiBuMjEgKiBuMzQgKyBuMTEgKiBuMjMgKiBuMzQgKSAqIGRldEludjsKCQkJdGVbIDE0IF0gPSAoIG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCApICogZGV0SW52OwoJCQl0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2NhbGU6IGZ1bmN0aW9uICggdiApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgkJCXZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56OwoKCQkJdGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejsKCQkJdGVbIDEgXSAqPSB4OyB0ZVsgNSBdICo9IHk7IHRlWyA5IF0gKj0gejsKCQkJdGVbIDIgXSAqPSB4OyB0ZVsgNiBdICo9IHk7IHRlWyAxMCBdICo9IHo7CgkJCXRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldE1heFNjYWxlT25BeGlzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoKCQkJdmFyIHNjYWxlWFNxID0gdGVbIDAgXSAqIHRlWyAwIF0gKyB0ZVsgMSBdICogdGVbIDEgXSArIHRlWyAyIF0gKiB0ZVsgMiBdOwoJCQl2YXIgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07CgkJCXZhciBzY2FsZVpTcSA9IHRlWyA4IF0gKiB0ZVsgOCBdICsgdGVbIDkgXSAqIHRlWyA5IF0gKyB0ZVsgMTAgXSAqIHRlWyAxMCBdOwoKCQkJcmV0dXJuIE1hdGguc3FydCggTWF0aC5tYXgoIHNjYWxlWFNxLCBzY2FsZVlTcSwgc2NhbGVaU3EgKSApOwoKCQl9LAoKCQltYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICggeCwgeSwgeiApIHsKCgkJCXRoaXMuc2V0KAoKCQkJCTEsIDAsIDAsIHgsCgkJCQkwLCAxLCAwLCB5LAoJCQkJMCwgMCwgMSwgeiwKCQkJCTAsIDAsIDAsIDEKCgkJCSk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZVJvdGF0aW9uWDogZnVuY3Rpb24gKCB0aGV0YSApIHsKCgkJCXZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTsKCgkJCXRoaXMuc2V0KAoKCQkJCTEsIDAsIDAsIDAsCgkJCQkwLCBjLCAtIHMsIDAsCgkJCQkwLCBzLCBjLCAwLAoJCQkJMCwgMCwgMCwgMQoKCQkJKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltYWtlUm90YXRpb25ZOiBmdW5jdGlvbiAoIHRoZXRhICkgewoKCQkJdmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApOwoKCQkJdGhpcy5zZXQoCgoJCQkJIGMsIDAsIHMsIDAsCgkJCQkgMCwgMSwgMCwgMCwKCQkJCS0gcywgMCwgYywgMCwKCQkJCSAwLCAwLCAwLCAxCgoJCQkpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICggdGhldGEgKSB7CgoJCQl2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7CgoJCQl0aGlzLnNldCgKCgkJCQljLCAtIHMsIDAsIDAsCgkJCQlzLCBjLCAwLCAwLAoJCQkJMCwgMCwgMSwgMCwKCQkJCTAsIDAsIDAsIDEKCgkJCSk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZVJvdGF0aW9uQXhpczogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHsKCgkJCS8vIEJhc2VkIG9uIGh0dHA6Ly93d3cuZ2FtZWRldi5uZXQvcmVmZXJlbmNlL2FydGljbGVzL2FydGljbGUxMTk5LmFzcAoKCQkJdmFyIGMgPSBNYXRoLmNvcyggYW5nbGUgKTsKCQkJdmFyIHMgPSBNYXRoLnNpbiggYW5nbGUgKTsKCQkJdmFyIHQgPSAxIC0gYzsKCQkJdmFyIHggPSBheGlzLngsIHkgPSBheGlzLnksIHogPSBheGlzLno7CgkJCXZhciB0eCA9IHQgKiB4LCB0eSA9IHQgKiB5OwoKCQkJdGhpcy5zZXQoCgoJCQkJdHggKiB4ICsgYywgdHggKiB5IC0gcyAqIHosIHR4ICogeiArIHMgKiB5LCAwLAoJCQkJdHggKiB5ICsgcyAqIHosIHR5ICogeSArIGMsIHR5ICogeiAtIHMgKiB4LCAwLAoJCQkJdHggKiB6IC0gcyAqIHksIHR5ICogeiArIHMgKiB4LCB0ICogeiAqIHogKyBjLCAwLAoJCQkJMCwgMCwgMCwgMQoKCQkJKTsKCgkJCSByZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZVNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7CgoJCQl0aGlzLnNldCgKCgkJCQl4LCAwLCAwLCAwLAoJCQkJMCwgeSwgMCwgMCwKCQkJCTAsIDAsIHosIDAsCgkJCQkwLCAwLCAwLCAxCgoJCQkpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW1ha2VTaGVhcjogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJdGhpcy5zZXQoCgoJCQkJMSwgeSwgeiwgMCwKCQkJCXgsIDEsIHosIDAsCgkJCQl4LCB5LCAxLCAwLAoJCQkJMCwgMCwgMCwgMQoKCQkJKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb21wb3NlOiBmdW5jdGlvbiAoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgoJCQl2YXIgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7CgkJCXZhciB4MiA9IHggKyB4LAl5MiA9IHkgKyB5LCB6MiA9IHogKyB6OwoJCQl2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6MjsKCQkJdmFyIHl5ID0geSAqIHkyLCB5eiA9IHkgKiB6MiwgenogPSB6ICogejI7CgkJCXZhciB3eCA9IHcgKiB4Miwgd3kgPSB3ICogeTIsIHd6ID0gdyAqIHoyOwoKCQkJdmFyIHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7CgoJCQl0ZVsgMCBdID0gKCAxIC0gKCB5eSArIHp6ICkgKSAqIHN4OwoJCQl0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDsKCQkJdGVbIDIgXSA9ICggeHogLSB3eSApICogc3g7CgkJCXRlWyAzIF0gPSAwOwoKCQkJdGVbIDQgXSA9ICggeHkgLSB3eiApICogc3k7CgkJCXRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7CgkJCXRlWyA2IF0gPSAoIHl6ICsgd3ggKSAqIHN5OwoJCQl0ZVsgNyBdID0gMDsKCgkJCXRlWyA4IF0gPSAoIHh6ICsgd3kgKSAqIHN6OwoJCQl0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejsKCQkJdGVbIDEwIF0gPSAoIDEgLSAoIHh4ICsgeXkgKSApICogc3o7CgkJCXRlWyAxMSBdID0gMDsKCgkJCXRlWyAxMiBdID0gcG9zaXRpb24ueDsKCQkJdGVbIDEzIF0gPSBwb3NpdGlvbi55OwoJCQl0ZVsgMTQgXSA9IHBvc2l0aW9uLno7CgkJCXRlWyAxNSBdID0gMTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkZWNvbXBvc2U6IGZ1bmN0aW9uICggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkgewoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCgkJCXZhciBzeCA9IF92MS5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTsKCQkJdmFyIHN5ID0gX3YxLnNldCggdGVbIDQgXSwgdGVbIDUgXSwgdGVbIDYgXSApLmxlbmd0aCgpOwoJCQl2YXIgc3ogPSBfdjEuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpOwoKCQkJLy8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGUKCQkJdmFyIGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTsKCQkJaWYgKCBkZXQgPCAwICkgeyBzeCA9IC0gc3g7IH0KCgkJCXBvc2l0aW9uLnggPSB0ZVsgMTIgXTsKCQkJcG9zaXRpb24ueSA9IHRlWyAxMyBdOwoJCQlwb3NpdGlvbi56ID0gdGVbIDE0IF07CgoJCQkvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydAoJCQlfbTEuY29weSggdGhpcyApOwoKCQkJdmFyIGludlNYID0gMSAvIHN4OwoJCQl2YXIgaW52U1kgPSAxIC8gc3k7CgkJCXZhciBpbnZTWiA9IDEgLyBzejsKCgkJCV9tMS5lbGVtZW50c1sgMCBdICo9IGludlNYOwoJCQlfbTEuZWxlbWVudHNbIDEgXSAqPSBpbnZTWDsKCQkJX20xLmVsZW1lbnRzWyAyIF0gKj0gaW52U1g7CgoJCQlfbTEuZWxlbWVudHNbIDQgXSAqPSBpbnZTWTsKCQkJX20xLmVsZW1lbnRzWyA1IF0gKj0gaW52U1k7CgkJCV9tMS5lbGVtZW50c1sgNiBdICo9IGludlNZOwoKCQkJX20xLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7CgkJCV9tMS5lbGVtZW50c1sgOSBdICo9IGludlNaOwoJCQlfbTEuZWxlbWVudHNbIDEwIF0gKj0gaW52U1o7CgoJCQlxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xICk7CgoJCQlzY2FsZS54ID0gc3g7CgkJCXNjYWxlLnkgPSBzeTsKCQkJc2NhbGUueiA9IHN6OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW1ha2VQZXJzcGVjdGl2ZTogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHsKCgkJCWlmICggZmFyID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm1ha2VQZXJzcGVjdGl2ZSgpIGhhcyBiZWVuIHJlZGVmaW5lZCBhbmQgaGFzIGEgbmV3IHNpZ25hdHVyZS4gUGxlYXNlIGNoZWNrIHRoZSBkb2NzLicgKTsKCgkJCX0KCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgkJCXZhciB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApOwoJCQl2YXIgeSA9IDIgKiBuZWFyIC8gKCB0b3AgLSBib3R0b20gKTsKCgkJCXZhciBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7CgkJCXZhciBiID0gKCB0b3AgKyBib3R0b20gKSAvICggdG9wIC0gYm90dG9tICk7CgkJCXZhciBjID0gLSAoIGZhciArIG5lYXIgKSAvICggZmFyIC0gbmVhciApOwoJCQl2YXIgZCA9IC0gMiAqIGZhciAqIG5lYXIgLyAoIGZhciAtIG5lYXIgKTsKCgkJCXRlWyAwIF0gPSB4Owl0ZVsgNCBdID0gMDsJdGVbIDggXSA9IGE7CXRlWyAxMiBdID0gMDsKCQkJdGVbIDEgXSA9IDA7CXRlWyA1IF0gPSB5Owl0ZVsgOSBdID0gYjsJdGVbIDEzIF0gPSAwOwoJCQl0ZVsgMiBdID0gMDsJdGVbIDYgXSA9IDA7CXRlWyAxMCBdID0gYzsJdGVbIDE0IF0gPSBkOwoJCQl0ZVsgMyBdID0gMDsJdGVbIDcgXSA9IDA7CXRlWyAxMSBdID0gLSAxOwl0ZVsgMTUgXSA9IDA7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbWFrZU9ydGhvZ3JhcGhpYzogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHsKCgkJCXZhciB0ZSA9IHRoaXMuZWxlbWVudHM7CgkJCXZhciB3ID0gMS4wIC8gKCByaWdodCAtIGxlZnQgKTsKCQkJdmFyIGggPSAxLjAgLyAoIHRvcCAtIGJvdHRvbSApOwoJCQl2YXIgcCA9IDEuMCAvICggZmFyIC0gbmVhciApOwoKCQkJdmFyIHggPSAoIHJpZ2h0ICsgbGVmdCApICogdzsKCQkJdmFyIHkgPSAoIHRvcCArIGJvdHRvbSApICogaDsKCQkJdmFyIHogPSAoIGZhciArIG5lYXIgKSAqIHA7CgoJCQl0ZVsgMCBdID0gMiAqIHc7CXRlWyA0IF0gPSAwOwl0ZVsgOCBdID0gMDsJdGVbIDEyIF0gPSAtIHg7CgkJCXRlWyAxIF0gPSAwOwl0ZVsgNSBdID0gMiAqIGg7CXRlWyA5IF0gPSAwOwl0ZVsgMTMgXSA9IC0geTsKCQkJdGVbIDIgXSA9IDA7CXRlWyA2IF0gPSAwOwl0ZVsgMTAgXSA9IC0gMiAqIHA7CXRlWyAxNCBdID0gLSB6OwoJCQl0ZVsgMyBdID0gMDsJdGVbIDcgXSA9IDA7CXRlWyAxMSBdID0gMDsJdGVbIDE1IF0gPSAxOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7CgoJCQl2YXIgdGUgPSB0aGlzLmVsZW1lbnRzOwoJCQl2YXIgbWUgPSBtYXRyaXguZWxlbWVudHM7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCAxNjsgaSArKyApIHsKCgkJCQlpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSB7IHJldHVybiBmYWxzZTsgfQoKCQkJfQoKCQkJcmV0dXJuIHRydWU7CgoJCX0sCgoJCWZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7CgoJCQkJdGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7CgoJCQlpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSB7IGFycmF5ID0gW107IH0KCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdmFyIHRlID0gdGhpcy5lbGVtZW50czsKCgkJCWFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07CgkJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdOwoJCQlhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTsKCQkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07CgoJCQlhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTsKCQkJYXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07CgkJCWFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdOwoJCQlhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTsKCgkJCWFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdOwoJCQlhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTsKCQkJYXJyYXlbIG9mZnNldCArIDEwIF0gPSB0ZVsgMTAgXTsKCQkJYXJyYXlbIG9mZnNldCArIDExIF0gPSB0ZVsgMTEgXTsKCgkJCWFycmF5WyBvZmZzZXQgKyAxMiBdID0gdGVbIDEyIF07CgkJCWFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07CgkJCWFycmF5WyBvZmZzZXQgKyAxNCBdID0gdGVbIDE0IF07CgkJCWFycmF5WyBvZmZzZXQgKyAxNSBdID0gdGVbIDE1IF07CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKi8KCgl2YXIgX21hdHJpeCA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX3F1YXRlcm5pb24kMSA9IG5ldyBRdWF0ZXJuaW9uKCk7CgoJZnVuY3Rpb24gRXVsZXIoIHgsIHksIHosIG9yZGVyICkgewoKCQl0aGlzLl94ID0geCB8fCAwOwoJCXRoaXMuX3kgPSB5IHx8IDA7CgkJdGhpcy5feiA9IHogfHwgMDsKCQl0aGlzLl9vcmRlciA9IG9yZGVyIHx8IEV1bGVyLkRlZmF1bHRPcmRlcjsKCgl9CgoJRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbICdYWVonLCAnWVpYJywgJ1pYWScsICdYWlknLCAnWVhaJywgJ1pZWCcgXTsKCglFdWxlci5EZWZhdWx0T3JkZXIgPSAnWFlaJzsKCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggRXVsZXIucHJvdG90eXBlLCB7CgoJCXg6IHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLl94OwoKCQkJfSwKCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQl0aGlzLl94ID0gdmFsdWU7CgkJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQl9CgoJCX0sCgoJCXk6IHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLl95OwoKCQkJfSwKCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQl0aGlzLl95ID0gdmFsdWU7CgkJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQl9CgoJCX0sCgoJCXo6IHsKCgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiB0aGlzLl96OwoKCQkJfSwKCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQl0aGlzLl96ID0gdmFsdWU7CgkJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQl9CgoJCX0sCgoJCW9yZGVyOiB7CgoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQlyZXR1cm4gdGhpcy5fb3JkZXI7CgoJCQl9LAoKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCXRoaXMuX29yZGVyID0gdmFsdWU7CgkJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQl9CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggRXVsZXIucHJvdG90eXBlLCB7CgoJCWlzRXVsZXI6IHRydWUsCgoJCXNldDogZnVuY3Rpb24gKCB4LCB5LCB6LCBvcmRlciApIHsKCgkJCXRoaXMuX3ggPSB4OwoJCQl0aGlzLl95ID0geTsKCQkJdGhpcy5feiA9IHo7CgkJCXRoaXMuX29yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7CgoJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fb3JkZXIgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBldWxlciApIHsKCgkJCXRoaXMuX3ggPSBldWxlci5feDsKCQkJdGhpcy5feSA9IGV1bGVyLl95OwoJCQl0aGlzLl96ID0gZXVsZXIuX3o7CgkJCXRoaXMuX29yZGVyID0gZXVsZXIuX29yZGVyOwoKCQkJdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtLCBvcmRlciwgdXBkYXRlICkgewoKCQkJdmFyIGNsYW1wID0gX01hdGguY2xhbXA7CgoJCQkvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKQoKCQkJdmFyIHRlID0gbS5lbGVtZW50czsKCQkJdmFyIG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07CgkJCXZhciBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdOwoJCQl2YXIgbTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07CgoJCQlvcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyOwoKCQkJaWYgKCBvcmRlciA9PT0gJ1hZWicgKSB7CgoJCQkJdGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLSAxLCAxICkgKTsKCgkJCQlpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHsKCgkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTsKCQkJCQl0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0xMSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApOwoJCQkJCXRoaXMuX3ogPSAwOwoKCQkJCX0KCgkJCX0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVhaJyApIHsKCgkJCQl0aGlzLl94ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMjMsIC0gMSwgMSApICk7CgoJCQkJaWYgKCBNYXRoLmFicyggbTIzICkgPCAwLjk5OTk5OTkgKSB7CgoJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApOwoJCQkJCXRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0yMiApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7CgkJCQkJdGhpcy5feiA9IDA7CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkgewoKCQkJCXRoaXMuX3ggPSBNYXRoLmFzaW4oIGNsYW1wKCBtMzIsIC0gMSwgMSApICk7CgoJCQkJaWYgKCBNYXRoLmFicyggbTMyICkgPCAwLjk5OTk5OTkgKSB7CgoJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTMzICk7CgkJCQkJdGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQl0aGlzLl95ID0gMDsKCQkJCQl0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTsKCgkJCQl9CgoJCQl9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1pZWCcgKSB7CgoJCQkJdGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtIDEsIDEgKSApOwoKCQkJCWlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkgewoKCQkJCQl0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMzMgKTsKCQkJCQl0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQl0aGlzLl94ID0gMDsKCQkJCQl0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApOwoKCQkJCX0KCgkJCX0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVpYJyApIHsKCgkJCQl0aGlzLl96ID0gTWF0aC5hc2luKCBjbGFtcCggbTIxLCAtIDEsIDEgKSApOwoKCQkJCWlmICggTWF0aC5hYnMoIG0yMSApIDwgMC45OTk5OTk5ICkgewoKCQkJCQl0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApOwoJCQkJCXRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJdGhpcy5feCA9IDA7CgkJCQkJdGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkgewoKCQkJCXRoaXMuX3ogPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0xMiwgLSAxLCAxICkgKTsKCgkJCQlpZiAoIE1hdGguYWJzKCBtMTIgKSA8IDAuOTk5OTk5OSApIHsKCgkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7CgkJCQkJdGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJdGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTsKCQkJCQl0aGlzLl95ID0gMDsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6ICcgKyBvcmRlciApOwoKCQkJfQoKCQkJdGhpcy5fb3JkZXIgPSBvcmRlcjsKCgkJCWlmICggdXBkYXRlICE9PSBmYWxzZSApIHsgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpOyB9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSwgb3JkZXIsIHVwZGF0ZSApIHsKCgkJCV9tYXRyaXgubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTsKCgkJCXJldHVybiB0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX21hdHJpeCwgb3JkZXIsIHVwZGF0ZSApOwoKCQl9LAoKCQlzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2LCBvcmRlciApIHsKCgkJCXJldHVybiB0aGlzLnNldCggdi54LCB2LnksIHYueiwgb3JkZXIgfHwgdGhpcy5fb3JkZXIgKTsKCgkJfSwKCgkJcmVvcmRlcjogZnVuY3Rpb24gKCBuZXdPcmRlciApIHsKCgkJCS8vIFdBUk5JTkc6IHRoaXMgZGlzY2FyZHMgcmV2b2x1dGlvbiBpbmZvcm1hdGlvbiAtYmhvdXN0b24KCgkJCV9xdWF0ZXJuaW9uJDEuc2V0RnJvbUV1bGVyKCB0aGlzICk7CgoJCQlyZXR1cm4gdGhpcy5zZXRGcm9tUXVhdGVybmlvbiggX3F1YXRlcm5pb24kMSwgbmV3T3JkZXIgKTsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIGV1bGVyICkgewoKCQkJcmV0dXJuICggZXVsZXIuX3ggPT09IHRoaXMuX3ggKSAmJiAoIGV1bGVyLl95ID09PSB0aGlzLl95ICkgJiYgKCBldWxlci5feiA9PT0gdGhpcy5feiApICYmICggZXVsZXIuX29yZGVyID09PSB0aGlzLl9vcmRlciApOwoKCQl9LAoKCQlmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7CgoJCQl0aGlzLl94ID0gYXJyYXlbIDAgXTsKCQkJdGhpcy5feSA9IGFycmF5WyAxIF07CgkJCXRoaXMuX3ogPSBhcnJheVsgMiBdOwoJCQlpZiAoIGFycmF5WyAzIF0gIT09IHVuZGVmaW5lZCApIHsgdGhpcy5fb3JkZXIgPSBhcnJheVsgMyBdOyB9CgoJCQl0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgeyBhcnJheSA9IFtdOyB9CgkJCWlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG9mZnNldCA9IDA7IH0KCgkJCWFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7CgkJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95OwoJCQlhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejsKCQkJYXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyOwoKCQkJcmV0dXJuIGFycmF5OwoKCQl9LAoKCQl0b1ZlY3RvcjM6IGZ1bmN0aW9uICggb3B0aW9uYWxSZXN1bHQgKSB7CgoJCQlpZiAoIG9wdGlvbmFsUmVzdWx0ICkgewoKCQkJCXJldHVybiBvcHRpb25hbFJlc3VsdC5zZXQoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3ogKTsKCgkJCX0gZWxzZSB7CgoJCQkJcmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7CgoJCQl9CgoJCX0sCgoJCV9vbkNoYW5nZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHsKCgkJCXRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjazsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlfb25DaGFuZ2VDYWxsYmFjazogZnVuY3Rpb24gKCkge30KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gTGF5ZXJzKCkgewoKCQl0aGlzLm1hc2sgPSAxIHwgMDsKCgl9CgoJT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwgewoKCQlzZXQ6IGZ1bmN0aW9uICggY2hhbm5lbCApIHsKCgkJCXRoaXMubWFzayA9IDEgPDwgY2hhbm5lbCB8IDA7CgoJCX0sCgoJCWVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkgewoKCQkJdGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7CgoJCX0sCgoJCWVuYWJsZUFsbDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5tYXNrID0gMHhmZmZmZmZmZiB8IDA7CgoJCX0sCgoJCXRvZ2dsZTogZnVuY3Rpb24gKCBjaGFubmVsICkgewoKCQkJdGhpcy5tYXNrIF49IDEgPDwgY2hhbm5lbCB8IDA7CgoJCX0sCgoJCWRpc2FibGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHsKCgkJCXRoaXMubWFzayAmPSB+ICggMSA8PCBjaGFubmVsIHwgMCApOwoKCQl9LAoKCQlkaXNhYmxlQWxsOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLm1hc2sgPSAwOwoKCQl9LAoKCQl0ZXN0OiBmdW5jdGlvbiAoIGxheWVycyApIHsKCgkJCXJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7CgoJCX0KCgl9ICk7CgoJdmFyIF9vYmplY3QzRElkID0gMDsKCgl2YXIgX3YxJDEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9xMSA9IG5ldyBRdWF0ZXJuaW9uKCk7Cgl2YXIgX20xJDEgPSBuZXcgTWF0cml4NCgpOwoJdmFyIF90YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCXZhciBfcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9zY2FsZSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3F1YXRlcm5pb24kMiA9IG5ldyBRdWF0ZXJuaW9uKCk7CgoJdmFyIF94QXhpcyA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7Cgl2YXIgX3lBeGlzID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTsKCXZhciBfekF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApOwoKCXZhciBfYWRkZWRFdmVudCA9IHsgdHlwZTogJ2FkZGVkJyB9OwoJdmFyIF9yZW1vdmVkRXZlbnQgPSB7IHR5cGU6ICdyZW1vdmVkJyB9OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKiBAYXV0aG9yIGVsZXBoYW50YXR3b3JrIC8gd3d3LmVsZXBoYW50YXR3b3JrLmNoCgkgKi8KCglmdW5jdGlvbiBPYmplY3QzRCgpIHsKCgkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfb2JqZWN0M0RJZCArKyB9ICk7CgoJCXRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpOwoKCQl0aGlzLm5hbWUgPSAnJzsKCQl0aGlzLnR5cGUgPSAnT2JqZWN0M0QnOwoKCQl0aGlzLnBhcmVudCA9IG51bGw7CgkJdGhpcy5jaGlsZHJlbiA9IFtdOwoKCQl0aGlzLnVwID0gT2JqZWN0M0QuRGVmYXVsdFVwLmNsb25lKCk7CgoJCXZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIHJvdGF0aW9uID0gbmV3IEV1bGVyKCk7CgkJdmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpOwoJCXZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7CgoJCWZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7CgoJCQlxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7CgoJCX0KCgkJZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkgewoKCQkJcm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24sIHVuZGVmaW5lZCwgZmFsc2UgKTsKCgkJfQoKCQlyb3RhdGlvbi5fb25DaGFuZ2UoIG9uUm90YXRpb25DaGFuZ2UgKTsKCQlxdWF0ZXJuaW9uLl9vbkNoYW5nZSggb25RdWF0ZXJuaW9uQ2hhbmdlICk7CgoJCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7CgkJCXBvc2l0aW9uOiB7CgkJCQljb25maWd1cmFibGU6IHRydWUsCgkJCQllbnVtZXJhYmxlOiB0cnVlLAoJCQkJdmFsdWU6IHBvc2l0aW9uCgkJCX0sCgkJCXJvdGF0aW9uOiB7CgkJCQljb25maWd1cmFibGU6IHRydWUsCgkJCQllbnVtZXJhYmxlOiB0cnVlLAoJCQkJdmFsdWU6IHJvdGF0aW9uCgkJCX0sCgkJCXF1YXRlcm5pb246IHsKCQkJCWNvbmZpZ3VyYWJsZTogdHJ1ZSwKCQkJCWVudW1lcmFibGU6IHRydWUsCgkJCQl2YWx1ZTogcXVhdGVybmlvbgoJCQl9LAoJCQlzY2FsZTogewoJCQkJY29uZmlndXJhYmxlOiB0cnVlLAoJCQkJZW51bWVyYWJsZTogdHJ1ZSwKCQkJCXZhbHVlOiBzY2FsZQoJCQl9LAoJCQltb2RlbFZpZXdNYXRyaXg6IHsKCQkJCXZhbHVlOiBuZXcgTWF0cml4NCgpCgkJCX0sCgkJCW5vcm1hbE1hdHJpeDogewoJCQkJdmFsdWU6IG5ldyBNYXRyaXgzKCkKCQkJfQoJCX0gKTsKCgkJdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpOwoJCXRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0cml4NCgpOwoKCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTsKCQl0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTsKCgkJdGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7CgkJdGhpcy52aXNpYmxlID0gdHJ1ZTsKCgkJdGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7CgkJdGhpcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7CgoJCXRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7CgkJdGhpcy5yZW5kZXJPcmRlciA9IDA7CgoJCXRoaXMudXNlckRhdGEgPSB7fTsKCgl9CgoJT2JqZWN0M0QuRGVmYXVsdFVwID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTsKCU9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTsKCglPYmplY3QzRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IE9iamVjdDNELAoKCQlpc09iamVjdDNEOiB0cnVlLAoKCQlvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkge30sCgkJb25BZnRlclJlbmRlcjogZnVuY3Rpb24gKCkge30sCgoJCWFwcGx5TWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeCApIHsKCgkJCWlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgeyB0aGlzLnVwZGF0ZU1hdHJpeCgpOyB9CgoJCQl0aGlzLm1hdHJpeC5wcmVtdWx0aXBseSggbWF0cml4ICk7CgoJCQl0aGlzLm1hdHJpeC5kZWNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApOwoKCQl9LAoKCQlhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHsKCgkJCXRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHsKCgkJCS8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkCgoJCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTsKCgkJfSwKCgkJc2V0Um90YXRpb25Gcm9tRXVsZXI6IGZ1bmN0aW9uICggZXVsZXIgKSB7CgoJCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApOwoKCQl9LAoKCQlzZXRSb3RhdGlvbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHsKCgkJCS8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpCgoJCQl0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7CgoJCX0sCgoJCXNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHsKCgkJCS8vIGFzc3VtZXMgcSBpcyBub3JtYWxpemVkCgoJCQl0aGlzLnF1YXRlcm5pb24uY29weSggcSApOwoKCQl9LAoKCQlyb3RhdGVPbkF4aXM6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7CgoJCQkvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gb2JqZWN0IHNwYWNlCgkJCS8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkCgoJCQlfcTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTsKCgkJCXRoaXMucXVhdGVybmlvbi5tdWx0aXBseSggX3ExICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcm90YXRlT25Xb3JsZEF4aXM6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7CgoJCQkvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gd29ybGQgc3BhY2UKCQkJLy8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQKCQkJLy8gbWV0aG9kIGFzc3VtZXMgbm8gcm90YXRlZCBwYXJlbnQKCgkJCV9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApOwoKCQkJdGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3RhdGVYOiBmdW5jdGlvbiAoIGFuZ2xlICkgewoKCQkJcmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeEF4aXMsIGFuZ2xlICk7CgoJCX0sCgoJCXJvdGF0ZVk6IGZ1bmN0aW9uICggYW5nbGUgKSB7CgoJCQlyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF95QXhpcywgYW5nbGUgKTsKCgkJfSwKCgkJcm90YXRlWjogZnVuY3Rpb24gKCBhbmdsZSApIHsKCgkJCXJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3pBeGlzLCBhbmdsZSApOwoKCQl9LAoKCQl0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uICggYXhpcywgZGlzdGFuY2UgKSB7CgoJCQkvLyB0cmFuc2xhdGUgb2JqZWN0IGJ5IGRpc3RhbmNlIGFsb25nIGF4aXMgaW4gb2JqZWN0IHNwYWNlCgkJCS8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkCgoJCQlfdjEkMS5jb3B5KCBheGlzICkuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLnF1YXRlcm5pb24gKTsKCgkJCXRoaXMucG9zaXRpb24uYWRkKCBfdjEkMS5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRyYW5zbGF0ZVg6IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7CgoJCQlyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIF94QXhpcywgZGlzdGFuY2UgKTsKCgkJfSwKCgkJdHJhbnNsYXRlWTogZnVuY3Rpb24gKCBkaXN0YW5jZSApIHsKCgkJCXJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3lBeGlzLCBkaXN0YW5jZSApOwoKCQl9LAoKCQl0cmFuc2xhdGVaOiBmdW5jdGlvbiAoIGRpc3RhbmNlICkgewoKCQkJcmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfekF4aXMsIGRpc3RhbmNlICk7CgoJCX0sCgoJCWxvY2FsVG9Xb3JsZDogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7CgoJCQlyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOwoKCQl9LAoKCQl3b3JsZFRvTG9jYWw6IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIF9tMSQxLmdldEludmVyc2UoIHRoaXMubWF0cml4V29ybGQgKSApOwoKCQl9LAoKCQlsb29rQXQ6IGZ1bmN0aW9uICggeCwgeSwgeiApIHsKCgkJCS8vIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpCgoJCQlpZiAoIHguaXNWZWN0b3IzICkgewoKCQkJCV90YXJnZXQuY29weSggeCApOwoKCQkJfSBlbHNlIHsKCgkJCQlfdGFyZ2V0LnNldCggeCwgeSwgeiApOwoKCQkJfQoKCQkJdmFyIHBhcmVudCA9IHRoaXMucGFyZW50OwoKCQkJdGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTsKCgkJCV9wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTsKCgkJCWlmICggdGhpcy5pc0NhbWVyYSB8fCB0aGlzLmlzTGlnaHQgKSB7CgoJCQkJX20xJDEubG9va0F0KCBfcG9zaXRpb24sIF90YXJnZXQsIHRoaXMudXAgKTsKCgkJCX0gZWxzZSB7CgoJCQkJX20xJDEubG9va0F0KCBfdGFyZ2V0LCBfcG9zaXRpb24sIHRoaXMudXAgKTsKCgkJCX0KCgkJCXRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7CgoJCQlpZiAoIHBhcmVudCApIHsKCgkJCQlfbTEkMS5leHRyYWN0Um90YXRpb24oIHBhcmVudC5tYXRyaXhXb3JsZCApOwoJCQkJX3ExLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX20xJDEgKTsKCQkJCXRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggX3ExLmludmVyc2UoKSApOwoKCQkJfQoKCQl9LAoKCQlhZGQ6IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHsKCgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkgewoKCQkJCQl0aGlzLmFkZCggYXJndW1lbnRzWyBpIF0gKTsKCgkJCQl9CgoJCQkJcmV0dXJuIHRoaXM7CgoJCQl9CgoJCQlpZiAoIG9iamVjdCA9PT0gdGhpcyApIHsKCgkJCQljb25zb2xlLmVycm9yKCAiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuIiwgb2JqZWN0ICk7CgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCgkJCWlmICggKCBvYmplY3QgJiYgb2JqZWN0LmlzT2JqZWN0M0QgKSApIHsKCgkJCQlpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7CgoJCQkJCW9iamVjdC5wYXJlbnQucmVtb3ZlKCBvYmplY3QgKTsKCgkJCQl9CgoJCQkJb2JqZWN0LnBhcmVudCA9IHRoaXM7CgkJCQl0aGlzLmNoaWxkcmVuLnB1c2goIG9iamVjdCApOwoKCQkJCW9iamVjdC5kaXNwYXRjaEV2ZW50KCBfYWRkZWRFdmVudCApOwoKCQkJfSBlbHNlIHsKCgkJCQljb25zb2xlLmVycm9yKCAiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELiIsIG9iamVjdCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXJlbW92ZTogZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkgewoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJCXRoaXMucmVtb3ZlKCBhcmd1bWVudHNbIGkgXSApOwoKCQkJCX0KCgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCgkJCXZhciBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZiggb2JqZWN0ICk7CgoJCQlpZiAoIGluZGV4ICE9PSAtIDEgKSB7CgoJCQkJb2JqZWN0LnBhcmVudCA9IG51bGw7CgkJCQl0aGlzLmNoaWxkcmVuLnNwbGljZSggaW5kZXgsIDEgKTsKCgkJCQlvYmplY3QuZGlzcGF0Y2hFdmVudCggX3JlbW92ZWRFdmVudCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWF0dGFjaDogZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCQkvLyBhZGRzIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMsIHdoaWxlIG1haW50YWluaW5nIHRoZSBvYmplY3QncyB3b3JsZCB0cmFuc2Zvcm0KCgkJCXRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7CgoJCQlfbTEkMS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7CgoJCQlpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7CgoJCQkJb2JqZWN0LnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTsKCgkJCQlfbTEkMS5tdWx0aXBseSggb2JqZWN0LnBhcmVudC5tYXRyaXhXb3JsZCApOwoKCQkJfQoKCQkJb2JqZWN0LmFwcGx5TWF0cml4KCBfbTEkMSApOwoKCQkJb2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgZmFsc2UgKTsKCgkJCXRoaXMuYWRkKCBvYmplY3QgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRPYmplY3RCeUlkOiBmdW5jdGlvbiAoIGlkICkgewoKCQkJcmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ2lkJywgaWQgKTsKCgkJfSwKCgkJZ2V0T2JqZWN0QnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7CgoJCQlyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnbmFtZScsIG5hbWUgKTsKCgkJfSwKCgkJZ2V0T2JqZWN0QnlQcm9wZXJ0eTogZnVuY3Rpb24gKCBuYW1lLCB2YWx1ZSApIHsKCgkJCWlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHsgcmV0dXJuIHRoaXM7IH0KCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuWyBpIF07CgkJCQl2YXIgb2JqZWN0ID0gY2hpbGQuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTsKCgkJCQlpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlyZXR1cm4gb2JqZWN0OwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB1bmRlZmluZWQ7CgoJCX0sCgoJCWdldFdvcmxkUG9zaXRpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmdldFdvcmxkUG9zaXRpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTsKCgkJCXJldHVybiB0YXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7CgoJCX0sCgoJCWdldFdvcmxkUXVhdGVybmlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRRdWF0ZXJuaW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTsKCQkJCXRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uKCk7CgoJCQl9CgoJCQl0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7CgoJCQl0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCB0YXJnZXQsIF9zY2FsZSApOwoKCQkJcmV0dXJuIHRhcmdldDsKCgkJfSwKCgkJZ2V0V29ybGRTY2FsZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRTY2FsZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJdGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApOwoKCQkJdGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiwgX3F1YXRlcm5pb24kMiwgdGFyZ2V0ICk7CgoJCQlyZXR1cm4gdGFyZ2V0OwoKCQl9LAoKCQlnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTsKCgkJCXZhciBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50czsKCgkJCXJldHVybiB0YXJnZXQuc2V0KCBlWyA4IF0sIGVbIDkgXSwgZVsgMTAgXSApLm5vcm1hbGl6ZSgpOwoKCQl9LAoKCQlyYXljYXN0OiBmdW5jdGlvbiAoKSB7fSwKCgkJdHJhdmVyc2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7CgoJCQljYWxsYmFjayggdGhpcyApOwoKCQkJdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJY2hpbGRyZW5bIGkgXS50cmF2ZXJzZSggY2FsbGJhY2sgKTsKCgkJCX0KCgkJfSwKCgkJdHJhdmVyc2VWaXNpYmxlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKCQkJaWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCWNhbGxiYWNrKCB0aGlzICk7CgoJCQl2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQljaGlsZHJlblsgaSBdLnRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKTsKCgkJCX0KCgkJfSwKCgkJdHJhdmVyc2VBbmNlc3RvcnM6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7CgoJCQl2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7CgoJCQlpZiAoIHBhcmVudCAhPT0gbnVsbCApIHsKCgkJCQljYWxsYmFjayggcGFyZW50ICk7CgoJCQkJcGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApOwoKCQkJfQoKCQl9LAoKCQl1cGRhdGVNYXRyaXg6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMubWF0cml4LmNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApOwoKCQkJdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJfSwKCgkJdXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7CgoJCQlpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHsgdGhpcy51cGRhdGVNYXRyaXgoKTsgfQoKCQkJaWYgKCB0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgfHwgZm9yY2UgKSB7CgoJCQkJaWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHsKCgkJCQkJdGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7CgoJCQkJfQoKCQkJCXRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlOwoKCQkJCWZvcmNlID0gdHJ1ZTsKCgkJCX0KCgkJCS8vIHVwZGF0ZSBjaGlsZHJlbgoKCQkJdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJY2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTsKCgkJCX0KCgkJfSwKCgkJdXBkYXRlV29ybGRNYXRyaXg6IGZ1bmN0aW9uICggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7CgoJCQl2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7CgoJCQlpZiAoIHVwZGF0ZVBhcmVudHMgPT09IHRydWUgJiYgcGFyZW50ICE9PSBudWxsICkgewoKCQkJCXBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTsKCgkJCX0KCgkJCWlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgeyB0aGlzLnVwZGF0ZU1hdHJpeCgpOyB9CgoJCQlpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkgewoKCQkJCXRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTsKCgkJCX0gZWxzZSB7CgoJCQkJdGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTsKCgkJCX0KCgkJCS8vIHVwZGF0ZSBjaGlsZHJlbgoKCQkJaWYgKCB1cGRhdGVDaGlsZHJlbiA9PT0gdHJ1ZSApIHsKCgkJCQl2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCWNoaWxkcmVuWyBpIF0udXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7CgoJCQkJfQoKCQkJfQoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHsKCgkJCS8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeQoJCQl2YXIgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7CgoJCQl2YXIgb3V0cHV0ID0ge307CgoJCQkvLyBtZXRhIGlzIGEgaGFzaCB1c2VkIHRvIGNvbGxlY3QgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLgoJCQkvLyBub3QgcHJvdmlkaW5nIGl0IGltcGxpZXMgdGhhdCB0aGlzIGlzIHRoZSByb290IG9iamVjdAoJCQkvLyBiZWluZyBzZXJpYWxpemVkLgoJCQlpZiAoIGlzUm9vdE9iamVjdCApIHsKCgkJCQkvLyBpbml0aWFsaXplIG1ldGEgb2JqCgkJCQltZXRhID0gewoJCQkJCWdlb21ldHJpZXM6IHt9LAoJCQkJCW1hdGVyaWFsczoge30sCgkJCQkJdGV4dHVyZXM6IHt9LAoJCQkJCWltYWdlczoge30sCgkJCQkJc2hhcGVzOiB7fQoJCQkJfTsKCgkJCQlvdXRwdXQubWV0YWRhdGEgPSB7CgkJCQkJdmVyc2lvbjogNC41LAoJCQkJCXR5cGU6ICdPYmplY3QnLAoJCQkJCWdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTicKCQkJCX07CgoJCQl9CgoJCQkvLyBzdGFuZGFyZCBPYmplY3QzRCBzZXJpYWxpemF0aW9uCgoJCQl2YXIgb2JqZWN0ID0ge307CgoJCQlvYmplY3QudXVpZCA9IHRoaXMudXVpZDsKCQkJb2JqZWN0LnR5cGUgPSB0aGlzLnR5cGU7CgoJCQlpZiAoIHRoaXMubmFtZSAhPT0gJycgKSB7IG9iamVjdC5uYW1lID0gdGhpcy5uYW1lOyB9CgkJCWlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgeyBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7IH0KCQkJaWYgKCB0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUgKSB7IG9iamVjdC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTsgfQoJCQlpZiAoIHRoaXMudmlzaWJsZSA9PT0gZmFsc2UgKSB7IG9iamVjdC52aXNpYmxlID0gZmFsc2U7IH0KCQkJaWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgeyBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlOyB9CgkJCWlmICggdGhpcy5yZW5kZXJPcmRlciAhPT0gMCApIHsgb2JqZWN0LnJlbmRlck9yZGVyID0gdGhpcy5yZW5kZXJPcmRlcjsgfQoJCQlpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSB7IG9iamVjdC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7IH0KCgkJCW9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrOwoJCQlvYmplY3QubWF0cml4ID0gdGhpcy5tYXRyaXgudG9BcnJheSgpOwoKCQkJaWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IGZhbHNlICkgeyBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOyB9CgoJCQkvLyBvYmplY3Qgc3BlY2lmaWMgcHJvcGVydGllcwoKCQkJaWYgKCB0aGlzLmlzSW5zdGFuY2VkTWVzaCApIHsKCgkJCQlvYmplY3QudHlwZSA9ICdJbnN0YW5jZWRNZXNoJzsKCQkJCW9iamVjdC5jb3VudCA9IHRoaXMuY291bnQ7CgkJCQlvYmplY3QuaW5zdGFuY2VNYXRyaXggPSB0aGlzLmluc3RhbmNlTWF0cml4LnRvSlNPTigpOwoKCQkJfQoKCQkJLy8KCgkJCWZ1bmN0aW9uIHNlcmlhbGl6ZSggbGlicmFyeSwgZWxlbWVudCApIHsKCgkJCQlpZiAoIGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID0gZWxlbWVudC50b0pTT04oIG1ldGEgKTsKCgkJCQl9CgoJCQkJcmV0dXJuIGVsZW1lbnQudXVpZDsKCgkJCX0KCgkJCWlmICggdGhpcy5pc01lc2ggfHwgdGhpcy5pc0xpbmUgfHwgdGhpcy5pc1BvaW50cyApIHsKCgkJCQlvYmplY3QuZ2VvbWV0cnkgPSBzZXJpYWxpemUoIG1ldGEuZ2VvbWV0cmllcywgdGhpcy5nZW9tZXRyeSApOwoKCQkJCXZhciBwYXJhbWV0ZXJzID0gdGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzOwoKCQkJCWlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXZhciBzaGFwZXMgPSBwYXJhbWV0ZXJzLnNoYXBlczsKCgkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHsKCgkJCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQkJCXZhciBzaGFwZSA9IHNoYXBlc1sgaSBdOwoKCQkJCQkJCXNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZXMgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCWlmICggdGhpcy5tYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWlmICggQXJyYXkuaXNBcnJheSggdGhpcy5tYXRlcmlhbCApICkgewoKCQkJCQl2YXIgdXVpZHMgPSBbXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5tYXRlcmlhbC5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQkJdXVpZHMucHVzaCggc2VyaWFsaXplKCBtZXRhLm1hdGVyaWFscywgdGhpcy5tYXRlcmlhbFsgaSBdICkgKTsKCgkJCQkJfQoKCQkJCQlvYmplY3QubWF0ZXJpYWwgPSB1dWlkczsKCgkJCQl9IGVsc2UgewoKCQkJCQlvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsICk7CgoJCQkJfQoKCQkJfQoKCQkJLy8KCgkJCWlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkgewoKCQkJCW9iamVjdC5jaGlsZHJlbiA9IFtdOwoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkgewoKCQkJCQlvYmplY3QuY2hpbGRyZW4ucHVzaCggdGhpcy5jaGlsZHJlblsgaSBdLnRvSlNPTiggbWV0YSApLm9iamVjdCApOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggaXNSb290T2JqZWN0ICkgewoKCQkJCXZhciBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7CgkJCQl2YXIgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTsKCQkJCXZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTsKCQkJCXZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApOwoJCQkJdmFyIHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7CgoJCQkJaWYgKCBnZW9tZXRyaWVzLmxlbmd0aCA+IDAgKSB7IG91dHB1dC5nZW9tZXRyaWVzID0gZ2VvbWV0cmllczsgfQoJCQkJaWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIHsgb3V0cHV0Lm1hdGVyaWFscyA9IG1hdGVyaWFsczsgfQoJCQkJaWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgeyBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlczsgfQoJCQkJaWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIHsgb3V0cHV0LmltYWdlcyA9IGltYWdlczsgfQoJCQkJaWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIHsgb3V0cHV0LnNoYXBlcyA9IHNoYXBlczsgfQoKCQkJfQoKCQkJb3V0cHV0Lm9iamVjdCA9IG9iamVjdDsKCgkJCXJldHVybiBvdXRwdXQ7CgoJCQkvLyBleHRyYWN0IGRhdGEgZnJvbSB0aGUgY2FjaGUgaGFzaAoJCQkvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtCgkJCS8vIGFuZCByZXR1cm4gYXMgYXJyYXkKCQkJZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7CgoJCQkJdmFyIHZhbHVlcyA9IFtdOwoJCQkJZm9yICggdmFyIGtleSBpbiBjYWNoZSApIHsKCgkJCQkJdmFyIGRhdGEgPSBjYWNoZVsga2V5IF07CgkJCQkJZGVsZXRlIGRhdGEubWV0YWRhdGE7CgkJCQkJdmFsdWVzLnB1c2goIGRhdGEgKTsKCgkJCQl9CgkJCQlyZXR1cm4gdmFsdWVzOwoKCQkJfQoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCByZWN1cnNpdmUgKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzLCByZWN1cnNpdmUgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHsKCgkJCWlmICggcmVjdXJzaXZlID09PSB1bmRlZmluZWQgKSB7IHJlY3Vyc2l2ZSA9IHRydWU7IH0KCgkJCXRoaXMubmFtZSA9IHNvdXJjZS5uYW1lOwoKCQkJdGhpcy51cC5jb3B5KCBzb3VyY2UudXAgKTsKCgkJCXRoaXMucG9zaXRpb24uY29weSggc291cmNlLnBvc2l0aW9uICk7CgkJCXRoaXMucXVhdGVybmlvbi5jb3B5KCBzb3VyY2UucXVhdGVybmlvbiApOwoJCQl0aGlzLnNjYWxlLmNvcHkoIHNvdXJjZS5zY2FsZSApOwoKCQkJdGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApOwoJCQl0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApOwoKCQkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7CgkJCXRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlOwoKCQkJdGhpcy5sYXllcnMubWFzayA9IHNvdXJjZS5sYXllcnMubWFzazsKCQkJdGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7CgoJCQl0aGlzLmNhc3RTaGFkb3cgPSBzb3VyY2UuY2FzdFNoYWRvdzsKCQkJdGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7CgoJCQl0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDsKCQkJdGhpcy5yZW5kZXJPcmRlciA9IHNvdXJjZS5yZW5kZXJPcmRlcjsKCgkJCXRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTsKCgkJCWlmICggcmVjdXJzaXZlID09PSB0cnVlICkgewoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7CgoJCQkJCXZhciBjaGlsZCA9IHNvdXJjZS5jaGlsZHJlblsgaSBdOwoJCQkJCXRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gU2NlbmUoKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1NjZW5lJzsKCgkJdGhpcy5iYWNrZ3JvdW5kID0gbnVsbDsKCQl0aGlzLmZvZyA9IG51bGw7CgkJdGhpcy5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDsKCgkJdGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTsgLy8gY2hlY2tlZCBieSB0aGUgcmVuZGVyZXIKCgkJaWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHsKCgkJCV9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKCgkJfQoKCX0KCglTY2VuZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogU2NlbmUsCgoJCWlzU2NlbmU6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7CgoJCQlPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApOwoKCQkJaWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHsgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTsgfQoJCQlpZiAoIHNvdXJjZS5mb2cgIT09IG51bGwgKSB7IHRoaXMuZm9nID0gc291cmNlLmZvZy5jbG9uZSgpOyB9CgkJCWlmICggc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwgIT09IG51bGwgKSB7IHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7IH0KCgkJCXRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlOwoJCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHsKCgkJCXZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7CgoJCQlpZiAoIHRoaXMuYmFja2dyb3VuZCAhPT0gbnVsbCApIHsgZGF0YS5vYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04oIG1ldGEgKTsgfQoJCQlpZiAoIHRoaXMuZm9nICE9PSBudWxsICkgeyBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTsgfQoKCQkJcmV0dXJuIGRhdGE7CgoJCX0sCgoJCWRpc3Bvc2U6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApOwoKCQl9CgoJfSApOwoKCXZhciBfcG9pbnRzID0gWwoJCW5ldyBWZWN0b3IzKCksCgkJbmV3IFZlY3RvcjMoKSwKCQluZXcgVmVjdG9yMygpLAoJCW5ldyBWZWN0b3IzKCksCgkJbmV3IFZlY3RvcjMoKSwKCQluZXcgVmVjdG9yMygpLAoJCW5ldyBWZWN0b3IzKCksCgkJbmV3IFZlY3RvcjMoKQoJXTsKCgl2YXIgX3ZlY3RvciQyID0gbmV3IFZlY3RvcjMoKTsKCgl2YXIgX2JveCA9IG5ldyBCb3gzKCk7CgoJLy8gdHJpYW5nbGUgY2VudGVyZWQgdmVydGljZXMKCgl2YXIgX3YwID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdjEkMiA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3YyID0gbmV3IFZlY3RvcjMoKTsKCgkvLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMKCgl2YXIgX2YwID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfZjEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9mMiA9IG5ldyBWZWN0b3IzKCk7CgoJdmFyIF9jZW50ZXIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9leHRlbnRzID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF90ZXN0QXhpcyA9IG5ldyBWZWN0b3IzKCk7CgoJLyoqCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIEJveDMoIG1pbiwgbWF4ICkgewoKCQl0aGlzLm1pbiA9ICggbWluICE9PSB1bmRlZmluZWQgKSA/IG1pbiA6IG5ldyBWZWN0b3IzKCArIEluZmluaXR5LCArIEluZmluaXR5LCArIEluZmluaXR5ICk7CgkJdGhpcy5tYXggPSAoIG1heCAhPT0gdW5kZWZpbmVkICkgPyBtYXggOiBuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApOwoKCX0KCgoJT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHsKCgkJaXNCb3gzOiB0cnVlLAoKCQlzZXQ6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7CgoJCQl0aGlzLm1pbi5jb3B5KCBtaW4gKTsKCQkJdGhpcy5tYXguY29weSggbWF4ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkgewoKCQkJdmFyIG1pblggPSArIEluZmluaXR5OwoJCQl2YXIgbWluWSA9ICsgSW5maW5pdHk7CgkJCXZhciBtaW5aID0gKyBJbmZpbml0eTsKCgkJCXZhciBtYXhYID0gLSBJbmZpbml0eTsKCQkJdmFyIG1heFkgPSAtIEluZmluaXR5OwoJCQl2YXIgbWF4WiA9IC0gSW5maW5pdHk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7CgoJCQkJdmFyIHggPSBhcnJheVsgaSBdOwoJCQkJdmFyIHkgPSBhcnJheVsgaSArIDEgXTsKCQkJCXZhciB6ID0gYXJyYXlbIGkgKyAyIF07CgoJCQkJaWYgKCB4IDwgbWluWCApIHsgbWluWCA9IHg7IH0KCQkJCWlmICggeSA8IG1pblkgKSB7IG1pblkgPSB5OyB9CgkJCQlpZiAoIHogPCBtaW5aICkgeyBtaW5aID0gejsgfQoKCQkJCWlmICggeCA+IG1heFggKSB7IG1heFggPSB4OyB9CgkJCQlpZiAoIHkgPiBtYXhZICkgeyBtYXhZID0geTsgfQoJCQkJaWYgKCB6ID4gbWF4WiApIHsgbWF4WiA9IHo7IH0KCgkJCX0KCgkJCXRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApOwoJCQl0aGlzLm1heC5zZXQoIG1heFgsIG1heFksIG1heFogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHsKCgkJCXZhciBtaW5YID0gKyBJbmZpbml0eTsKCQkJdmFyIG1pblkgPSArIEluZmluaXR5OwoJCQl2YXIgbWluWiA9ICsgSW5maW5pdHk7CgoJCQl2YXIgbWF4WCA9IC0gSW5maW5pdHk7CgkJCXZhciBtYXhZID0gLSBJbmZpbml0eTsKCQkJdmFyIG1heFogPSAtIEluZmluaXR5OwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gYXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgeCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7CgkJCQl2YXIgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7CgkJCQl2YXIgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7CgoJCQkJaWYgKCB4IDwgbWluWCApIHsgbWluWCA9IHg7IH0KCQkJCWlmICggeSA8IG1pblkgKSB7IG1pblkgPSB5OyB9CgkJCQlpZiAoIHogPCBtaW5aICkgeyBtaW5aID0gejsgfQoKCQkJCWlmICggeCA+IG1heFggKSB7IG1heFggPSB4OyB9CgkJCQlpZiAoIHkgPiBtYXhZICkgeyBtYXhZID0geTsgfQoJCQkJaWYgKCB6ID4gbWF4WiApIHsgbWF4WiA9IHo7IH0KCgkJCX0KCgkJCXRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApOwoJCQl0aGlzLm1heC5zZXQoIG1heFgsIG1heFksIG1heFogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHsKCgkJCXRoaXMubWFrZUVtcHR5KCk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tQ2VudGVyQW5kU2l6ZTogZnVuY3Rpb24gKCBjZW50ZXIsIHNpemUgKSB7CgoJCQl2YXIgaGFsZlNpemUgPSBfdmVjdG9yJDIuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTsKCgkJCXRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTsKCQkJdGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJdGhpcy5tYWtlRW1wdHkoKTsKCgkJCXJldHVybiB0aGlzLmV4cGFuZEJ5T2JqZWN0KCBvYmplY3QgKTsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQl0aGlzLm1pbi5jb3B5KCBib3gubWluICk7CgkJCXRoaXMubWF4LmNvcHkoIGJveC5tYXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltYWtlRW1wdHk6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7CgkJCXRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gdGhpcy5tYXgueiA9IC0gSW5maW5pdHk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJaXNFbXB0eTogZnVuY3Rpb24gKCkgewoKCQkJLy8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXMKCgkJCXJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApIHx8ICggdGhpcy5tYXgueiA8IHRoaXMubWluLnogKTsKCgkJfSwKCgkJZ2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTsKCgkJfSwKCgkJZ2V0U2l6ZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTsKCQkJCXRhcmdldCA9IG5ldyBWZWN0b3IzKCk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7CgoJCX0sCgoJCWV4cGFuZEJ5UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQl0aGlzLm1pbi5taW4oIHBvaW50ICk7CgkJCXRoaXMubWF4Lm1heCggcG9pbnQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlleHBhbmRCeVZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7CgoJCQl0aGlzLm1pbi5zdWIoIHZlY3RvciApOwoJCQl0aGlzLm1heC5hZGQoIHZlY3RvciApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWV4cGFuZEJ5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHsKCgkJCXRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTsKCQkJdGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlleHBhbmRCeU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCQkvLyBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhbiBvYmplY3QgKGluY2x1ZGluZyBpdHMgY2hpbGRyZW4pLAoJCQkvLyBhY2NvdW50aW5nIGZvciBib3RoIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsIHdvcmxkIHRyYW5zZm9ybXMKCgkJCW9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7CgoJCQl2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7CgoJCQlpZiAoIGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHsKCgkJCQkJZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgoJCQkJfQoKCQkJCV9ib3guY29weSggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKTsKCQkJCV9ib3guYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTsKCgkJCQl0aGlzLmV4cGFuZEJ5UG9pbnQoIF9ib3gubWluICk7CgkJCQl0aGlzLmV4cGFuZEJ5UG9pbnQoIF9ib3gubWF4ICk7CgoJCQl9CgoJCQl2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXRoaXMuZXhwYW5kQnlPYmplY3QoIGNoaWxkcmVuWyBpIF0gKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkgewoKCQkJcmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8CgkJCQlwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSB8fAoJCQkJcG9pbnQueiA8IHRoaXMubWluLnogfHwgcG9pbnQueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7CgoJCX0sCgoJCWNvbnRhaW5zQm94OiBmdW5jdGlvbiAoIGJveCApIHsKCgkJCXJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJgoJCQkJdGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4LnkgJiYKCQkJCXRoaXMubWluLnogPD0gYm94Lm1pbi56ICYmIGJveC5tYXgueiA8PSB0aGlzLm1heC56OwoKCQl9LAoKCQlnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHsKCgkJCS8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94CgkJCS8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuCgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuc2V0KAoJCQkJKCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLAoJCQkJKCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLAoJCQkJKCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApCgkJCSk7CgoJCX0sCgoJCWludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJLy8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuCgkJCXJldHVybiBib3gubWF4LnggPCB0aGlzLm1pbi54IHx8IGJveC5taW4ueCA+IHRoaXMubWF4LnggfHwKCQkJCWJveC5tYXgueSA8IHRoaXMubWluLnkgfHwgYm94Lm1pbi55ID4gdGhpcy5tYXgueSB8fAoJCQkJYm94Lm1heC56IDwgdGhpcy5taW4ueiB8fCBib3gubWluLnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlOwoKCQl9LAoKCQlpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCS8vIEZpbmQgdGhlIHBvaW50IG9uIHRoZSBBQUJCIGNsb3Nlc3QgdG8gdGhlIHNwaGVyZSBjZW50ZXIuCgkJCXRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgX3ZlY3RvciQyICk7CgoJCQkvLyBJZiB0aGF0IHBvaW50IGlzIGluc2lkZSB0aGUgc3BoZXJlLCB0aGUgQUFCQiBhbmQgc3BoZXJlIGludGVyc2VjdC4KCQkJcmV0dXJuIF92ZWN0b3IkMi5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkgewoKCQkJLy8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlcwoJCQkvLyBhcmUgb24gdGhlIHNhbWUgc2lkZSAoYmFjayBvciBmcm9udCkgb2YgdGhlIHBsYW5lLCB0aGVuIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi4KCgkJCXZhciBtaW4sIG1heDsKCgkJCWlmICggcGxhbmUubm9ybWFsLnggPiAwICkgewoKCQkJCW1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDsKCQkJCW1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDsKCgkJCX0gZWxzZSB7CgoJCQkJbWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1heC54OwoJCQkJbWF4ID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54OwoKCQkJfQoKCQkJaWYgKCBwbGFuZS5ub3JtYWwueSA+IDAgKSB7CgoJCQkJbWluICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTsKCQkJCW1heCArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7CgoJCQl9IGVsc2UgewoKCQkJCW1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7CgkJCQltYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55OwoKCQkJfQoKCQkJaWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7CgoJCQkJbWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5taW4uejsKCQkJCW1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7CgoJCQl9IGVsc2UgewoKCQkJCW1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7CgkJCQltYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56OwoKCQkJfQoKCQkJcmV0dXJuICggbWluIDw9IC0gcGxhbmUuY29uc3RhbnQgJiYgbWF4ID49IC0gcGxhbmUuY29uc3RhbnQgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1RyaWFuZ2xlOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkgewoKCQkJaWYgKCB0aGlzLmlzRW1wdHkoKSApIHsKCgkJCQlyZXR1cm4gZmFsc2U7CgoJCQl9CgoJCQkvLyBjb21wdXRlIGJveCBjZW50ZXIgYW5kIGV4dGVudHMKCQkJdGhpcy5nZXRDZW50ZXIoIF9jZW50ZXIgKTsKCQkJX2V4dGVudHMuc3ViVmVjdG9ycyggdGhpcy5tYXgsIF9jZW50ZXIgKTsKCgkJCS8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpbgoJCQlfdjAuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgX2NlbnRlciApOwoJCQlfdjEkMi5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBfY2VudGVyICk7CgkJCV92Mi5zdWJWZWN0b3JzKCB0cmlhbmdsZS5jLCBfY2VudGVyICk7CgoJCQkvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGUKCQkJX2YwLnN1YlZlY3RvcnMoIF92MSQyLCBfdjAgKTsKCQkJX2YxLnN1YlZlY3RvcnMoIF92MiwgX3YxJDIgKTsKCQkJX2YyLnN1YlZlY3RvcnMoIF92MCwgX3YyICk7CgoJCQkvLyB0ZXN0IGFnYWluc3QgYXhlcyB0aGF0IGFyZSBnaXZlbiBieSBjcm9zcyBwcm9kdWN0IGNvbWJpbmF0aW9ucyBvZiB0aGUgZWRnZXMgb2YgdGhlIHRyaWFuZ2xlIGFuZCB0aGUgZWRnZXMgb2YgdGhlIGFhYmIKCQkJLy8gbWFrZSBhbiBheGlzIHRlc3Rpbmcgb2YgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgYWFiYiBhZ2FpbnN0IGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlID0gOSBheGlzIG9mIHNlcGFyYXRpb24KCQkJLy8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKQoJCQl2YXIgYXhlcyA9IFsKCQkJCTAsIC0gX2YwLnosIF9mMC55LCAwLCAtIF9mMS56LCBfZjEueSwgMCwgLSBfZjIueiwgX2YyLnksCgkJCQlfZjAueiwgMCwgLSBfZjAueCwgX2YxLnosIDAsIC0gX2YxLngsIF9mMi56LCAwLCAtIF9mMi54LAoJCQkJLSBfZjAueSwgX2YwLngsIDAsIC0gX2YxLnksIF9mMS54LCAwLCAtIF9mMi55LCBfZjIueCwgMAoJCQldOwoJCQlpZiAoICEgc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEkMiwgX3YyLCBfZXh0ZW50cyApICkgewoKCQkJCXJldHVybiBmYWxzZTsKCgkJCX0KCgkJCS8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYgoJCQlheGVzID0gWyAxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxIF07CgkJCWlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAsIF92MSQyLCBfdjIsIF9leHRlbnRzICkgKSB7CgoJCQkJcmV0dXJuIGZhbHNlOwoKCQkJfQoKCQkJLy8gZmluYWxseSB0ZXN0aW5nIHRoZSBmYWNlIG5vcm1hbCBvZiB0aGUgdHJpYW5nbGUKCQkJLy8gdXNlIGFscmVhZHkgZXhpc3RpbmcgdHJpYW5nbGUgZWRnZSB2ZWN0b3JzIGhlcmUKCQkJX3RyaWFuZ2xlTm9ybWFsLmNyb3NzVmVjdG9ycyggX2YwLCBfZjEgKTsKCQkJYXhlcyA9IFsgX3RyaWFuZ2xlTm9ybWFsLngsIF90cmlhbmdsZU5vcm1hbC55LCBfdHJpYW5nbGVOb3JtYWwueiBdOwoKCQkJcmV0dXJuIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCwgX3YxJDIsIF92MiwgX2V4dGVudHMgKTsKCgkJfSwKCgkJY2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkgewoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTsKCgkJfSwKCgkJZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkgewoKCQkJdmFyIGNsYW1wZWRQb2ludCA9IF92ZWN0b3IkMi5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTsKCgkJCXJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpOwoKCQl9LAoKCQlnZXRCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5Cb3gzOiAuZ2V0Qm91bmRpbmdTcGhlcmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJLy90YXJnZXQgPSBuZXcgU3BoZXJlKCk7IC8vIHJlbW92ZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kKCgkJCX0KCgkJCXRoaXMuZ2V0Q2VudGVyKCB0YXJnZXQuY2VudGVyICk7CgoJCQl0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKCBfdmVjdG9yJDIgKS5sZW5ndGgoKSAqIDAuNTsKCgkJCXJldHVybiB0YXJnZXQ7CgoJCX0sCgoJCWludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQl0aGlzLm1pbi5tYXgoIGJveC5taW4gKTsKCQkJdGhpcy5tYXgubWluKCBib3gubWF4ICk7CgoJCQkvLyBlbnN1cmUgdGhhdCBpZiB0aGVyZSBpcyBubyBvdmVybGFwLCB0aGUgcmVzdWx0IGlzIGZ1bGx5IGVtcHR5LCBub3Qgc2xpZ2h0bHkgZW1wdHkgd2l0aCBub24taW5mLytpbmYgdmFsdWVzIHRoYXQgd2lsbCBjYXVzZSBzdWJzZXF1ZW5jZSBpbnRlcnNlY3RzIHRvIGVycm9uZW91c2x5IHJldHVybiB2YWxpZCB2YWx1ZXMuCgkJCWlmICggdGhpcy5pc0VtcHR5KCkgKSB7IHRoaXMubWFrZUVtcHR5KCk7IH0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl1bmlvbjogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQl0aGlzLm1pbi5taW4oIGJveC5taW4gKTsKCQkJdGhpcy5tYXgubWF4KCBib3gubWF4ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHsKCgkJCS8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LgoJCQlpZiAoIHRoaXMuaXNFbXB0eSgpICkgeyByZXR1cm4gdGhpczsgfQoKCQkJLy8gTk9URTogSSBhbSB1c2luZyBhIGJpbmFyeSBwYXR0ZXJuIHRvIHNwZWNpZnkgYWxsIDJeMyBjb21iaW5hdGlvbnMgYmVsb3cKCQkJX3BvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMAoJCQlfcG9pbnRzWyAxIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAxCgkJCV9wb2ludHNbIDIgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTAKCQkJX3BvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMQoJCQlfcG9pbnRzWyA0IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAwCgkJCV9wb2ludHNbIDUgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDEKCQkJX3BvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMAoJCQlfcG9pbnRzWyA3IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTExCgoJCQl0aGlzLnNldEZyb21Qb2ludHMoIF9wb2ludHMgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkgewoKCQkJdGhpcy5taW4uYWRkKCBvZmZzZXQgKTsKCQkJdGhpcy5tYXguYWRkKCBvZmZzZXQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQllcXVhbHM6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJcmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApOwoKCQl9CgoJfSApOwoKCWZ1bmN0aW9uIHNhdEZvckF4ZXMoIGF4ZXMsIHYwLCB2MSwgdjIsIGV4dGVudHMgKSB7CgoJCXZhciBpLCBqOwoKCQlmb3IgKCBpID0gMCwgaiA9IGF4ZXMubGVuZ3RoIC0gMzsgaSA8PSBqOyBpICs9IDMgKSB7CgoJCQlfdGVzdEF4aXMuZnJvbUFycmF5KCBheGVzLCBpICk7CgkJCS8vIHByb2plY3QgdGhlIGFhYmIgb250byB0aGUgc2VwZXJhdGluZyBheGlzCgkJCXZhciByID0gZXh0ZW50cy54ICogTWF0aC5hYnMoIF90ZXN0QXhpcy54ICkgKyBleHRlbnRzLnkgKiBNYXRoLmFicyggX3Rlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCBfdGVzdEF4aXMueiApOwoJCQkvLyBwcm9qZWN0IGFsbCAzIHZlcnRpY2VzIG9mIHRoZSB0cmlhbmdsZSBvbnRvIHRoZSBzZXBlcmF0aW5nIGF4aXMKCQkJdmFyIHAwID0gdjAuZG90KCBfdGVzdEF4aXMgKTsKCQkJdmFyIHAxID0gdjEuZG90KCBfdGVzdEF4aXMgKTsKCQkJdmFyIHAyID0gdjIuZG90KCBfdGVzdEF4aXMgKTsKCQkJLy8gYWN0dWFsIHRlc3QsIGJhc2ljYWxseSBzZWUgaWYgZWl0aGVyIG9mIHRoZSBtb3N0IGV4dHJlbWUgb2YgdGhlIHRyaWFuZ2xlIHBvaW50cyBpbnRlcnNlY3RzIHIKCQkJaWYgKCBNYXRoLm1heCggLSBNYXRoLm1heCggcDAsIHAxLCBwMiApLCBNYXRoLm1pbiggcDAsIHAxLCBwMiApICkgPiByICkgewoKCQkJCS8vIHBvaW50cyBvZiB0aGUgcHJvamVjdGVkIHRyaWFuZ2xlIGFyZSBvdXRzaWRlIHRoZSBwcm9qZWN0ZWQgaGFsZi1sZW5ndGggb2YgdGhlIGFhYmIKCQkJCS8vIHRoZSBheGlzIGlzIHNlcGVyYXRpbmcgYW5kIHdlIGNhbiBleGl0CgkJCQlyZXR1cm4gZmFsc2U7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIHRydWU7CgoJfQoKCXZhciBfYm94JDEgPSBuZXcgQm94MygpOwoKCS8qKgoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFNwaGVyZSggY2VudGVyLCByYWRpdXMgKSB7CgoJCXRoaXMuY2VudGVyID0gKCBjZW50ZXIgIT09IHVuZGVmaW5lZCApID8gY2VudGVyIDogbmV3IFZlY3RvcjMoKTsKCQl0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDA7CgoJfQoKCU9iamVjdC5hc3NpZ24oIFNwaGVyZS5wcm90b3R5cGUsIHsKCgkJc2V0OiBmdW5jdGlvbiAoIGNlbnRlciwgcmFkaXVzICkgewoKCQkJdGhpcy5jZW50ZXIuY29weSggY2VudGVyICk7CgkJCXRoaXMucmFkaXVzID0gcmFkaXVzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzLCBvcHRpb25hbENlbnRlciApIHsKCgkJCXZhciBjZW50ZXIgPSB0aGlzLmNlbnRlcjsKCgkJCWlmICggb3B0aW9uYWxDZW50ZXIgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljZW50ZXIuY29weSggb3B0aW9uYWxDZW50ZXIgKTsKCgkJCX0gZWxzZSB7CgoJCQkJX2JveCQxLnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7CgoJCQl9CgoJCQl2YXIgbWF4UmFkaXVzU3EgPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQltYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7CgoJCQl9CgoJCQl0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCXRoaXMuY2VudGVyLmNvcHkoIHNwaGVyZS5jZW50ZXIgKTsKCQkJdGhpcy5yYWRpdXMgPSBzcGhlcmUucmFkaXVzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVtcHR5OiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gKCB0aGlzLnJhZGl1cyA8PSAwICk7CgoJCX0sCgoJCWNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQlyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApOwoKCQl9LAoKCQlkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQlyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvKCB0aGlzLmNlbnRlciApIC0gdGhpcy5yYWRpdXMgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7CgoJCQl2YXIgcmFkaXVzU3VtID0gdGhpcy5yYWRpdXMgKyBzcGhlcmUucmFkaXVzOwoKCQkJcmV0dXJuIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCByYWRpdXNTdW0gKiByYWRpdXNTdW0gKTsKCgkJfSwKCgkJaW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQlyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkgewoKCQkJcmV0dXJuIE1hdGguYWJzKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMuY2VudGVyICkgKSA8PSB0aGlzLnJhZGl1czsKCgkJfSwKCgkJY2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkgewoKCQkJdmFyIGRlbHRhTGVuZ3RoU3EgPSB0aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJdGFyZ2V0LmNvcHkoIHBvaW50ICk7CgoJCQlpZiAoIGRlbHRhTGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHsKCgkJCQl0YXJnZXQuc3ViKCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpOwoJCQkJdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCB0aGlzLnJhZGl1cyApLmFkZCggdGhpcy5jZW50ZXIgKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQ7CgoJCX0sCgoJCWdldEJvdW5kaW5nQm94OiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuZ2V0Qm91bmRpbmdCb3goKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IEJveDMoKTsKCgkJCX0KCgkJCXRhcmdldC5zZXQoIHRoaXMuY2VudGVyLCB0aGlzLmNlbnRlciApOwoJCQl0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7CgoJCQlyZXR1cm4gdGFyZ2V0OwoKCQl9LAoKCQlhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkgewoKCQkJdGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsKCQkJdGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7CgoJCQl0aGlzLmNlbnRlci5hZGQoIG9mZnNldCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVxdWFsczogZnVuY3Rpb24gKCBzcGhlcmUgKSB7CgoJCQlyZXR1cm4gc3BoZXJlLmNlbnRlci5lcXVhbHMoIHRoaXMuY2VudGVyICkgJiYgKCBzcGhlcmUucmFkaXVzID09PSB0aGlzLnJhZGl1cyApOwoKCQl9CgoJfSApOwoKCXZhciBfdmVjdG9yJDMgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9zZWdDZW50ZXIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9zZWdEaXIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9kaWZmID0gbmV3IFZlY3RvcjMoKTsKCgl2YXIgX2VkZ2UxID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfZWRnZTIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9ub3JtYWwgPSBuZXcgVmVjdG9yMygpOwoKCS8qKgoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICovCgoJZnVuY3Rpb24gUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApIHsKCgkJdGhpcy5vcmlnaW4gPSAoIG9yaWdpbiAhPT0gdW5kZWZpbmVkICkgPyBvcmlnaW4gOiBuZXcgVmVjdG9yMygpOwoJCXRoaXMuZGlyZWN0aW9uID0gKCBkaXJlY3Rpb24gIT09IHVuZGVmaW5lZCApID8gZGlyZWN0aW9uIDogbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApOwoKCX0KCglPYmplY3QuYXNzaWduKCBSYXkucHJvdG90eXBlLCB7CgoJCXNldDogZnVuY3Rpb24gKCBvcmlnaW4sIGRpcmVjdGlvbiApIHsKCgkJCXRoaXMub3JpZ2luLmNvcHkoIG9yaWdpbiApOwoJCQl0aGlzLmRpcmVjdGlvbi5jb3B5KCBkaXJlY3Rpb24gKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHJheSApIHsKCgkJCXRoaXMub3JpZ2luLmNvcHkoIHJheS5vcmlnaW4gKTsKCQkJdGhpcy5kaXJlY3Rpb24uY29weSggcmF5LmRpcmVjdGlvbiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5vcmlnaW4gKTsKCgkJfSwKCgkJbG9va0F0OiBmdW5jdGlvbiAoIHYgKSB7CgoJCQl0aGlzLmRpcmVjdGlvbi5jb3B5KCB2ICkuc3ViKCB0aGlzLm9yaWdpbiApLm5vcm1hbGl6ZSgpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXJlY2FzdDogZnVuY3Rpb24gKCB0ICkgewoKCQkJdGhpcy5vcmlnaW4uY29weSggdGhpcy5hdCggdCwgX3ZlY3RvciQzICkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXRhcmdldC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKTsKCgkJCXZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IHRhcmdldC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7CgoJCQlpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHsKCgkJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICk7CgoJCQl9CgoJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIGRpcmVjdGlvbkRpc3RhbmNlICkuYWRkKCB0aGlzLm9yaWdpbiApOwoKCQl9LAoKCQlkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQlyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApICk7CgoJCX0sCgoJCWRpc3RhbmNlU3FUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkgewoKCQkJdmFyIGRpcmVjdGlvbkRpc3RhbmNlID0gX3ZlY3RvciQzLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTsKCgkJCS8vIHBvaW50IGJlaGluZCB0aGUgcmF5CgoJCQlpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHsKCgkJCQlyZXR1cm4gdGhpcy5vcmlnaW4uZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7CgoJCQl9CgoJCQlfdmVjdG9yJDMuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7CgoJCQlyZXR1cm4gX3ZlY3RvciQzLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApOwoKCQl9LAoKCQlkaXN0YW5jZVNxVG9TZWdtZW50OiBmdW5jdGlvbiAoIHYwLCB2MSwgb3B0aW9uYWxQb2ludE9uUmF5LCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkgewoKCQkJLy8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50LmgKCQkJLy8gSXQgcmV0dXJucyB0aGUgbWluIGRpc3RhbmNlIGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIHNlZ21lbnQKCQkJLy8gZGVmaW5lZCBieSB2MCBhbmQgdjEKCQkJLy8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDoKCQkJLy8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgcmF5CgkJCS8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNlZ21lbnQKCgkJCV9zZWdDZW50ZXIuY29weSggdjAgKS5hZGQoIHYxICkubXVsdGlwbHlTY2FsYXIoIDAuNSApOwoJCQlfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpOwoJCQlfZGlmZi5jb3B5KCB0aGlzLm9yaWdpbiApLnN1YiggX3NlZ0NlbnRlciApOwoKCQkJdmFyIHNlZ0V4dGVudCA9IHYwLmRpc3RhbmNlVG8oIHYxICkgKiAwLjU7CgkJCXZhciBhMDEgPSAtIHRoaXMuZGlyZWN0aW9uLmRvdCggX3NlZ0RpciApOwoJCQl2YXIgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7CgkJCXZhciBiMSA9IC0gX2RpZmYuZG90KCBfc2VnRGlyICk7CgkJCXZhciBjID0gX2RpZmYubGVuZ3RoU3EoKTsKCQkJdmFyIGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7CgkJCXZhciBzMCwgczEsIHNxckRpc3QsIGV4dERldDsKCgkJCWlmICggZGV0ID4gMCApIHsKCgkJCQkvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuCgoJCQkJczAgPSBhMDEgKiBiMSAtIGIwOwoJCQkJczEgPSBhMDEgKiBiMCAtIGIxOwoJCQkJZXh0RGV0ID0gc2VnRXh0ZW50ICogZGV0OwoKCQkJCWlmICggczAgPj0gMCApIHsKCgkJCQkJaWYgKCBzMSA+PSAtIGV4dERldCApIHsKCgkJCQkJCWlmICggczEgPD0gZXh0RGV0ICkgewoKCQkJCQkJCS8vIHJlZ2lvbiAwCgkJCQkJCQkvLyBNaW5pbXVtIGF0IGludGVyaW9yIHBvaW50cyBvZiByYXkgYW5kIHNlZ21lbnQuCgoJCQkJCQkJdmFyIGludkRldCA9IDEgLyBkZXQ7CgkJCQkJCQlzMCAqPSBpbnZEZXQ7CgkJCQkJCQlzMSAqPSBpbnZEZXQ7CgkJCQkJCQlzcXJEaXN0ID0gczAgKiAoIHMwICsgYTAxICogczEgKyAyICogYjAgKSArIHMxICogKCBhMDEgKiBzMCArIHMxICsgMiAqIGIxICkgKyBjOwoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkvLyByZWdpb24gMQoKCQkJCQkJCXMxID0gc2VnRXh0ZW50OwoJCQkJCQkJczAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApOwoJCQkJCQkJc3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYzsKCgkJCQkJCX0KCgkJCQkJfSBlbHNlIHsKCgkJCQkJCS8vIHJlZ2lvbiA1CgoJCQkJCQlzMSA9IC0gc2VnRXh0ZW50OwoJCQkJCQlzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7CgkJCQkJCXNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQlpZiAoIHMxIDw9IC0gZXh0RGV0ICkgewoKCQkJCQkJLy8gcmVnaW9uIDQKCgkJCQkJCXMwID0gTWF0aC5tYXgoIDAsIC0gKCAtIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTsKCQkJCQkJczEgPSAoIHMwID4gMCApID8gLSBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApOwoJCQkJCQlzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjOwoKCQkJCQl9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7CgoJCQkJCQkvLyByZWdpb24gMwoKCQkJCQkJczAgPSAwOwoJCQkJCQlzMSA9IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7CgkJCQkJCXNxckRpc3QgPSBzMSAqICggczEgKyAyICogYjEgKSArIGM7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyByZWdpb24gMgoKCQkJCQkJczAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTsKCQkJCQkJczEgPSAoIHMwID4gMCApID8gc2VnRXh0ZW50IDogTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTsKCQkJCQkJc3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYzsKCgkJCQkJfQoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJLy8gUmF5IGFuZCBzZWdtZW50IGFyZSBwYXJhbGxlbC4KCgkJCQlzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7CgkJCQlzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7CgkJCQlzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjOwoKCQkJfQoKCQkJaWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7CgoJCQkJb3B0aW9uYWxQb2ludE9uUmF5LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHMwICkuYWRkKCB0aGlzLm9yaWdpbiApOwoKCQkJfQoKCQkJaWYgKCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkgewoKCQkJCW9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggX3NlZ0RpciApLm11bHRpcGx5U2NhbGFyKCBzMSApLmFkZCggX3NlZ0NlbnRlciApOwoKCQkJfQoKCQkJcmV0dXJuIHNxckRpc3Q7CgoJCX0sCgoJCWludGVyc2VjdFNwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUsIHRhcmdldCApIHsKCgkJCV92ZWN0b3IkMy5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApOwoJCQl2YXIgdGNhID0gX3ZlY3RvciQzLmRvdCggdGhpcy5kaXJlY3Rpb24gKTsKCQkJdmFyIGQyID0gX3ZlY3RvciQzLmRvdCggX3ZlY3RvciQzICkgLSB0Y2EgKiB0Y2E7CgkJCXZhciByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7CgoJCQlpZiAoIGQyID4gcmFkaXVzMiApIHsgcmV0dXJuIG51bGw7IH0KCgkJCXZhciB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApOwoKCQkJLy8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmUKCQkJdmFyIHQwID0gdGNhIC0gdGhjOwoKCQkJLy8gdDEgPSBzZWNvbmQgaW50ZXJzZWN0IHBvaW50IC0gZXhpdCBwb2ludCBvbiBiYWNrIG9mIHNwaGVyZQoJCQl2YXIgdDEgPSB0Y2EgKyB0aGM7CgoJCQkvLyB0ZXN0IHRvIHNlZSBpZiBib3RoIHQwIGFuZCB0MSBhcmUgYmVoaW5kIHRoZSByYXkgLSBpZiBzbywgcmV0dXJuIG51bGwKCQkJaWYgKCB0MCA8IDAgJiYgdDEgPCAwICkgeyByZXR1cm4gbnVsbDsgfQoKCQkJLy8gdGVzdCB0byBzZWUgaWYgdDAgaXMgYmVoaW5kIHRoZSByYXk6CgkJCS8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSwKCQkJLy8gaW4gb3JkZXIgdG8gYWx3YXlzIHJldHVybiBhbiBpbnRlcnNlY3QgcG9pbnQgdGhhdCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LgoJCQlpZiAoIHQwIDwgMCApIHsgcmV0dXJuIHRoaXMuYXQoIHQxLCB0YXJnZXQgKTsgfQoKCQkJLy8gZWxzZSB0MCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LCBzbyByZXR1cm4gdGhlIGZpcnN0IGNvbGxpc2lvbiBwb2ludCBzY2FsZWQgYnkgdDAKCQkJcmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7CgoJCQlyZXR1cm4gdGhpcy5kaXN0YW5jZVNxVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTsKCgkJfSwKCgkJZGlzdGFuY2VUb1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkgewoKCQkJdmFyIGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTsKCgkJCWlmICggZGVub21pbmF0b3IgPT09IDAgKSB7CgoJCQkJLy8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpbgoJCQkJaWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7CgoJCQkJCXJldHVybiAwOwoKCQkJCX0KCgkJCQkvLyBOdWxsIGlzIHByZWZlcmFibGUgdG8gdW5kZWZpbmVkIHNpbmNlIHVuZGVmaW5lZCBtZWFucy4uLi4gaXQgaXMgdW5kZWZpbmVkCgoJCQkJcmV0dXJuIG51bGw7CgoJCQl9CgoJCQl2YXIgdCA9IC0gKCB0aGlzLm9yaWdpbi5kb3QoIHBsYW5lLm5vcm1hbCApICsgcGxhbmUuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yOwoKCQkJLy8gUmV0dXJuIGlmIHRoZSByYXkgbmV2ZXIgaW50ZXJzZWN0cyB0aGUgcGxhbmUKCgkJCXJldHVybiB0ID49IDAgPyB0IDogbnVsbDsKCgkJfSwKCgkJaW50ZXJzZWN0UGxhbmU6IGZ1bmN0aW9uICggcGxhbmUsIHRhcmdldCApIHsKCgkJCXZhciB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7CgoJCQlpZiAoIHQgPT09IG51bGwgKSB7CgoJCQkJcmV0dXJuIG51bGw7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5hdCggdCwgdGFyZ2V0ICk7CgoJCX0sCgoJCWludGVyc2VjdHNQbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHsKCgkJCS8vIGNoZWNrIGlmIHRoZSByYXkgbGllcyBvbiB0aGUgcGxhbmUgZmlyc3QKCgkJCXZhciBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTsKCgkJCWlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7CgoJCQkJcmV0dXJuIHRydWU7CgoJCQl9CgoJCQl2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApOwoKCQkJaWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHsKCgkJCQlyZXR1cm4gdHJ1ZTsKCgkJCX0KCgkJCS8vIHJheSBvcmlnaW4gaXMgYmVoaW5kIHRoZSBwbGFuZSAoYW5kIGlzIHBvaW50aW5nIGJlaGluZCBpdCkKCgkJCXJldHVybiBmYWxzZTsKCgkJfSwKCgkJaW50ZXJzZWN0Qm94OiBmdW5jdGlvbiAoIGJveCwgdGFyZ2V0ICkgewoKCQkJdmFyIHRtaW4sIHRtYXgsIHR5bWluLCB0eW1heCwgdHptaW4sIHR6bWF4OwoKCQkJdmFyIGludmRpcnggPSAxIC8gdGhpcy5kaXJlY3Rpb24ueCwKCQkJCWludmRpcnkgPSAxIC8gdGhpcy5kaXJlY3Rpb24ueSwKCQkJCWludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejsKCgkJCXZhciBvcmlnaW4gPSB0aGlzLm9yaWdpbjsKCgkJCWlmICggaW52ZGlyeCA+PSAwICkgewoKCQkJCXRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4OwoJCQkJdG1heCA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7CgoJCQl9IGVsc2UgewoKCQkJCXRtaW4gPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4OwoJCQkJdG1heCA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7CgoJCQl9CgoJCQlpZiAoIGludmRpcnkgPj0gMCApIHsKCgkJCQl0eW1pbiA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7CgkJCQl0eW1heCA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7CgoJCQl9IGVsc2UgewoKCQkJCXR5bWluID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTsKCQkJCXR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTsKCgkJCX0KCgkJCWlmICggKCB0bWluID4gdHltYXggKSB8fCAoIHR5bWluID4gdG1heCApICkgeyByZXR1cm4gbnVsbDsgfQoKCQkJLy8gVGhlc2UgbGluZXMgYWxzbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdG1pbiBvciB0bWF4IGlzIE5hTgoJCQkvLyAocmVzdWx0IG9mIDAgKiBJbmZpbml0eSkuIHggIT09IHggcmV0dXJucyB0cnVlIGlmIHggaXMgTmFOCgoJCQlpZiAoIHR5bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgeyB0bWluID0gdHltaW47IH0KCgkJCWlmICggdHltYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB7IHRtYXggPSB0eW1heDsgfQoKCQkJaWYgKCBpbnZkaXJ6ID49IDAgKSB7CgoJCQkJdHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6OwoJCQkJdHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6OwoKCQkJfSBlbHNlIHsKCgkJCQl0em1pbiA9ICggYm94Lm1heC56IC0gb3JpZ2luLnogKSAqIGludmRpcno7CgkJCQl0em1heCA9ICggYm94Lm1pbi56IC0gb3JpZ2luLnogKSAqIGludmRpcno7CgoJCQl9CgoJCQlpZiAoICggdG1pbiA+IHR6bWF4ICkgfHwgKCB0em1pbiA+IHRtYXggKSApIHsgcmV0dXJuIG51bGw7IH0KCgkJCWlmICggdHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB7IHRtaW4gPSB0em1pbjsgfQoKCQkJaWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHsgdG1heCA9IHR6bWF4OyB9CgoJCQkvL3JldHVybiBwb2ludCBjbG9zZXN0IHRvIHRoZSByYXkgKHBvc2l0aXZlIHNpZGUpCgoJCQlpZiAoIHRtYXggPCAwICkgeyByZXR1cm4gbnVsbDsgfQoKCQkJcmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQlyZXR1cm4gdGhpcy5pbnRlcnNlY3RCb3goIGJveCwgX3ZlY3RvciQzICkgIT09IG51bGw7CgoJCX0sCgoJCWludGVyc2VjdFRyaWFuZ2xlOiBmdW5jdGlvbiAoIGEsIGIsIGMsIGJhY2tmYWNlQ3VsbGluZywgdGFyZ2V0ICkgewoKCQkJLy8gQ29tcHV0ZSB0aGUgb2Zmc2V0IG9yaWdpbiwgZWRnZXMsIGFuZCBub3JtYWwuCgoJCQkvLyBmcm9tIGh0dHA6Ly93d3cuZ2VvbWV0cmljdG9vbHMuY29tL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaAoKCQkJX2VkZ2UxLnN1YlZlY3RvcnMoIGIsIGEgKTsKCQkJX2VkZ2UyLnN1YlZlY3RvcnMoIGMsIGEgKTsKCQkJX25vcm1hbC5jcm9zc1ZlY3RvcnMoIF9lZGdlMSwgX2VkZ2UyICk7CgoJCQkvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbiwKCQkJLy8gRTEgPSBrRWRnZTEsIEUyID0ga0VkZ2UyLCBOID0gQ3Jvc3MoRTEsRTIpKSBieQoJCQkvLyAgIHxEb3QoRCxOKXwqYjEgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhRLEUyKSkKCQkJLy8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpCgkJCS8vICAgfERvdChELE4pfCp0ID0gLXNpZ24oRG90KEQsTikpKkRvdChRLE4pCgkJCXZhciBEZE4gPSB0aGlzLmRpcmVjdGlvbi5kb3QoIF9ub3JtYWwgKTsKCQkJdmFyIHNpZ247CgoJCQlpZiAoIERkTiA+IDAgKSB7CgoJCQkJaWYgKCBiYWNrZmFjZUN1bGxpbmcgKSB7IHJldHVybiBudWxsOyB9CgkJCQlzaWduID0gMTsKCgkJCX0gZWxzZSBpZiAoIERkTiA8IDAgKSB7CgoJCQkJc2lnbiA9IC0gMTsKCQkJCURkTiA9IC0gRGROOwoKCQkJfSBlbHNlIHsKCgkJCQlyZXR1cm4gbnVsbDsKCgkJCX0KCgkJCV9kaWZmLnN1YlZlY3RvcnMoIHRoaXMub3JpZ2luLCBhICk7CgkJCXZhciBEZFF4RTIgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTIuY3Jvc3NWZWN0b3JzKCBfZGlmZiwgX2VkZ2UyICkgKTsKCgkJCS8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uCgkJCWlmICggRGRReEUyIDwgMCApIHsKCgkJCQlyZXR1cm4gbnVsbDsKCgkJCX0KCgkJCXZhciBEZEUxeFEgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTEuY3Jvc3MoIF9kaWZmICkgKTsKCgkJCS8vIGIyIDwgMCwgbm8gaW50ZXJzZWN0aW9uCgkJCWlmICggRGRFMXhRIDwgMCApIHsKCgkJCQlyZXR1cm4gbnVsbDsKCgkJCX0KCgkJCS8vIGIxK2IyID4gMSwgbm8gaW50ZXJzZWN0aW9uCgkJCWlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkgewoKCQkJCXJldHVybiBudWxsOwoKCQkJfQoKCQkJLy8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy4KCQkJdmFyIFFkTiA9IC0gc2lnbiAqIF9kaWZmLmRvdCggX25vcm1hbCApOwoKCQkJLy8gdCA8IDAsIG5vIGludGVyc2VjdGlvbgoJCQlpZiAoIFFkTiA8IDAgKSB7CgoJCQkJcmV0dXJuIG51bGw7CgoJCQl9CgoJCQkvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS4KCQkJcmV0dXJuIHRoaXMuYXQoIFFkTiAvIERkTiwgdGFyZ2V0ICk7CgoJCX0sCgoJCWFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXg0ICkgewoKCQkJdGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KCBtYXRyaXg0ICk7CgkJCXRoaXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4NCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVxdWFsczogZnVuY3Rpb24gKCByYXkgKSB7CgoJCQlyZXR1cm4gcmF5Lm9yaWdpbi5lcXVhbHMoIHRoaXMub3JpZ2luICkgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHMoIHRoaXMuZGlyZWN0aW9uICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKi8KCgl2YXIgX3ZlY3RvcjEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92ZWN0b3IyID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKTsKCglmdW5jdGlvbiBQbGFuZSggbm9ybWFsLCBjb25zdGFudCApIHsKCgkJLy8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZAoKCQl0aGlzLm5vcm1hbCA9ICggbm9ybWFsICE9PSB1bmRlZmluZWQgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7CgkJdGhpcy5jb25zdGFudCA9ICggY29uc3RhbnQgIT09IHVuZGVmaW5lZCApID8gY29uc3RhbnQgOiAwOwoKCX0KCglPYmplY3QuYXNzaWduKCBQbGFuZS5wcm90b3R5cGUsIHsKCgkJaXNQbGFuZTogdHJ1ZSwKCgkJc2V0OiBmdW5jdGlvbiAoIG5vcm1hbCwgY29uc3RhbnQgKSB7CgoJCQl0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTsKCQkJdGhpcy5jb25zdGFudCA9IGNvbnN0YW50OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldENvbXBvbmVudHM6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHsKCgkJCXRoaXMubm9ybWFsLnNldCggeCwgeSwgeiApOwoJCQl0aGlzLmNvbnN0YW50ID0gdzsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludDogZnVuY3Rpb24gKCBub3JtYWwsIHBvaW50ICkgewoKCQkJdGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7CgkJCXRoaXMuY29uc3RhbnQgPSAtIHBvaW50LmRvdCggdGhpcy5ub3JtYWwgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tQ29wbGFuYXJQb2ludHM6IGZ1bmN0aW9uICggYSwgYiwgYyApIHsKCgkJCXZhciBub3JtYWwgPSBfdmVjdG9yMS5zdWJWZWN0b3JzKCBjLCBiICkuY3Jvc3MoIF92ZWN0b3IyLnN1YlZlY3RvcnMoIGEsIGIgKSApLm5vcm1hbGl6ZSgpOwoKCQkJLy8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT8KCgkJCXRoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIG5vcm1hbCwgYSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggcGxhbmUgKSB7CgoJCQl0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTsKCQkJdGhpcy5jb25zdGFudCA9IHBsYW5lLmNvbnN0YW50OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW5vcm1hbGl6ZTogZnVuY3Rpb24gKCkgewoKCQkJLy8gTm90ZTogd2lsbCBsZWFkIHRvIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIHBsYW5lIGlzIGludmFsaWQuCgoJCQl2YXIgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpOwoJCQl0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApOwoJCQl0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbmVnYXRlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmNvbnN0YW50ICo9IC0gMTsKCQkJdGhpcy5ub3JtYWwubmVnYXRlKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkgewoKCQkJcmV0dXJuIHRoaXMubm9ybWFsLmRvdCggcG9pbnQgKSArIHRoaXMuY29uc3RhbnQ7CgoJCX0sCgoJCWRpc3RhbmNlVG9TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkgewoKCQkJcmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgLSBzcGhlcmUucmFkaXVzOwoKCQl9LAoKCQlwcm9qZWN0UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5wcm9qZWN0UG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSApLmFkZCggcG9pbnQgKTsKCgkJfSwKCgkJaW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKCBsaW5lLCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlBsYW5lOiAuaW50ZXJzZWN0TGluZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJdmFyIGRpcmVjdGlvbiA9IGxpbmUuZGVsdGEoIF92ZWN0b3IxICk7CgoJCQl2YXIgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoIGRpcmVjdGlvbiApOwoKCQkJaWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHsKCgkJCQkvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luCgkJCQlpZiAoIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICkgPT09IDAgKSB7CgoJCQkJCXJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApOwoKCQkJCX0KCgkJCQkvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS4KCQkJCXJldHVybiB1bmRlZmluZWQ7CgoJCQl9CgoJCQl2YXIgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yOwoKCQkJaWYgKCB0IDwgMCB8fCB0ID4gMSApIHsKCgkJCQlyZXR1cm4gdW5kZWZpbmVkOwoKCQkJfQoKCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBkaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggbGluZS5zdGFydCApOwoKCQl9LAoKCQlpbnRlcnNlY3RzTGluZTogZnVuY3Rpb24gKCBsaW5lICkgewoKCQkJLy8gTm90ZTogdGhpcyB0ZXN0cyBpZiBhIGxpbmUgaW50ZXJzZWN0cyB0aGUgcGxhbmUsIG5vdCB3aGV0aGVyIGl0IChvciBpdHMgZW5kLXBvaW50cykgYXJlIGNvcGxhbmFyIHdpdGggaXQuCgoJCQl2YXIgc3RhcnRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKTsKCQkJdmFyIGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTsKCgkJCXJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQlyZXR1cm4gYm94LmludGVyc2VjdHNQbGFuZSggdGhpcyApOwoKCQl9LAoKCQlpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCXJldHVybiBzcGhlcmUuaW50ZXJzZWN0c1BsYW5lKCB0aGlzICk7CgoJCX0sCgoJCWNvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmNvcGxhbmFyUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmNvbnN0YW50ICk7CgoJCX0sCgoJCWFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXgsIG9wdGlvbmFsTm9ybWFsTWF0cml4ICkgewoKCQkJdmFyIG5vcm1hbE1hdHJpeCA9IG9wdGlvbmFsTm9ybWFsTWF0cml4IHx8IF9ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTsKCgkJCXZhciByZWZlcmVuY2VQb2ludCA9IHRoaXMuY29wbGFuYXJQb2ludCggX3ZlY3RvcjEgKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoKCQkJdmFyIG5vcm1hbCA9IHRoaXMubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7CgoJCQl0aGlzLmNvbnN0YW50ID0gLSByZWZlcmVuY2VQb2ludC5kb3QoIG5vcm1hbCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7CgoJCQl0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QoIHRoaXMubm9ybWFsICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIHBsYW5lICkgewoKCQkJcmV0dXJuIHBsYW5lLm5vcm1hbC5lcXVhbHMoIHRoaXMubm9ybWFsICkgJiYgKCBwbGFuZS5jb25zdGFudCA9PT0gdGhpcy5jb25zdGFudCApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCXZhciBfdjAkMSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3YxJDMgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92MiQxID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdjMgPSBuZXcgVmVjdG9yMygpOwoKCXZhciBfdmFiID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdmFjID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdmJjID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdmFwID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdmJwID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdmNwID0gbmV3IFZlY3RvcjMoKTsKCglmdW5jdGlvbiBUcmlhbmdsZSggYSwgYiwgYyApIHsKCgkJdGhpcy5hID0gKCBhICE9PSB1bmRlZmluZWQgKSA/IGEgOiBuZXcgVmVjdG9yMygpOwoJCXRoaXMuYiA9ICggYiAhPT0gdW5kZWZpbmVkICkgPyBiIDogbmV3IFZlY3RvcjMoKTsKCQl0aGlzLmMgPSAoIGMgIT09IHVuZGVmaW5lZCApID8gYyA6IG5ldyBWZWN0b3IzKCk7CgoJfQoKCU9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLCB7CgoJCWdldE5vcm1hbDogZnVuY3Rpb24gKCBhLCBiLCBjLCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0Tm9ybWFsKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTsKCQkJCXRhcmdldCA9IG5ldyBWZWN0b3IzKCk7CgoJCQl9CgoJCQl0YXJnZXQuc3ViVmVjdG9ycyggYywgYiApOwoJCQlfdjAkMS5zdWJWZWN0b3JzKCBhLCBiICk7CgkJCXRhcmdldC5jcm9zcyggX3YwJDEgKTsKCgkJCXZhciB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpOwoJCQlpZiAoIHRhcmdldExlbmd0aFNxID4gMCApIHsKCgkJCQlyZXR1cm4gdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCAxIC8gTWF0aC5zcXJ0KCB0YXJnZXRMZW5ndGhTcSApICk7CgoJCQl9CgoJCQlyZXR1cm4gdGFyZ2V0LnNldCggMCwgMCwgMCApOwoKCQl9LAoKCQkvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcwoJCS8vIGJhc2VkIG9uOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcG9pbnRpbnBvbHkvZGVmYXVsdC5odG1sCgkJZ2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7CgoJCQlfdjAkMS5zdWJWZWN0b3JzKCBjLCBhICk7CgkJCV92MSQzLnN1YlZlY3RvcnMoIGIsIGEgKTsKCQkJX3YyJDEuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTsKCgkJCXZhciBkb3QwMCA9IF92MCQxLmRvdCggX3YwJDEgKTsKCQkJdmFyIGRvdDAxID0gX3YwJDEuZG90KCBfdjEkMyApOwoJCQl2YXIgZG90MDIgPSBfdjAkMS5kb3QoIF92MiQxICk7CgkJCXZhciBkb3QxMSA9IF92MSQzLmRvdCggX3YxJDMgKTsKCQkJdmFyIGRvdDEyID0gX3YxJDMuZG90KCBfdjIkMSApOwoKCQkJdmFyIGRlbm9tID0gKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApOwoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldEJhcnljb29yZCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJLy8gY29sbGluZWFyIG9yIHNpbmd1bGFyIHRyaWFuZ2xlCgkJCWlmICggZGVub20gPT09IDAgKSB7CgoJCQkJLy8gYXJiaXRyYXJ5IGxvY2F0aW9uIG91dHNpZGUgb2YgdHJpYW5nbGU/CgkJCQkvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIHRoZSBiZXN0IGlkZWEsIG1heWJlIHNob3VsZCBiZSByZXR1cm5pbmcgdW5kZWZpbmVkCgkJCQlyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApOwoKCQkJfQoKCQkJdmFyIGludkRlbm9tID0gMSAvIGRlbm9tOwoJCQl2YXIgdSA9ICggZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIgKSAqIGludkRlbm9tOwoJCQl2YXIgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tOwoKCQkJLy8gYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgbXVzdCBhbHdheXMgc3VtIHRvIDEKCQkJcmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApOwoKCQl9LAoKCQljb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBhLCBiLCBjICkgewoKCQkJVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgX3YzICk7CgoJCQlyZXR1cm4gKCBfdjMueCA+PSAwICkgJiYgKCBfdjMueSA+PSAwICkgJiYgKCAoIF92My54ICsgX3YzLnkgKSA8PSAxICk7CgoJCX0sCgoJCWdldFVWOiBmdW5jdGlvbiAoIHBvaW50LCBwMSwgcDIsIHAzLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7CgoJCQl0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHAxLCBwMiwgcDMsIF92MyApOwoKCQkJdGFyZ2V0LnNldCggMCwgMCApOwoJCQl0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB1djEsIF92My54ICk7CgkJCXRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MiwgX3YzLnkgKTsKCQkJdGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdXYzLCBfdjMueiApOwoKCQkJcmV0dXJuIHRhcmdldDsKCgkJfSwKCgkJaXNGcm9udEZhY2luZzogZnVuY3Rpb24gKCBhLCBiLCBjLCBkaXJlY3Rpb24gKSB7CgoJCQlfdjAkMS5zdWJWZWN0b3JzKCBjLCBiICk7CgkJCV92MSQzLnN1YlZlY3RvcnMoIGEsIGIgKTsKCgkJCS8vIHN0cmljdGx5IGZyb250IGZhY2luZwoJCQlyZXR1cm4gKCBfdjAkMS5jcm9zcyggX3YxJDMgKS5kb3QoIGRpcmVjdGlvbiApIDwgMCApID8gdHJ1ZSA6IGZhbHNlOwoKCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLnByb3RvdHlwZSwgewoKCQlzZXQ6IGZ1bmN0aW9uICggYSwgYiwgYyApIHsKCgkJCXRoaXMuYS5jb3B5KCBhICk7CgkJCXRoaXMuYi5jb3B5KCBiICk7CgkJCXRoaXMuYy5jb3B5KCBjICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbVBvaW50c0FuZEluZGljZXM6IGZ1bmN0aW9uICggcG9pbnRzLCBpMCwgaTEsIGkyICkgewoKCQkJdGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApOwoJCQl0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7CgkJCXRoaXMuYy5jb3B5KCBwb2ludHNbIGkyIF0gKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkgewoKCQkJdGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTsKCQkJdGhpcy5iLmNvcHkoIHRyaWFuZ2xlLmIgKTsKCQkJdGhpcy5jLmNvcHkoIHRyaWFuZ2xlLmMgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRBcmVhOiBmdW5jdGlvbiAoKSB7CgoJCQlfdjAkMS5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApOwoJCQlfdjEkMy5zdWJWZWN0b3JzKCB0aGlzLmEsIHRoaXMuYiApOwoKCQkJcmV0dXJuIF92MCQxLmNyb3NzKCBfdjEkMyApLmxlbmd0aCgpICogMC41OwoKCQl9LAoKCQlnZXRNaWRwb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0TWlkcG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApOwoKCQl9LAoKCQlnZXROb3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKCQkJcmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7CgoJCX0sCgoJCWdldFBsYW5lOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRQbGFuZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgUGxhbmUoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7CgoJCX0sCgoJCWdldEJhcnljb29yZDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkgewoKCQkJcmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApOwoKCQl9LAoKCQlnZXRVVjogZnVuY3Rpb24gKCBwb2ludCwgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICkgewoKCQkJcmV0dXJuIFRyaWFuZ2xlLmdldFVWKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICk7CgoJCX0sCgoJCWNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQlyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTsKCgkJfSwKCgkJaXNGcm9udEZhY2luZzogZnVuY3Rpb24gKCBkaXJlY3Rpb24gKSB7CgoJCQlyZXR1cm4gVHJpYW5nbGUuaXNGcm9udEZhY2luZyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgZGlyZWN0aW9uICk7CgoJCX0sCgoJCWludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJcmV0dXJuIGJveC5pbnRlcnNlY3RzVHJpYW5nbGUoIHRoaXMgKTsKCgkJfSwKCgkJY2xvc2VzdFBvaW50VG9Qb2ludDogZnVuY3Rpb24gKCBwLCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuY2xvc2VzdFBvaW50VG9Qb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJdmFyIGEgPSB0aGlzLmEsIGIgPSB0aGlzLmIsIGMgPSB0aGlzLmM7CgkJCXZhciB2LCB3OwoKCQkJLy8gYWxnb3JpdGhtIHRoYW5rcyB0byBSZWFsLVRpbWUgQ29sbGlzaW9uIERldGVjdGlvbiBieSBDaHJpc3RlciBFcmljc29uLAoJCQkvLyBwdWJsaXNoZWQgYnkgTW9yZ2FuIEthdWZtYW5uIFB1Ymxpc2hlcnMsIChjKSAyMDA1IEVsc2V2aWVyIEluYy4sCgkJCS8vIHVuZGVyIHRoZSBhY2NvbXBhbnlpbmcgbGljZW5zZTsgc2VlIGNoYXB0ZXIgNS4xLjUgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uLgoJCQkvLyBiYXNpY2FsbHksIHdlJ3JlIGRpc3Rpbmd1aXNoaW5nIHdoaWNoIG9mIHRoZSB2b3Jvbm9pIHJlZ2lvbnMgb2YgdGhlIHRyaWFuZ2xlCgkJCS8vIHRoZSBwb2ludCBsaWVzIGluIHdpdGggdGhlIG1pbmltdW0gYW1vdW50IG9mIHJlZHVuZGFudCBjb21wdXRhdGlvbi4KCgkJCV92YWIuc3ViVmVjdG9ycyggYiwgYSApOwoJCQlfdmFjLnN1YlZlY3RvcnMoIGMsIGEgKTsKCQkJX3ZhcC5zdWJWZWN0b3JzKCBwLCBhICk7CgkJCXZhciBkMSA9IF92YWIuZG90KCBfdmFwICk7CgkJCXZhciBkMiA9IF92YWMuZG90KCBfdmFwICk7CgkJCWlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkgewoKCQkJCS8vIHZlcnRleCByZWdpb24gb2YgQTsgYmFyeWNlbnRyaWMgY29vcmRzICgxLCAwLCAwKQoJCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBhICk7CgoJCQl9CgoJCQlfdmJwLnN1YlZlY3RvcnMoIHAsIGIgKTsKCQkJdmFyIGQzID0gX3ZhYi5kb3QoIF92YnAgKTsKCQkJdmFyIGQ0ID0gX3ZhYy5kb3QoIF92YnAgKTsKCQkJaWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkgewoKCQkJCS8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKQoJCQkJcmV0dXJuIHRhcmdldC5jb3B5KCBiICk7CgoJCQl9CgoJCQl2YXIgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjsKCQkJaWYgKCB2YyA8PSAwICYmIGQxID49IDAgJiYgZDMgPD0gMCApIHsKCgkJCQl2ID0gZDEgLyAoIGQxIC0gZDMgKTsKCQkJCS8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMCkKCQkJCXJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApOwoKCQkJfQoKCQkJX3ZjcC5zdWJWZWN0b3JzKCBwLCBjICk7CgkJCXZhciBkNSA9IF92YWIuZG90KCBfdmNwICk7CgkJCXZhciBkNiA9IF92YWMuZG90KCBfdmNwICk7CgkJCWlmICggZDYgPj0gMCAmJiBkNSA8PSBkNiApIHsKCgkJCQkvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSkKCQkJCXJldHVybiB0YXJnZXQuY29weSggYyApOwoKCQkJfQoKCQkJdmFyIHZiID0gZDUgKiBkMiAtIGQxICogZDY7CgkJCWlmICggdmIgPD0gMCAmJiBkMiA+PSAwICYmIGQ2IDw9IDAgKSB7CgoJCQkJdyA9IGQyIC8gKCBkMiAtIGQ2ICk7CgkJCQkvLyBlZGdlIHJlZ2lvbiBvZiBBQzsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXcsIDAsIHcpCgkJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTsKCgkJCX0KCgkJCXZhciB2YSA9IGQzICogZDYgLSBkNSAqIGQ0OwoJCQlpZiAoIHZhIDw9IDAgJiYgKCBkNCAtIGQzICkgPj0gMCAmJiAoIGQ1IC0gZDYgKSA+PSAwICkgewoKCQkJCV92YmMuc3ViVmVjdG9ycyggYywgYiApOwoJCQkJdyA9ICggZDQgLSBkMyApIC8gKCAoIGQ0IC0gZDMgKSArICggZDUgLSBkNiApICk7CgkJCQkvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpCgkJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIF92YmMsIHcgKTsgLy8gZWRnZSByZWdpb24gb2YgQkMKCgkJCX0KCgkJCS8vIGZhY2UgcmVnaW9uCgkJCXZhciBkZW5vbSA9IDEgLyAoIHZhICsgdmIgKyB2YyApOwoJCQkvLyB1ID0gdmEgKiBkZW5vbQoJCQl2ID0gdmIgKiBkZW5vbTsKCQkJdyA9IHZjICogZGVub207CgoJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWIsIHYgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkgewoKCQkJcmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCXZhciBfY29sb3JLZXl3b3JkcyA9IHsgJ2FsaWNlYmx1ZSc6IDB4RjBGOEZGLCAnYW50aXF1ZXdoaXRlJzogMHhGQUVCRDcsICdhcXVhJzogMHgwMEZGRkYsICdhcXVhbWFyaW5lJzogMHg3RkZGRDQsICdhenVyZSc6IDB4RjBGRkZGLAoJCSdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMiwKCQknYnJvd24nOiAweEE1MkEyQSwgJ2J1cmx5d29vZCc6IDB4REVCODg3LCAnY2FkZXRibHVlJzogMHg1RjlFQTAsICdjaGFydHJldXNlJzogMHg3RkZGMDAsICdjaG9jb2xhdGUnOiAweEQyNjkxRSwgJ2NvcmFsJzogMHhGRjdGNTAsCgkJJ2Nvcm5mbG93ZXJibHVlJzogMHg2NDk1RUQsICdjb3Juc2lsayc6IDB4RkZGOERDLCAnY3JpbXNvbic6IDB4REMxNDNDLCAnY3lhbic6IDB4MDBGRkZGLCAnZGFya2JsdWUnOiAweDAwMDA4QiwgJ2RhcmtjeWFuJzogMHgwMDhCOEIsCgkJJ2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsCgkJJ2RhcmtvbGl2ZWdyZWVuJzogMHg1NTZCMkYsICdkYXJrb3JhbmdlJzogMHhGRjhDMDAsICdkYXJrb3JjaGlkJzogMHg5OTMyQ0MsICdkYXJrcmVkJzogMHg4QjAwMDAsICdkYXJrc2FsbW9uJzogMHhFOTk2N0EsICdkYXJrc2VhZ3JlZW4nOiAweDhGQkM4RiwKCQknZGFya3NsYXRlYmx1ZSc6IDB4NDgzRDhCLCAnZGFya3NsYXRlZ3JheSc6IDB4MkY0RjRGLCAnZGFya3NsYXRlZ3JleSc6IDB4MkY0RjRGLCAnZGFya3R1cnF1b2lzZSc6IDB4MDBDRUQxLCAnZGFya3Zpb2xldCc6IDB4OTQwMEQzLAoJCSdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLAoJCSdmbG9yYWx3aGl0ZSc6IDB4RkZGQUYwLCAnZm9yZXN0Z3JlZW4nOiAweDIyOEIyMiwgJ2Z1Y2hzaWEnOiAweEZGMDBGRiwgJ2dhaW5zYm9ybyc6IDB4RENEQ0RDLCAnZ2hvc3R3aGl0ZSc6IDB4RjhGOEZGLCAnZ29sZCc6IDB4RkZENzAwLAoJCSdnb2xkZW5yb2QnOiAweERBQTUyMCwgJ2dyYXknOiAweDgwODA4MCwgJ2dyZWVuJzogMHgwMDgwMDAsICdncmVlbnllbGxvdyc6IDB4QURGRjJGLCAnZ3JleSc6IDB4ODA4MDgwLCAnaG9uZXlkZXcnOiAweEYwRkZGMCwgJ2hvdHBpbmsnOiAweEZGNjlCNCwKCQknaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLAoJCSdsZW1vbmNoaWZmb24nOiAweEZGRkFDRCwgJ2xpZ2h0Ymx1ZSc6IDB4QUREOEU2LCAnbGlnaHRjb3JhbCc6IDB4RjA4MDgwLCAnbGlnaHRjeWFuJzogMHhFMEZGRkYsICdsaWdodGdvbGRlbnJvZHllbGxvdyc6IDB4RkFGQUQyLCAnbGlnaHRncmF5JzogMHhEM0QzRDMsCgkJJ2xpZ2h0Z3JlZW4nOiAweDkwRUU5MCwgJ2xpZ2h0Z3JleSc6IDB4RDNEM0QzLCAnbGlnaHRwaW5rJzogMHhGRkI2QzEsICdsaWdodHNhbG1vbic6IDB4RkZBMDdBLCAnbGlnaHRzZWFncmVlbic6IDB4MjBCMkFBLCAnbGlnaHRza3libHVlJzogMHg4N0NFRkEsCgkJJ2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMiwKCQknbGluZW4nOiAweEZBRjBFNiwgJ21hZ2VudGEnOiAweEZGMDBGRiwgJ21hcm9vbic6IDB4ODAwMDAwLCAnbWVkaXVtYXF1YW1hcmluZSc6IDB4NjZDREFBLCAnbWVkaXVtYmx1ZSc6IDB4MDAwMENELCAnbWVkaXVtb3JjaGlkJzogMHhCQTU1RDMsCgkJJ21lZGl1bXB1cnBsZSc6IDB4OTM3MERCLCAnbWVkaXVtc2VhZ3JlZW4nOiAweDNDQjM3MSwgJ21lZGl1bXNsYXRlYmx1ZSc6IDB4N0I2OEVFLCAnbWVkaXVtc3ByaW5nZ3JlZW4nOiAweDAwRkE5QSwgJ21lZGl1bXR1cnF1b2lzZSc6IDB4NDhEMUNDLAoJCSdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELAoJCSduYXZ5JzogMHgwMDAwODAsICdvbGRsYWNlJzogMHhGREY1RTYsICdvbGl2ZSc6IDB4ODA4MDAwLCAnb2xpdmVkcmFiJzogMHg2QjhFMjMsICdvcmFuZ2UnOiAweEZGQTUwMCwgJ29yYW5nZXJlZCc6IDB4RkY0NTAwLCAnb3JjaGlkJzogMHhEQTcwRDYsCgkJJ3BhbGVnb2xkZW5yb2QnOiAweEVFRThBQSwgJ3BhbGVncmVlbic6IDB4OThGQjk4LCAncGFsZXR1cnF1b2lzZSc6IDB4QUZFRUVFLCAncGFsZXZpb2xldHJlZCc6IDB4REI3MDkzLCAncGFwYXlhd2hpcCc6IDB4RkZFRkQ1LCAncGVhY2hwdWZmJzogMHhGRkRBQjksCgkJJ3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4RiwKCQkncm95YWxibHVlJzogMHg0MTY5RTEsICdzYWRkbGVicm93bic6IDB4OEI0NTEzLCAnc2FsbW9uJzogMHhGQTgwNzIsICdzYW5keWJyb3duJzogMHhGNEE0NjAsICdzZWFncmVlbic6IDB4MkU4QjU3LCAnc2Vhc2hlbGwnOiAweEZGRjVFRSwKCQknc2llbm5hJzogMHhBMDUyMkQsICdzaWx2ZXInOiAweEMwQzBDMCwgJ3NreWJsdWUnOiAweDg3Q0VFQiwgJ3NsYXRlYmx1ZSc6IDB4NkE1QUNELCAnc2xhdGVncmF5JzogMHg3MDgwOTAsICdzbGF0ZWdyZXknOiAweDcwODA5MCwgJ3Nub3cnOiAweEZGRkFGQSwKCQknc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLAoJCSd2aW9sZXQnOiAweEVFODJFRSwgJ3doZWF0JzogMHhGNURFQjMsICd3aGl0ZSc6IDB4RkZGRkZGLCAnd2hpdGVzbW9rZSc6IDB4RjVGNUY1LCAneWVsbG93JzogMHhGRkZGMDAsICd5ZWxsb3dncmVlbic6IDB4OUFDRDMyIH07CgoJdmFyIF9oc2xBID0geyBoOiAwLCBzOiAwLCBsOiAwIH07Cgl2YXIgX2hzbEIgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTsKCglmdW5jdGlvbiBDb2xvciggciwgZywgYiApIHsKCgkJaWYgKCBnID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkICkgewoKCQkJLy8gciBpcyBUSFJFRS5Db2xvciwgaGV4IG9yIHN0cmluZwoJCQlyZXR1cm4gdGhpcy5zZXQoIHIgKTsKCgkJfQoKCQlyZXR1cm4gdGhpcy5zZXRSR0IoIHIsIGcsIGIgKTsKCgl9CgoJZnVuY3Rpb24gaHVlMnJnYiggcCwgcSwgdCApIHsKCgkJaWYgKCB0IDwgMCApIHsgdCArPSAxOyB9CgkJaWYgKCB0ID4gMSApIHsgdCAtPSAxOyB9CgkJaWYgKCB0IDwgMSAvIDYgKSB7IHJldHVybiBwICsgKCBxIC0gcCApICogNiAqIHQ7IH0KCQlpZiAoIHQgPCAxIC8gMiApIHsgcmV0dXJuIHE7IH0KCQlpZiAoIHQgPCAyIC8gMyApIHsgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTsgfQoJCXJldHVybiBwOwoKCX0KCglmdW5jdGlvbiBTUkdCVG9MaW5lYXIoIGMgKSB7CgoJCXJldHVybiAoIGMgPCAwLjA0MDQ1ICkgPyBjICogMC4wNzczOTkzODA4IDogTWF0aC5wb3coIGMgKiAwLjk0Nzg2NzI5ODYgKyAwLjA1MjEzMjcwMTQsIDIuNCApOwoKCX0KCglmdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7CgoJCXJldHVybiAoIGMgPCAwLjAwMzEzMDggKSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKCBNYXRoLnBvdyggYywgMC40MTY2NiApICkgLSAwLjA1NTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggQ29sb3IucHJvdG90eXBlLCB7CgoJCWlzQ29sb3I6IHRydWUsCgoJCXI6IDEsIGc6IDEsIGI6IDEsCgoJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCWlmICggdmFsdWUgJiYgdmFsdWUuaXNDb2xvciApIHsKCgkJCQl0aGlzLmNvcHkoIHZhbHVlICk7CgoJCQl9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkgewoKCQkJCXRoaXMuc2V0SGV4KCB2YWx1ZSApOwoKCQkJfSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHsKCgkJCQl0aGlzLnNldFN0eWxlKCB2YWx1ZSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7CgoJCQl0aGlzLnIgPSBzY2FsYXI7CgkJCXRoaXMuZyA9IHNjYWxhcjsKCQkJdGhpcy5iID0gc2NhbGFyOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEhleDogZnVuY3Rpb24gKCBoZXggKSB7CgoJCQloZXggPSBNYXRoLmZsb29yKCBoZXggKTsKCgkJCXRoaXMuciA9ICggaGV4ID4+IDE2ICYgMjU1ICkgLyAyNTU7CgkJCXRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTsKCQkJdGhpcy5iID0gKCBoZXggJiAyNTUgKSAvIDI1NTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRSR0I6IGZ1bmN0aW9uICggciwgZywgYiApIHsKCgkJCXRoaXMuciA9IHI7CgkJCXRoaXMuZyA9IGc7CgkJCXRoaXMuYiA9IGI7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0SFNMOiBmdW5jdGlvbiAoIGgsIHMsIGwgKSB7CgoJCQkvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMAoJCQloID0gX01hdGguZXVjbGlkZWFuTW9kdWxvKCBoLCAxICk7CgkJCXMgPSBfTWF0aC5jbGFtcCggcywgMCwgMSApOwoJCQlsID0gX01hdGguY2xhbXAoIGwsIDAsIDEgKTsKCgkJCWlmICggcyA9PT0gMCApIHsKCgkJCQl0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsOwoKCQkJfSBlbHNlIHsKCgkJCQl2YXIgcCA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gKCBsICogcyApOwoJCQkJdmFyIHEgPSAoIDIgKiBsICkgLSBwOwoKCQkJCXRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApOwoJCQkJdGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApOwoJCQkJdGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0U3R5bGU6IGZ1bmN0aW9uICggc3R5bGUgKSB7CgoJCQlmdW5jdGlvbiBoYW5kbGVBbHBoYSggc3RyaW5nICkgewoKCQkJCWlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSB7IHJldHVybjsgfQoKCQkJCWlmICggcGFyc2VGbG9hdCggc3RyaW5nICkgPCAxICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogQWxwaGEgY29tcG9uZW50IG9mICcgKyBzdHlsZSArICcgd2lsbCBiZSBpZ25vcmVkLicgKTsKCgkJCQl9CgoJCQl9CgoKCQkJdmFyIG07CgoJCQlpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVwoXHMqKFteXCldKilcKS8uZXhlYyggc3R5bGUgKSApIHsKCgkJCQkvLyByZ2IgLyBoc2wKCgkJCQl2YXIgY29sb3I7CgkJCQl2YXIgbmFtZSA9IG1bIDEgXTsKCQkJCXZhciBjb21wb25lbnRzID0gbVsgMiBdOwoKCQkJCXN3aXRjaCAoIG5hbWUgKSB7CgoJCQkJCWNhc2UgJ3JnYic6CgkJCQkJY2FzZSAncmdiYSc6CgoJCQkJCQlpZiAoIGNvbG9yID0gL14oXGQrKVxzKixccyooXGQrKVxzKixccyooXGQrKVxzKigsXHMqKFswLTldKlwuP1swLTldKylccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHsKCgkJCQkJCQkvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSkKCQkJCQkJCXRoaXMuciA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAyNTU7CgkJCQkJCQl0aGlzLmcgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1OwoJCQkJCQkJdGhpcy5iID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAzIF0sIDEwICkgKSAvIDI1NTsKCgkJCQkJCQloYW5kbGVBbHBoYSggY29sb3JbIDUgXSApOwoKCQkJCQkJCXJldHVybiB0aGlzOwoKCQkJCQkJfQoKCQkJCQkJaWYgKCBjb2xvciA9IC9eKFxkKylcJVxzKixccyooXGQrKVwlXHMqLFxzKihcZCspXCVccyooLFxzKihbMC05XSpcLj9bMC05XSspXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7CgoJCQkJCQkJLy8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpCgkJCQkJCQl0aGlzLnIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwOwoJCQkJCQkJdGhpcy5nID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMDsKCQkJCQkJCXRoaXMuYiA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDA7CgoJCQkJCQkJaGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTsKCgkJCQkJCQlyZXR1cm4gdGhpczsKCgkJCQkJCX0KCgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdoc2wnOgoJCQkJCWNhc2UgJ2hzbGEnOgoKCQkJCQkJaWYgKCBjb2xvciA9IC9eKFswLTldKlwuP1swLTldKylccyosXHMqKFxkKylcJVxzKixccyooXGQrKVwlXHMqKCxccyooWzAtOV0qXC4/WzAtOV0rKVxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkgewoKCQkJCQkJCS8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpCgkJCQkJCQl2YXIgaCA9IHBhcnNlRmxvYXQoIGNvbG9yWyAxIF0gKSAvIDM2MDsKCQkJCQkJCXZhciBzID0gcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgLyAxMDA7CgkJCQkJCQl2YXIgbCA9IHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApIC8gMTAwOwoKCQkJCQkJCWhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7CgoJCQkJCQkJcmV0dXJuIHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7CgoJCQkJCQl9CgoJCQkJCQlicmVhazsKCgkJCQl9CgoJCQl9IGVsc2UgaWYgKCBtID0gL15cIyhbQS1GYS1mMC05XSspJC8uZXhlYyggc3R5bGUgKSApIHsKCgkJCQkvLyBoZXggY29sb3IKCgkJCQl2YXIgaGV4ID0gbVsgMSBdOwoJCQkJdmFyIHNpemUgPSBoZXgubGVuZ3RoOwoKCQkJCWlmICggc2l6ZSA9PT0gMyApIHsKCgkJCQkJLy8gI2ZmMAoJCQkJCXRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAwICksIDE2ICkgLyAyNTU7CgkJCQkJdGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTsKCQkJCQl0aGlzLmIgPSBwYXJzZUludCggaGV4LmNoYXJBdCggMiApICsgaGV4LmNoYXJBdCggMiApLCAxNiApIC8gMjU1OwoKCQkJCQlyZXR1cm4gdGhpczsKCgkJCQl9IGVsc2UgaWYgKCBzaXplID09PSA2ICkgewoKCQkJCQkvLyAjZmYwMDAwCgkJCQkJdGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTsKCQkJCQl0aGlzLmcgPSBwYXJzZUludCggaGV4LmNoYXJBdCggMiApICsgaGV4LmNoYXJBdCggMyApLCAxNiApIC8gMjU1OwoJCQkJCXRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7CgoJCQkJCXJldHVybiB0aGlzOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHsKCgkJCQlyZXR1cm4gdGhpcy5zZXRDb2xvck5hbWUoIHN0eWxlICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0Q29sb3JOYW1lOiBmdW5jdGlvbiAoIHN0eWxlICkgewoKCQkJLy8gY29sb3Iga2V5d29yZHMKCQkJdmFyIGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZSBdOwoKCQkJaWYgKCBoZXggIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyByZWQKCQkJCXRoaXMuc2V0SGV4KCBoZXggKTsKCgkJCX0gZWxzZSB7CgoJCQkJLy8gdW5rbm93biBjb2xvcgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IFVua25vd24gY29sb3IgJyArIHN0eWxlICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5yLCB0aGlzLmcsIHRoaXMuYiApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIGNvbG9yICkgewoKCQkJdGhpcy5yID0gY29sb3IucjsKCQkJdGhpcy5nID0gY29sb3IuZzsKCQkJdGhpcy5iID0gY29sb3IuYjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb3B5R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBjb2xvciwgZ2FtbWFGYWN0b3IgKSB7CgoJCQlpZiAoIGdhbW1hRmFjdG9yID09PSB1bmRlZmluZWQgKSB7IGdhbW1hRmFjdG9yID0gMi4wOyB9CgoJCQl0aGlzLnIgPSBNYXRoLnBvdyggY29sb3IuciwgZ2FtbWFGYWN0b3IgKTsKCQkJdGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIGdhbW1hRmFjdG9yICk7CgkJCXRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBnYW1tYUZhY3RvciApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHsKCgkJCWlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIHsgZ2FtbWFGYWN0b3IgPSAyLjA7IH0KCgkJCXZhciBzYWZlSW52ZXJzZSA9ICggZ2FtbWFGYWN0b3IgPiAwICkgPyAoIDEuMCAvIGdhbW1hRmFjdG9yICkgOiAxLjA7CgoJCQl0aGlzLnIgPSBNYXRoLnBvdyggY29sb3Iuciwgc2FmZUludmVyc2UgKTsKCQkJdGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIHNhZmVJbnZlcnNlICk7CgkJCXRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBzYWZlSW52ZXJzZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvbnZlcnRHYW1tYVRvTGluZWFyOiBmdW5jdGlvbiAoIGdhbW1hRmFjdG9yICkgewoKCQkJdGhpcy5jb3B5R2FtbWFUb0xpbmVhciggdGhpcywgZ2FtbWFGYWN0b3IgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb252ZXJ0TGluZWFyVG9HYW1tYTogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHsKCgkJCXRoaXMuY29weUxpbmVhclRvR2FtbWEoIHRoaXMsIGdhbW1hRmFjdG9yICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weVNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCBjb2xvciApIHsKCgkJCXRoaXMuciA9IFNSR0JUb0xpbmVhciggY29sb3IuciApOwoJCQl0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTsKCQkJdGhpcy5iID0gU1JHQlRvTGluZWFyKCBjb2xvci5iICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weUxpbmVhclRvU1JHQjogZnVuY3Rpb24gKCBjb2xvciApIHsKCgkJCXRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApOwoJCQl0aGlzLmcgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLmcgKTsKCQkJdGhpcy5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29udmVydFNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29udmVydExpbmVhclRvU1JHQjogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0SGV4OiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gKCB0aGlzLnIgKiAyNTUgKSA8PCAxNiBeICggdGhpcy5nICogMjU1ICkgPDwgOCBeICggdGhpcy5iICogMjU1ICkgPDwgMDsKCgkJfSwKCgkJZ2V0SGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gKCAnMDAwMDAwJyArIHRoaXMuZ2V0SGV4KCkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLSA2ICk7CgoJCX0sCgoJCWdldEhTTDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQkvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMAoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogLmdldEhTTCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTsKCgkJCX0KCgkJCXZhciByID0gdGhpcy5yLCBnID0gdGhpcy5nLCBiID0gdGhpcy5iOwoKCQkJdmFyIG1heCA9IE1hdGgubWF4KCByLCBnLCBiICk7CgkJCXZhciBtaW4gPSBNYXRoLm1pbiggciwgZywgYiApOwoKCQkJdmFyIGh1ZSwgc2F0dXJhdGlvbjsKCQkJdmFyIGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7CgoJCQlpZiAoIG1pbiA9PT0gbWF4ICkgewoKCQkJCWh1ZSA9IDA7CgkJCQlzYXR1cmF0aW9uID0gMDsKCgkJCX0gZWxzZSB7CgoJCQkJdmFyIGRlbHRhID0gbWF4IC0gbWluOwoKCQkJCXNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTsKCgkJCQlzd2l0Y2ggKCBtYXggKSB7CgoJCQkJCWNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7CgkJCQkJY2FzZSBnOiBodWUgPSAoIGIgLSByICkgLyBkZWx0YSArIDI7IGJyZWFrOwoJCQkJCWNhc2UgYjogaHVlID0gKCByIC0gZyApIC8gZGVsdGEgKyA0OyBicmVhazsKCgkJCQl9CgoJCQkJaHVlIC89IDY7CgoJCQl9CgoJCQl0YXJnZXQuaCA9IGh1ZTsKCQkJdGFyZ2V0LnMgPSBzYXR1cmF0aW9uOwoJCQl0YXJnZXQubCA9IGxpZ2h0bmVzczsKCgkJCXJldHVybiB0YXJnZXQ7CgoJCX0sCgoJCWdldFN0eWxlOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gJ3JnYignICsgKCAoIHRoaXMuciAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuZyAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuYiAqIDI1NSApIHwgMCApICsgJyknOwoKCQl9LAoKCQlvZmZzZXRIU0w6IGZ1bmN0aW9uICggaCwgcywgbCApIHsKCgkJCXRoaXMuZ2V0SFNMKCBfaHNsQSApOwoKCQkJX2hzbEEuaCArPSBoOyBfaHNsQS5zICs9IHM7IF9oc2xBLmwgKz0gbDsKCgkJCXRoaXMuc2V0SFNMKCBfaHNsQS5oLCBfaHNsQS5zLCBfaHNsQS5sICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYWRkOiBmdW5jdGlvbiAoIGNvbG9yICkgewoKCQkJdGhpcy5yICs9IGNvbG9yLnI7CgkJCXRoaXMuZyArPSBjb2xvci5nOwoJCQl0aGlzLmIgKz0gY29sb3IuYjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRDb2xvcnM6IGZ1bmN0aW9uICggY29sb3IxLCBjb2xvcjIgKSB7CgoJCQl0aGlzLnIgPSBjb2xvcjEuciArIGNvbG9yMi5yOwoJCQl0aGlzLmcgPSBjb2xvcjEuZyArIGNvbG9yMi5nOwoJCQl0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkgewoKCQkJdGhpcy5yICs9IHM7CgkJCXRoaXMuZyArPSBzOwoJCQl0aGlzLmIgKz0gczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdWI6IGZ1bmN0aW9uICggY29sb3IgKSB7CgoJCQl0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApOwoJCQl0aGlzLmcgPSBNYXRoLm1heCggMCwgdGhpcy5nIC0gY29sb3IuZyApOwoJCQl0aGlzLmIgPSBNYXRoLm1heCggMCwgdGhpcy5iIC0gY29sb3IuYiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW11bHRpcGx5OiBmdW5jdGlvbiAoIGNvbG9yICkgewoKCQkJdGhpcy5yICo9IGNvbG9yLnI7CgkJCXRoaXMuZyAqPSBjb2xvci5nOwoJCQl0aGlzLmIgKj0gY29sb3IuYjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkgewoKCQkJdGhpcy5yICo9IHM7CgkJCXRoaXMuZyAqPSBzOwoJCQl0aGlzLmIgKj0gczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlsZXJwOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSApIHsKCgkJCXRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhOwoJCQl0aGlzLmcgKz0gKCBjb2xvci5nIC0gdGhpcy5nICkgKiBhbHBoYTsKCQkJdGhpcy5iICs9ICggY29sb3IuYiAtIHRoaXMuYiApICogYWxwaGE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbGVycEhTTDogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7CgoJCQl0aGlzLmdldEhTTCggX2hzbEEgKTsKCQkJY29sb3IuZ2V0SFNMKCBfaHNsQiApOwoKCQkJdmFyIGggPSBfTWF0aC5sZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApOwoJCQl2YXIgcyA9IF9NYXRoLmxlcnAoIF9oc2xBLnMsIF9oc2xCLnMsIGFscGhhICk7CgkJCXZhciBsID0gX01hdGgubGVycCggX2hzbEEubCwgX2hzbEIubCwgYWxwaGEgKTsKCgkJCXRoaXMuc2V0SFNMKCBoLCBzLCBsICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIGMgKSB7CgoJCQlyZXR1cm4gKCBjLnIgPT09IHRoaXMuciApICYmICggYy5nID09PSB0aGlzLmcgKSAmJiAoIGMuYiA9PT0gdGhpcy5iICk7CgoJCX0sCgoJCWZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdGhpcy5yID0gYXJyYXlbIG9mZnNldCBdOwoJCQl0aGlzLmcgPSBhcnJheVsgb2Zmc2V0ICsgMSBdOwoJCQl0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHsKCgkJCWlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIHsgYXJyYXkgPSBbXTsgfQoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgeyBvZmZzZXQgPSAwOyB9CgoJCQlhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLnI7CgkJCWFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLmc7CgkJCWFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLmI7CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZ2V0SGV4KCk7CgoJCX0KCgl9ICk7CgoJQ29sb3IuTkFNRVMgPSBfY29sb3JLZXl3b3JkczsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7CgoJCXRoaXMuYSA9IGE7CgkJdGhpcy5iID0gYjsKCQl0aGlzLmMgPSBjOwoKCQl0aGlzLm5vcm1hbCA9ICggbm9ybWFsICYmIG5vcm1hbC5pc1ZlY3RvcjMgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCk7CgkJdGhpcy52ZXJ0ZXhOb3JtYWxzID0gQXJyYXkuaXNBcnJheSggbm9ybWFsICkgPyBub3JtYWwgOiBbXTsKCgkJdGhpcy5jb2xvciA9ICggY29sb3IgJiYgY29sb3IuaXNDb2xvciApID8gY29sb3IgOiBuZXcgQ29sb3IoKTsKCQl0aGlzLnZlcnRleENvbG9ycyA9IEFycmF5LmlzQXJyYXkoIGNvbG9yICkgPyBjb2xvciA6IFtdOwoKCQl0aGlzLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMDsKCgl9CgoJT2JqZWN0LmFzc2lnbiggRmFjZTMucHJvdG90eXBlLCB7CgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJdGhpcy5hID0gc291cmNlLmE7CgkJCXRoaXMuYiA9IHNvdXJjZS5iOwoJCQl0aGlzLmMgPSBzb3VyY2UuYzsKCgkJCXRoaXMubm9ybWFsLmNvcHkoIHNvdXJjZS5ub3JtYWwgKTsKCQkJdGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTsKCgkJCXRoaXMubWF0ZXJpYWxJbmRleCA9IHNvdXJjZS5tYXRlcmlhbEluZGV4OwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMudmVydGV4Tm9ybWFsc1sgaSBdID0gc291cmNlLnZlcnRleE5vcm1hbHNbIGkgXS5jbG9uZSgpOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdGhpcy52ZXJ0ZXhDb2xvcnNbIGkgXSA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnNbIGkgXS5jbG9uZSgpOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqLwoKCXZhciBtYXRlcmlhbElkID0gMDsKCglmdW5jdGlvbiBNYXRlcmlhbCgpIHsKCgkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBtYXRlcmlhbElkICsrIH0gKTsKCgkJdGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7CgoJCXRoaXMubmFtZSA9ICcnOwoJCXRoaXMudHlwZSA9ICdNYXRlcmlhbCc7CgoJCXRoaXMuZm9nID0gdHJ1ZTsKCgkJdGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nOwoJCXRoaXMuc2lkZSA9IEZyb250U2lkZTsKCQl0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7CgkJdGhpcy52ZXJ0ZXhUYW5nZW50cyA9IGZhbHNlOwoJCXRoaXMudmVydGV4Q29sb3JzID0gTm9Db2xvcnM7IC8vIFRIUkVFLk5vQ29sb3JzLCBUSFJFRS5WZXJ0ZXhDb2xvcnMsIFRIUkVFLkZhY2VDb2xvcnMKCgkJdGhpcy5vcGFjaXR5ID0gMTsKCQl0aGlzLnRyYW5zcGFyZW50ID0gZmFsc2U7CgoJCXRoaXMuYmxlbmRTcmMgPSBTcmNBbHBoYUZhY3RvcjsKCQl0aGlzLmJsZW5kRHN0ID0gT25lTWludXNTcmNBbHBoYUZhY3RvcjsKCQl0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjsKCQl0aGlzLmJsZW5kU3JjQWxwaGEgPSBudWxsOwoJCXRoaXMuYmxlbmREc3RBbHBoYSA9IG51bGw7CgkJdGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsOwoKCQl0aGlzLmRlcHRoRnVuYyA9IExlc3NFcXVhbERlcHRoOwoJCXRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTsKCQl0aGlzLmRlcHRoV3JpdGUgPSB0cnVlOwoKCQl0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSAweGZmOwoJCXRoaXMuc3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYzsKCQl0aGlzLnN0ZW5jaWxSZWYgPSAwOwoJCXRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gMHhmZjsKCQl0aGlzLnN0ZW5jaWxGYWlsID0gS2VlcFN0ZW5jaWxPcDsKCQl0aGlzLnN0ZW5jaWxaRmFpbCA9IEtlZXBTdGVuY2lsT3A7CgkJdGhpcy5zdGVuY2lsWlBhc3MgPSBLZWVwU3RlbmNpbE9wOwoJCXRoaXMuc3RlbmNpbFdyaXRlID0gZmFsc2U7CgoJCXRoaXMuY2xpcHBpbmdQbGFuZXMgPSBudWxsOwoJCXRoaXMuY2xpcEludGVyc2VjdGlvbiA9IGZhbHNlOwoJCXRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTsKCgkJdGhpcy5zaGFkb3dTaWRlID0gbnVsbDsKCgkJdGhpcy5jb2xvcldyaXRlID0gdHJ1ZTsKCgkJdGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbAoKCQl0aGlzLnBvbHlnb25PZmZzZXQgPSBmYWxzZTsKCQl0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwOwoJCXRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gMDsKCgkJdGhpcy5kaXRoZXJpbmcgPSBmYWxzZTsKCgkJdGhpcy5hbHBoYVRlc3QgPSAwOwoJCXRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7CgoJCXRoaXMudmlzaWJsZSA9IHRydWU7CgoJCXRoaXMudG9uZU1hcHBlZCA9IHRydWU7CgoJCXRoaXMudXNlckRhdGEgPSB7fTsKCgkJdGhpcy52ZXJzaW9uID0gMDsKCgl9CgoJTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBNYXRlcmlhbCwKCgkJaXNNYXRlcmlhbDogdHJ1ZSwKCgkJb25CZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7fSwKCgkJc2V0VmFsdWVzOiBmdW5jdGlvbiAoIHZhbHVlcyApIHsKCgkJCWlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSB7IHJldHVybjsgfQoKCQkJZm9yICggdmFyIGtleSBpbiB2YWx1ZXMgKSB7CgoJCQkJdmFyIG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTsKCgkJCQlpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggIlRIUkVFLk1hdGVyaWFsOiAnIiArIGtleSArICInIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuIiApOwoJCQkJCWNvbnRpbnVlOwoKCQkJCX0KCgkJCQkvLyBmb3IgYmFja3dhcmQgY29tcGF0YWJpbGl0eSBpZiBzaGFkaW5nIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3IKCQkJCWlmICgga2V5ID09PSAnc2hhZGluZycgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApOwoJCQkJCXRoaXMuZmxhdFNoYWRpbmcgPSAoIG5ld1ZhbHVlID09PSBGbGF0U2hhZGluZyApID8gdHJ1ZSA6IGZhbHNlOwoJCQkJCWNvbnRpbnVlOwoKCQkJCX0KCgkJCQl2YXIgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07CgoJCQkJaWYgKCBjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJY29uc29sZS53YXJuKCAiVEhSRUUuIiArIHRoaXMudHlwZSArICI6ICciICsga2V5ICsgIicgaXMgbm90IGEgcHJvcGVydHkgb2YgdGhpcyBtYXRlcmlhbC4iICk7CgkJCQkJY29udGludWU7CgoJCQkJfQoKCQkJCWlmICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc0NvbG9yICkgewoKCQkJCQljdXJyZW50VmFsdWUuc2V0KCBuZXdWYWx1ZSApOwoKCQkJCX0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkgewoKCQkJCQljdXJyZW50VmFsdWUuY29weSggbmV3VmFsdWUgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQl0aGlzWyBrZXkgXSA9IG5ld1ZhbHVlOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7CgoJCQl2YXIgaXNSb290ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7CgoJCQlpZiAoIGlzUm9vdCApIHsKCgkJCQltZXRhID0gewoJCQkJCXRleHR1cmVzOiB7fSwKCQkJCQlpbWFnZXM6IHt9CgkJCQl9OwoKCQkJfQoKCQkJdmFyIGRhdGEgPSB7CgkJCQltZXRhZGF0YTogewoJCQkJCXZlcnNpb246IDQuNSwKCQkJCQl0eXBlOiAnTWF0ZXJpYWwnLAoJCQkJCWdlbmVyYXRvcjogJ01hdGVyaWFsLnRvSlNPTicKCQkJCX0KCQkJfTsKCgkJCS8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb24KCQkJZGF0YS51dWlkID0gdGhpcy51dWlkOwoJCQlkYXRhLnR5cGUgPSB0aGlzLnR5cGU7CgoJCQlpZiAoIHRoaXMubmFtZSAhPT0gJycgKSB7IGRhdGEubmFtZSA9IHRoaXMubmFtZTsgfQoKCQkJaWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIHsgZGF0YS5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7IH0KCgkJCWlmICggdGhpcy5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIHsgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzczsgfQoJCQlpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSB7IGRhdGEubWV0YWxuZXNzID0gdGhpcy5tZXRhbG5lc3M7IH0KCgkJCWlmICggdGhpcy5zaGVlbiAmJiB0aGlzLnNoZWVuLmlzQ29sb3IgKSB7IGRhdGEuc2hlZW4gPSB0aGlzLnNoZWVuLmdldEhleCgpOyB9CgkJCWlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSB7IGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpOyB9CgkJCWlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxICkgeyBkYXRhLmVtaXNzaXZlSW50ZW5zaXR5ID0gdGhpcy5lbWlzc2l2ZUludGVuc2l0eTsgfQoKCQkJaWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIHsgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7IH0KCQkJaWYgKCB0aGlzLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzOyB9CgkJCWlmICggdGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIHsgZGF0YS5jbGVhcmNvYXQgPSB0aGlzLmNsZWFyY29hdDsgfQoJCQlpZiAoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSB7IGRhdGEuY2xlYXJjb2F0Um91Z2huZXNzID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3M7IH0KCgkJCWlmICggdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgJiYgdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAuaXNUZXh0dXJlICkgewoKCQkJCWRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDsKCQkJCWRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTsKCgkJCX0KCgkJCWlmICggdGhpcy5tYXAgJiYgdGhpcy5tYXAuaXNUZXh0dXJlICkgeyBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7IH0KCQkJaWYgKCB0aGlzLm1hdGNhcCAmJiB0aGlzLm1hdGNhcC5pc1RleHR1cmUgKSB7IGRhdGEubWF0Y2FwID0gdGhpcy5tYXRjYXAudG9KU09OKCBtZXRhICkudXVpZDsgfQoJCQlpZiAoIHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUgKSB7IGRhdGEuYWxwaGFNYXAgPSB0aGlzLmFscGhhTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7IH0KCQkJaWYgKCB0aGlzLmxpZ2h0TWFwICYmIHRoaXMubGlnaHRNYXAuaXNUZXh0dXJlICkgeyBkYXRhLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcC50b0pTT04oIG1ldGEgKS51dWlkOyB9CgoJCQlpZiAoIHRoaXMuYW9NYXAgJiYgdGhpcy5hb01hcC5pc1RleHR1cmUgKSB7CgoJCQkJZGF0YS5hb01hcCA9IHRoaXMuYW9NYXAudG9KU09OKCBtZXRhICkudXVpZDsKCQkJCWRhdGEuYW9NYXBJbnRlbnNpdHkgPSB0aGlzLmFvTWFwSW50ZW5zaXR5OwoKCQkJfQoKCQkJaWYgKCB0aGlzLmJ1bXBNYXAgJiYgdGhpcy5idW1wTWFwLmlzVGV4dHVyZSApIHsKCgkJCQlkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDsKCQkJCWRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7CgoJCQl9CgoJCQlpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHsKCgkJCQlkYXRhLm5vcm1hbE1hcCA9IHRoaXMubm9ybWFsTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CgkJCQlkYXRhLm5vcm1hbE1hcFR5cGUgPSB0aGlzLm5vcm1hbE1hcFR5cGU7CgkJCQlkYXRhLm5vcm1hbFNjYWxlID0gdGhpcy5ub3JtYWxTY2FsZS50b0FycmF5KCk7CgoJCQl9CgoJCQlpZiAoIHRoaXMuZGlzcGxhY2VtZW50TWFwICYmIHRoaXMuZGlzcGxhY2VtZW50TWFwLmlzVGV4dHVyZSApIHsKCgkJCQlkYXRhLmRpc3BsYWNlbWVudE1hcCA9IHRoaXMuZGlzcGxhY2VtZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CgkJCQlkYXRhLmRpc3BsYWNlbWVudFNjYWxlID0gdGhpcy5kaXNwbGFjZW1lbnRTY2FsZTsKCQkJCWRhdGEuZGlzcGxhY2VtZW50QmlhcyA9IHRoaXMuZGlzcGxhY2VtZW50QmlhczsKCgkJCX0KCgkJCWlmICggdGhpcy5yb3VnaG5lc3NNYXAgJiYgdGhpcy5yb3VnaG5lc3NNYXAuaXNUZXh0dXJlICkgeyBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7IH0KCQkJaWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSB7IGRhdGEubWV0YWxuZXNzTWFwID0gdGhpcy5tZXRhbG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDsgfQoKCQkJaWYgKCB0aGlzLmVtaXNzaXZlTWFwICYmIHRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlICkgeyBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkOyB9CgkJCWlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIHsgZGF0YS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAudG9KU09OKCBtZXRhICkudXVpZDsgfQoKCQkJaWYgKCB0aGlzLmVudk1hcCAmJiB0aGlzLmVudk1hcC5pc1RleHR1cmUgKSB7CgoJCQkJZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkOwoJCQkJZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTsgLy8gU2NhbGUgYmVoaW5kIGVudk1hcAoJCQkJZGF0YS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbzsKCgkJCQlpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7IH0KCQkJCWlmICggdGhpcy5lbnZNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIHsgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTsgfQoKCQkJfQoKCQkJaWYgKCB0aGlzLmdyYWRpZW50TWFwICYmIHRoaXMuZ3JhZGllbnRNYXAuaXNUZXh0dXJlICkgewoKCQkJCWRhdGEuZ3JhZGllbnRNYXAgPSB0aGlzLmdyYWRpZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7CgoJCQl9CgoJCQlpZiAoIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLnNpemUgPSB0aGlzLnNpemU7IH0KCQkJaWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLnNpemVBdHRlbnVhdGlvbiA9IHRoaXMuc2l6ZUF0dGVudWF0aW9uOyB9CgoJCQlpZiAoIHRoaXMuYmxlbmRpbmcgIT09IE5vcm1hbEJsZW5kaW5nICkgeyBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZzsgfQoJCQlpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSB7IGRhdGEuZmxhdFNoYWRpbmcgPSB0aGlzLmZsYXRTaGFkaW5nOyB9CgkJCWlmICggdGhpcy5zaWRlICE9PSBGcm9udFNpZGUgKSB7IGRhdGEuc2lkZSA9IHRoaXMuc2lkZTsgfQoJCQlpZiAoIHRoaXMudmVydGV4Q29sb3JzICE9PSBOb0NvbG9ycyApIHsgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9yczsgfQoKCQkJaWYgKCB0aGlzLm9wYWNpdHkgPCAxICkgeyBkYXRhLm9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7IH0KCQkJaWYgKCB0aGlzLnRyYW5zcGFyZW50ID09PSB0cnVlICkgeyBkYXRhLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudDsgfQoKCQkJZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYzsKCQkJZGF0YS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdDsKCQkJZGF0YS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlOwoKCQkJZGF0YS5zdGVuY2lsV3JpdGUgPSB0aGlzLnN0ZW5jaWxXcml0ZTsKCQkJZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrOwoJCQlkYXRhLnN0ZW5jaWxGdW5jID0gdGhpcy5zdGVuY2lsRnVuYzsKCQkJZGF0YS5zdGVuY2lsUmVmID0gdGhpcy5zdGVuY2lsUmVmOwoJCQlkYXRhLnN0ZW5jaWxGdW5jTWFzayA9IHRoaXMuc3RlbmNpbEZ1bmNNYXNrOwoJCQlkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDsKCQkJZGF0YS5zdGVuY2lsWkZhaWwgPSB0aGlzLnN0ZW5jaWxaRmFpbDsKCQkJZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzczsKCgkJCS8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbCkKCQkJaWYgKCB0aGlzLnJvdGF0aW9uICYmIHRoaXMucm90YXRpb24gIT09IDAgKSB7IGRhdGEucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uOyB9CgoJCQlpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIHsgZGF0YS5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTsgfQoJCQlpZiAoIHRoaXMucG9seWdvbk9mZnNldEZhY3RvciAhPT0gMCApIHsgZGF0YS5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gdGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yOyB9CgkJCWlmICggdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IDAgKSB7IGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7IH0KCgkJCWlmICggdGhpcy5saW5ld2lkdGggJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSB7IGRhdGEubGluZXdpZHRoID0gdGhpcy5saW5ld2lkdGg7IH0KCQkJaWYgKCB0aGlzLmRhc2hTaXplICE9PSB1bmRlZmluZWQgKSB7IGRhdGEuZGFzaFNpemUgPSB0aGlzLmRhc2hTaXplOyB9CgkJCWlmICggdGhpcy5nYXBTaXplICE9PSB1bmRlZmluZWQgKSB7IGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTsgfQoJCQlpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIHsgZGF0YS5zY2FsZSA9IHRoaXMuc2NhbGU7IH0KCgkJCWlmICggdGhpcy5kaXRoZXJpbmcgPT09IHRydWUgKSB7IGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTsgfQoKCQkJaWYgKCB0aGlzLmFscGhhVGVzdCA+IDAgKSB7IGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7IH0KCQkJaWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIHsgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTsgfQoKCQkJaWYgKCB0aGlzLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHsgZGF0YS53aXJlZnJhbWUgPSB0aGlzLndpcmVmcmFtZTsgfQoJCQlpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIHsgZGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSB0aGlzLndpcmVmcmFtZUxpbmV3aWR0aDsgfQoJCQlpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIHsgZGF0YS53aXJlZnJhbWVMaW5lY2FwID0gdGhpcy53aXJlZnJhbWVMaW5lY2FwOyB9CgkJCWlmICggdGhpcy53aXJlZnJhbWVMaW5lam9pbiAhPT0gJ3JvdW5kJyApIHsgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47IH0KCgkJCWlmICggdGhpcy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7IGRhdGEubW9ycGhUYXJnZXRzID0gdHJ1ZTsgfQoJCQlpZiAoIHRoaXMubW9ycGhOb3JtYWxzID09PSB0cnVlICkgeyBkYXRhLm1vcnBoTm9ybWFscyA9IHRydWU7IH0KCQkJaWYgKCB0aGlzLnNraW5uaW5nID09PSB0cnVlICkgeyBkYXRhLnNraW5uaW5nID0gdHJ1ZTsgfQoKCQkJaWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgeyBkYXRhLnZpc2libGUgPSBmYWxzZTsgfQoKCQkJaWYgKCB0aGlzLnRvbmVNYXBwZWQgPT09IGZhbHNlICkgeyBkYXRhLnRvbmVNYXBwZWQgPSBmYWxzZTsgfQoKCQkJaWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgeyBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTsgfQoKCQkJLy8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OCgoJCQlmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHsKCgkJCQl2YXIgdmFsdWVzID0gW107CgoJCQkJZm9yICggdmFyIGtleSBpbiBjYWNoZSApIHsKCgkJCQkJdmFyIGRhdGEgPSBjYWNoZVsga2V5IF07CgkJCQkJZGVsZXRlIGRhdGEubWV0YWRhdGE7CgkJCQkJdmFsdWVzLnB1c2goIGRhdGEgKTsKCgkJCQl9CgoJCQkJcmV0dXJuIHZhbHVlczsKCgkJCX0KCgkJCWlmICggaXNSb290ICkgewoKCQkJCXZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTsKCQkJCXZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApOwoKCQkJCWlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIHsgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzOyB9CgkJCQlpZiAoIGltYWdlcy5sZW5ndGggPiAwICkgeyBkYXRhLmltYWdlcyA9IGltYWdlczsgfQoKCQkJfQoKCQkJcmV0dXJuIGRhdGE7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJdGhpcy5uYW1lID0gc291cmNlLm5hbWU7CgoJCQl0aGlzLmZvZyA9IHNvdXJjZS5mb2c7CgoJCQl0aGlzLmJsZW5kaW5nID0gc291cmNlLmJsZW5kaW5nOwoJCQl0aGlzLnNpZGUgPSBzb3VyY2Uuc2lkZTsKCQkJdGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZzsKCQkJdGhpcy52ZXJ0ZXhUYW5nZW50cyA9IHNvdXJjZS52ZXJ0ZXhUYW5nZW50czsKCQkJdGhpcy52ZXJ0ZXhDb2xvcnMgPSBzb3VyY2UudmVydGV4Q29sb3JzOwoKCQkJdGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7CgkJCXRoaXMudHJhbnNwYXJlbnQgPSBzb3VyY2UudHJhbnNwYXJlbnQ7CgoJCQl0aGlzLmJsZW5kU3JjID0gc291cmNlLmJsZW5kU3JjOwoJCQl0aGlzLmJsZW5kRHN0ID0gc291cmNlLmJsZW5kRHN0OwoJCQl0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjsKCQkJdGhpcy5ibGVuZFNyY0FscGhhID0gc291cmNlLmJsZW5kU3JjQWxwaGE7CgkJCXRoaXMuYmxlbmREc3RBbHBoYSA9IHNvdXJjZS5ibGVuZERzdEFscGhhOwoJCQl0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7CgoJCQl0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7CgkJCXRoaXMuZGVwdGhUZXN0ID0gc291cmNlLmRlcHRoVGVzdDsKCQkJdGhpcy5kZXB0aFdyaXRlID0gc291cmNlLmRlcHRoV3JpdGU7CgoJCQl0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSBzb3VyY2Uuc3RlbmNpbFdyaXRlTWFzazsKCQkJdGhpcy5zdGVuY2lsRnVuYyA9IHNvdXJjZS5zdGVuY2lsRnVuYzsKCQkJdGhpcy5zdGVuY2lsUmVmID0gc291cmNlLnN0ZW5jaWxSZWY7CgkJCXRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gc291cmNlLnN0ZW5jaWxGdW5jTWFzazsKCQkJdGhpcy5zdGVuY2lsRmFpbCA9IHNvdXJjZS5zdGVuY2lsRmFpbDsKCQkJdGhpcy5zdGVuY2lsWkZhaWwgPSBzb3VyY2Uuc3RlbmNpbFpGYWlsOwoJCQl0aGlzLnN0ZW5jaWxaUGFzcyA9IHNvdXJjZS5zdGVuY2lsWlBhc3M7CgkJCXRoaXMuc3RlbmNpbFdyaXRlID0gc291cmNlLnN0ZW5jaWxXcml0ZTsKCgkJCXZhciBzcmNQbGFuZXMgPSBzb3VyY2UuY2xpcHBpbmdQbGFuZXMsCgkJCQlkc3RQbGFuZXMgPSBudWxsOwoKCQkJaWYgKCBzcmNQbGFuZXMgIT09IG51bGwgKSB7CgoJCQkJdmFyIG4gPSBzcmNQbGFuZXMubGVuZ3RoOwoJCQkJZHN0UGxhbmVzID0gbmV3IEFycmF5KCBuICk7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkKCQkJCQl7IGRzdFBsYW5lc1sgaSBdID0gc3JjUGxhbmVzWyBpIF0uY2xvbmUoKTsgfQoKCQkJfQoKCQkJdGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lczsKCQkJdGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247CgkJCXRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7CgoJCQl0aGlzLnNoYWRvd1NpZGUgPSBzb3VyY2Uuc2hhZG93U2lkZTsKCgkJCXRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlOwoKCQkJdGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uOwoKCQkJdGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7CgkJCXRoaXMucG9seWdvbk9mZnNldEZhY3RvciA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0RmFjdG9yOwoJCQl0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0VW5pdHM7CgoJCQl0aGlzLmRpdGhlcmluZyA9IHNvdXJjZS5kaXRoZXJpbmc7CgoJCQl0aGlzLmFscGhhVGVzdCA9IHNvdXJjZS5hbHBoYVRlc3Q7CgkJCXRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLnByZW11bHRpcGxpZWRBbHBoYTsKCgkJCXRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlOwoKCQkJdGhpcy50b25lTWFwcGVkID0gc291cmNlLnRvbmVNYXBwZWQ7CgoJCQl0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZGlzcG9zZTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KCBNYXRlcmlhbC5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHsKCgkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJaWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHsgdGhpcy52ZXJzaW9uICsrOyB9CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGNvbG9yOiA8aGV4PiwKCSAqICBvcGFjaXR5OiA8ZmxvYXQ+LAoJICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksCgkgKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksCgkgKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LAoJICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PiwKCSAqCgkgKiAgZGVwdGhUZXN0OiA8Ym9vbD4sCgkgKiAgZGVwdGhXcml0ZTogPGJvb2w+LAoJICoKCSAqICB3aXJlZnJhbWU6IDxib29sZWFuPiwKCSAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdNZXNoQmFzaWNNYXRlcmlhbCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlCgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5saWdodE1hcCA9IG51bGw7CgkJdGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5hb01hcCA9IG51bGw7CgkJdGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5zcGVjdWxhck1hcCA9IG51bGw7CgoJCXRoaXMuYWxwaGFNYXAgPSBudWxsOwoKCQl0aGlzLmVudk1hcCA9IG51bGw7CgkJdGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247CgkJdGhpcy5yZWZsZWN0aXZpdHkgPSAxOwoJCXRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODsKCgkJdGhpcy53aXJlZnJhbWUgPSBmYWxzZTsKCQl0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7CgkJdGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJzsKCQl0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJzsKCgkJdGhpcy5za2lubmluZyA9IGZhbHNlOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCU1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaEJhc2ljTWF0ZXJpYWw7CgoJTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlOwoKCU1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApOwoKCQl0aGlzLm1hcCA9IHNvdXJjZS5tYXA7CgoJCXRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7CgkJdGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTsKCgkJdGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDsKCQl0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5OwoKCQl0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwOwoKCQl0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwOwoKCQl0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7CgkJdGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7CgkJdGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5OwoJCXRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbzsKCgkJdGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDsKCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDsKCQl0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgX3ZlY3RvciQ0ID0gbmV3IFZlY3RvcjMoKTsKCglmdW5jdGlvbiBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHsKCgkJaWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkgewoKCQkJdGhyb3cgbmV3IFR5cGVFcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyApOwoKCQl9CgoJCXRoaXMubmFtZSA9ICcnOwoKCQl0aGlzLmFycmF5ID0gYXJyYXk7CgkJdGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplOwoJCXRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gaXRlbVNpemUgOiAwOwoJCXRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7CgoJCXRoaXMudXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7CgkJdGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07CgoJCXRoaXMudmVyc2lvbiA9IDA7CgoJfQoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwgJ25lZWRzVXBkYXRlJywgewoKCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoIHZhbHVlID09PSB0cnVlICkgeyB0aGlzLnZlcnNpb24gKys7IH0KCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7CgoJCWlzQnVmZmVyQXR0cmlidXRlOiB0cnVlLAoKCQlvblVwbG9hZENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fSwKCgkJc2V0VXNhZ2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLnVzYWdlID0gdmFsdWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQl0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTsKCQkJdGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApOwoJCQl0aGlzLml0ZW1TaXplID0gc291cmNlLml0ZW1TaXplOwoJCQl0aGlzLmNvdW50ID0gc291cmNlLmNvdW50OwoJCQl0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDsKCgkJCXRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weUF0OiBmdW5jdGlvbiAoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7CgoJCQlpbmRleDEgKj0gdGhpcy5pdGVtU2l6ZTsKCQkJaW5kZXgyICo9IGF0dHJpYnV0ZS5pdGVtU2l6ZTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpICsrICkgewoKCQkJCXRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlBcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHsKCgkJCXRoaXMuYXJyYXkuc2V0KCBhcnJheSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlDb2xvcnNBcnJheTogZnVuY3Rpb24gKCBjb2xvcnMgKSB7CgoJCQl2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gY29sb3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGNvbG9yID0gY29sb3JzWyBpIF07CgoJCQkJaWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCk6IGNvbG9yIGlzIHVuZGVmaW5lZCcsIGkgKTsKCQkJCQljb2xvciA9IG5ldyBDb2xvcigpOwoKCQkJCX0KCgkJCQlhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5yOwoJCQkJYXJyYXlbIG9mZnNldCArKyBdID0gY29sb3IuZzsKCQkJCWFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmI7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weVZlY3RvcjJzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHsKCgkJCXZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTsKCgkJCQlpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjJzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTsKCQkJCQl2ZWN0b3IgPSBuZXcgVmVjdG9yMigpOwoKCQkJCX0KCgkJCQlhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDsKCQkJCWFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55OwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlWZWN0b3Izc0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7CgoJCQl2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07CgoJCQkJaWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7CgkJCQkJdmVjdG9yID0gbmV3IFZlY3RvcjMoKTsKCgkJCQl9CgoJCQkJYXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7CgkJCQlhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTsKCQkJCWFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56OwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHlWZWN0b3I0c0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7CgoJCQl2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07CgoJCQkJaWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3I0c0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7CgkJCQkJdmVjdG9yID0gbmV3IFZlY3RvcjQoKTsKCgkJCQl9CgoJCQkJYXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7CgkJCQlhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTsKCQkJCWFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56OwoJCQkJYXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnc7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCgkJCQlfdmVjdG9yJDQueCA9IHRoaXMuZ2V0WCggaSApOwoJCQkJX3ZlY3RvciQ0LnkgPSB0aGlzLmdldFkoIGkgKTsKCQkJCV92ZWN0b3IkNC56ID0gdGhpcy5nZXRaKCBpICk7CgoJCQkJX3ZlY3RvciQ0LmFwcGx5TWF0cml4MyggbSApOwoKCQkJCXRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDQueCwgX3ZlY3RvciQ0LnksIF92ZWN0b3IkNC56ICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCgkJCQlfdmVjdG9yJDQueCA9IHRoaXMuZ2V0WCggaSApOwoJCQkJX3ZlY3RvciQ0LnkgPSB0aGlzLmdldFkoIGkgKTsKCQkJCV92ZWN0b3IkNC56ID0gdGhpcy5nZXRaKCBpICk7CgoJCQkJX3ZlY3RvciQ0LmFwcGx5TWF0cml4NCggbSApOwoKCQkJCXRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDQueCwgX3ZlY3RvciQ0LnksIF92ZWN0b3IkNC56ICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYXBwbHlOb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbSApIHsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkgewoKCQkJCV92ZWN0b3IkNC54ID0gdGhpcy5nZXRYKCBpICk7CgkJCQlfdmVjdG9yJDQueSA9IHRoaXMuZ2V0WSggaSApOwoJCQkJX3ZlY3RvciQ0LnogPSB0aGlzLmdldFooIGkgKTsKCgkJCQlfdmVjdG9yJDQuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTsKCgkJCQl0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ0LngsIF92ZWN0b3IkNC55LCBfdmVjdG9yJDQueiApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRyYW5zZm9ybURpcmVjdGlvbjogZnVuY3Rpb24gKCBtICkgewoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJX3ZlY3RvciQ0LnggPSB0aGlzLmdldFgoIGkgKTsKCQkJCV92ZWN0b3IkNC55ID0gdGhpcy5nZXRZKCBpICk7CgkJCQlfdmVjdG9yJDQueiA9IHRoaXMuZ2V0WiggaSApOwoKCQkJCV92ZWN0b3IkNC50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTsKCgkJCQl0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ0LngsIF92ZWN0b3IkNC55LCBfdmVjdG9yJDQueiApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRYOiBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkJcmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdOwoKCQl9LAoKCQlzZXRYOiBmdW5jdGlvbiAoIGluZGV4LCB4ICkgewoKCQkJdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB4OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldFk6IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQlyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdOwoKCQl9LAoKCQlzZXRZOiBmdW5jdGlvbiAoIGluZGV4LCB5ICkgewoKCQkJdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdID0geTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRaOiBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkJcmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXTsKCgkJfSwKCgkJc2V0WjogZnVuY3Rpb24gKCBpbmRleCwgeiApIHsKCgkJCXRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXSA9IHo7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0VzogZnVuY3Rpb24gKCBpbmRleCApIHsKCgkJCXJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF07CgoJCX0sCgoJCXNldFc6IGZ1bmN0aW9uICggaW5kZXgsIHcgKSB7CgoJCQl0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB3OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFhZOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5ICkgewoKCQkJaW5kZXggKj0gdGhpcy5pdGVtU2l6ZTsKCgkJCXRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDsKCQkJdGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFhZWjogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSwgeiApIHsKCgkJCWluZGV4ICo9IHRoaXMuaXRlbVNpemU7CgoJCQl0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7CgkJCXRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTsKCQkJdGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFhZWlc6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHosIHcgKSB7CgoJCQlpbmRleCAqPSB0aGlzLml0ZW1TaXplOwoKCQkJdGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4OwoJCQl0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7CgkJCXRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejsKCQkJdGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB3OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW9uVXBsb2FkOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKCQkJdGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5hcnJheSwgdGhpcy5pdGVtU2l6ZSApLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gewoJCQkJaXRlbVNpemU6IHRoaXMuaXRlbVNpemUsCgkJCQl0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsCgkJCQlhcnJheTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIHRoaXMuYXJyYXkgKSwKCQkJCW5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZAoJCQl9OwoKCQl9CgoJfSApOwoKCS8vCgoJZnVuY3Rpb24gSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkgewoKCQlCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEludDhBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTsKCgl9CgoJSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7CglJbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDhCdWZmZXJBdHRyaWJ1dGU7CgoKCWZ1bmN0aW9uIFVpbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7CgoJCUJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDhBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTsKCgl9CgoJVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApOwoJVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7CgoKCWZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkgewoKCQlCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApOwoKCX0KCglVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApOwoJVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZTsKCgoJZnVuY3Rpb24gSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHsKCgkJQnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApOwoKCX0KCglJbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7CglJbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQxNkJ1ZmZlckF0dHJpYnV0ZTsKCgoJZnVuY3Rpb24gVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7CgoJCUJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7CgoJfQoKCVVpbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7CglVaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDE2QnVmZmVyQXR0cmlidXRlOwoKCglmdW5jdGlvbiBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkgewoKCQlCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7CgoJfQoKCUludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTsKCUludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDMyQnVmZmVyQXR0cmlidXRlOwoKCglmdW5jdGlvbiBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHsKCgkJQnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTsKCgl9CgoJVWludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTsKCVVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7CgoKCWZ1bmN0aW9uIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHsKCgkJQnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBGbG9hdDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7CgoJfQoKCUZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApOwoJRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGbG9hdDMyQnVmZmVyQXR0cmlidXRlOwoKCglmdW5jdGlvbiBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7CgoJCUJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgRmxvYXQ2NEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApOwoKCX0KCglGbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTsKCUZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBEaXJlY3RHZW9tZXRyeSgpIHsKCgkJdGhpcy52ZXJ0aWNlcyA9IFtdOwoJCXRoaXMubm9ybWFscyA9IFtdOwoJCXRoaXMuY29sb3JzID0gW107CgkJdGhpcy51dnMgPSBbXTsKCQl0aGlzLnV2czIgPSBbXTsKCgkJdGhpcy5ncm91cHMgPSBbXTsKCgkJdGhpcy5tb3JwaFRhcmdldHMgPSB7fTsKCgkJdGhpcy5za2luV2VpZ2h0cyA9IFtdOwoJCXRoaXMuc2tpbkluZGljZXMgPSBbXTsKCgkJLy8gdGhpcy5saW5lRGlzdGFuY2VzID0gW107CgoJCXRoaXMuYm91bmRpbmdCb3ggPSBudWxsOwoJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsOwoKCQkvLyB1cGRhdGUgZmxhZ3MKCgkJdGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTsKCQl0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy51dnNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZmFsc2U7CgoJfQoKCU9iamVjdC5hc3NpZ24oIERpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSwgewoKCQljb21wdXRlR3JvdXBzOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkgewoKCQkJdmFyIGdyb3VwOwoJCQl2YXIgZ3JvdXBzID0gW107CgkJCXZhciBtYXRlcmlhbEluZGV4ID0gdW5kZWZpbmVkOwoKCQkJdmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJdmFyIGZhY2UgPSBmYWNlc1sgaSBdOwoKCQkJCS8vIG1hdGVyaWFscwoKCQkJCWlmICggZmFjZS5tYXRlcmlhbEluZGV4ICE9PSBtYXRlcmlhbEluZGV4ICkgewoKCQkJCQltYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4OwoKCQkJCQlpZiAoIGdyb3VwICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQlncm91cC5jb3VudCA9ICggaSAqIDMgKSAtIGdyb3VwLnN0YXJ0OwoJCQkJCQlncm91cHMucHVzaCggZ3JvdXAgKTsKCgkJCQkJfQoKCQkJCQlncm91cCA9IHsKCQkJCQkJc3RhcnQ6IGkgKiAzLAoJCQkJCQltYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4CgkJCQkJfTsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIGdyb3VwICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJZ3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDsKCQkJCWdyb3Vwcy5wdXNoKCBncm91cCApOwoKCQkJfQoKCQkJdGhpcy5ncm91cHMgPSBncm91cHM7CgoJCX0sCgoJCWZyb21HZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHsKCgkJCXZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzOwoJCQl2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlczsKCQkJdmFyIGZhY2VWZXJ0ZXhVdnMgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzOwoKCQkJdmFyIGhhc0ZhY2VWZXJ0ZXhVdiA9IGZhY2VWZXJ0ZXhVdnNbIDAgXSAmJiBmYWNlVmVydGV4VXZzWyAwIF0ubGVuZ3RoID4gMDsKCQkJdmFyIGhhc0ZhY2VWZXJ0ZXhVdjIgPSBmYWNlVmVydGV4VXZzWyAxIF0gJiYgZmFjZVZlcnRleFV2c1sgMSBdLmxlbmd0aCA+IDA7CgoJCQkvLyBtb3JwaHMKCgkJCXZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7CgkJCXZhciBtb3JwaFRhcmdldHNMZW5ndGggPSBtb3JwaFRhcmdldHMubGVuZ3RoOwoKCQkJdmFyIG1vcnBoVGFyZ2V0c1Bvc2l0aW9uOwoKCQkJaWYgKCBtb3JwaFRhcmdldHNMZW5ndGggPiAwICkgewoKCQkJCW1vcnBoVGFyZ2V0c1Bvc2l0aW9uID0gW107CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbW9ycGhUYXJnZXRzTGVuZ3RoOyBpICsrICkgewoKCQkJCQltb3JwaFRhcmdldHNQb3NpdGlvblsgaSBdID0gewoJCQkJCQluYW1lOiBtb3JwaFRhcmdldHNbIGkgXS5uYW1lLAoJCQkJCSAJZGF0YTogW10KCQkJCQl9OwoKCQkJCX0KCgkJCQl0aGlzLm1vcnBoVGFyZ2V0cy5wb3NpdGlvbiA9IG1vcnBoVGFyZ2V0c1Bvc2l0aW9uOwoKCQkJfQoKCQkJdmFyIG1vcnBoTm9ybWFscyA9IGdlb21ldHJ5Lm1vcnBoTm9ybWFsczsKCQkJdmFyIG1vcnBoTm9ybWFsc0xlbmd0aCA9IG1vcnBoTm9ybWFscy5sZW5ndGg7CgoJCQl2YXIgbW9ycGhUYXJnZXRzTm9ybWFsOwoKCQkJaWYgKCBtb3JwaE5vcm1hbHNMZW5ndGggPiAwICkgewoKCQkJCW1vcnBoVGFyZ2V0c05vcm1hbCA9IFtdOwoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoTm9ybWFsc0xlbmd0aDsgaSArKyApIHsKCgkJCQkJbW9ycGhUYXJnZXRzTm9ybWFsWyBpIF0gPSB7CgkJCQkJCW5hbWU6IG1vcnBoTm9ybWFsc1sgaSBdLm5hbWUsCgkJCQkJIAlkYXRhOiBbXQoJCQkJCX07CgoJCQkJfQoKCQkJCXRoaXMubW9ycGhUYXJnZXRzLm5vcm1hbCA9IG1vcnBoVGFyZ2V0c05vcm1hbDsKCgkJCX0KCgkJCS8vIHNraW5zCgoJCQl2YXIgc2tpbkluZGljZXMgPSBnZW9tZXRyeS5za2luSW5kaWNlczsKCQkJdmFyIHNraW5XZWlnaHRzID0gZ2VvbWV0cnkuc2tpbldlaWdodHM7CgoJCQl2YXIgaGFzU2tpbkluZGljZXMgPSBza2luSW5kaWNlcy5sZW5ndGggPT09IHZlcnRpY2VzLmxlbmd0aDsKCQkJdmFyIGhhc1NraW5XZWlnaHRzID0gc2tpbldlaWdodHMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7CgoJCQkvLwoKCQkJaWYgKCB2ZXJ0aWNlcy5sZW5ndGggPiAwICYmIGZhY2VzLmxlbmd0aCA9PT0gMCApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuRGlyZWN0R2VvbWV0cnk6IEZhY2VsZXNzIGdlb21ldHJpZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJyApOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgZmFjZXMubGVuZ3RoOyBpICsrICkgewoKCQkJCXZhciBmYWNlID0gZmFjZXNbIGkgXTsKCgkJCQl0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBmYWNlLmEgXSwgdmVydGljZXNbIGZhY2UuYiBdLCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTsKCgkJCQl2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFsczsKCgkJCQlpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkgewoKCQkJCQl0aGlzLm5vcm1hbHMucHVzaCggdmVydGV4Tm9ybWFsc1sgMCBdLCB2ZXJ0ZXhOb3JtYWxzWyAxIF0sIHZlcnRleE5vcm1hbHNbIDIgXSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXZhciBub3JtYWwgPSBmYWNlLm5vcm1hbDsKCgkJCQkJdGhpcy5ub3JtYWxzLnB1c2goIG5vcm1hbCwgbm9ybWFsLCBub3JtYWwgKTsKCgkJCQl9CgoJCQkJdmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzOwoKCQkJCWlmICggdmVydGV4Q29sb3JzLmxlbmd0aCA9PT0gMyApIHsKCgkJCQkJdGhpcy5jb2xvcnMucHVzaCggdmVydGV4Q29sb3JzWyAwIF0sIHZlcnRleENvbG9yc1sgMSBdLCB2ZXJ0ZXhDb2xvcnNbIDIgXSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXZhciBjb2xvciA9IGZhY2UuY29sb3I7CgoJCQkJCXRoaXMuY29sb3JzLnB1c2goIGNvbG9yLCBjb2xvciwgY29sb3IgKTsKCgkJCQl9CgoJCQkJaWYgKCBoYXNGYWNlVmVydGV4VXYgPT09IHRydWUgKSB7CgoJCQkJCXZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyAwIF1bIGkgXTsKCgkJCQkJaWYgKCB2ZXJ0ZXhVdnMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXRoaXMudXZzLnB1c2goIHZlcnRleFV2c1sgMCBdLCB2ZXJ0ZXhVdnNbIDEgXSwgdmVydGV4VXZzWyAyIF0gKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYgJywgaSApOwoKCQkJCQkJdGhpcy51dnMucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCWlmICggaGFzRmFjZVZlcnRleFV2MiA9PT0gdHJ1ZSApIHsKCgkJCQkJdmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDEgXVsgaSBdOwoKCQkJCQlpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQkJdGhpcy51dnMyLnB1c2goIHZlcnRleFV2c1sgMCBdLCB2ZXJ0ZXhVdnNbIDEgXSwgdmVydGV4VXZzWyAyIF0gKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYyICcsIGkgKTsKCgkJCQkJCXRoaXMudXZzMi5wdXNoKCBuZXcgVmVjdG9yMigpLCBuZXcgVmVjdG9yMigpLCBuZXcgVmVjdG9yMigpICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJLy8gbW9ycGhzCgoJCQkJZm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhUYXJnZXRzTGVuZ3RoOyBqICsrICkgewoKCQkJCQl2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGogXS52ZXJ0aWNlczsKCgkJCQkJbW9ycGhUYXJnZXRzUG9zaXRpb25bIGogXS5kYXRhLnB1c2goIG1vcnBoVGFyZ2V0WyBmYWNlLmEgXSwgbW9ycGhUYXJnZXRbIGZhY2UuYiBdLCBtb3JwaFRhcmdldFsgZmFjZS5jIF0gKTsKCgkJCQl9CgoJCQkJZm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBqICsrICkgewoKCQkJCQl2YXIgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGogXS52ZXJ0ZXhOb3JtYWxzWyBpIF07CgoJCQkJCW1vcnBoVGFyZ2V0c05vcm1hbFsgaiBdLmRhdGEucHVzaCggbW9ycGhOb3JtYWwuYSwgbW9ycGhOb3JtYWwuYiwgbW9ycGhOb3JtYWwuYyApOwoKCQkJCX0KCgkJCQkvLyBza2lucwoKCQkJCWlmICggaGFzU2tpbkluZGljZXMgKSB7CgoJCQkJCXRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGZhY2UuYSBdLCBza2luSW5kaWNlc1sgZmFjZS5iIF0sIHNraW5JbmRpY2VzWyBmYWNlLmMgXSApOwoKCQkJCX0KCgkJCQlpZiAoIGhhc1NraW5XZWlnaHRzICkgewoKCQkJCQl0aGlzLnNraW5XZWlnaHRzLnB1c2goIHNraW5XZWlnaHRzWyBmYWNlLmEgXSwgc2tpbldlaWdodHNbIGZhY2UuYiBdLCBza2luV2VpZ2h0c1sgZmFjZS5jIF0gKTsKCgkJCQl9CgoJCQl9CgoJCQl0aGlzLmNvbXB1dGVHcm91cHMoIGdlb21ldHJ5ICk7CgoJCQl0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZTsKCQkJdGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlOwoJCQl0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlOwoJCQl0aGlzLnV2c05lZWRVcGRhdGUgPSBnZW9tZXRyeS51dnNOZWVkVXBkYXRlOwoJCQl0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ncm91cHNOZWVkVXBkYXRlOwoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCgkJCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTsKCgkJCX0KCgkJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgoJCQkJdGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBhcnJheU1heCggYXJyYXkgKSB7CgoJCWlmICggYXJyYXkubGVuZ3RoID09PSAwICkgeyByZXR1cm4gLSBJbmZpbml0eTsgfQoKCQl2YXIgbWF4ID0gYXJyYXlbIDAgXTsKCgkJZm9yICggdmFyIGkgPSAxLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKysgaSApIHsKCgkJCWlmICggYXJyYXlbIGkgXSA+IG1heCApIHsgbWF4ID0gYXJyYXlbIGkgXTsgfQoKCQl9CgoJCXJldHVybiBtYXg7CgoJfQoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgX2J1ZmZlckdlb21ldHJ5SWQgPSAxOyAvLyBCdWZmZXJHZW9tZXRyeSB1c2VzIG9kZCBudW1iZXJzIGFzIElkCgoJdmFyIF9tMSQyID0gbmV3IE1hdHJpeDQoKTsKCXZhciBfb2JqID0gbmV3IE9iamVjdDNEKCk7Cgl2YXIgX29mZnNldCA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2JveCQyID0gbmV3IEJveDMoKTsKCXZhciBfYm94TW9ycGhUYXJnZXRzID0gbmV3IEJveDMoKTsKCXZhciBfdmVjdG9yJDUgPSBuZXcgVmVjdG9yMygpOwoKCWZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5KCkgewoKCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9idWZmZXJHZW9tZXRyeUlkICs9IDIgfSApOwoKCQl0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsKCgkJdGhpcy5uYW1lID0gJyc7CgkJdGhpcy50eXBlID0gJ0J1ZmZlckdlb21ldHJ5JzsKCgkJdGhpcy5pbmRleCA9IG51bGw7CgkJdGhpcy5hdHRyaWJ1dGVzID0ge307CgoJCXRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307CgkJdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGZhbHNlOwoKCQl0aGlzLmdyb3VwcyA9IFtdOwoKCQl0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDsKCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDsKCgkJdGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTsKCgkJdGhpcy51c2VyRGF0YSA9IHt9OwoKCX0KCglCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEJ1ZmZlckdlb21ldHJ5LAoKCQlpc0J1ZmZlckdlb21ldHJ5OiB0cnVlLAoKCQlnZXRJbmRleDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuaW5kZXg7CgoJCX0sCgoJCXNldEluZGV4OiBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkJaWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkgewoKCQkJCXRoaXMuaW5kZXggPSBuZXcgKCBhcnJheU1heCggaW5kZXggKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGV4LCAxICk7CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMuaW5kZXggPSBpbmRleDsKCgkJCX0KCgkJfSwKCgkJZ2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7CgoJCQlyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07CgoJCX0sCgoJCXNldEF0dHJpYnV0ZTogZnVuY3Rpb24gKCBuYW1lLCBhdHRyaWJ1dGUgKSB7CgoJCQl0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkZWxldGVBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHsKCgkJCWRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhZGRHcm91cDogZnVuY3Rpb24gKCBzdGFydCwgY291bnQsIG1hdGVyaWFsSW5kZXggKSB7CgoJCQl0aGlzLmdyb3Vwcy5wdXNoKCB7CgoJCQkJc3RhcnQ6IHN0YXJ0LAoJCQkJY291bnQ6IGNvdW50LAoJCQkJbWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWxJbmRleCA6IDAKCgkJCX0gKTsKCgkJfSwKCgkJY2xlYXJHcm91cHM6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuZ3JvdXBzID0gW107CgoJCX0sCgoJCXNldERyYXdSYW5nZTogZnVuY3Rpb24gKCBzdGFydCwgY291bnQgKSB7CgoJCQl0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0OwoJCQl0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50OwoKCQl9LAoKCQlhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7CgoJCQl2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247CgoJCQlpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7CgkJCQlwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQl9CgoJCQl2YXIgbm9ybWFsID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDsKCgkJCWlmICggbm9ybWFsICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTsKCgkJCQlub3JtYWwuYXBwbHlOb3JtYWxNYXRyaXgoIG5vcm1hbE1hdHJpeCApOwoKCQkJCW5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQl9CgoJCQl2YXIgdGFuZ2VudCA9IHRoaXMuYXR0cmlidXRlcy50YW5nZW50OwoKCQkJaWYgKCB0YW5nZW50ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdGFuZ2VudC50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeCApOwoKCQkJCXRhbmdlbnQubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJfQoKCQkJaWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkgewoKCQkJCXRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgoJCQl9CgoJCQlpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7CgoJCQkJdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3RhdGVYOiBmdW5jdGlvbiAoIGFuZ2xlICkgewoKCQkJLy8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB4LWF4aXMKCgkJCV9tMSQyLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBfbTEkMiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXJvdGF0ZVk6IGZ1bmN0aW9uICggYW5nbGUgKSB7CgoJCQkvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpcwoKCQkJX20xJDIubWFrZVJvdGF0aW9uWSggYW5nbGUgKTsKCgkJCXRoaXMuYXBwbHlNYXRyaXgoIF9tMSQyICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcm90YXRlWjogZnVuY3Rpb24gKCBhbmdsZSApIHsKCgkJCS8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgei1heGlzCgoJCQlfbTEkMi5tYWtlUm90YXRpb25aKCBhbmdsZSApOwoKCQkJdGhpcy5hcHBseU1hdHJpeCggX20xJDIgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0cmFuc2xhdGU6IGZ1bmN0aW9uICggeCwgeSwgeiApIHsKCgkJCS8vIHRyYW5zbGF0ZSBnZW9tZXRyeQoKCQkJX20xJDIubWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBfbTEkMiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7CgoJCQkvLyBzY2FsZSBnZW9tZXRyeQoKCQkJX20xJDIubWFrZVNjYWxlKCB4LCB5LCB6ICk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBfbTEkMiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWxvb2tBdDogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7CgoJCQlfb2JqLmxvb2tBdCggdmVjdG9yICk7CgoJCQlfb2JqLnVwZGF0ZU1hdHJpeCgpOwoKCQkJdGhpcy5hcHBseU1hdHJpeCggX29iai5tYXRyaXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljZW50ZXI6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgoJCQl0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggX29mZnNldCApLm5lZ2F0ZSgpOwoKCQkJdGhpcy50cmFuc2xhdGUoIF9vZmZzZXQueCwgX29mZnNldC55LCBfb2Zmc2V0LnogKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tT2JqZWN0OiBmdW5jdGlvbiAoIG9iamVjdCApIHsKCgkJCS8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuc2V0RnJvbU9iamVjdCgpLiBDb252ZXJ0aW5nJywgb2JqZWN0LCB0aGlzICk7CgoJCQl2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7CgoJCQlpZiAoIG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lICkgewoKCQkJCXZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyApOwoJCQkJdmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyApOwoKCQkJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzICkgKTsKCQkJCXRoaXMuc2V0QXR0cmlidXRlKCAnY29sb3InLCBjb2xvcnMuY29weUNvbG9yc0FycmF5KCBnZW9tZXRyeS5jb2xvcnMgKSApOwoKCQkJCWlmICggZ2VvbWV0cnkubGluZURpc3RhbmNlcyAmJiBnZW9tZXRyeS5saW5lRGlzdGFuY2VzLmxlbmd0aCA9PT0gZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICkgewoKCQkJCQl2YXIgbGluZURpc3RhbmNlcyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzLmxlbmd0aCwgMSApOwoKCQkJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIGxpbmVEaXN0YW5jZXMuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICkgKTsKCgkJCQl9CgoJCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCgkJCQkJdGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7CgoJCQkJfQoKCQkJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgoJCQkJCXRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpOwoKCQkJCX0KCgkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggKSB7CgoJCQkJaWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkgewoKCQkJCQl0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7CgoJCQl2YXIgcG9zaXRpb24gPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBwb2ludCA9IHBvaW50c1sgaSBdOwoJCQkJcG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7CgoJCQl9CgoJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCAzICkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl1cGRhdGVGcm9tT2JqZWN0OiBmdW5jdGlvbiAoIG9iamVjdCApIHsKCgkJCXZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTsKCgkJCWlmICggb2JqZWN0LmlzTWVzaCApIHsKCgkJCQl2YXIgZGlyZWN0ID0gZ2VvbWV0cnkuX19kaXJlY3RHZW9tZXRyeTsKCgkJCQlpZiAoIGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHsKCgkJCQkJZGlyZWN0ID0gdW5kZWZpbmVkOwoJCQkJCWdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCQkJCX0KCgkJCQlpZiAoIGRpcmVjdCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQlyZXR1cm4gdGhpcy5mcm9tR2VvbWV0cnkoIGdlb21ldHJ5ICk7CgoJCQkJfQoKCQkJCWRpcmVjdC52ZXJ0aWNlc05lZWRVcGRhdGUgPSBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU7CgkJCQlkaXJlY3Qubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTsKCQkJCWRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTsKCQkJCWRpcmVjdC51dnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZTsKCQkJCWRpcmVjdC5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTsKCgkJCQlnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTsKCQkJCWdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7CgkJCQlnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7CgkJCQlnZW9tZXRyeS51dnNOZWVkVXBkYXRlID0gZmFsc2U7CgkJCQlnZW9tZXRyeS5ncm91cHNOZWVkVXBkYXRlID0gZmFsc2U7CgoJCQkJZ2VvbWV0cnkgPSBkaXJlY3Q7CgoJCQl9CgoJCQl2YXIgYXR0cmlidXRlOwoKCQkJaWYgKCBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPT09IHRydWUgKSB7CgoJCQkJYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uOwoKCQkJCWlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCWF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKTsKCQkJCQlhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCQlnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTsKCgkJCX0KCgkJCWlmICggZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPT09IHRydWUgKSB7CgoJCQkJYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDsKCgkJCQlpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlhdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMgKTsKCQkJCQlhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCQlnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlID09PSB0cnVlICkgewoKCQkJCWF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5jb2xvcjsKCgkJCQlpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlhdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCBnZW9tZXRyeS5jb2xvcnMgKTsKCQkJCQlhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCQlnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7CgoJCQl9CgoJCQlpZiAoIGdlb21ldHJ5LnV2c05lZWRVcGRhdGUgKSB7CgoJCQkJYXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnV2OwoKCQkJCWlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCWF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICk7CgkJCQkJYXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9CgoJCQkJZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSApIHsKCgkJCQlhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXMubGluZURpc3RhbmNlOwoKCQkJCWlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCWF0dHJpYnV0ZS5jb3B5QXJyYXkoIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMgKTsKCQkJCQlhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCQlnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS5ncm91cHNOZWVkVXBkYXRlICkgewoKCQkJCWdlb21ldHJ5LmNvbXB1dGVHcm91cHMoIG9iamVjdC5nZW9tZXRyeSApOwoJCQkJdGhpcy5ncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7CgoJCQkJZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWZyb21HZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHsKCgkJCWdlb21ldHJ5Ll9fZGlyZWN0R2VvbWV0cnkgPSBuZXcgRGlyZWN0R2VvbWV0cnkoKS5mcm9tR2VvbWV0cnkoIGdlb21ldHJ5ICk7CgoJCQlyZXR1cm4gdGhpcy5mcm9tRGlyZWN0R2VvbWV0cnkoIGdlb21ldHJ5Ll9fZGlyZWN0R2VvbWV0cnkgKTsKCgkJfSwKCgkJZnJvbURpcmVjdEdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkgewoKCQkJdmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCAqIDMgKTsKCQkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS52ZXJ0aWNlcyApICk7CgoJCQlpZiAoIGdlb21ldHJ5Lm5vcm1hbHMubGVuZ3RoID4gMCApIHsKCgkJCQl2YXIgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMubGVuZ3RoICogMyApOwoJCQkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkuY29weVZlY3RvcjNzQXJyYXkoIGdlb21ldHJ5Lm5vcm1hbHMgKSApOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoID4gMCApIHsKCgkJCQl2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMgKTsKCQkJCXRoaXMuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7CgoJCQl9CgoJCQlpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkgewoKCQkJCXZhciB1dnMgPSBuZXcgRmxvYXQzMkFycmF5KCBnZW9tZXRyeS51dnMubGVuZ3RoICogMiApOwoJCQkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApLmNvcHlWZWN0b3Iyc0FycmF5KCBnZW9tZXRyeS51dnMgKSApOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS51dnMyLmxlbmd0aCA+IDAgKSB7CgoJCQkJdmFyIHV2czIgPSBuZXcgRmxvYXQzMkFycmF5KCBnZW9tZXRyeS51dnMyLmxlbmd0aCAqIDIgKTsKCQkJCXRoaXMuc2V0QXR0cmlidXRlKCAndXYyJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdXZzMiwgMiApLmNvcHlWZWN0b3Iyc0FycmF5KCBnZW9tZXRyeS51dnMyICkgKTsKCgkJCX0KCgkJCS8vIGdyb3VwcwoKCQkJdGhpcy5ncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7CgoJCQkvLyBtb3JwaHMKCgkJCWZvciAoIHZhciBuYW1lIGluIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyApIHsKCgkJCQl2YXIgYXJyYXkgPSBbXTsKCQkJCXZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIG5hbWUgXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJdmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07CgoJCQkJCXZhciBhdHRyaWJ1dGUgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhUYXJnZXQuZGF0YS5sZW5ndGggKiAzLCAzICk7CgkJCQkJYXR0cmlidXRlLm5hbWUgPSBtb3JwaFRhcmdldC5uYW1lOwoKCQkJCQlhcnJheS5wdXNoKCBhdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoIG1vcnBoVGFyZ2V0LmRhdGEgKSApOwoKCQkJCX0KCgkJCQl0aGlzLm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdID0gYXJyYXk7CgoJCQl9CgoJCQkvLyBza2lubmluZwoKCQkJaWYgKCBnZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGggPiAwICkgewoKCQkJCXZhciBza2luSW5kaWNlcyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGggKiA0LCA0ICk7CgkJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3NraW5JbmRleCcsIHNraW5JbmRpY2VzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luSW5kaWNlcyApICk7CgoJCQl9CgoJCQlpZiAoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCA+IDAgKSB7CgoJCQkJdmFyIHNraW5XZWlnaHRzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQgKTsKCQkJCXRoaXMuc2V0QXR0cmlidXRlKCAnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luV2VpZ2h0cyApICk7CgoJCQl9CgoJCQkvLwoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCgkJCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTsKCgkJCX0KCgkJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgoJCQkJdGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7CgoJCQlpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7CgoJCQkJdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7CgoJCQl9CgoJCQl2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247CgkJCXZhciBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uOwoKCQkJaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTsKCgkJCQkvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudAoKCQkJCWlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCXZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07CgkJCQkJCV9ib3gkMi5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApOwoKCQkJCQkJaWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKCQkJCQkJCV92ZWN0b3IkNS5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1pbiwgX2JveCQyLm1pbiApOwoJCQkJCQkJdGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDUgKTsKCgkJCQkJCQlfdmVjdG9yJDUuYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5tYXgsIF9ib3gkMi5tYXggKTsKCQkJCQkJCXRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ1ICk7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCXRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveCQyLm1pbiApOwoJCQkJCQkJdGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94JDIubWF4ICk7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7CgoJCQl9CgoJCQlpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3g6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgInBvc2l0aW9uIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7CgoJCQl9CgoJCX0sCgoJCWNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7CgoJCQl9CgoJCQl2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247CgkJCXZhciBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uOwoKCQkJaWYgKCBwb3NpdGlvbiApIHsKCgkJCQkvLyBmaXJzdCwgZmluZCB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBzcGhlcmUKCgkJCQl2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7CgoJCQkJX2JveCQyLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7CgoJCQkJLy8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnQKCgkJCQlpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkgewoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQl2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdOwoJCQkJCQlfYm94TW9ycGhUYXJnZXRzLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7CgoJCQkJCQlpZiAoIHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7CgoJCQkJCQkJX3ZlY3RvciQ1LmFkZFZlY3RvcnMoIF9ib3gkMi5taW4sIF9ib3hNb3JwaFRhcmdldHMubWluICk7CgkJCQkJCQlfYm94JDIuZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ1ICk7CgoJCQkJCQkJX3ZlY3RvciQ1LmFkZFZlY3RvcnMoIF9ib3gkMi5tYXgsIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7CgkJCQkJCQlfYm94JDIuZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ1ICk7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCV9ib3gkMi5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1pbiApOwoJCQkJCQkJX2JveCQyLmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQkJX2JveCQyLmdldENlbnRlciggY2VudGVyICk7CgoJCQkJLy8gc2Vjb25kLCB0cnkgdG8gZmluZCBhIGJvdW5kaW5nU3BoZXJlIHdpdGggYSByYWRpdXMgc21hbGxlciB0aGFuIHRoZQoJCQkJLy8gYm91bmRpbmdTcGhlcmUgb2YgdGhlIGJvdW5kaW5nQm94OiBzcXJ0KDMpIHNtYWxsZXIgaW4gdGhlIGJlc3QgY2FzZQoKCQkJCXZhciBtYXhSYWRpdXNTcSA9IDA7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHBvc2l0aW9uLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCV92ZWN0b3IkNS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaSApOwoKCQkJCQltYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yJDUgKSApOwoKCQkJCX0KCgkJCQkvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudAoKCQkJCWlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCXZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07CgkJCQkJCXZhciBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7CgoJCQkJCQlmb3IgKCB2YXIgaiA9IDAsIGpsID0gbW9ycGhBdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJCQlfdmVjdG9yJDUuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGogKTsKCgkJCQkJCQlpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKCQkJCQkJCQlfb2Zmc2V0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBqICk7CgkJCQkJCQkJX3ZlY3RvciQ1LmFkZCggX29mZnNldCApOwoKCQkJCQkJCX0KCgkJCQkJCQltYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yJDUgKSApOwoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfQoKCQkJCXRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApOwoKCQkJCWlmICggaXNOYU4oIHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzICkgKSB7CgoJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlICJwb3NpdGlvbiIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyApOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJY29tcHV0ZUZhY2VOb3JtYWxzOiBmdW5jdGlvbiAoKSB7CgoJCQkvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoKCQl9LAoKCQljb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGluZGV4ID0gdGhpcy5pbmRleDsKCQkJdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7CgoJCQlpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gKSB7CgoJCQkJdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7CgoJCQkJaWYgKCBhdHRyaWJ1dGVzLm5vcm1hbCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9ucy5sZW5ndGggKSwgMyApICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvCgoJCQkJCXZhciBhcnJheSA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5OwoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gYXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQlhcnJheVsgaSBdID0gMDsKCgkJCQkJfQoKCQkJCX0KCgkJCQl2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5OwoKCQkJCXZhciB2QSwgdkIsIHZDOwoJCQkJdmFyIHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7CgkJCQl2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7CgoJCQkJLy8gaW5kZXhlZCBlbGVtZW50cwoKCQkJCWlmICggaW5kZXggKSB7CgoJCQkJCXZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7CgoJCQkJCQl2QSA9IGluZGljZXNbIGkgKyAwIF0gKiAzOwoJCQkJCQl2QiA9IGluZGljZXNbIGkgKyAxIF0gKiAzOwoJCQkJCQl2QyA9IGluZGljZXNbIGkgKyAyIF0gKiAzOwoKCQkJCQkJcEEuZnJvbUFycmF5KCBwb3NpdGlvbnMsIHZBICk7CgkJCQkJCXBCLmZyb21BcnJheSggcG9zaXRpb25zLCB2QiApOwoJCQkJCQlwQy5mcm9tQXJyYXkoIHBvc2l0aW9ucywgdkMgKTsKCgkJCQkJCWNiLnN1YlZlY3RvcnMoIHBDLCBwQiApOwoJCQkJCQlhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTsKCQkJCQkJY2IuY3Jvc3MoIGFiICk7CgoJCQkJCQlub3JtYWxzWyB2QSBdICs9IGNiLng7CgkJCQkJCW5vcm1hbHNbIHZBICsgMSBdICs9IGNiLnk7CgkJCQkJCW5vcm1hbHNbIHZBICsgMiBdICs9IGNiLno7CgoJCQkJCQlub3JtYWxzWyB2QiBdICs9IGNiLng7CgkJCQkJCW5vcm1hbHNbIHZCICsgMSBdICs9IGNiLnk7CgkJCQkJCW5vcm1hbHNbIHZCICsgMiBdICs9IGNiLno7CgoJCQkJCQlub3JtYWxzWyB2QyBdICs9IGNiLng7CgkJCQkJCW5vcm1hbHNbIHZDICsgMSBdICs9IGNiLnk7CgkJCQkJCW5vcm1hbHNbIHZDICsgMiBdICs9IGNiLno7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQkvLyBub24taW5kZXhlZCBlbGVtZW50cyAodW5jb25uZWN0ZWQgdHJpYW5nbGUgc291cCkKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBpbDsgaSArPSA5ICkgewoKCQkJCQkJcEEuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKTsKCQkJCQkJcEIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyAzICk7CgkJCQkJCXBDLmZyb21BcnJheSggcG9zaXRpb25zLCBpICsgNiApOwoKCQkJCQkJY2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7CgkJCQkJCWFiLnN1YlZlY3RvcnMoIHBBLCBwQiApOwoJCQkJCQljYi5jcm9zcyggYWIgKTsKCgkJCQkJCW5vcm1hbHNbIGkgXSA9IGNiLng7CgkJCQkJCW5vcm1hbHNbIGkgKyAxIF0gPSBjYi55OwoJCQkJCQlub3JtYWxzWyBpICsgMiBdID0gY2IuejsKCgkJCQkJCW5vcm1hbHNbIGkgKyAzIF0gPSBjYi54OwoJCQkJCQlub3JtYWxzWyBpICsgNCBdID0gY2IueTsKCQkJCQkJbm9ybWFsc1sgaSArIDUgXSA9IGNiLno7CgoJCQkJCQlub3JtYWxzWyBpICsgNiBdID0gY2IueDsKCQkJCQkJbm9ybWFsc1sgaSArIDcgXSA9IGNiLnk7CgkJCQkJCW5vcm1hbHNbIGkgKyA4IF0gPSBjYi56OwoKCQkJCQl9CgoJCQkJfQoKCQkJCXRoaXMubm9ybWFsaXplTm9ybWFscygpOwoKCQkJCWF0dHJpYnV0ZXMubm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCX0KCgkJfSwKCgkJbWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9mZnNldCApIHsKCgkJCWlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5LicsIGdlb21ldHJ5ICk7CgkJCQlyZXR1cm47CgoJCQl9CgoJCQlpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCW9mZnNldCA9IDA7CgoJCQkJY29uc29sZS53YXJuKAoJCQkJCSdUSFJFRS5CdWZmZXJHZW9tZXRyeS5tZXJnZSgpOiBPdmVyd3JpdGluZyBvcmlnaW5hbCBnZW9tZXRyeSwgc3RhcnRpbmcgYXQgb2Zmc2V0PTAuICcKCQkJCQkrICdVc2UgQnVmZmVyR2VvbWV0cnlVdGlscy5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmb3IgbG9zc2xlc3MgbWVyZ2UuJwoJCQkJKTsKCgkJCX0KCgkJCXZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwoKCQkJZm9yICggdmFyIGtleSBpbiBhdHRyaWJ1dGVzICkgewoKCQkJCWlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHsgY29udGludWU7IH0KCgkJCQl2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdOwoJCQkJdmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7CgoJCQkJdmFyIGF0dHJpYnV0ZTIgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzWyBrZXkgXTsKCQkJCXZhciBhdHRyaWJ1dGVBcnJheTIgPSBhdHRyaWJ1dGUyLmFycmF5OwoKCQkJCXZhciBhdHRyaWJ1dGVPZmZzZXQgPSBhdHRyaWJ1dGUyLml0ZW1TaXplICogb2Zmc2V0OwoJCQkJdmFyIGxlbmd0aCA9IE1hdGgubWluKCBhdHRyaWJ1dGVBcnJheTIubGVuZ3RoLCBhdHRyaWJ1dGVBcnJheTEubGVuZ3RoIC0gYXR0cmlidXRlT2Zmc2V0ICk7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBqID0gYXR0cmlidXRlT2Zmc2V0OyBpIDwgbGVuZ3RoOyBpICsrLCBqICsrICkgewoKCQkJCQlhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlub3JtYWxpemVOb3JtYWxzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gbm9ybWFscy5jb3VudDsgaSA8IGlsOyBpICsrICkgewoKCQkJCV92ZWN0b3IkNS54ID0gbm9ybWFscy5nZXRYKCBpICk7CgkJCQlfdmVjdG9yJDUueSA9IG5vcm1hbHMuZ2V0WSggaSApOwoJCQkJX3ZlY3RvciQ1LnogPSBub3JtYWxzLmdldFooIGkgKTsKCgkJCQlfdmVjdG9yJDUubm9ybWFsaXplKCk7CgoJCQkJbm9ybWFscy5zZXRYWVooIGksIF92ZWN0b3IkNS54LCBfdmVjdG9yJDUueSwgX3ZlY3RvciQ1LnogKTsKCgkJCX0KCgkJfSwKCgkJdG9Ob25JbmRleGVkOiBmdW5jdGlvbiAoKSB7CgoJCQlmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7CgoJCQkJdmFyIGFycmF5ID0gYXR0cmlidXRlLmFycmF5OwoJCQkJdmFyIGl0ZW1TaXplID0gYXR0cmlidXRlLml0ZW1TaXplOwoKCQkJCXZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTsKCgkJCQl2YXIgaW5kZXggPSAwLCBpbmRleDIgPSAwOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJaW5kZXggPSBpbmRpY2VzWyBpIF0gKiBpdGVtU2l6ZTsKCgkJCQkJZm9yICggdmFyIGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7CgoJCQkJCQlhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07CgoJCQkJCX0KCgkJCQl9CgoJCQkJcmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUgKTsKCgkJCX0KCgkJCS8vCgoJCQlpZiAoIHRoaXMuaW5kZXggPT09IG51bGwgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApOwoJCQkJcmV0dXJuIHRoaXM7CgoJCQl9CgoJCQl2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgoJCQl2YXIgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7CgkJCXZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwoKCQkJLy8gYXR0cmlidXRlcwoKCQkJZm9yICggdmFyIG5hbWUgaW4gYXR0cmlidXRlcyApIHsKCgkJCQl2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdOwoKCQkJCXZhciBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTsKCgkJCQlnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCBuYW1lLCBuZXdBdHRyaWJ1dGUgKTsKCgkJCX0KCgkJCS8vIG1vcnBoIGF0dHJpYnV0ZXMKCgkJCXZhciBtb3JwaEF0dHJpYnV0ZXMgPSB0aGlzLm1vcnBoQXR0cmlidXRlczsKCgkJCWZvciAoIG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkgewoKCQkJCXZhciBtb3JwaEFycmF5ID0gW107CgkJCQl2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzCgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQl2YXIgYXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVbIGkgXTsKCgkJCQkJdmFyIG5ld0F0dHJpYnV0ZSA9IGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApOwoKCQkJCQltb3JwaEFycmF5LnB1c2goIG5ld0F0dHJpYnV0ZSApOwoKCQkJCX0KCgkJCQlnZW9tZXRyeTIubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBtb3JwaEFycmF5OwoKCQkJfQoKCQkJZ2VvbWV0cnkyLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTsKCgkJCS8vIGdyb3VwcwoKCQkJdmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07CgkJCQlnZW9tZXRyeTIuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApOwoKCQkJfQoKCQkJcmV0dXJuIGdlb21ldHJ5MjsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZGF0YSA9IHsKCQkJCW1ldGFkYXRhOiB7CgkJCQkJdmVyc2lvbjogNC41LAoJCQkJCXR5cGU6ICdCdWZmZXJHZW9tZXRyeScsCgkJCQkJZ2VuZXJhdG9yOiAnQnVmZmVyR2VvbWV0cnkudG9KU09OJwoJCQkJfQoJCQl9OwoKCQkJLy8gc3RhbmRhcmQgQnVmZmVyR2VvbWV0cnkgc2VyaWFsaXphdGlvbgoKCQkJZGF0YS51dWlkID0gdGhpcy51dWlkOwoJCQlkYXRhLnR5cGUgPSB0aGlzLnR5cGU7CgkJCWlmICggdGhpcy5uYW1lICE9PSAnJyApIHsgZGF0YS5uYW1lID0gdGhpcy5uYW1lOyB9CgkJCWlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgeyBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTsgfQoKCQkJaWYgKCB0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVyczsKCgkJCQlmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7CgoJCQkJCWlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHsgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTsgfQoKCQkJCX0KCgkJCQlyZXR1cm4gZGF0YTsKCgkJCX0KCgkJCWRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTsKCgkJCXZhciBpbmRleCA9IHRoaXMuaW5kZXg7CgoJCQlpZiAoIGluZGV4ICE9PSBudWxsICkgewoKCQkJCWRhdGEuZGF0YS5pbmRleCA9IHsKCQkJCQl0eXBlOiBpbmRleC5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLAoJCQkJCWFycmF5OiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggaW5kZXguYXJyYXkgKQoJCQkJfTsKCgkJCX0KCgkJCXZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwoKCQkJZm9yICggdmFyIGtleSBpbiBhdHRyaWJ1dGVzICkgewoKCQkJCXZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTsKCgkJCQl2YXIgYXR0cmlidXRlRGF0YSA9IGF0dHJpYnV0ZS50b0pTT04oKTsKCgkJCQlpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSAnJyApIHsgYXR0cmlidXRlRGF0YS5uYW1lID0gYXR0cmlidXRlLm5hbWU7IH0KCgkJCQlkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSBhdHRyaWJ1dGVEYXRhOwoKCQkJfQoKCQkJdmFyIG1vcnBoQXR0cmlidXRlcyA9IHt9OwoJCQl2YXIgaGFzTW9ycGhBdHRyaWJ1dGVzID0gZmFsc2U7CgoJCQlmb3IgKCB2YXIga2V5IGluIHRoaXMubW9ycGhBdHRyaWJ1dGVzICkgewoKCQkJCXZhciBhdHRyaWJ1dGVBcnJheSA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXTsKCgkJCQl2YXIgYXJyYXkgPSBbXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gYXR0cmlidXRlQXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCXZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdOwoKCQkJCQl2YXIgYXR0cmlidXRlRGF0YSA9IGF0dHJpYnV0ZS50b0pTT04oKTsKCgkJCQkJaWYgKCBhdHRyaWJ1dGUubmFtZSAhPT0gJycgKSB7IGF0dHJpYnV0ZURhdGEubmFtZSA9IGF0dHJpYnV0ZS5uYW1lOyB9CgoJCQkJCWFycmF5LnB1c2goIGF0dHJpYnV0ZURhdGEgKTsKCgkJCQl9CgoJCQkJaWYgKCBhcnJheS5sZW5ndGggPiAwICkgewoKCQkJCQltb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7CgoJCQkJCWhhc01vcnBoQXR0cmlidXRlcyA9IHRydWU7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSB7CgoJCQkJZGF0YS5kYXRhLm1vcnBoQXR0cmlidXRlcyA9IG1vcnBoQXR0cmlidXRlczsKCQkJCWRhdGEuZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7CgoJCQl9CgoJCQl2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7CgoJCQlpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkgewoKCQkJCWRhdGEuZGF0YS5ncm91cHMgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggZ3JvdXBzICkgKTsKCgkJCX0KCgkJCXZhciBib3VuZGluZ1NwaGVyZSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7CgoJCQlpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkgewoKCQkJCWRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHsKCQkJCQljZW50ZXI6IGJvdW5kaW5nU3BoZXJlLmNlbnRlci50b0FycmF5KCksCgkJCQkJcmFkaXVzOiBib3VuZGluZ1NwaGVyZS5yYWRpdXMKCQkJCX07CgoJCQl9CgoJCQlyZXR1cm4gZGF0YTsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCS8qCgkJCSAvLyBIYW5kbGUgcHJpbWl0aXZlcwoKCQkJIHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzOwoKCQkJIGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkgewoKCQkJIHZhciB2YWx1ZXMgPSBbXTsKCgkJCSBmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7CgoJCQkgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7CgoJCQkgfQoKCQkJIHZhciBnZW9tZXRyeSA9IE9iamVjdC5jcmVhdGUoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlICk7CgkJCSB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KCBnZW9tZXRyeSwgdmFsdWVzICk7CgkJCSByZXR1cm4gZ2VvbWV0cnk7CgoJCQkgfQoKCQkJIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCQkJICovCgoJCQlyZXR1cm4gbmV3IEJ1ZmZlckdlb21ldHJ5KCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCXZhciBuYW1lLCBpLCBsOwoKCQkJLy8gcmVzZXQKCgkJCXRoaXMuaW5kZXggPSBudWxsOwoJCQl0aGlzLmF0dHJpYnV0ZXMgPSB7fTsKCQkJdGhpcy5tb3JwaEF0dHJpYnV0ZXMgPSB7fTsKCQkJdGhpcy5ncm91cHMgPSBbXTsKCQkJdGhpcy5ib3VuZGluZ0JveCA9IG51bGw7CgkJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsOwoKCQkJLy8gbmFtZQoKCQkJdGhpcy5uYW1lID0gc291cmNlLm5hbWU7CgoJCQkvLyBpbmRleAoKCQkJdmFyIGluZGV4ID0gc291cmNlLmluZGV4OwoKCQkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCgkJCQl0aGlzLnNldEluZGV4KCBpbmRleC5jbG9uZSgpICk7CgoJCQl9CgoJCQkvLyBhdHRyaWJ1dGVzCgoJCQl2YXIgYXR0cmlidXRlcyA9IHNvdXJjZS5hdHRyaWJ1dGVzOwoKCQkJZm9yICggbmFtZSBpbiBhdHRyaWJ1dGVzICkgewoKCQkJCXZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07CgkJCQl0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTsKCgkJCX0KCgkJCS8vIG1vcnBoIGF0dHJpYnV0ZXMKCgkJCXZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzOwoKCQkJZm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7CgoJCQkJdmFyIGFycmF5ID0gW107CgkJCQl2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzCgoJCQkJZm9yICggaSA9IDAsIGwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQlhcnJheS5wdXNoKCBtb3JwaEF0dHJpYnV0ZVsgaSBdLmNsb25lKCkgKTsKCgkJCQl9CgoJCQkJdGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5OwoKCQkJfQoKCQkJdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHNvdXJjZS5tb3JwaFRhcmdldHNSZWxhdGl2ZTsKCgkJCS8vIGdyb3VwcwoKCQkJdmFyIGdyb3VwcyA9IHNvdXJjZS5ncm91cHM7CgoJCQlmb3IgKCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBncm91cCA9IGdyb3Vwc1sgaSBdOwoJCQkJdGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7CgoJCQl9CgoJCQkvLyBib3VuZGluZyBib3gKCgkJCXZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDsKCgkJCWlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7CgoJCQkJdGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7CgoJCQl9CgoJCQkvLyBib3VuZGluZyBzcGhlcmUKCgkJCXZhciBib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZTsKCgkJCWlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7CgoJCQkJdGhpcy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nU3BoZXJlLmNsb25lKCk7CgoJCQl9CgoJCQkvLyBkcmF3IHJhbmdlCgoJCQl0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHNvdXJjZS5kcmF3UmFuZ2Uuc3RhcnQ7CgkJCXRoaXMuZHJhd1JhbmdlLmNvdW50ID0gc291cmNlLmRyYXdSYW5nZS5jb3VudDsKCgkJCS8vIHVzZXIgZGF0YQoKCQkJdGhpcy51c2VyRGF0YSA9IHNvdXJjZS51c2VyRGF0YTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkaXNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbS8KCSAqLwoKCXZhciBfaW52ZXJzZU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX3JheSA9IG5ldyBSYXkoKTsKCXZhciBfc3BoZXJlID0gbmV3IFNwaGVyZSgpOwoKCXZhciBfdkEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92QiA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3ZDID0gbmV3IFZlY3RvcjMoKTsKCgl2YXIgX3RlbXBBID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdGVtcEIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF90ZW1wQyA9IG5ldyBWZWN0b3IzKCk7CgoJdmFyIF9tb3JwaEEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9tb3JwaEIgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9tb3JwaEMgPSBuZXcgVmVjdG9yMygpOwoKCXZhciBfdXZBID0gbmV3IFZlY3RvcjIoKTsKCXZhciBfdXZCID0gbmV3IFZlY3RvcjIoKTsKCXZhciBfdXZDID0gbmV3IFZlY3RvcjIoKTsKCgl2YXIgX2ludGVyc2VjdGlvblBvaW50ID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICkgewoKCQlPYmplY3QzRC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdNZXNoJzsKCgkJdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCXRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7CgoJCXRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7CgoJfQoKCU1lc2gucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IE1lc2gsCgoJCWlzTWVzaDogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQlPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCWlmICggc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpOwoKCQkJfQoKCQkJaWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKCQkJdmFyIG0sIG1sLCBuYW1lOwoKCQkJaWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJCXZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7CgkJCQl2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTsKCgkJCQlpZiAoIGtleXMubGVuZ3RoID4gMCApIHsKCgkJCQkJdmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTsKCgkJCQkJaWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQkJdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTsKCQkJCQkJdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTsKCgkJCQkJCWZvciAoIG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkgewoKCQkJCQkJCW5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7CgoJCQkJCQkJdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApOwoJCQkJCQkJdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCXZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7CgoJCQkJaWYgKCBtb3JwaFRhcmdldHMgIT09IHVuZGVmaW5lZCAmJiBtb3JwaFRhcmdldHMubGVuZ3RoID4gMCApIHsKCgkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1lc2gudXBkYXRlTW9ycGhUYXJnZXRzKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7CgoJCQkJfQoKCQkJfQoKCQl9LAoKCQlyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHsKCgkJCXZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CgkJCXZhciBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7CgkJCXZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7CgoJCQlpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7IHJldHVybjsgfQoKCQkJLy8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5CgoJCQlpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgeyBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsgfQoKCQkJX3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApOwoJCQlfc3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTsKCgkJCWlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCS8vCgoJCQlfaW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApOwoJCQlfcmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4ICk7CgoJCQkvLyBDaGVjayBib3VuZGluZ0JveCBiZWZvcmUgY29udGludWluZwoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHsKCgkJCQlpZiAoIF9yYXkuaW50ZXJzZWN0c0JveCggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQkJfQoKCQkJdmFyIGludGVyc2VjdGlvbjsKCgkJCWlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHsKCgkJCQl2YXIgYSwgYiwgYzsKCQkJCXZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4OwoJCQkJdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCQkJCXZhciBtb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uOwoJCQkJdmFyIG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7CgkJCQl2YXIgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2OwoJCQkJdmFyIHV2MiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYyOwoJCQkJdmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwczsKCQkJCXZhciBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7CgkJCQl2YXIgaSwgaiwgaWwsIGpsOwoJCQkJdmFyIGdyb3VwLCBncm91cE1hdGVyaWFsOwoJCQkJdmFyIHN0YXJ0LCBlbmQ7CgoJCQkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCgkJCQkJLy8gaW5kZXhlZCBidWZmZXIgZ2VvbWV0cnkKCgkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkgewoKCQkJCQkJZm9yICggaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQkJCWdyb3VwID0gZ3JvdXBzWyBpIF07CgkJCQkJCQlncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTsKCgkJCQkJCQlzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7CgkJCQkJCQllbmQgPSBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTsKCgkJCQkJCQlmb3IgKCBqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMyApIHsKCgkJCQkJCQkJYSA9IGluZGV4LmdldFgoIGogKTsKCQkJCQkJCQliID0gaW5kZXguZ2V0WCggaiArIDEgKTsKCQkJCQkJCQljID0gaW5kZXguZ2V0WCggaiArIDIgKTsKCgkJCQkJCQkJaW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTsKCgkJCQkJCQkJaWYgKCBpbnRlcnNlY3Rpb24gKSB7CgoJCQkJCQkJCQlpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljcwoJCQkJCQkJCQlpbnRlcnNlY3Rpb24uZmFjZS5tYXRlcmlhbEluZGV4ID0gZ3JvdXAubWF0ZXJpYWxJbmRleDsKCQkJCQkJCQkJaW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTsKCgkJCQkJCQkJfQoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApOwoJCQkJCQllbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTsKCgkJCQkJCWZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkgewoKCQkJCQkJCWEgPSBpbmRleC5nZXRYKCBpICk7CgkJCQkJCQliID0gaW5kZXguZ2V0WCggaSArIDEgKTsKCQkJCQkJCWMgPSBpbmRleC5nZXRYKCBpICsgMiApOwoKCQkJCQkJCWludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXksIHBvc2l0aW9uLCBtb3JwaFBvc2l0aW9uLCBtb3JwaFRhcmdldHNSZWxhdGl2ZSwgdXYsIHV2MiwgYSwgYiwgYyApOwoKCQkJCQkJCWlmICggaW50ZXJzZWN0aW9uICkgewoKCQkJCQkJCQlpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljcwoJCQkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJLy8gbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5CgoJCQkJCWlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHsKCgkJCQkJCWZvciAoIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCQlncm91cCA9IGdyb3Vwc1sgaSBdOwoJCQkJCQkJZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07CgoJCQkJCQkJc3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApOwoJCQkJCQkJZW5kID0gTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7CgoJCQkJCQkJZm9yICggaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7CgoJCQkJCQkJCWEgPSBqOwoJCQkJCQkJCWIgPSBqICsgMTsKCQkJCQkJCQljID0gaiArIDI7CgoJCQkJCQkJCWludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7CgoJCQkJCQkJCWlmICggaW50ZXJzZWN0aW9uICkgewoKCQkJCQkJCQkJaW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzCgkJCQkJCQkJCWludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4OwoJCQkJCQkJCQlpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApOwoKCQkJCQkJCQl9CgoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoKCQkJCQkJc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7CgkJCQkJCWVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApOwoKCQkJCQkJZm9yICggaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7CgoJCQkJCQkJYSA9IGk7CgkJCQkJCQliID0gaSArIDE7CgkJCQkJCQljID0gaSArIDI7CgoJCQkJCQkJaW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7CgoJCQkJCQkJaWYgKCBpbnRlcnNlY3Rpb24gKSB7CgoJCQkJCQkJCWludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljcwoJCQkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCQl2YXIgZnZBLCBmdkIsIGZ2QzsKCQkJCXZhciBpc011bHRpTWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApOwoKCQkJCXZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzOwoJCQkJdmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7CgkJCQl2YXIgdXZzOwoKCQkJCXZhciBmYWNlVmVydGV4VXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgMCBdOwoJCQkJaWYgKCBmYWNlVmVydGV4VXZzLmxlbmd0aCA+IDAgKSB7IHV2cyA9IGZhY2VWZXJ0ZXhVdnM7IH0KCgkJCQlmb3IgKCB2YXIgZiA9IDAsIGZsID0gZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7CgoJCQkJCXZhciBmYWNlID0gZmFjZXNbIGYgXTsKCQkJCQl2YXIgZmFjZU1hdGVyaWFsID0gaXNNdWx0aU1hdGVyaWFsID8gbWF0ZXJpYWxbIGZhY2UubWF0ZXJpYWxJbmRleCBdIDogbWF0ZXJpYWw7CgoJCQkJCWlmICggZmFjZU1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7IGNvbnRpbnVlOyB9CgoJCQkJCWZ2QSA9IHZlcnRpY2VzWyBmYWNlLmEgXTsKCQkJCQlmdkIgPSB2ZXJ0aWNlc1sgZmFjZS5iIF07CgkJCQkJZnZDID0gdmVydGljZXNbIGZhY2UuYyBdOwoKCQkJCQlpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgZmFjZU1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXksIGZ2QSwgZnZCLCBmdkMsIF9pbnRlcnNlY3Rpb25Qb2ludCApOwoKCQkJCQlpZiAoIGludGVyc2VjdGlvbiApIHsKCgkJCQkJCWlmICggdXZzICYmIHV2c1sgZiBdICkgewoKCQkJCQkJCXZhciB1dnNfZiA9IHV2c1sgZiBdOwoJCQkJCQkJX3V2QS5jb3B5KCB1dnNfZlsgMCBdICk7CgkJCQkJCQlfdXZCLmNvcHkoIHV2c19mWyAxIF0gKTsKCQkJCQkJCV91dkMuY29weSggdXZzX2ZbIDIgXSApOwoKCQkJCQkJCWludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIGZ2QSwgZnZCLCBmdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTsKCgkJCQkJCX0KCgkJCQkJCWludGVyc2VjdGlvbi5mYWNlID0gZmFjZTsKCQkJCQkJaW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IGY7CgkJCQkJCWludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7CgoJCX0KCgl9ICk7CgoJZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwQSwgcEIsIHBDLCBwb2ludCApIHsKCgkJdmFyIGludGVyc2VjdDsKCgkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsKCgkJCWludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEMsIHBCLCBwQSwgdHJ1ZSwgcG9pbnQgKTsKCgkJfSBlbHNlIHsKCgkJCWludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEEsIHBCLCBwQywgbWF0ZXJpYWwuc2lkZSAhPT0gRG91YmxlU2lkZSwgcG9pbnQgKTsKCgkJfQoKCQlpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHsgcmV0dXJuIG51bGw7IH0KCgkJX2ludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTsKCQlfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApOwoKCQl2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCApOwoKCQlpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgeyByZXR1cm4gbnVsbDsgfQoKCQlyZXR1cm4gewoJCQlkaXN0YW5jZTogZGlzdGFuY2UsCgkJCXBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLAoJCQlvYmplY3Q6IG9iamVjdAoJCX07CgoJfQoKCWZ1bmN0aW9uIGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKSB7CgoJCV92QS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYSApOwoJCV92Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYiApOwoJCV92Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYyApOwoKCQl2YXIgbW9ycGhJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlczsKCgkJaWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgJiYgbW9ycGhQb3NpdGlvbiAmJiBtb3JwaEluZmx1ZW5jZXMgKSB7CgoJCQlfbW9ycGhBLnNldCggMCwgMCwgMCApOwoJCQlfbW9ycGhCLnNldCggMCwgMCwgMCApOwoJCQlfbW9ycGhDLnNldCggMCwgMCwgMCApOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdOwoJCQkJdmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhQb3NpdGlvblsgaSBdOwoKCQkJCWlmICggaW5mbHVlbmNlID09PSAwICkgeyBjb250aW51ZTsgfQoKCQkJCV90ZW1wQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgYSApOwoJCQkJX3RlbXBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBiICk7CgkJCQlfdGVtcEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGMgKTsKCgkJCQlpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkgewoKCQkJCQlfbW9ycGhBLmFkZFNjYWxlZFZlY3RvciggX3RlbXBBLCBpbmZsdWVuY2UgKTsKCQkJCQlfbW9ycGhCLmFkZFNjYWxlZFZlY3RvciggX3RlbXBCLCBpbmZsdWVuY2UgKTsKCQkJCQlfbW9ycGhDLmFkZFNjYWxlZFZlY3RvciggX3RlbXBDLCBpbmZsdWVuY2UgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlfbW9ycGhBLmFkZFNjYWxlZFZlY3RvciggX3RlbXBBLnN1YiggX3ZBICksIGluZmx1ZW5jZSApOwoJCQkJCV9tb3JwaEIuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEIuc3ViKCBfdkIgKSwgaW5mbHVlbmNlICk7CgkJCQkJX21vcnBoQy5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQy5zdWIoIF92QyApLCBpbmZsdWVuY2UgKTsKCgkJCQl9CgoJCQl9CgoJCQlfdkEuYWRkKCBfbW9ycGhBICk7CgkJCV92Qi5hZGQoIF9tb3JwaEIgKTsKCQkJX3ZDLmFkZCggX21vcnBoQyApOwoKCQl9CgoJCXZhciBpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIF92QSwgX3ZCLCBfdkMsIF9pbnRlcnNlY3Rpb25Qb2ludCApOwoKCQlpZiAoIGludGVyc2VjdGlvbiApIHsKCgkJCWlmICggdXYgKSB7CgoJCQkJX3V2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYSApOwoJCQkJX3V2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYiApOwoJCQkJX3V2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYyApOwoKCQkJCWludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTsKCgkJCX0KCgkJCWlmICggdXYyICkgewoKCQkJCV91dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBhICk7CgkJCQlfdXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2MiwgYiApOwoJCQkJX3V2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGMgKTsKCgkJCQlpbnRlcnNlY3Rpb24udXYyID0gVHJpYW5nbGUuZ2V0VVYoIF9pbnRlcnNlY3Rpb25Qb2ludCwgX3ZBLCBfdkIsIF92QywgX3V2QSwgX3V2QiwgX3V2QywgbmV3IFZlY3RvcjIoKSApOwoKCQkJfQoKCQkJdmFyIGZhY2UgPSBuZXcgRmFjZTMoIGEsIGIsIGMgKTsKCQkJVHJpYW5nbGUuZ2V0Tm9ybWFsKCBfdkEsIF92QiwgX3ZDLCBmYWNlLm5vcm1hbCApOwoKCQkJaW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlOwoKCQl9CgoJCXJldHVybiBpbnRlcnNlY3Rpb247CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3Iga2lsZSAvIGh0dHA6Ly9raWxlLnN0cmF2YWdhbnphLm9yZy8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlLwoJICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZwoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICovCgoJdmFyIF9nZW9tZXRyeUlkID0gMDsgLy8gR2VvbWV0cnkgdXNlcyBldmVuIG51bWJlcnMgYXMgSWQKCXZhciBfbTEkMyA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX29iaiQxID0gbmV3IE9iamVjdDNEKCk7Cgl2YXIgX29mZnNldCQxID0gbmV3IFZlY3RvcjMoKTsKCglmdW5jdGlvbiBHZW9tZXRyeSgpIHsKCgkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfZ2VvbWV0cnlJZCArPSAyIH0gKTsKCgkJdGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7CgoJCXRoaXMubmFtZSA9ICcnOwoJCXRoaXMudHlwZSA9ICdHZW9tZXRyeSc7CgoJCXRoaXMudmVydGljZXMgPSBbXTsKCQl0aGlzLmNvbG9ycyA9IFtdOwoJCXRoaXMuZmFjZXMgPSBbXTsKCQl0aGlzLmZhY2VWZXJ0ZXhVdnMgPSBbW11dOwoKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdOwoJCXRoaXMubW9ycGhOb3JtYWxzID0gW107CgoJCXRoaXMuc2tpbldlaWdodHMgPSBbXTsKCQl0aGlzLnNraW5JbmRpY2VzID0gW107CgoJCXRoaXMubGluZURpc3RhbmNlcyA9IFtdOwoKCQl0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDsKCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDsKCgkJLy8gdXBkYXRlIGZsYWdzCgoJCXRoaXMuZWxlbWVudHNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTsKCQl0aGlzLnV2c05lZWRVcGRhdGUgPSBmYWxzZTsKCQl0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7CgkJdGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlOwoJCXRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlOwoKCX0KCglHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEdlb21ldHJ5LAoKCQlpc0dlb21ldHJ5OiB0cnVlLAoKCQlhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7CgoJCQl2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIHZlcnRleCA9IHRoaXMudmVydGljZXNbIGkgXTsKCQkJCXZlcnRleC5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIGZhY2UgPSB0aGlzLmZhY2VzWyBpIF07CgkJCQlmYWNlLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpOwoKCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCWZhY2UudmVydGV4Tm9ybWFsc1sgaiBdLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkgewoKCQkJCXRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgoJCQl9CgoJCQlpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7CgoJCQkJdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCgkJCX0KCgkJCXRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTsKCQkJdGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcm90YXRlWDogZnVuY3Rpb24gKCBhbmdsZSApIHsKCgkJCS8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzCgoJCQlfbTEkMy5tYWtlUm90YXRpb25YKCBhbmdsZSApOwoKCQkJdGhpcy5hcHBseU1hdHJpeCggX20xJDMgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyb3RhdGVZOiBmdW5jdGlvbiAoIGFuZ2xlICkgewoKCQkJLy8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB5LWF4aXMKCgkJCV9tMSQzLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBfbTEkMyApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXJvdGF0ZVo6IGZ1bmN0aW9uICggYW5nbGUgKSB7CgoJCQkvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpcwoKCQkJX20xJDMubWFrZVJvdGF0aW9uWiggYW5nbGUgKTsKCgkJCXRoaXMuYXBwbHlNYXRyaXgoIF9tMSQzICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdHJhbnNsYXRlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7CgoJCQkvLyB0cmFuc2xhdGUgZ2VvbWV0cnkKCgkJCV9tMSQzLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApOwoKCQkJdGhpcy5hcHBseU1hdHJpeCggX20xJDMgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzY2FsZTogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJLy8gc2NhbGUgZ2VvbWV0cnkKCgkJCV9tMSQzLm1ha2VTY2FsZSggeCwgeSwgeiApOwoKCQkJdGhpcy5hcHBseU1hdHJpeCggX20xJDMgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlsb29rQXQ6IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQkJX29iaiQxLmxvb2tBdCggdmVjdG9yICk7CgoJCQlfb2JqJDEudXBkYXRlTWF0cml4KCk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBfb2JqJDEubWF0cml4ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZnJvbUJ1ZmZlckdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkgewoKCQkJdmFyIHNjb3BlID0gdGhpczsKCgkJCXZhciBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgPyBnZW9tZXRyeS5pbmRleC5hcnJheSA6IHVuZGVmaW5lZDsKCQkJdmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwoKCQkJaWYgKCBhdHRyaWJ1dGVzLnBvc2l0aW9uID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5LmZyb21CdWZmZXJHZW9tZXRyeSgpOiBQb3NpdGlvbiBhdHRyaWJ1dGUgcmVxdWlyZWQgZm9yIGNvbnZlcnNpb24uJyApOwoJCQkJcmV0dXJuIHRoaXM7CgoJCQl9CgoJCQl2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTsKCQkJdmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXkgOiB1bmRlZmluZWQ7CgkJCXZhciBjb2xvcnMgPSBhdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQgPyBhdHRyaWJ1dGVzLmNvbG9yLmFycmF5IDogdW5kZWZpbmVkOwoJCQl2YXIgdXZzID0gYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51di5hcnJheSA6IHVuZGVmaW5lZDsKCQkJdmFyIHV2czIgPSBhdHRyaWJ1dGVzLnV2MiAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51djIuYXJyYXkgOiB1bmRlZmluZWQ7CgoJCQlpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHsgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBbXTsgfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzICkgewoKCQkJCXNjb3BlLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKSApOwoKCQkJCWlmICggY29sb3JzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXNjb3BlLmNvbG9ycy5wdXNoKCBuZXcgQ29sb3IoKS5mcm9tQXJyYXkoIGNvbG9ycywgaSApICk7CgoJCQkJfQoKCQkJfQoKCQkJZnVuY3Rpb24gYWRkRmFjZSggYSwgYiwgYywgbWF0ZXJpYWxJbmRleCApIHsKCgkJCQl2YXIgdmVydGV4Q29sb3JzID0gKCBjb2xvcnMgPT09IHVuZGVmaW5lZCApID8gW10gOiBbCgkJCQkJc2NvcGUuY29sb3JzWyBhIF0uY2xvbmUoKSwKCQkJCQlzY29wZS5jb2xvcnNbIGIgXS5jbG9uZSgpLAoJCQkJCXNjb3BlLmNvbG9yc1sgYyBdLmNsb25lKCkgXTsKCgkJCQl2YXIgdmVydGV4Tm9ybWFscyA9ICggbm9ybWFscyA9PT0gdW5kZWZpbmVkICkgPyBbXSA6IFsKCQkJCQluZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYSAqIDMgKSwKCQkJCQluZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYiAqIDMgKSwKCQkJCQluZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYyAqIDMgKQoJCQkJXTsKCgkJCQl2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYywgdmVydGV4Tm9ybWFscywgdmVydGV4Q29sb3JzLCBtYXRlcmlhbEluZGV4ICk7CgoJCQkJc2NvcGUuZmFjZXMucHVzaCggZmFjZSApOwoKCQkJCWlmICggdXZzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDAgXS5wdXNoKCBbCgkJCQkJCW5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGEgKiAyICksCgkJCQkJCW5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGIgKiAyICksCgkJCQkJCW5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGMgKiAyICkKCQkJCQldICk7CgoJCQkJfQoKCQkJCWlmICggdXZzMiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlzY29wZS5mYWNlVmVydGV4VXZzWyAxIF0ucHVzaCggWwoJCQkJCQluZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYSAqIDIgKSwKCQkJCQkJbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHV2czIsIGIgKiAyICksCgkJCQkJCW5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBjICogMiApCgkJCQkJXSApOwoKCQkJCX0KCgkJCX0KCgkJCXZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7CgoJCQlpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkgewoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJCXZhciBncm91cCA9IGdyb3Vwc1sgaSBdOwoKCQkJCQl2YXIgc3RhcnQgPSBncm91cC5zdGFydDsKCQkJCQl2YXIgY291bnQgPSBncm91cC5jb3VudDsKCgkJCQkJZm9yICggdmFyIGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHsKCgkJCQkJCWlmICggaW5kaWNlcyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCWFkZEZhY2UoIGluZGljZXNbIGogXSwgaW5kaWNlc1sgaiArIDEgXSwgaW5kaWNlc1sgaiArIDIgXSwgZ3JvdXAubWF0ZXJpYWxJbmRleCApOwoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQlhZGRGYWNlKCBqLCBqICsgMSwgaiArIDIsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBpbmRpY2VzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMgKSB7CgoJCQkJCQlhZGRGYWNlKCBpbmRpY2VzWyBpIF0sIGluZGljZXNbIGkgKyAxIF0sIGluZGljZXNbIGkgKyAyIF0gKTsKCgkJCQkJfQoKCQkJCX0gZWxzZSB7CgoJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpICs9IDMgKSB7CgoJCQkJCQlhZGRGYWNlKCBpLCBpICsgMSwgaSArIDIgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7CgoJCQlpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpOwoKCQkJfQoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHsKCgkJCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljZW50ZXI6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7CgoJCQl0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggX29mZnNldCQxICkubmVnYXRlKCk7CgoJCQl0aGlzLnRyYW5zbGF0ZSggX29mZnNldCQxLngsIF9vZmZzZXQkMS55LCBfb2Zmc2V0JDEueiApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCW5vcm1hbGl6ZTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCgkJCXZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjsKCQkJdmFyIHJhZGl1cyA9IHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzOwoKCQkJdmFyIHMgPSByYWRpdXMgPT09IDAgPyAxIDogMS4wIC8gcmFkaXVzOwoKCQkJdmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7CgkJCW1hdHJpeC5zZXQoCgkJCQlzLCAwLCAwLCAtIHMgKiBjZW50ZXIueCwKCQkJCTAsIHMsIDAsIC0gcyAqIGNlbnRlci55LAoJCQkJMCwgMCwgcywgLSBzICogY2VudGVyLnosCgkJCQkwLCAwLCAwLCAxCgkJCSk7CgoJCQl0aGlzLmFwcGx5TWF0cml4KCBtYXRyaXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTsKCgkJCWZvciAoIHZhciBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkgewoKCQkJCXZhciBmYWNlID0gdGhpcy5mYWNlc1sgZiBdOwoKCQkJCXZhciB2QSA9IHRoaXMudmVydGljZXNbIGZhY2UuYSBdOwoJCQkJdmFyIHZCID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5iIF07CgkJCQl2YXIgdkMgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmMgXTsKCgkJCQljYi5zdWJWZWN0b3JzKCB2QywgdkIgKTsKCQkJCWFiLnN1YlZlY3RvcnMoIHZBLCB2QiApOwoJCQkJY2IuY3Jvc3MoIGFiICk7CgoJCQkJY2Iubm9ybWFsaXplKCk7CgoJCQkJZmFjZS5ub3JtYWwuY29weSggY2IgKTsKCgkJCX0KCgkJfSwKCgkJY29tcHV0ZVZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICggYXJlYVdlaWdodGVkICkgewoKCQkJaWYgKCBhcmVhV2VpZ2h0ZWQgPT09IHVuZGVmaW5lZCApIHsgYXJlYVdlaWdodGVkID0gdHJ1ZTsgfQoKCQkJdmFyIHYsIHZsLCBmLCBmbCwgZmFjZSwgdmVydGljZXM7CgoJCQl2ZXJ0aWNlcyA9IG5ldyBBcnJheSggdGhpcy52ZXJ0aWNlcy5sZW5ndGggKTsKCgkJCWZvciAoIHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7CgoJCQkJdmVydGljZXNbIHYgXSA9IG5ldyBWZWN0b3IzKCk7CgoJCQl9CgoJCQlpZiAoIGFyZWFXZWlnaHRlZCApIHsKCgkJCQkvLyB2ZXJ0ZXggbm9ybWFscyB3ZWlnaHRlZCBieSB0cmlhbmdsZSBhcmVhcwoJCQkJLy8gaHR0cDovL3d3dy5pcXVpbGV6bGVzLm9yZy93d3cvYXJ0aWNsZXMvbm9ybWFscy9ub3JtYWxzLmh0bQoKCQkJCXZhciB2QSwgdkIsIHZDOwoJCQkJdmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpOwoKCQkJCWZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7CgoJCQkJCWZhY2UgPSB0aGlzLmZhY2VzWyBmIF07CgoJCQkJCXZBID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5hIF07CgkJCQkJdkIgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmIgXTsKCQkJCQl2QyA9IHRoaXMudmVydGljZXNbIGZhY2UuYyBdOwoKCQkJCQljYi5zdWJWZWN0b3JzKCB2QywgdkIgKTsKCQkJCQlhYi5zdWJWZWN0b3JzKCB2QSwgdkIgKTsKCQkJCQljYi5jcm9zcyggYWIgKTsKCgkJCQkJdmVydGljZXNbIGZhY2UuYSBdLmFkZCggY2IgKTsKCQkJCQl2ZXJ0aWNlc1sgZmFjZS5iIF0uYWRkKCBjYiApOwoJCQkJCXZlcnRpY2VzWyBmYWNlLmMgXS5hZGQoIGNiICk7CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQl0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpOwoKCQkJCWZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7CgoJCQkJCWZhY2UgPSB0aGlzLmZhY2VzWyBmIF07CgoJCQkJCXZlcnRpY2VzWyBmYWNlLmEgXS5hZGQoIGZhY2Uubm9ybWFsICk7CgkJCQkJdmVydGljZXNbIGZhY2UuYiBdLmFkZCggZmFjZS5ub3JtYWwgKTsKCQkJCQl2ZXJ0aWNlc1sgZmFjZS5jIF0uYWRkKCBmYWNlLm5vcm1hbCApOwoKCQkJCX0KCgkJCX0KCgkJCWZvciAoIHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7CgoJCQkJdmVydGljZXNbIHYgXS5ub3JtYWxpemUoKTsKCgkJCX0KCgkJCWZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7CgoJCQkJZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTsKCgkJCQl2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFsczsKCgkJCQlpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkgewoKCQkJCQl2ZXJ0ZXhOb3JtYWxzWyAwIF0uY29weSggdmVydGljZXNbIGZhY2UuYSBdICk7CgkJCQkJdmVydGV4Tm9ybWFsc1sgMSBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmIgXSApOwoJCQkJCXZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTsKCgkJCQl9IGVsc2UgewoKCQkJCQl2ZXJ0ZXhOb3JtYWxzWyAwIF0gPSB2ZXJ0aWNlc1sgZmFjZS5hIF0uY2xvbmUoKTsKCQkJCQl2ZXJ0ZXhOb3JtYWxzWyAxIF0gPSB2ZXJ0aWNlc1sgZmFjZS5iIF0uY2xvbmUoKTsKCQkJCQl2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSB2ZXJ0aWNlc1sgZmFjZS5jIF0uY2xvbmUoKTsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIHRoaXMuZmFjZXMubGVuZ3RoID4gMCApIHsKCgkJCQl0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTsKCgkJCX0KCgkJfSwKCgkJY29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZiwgZmwsIGZhY2U7CgoJCQl0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpOwoKCQkJZm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHsKCgkJCQlmYWNlID0gdGhpcy5mYWNlc1sgZiBdOwoKCQkJCXZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzOwoKCQkJCWlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7CgoJCQkJCXZlcnRleE5vcm1hbHNbIDAgXS5jb3B5KCBmYWNlLm5vcm1hbCApOwoJCQkJCXZlcnRleE5vcm1hbHNbIDEgXS5jb3B5KCBmYWNlLm5vcm1hbCApOwoJCQkJCXZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCBmYWNlLm5vcm1hbCApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXZlcnRleE5vcm1hbHNbIDAgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7CgkJCQkJdmVydGV4Tm9ybWFsc1sgMSBdID0gZmFjZS5ub3JtYWwuY2xvbmUoKTsKCQkJCQl2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggdGhpcy5mYWNlcy5sZW5ndGggPiAwICkgewoKCQkJCXRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlOwoKCQkJfQoKCQl9LAoKCQljb21wdXRlTW9ycGhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgaSwgaWwsIGYsIGZsLCBmYWNlOwoKCQkJLy8gc2F2ZSBvcmlnaW5hbCBub3JtYWxzCgkJCS8vIC0gY3JlYXRlIHRlbXAgdmFyaWFibGVzIG9uIGZpcnN0IGFjY2VzcwoJCQkvLyAgIG90aGVyd2lzZSBqdXN0IGNvcHkgKGZvciBmYXN0ZXIgcmVwZWF0ZWQgY2FsbHMpCgoJCQlmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkgewoKCQkJCWZhY2UgPSB0aGlzLmZhY2VzWyBmIF07CgoJCQkJaWYgKCAhIGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgKSB7CgoJCQkJCWZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5jbG9uZSgpOwoKCQkJCX0gZWxzZSB7CgoJCQkJCWZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTsKCgkJCQl9CgoJCQkJaWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHMgKSB7IGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHMgPSBbXTsgfQoKCQkJCWZvciAoIGkgPSAwLCBpbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJaWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSApIHsKCgkJCQkJCWZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSA9IGZhY2UudmVydGV4Tm9ybWFsc1sgaSBdLmNsb25lKCk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzWyBpIF0uY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyBpIF0gKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCS8vIHVzZSB0ZW1wIGdlb21ldHJ5IHRvIGNvbXB1dGUgZmFjZSBhbmQgdmVydGV4IG5vcm1hbHMgZm9yIGVhY2ggbW9ycGgKCgkJCXZhciB0bXBHZW8gPSBuZXcgR2VvbWV0cnkoKTsKCQkJdG1wR2VvLmZhY2VzID0gdGhpcy5mYWNlczsKCgkJCWZvciAoIGkgPSAwLCBpbCA9IHRoaXMubW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCS8vIGNyZWF0ZSBvbiBmaXJzdCBhY2Nlc3MKCgkJCQlpZiAoICEgdGhpcy5tb3JwaE5vcm1hbHNbIGkgXSApIHsKCgkJCQkJdGhpcy5tb3JwaE5vcm1hbHNbIGkgXSA9IHt9OwoJCQkJCXRoaXMubW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHMgPSBbXTsKCQkJCQl0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgPSBbXTsKCgkJCQkJdmFyIGRzdE5vcm1hbHNGYWNlID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFsczsKCQkJCQl2YXIgZHN0Tm9ybWFsc1ZlcnRleCA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFsczsKCgkJCQkJdmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7CgoJCQkJCWZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7CgoJCQkJCQlmYWNlTm9ybWFsID0gbmV3IFZlY3RvcjMoKTsKCQkJCQkJdmVydGV4Tm9ybWFscyA9IHsgYTogbmV3IFZlY3RvcjMoKSwgYjogbmV3IFZlY3RvcjMoKSwgYzogbmV3IFZlY3RvcjMoKSB9OwoKCQkJCQkJZHN0Tm9ybWFsc0ZhY2UucHVzaCggZmFjZU5vcm1hbCApOwoJCQkJCQlkc3ROb3JtYWxzVmVydGV4LnB1c2goIHZlcnRleE5vcm1hbHMgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCQl2YXIgbW9ycGhOb3JtYWxzID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXTsKCgkJCQkvLyBzZXQgdmVydGljZXMgdG8gbW9ycGggdGFyZ2V0CgoJCQkJdG1wR2VvLnZlcnRpY2VzID0gdGhpcy5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlczsKCgkJCQkvLyBjb21wdXRlIG1vcnBoIG5vcm1hbHMKCgkJCQl0bXBHZW8uY29tcHV0ZUZhY2VOb3JtYWxzKCk7CgkJCQl0bXBHZW8uY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsKCgkJCQkvLyBzdG9yZSBtb3JwaCBub3JtYWxzCgoJCQkJdmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7CgoJCQkJZm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHsKCgkJCQkJZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTsKCgkJCQkJZmFjZU5vcm1hbCA9IG1vcnBoTm9ybWFscy5mYWNlTm9ybWFsc1sgZiBdOwoJCQkJCXZlcnRleE5vcm1hbHMgPSBtb3JwaE5vcm1hbHMudmVydGV4Tm9ybWFsc1sgZiBdOwoKCQkJCQlmYWNlTm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7CgoJCQkJCXZlcnRleE5vcm1hbHMuYS5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDAgXSApOwoJCQkJCXZlcnRleE5vcm1hbHMuYi5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDEgXSApOwoJCQkJCXZlcnRleE5vcm1hbHMuYy5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDIgXSApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIHJlc3RvcmUgb3JpZ2luYWwgbm9ybWFscwoKCQkJZm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHsKCgkJCQlmYWNlID0gdGhpcy5mYWNlc1sgZiBdOwoKCQkJCWZhY2Uubm9ybWFsID0gZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbDsKCQkJCWZhY2UudmVydGV4Tm9ybWFscyA9IGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM7CgoJCQl9CgoJCX0sCgoJCWNvbXB1dGVCb3VuZGluZ0JveDogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpOwoKCQkJfQoKCQkJdGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tUG9pbnRzKCB0aGlzLnZlcnRpY2VzICk7CgoJCX0sCgoJCWNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7CgoJCQl9CgoJCQl0aGlzLmJvdW5kaW5nU3BoZXJlLnNldEZyb21Qb2ludHMoIHRoaXMudmVydGljZXMgKTsKCgkJfSwKCgkJbWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHsKCgkJCWlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkdlb21ldHJ5LicsIGdlb21ldHJ5ICk7CgkJCQlyZXR1cm47CgoJCQl9CgoJCQl2YXIgbm9ybWFsTWF0cml4LAoJCQkJdmVydGV4T2Zmc2V0ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsCgkJCQl2ZXJ0aWNlczEgPSB0aGlzLnZlcnRpY2VzLAoJCQkJdmVydGljZXMyID0gZ2VvbWV0cnkudmVydGljZXMsCgkJCQlmYWNlczEgPSB0aGlzLmZhY2VzLAoJCQkJZmFjZXMyID0gZ2VvbWV0cnkuZmFjZXMsCgkJCQljb2xvcnMxID0gdGhpcy5jb2xvcnMsCgkJCQljb2xvcnMyID0gZ2VvbWV0cnkuY29sb3JzOwoKCQkJaWYgKCBtYXRlcmlhbEluZGV4T2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsSW5kZXhPZmZzZXQgPSAwOyB9CgoJCQlpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCW5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTsKCgkJCX0KCgkJCS8vIHZlcnRpY2VzCgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gdmVydGljZXMyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXZhciB2ZXJ0ZXggPSB2ZXJ0aWNlczJbIGkgXTsKCgkJCQl2YXIgdmVydGV4Q29weSA9IHZlcnRleC5jbG9uZSgpOwoKCQkJCWlmICggbWF0cml4ICE9PSB1bmRlZmluZWQgKSB7IHZlcnRleENvcHkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgfQoKCQkJCXZlcnRpY2VzMS5wdXNoKCB2ZXJ0ZXhDb3B5ICk7CgoJCQl9CgoJCQkvLyBjb2xvcnMKCgkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBjb2xvcnMyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCWNvbG9yczEucHVzaCggY29sb3JzMlsgaSBdLmNsb25lKCkgKTsKCgkJCX0KCgkJCS8vIGZhY2VzCgoJCQlmb3IgKCBpID0gMCwgaWwgPSBmYWNlczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIGZhY2UgPSBmYWNlczJbIGkgXSwgZmFjZUNvcHksIG5vcm1hbCwgY29sb3IsCgkJCQkJZmFjZVZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHMsCgkJCQkJZmFjZVZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzOwoKCQkJCWZhY2VDb3B5ID0gbmV3IEZhY2UzKCBmYWNlLmEgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYiArIHZlcnRleE9mZnNldCwgZmFjZS5jICsgdmVydGV4T2Zmc2V0ICk7CgkJCQlmYWNlQ29weS5ub3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTsKCgkJCQlpZiAoIG5vcm1hbE1hdHJpeCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlmYWNlQ29weS5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTsKCgkJCQl9CgoJCQkJZm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQlub3JtYWwgPSBmYWNlVmVydGV4Tm9ybWFsc1sgaiBdLmNsb25lKCk7CgoJCQkJCWlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQlub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTsKCgkJCQkJfQoKCQkJCQlmYWNlQ29weS52ZXJ0ZXhOb3JtYWxzLnB1c2goIG5vcm1hbCApOwoKCQkJCX0KCgkJCQlmYWNlQ29weS5jb2xvci5jb3B5KCBmYWNlLmNvbG9yICk7CgoJCQkJZm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhDb2xvcnMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCWNvbG9yID0gZmFjZVZlcnRleENvbG9yc1sgaiBdOwoJCQkJCWZhY2VDb3B5LnZlcnRleENvbG9ycy5wdXNoKCBjb2xvci5jbG9uZSgpICk7CgoJCQkJfQoKCQkJCWZhY2VDb3B5Lm1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXggKyBtYXRlcmlhbEluZGV4T2Zmc2V0OwoKCQkJCWZhY2VzMS5wdXNoKCBmYWNlQ29weSApOwoKCQkJfQoKCQkJLy8gdXZzCgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl2YXIgZmFjZVZlcnRleFV2czIgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyBpIF07CgoJCQkJaWYgKCB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9PT0gdW5kZWZpbmVkICkgeyB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9IFtdOyB9CgoJCQkJZm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhVdnMyLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQl2YXIgdXZzMiA9IGZhY2VWZXJ0ZXhVdnMyWyBqIF0sIHV2c0NvcHkgPSBbXTsKCgkJCQkJZm9yICggdmFyIGsgPSAwLCBrbCA9IHV2czIubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7CgoJCQkJCQl1dnNDb3B5LnB1c2goIHV2czJbIGsgXS5jbG9uZSgpICk7CgoJCQkJCX0KCgkJCQkJdGhpcy5mYWNlVmVydGV4VXZzWyBpIF0ucHVzaCggdXZzQ29weSApOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJbWVyZ2VNZXNoOiBmdW5jdGlvbiAoIG1lc2ggKSB7CgoJCQlpZiAoICEgKCBtZXNoICYmIG1lc2guaXNNZXNoICkgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlTWVzaCgpOiBtZXNoIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5NZXNoLicsIG1lc2ggKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCWlmICggbWVzaC5tYXRyaXhBdXRvVXBkYXRlICkgeyBtZXNoLnVwZGF0ZU1hdHJpeCgpOyB9CgoJCQl0aGlzLm1lcmdlKCBtZXNoLmdlb21ldHJ5LCBtZXNoLm1hdHJpeCApOwoKCQl9LAoKCQkvKgoJCSAqIENoZWNrcyBmb3IgZHVwbGljYXRlIHZlcnRpY2VzIHdpdGggaGFzaG1hcC4KCQkgKiBEdXBsaWNhdGVkIHZlcnRpY2VzIGFyZSByZW1vdmVkCgkJICogYW5kIGZhY2VzJyB2ZXJ0aWNlcyBhcmUgdXBkYXRlZC4KCQkgKi8KCgkJbWVyZ2VWZXJ0aWNlczogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHZlcnRpY2VzTWFwID0ge307IC8vIEhhc2htYXAgZm9yIGxvb2tpbmcgdXAgdmVydGljZXMgYnkgcG9zaXRpb24gY29vcmRpbmF0ZXMgKGFuZCBtYWtpbmcgc3VyZSB0aGV5IGFyZSB1bmlxdWUpCgkJCXZhciB1bmlxdWUgPSBbXSwgY2hhbmdlcyA9IFtdOwoKCQkJdmFyIHYsIGtleTsKCQkJdmFyIHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMQoJCQl2YXIgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTsKCQkJdmFyIGksIGlsLCBmYWNlOwoJCQl2YXIgaW5kaWNlcywgaiwgamw7CgoJCQlmb3IgKCBpID0gMCwgaWwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXYgPSB0aGlzLnZlcnRpY2VzWyBpIF07CgkJCQlrZXkgPSBNYXRoLnJvdW5kKCB2LnggKiBwcmVjaXNpb24gKSArICdfJyArIE1hdGgucm91bmQoIHYueSAqIHByZWNpc2lvbiApICsgJ18nICsgTWF0aC5yb3VuZCggdi56ICogcHJlY2lzaW9uICk7CgoJCQkJaWYgKCB2ZXJ0aWNlc01hcFsga2V5IF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJdmVydGljZXNNYXBbIGtleSBdID0gaTsKCQkJCQl1bmlxdWUucHVzaCggdGhpcy52ZXJ0aWNlc1sgaSBdICk7CgkJCQkJY2hhbmdlc1sgaSBdID0gdW5pcXVlLmxlbmd0aCAtIDE7CgoJCQkJfSBlbHNlIHsKCgkJCQkJLy9jb25zb2xlLmxvZygnRHVwbGljYXRlIHZlcnRleCBmb3VuZC4gJywgaSwgJyBjb3VsZCBiZSB1c2luZyAnLCB2ZXJ0aWNlc01hcFtrZXldKTsKCQkJCQljaGFuZ2VzWyBpIF0gPSBjaGFuZ2VzWyB2ZXJ0aWNlc01hcFsga2V5IF0gXTsKCgkJCQl9CgoJCQl9CgoKCQkJLy8gaWYgZmFjZXMgYXJlIGNvbXBsZXRlbHkgZGVnZW5lcmF0ZSBhZnRlciBtZXJnaW5nIHZlcnRpY2VzLCB3ZQoJCQkvLyBoYXZlIHRvIHJlbW92ZSB0aGVtIGZyb20gdGhlIGdlb21ldHJ5LgoJCQl2YXIgZmFjZUluZGljZXNUb1JlbW92ZSA9IFtdOwoKCQkJZm9yICggaSA9IDAsIGlsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQlmYWNlID0gdGhpcy5mYWNlc1sgaSBdOwoKCQkJCWZhY2UuYSA9IGNoYW5nZXNbIGZhY2UuYSBdOwoJCQkJZmFjZS5iID0gY2hhbmdlc1sgZmFjZS5iIF07CgkJCQlmYWNlLmMgPSBjaGFuZ2VzWyBmYWNlLmMgXTsKCgkJCQlpbmRpY2VzID0gWyBmYWNlLmEsIGZhY2UuYiwgZmFjZS5jIF07CgoJCQkJLy8gaWYgYW55IGR1cGxpY2F0ZSB2ZXJ0aWNlcyBhcmUgZm91bmQgaW4gYSBGYWNlMwoJCQkJLy8gd2UgaGF2ZSB0byByZW1vdmUgdGhlIGZhY2UgYXMgbm90aGluZyBjYW4gYmUgc2F2ZWQKCQkJCWZvciAoIHZhciBuID0gMDsgbiA8IDM7IG4gKysgKSB7CgoJCQkJCWlmICggaW5kaWNlc1sgbiBdID09PSBpbmRpY2VzWyAoIG4gKyAxICkgJSAzIF0gKSB7CgoJCQkJCQlmYWNlSW5kaWNlc1RvUmVtb3ZlLnB1c2goIGkgKTsKCQkJCQkJYnJlYWs7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlmb3IgKCBpID0gZmFjZUluZGljZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBpID49IDA7IGkgLS0gKSB7CgoJCQkJdmFyIGlkeCA9IGZhY2VJbmRpY2VzVG9SZW1vdmVbIGkgXTsKCgkJCQl0aGlzLmZhY2VzLnNwbGljZSggaWR4LCAxICk7CgoJCQkJZm9yICggaiA9IDAsIGpsID0gdGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQl0aGlzLmZhY2VWZXJ0ZXhVdnNbIGogXS5zcGxpY2UoIGlkeCwgMSApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIFVzZSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzCgoJCQl2YXIgZGlmZiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gdW5pcXVlLmxlbmd0aDsKCQkJdGhpcy52ZXJ0aWNlcyA9IHVuaXF1ZTsKCQkJcmV0dXJuIGRpZmY7CgoJCX0sCgoJCXNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkgewoKCQkJdGhpcy52ZXJ0aWNlcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIHBvaW50ID0gcG9pbnRzWyBpIF07CgkJCQl0aGlzLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleDogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGZhY2VzID0gdGhpcy5mYWNlczsKCQkJdmFyIGxlbmd0aCA9IGZhY2VzLmxlbmd0aDsKCgkJCS8vIHRhZyBmYWNlcwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkgewoKCQkJCWZhY2VzWyBpIF0uX2lkID0gaTsKCgkJCX0KCgkJCS8vIHNvcnQgZmFjZXMKCgkJCWZ1bmN0aW9uIG1hdGVyaWFsSW5kZXhTb3J0KCBhLCBiICkgewoKCQkJCXJldHVybiBhLm1hdGVyaWFsSW5kZXggLSBiLm1hdGVyaWFsSW5kZXg7CgoJCQl9CgoJCQlmYWNlcy5zb3J0KCBtYXRlcmlhbEluZGV4U29ydCApOwoKCQkJLy8gc29ydCB1dnMKCgkJCXZhciB1dnMxID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF07CgkJCXZhciB1dnMyID0gdGhpcy5mYWNlVmVydGV4VXZzWyAxIF07CgoJCQl2YXIgbmV3VXZzMSwgbmV3VXZzMjsKCgkJCWlmICggdXZzMSAmJiB1dnMxLmxlbmd0aCA9PT0gbGVuZ3RoICkgeyBuZXdVdnMxID0gW107IH0KCQkJaWYgKCB1dnMyICYmIHV2czIubGVuZ3RoID09PSBsZW5ndGggKSB7IG5ld1V2czIgPSBbXTsgfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkgewoKCQkJCXZhciBpZCA9IGZhY2VzWyBpIF0uX2lkOwoKCQkJCWlmICggbmV3VXZzMSApIHsgbmV3VXZzMS5wdXNoKCB1dnMxWyBpZCBdICk7IH0KCQkJCWlmICggbmV3VXZzMiApIHsgbmV3VXZzMi5wdXNoKCB1dnMyWyBpZCBdICk7IH0KCgkJCX0KCgkJCWlmICggbmV3VXZzMSApIHsgdGhpcy5mYWNlVmVydGV4VXZzWyAwIF0gPSBuZXdVdnMxOyB9CgkJCWlmICggbmV3VXZzMiApIHsgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBuZXdVdnMyOyB9CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGRhdGEgPSB7CgkJCQltZXRhZGF0YTogewoJCQkJCXZlcnNpb246IDQuNSwKCQkJCQl0eXBlOiAnR2VvbWV0cnknLAoJCQkJCWdlbmVyYXRvcjogJ0dlb21ldHJ5LnRvSlNPTicKCQkJCX0KCQkJfTsKCgkJCS8vIHN0YW5kYXJkIEdlb21ldHJ5IHNlcmlhbGl6YXRpb24KCgkJCWRhdGEudXVpZCA9IHRoaXMudXVpZDsKCQkJZGF0YS50eXBlID0gdGhpcy50eXBlOwoJCQlpZiAoIHRoaXMubmFtZSAhPT0gJycgKSB7IGRhdGEubmFtZSA9IHRoaXMubmFtZTsgfQoKCQkJaWYgKCB0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVyczsKCgkJCQlmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7CgoJCQkJCWlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHsgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTsgfQoKCQkJCX0KCgkJCQlyZXR1cm4gZGF0YTsKCgkJCX0KCgkJCXZhciB2ZXJ0aWNlcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJdmFyIHZlcnRleCA9IHRoaXMudmVydGljZXNbIGkgXTsKCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCX0KCgkJCXZhciBmYWNlcyA9IFtdOwoJCQl2YXIgbm9ybWFscyA9IFtdOwoJCQl2YXIgbm9ybWFsc0hhc2ggPSB7fTsKCQkJdmFyIGNvbG9ycyA9IFtdOwoJCQl2YXIgY29sb3JzSGFzaCA9IHt9OwoJCQl2YXIgdXZzID0gW107CgkJCXZhciB1dnNIYXNoID0ge307CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmZhY2VzLmxlbmd0aDsgaSArKyApIHsKCgkJCQl2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTsKCgkJCQl2YXIgaGFzTWF0ZXJpYWwgPSB0cnVlOwoJCQkJdmFyIGhhc0ZhY2VVdiA9IGZhbHNlOyAvLyBkZXByZWNhdGVkCgkJCQl2YXIgaGFzRmFjZVZlcnRleFV2ID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXSAhPT0gdW5kZWZpbmVkOwoJCQkJdmFyIGhhc0ZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5sZW5ndGgoKSA+IDA7CgkJCQl2YXIgaGFzRmFjZVZlcnRleE5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGggPiAwOwoJCQkJdmFyIGhhc0ZhY2VDb2xvciA9IGZhY2UuY29sb3IuciAhPT0gMSB8fCBmYWNlLmNvbG9yLmcgIT09IDEgfHwgZmFjZS5jb2xvci5iICE9PSAxOwoJCQkJdmFyIGhhc0ZhY2VWZXJ0ZXhDb2xvciA9IGZhY2UudmVydGV4Q29sb3JzLmxlbmd0aCA+IDA7CgoJCQkJdmFyIGZhY2VUeXBlID0gMDsKCgkJCQlmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDAsIDAgKTsgLy8gaXNRdWFkCgkJCQlmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDEsIGhhc01hdGVyaWFsICk7CgkJCQlmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDIsIGhhc0ZhY2VVdiApOwoJCQkJZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCAzLCBoYXNGYWNlVmVydGV4VXYgKTsKCQkJCWZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNCwgaGFzRmFjZU5vcm1hbCApOwoJCQkJZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA1LCBoYXNGYWNlVmVydGV4Tm9ybWFsICk7CgkJCQlmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDYsIGhhc0ZhY2VDb2xvciApOwoJCQkJZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA3LCBoYXNGYWNlVmVydGV4Q29sb3IgKTsKCgkJCQlmYWNlcy5wdXNoKCBmYWNlVHlwZSApOwoJCQkJZmFjZXMucHVzaCggZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyApOwoJCQkJZmFjZXMucHVzaCggZmFjZS5tYXRlcmlhbEluZGV4ICk7CgoJCQkJaWYgKCBoYXNGYWNlVmVydGV4VXYgKSB7CgoJCQkJCXZhciBmYWNlVmVydGV4VXZzID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXTsKCgkJCQkJZmFjZXMucHVzaCgKCQkJCQkJZ2V0VXZJbmRleCggZmFjZVZlcnRleFV2c1sgMCBdICksCgkJCQkJCWdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDEgXSApLAoJCQkJCQlnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAyIF0gKQoJCQkJCSk7CgoJCQkJfQoKCQkJCWlmICggaGFzRmFjZU5vcm1hbCApIHsKCgkJCQkJZmFjZXMucHVzaCggZ2V0Tm9ybWFsSW5kZXgoIGZhY2Uubm9ybWFsICkgKTsKCgkJCQl9CgoJCQkJaWYgKCBoYXNGYWNlVmVydGV4Tm9ybWFsICkgewoKCQkJCQl2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFsczsKCgkJCQkJZmFjZXMucHVzaCgKCQkJCQkJZ2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDAgXSApLAoJCQkJCQlnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMSBdICksCgkJCQkJCWdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAyIF0gKQoJCQkJCSk7CgoJCQkJfQoKCQkJCWlmICggaGFzRmFjZUNvbG9yICkgewoKCQkJCQlmYWNlcy5wdXNoKCBnZXRDb2xvckluZGV4KCBmYWNlLmNvbG9yICkgKTsKCgkJCQl9CgoJCQkJaWYgKCBoYXNGYWNlVmVydGV4Q29sb3IgKSB7CgoJCQkJCXZhciB2ZXJ0ZXhDb2xvcnMgPSBmYWNlLnZlcnRleENvbG9yczsKCgkJCQkJZmFjZXMucHVzaCgKCQkJCQkJZ2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAwIF0gKSwKCQkJCQkJZ2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAxIF0gKSwKCQkJCQkJZ2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAyIF0gKQoJCQkJCSk7CgoJCQkJfQoKCQkJfQoKCQkJZnVuY3Rpb24gc2V0Qml0KCB2YWx1ZSwgcG9zaXRpb24sIGVuYWJsZWQgKSB7CgoJCQkJcmV0dXJuIGVuYWJsZWQgPyB2YWx1ZSB8ICggMSA8PCBwb3NpdGlvbiApIDogdmFsdWUgJiAoIH4gKCAxIDw8IHBvc2l0aW9uICkgKTsKCgkJCX0KCgkJCWZ1bmN0aW9uIGdldE5vcm1hbEluZGV4KCBub3JtYWwgKSB7CgoJCQkJdmFyIGhhc2ggPSBub3JtYWwueC50b1N0cmluZygpICsgbm9ybWFsLnkudG9TdHJpbmcoKSArIG5vcm1hbC56LnRvU3RyaW5nKCk7CgoJCQkJaWYgKCBub3JtYWxzSGFzaFsgaGFzaCBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXJldHVybiBub3JtYWxzSGFzaFsgaGFzaCBdOwoKCQkJCX0KCgkJCQlub3JtYWxzSGFzaFsgaGFzaCBdID0gbm9ybWFscy5sZW5ndGggLyAzOwoJCQkJbm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7CgoJCQkJcmV0dXJuIG5vcm1hbHNIYXNoWyBoYXNoIF07CgoJCQl9CgoJCQlmdW5jdGlvbiBnZXRDb2xvckluZGV4KCBjb2xvciApIHsKCgkJCQl2YXIgaGFzaCA9IGNvbG9yLnIudG9TdHJpbmcoKSArIGNvbG9yLmcudG9TdHJpbmcoKSArIGNvbG9yLmIudG9TdHJpbmcoKTsKCgkJCQlpZiAoIGNvbG9yc0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdOwoKCQkJCX0KCgkJCQljb2xvcnNIYXNoWyBoYXNoIF0gPSBjb2xvcnMubGVuZ3RoOwoJCQkJY29sb3JzLnB1c2goIGNvbG9yLmdldEhleCgpICk7CgoJCQkJcmV0dXJuIGNvbG9yc0hhc2hbIGhhc2ggXTsKCgkJCX0KCgkJCWZ1bmN0aW9uIGdldFV2SW5kZXgoIHV2ICkgewoKCQkJCXZhciBoYXNoID0gdXYueC50b1N0cmluZygpICsgdXYueS50b1N0cmluZygpOwoKCQkJCWlmICggdXZzSGFzaFsgaGFzaCBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXJldHVybiB1dnNIYXNoWyBoYXNoIF07CgoJCQkJfQoKCQkJCXV2c0hhc2hbIGhhc2ggXSA9IHV2cy5sZW5ndGggLyAyOwoJCQkJdXZzLnB1c2goIHV2LngsIHV2LnkgKTsKCgkJCQlyZXR1cm4gdXZzSGFzaFsgaGFzaCBdOwoKCQkJfQoKCQkJZGF0YS5kYXRhID0ge307CgoJCQlkYXRhLmRhdGEudmVydGljZXMgPSB2ZXJ0aWNlczsKCQkJZGF0YS5kYXRhLm5vcm1hbHMgPSBub3JtYWxzOwoJCQlpZiAoIGNvbG9ycy5sZW5ndGggPiAwICkgeyBkYXRhLmRhdGEuY29sb3JzID0gY29sb3JzOyB9CgkJCWlmICggdXZzLmxlbmd0aCA+IDAgKSB7IGRhdGEuZGF0YS51dnMgPSBbIHV2cyBdOyB9IC8vIHRlbXBvcmFsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkKCQkJZGF0YS5kYXRhLmZhY2VzID0gZmFjZXM7CgoJCQlyZXR1cm4gZGF0YTsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCS8qCgkJCSAvLyBIYW5kbGUgcHJpbWl0aXZlcwoKCQkJIHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzOwoKCQkJIGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkgewoKCQkJIHZhciB2YWx1ZXMgPSBbXTsKCgkJCSBmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7CgoJCQkgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7CgoJCQkgfQoKCQkJIHZhciBnZW9tZXRyeSA9IE9iamVjdC5jcmVhdGUoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlICk7CgkJCSB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KCBnZW9tZXRyeSwgdmFsdWVzICk7CgkJCSByZXR1cm4gZ2VvbWV0cnk7CgoJCQkgfQoKCQkJIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCQkJICovCgoJCQlyZXR1cm4gbmV3IEdlb21ldHJ5KCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCXZhciBpLCBpbCwgaiwgamwsIGssIGtsOwoKCQkJLy8gcmVzZXQKCgkJCXRoaXMudmVydGljZXMgPSBbXTsKCQkJdGhpcy5jb2xvcnMgPSBbXTsKCQkJdGhpcy5mYWNlcyA9IFtdOwoJCQl0aGlzLmZhY2VWZXJ0ZXhVdnMgPSBbW11dOwoJCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdOwoJCQl0aGlzLm1vcnBoTm9ybWFscyA9IFtdOwoJCQl0aGlzLnNraW5XZWlnaHRzID0gW107CgkJCXRoaXMuc2tpbkluZGljZXMgPSBbXTsKCQkJdGhpcy5saW5lRGlzdGFuY2VzID0gW107CgkJCXRoaXMuYm91bmRpbmdCb3ggPSBudWxsOwoJCQl0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDsKCgkJCS8vIG5hbWUKCgkJCXRoaXMubmFtZSA9IHNvdXJjZS5uYW1lOwoKCQkJLy8gdmVydGljZXMKCgkJCXZhciB2ZXJ0aWNlcyA9IHNvdXJjZS52ZXJ0aWNlczsKCgkJCWZvciAoIGkgPSAwLCBpbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMudmVydGljZXMucHVzaCggdmVydGljZXNbIGkgXS5jbG9uZSgpICk7CgoJCQl9CgoJCQkvLyBjb2xvcnMKCgkJCXZhciBjb2xvcnMgPSBzb3VyY2UuY29sb3JzOwoKCQkJZm9yICggaSA9IDAsIGlsID0gY29sb3JzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMuY29sb3JzLnB1c2goIGNvbG9yc1sgaSBdLmNsb25lKCkgKTsKCgkJCX0KCgkJCS8vIGZhY2VzCgoJCQl2YXIgZmFjZXMgPSBzb3VyY2UuZmFjZXM7CgoJCQlmb3IgKCBpID0gMCwgaWwgPSBmYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl0aGlzLmZhY2VzLnB1c2goIGZhY2VzWyBpIF0uY2xvbmUoKSApOwoKCQkJfQoKCQkJLy8gZmFjZSB2ZXJ0ZXggdXZzCgoJCQlmb3IgKCBpID0gMCwgaWwgPSBzb3VyY2UuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl2YXIgZmFjZVZlcnRleFV2cyA9IHNvdXJjZS5mYWNlVmVydGV4VXZzWyBpIF07CgoJCQkJaWYgKCB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQl0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9IFtdOwoKCQkJCX0KCgkJCQlmb3IgKCBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQl2YXIgdXZzID0gZmFjZVZlcnRleFV2c1sgaiBdLCB1dnNDb3B5ID0gW107CgoJCQkJCWZvciAoIGsgPSAwLCBrbCA9IHV2cy5sZW5ndGg7IGsgPCBrbDsgayArKyApIHsKCgkJCQkJCXZhciB1diA9IHV2c1sgayBdOwoKCQkJCQkJdXZzQ29weS5wdXNoKCB1di5jbG9uZSgpICk7CgoJCQkJCX0KCgkJCQkJdGhpcy5mYWNlVmVydGV4VXZzWyBpIF0ucHVzaCggdXZzQ29weSApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIG1vcnBoIHRhcmdldHMKCgkJCXZhciBtb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzOwoKCQkJZm9yICggaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXZhciBtb3JwaFRhcmdldCA9IHt9OwoJCQkJbW9ycGhUYXJnZXQubmFtZSA9IG1vcnBoVGFyZ2V0c1sgaSBdLm5hbWU7CgoJCQkJLy8gdmVydGljZXMKCgkJCQlpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCW1vcnBoVGFyZ2V0LnZlcnRpY2VzID0gW107CgoJCQkJCWZvciAoIGogPSAwLCBqbCA9IG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQkJbW9ycGhUYXJnZXQudmVydGljZXMucHVzaCggbW9ycGhUYXJnZXRzWyBpIF0udmVydGljZXNbIGogXS5jbG9uZSgpICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJLy8gbm9ybWFscwoKCQkJCWlmICggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQltb3JwaFRhcmdldC5ub3JtYWxzID0gW107CgoJCQkJCWZvciAoIGogPSAwLCBqbCA9IG1vcnBoVGFyZ2V0c1sgaSBdLm5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCQltb3JwaFRhcmdldC5ub3JtYWxzLnB1c2goIG1vcnBoVGFyZ2V0c1sgaSBdLm5vcm1hbHNbIGogXS5jbG9uZSgpICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJdGhpcy5tb3JwaFRhcmdldHMucHVzaCggbW9ycGhUYXJnZXQgKTsKCgkJCX0KCgkJCS8vIG1vcnBoIG5vcm1hbHMKCgkJCXZhciBtb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzOwoKCQkJZm9yICggaSA9IDAsIGlsID0gbW9ycGhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXZhciBtb3JwaE5vcm1hbCA9IHt9OwoKCQkJCS8vIHZlcnRleCBub3JtYWxzCgoJCQkJaWYgKCBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCW1vcnBoTm9ybWFsLnZlcnRleE5vcm1hbHMgPSBbXTsKCgkJCQkJZm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJCXZhciBzcmNWZXJ0ZXhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzWyBqIF07CgkJCQkJCXZhciBkZXN0VmVydGV4Tm9ybWFsID0ge307CgoJCQkJCQlkZXN0VmVydGV4Tm9ybWFsLmEgPSBzcmNWZXJ0ZXhOb3JtYWwuYS5jbG9uZSgpOwoJCQkJCQlkZXN0VmVydGV4Tm9ybWFsLmIgPSBzcmNWZXJ0ZXhOb3JtYWwuYi5jbG9uZSgpOwoJCQkJCQlkZXN0VmVydGV4Tm9ybWFsLmMgPSBzcmNWZXJ0ZXhOb3JtYWwuYy5jbG9uZSgpOwoKCQkJCQkJbW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscy5wdXNoKCBkZXN0VmVydGV4Tm9ybWFsICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJLy8gZmFjZSBub3JtYWxzCgoJCQkJaWYgKCBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQltb3JwaE5vcm1hbC5mYWNlTm9ybWFscyA9IFtdOwoKCQkJCQlmb3IgKCBqID0gMCwgamwgPSBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJCW1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzLnB1c2goIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzWyBqIF0uY2xvbmUoKSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXRoaXMubW9ycGhOb3JtYWxzLnB1c2goIG1vcnBoTm9ybWFsICk7CgoJCQl9CgoJCQkvLyBza2luIHdlaWdodHMKCgkJCXZhciBza2luV2VpZ2h0cyA9IHNvdXJjZS5za2luV2VpZ2h0czsKCgkJCWZvciAoIGkgPSAwLCBpbCA9IHNraW5XZWlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMuc2tpbldlaWdodHMucHVzaCggc2tpbldlaWdodHNbIGkgXS5jbG9uZSgpICk7CgoJCQl9CgoJCQkvLyBza2luIGluZGljZXMKCgkJCXZhciBza2luSW5kaWNlcyA9IHNvdXJjZS5za2luSW5kaWNlczsKCgkJCWZvciAoIGkgPSAwLCBpbCA9IHNraW5JbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGkgXS5jbG9uZSgpICk7CgoJCQl9CgoJCQkvLyBsaW5lIGRpc3RhbmNlcwoKCQkJdmFyIGxpbmVEaXN0YW5jZXMgPSBzb3VyY2UubGluZURpc3RhbmNlczsKCgkJCWZvciAoIGkgPSAwLCBpbCA9IGxpbmVEaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdGhpcy5saW5lRGlzdGFuY2VzLnB1c2goIGxpbmVEaXN0YW5jZXNbIGkgXSApOwoKCQkJfQoKCQkJLy8gYm91bmRpbmcgYm94CgoJCQl2YXIgYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3g7CgoJCQlpZiAoIGJvdW5kaW5nQm94ICE9PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpOwoKCQkJfQoKCQkJLy8gYm91bmRpbmcgc3BoZXJlCgoJCQl2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7CgoJCQlpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkgewoKCQkJCXRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpOwoKCQkJfQoKCQkJLy8gdXBkYXRlIGZsYWdzCgoJCQl0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IHNvdXJjZS5lbGVtZW50c05lZWRVcGRhdGU7CgkJCXRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gc291cmNlLnZlcnRpY2VzTmVlZFVwZGF0ZTsKCQkJdGhpcy51dnNOZWVkVXBkYXRlID0gc291cmNlLnV2c05lZWRVcGRhdGU7CgkJCXRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBzb3VyY2Uubm9ybWFsc05lZWRVcGRhdGU7CgkJCXRoaXMuY29sb3JzTmVlZFVwZGF0ZSA9IHNvdXJjZS5jb2xvcnNOZWVkVXBkYXRlOwoJCQl0aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlID0gc291cmNlLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlOwoJCQl0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBzb3VyY2UuZ3JvdXBzTmVlZFVwZGF0ZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlkaXNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICovCgoJLy8gQm94R2VvbWV0cnkKCgl2YXIgQm94R2VvbWV0cnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChHZW9tZXRyeSkgewoJCWZ1bmN0aW9uIEJveEdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7CgoJCQlHZW9tZXRyeS5jYWxsKHRoaXMpOwoKCQkJdGhpcy50eXBlID0gJ0JveEdlb21ldHJ5JzsKCgkJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJCXdpZHRoOiB3aWR0aCwKCQkJCWhlaWdodDogaGVpZ2h0LAoJCQkJZGVwdGg6IGRlcHRoLAoJCQkJd2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cywKCQkJCWhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cywKCQkJCWRlcHRoU2VnbWVudHM6IGRlcHRoU2VnbWVudHMKCQkJfTsKCgkJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApICk7CgkJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCQl9CgoJCWlmICggR2VvbWV0cnkgKSBCb3hHZW9tZXRyeS5fX3Byb3RvX18gPSBHZW9tZXRyeTsKCQlCb3hHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeSAmJiBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCQlCb3hHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb3hHZW9tZXRyeTsKCgkJcmV0dXJuIEJveEdlb21ldHJ5OwoJfShHZW9tZXRyeSkpOwoKCS8vIEJveEJ1ZmZlckdlb21ldHJ5CgoJdmFyIEJveEJ1ZmZlckdlb21ldHJ5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQnVmZmVyR2VvbWV0cnkpIHsKCQlmdW5jdGlvbiBCb3hCdWZmZXJHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzICkgewoKCQkJQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTsKCgkJCXRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7CgoJCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCQl3aWR0aDogd2lkdGgsCgkJCQloZWlnaHQ6IGhlaWdodCwKCQkJCWRlcHRoOiBkZXB0aCwKCQkJCXdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsCgkJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsCgkJCQlkZXB0aFNlZ21lbnRzOiBkZXB0aFNlZ21lbnRzCgkJCX07CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJd2lkdGggPSB3aWR0aCB8fCAxOwoJCQloZWlnaHQgPSBoZWlnaHQgfHwgMTsKCQkJZGVwdGggPSBkZXB0aCB8fCAxOwoKCQkJLy8gc2VnbWVudHMKCgkJCXdpZHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTsKCQkJaGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDE7CgkJCWRlcHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCBkZXB0aFNlZ21lbnRzICkgfHwgMTsKCgkJCS8vIGJ1ZmZlcnMKCgkJCXZhciBpbmRpY2VzID0gW107CgkJCXZhciB2ZXJ0aWNlcyA9IFtdOwoJCQl2YXIgbm9ybWFscyA9IFtdOwoJCQl2YXIgdXZzID0gW107CgoJCQkvLyBoZWxwZXIgdmFyaWFibGVzCgoJCQl2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7CgkJCXZhciBncm91cFN0YXJ0ID0gMDsKCgkJCS8vIGJ1aWxkIGVhY2ggc2lkZSBvZiB0aGUgYm94IGdlb21ldHJ5CgoJCQlidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAtIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAwICk7IC8vIHB4CgkJCWJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgLSB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDEgKTsgLy8gbngKCQkJYnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgMSwgd2lkdGgsIGRlcHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDIgKTsgLy8gcHkKCQkJYnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgLSAxLCB3aWR0aCwgZGVwdGgsIC0gaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAzICk7IC8vIG55CgkJCWJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIDEsIC0gMSwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA0ICk7IC8vIHB6CgkJCWJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIC0gMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCAtIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNSApOyAvLyBuegoKCQkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJCXRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTsKCQkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJCXRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApOwoJCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7CgoJCQlmdW5jdGlvbiBidWlsZFBsYW5lKCB1LCB2LCB3LCB1ZGlyLCB2ZGlyLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ3JpZFgsIGdyaWRZLCBtYXRlcmlhbEluZGV4ICkgewoKCQkJCXZhciBzZWdtZW50V2lkdGggPSB3aWR0aCAvIGdyaWRYOwoJCQkJdmFyIHNlZ21lbnRIZWlnaHQgPSBoZWlnaHQgLyBncmlkWTsKCgkJCQl2YXIgd2lkdGhIYWxmID0gd2lkdGggLyAyOwoJCQkJdmFyIGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyOwoJCQkJdmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjsKCgkJCQl2YXIgZ3JpZFgxID0gZ3JpZFggKyAxOwoJCQkJdmFyIGdyaWRZMSA9IGdyaWRZICsgMTsKCgkJCQl2YXIgdmVydGV4Q291bnRlciA9IDA7CgkJCQl2YXIgZ3JvdXBDb3VudCA9IDA7CgoJCQkJdmFyIGl4LCBpeTsKCgkJCQl2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTsKCgkJCQkvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzCgoJCQkJZm9yICggaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7CgoJCQkJCXZhciB5ID0gaXkgKiBzZWdtZW50SGVpZ2h0IC0gaGVpZ2h0SGFsZjsKCgkJCQkJZm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7CgoJCQkJCQl2YXIgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmOwoKCQkJCQkJLy8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnQKCgkJCQkJCXZlY3RvclsgdSBdID0geCAqIHVkaXI7CgkJCQkJCXZlY3RvclsgdiBdID0geSAqIHZkaXI7CgkJCQkJCXZlY3RvclsgdyBdID0gZGVwdGhIYWxmOwoKCQkJCQkJLy8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyCgoJCQkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7CgoJCQkJCQkvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudAoKCQkJCQkJdmVjdG9yWyB1IF0gPSAwOwoJCQkJCQl2ZWN0b3JbIHYgXSA9IDA7CgkJCQkJCXZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTsKCgkJCQkJCS8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gbm9ybWFsIGJ1ZmZlcgoKCQkJCQkJbm9ybWFscy5wdXNoKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7CgoJCQkJCQkvLyB1dnMKCgkJCQkJCXV2cy5wdXNoKCBpeCAvIGdyaWRYICk7CgkJCQkJCXV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTsKCgkJCQkJCS8vIGNvdW50ZXJzCgoJCQkJCQl2ZXJ0ZXhDb3VudGVyICs9IDE7CgoJCQkJCX0KCgkJCQl9CgoJCQkJLy8gaW5kaWNlcwoKCQkJCS8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlCgkJCQkvLyAyLiBhIHNpbmdsZSBzZWdtZW50IGNvbnNpc3RzIG9mIHR3byBmYWNlcwoJCQkJLy8gMy4gc28gd2UgbmVlZCB0byBnZW5lcmF0ZSBzaXggKDIqMykgaW5kaWNlcyBwZXIgc2VnbWVudAoKCQkJCWZvciAoIGl5ID0gMDsgaXkgPCBncmlkWTsgaXkgKysgKSB7CgoJCQkJCWZvciAoIGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7CgoJCQkJCQl2YXIgYSA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqIGl5OwoJCQkJCQl2YXIgYiA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7CgkJCQkJCXZhciBjID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApOwoJCQkJCQl2YXIgZCA9IG51bWJlck9mVmVydGljZXMgKyAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7CgoJCQkJCQkvLyBmYWNlcwoKCQkJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQkJCWluZGljZXMucHVzaCggYiwgYywgZCApOwoKCQkJCQkJLy8gaW5jcmVhc2UgY291bnRlcgoKCQkJCQkJZ3JvdXBDb3VudCArPSA2OwoKCQkJCQl9CgoJCQkJfQoKCQkJCS8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0CgoJCQkJc2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTsKCgkJCQkvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHMKCgkJCQlncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7CgoJCQkJLy8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcwoKCQkJCW51bWJlck9mVmVydGljZXMgKz0gdmVydGV4Q291bnRlcjsKCgkJCX0KCgkJfQoKCQlpZiAoIEJ1ZmZlckdlb21ldHJ5ICkgQm94QnVmZmVyR2VvbWV0cnkuX19wcm90b19fID0gQnVmZmVyR2VvbWV0cnk7CgkJQm94QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkgJiYgQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CgkJQm94QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94QnVmZmVyR2VvbWV0cnk7CgoJCXJldHVybiBCb3hCdWZmZXJHZW9tZXRyeTsKCX0oQnVmZmVyR2VvbWV0cnkpKTsKCgkvKioKCSAqIFVuaWZvcm0gVXRpbGl0aWVzCgkgKi8KCglmdW5jdGlvbiBjbG9uZVVuaWZvcm1zKCBzcmMgKSB7CgoJCXZhciBkc3QgPSB7fTsKCgkJZm9yICggdmFyIHUgaW4gc3JjICkgewoKCQkJZHN0WyB1IF0gPSB7fTsKCgkJCWZvciAoIHZhciBwIGluIHNyY1sgdSBdICkgewoKCQkJCXZhciBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07CgoJCQkJaWYgKCBwcm9wZXJ0eSAmJiAoIHByb3BlcnR5LmlzQ29sb3IgfHwKCQkJCQlwcm9wZXJ0eS5pc01hdHJpeDMgfHwgcHJvcGVydHkuaXNNYXRyaXg0IHx8CgkJCQkJcHJvcGVydHkuaXNWZWN0b3IyIHx8IHByb3BlcnR5LmlzVmVjdG9yMyB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjQgfHwKCQkJCQlwcm9wZXJ0eS5pc1RleHR1cmUgKSApIHsKCgkJCQkJZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LmNsb25lKCk7CgoJCQkJfSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcHJvcGVydHkgKSApIHsKCgkJCQkJZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5LnNsaWNlKCk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJZHN0WyB1IF1bIHAgXSA9IHByb3BlcnR5OwoKCQkJCX0KCgkJCX0KCgkJfQoKCQlyZXR1cm4gZHN0OwoKCX0KCglmdW5jdGlvbiBtZXJnZVVuaWZvcm1zKCB1bmlmb3JtcyApIHsKCgkJdmFyIG1lcmdlZCA9IHt9OwoKCQlmb3IgKCB2YXIgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7CgoJCQl2YXIgdG1wID0gY2xvbmVVbmlmb3JtcyggdW5pZm9ybXNbIHUgXSApOwoKCQkJZm9yICggdmFyIHAgaW4gdG1wICkgewoKCQkJCW1lcmdlZFsgcCBdID0gdG1wWyBwIF07CgoJCQl9CgoJCX0KCgkJcmV0dXJuIG1lcmdlZDsKCgl9CgoJLy8gTGVnYWN5CgoJdmFyIFVuaWZvcm1zVXRpbHMgPSB7IGNsb25lOiBjbG9uZVVuaWZvcm1zLCBtZXJnZTogbWVyZ2VVbmlmb3JtcyB9OwoKCXZhciBkZWZhdWx0X3ZlcnRleCA9ICJ2b2lkIG1haW4oKSB7XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcbn0iOwoKCXZhciBkZWZhdWx0X2ZyYWdtZW50ID0gInZvaWQgbWFpbigpIHtcblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XG59IjsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBkZWZpbmVzOiB7ICJsYWJlbCIgOiAidmFsdWUiIH0sCgkgKiAgdW5pZm9ybXM6IHsgInBhcmFtZXRlcjEiOiB7IHZhbHVlOiAxLjAgfSwgInBhcmFtZXRlcjIiOiB7IHZhbHVlMjogMiB9IH0sCgkgKgoJICogIGZyYWdtZW50U2hhZGVyOiA8c3RyaW5nPiwKCSAqICB2ZXJ0ZXhTaGFkZXI6IDxzdHJpbmc+LAoJICoKCSAqICB3aXJlZnJhbWU6IDxib29sZWFuPiwKCSAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIGxpZ2h0czogPGJvb2w+LAoJICoKCSAqICBza2lubmluZzogPGJvb2w+LAoJICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LAoJICogIG1vcnBoTm9ybWFsczogPGJvb2w+CgkgKiB9CgkgKi8KCglmdW5jdGlvbiBTaGFkZXJNYXRlcmlhbCggcGFyYW1ldGVycyApIHsKCgkJTWF0ZXJpYWwuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnOwoKCQl0aGlzLmRlZmluZXMgPSB7fTsKCQl0aGlzLnVuaWZvcm1zID0ge307CgoJCXRoaXMudmVydGV4U2hhZGVyID0gZGVmYXVsdF92ZXJ0ZXg7CgkJdGhpcy5mcmFnbWVudFNoYWRlciA9IGRlZmF1bHRfZnJhZ21lbnQ7CgoJCXRoaXMubGluZXdpZHRoID0gMTsKCgkJdGhpcy53aXJlZnJhbWUgPSBmYWxzZTsKCQl0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7CgoJCXRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nCgkJdGhpcy5saWdodHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBsaWdodHMKCQl0aGlzLmNsaXBwaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2UgdXNlci1kZWZpbmVkIGNsaXBwaW5nIHBsYW5lcwoKCQl0aGlzLnNraW5uaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2tpbm5pbmcgYXR0cmlidXRlIHN0cmVhbXMKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIHRhcmdldHMKCQl0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIG5vcm1hbHMKCgkJdGhpcy5leHRlbnNpb25zID0gewoJCQlkZXJpdmF0aXZlczogZmFsc2UsIC8vIHNldCB0byB1c2UgZGVyaXZhdGl2ZXMKCQkJZnJhZ0RlcHRoOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBmcmFnbWVudCBkZXB0aCB2YWx1ZXMKCQkJZHJhd0J1ZmZlcnM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRyYXcgYnVmZmVycwoJCQlzaGFkZXJUZXh0dXJlTE9EOiBmYWxzZSAvLyBzZXQgdG8gdXNlIHNoYWRlciB0ZXh0dXJlIExPRAoJCX07CgoJCS8vIFdoZW4gcmVuZGVyZWQgZ2VvbWV0cnkgZG9lc24ndCBpbmNsdWRlIHRoZXNlIGF0dHJpYnV0ZXMgYnV0IHRoZSBtYXRlcmlhbCBkb2VzLAoJCS8vIHVzZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpbiBXZWJHTC4gVGhpcyBhdm9pZHMgZXJyb3JzIHdoZW4gYnVmZmVyIGRhdGEgaXMgbWlzc2luZy4KCQl0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7CgkJCSdjb2xvcic6IFsgMSwgMSwgMSBdLAoJCQkndXYnOiBbIDAsIDAgXSwKCQkJJ3V2Mic6IFsgMCwgMCBdCgkJfTsKCgkJdGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkOwoJCXRoaXMudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7CgoJCWlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkgewoKCQkJaWYgKCBwYXJhbWV0ZXJzLmF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IGF0dHJpYnV0ZXMgc2hvdWxkIG5vdyBiZSBkZWZpbmVkIGluIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApOwoKCQkJfQoKCQkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgkJfQoKCX0KCglTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTsKCVNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRlck1hdGVyaWFsOwoKCVNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTsKCglTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5mcmFnbWVudFNoYWRlciA9IHNvdXJjZS5mcmFnbWVudFNoYWRlcjsKCQl0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7CgoJCXRoaXMudW5pZm9ybXMgPSBjbG9uZVVuaWZvcm1zKCBzb3VyY2UudW5pZm9ybXMgKTsKCgkJdGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5kZWZpbmVzICk7CgoJCXRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTsKCQl0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7CgoJCXRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0czsKCQl0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7CgkJdGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzOwoKCQl0aGlzLmV4dGVuc2lvbnMgPSBzb3VyY2UuZXh0ZW5zaW9uczsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCBtZXRhICkgewoKCQl2YXIgZGF0YSA9IE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApOwoKCQlkYXRhLnVuaWZvcm1zID0ge307CgoJCWZvciAoIHZhciBuYW1lIGluIHRoaXMudW5pZm9ybXMgKSB7CgoJCQl2YXIgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTsKCQkJdmFyIHZhbHVlID0gdW5pZm9ybS52YWx1ZTsKCgkJCWlmICggdmFsdWUgJiYgdmFsdWUuaXNUZXh0dXJlICkgewoKCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKCQkJCQl0eXBlOiAndCcsCgkJCQkJdmFsdWU6IHZhbHVlLnRvSlNPTiggbWV0YSApLnV1aWQKCQkJCX07CgoJCQl9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkgewoKCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKCQkJCQl0eXBlOiAnYycsCgkJCQkJdmFsdWU6IHZhbHVlLmdldEhleCgpCgkJCQl9OwoKCQkJfSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNWZWN0b3IyICkgewoKCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKCQkJCQl0eXBlOiAndjInLAoJCQkJCXZhbHVlOiB2YWx1ZS50b0FycmF5KCkKCQkJCX07CgoJCQl9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjMgKSB7CgoJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewoJCQkJCXR5cGU6ICd2MycsCgkJCQkJdmFsdWU6IHZhbHVlLnRvQXJyYXkoKQoJCQkJfTsKCgkJCX0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yNCApIHsKCgkJCQlkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7CgkJCQkJdHlwZTogJ3Y0JywKCQkJCQl2YWx1ZTogdmFsdWUudG9BcnJheSgpCgkJCQl9OwoKCQkJfSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNNYXRyaXgzICkgewoKCQkJCWRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHsKCQkJCQl0eXBlOiAnbTMnLAoJCQkJCXZhbHVlOiB2YWx1ZS50b0FycmF5KCkKCQkJCX07CgoJCQl9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDQgKSB7CgoJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewoJCQkJCXR5cGU6ICdtNCcsCgkJCQkJdmFsdWU6IHZhbHVlLnRvQXJyYXkoKQoJCQkJfTsKCgkJCX0gZWxzZSB7CgoJCQkJZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0gewoJCQkJCXZhbHVlOiB2YWx1ZQoJCQkJfTsKCgkJCQkvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXIKCgkJCX0KCgkJfQoKCQlpZiAoIE9iamVjdC5rZXlzKCB0aGlzLmRlZmluZXMgKS5sZW5ndGggPiAwICkgeyBkYXRhLmRlZmluZXMgPSB0aGlzLmRlZmluZXM7IH0KCgkJZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjsKCQlkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjsKCgkJdmFyIGV4dGVuc2lvbnMgPSB7fTsKCgkJZm9yICggdmFyIGtleSBpbiB0aGlzLmV4dGVuc2lvbnMgKSB7CgoJCQlpZiAoIHRoaXMuZXh0ZW5zaW9uc1sga2V5IF0gPT09IHRydWUgKSB7IGV4dGVuc2lvbnNbIGtleSBdID0gdHJ1ZTsgfQoKCQl9CgoJCWlmICggT2JqZWN0LmtleXMoIGV4dGVuc2lvbnMgKS5sZW5ndGggPiAwICkgeyBkYXRhLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zOyB9CgoJCXJldHVybiBkYXRhOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJKi8KCglmdW5jdGlvbiBDYW1lcmEoKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0NhbWVyYSc7CgoJCXRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTsKCgkJdGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCQl0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTsKCgl9CgoJQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBDYW1lcmEsCgoJCWlzQ2FtZXJhOiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSwgcmVjdXJzaXZlICkgewoKCQkJT2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTsKCgkJCXRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZEludmVyc2UgKTsKCgkJCXRoaXMucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeCApOwoJCQl0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldFdvcmxkRGlyZWN0aW9uOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQ2FtZXJhOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTsKCgkJCXZhciBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50czsKCgkJCXJldHVybiB0YXJnZXQuc2V0KCAtIGVbIDggXSwgLSBlWyA5IF0sIC0gZVsgMTAgXSApLm5vcm1hbGl6ZSgpOwoKCQl9LAoKCQl1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHsKCgkJCU9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApOwoKCQkJdGhpcy5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgZ3JlZ2dtYW4gLyBodHRwOi8vZ2FtZXMuZ3JlZ2dtYW4uY29tLwoJICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZwoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKSB7CgoJCUNhbWVyYS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdQZXJzcGVjdGl2ZUNhbWVyYSc7CgoJCXRoaXMuZm92ID0gZm92ICE9PSB1bmRlZmluZWQgPyBmb3YgOiA1MDsKCQl0aGlzLnpvb20gPSAxOwoKCQl0aGlzLm5lYXIgPSBuZWFyICE9PSB1bmRlZmluZWQgPyBuZWFyIDogMC4xOwoJCXRoaXMuZmFyID0gZmFyICE9PSB1bmRlZmluZWQgPyBmYXIgOiAyMDAwOwoJCXRoaXMuZm9jdXMgPSAxMDsKCgkJdGhpcy5hc3BlY3QgPSBhc3BlY3QgIT09IHVuZGVmaW5lZCA/IGFzcGVjdCA6IDE7CgkJdGhpcy52aWV3ID0gbnVsbDsKCgkJdGhpcy5maWxtR2F1Z2UgPSAzNTsJLy8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpCgkJdGhpcy5maWxtT2Zmc2V0ID0gMDsJLy8gaG9yaXpvbnRhbCBmaWxtIG9mZnNldCAoc2FtZSB1bml0IGFzIGdhdWdlKQoKCQl0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKCgl9CgoJUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ2FtZXJhLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBQZXJzcGVjdGl2ZUNhbWVyYSwKCgkJaXNQZXJzcGVjdGl2ZUNhbWVyYTogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHsKCgkJCUNhbWVyYS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApOwoKCQkJdGhpcy5mb3YgPSBzb3VyY2UuZm92OwoJCQl0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTsKCgkJCXRoaXMubmVhciA9IHNvdXJjZS5uZWFyOwoJCQl0aGlzLmZhciA9IHNvdXJjZS5mYXI7CgkJCXRoaXMuZm9jdXMgPSBzb3VyY2UuZm9jdXM7CgoJCQl0aGlzLmFzcGVjdCA9IHNvdXJjZS5hc3BlY3Q7CgkJCXRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApOwoKCQkJdGhpcy5maWxtR2F1Z2UgPSBzb3VyY2UuZmlsbUdhdWdlOwoJCQl0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQkvKioKCQkgKiBTZXRzIHRoZSBGT1YgYnkgZm9jYWwgbGVuZ3RoIGluIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgLmZpbG1HYXVnZS4KCQkgKgoJCSAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvcgoJCSAqIGEgMzVtbSAoZnVsbCBmcmFtZSkgY2FtZXJhLgoJCSAqCgkJICogVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuCgkJICovCgkJc2V0Rm9jYWxMZW5ndGg6IGZ1bmN0aW9uICggZm9jYWxMZW5ndGggKSB7CgoJCQkvLyBzZWUgaHR0cDovL3d3dy5ib2JhdGtpbnMuY29tL3Bob3RvZ3JhcGh5L3RlY2huaWNhbC9maWVsZF9vZl92aWV3Lmh0bWwKCQkJdmFyIHZFeHRlbnRTbG9wZSA9IDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gZm9jYWxMZW5ndGg7CgoJCQl0aGlzLmZvdiA9IF9NYXRoLlJBRDJERUcgKiAyICogTWF0aC5hdGFuKCB2RXh0ZW50U2xvcGUgKTsKCQkJdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgoJCX0sCgoJCS8qKgoJCSAqIENhbGN1bGF0ZXMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IC5mb3YgYW5kIC5maWxtR2F1Z2UuCgkJICovCgkJZ2V0Rm9jYWxMZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciB2RXh0ZW50U2xvcGUgPSBNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICk7CgoJCQlyZXR1cm4gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyB2RXh0ZW50U2xvcGU7CgoJCX0sCgoJCWdldEVmZmVjdGl2ZUZPVjogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIF9NYXRoLlJBRDJERUcgKiAyICogTWF0aC5hdGFuKAoJCQkJTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7CgoJCX0sCgoJCWdldEZpbG1XaWR0aDogZnVuY3Rpb24gKCkgewoKCQkJLy8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIHBvcnRyYWl0IGZvcm1hdCAoYXNwZWN0IDwgMSkKCQkJcmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7CgoJCX0sCgoJCWdldEZpbG1IZWlnaHQ6IGZ1bmN0aW9uICgpIHsKCgkJCS8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBsYW5kc2NhcGUgZm9ybWF0IChhc3BlY3QgPiAxKQoJCQlyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTsKCgkJfSwKCgkJLyoqCgkJICogU2V0cyBhbiBvZmZzZXQgaW4gYSBsYXJnZXIgZnJ1c3R1bS4gVGhpcyBpcyB1c2VmdWwgZm9yIG11bHRpLXdpbmRvdyBvcgoJCSAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuCgkJICoKCQkgKiBGb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUgM3gyIG1vbml0b3JzIGFuZCBlYWNoIG1vbml0b3IgaXMgMTkyMHgxMDgwIGFuZAoJCSAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXMKCQkgKgoJCSAqICAgKy0tLSstLS0rLS0tKwoJCSAqICAgfCBBIHwgQiB8IEMgfAoJCSAqICAgKy0tLSstLS0rLS0tKwoJCSAqICAgfCBEIHwgRSB8IEYgfAoJCSAqICAgKy0tLSstLS0rLS0tKwoJCSAqCgkJICogdGhlbiBmb3IgZWFjaCBtb25pdG9yIHlvdSB3b3VsZCBjYWxsIGl0IGxpa2UgdGhpcwoJCSAqCgkJICogICB2YXIgdyA9IDE5MjA7CgkJICogICB2YXIgaCA9IDEwODA7CgkJICogICB2YXIgZnVsbFdpZHRoID0gdyAqIDM7CgkJICogICB2YXIgZnVsbEhlaWdodCA9IGggKiAyOwoJCSAqCgkJICogICAtLUEtLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7CgkJICogICAtLUItLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAwLCB3LCBoICk7CgkJICogICAtLUMtLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAwLCB3LCBoICk7CgkJICogICAtLUQtLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7CgkJICogICAtLUUtLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAxLCB3LCBoICk7CgkJICogICAtLUYtLQoJCSAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAxLCB3LCBoICk7CgkJICoKCQkgKiAgIE5vdGUgdGhlcmUgaXMgbm8gcmVhc29uIG1vbml0b3JzIGhhdmUgdG8gYmUgdGhlIHNhbWUgc2l6ZSBvciBpbiBhIGdyaWQuCgkJICovCgkJc2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7CgoJCQl0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7CgoJCQlpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHsKCgkJCQl0aGlzLnZpZXcgPSB7CgkJCQkJZW5hYmxlZDogdHJ1ZSwKCQkJCQlmdWxsV2lkdGg6IDEsCgkJCQkJZnVsbEhlaWdodDogMSwKCQkJCQlvZmZzZXRYOiAwLAoJCQkJCW9mZnNldFk6IDAsCgkJCQkJd2lkdGg6IDEsCgkJCQkJaGVpZ2h0OiAxCgkJCQl9OwoKCQkJfQoKCQkJdGhpcy52aWV3LmVuYWJsZWQgPSB0cnVlOwoJCQl0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoOwoJCQl0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7CgkJCXRoaXMudmlldy5vZmZzZXRYID0geDsKCQkJdGhpcy52aWV3Lm9mZnNldFkgPSB5OwoJCQl0aGlzLnZpZXcud2lkdGggPSB3aWR0aDsKCQkJdGhpcy52aWV3LmhlaWdodCA9IGhlaWdodDsKCgkJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKCQl9LAoKCQljbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCWlmICggdGhpcy52aWV3ICE9PSBudWxsICkgewoKCQkJCXRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7CgoJCQl9CgoJCQl0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKCgkJfSwKCgkJdXBkYXRlUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkgewoKCQkJdmFyIG5lYXIgPSB0aGlzLm5lYXIsCgkJCQl0b3AgPSBuZWFyICogTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tLAoJCQkJaGVpZ2h0ID0gMiAqIHRvcCwKCQkJCXdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQsCgkJCQlsZWZ0ID0gLSAwLjUgKiB3aWR0aCwKCQkJCXZpZXcgPSB0aGlzLnZpZXc7CgoJCQlpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHsKCgkJCQl2YXIgZnVsbFdpZHRoID0gdmlldy5mdWxsV2lkdGgsCgkJCQkJZnVsbEhlaWdodCA9IHZpZXcuZnVsbEhlaWdodDsKCgkJCQlsZWZ0ICs9IHZpZXcub2Zmc2V0WCAqIHdpZHRoIC8gZnVsbFdpZHRoOwoJCQkJdG9wIC09IHZpZXcub2Zmc2V0WSAqIGhlaWdodCAvIGZ1bGxIZWlnaHQ7CgkJCQl3aWR0aCAqPSB2aWV3LndpZHRoIC8gZnVsbFdpZHRoOwoJCQkJaGVpZ2h0ICo9IHZpZXcuaGVpZ2h0IC8gZnVsbEhlaWdodDsKCgkJCX0KCgkJCXZhciBza2V3ID0gdGhpcy5maWxtT2Zmc2V0OwoJCQlpZiAoIHNrZXcgIT09IDAgKSB7IGxlZnQgKz0gbmVhciAqIHNrZXcgLyB0aGlzLmdldEZpbG1XaWR0aCgpOyB9CgoJCQl0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCBsZWZ0ICsgd2lkdGgsIHRvcCwgdG9wIC0gaGVpZ2h0LCBuZWFyLCB0aGlzLmZhciApOwoKCQkJdGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLnByb2plY3Rpb25NYXRyaXggKTsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7CgoJCQl2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApOwoKCQkJZGF0YS5vYmplY3QuZm92ID0gdGhpcy5mb3Y7CgkJCWRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207CgoJCQlkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyOwoJCQlkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjsKCQkJZGF0YS5vYmplY3QuZm9jdXMgPSB0aGlzLmZvY3VzOwoKCQkJZGF0YS5vYmplY3QuYXNwZWN0ID0gdGhpcy5hc3BlY3Q7CgoJCQlpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHsgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTsgfQoKCQkJZGF0YS5vYmplY3QuZmlsbUdhdWdlID0gdGhpcy5maWxtR2F1Z2U7CgkJCWRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7CgoJCQlyZXR1cm4gZGF0YTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIENhbWVyYSBmb3IgcmVuZGVyaW5nIGN1YmUgbWFwcwoJICoJLSByZW5kZXJzIHNjZW5lIGludG8gYXhpcy1hbGlnbmVkIGN1YmUKCSAqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJdmFyIGZvdiA9IDkwLCBhc3BlY3QgPSAxOwoKCWZ1bmN0aW9uIEN1YmVDYW1lcmEoIG5lYXIsIGZhciwgY3ViZVJlc29sdXRpb24sIG9wdGlvbnMgKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0N1YmVDYW1lcmEnOwoKCQl2YXIgY2FtZXJhUFggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKCQljYW1lcmFQWC51cC5zZXQoIDAsIC0gMSwgMCApOwoJCWNhbWVyYVBYLmxvb2tBdCggbmV3IFZlY3RvcjMoIDEsIDAsIDAgKSApOwoJCXRoaXMuYWRkKCBjYW1lcmFQWCApOwoKCQl2YXIgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKCQljYW1lcmFOWC51cC5zZXQoIDAsIC0gMSwgMCApOwoJCWNhbWVyYU5YLmxvb2tBdCggbmV3IFZlY3RvcjMoIC0gMSwgMCwgMCApICk7CgkJdGhpcy5hZGQoIGNhbWVyYU5YICk7CgoJCXZhciBjYW1lcmFQWSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApOwoJCWNhbWVyYVBZLnVwLnNldCggMCwgMCwgMSApOwoJCWNhbWVyYVBZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSApOwoJCXRoaXMuYWRkKCBjYW1lcmFQWSApOwoKCQl2YXIgY2FtZXJhTlkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTsKCQljYW1lcmFOWS51cC5zZXQoIDAsIDAsIC0gMSApOwoJCWNhbWVyYU5ZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApICk7CgkJdGhpcy5hZGQoIGNhbWVyYU5ZICk7CgoJCXZhciBjYW1lcmFQWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApOwoJCWNhbWVyYVBaLnVwLnNldCggMCwgLSAxLCAwICk7CgkJY2FtZXJhUFoubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMCwgMSApICk7CgkJdGhpcy5hZGQoIGNhbWVyYVBaICk7CgoJCXZhciBjYW1lcmFOWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApOwoJCWNhbWVyYU5aLnVwLnNldCggMCwgLSAxLCAwICk7CgkJY2FtZXJhTloubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICkgKTsKCQl0aGlzLmFkZCggY2FtZXJhTlogKTsKCgkJb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyBmb3JtYXQ6IFJHQkZvcm1hdCwgbWFnRmlsdGVyOiBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlcjogTGluZWFyRmlsdGVyIH07CgoJCXRoaXMucmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggY3ViZVJlc29sdXRpb24sIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zICk7CgkJdGhpcy5yZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lID0gIkN1YmVDYW1lcmEiOwoKCQl0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lICkgewoKCQkJaWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHsgdGhpcy51cGRhdGVNYXRyaXhXb3JsZCgpOyB9CgoJCQl2YXIgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpOwoKCQkJdmFyIHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0OwoJCQl2YXIgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzOwoKCQkJcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7CgoJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMCApOwoJCQlyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWCApOwoKCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDEgKTsKCQkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlggKTsKCgkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAyICk7CgkJCXJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBZICk7CgoJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMyApOwoJCQlyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFOWSApOwoKCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDQgKTsKCQkJcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFogKTsKCgkJCXJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGdlbmVyYXRlTWlwbWFwczsKCgkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA1ICk7CgkJCXJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5aICk7CgoJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTsKCgkJfTsKCgkJdGhpcy5jbGVhciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHsKCgkJCXZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7CgoJCQl2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKCQkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCBpICk7CgoJCQkJcmVuZGVyZXIuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApOwoKCQkJfQoKCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7CgoJCX07CgoJfQoKCUN1YmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7CglDdWJlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVDYW1lcmE7CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHsKCgkJV2ViR0xSZW5kZXJUYXJnZXQuY2FsbCggdGhpcywgd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApOwoKCX0KCglXZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlICk7CglXZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2ViR0xSZW5kZXJUYXJnZXRDdWJlOwoKCVdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPSB0cnVlOwoKCVdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUuZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCB0ZXh0dXJlICkgewoKCQl0aGlzLnRleHR1cmUudHlwZSA9IHRleHR1cmUudHlwZTsKCQl0aGlzLnRleHR1cmUuZm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7CgkJdGhpcy50ZXh0dXJlLmVuY29kaW5nID0gdGV4dHVyZS5lbmNvZGluZzsKCgkJdmFyIHNjZW5lID0gbmV3IFNjZW5lKCk7CgoJCXZhciBzaGFkZXIgPSB7CgoJCQl1bmlmb3JtczogewoJCQkJdEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sCgkJCX0sCgoJCQl2ZXJ0ZXhTaGFkZXI6IFsKCgkJCQkidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjsiLAoKCQkJCSJ2ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkgeyIsCgoJCQkJIglyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTsiLAoKCQkJCSJ9IiwKCgkJCQkidm9pZCBtYWluKCkgeyIsCgoJCQkJIgl2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApOyIsCgoJCQkJIgkjaW5jbHVkZSA8YmVnaW5fdmVydGV4PiIsCgkJCQkiCSNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD4iLAoKCQkJCSJ9IgoKCQkJXS5qb2luKCAnXG4nICksCgoJCQlmcmFnbWVudFNoYWRlcjogWwoKCQkJCSJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7IiwKCgkJCQkidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjsiLAoKCQkJCSIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOCIsCgkJCQkiI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0IiwKCgkJCQkidm9pZCBtYWluKCkgeyIsCgoJCQkJIgl2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7IiwKCgkJCQkiCXZlYzIgc2FtcGxlVVY7IiwKCgkJCQkiCXNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggZGlyZWN0aW9uLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTsiLAoKCQkJCSIJc2FtcGxlVVYueCA9IGF0YW4oIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7IiwKCgkJCQkiCWdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApOyIsCgoJCQkJIn0iCgoJCQldLmpvaW4oICdcbicgKSwKCQl9OwoKCQl2YXIgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHsKCgkJCXR5cGU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JywKCgkJCXVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBzaGFkZXIudW5pZm9ybXMgKSwKCQkJdmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLAoJCQlmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLAoJCQlzaWRlOiBCYWNrU2lkZSwKCQkJYmxlbmRpbmc6IE5vQmxlbmRpbmcKCgkJfSApOwoKCQltYXRlcmlhbC51bmlmb3Jtcy50RXF1aXJlY3QudmFsdWUgPSB0ZXh0dXJlOwoKCQl2YXIgbWVzaCA9IG5ldyBNZXNoKCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIDUsIDUsIDUgKSwgbWF0ZXJpYWwgKTsKCgkJc2NlbmUuYWRkKCBtZXNoICk7CgoJCXZhciBjYW1lcmEgPSBuZXcgQ3ViZUNhbWVyYSggMSwgMTAsIDEgKTsKCgkJY2FtZXJhLnJlbmRlclRhcmdldCA9IHRoaXM7CgkJY2FtZXJhLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnQ3ViZUNhbWVyYVRleHR1cmUnOwoKCQljYW1lcmEudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTsKCgkJbWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7CgkJbWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gRGF0YVRleHR1cmUoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7CgoJCVRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApOwoKCQl0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhIHx8IG51bGwsIHdpZHRoOiB3aWR0aCB8fCAxLCBoZWlnaHQ6IGhlaWdodCB8fCAxIH07CgoJCXRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyOwoJCXRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBOZWFyZXN0RmlsdGVyOwoKCQl0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlOwoJCXRoaXMuZmxpcFkgPSBmYWxzZTsKCQl0aGlzLnVucGFja0FsaWdubWVudCA9IDE7CgoJCXRoaXMubmVlZHNVcGRhdGUgPSB0cnVlOwoKCX0KCglEYXRhVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApOwoJRGF0YVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmU7CgoJRGF0YVRleHR1cmUucHJvdG90eXBlLmlzRGF0YVRleHR1cmUgPSB0cnVlOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKi8KCgl2YXIgX3NwaGVyZSQxID0gbmV3IFNwaGVyZSgpOwoJdmFyIF92ZWN0b3IkNiA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gRnJ1c3R1bSggcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSApIHsKCgkJdGhpcy5wbGFuZXMgPSBbCgoJCQkoIHAwICE9PSB1bmRlZmluZWQgKSA/IHAwIDogbmV3IFBsYW5lKCksCgkJCSggcDEgIT09IHVuZGVmaW5lZCApID8gcDEgOiBuZXcgUGxhbmUoKSwKCQkJKCBwMiAhPT0gdW5kZWZpbmVkICkgPyBwMiA6IG5ldyBQbGFuZSgpLAoJCQkoIHAzICE9PSB1bmRlZmluZWQgKSA/IHAzIDogbmV3IFBsYW5lKCksCgkJCSggcDQgIT09IHVuZGVmaW5lZCApID8gcDQgOiBuZXcgUGxhbmUoKSwKCQkJKCBwNSAhPT0gdW5kZWZpbmVkICkgPyBwNSA6IG5ldyBQbGFuZSgpCgoJCV07CgoJfQoKCU9iamVjdC5hc3NpZ24oIEZydXN0dW0ucHJvdG90eXBlLCB7CgoJCXNldDogZnVuY3Rpb24gKCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkgewoKCQkJdmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzOwoKCQkJcGxhbmVzWyAwIF0uY29weSggcDAgKTsKCQkJcGxhbmVzWyAxIF0uY29weSggcDEgKTsKCQkJcGxhbmVzWyAyIF0uY29weSggcDIgKTsKCQkJcGxhbmVzWyAzIF0uY29weSggcDMgKTsKCQkJcGxhbmVzWyA0IF0uY29weSggcDQgKTsKCQkJcGxhbmVzWyA1IF0uY29weSggcDUgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIGZydXN0dW0gKSB7CgoJCQl2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKCQkJCXBsYW5lc1sgaSBdLmNvcHkoIGZydXN0dW0ucGxhbmVzWyBpIF0gKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7CgoJCQl2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7CgkJCXZhciBtZSA9IG0uZWxlbWVudHM7CgkJCXZhciBtZTAgPSBtZVsgMCBdLCBtZTEgPSBtZVsgMSBdLCBtZTIgPSBtZVsgMiBdLCBtZTMgPSBtZVsgMyBdOwoJCQl2YXIgbWU0ID0gbWVbIDQgXSwgbWU1ID0gbWVbIDUgXSwgbWU2ID0gbWVbIDYgXSwgbWU3ID0gbWVbIDcgXTsKCQkJdmFyIG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdOwoJCQl2YXIgbWUxMiA9IG1lWyAxMiBdLCBtZTEzID0gbWVbIDEzIF0sIG1lMTQgPSBtZVsgMTQgXSwgbWUxNSA9IG1lWyAxNSBdOwoKCQkJcGxhbmVzWyAwIF0uc2V0Q29tcG9uZW50cyggbWUzIC0gbWUwLCBtZTcgLSBtZTQsIG1lMTEgLSBtZTgsIG1lMTUgLSBtZTEyICkubm9ybWFsaXplKCk7CgkJCXBsYW5lc1sgMSBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMiApLm5vcm1hbGl6ZSgpOwoJCQlwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTsKCQkJcGxhbmVzWyAzIF0uc2V0Q29tcG9uZW50cyggbWUzIC0gbWUxLCBtZTcgLSBtZTUsIG1lMTEgLSBtZTksIG1lMTUgLSBtZTEzICkubm9ybWFsaXplKCk7CgkJCXBsYW5lc1sgNCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQgKS5ub3JtYWxpemUoKTsKCQkJcGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWludGVyc2VjdHNPYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJdmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5OwoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHsgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7IH0KCgkJCV9zcGhlcmUkMS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgoJCQlyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDEgKTsKCgkJfSwKCgkJaW50ZXJzZWN0c1Nwcml0ZTogZnVuY3Rpb24gKCBzcHJpdGUgKSB7CgoJCQlfc3BoZXJlJDEuY2VudGVyLnNldCggMCwgMCwgMCApOwoJCQlfc3BoZXJlJDEucmFkaXVzID0gMC43MDcxMDY3ODExODY1NDc2OwoJCQlfc3BoZXJlJDEuYXBwbHlNYXRyaXg0KCBzcHJpdGUubWF0cml4V29ybGQgKTsKCgkJCXJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMSApOwoKCQl9LAoKCQlpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCXZhciBwbGFuZXMgPSB0aGlzLnBsYW5lczsKCQkJdmFyIGNlbnRlciA9IHNwaGVyZS5jZW50ZXI7CgkJCXZhciBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKCQkJCXZhciBkaXN0YW5jZSA9IHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggY2VudGVyICk7CgoJCQkJaWYgKCBkaXN0YW5jZSA8IG5lZ1JhZGl1cyApIHsKCgkJCQkJcmV0dXJuIGZhbHNlOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0cnVlOwoKCQl9LAoKCQlpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHsKCgkJCXZhciBwbGFuZXMgPSB0aGlzLnBsYW5lczsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgoJCQkJdmFyIHBsYW5lID0gcGxhbmVzWyBpIF07CgoJCQkJLy8gY29ybmVyIGF0IG1heCBkaXN0YW5jZQoKCQkJCV92ZWN0b3IkNi54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gYm94Lm1heC54IDogYm94Lm1pbi54OwoJCQkJX3ZlY3RvciQ2LnkgPSBwbGFuZS5ub3JtYWwueSA+IDAgPyBib3gubWF4LnkgOiBib3gubWluLnk7CgkJCQlfdmVjdG9yJDYueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5tYXgueiA6IGJveC5taW4uejsKCgkJCQlpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggX3ZlY3RvciQ2ICkgPCAwICkgewoKCQkJCQlyZXR1cm4gZmFsc2U7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIHRydWU7CgoJCX0sCgoJCWNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQl2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKCQkJCWlmICggcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIDwgMCApIHsKCgkJCQkJcmV0dXJuIGZhbHNlOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0cnVlOwoKCQl9CgoJfSApOwoKCXZhciBhbHBoYW1hcF9mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0FMUEhBTUFQXG5cdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHZVdiApLmc7XG4jZW5kaWYiOwoKCXZhciBhbHBoYW1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQUxQSEFNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XG4jZW5kaWYiOwoKCXZhciBhbHBoYXRlc3RfZnJhZ21lbnQgPSAiI2lmZGVmIEFMUEhBVEVTVFxuXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgQUxQSEFURVNUICkgZGlzY2FyZDtcbiNlbmRpZiI7CgoJdmFyIGFvbWFwX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQU9NQVBcblx0ZmxvYXQgYW1iaWVudE9jY2x1c2lvbiA9ICggdGV4dHVyZTJEKCBhb01hcCwgdlV2MiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcblx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApXG5cdFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKTtcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBhb21hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfQU9NQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XG5cdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XG4jZW5kaWYiOwoKCXZhciBiZWdpbl92ZXJ0ZXggPSAidmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7IjsKCgl2YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gInZlYzMgb2JqZWN0Tm9ybWFsID0gdmVjMyggbm9ybWFsICk7XG4jaWZkZWYgVVNFX1RBTkdFTlRcblx0dmVjMyBvYmplY3RUYW5nZW50ID0gdmVjMyggdGFuZ2VudC54eXogKTtcbiNlbmRpZiI7CgoJdmFyIGJzZGZzID0gInZlYzIgaW50ZWdyYXRlU3BlY3VsYXJCUkRGKCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcblx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XG5cdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XG5cdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xuXHRyZXR1cm4gdmVjMiggLTEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xufVxuZmxvYXQgcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggY29uc3QgaW4gZmxvYXQgbGlnaHREaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XG4jaWYgZGVmaW5lZCAoIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMgKVxuXHRmbG9hdCBkaXN0YW5jZUZhbGxvZmYgPSAxLjAgLyBtYXgoIHBvdyggbGlnaHREaXN0YW5jZSwgZGVjYXlFeHBvbmVudCApLCAwLjAxICk7XG5cdGlmKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCApIHtcblx0XHRkaXN0YW5jZUZhbGxvZmYgKj0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcblx0fVxuXHRyZXR1cm4gZGlzdGFuY2VGYWxsb2ZmO1xuI2Vsc2Vcblx0aWYoIGN1dG9mZkRpc3RhbmNlID4gMC4wICYmIGRlY2F5RXhwb25lbnQgPiAwLjAgKSB7XG5cdFx0cmV0dXJuIHBvdyggc2F0dXJhdGUoIC1saWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKyAxLjAgKSwgZGVjYXlFeHBvbmVudCApO1xuXHR9XG5cdHJldHVybiAxLjA7XG4jZW5kaWZcbn1cbnZlYzMgQlJERl9EaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xuXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcbn1cbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IGRvdExIICkge1xuXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQ3MyAqIGRvdExIIC0gNi45ODMxNiApICogZG90TEggKTtcblx0cmV0dXJuICggMS4wIC0gc3BlY3VsYXJDb2xvciApICogZnJlc25lbCArIHNwZWN1bGFyQ29sb3I7XG59XG52ZWMzIEZfU2NobGlja19Sb3VnaG5lc3NEZXBlbmRlbnQoIGNvbnN0IGluIHZlYzMgRjAsIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XG5cdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TlYgLSA2Ljk4MzE2ICkgKiBkb3ROViApO1xuXHR2ZWMzIEZyID0gbWF4KCB2ZWMzKCAxLjAgLSByb3VnaG5lc3MgKSwgRjAgKSAtIEYwO1xuXHRyZXR1cm4gRnIgKiBmcmVzbmVsICsgRjA7XG59XG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcblx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xuXHRmbG9hdCBnbCA9IGRvdE5MICsgc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROTCApICk7XG5cdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcblx0cmV0dXJuIDEuMCAvICggZ2wgKiBndiApO1xufVxuZmxvYXQgR19HR1hfU21pdGhDb3JyZWxhdGVkKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICkge1xuXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XG5cdGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcblx0ZmxvYXQgZ2wgPSBkb3ROViAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xuXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XG59XG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xuXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XG5cdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcblx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XG59XG52ZWMzIEJSREZfU3BlY3VsYXJfR0dYKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGluY2lkZW50TGlnaHQsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xuXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgdmlld0RpciApO1xuXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKSApO1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcblx0ZmxvYXQgZG90TEggPSBzYXR1cmF0ZSggZG90KCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiwgaGFsZkRpciApICk7XG5cdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcblx0ZmxvYXQgRyA9IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xuXHRmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xuXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcbn1cbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRjb25zdCBmbG9hdCBMVVRfU0laRSAgPSA2NC4wO1xuXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcblx0Y29uc3QgZmxvYXQgTFVUX0JJQVMgID0gMC41IC8gTFVUX1NJWkU7XG5cdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggTiwgViApICk7XG5cdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcblx0dXYgPSB1diAqIExVVF9TQ0FMRSArIExVVF9CSUFTO1xuXHRyZXR1cm4gdXY7XG59XG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcblx0ZmxvYXQgbCA9IGxlbmd0aCggZiApO1xuXHRyZXR1cm4gbWF4KCAoIGwgKiBsICsgZi56ICkgLyAoIGwgKyAxLjAgKSwgMC4wICk7XG59XG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcblx0ZmxvYXQgeCA9IGRvdCggdjEsIHYyICk7XG5cdGZsb2F0IHkgPSBhYnMoIHggKTtcblx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcblx0ZmxvYXQgYiA9IDMuNDE3NTk0MCArICggNC4xNjE2NzI0ICsgeSApICogeTtcblx0ZmxvYXQgdiA9IGEgLyBiO1xuXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XG5cdHJldHVybiBjcm9zcyggdjEsIHYyICkgKiB0aGV0YV9zaW50aGV0YTtcbn1cbnZlYzMgTFRDX0V2YWx1YXRlKCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gdmVjMyBQLCBjb25zdCBpbiBtYXQzIG1JbnYsIGNvbnN0IGluIHZlYzMgcmVjdENvb3Jkc1sgNCBdICkge1xuXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xuXHR2ZWMzIHYyID0gcmVjdENvb3Jkc1sgMyBdIC0gcmVjdENvb3Jkc1sgMCBdO1xuXHR2ZWMzIGxpZ2h0Tm9ybWFsID0gY3Jvc3MoIHYxLCB2MiApO1xuXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xuXHR2ZWMzIFQxLCBUMjtcblx0VDEgPSBub3JtYWxpemUoIFYgLSBOICogZG90KCBWLCBOICkgKTtcblx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xuXHRtYXQzIG1hdCA9IG1JbnYgKiB0cmFuc3Bvc2VNYXQzKCBtYXQzKCBUMSwgVDIsIE4gKSApO1xuXHR2ZWMzIGNvb3Jkc1sgNCBdO1xuXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xuXHRjb29yZHNbIDEgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMSBdIC0gUCApO1xuXHRjb29yZHNbIDIgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMiBdIC0gUCApO1xuXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xuXHRjb29yZHNbIDAgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAwIF0gKTtcblx0Y29vcmRzWyAxIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMSBdICk7XG5cdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xuXHRjb29yZHNbIDMgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAzIF0gKTtcblx0dmVjMyB2ZWN0b3JGb3JtRmFjdG9yID0gdmVjMyggMC4wICk7XG5cdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcblx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMSBdLCBjb29yZHNbIDIgXSApO1xuXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAyIF0sIGNvb3Jkc1sgMyBdICk7XG5cdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcblx0ZmxvYXQgcmVzdWx0ID0gTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCB2ZWN0b3JGb3JtRmFjdG9yICk7XG5cdHJldHVybiB2ZWMzKCByZXN1bHQgKTtcbn1cbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XG5cdHZlYzIgYnJkZiA9IGludGVncmF0ZVNwZWN1bGFyQlJERiggZG90TlYsIHJvdWdobmVzcyApO1xuXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIGJyZGYueCArIGJyZGYueTtcbn1cbnZvaWQgQlJERl9TcGVjdWxhcl9NdWx0aXNjYXR0ZXJpbmdfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xuXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XG5cdHZlYzMgRiA9IEZfU2NobGlja19Sb3VnaG5lc3NEZXBlbmRlbnQoIHNwZWN1bGFyQ29sb3IsIGRvdE5WLCByb3VnaG5lc3MgKTtcblx0dmVjMiBicmRmID0gaW50ZWdyYXRlU3BlY3VsYXJCUkRGKCBkb3ROViwgcm91Z2huZXNzICk7XG5cdHZlYzMgRnNzRXNzID0gRiAqIGJyZGYueCArIGJyZGYueTtcblx0ZmxvYXQgRXNzID0gYnJkZi54ICsgYnJkZi55O1xuXHRmbG9hdCBFbXMgPSAxLjAgLSBFc3M7XG5cdHZlYzMgRmF2ZyA9IHNwZWN1bGFyQ29sb3IgKyAoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIDAuMDQ3NjE5O1x0dmVjMyBGbXMgPSBGc3NFc3MgKiBGYXZnIC8gKCAxLjAgLSBFbXMgKiBGYXZnICk7XG5cdHNpbmdsZVNjYXR0ZXIgKz0gRnNzRXNzO1xuXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xufVxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcblx0cmV0dXJuIDAuMjU7XG59XG5mbG9hdCBEX0JsaW5uUGhvbmcoIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XG5cdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xufVxudmVjMyBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgaW5jaWRlbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MgKSB7XG5cdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XG5cdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcblx0ZmxvYXQgZG90TEggPSBzYXR1cmF0ZSggZG90KCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiwgaGFsZkRpciApICk7XG5cdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcblx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcblx0ZmxvYXQgRCA9IERfQmxpbm5QaG9uZyggc2hpbmluZXNzLCBkb3ROSCApO1xuXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcbn1cbmZsb2F0IEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggY29uc3QgaW4gZmxvYXQgZ2d4Um91Z2huZXNzICkge1xuXHRyZXR1cm4gKCAyLjAgLyBwb3cyKCBnZ3hSb3VnaG5lc3MgKyAwLjAwMDEgKSAtIDIuMCApO1xufVxuZmxvYXQgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCBibGlubkV4cG9uZW50ICkge1xuXHRyZXR1cm4gc3FydCggMi4wIC8gKCBibGlubkV4cG9uZW50ICsgMi4wICkgKTtcbn1cbiNpZiBkZWZpbmVkKCBVU0VfU0hFRU4gKVxuZmxvYXQgRF9DaGFybGllKGZsb2F0IHJvdWdobmVzcywgZmxvYXQgTm9IKSB7XG5cdGZsb2F0IGludkFscGhhICA9IDEuMCAvIHJvdWdobmVzcztcblx0ZmxvYXQgY29zMmggPSBOb0ggKiBOb0g7XG5cdGZsb2F0IHNpbjJoID0gbWF4KDEuMCAtIGNvczJoLCAwLjAwNzgxMjUpO1x0cmV0dXJuICgyLjAgKyBpbnZBbHBoYSkgKiBwb3coc2luMmgsIGludkFscGhhICogMC41KSAvICgyLjAgKiBQSSk7XG59XG5mbG9hdCBWX05ldWJlbHQoZmxvYXQgTm9WLCBmbG9hdCBOb0wpIHtcblx0cmV0dXJuIHNhdHVyYXRlKDEuMCAvICg0LjAgKiAoTm9MICsgTm9WIC0gTm9MICogTm9WKSkpO1xufVxudmVjMyBCUkRGX1NwZWN1bGFyX1NoZWVuKCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgTCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgdmVjMyBzcGVjdWxhckNvbG9yICkge1xuXHR2ZWMzIE4gPSBnZW9tZXRyeS5ub3JtYWw7XG5cdHZlYzMgViA9IGdlb21ldHJ5LnZpZXdEaXI7XG5cdHZlYzMgSCA9IG5vcm1hbGl6ZSggViArIEwgKTtcblx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBOLCBIICkgKTtcblx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBEX0NoYXJsaWUoIHJvdWdobmVzcywgZG90TkggKSAqIFZfTmV1YmVsdCggZG90KE4sIFYpLCBkb3QoTiwgTCkgKTtcbn1cbiNlbmRpZiI7CgoJdmFyIGJ1bXBtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0JVTVBNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgYnVtcE1hcDtcblx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XG5cdHZlYzIgZEhkeHlfZndkKCkge1xuXHRcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcblx0XHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XG5cdFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xuXHRcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xuXHRcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xuXHRcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xuXHR9XG5cdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XG5cdFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xuXHRcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcblx0XHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xuXHRcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcblx0XHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XG5cdFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcblx0XHRmRGV0ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcblx0XHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcblx0XHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XG5cdH1cbiNlbmRpZiI7CgoJdmFyIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCA9ICIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcblx0dmVjNCBwbGFuZTtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XG5cdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdGlmICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSBkaXNjYXJkO1xuXHR9XG5cdCNpZiBVTklPTl9DTElQUElOR19QTEFORVMgPCBOVU1fQ0xJUFBJTkdfUExBTkVTXG5cdFx0Ym9vbCBjbGlwcGVkID0gdHJ1ZTtcblx0XHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdFx0Zm9yICggaW50IGkgPSBVTklPTl9DTElQUElOR19QTEFORVM7IGkgPCBOVU1fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xuXHRcdFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xuXHRcdFx0Y2xpcHBlZCA9ICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xuXHRcdH1cblx0XHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgoJdmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50ID0gIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxuXHQjaWYgISBkZWZpbmVkKCBTVEFOREFSRCApICYmICEgZGVmaW5lZCggUEhPTkcgKSAmJiAhIGRlZmluZWQoIE1BVENBUCApXG5cdFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cdCNlbmRpZlxuXHR1bmlmb3JtIHZlYzQgY2xpcHBpbmdQbGFuZXNbIE5VTV9DTElQUElOR19QTEFORVMgXTtcbiNlbmRpZiI7CgoJdmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCA9ICIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBTVEFOREFSRCApICYmICEgZGVmaW5lZCggUEhPTkcgKSAmJiAhIGRlZmluZWQoIE1BVENBUCApXG5cdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2VuZGlmIjsKCgl2YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9ICIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBTVEFOREFSRCApICYmICEgZGVmaW5lZCggUEhPTkcgKSAmJiAhIGRlZmluZWQoIE1BVENBUCApXG5cdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuI2VuZGlmIjsKCgl2YXIgY29sb3JfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9DT0xPUlxuXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcbiNlbmRpZiI7CgoJdmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9DT0xPUlxuXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuI2VuZGlmIjsKCgl2YXIgY29sb3JfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9DT0xPUlxuXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuI2VuZGlmIjsKCgl2YXIgY29sb3JfdmVydGV4ID0gIiNpZmRlZiBVU0VfQ09MT1Jcblx0dkNvbG9yLnh5eiA9IGNvbG9yLnh5ejtcbiNlbmRpZiI7CgoJdmFyIGNvbW1vbiA9ICIjZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTlcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MThcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcbiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4XG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTRcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxuI2RlZmluZSBFUFNJTE9OIDFlLTZcbiNpZm5kZWYgc2F0dXJhdGVcbiNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcbiNlbmRpZlxuI2RlZmluZSB3aGl0ZUNvbXBsZW1lbnQoYSkgKCAxLjAgLSBzYXR1cmF0ZSggYSApIClcbmZsb2F0IHBvdzIoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4Kng7IH1cbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxuZmxvYXQgcG93NCggY29uc3QgaW4gZmxvYXQgeCApIHsgZmxvYXQgeDIgPSB4Kng7IHJldHVybiB4Mip4MjsgfVxuZmxvYXQgYXZlcmFnZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHsgcmV0dXJuIGRvdCggY29sb3IsIHZlYzMoIDAuMzMzMyApICk7IH1cbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XG5cdGNvbnN0IGhpZ2hwIGZsb2F0IGEgPSAxMi45ODk4LCBiID0gNzguMjMzLCBjID0gNDM3NTguNTQ1Mztcblx0aGlnaHAgZmxvYXQgZHQgPSBkb3QoIHV2Lnh5LCB2ZWMyKCBhLGIgKSApLCBzbiA9IG1vZCggZHQsIFBJICk7XG5cdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XG59XG4jaWZkZWYgSElHSF9QUkVDSVNJT05cblx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkgeyByZXR1cm4gbGVuZ3RoKCB2ICk7IH1cbiNlbHNlXG5cdGZsb2F0IG1heDMoIHZlYzMgdiApIHsgcmV0dXJuIG1heCggbWF4KCB2LngsIHYueSApLCB2LnogKTsgfVxuXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7XG5cdFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4MyggYWJzKCB2ICkgKTtcblx0XHRyZXR1cm4gbGVuZ3RoKCB2IC8gbWF4Q29tcG9uZW50ICkgKiBtYXhDb21wb25lbnQ7XG5cdH1cbiNlbmRpZlxuc3RydWN0IEluY2lkZW50TGlnaHQge1xuXHR2ZWMzIGNvbG9yO1xuXHR2ZWMzIGRpcmVjdGlvbjtcblx0Ym9vbCB2aXNpYmxlO1xufTtcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XG5cdHZlYzMgZGlyZWN0RGlmZnVzZTtcblx0dmVjMyBkaXJlY3RTcGVjdWxhcjtcblx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XG5cdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcbn07XG5zdHJ1Y3QgR2VvbWV0cmljQ29udGV4dCB7XG5cdHZlYzMgcG9zaXRpb247XG5cdHZlYzMgbm9ybWFsO1xuXHR2ZWMzIHZpZXdEaXI7XG4jaWZkZWYgQ0xFQVJDT0FUXG5cdHZlYzMgY2xlYXJjb2F0Tm9ybWFsO1xuI2VuZGlmXG59O1xudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcblx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XG59XG52ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcblx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XG59XG52ZWMzIHByb2plY3RPblBsYW5lKGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xuXHRmbG9hdCBkaXN0YW5jZSA9IGRvdCggcGxhbmVOb3JtYWwsIHBvaW50IC0gcG9pbnRPblBsYW5lICk7XG5cdHJldHVybiAtIGRpc3RhbmNlICogcGxhbmVOb3JtYWwgKyBwb2ludDtcbn1cbmZsb2F0IHNpZGVPZlBsYW5lKCBpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcblx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcbn1cbnZlYzMgbGluZVBsYW5lSW50ZXJzZWN0KCBpbiB2ZWMzIHBvaW50T25MaW5lLCBpbiB2ZWMzIGxpbmVEaXJlY3Rpb24sIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xuXHRyZXR1cm4gbGluZURpcmVjdGlvbiAqICggZG90KCBwbGFuZU5vcm1hbCwgcG9pbnRPblBsYW5lIC0gcG9pbnRPbkxpbmUgKSAvIGRvdCggcGxhbmVOb3JtYWwsIGxpbmVEaXJlY3Rpb24gKSApICsgcG9pbnRPbkxpbmU7XG59XG5tYXQzIHRyYW5zcG9zZU1hdDMoIGNvbnN0IGluIG1hdDMgbSApIHtcblx0bWF0MyB0bXA7XG5cdHRtcFsgMCBdID0gdmVjMyggbVsgMCBdLngsIG1bIDEgXS54LCBtWyAyIF0ueCApO1xuXHR0bXBbIDEgXSA9IHZlYzMoIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcblx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XG5cdHJldHVybiB0bXA7XG59XG5mbG9hdCBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkge1xuXHR2ZWMzIHdlaWdodHMgPSB2ZWMzKCAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyICk7XG5cdHJldHVybiBkb3QoIHdlaWdodHMsIGNvbG9yLnJnYiApO1xufVxuYm9vbCBpc1BlcnNwZWN0aXZlTWF0cml4KCBtYXQ0IG0gKSB7XG4gIHJldHVybiBtWyAyIF1bIDMgXSA9PSAtIDEuMDtcbn0iOwoKCXZhciBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQgPSAiI2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcbiNkZWZpbmUgY3ViZVVWX21heE1pcExldmVsIDguMFxuI2RlZmluZSBjdWJlVVZfbWluTWlwTGV2ZWwgNC4wXG4jZGVmaW5lIGN1YmVVVl9tYXhUaWxlU2l6ZSAyNTYuMFxuI2RlZmluZSBjdWJlVVZfbWluVGlsZVNpemUgMTYuMFxuZmxvYXQgZ2V0RmFjZSh2ZWMzIGRpcmVjdGlvbikge1xuICAgIHZlYzMgYWJzRGlyZWN0aW9uID0gYWJzKGRpcmVjdGlvbik7XG4gICAgZmxvYXQgZmFjZSA9IC0xLjA7XG4gICAgaWYgKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnopIHtcbiAgICAgIGlmIChhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi55KVxuICAgICAgICBmYWNlID0gZGlyZWN0aW9uLnggPiAwLjAgPyAwLjAgOiAzLjA7XG4gICAgICBlbHNlXG4gICAgICAgIGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEuMCA6IDQuMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkpXG4gICAgICAgIGZhY2UgPSBkaXJlY3Rpb24ueiA+IDAuMCA/IDIuMCA6IDUuMDtcbiAgICAgIGVsc2VcbiAgICAgICAgZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xuICAgIH1cbiAgICByZXR1cm4gZmFjZTtcbn1cbnZlYzIgZ2V0VVYodmVjMyBkaXJlY3Rpb24sIGZsb2F0IGZhY2UpIHtcbiAgICB2ZWMyIHV2O1xuICAgIGlmIChmYWNlID09IDAuMCkge1xuICAgICAgdXYgPSB2ZWMyKC1kaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpIC8gYWJzKGRpcmVjdGlvbi54KTtcbiAgICB9IGVsc2UgaWYgKGZhY2UgPT0gMS4wKSB7XG4gICAgICB1diA9IHZlYzIoZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueikgLyBhYnMoZGlyZWN0aW9uLnkpO1xuICAgIH0gZWxzZSBpZiAoZmFjZSA9PSAyLjApIHtcbiAgICAgIHV2ID0gZGlyZWN0aW9uLnh5IC8gYWJzKGRpcmVjdGlvbi56KTtcbiAgICB9IGVsc2UgaWYgKGZhY2UgPT0gMy4wKSB7XG4gICAgICB1diA9IHZlYzIoZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55KSAvIGFicyhkaXJlY3Rpb24ueCk7XG4gICAgfSBlbHNlIGlmIChmYWNlID09IDQuMCkge1xuICAgICAgdXYgPSBkaXJlY3Rpb24ueHogLyBhYnMoZGlyZWN0aW9uLnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1diA9IHZlYzIoLWRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSkgLyBhYnMoZGlyZWN0aW9uLnopO1xuICAgIH1cbiAgICByZXR1cm4gMC41ICogKHV2ICsgMS4wKTtcbn1cbnZlYzMgYmlsaW5lYXJDdWJlVVYoc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBkaXJlY3Rpb24sIGZsb2F0IG1pcEludCkge1xuICBmbG9hdCBmYWNlID0gZ2V0RmFjZShkaXJlY3Rpb24pO1xuICBmbG9hdCBmaWx0ZXJJbnQgPSBtYXgoY3ViZVVWX21pbk1pcExldmVsIC0gbWlwSW50LCAwLjApO1xuICBtaXBJbnQgPSBtYXgobWlwSW50LCBjdWJlVVZfbWluTWlwTGV2ZWwpO1xuICBmbG9hdCBmYWNlU2l6ZSA9IGV4cDIobWlwSW50KTtcbiAgZmxvYXQgdGV4ZWxTaXplID0gMS4wIC8gKDMuMCAqIGN1YmVVVl9tYXhUaWxlU2l6ZSk7XG4gIHZlYzIgdXYgPSBnZXRVVihkaXJlY3Rpb24sIGZhY2UpICogKGZhY2VTaXplIC0gMS4wKTtcbiAgdmVjMiBmID0gZnJhY3QodXYpO1xuICB1diArPSAwLjUgLSBmO1xuICBpZiAoZmFjZSA+IDIuMCkge1xuICAgIHV2LnkgKz0gZmFjZVNpemU7XG4gICAgZmFjZSAtPSAzLjA7XG4gIH1cbiAgdXYueCArPSBmYWNlICogZmFjZVNpemU7XG4gIGlmKG1pcEludCA8IGN1YmVVVl9tYXhNaXBMZXZlbCl7XG4gICAgdXYueSArPSAyLjAgKiBjdWJlVVZfbWF4VGlsZVNpemU7XG4gIH1cbiAgdXYueSArPSBmaWx0ZXJJbnQgKiAyLjAgKiBjdWJlVVZfbWluVGlsZVNpemU7XG4gIHV2LnggKz0gMy4wICogbWF4KDAuMCwgY3ViZVVWX21heFRpbGVTaXplIC0gMi4wICogZmFjZVNpemUpO1xuICB1diAqPSB0ZXhlbFNpemU7XG4gIHZlYzMgdGwgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2KSkucmdiO1xuICB1di54ICs9IHRleGVsU2l6ZTtcbiAgdmVjMyB0ciA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXYpKS5yZ2I7XG4gIHV2LnkgKz0gdGV4ZWxTaXplO1xuICB2ZWMzIGJyID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dikpLnJnYjtcbiAgdXYueCAtPSB0ZXhlbFNpemU7XG4gIHZlYzMgYmwgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2KSkucmdiO1xuICB2ZWMzIHRtID0gbWl4KHRsLCB0ciwgZi54KTtcbiAgdmVjMyBibSA9IG1peChibCwgYnIsIGYueCk7XG4gIHJldHVybiBtaXgodG0sIGJtLCBmLnkpO1xufVxuI2RlZmluZSByMCAxLjBcbiNkZWZpbmUgdjAgMC4zMzlcbiNkZWZpbmUgbTAgLTIuMFxuI2RlZmluZSByMSAwLjhcbiNkZWZpbmUgdjEgMC4yNzZcbiNkZWZpbmUgbTEgLTEuMFxuI2RlZmluZSByNCAwLjRcbiNkZWZpbmUgdjQgMC4wNDZcbiNkZWZpbmUgbTQgMi4wXG4jZGVmaW5lIHI1IDAuMzA1XG4jZGVmaW5lIHY1IDAuMDE2XG4jZGVmaW5lIG01IDMuMFxuI2RlZmluZSByNiAwLjIxXG4jZGVmaW5lIHY2IDAuMDAzOFxuI2RlZmluZSBtNiA0LjBcbmZsb2F0IHJvdWdobmVzc1RvVmFyaWFuY2UoZmxvYXQgcm91Z2huZXNzKSB7XG4gIGZsb2F0IHZhcmlhbmNlID0gMC4wO1xuICBpZiAocm91Z2huZXNzID49IHIxKSB7XG4gICAgdmFyaWFuY2UgPSAocjAgLSByb3VnaG5lc3MpICogKHYxIC0gdjApIC8gKHIwIC0gcjEpICsgdjA7XG4gIH0gZWxzZSBpZiAocm91Z2huZXNzID49IHI0KSB7XG4gICAgdmFyaWFuY2UgPSAocjEgLSByb3VnaG5lc3MpICogKHY0IC0gdjEpIC8gKHIxIC0gcjQpICsgdjE7XG4gIH0gZWxzZSBpZiAocm91Z2huZXNzID49IHI1KSB7XG4gICAgdmFyaWFuY2UgPSAocjQgLSByb3VnaG5lc3MpICogKHY1IC0gdjQpIC8gKHI0IC0gcjUpICsgdjQ7XG4gIH0gZWxzZSB7XG4gICAgZmxvYXQgcm91Z2huZXNzMiA9IHJvdWdobmVzcyAqIHJvdWdobmVzcztcbiAgICB2YXJpYW5jZSA9IDEuNzkgKiByb3VnaG5lc3MyICogcm91Z2huZXNzMjtcbiAgfVxuICByZXR1cm4gdmFyaWFuY2U7XG59XG5mbG9hdCB2YXJpYW5jZVRvUm91Z2huZXNzKGZsb2F0IHZhcmlhbmNlKSB7XG4gIGZsb2F0IHJvdWdobmVzcyA9IDAuMDtcbiAgaWYgKHZhcmlhbmNlID49IHYxKSB7XG4gICAgcm91Z2huZXNzID0gKHYwIC0gdmFyaWFuY2UpICogKHIxIC0gcjApIC8gKHYwIC0gdjEpICsgcjA7XG4gIH0gZWxzZSBpZiAodmFyaWFuY2UgPj0gdjQpIHtcbiAgICByb3VnaG5lc3MgPSAodjEgLSB2YXJpYW5jZSkgKiAocjQgLSByMSkgLyAodjEgLSB2NCkgKyByMTtcbiAgfSBlbHNlIGlmICh2YXJpYW5jZSA+PSB2NSkge1xuICAgIHJvdWdobmVzcyA9ICh2NCAtIHZhcmlhbmNlKSAqIChyNSAtIHI0KSAvICh2NCAtIHY1KSArIHI0O1xuICB9IGVsc2Uge1xuICAgIHJvdWdobmVzcyA9IHBvdygwLjU1OSAqIHZhcmlhbmNlLCAwLjI1KTsgIH1cbiAgcmV0dXJuIHJvdWdobmVzcztcbn1cbmZsb2F0IHJvdWdobmVzc1RvTWlwKGZsb2F0IHJvdWdobmVzcykge1xuICBmbG9hdCBtaXAgPSAwLjA7XG4gIGlmIChyb3VnaG5lc3MgPj0gcjEpIHtcbiAgICBtaXAgPSAocjAgLSByb3VnaG5lc3MpICogKG0xIC0gbTApIC8gKHIwIC0gcjEpICsgbTA7XG4gIH0gZWxzZSBpZiAocm91Z2huZXNzID49IHI0KSB7XG4gICAgbWlwID0gKHIxIC0gcm91Z2huZXNzKSAqIChtNCAtIG0xKSAvIChyMSAtIHI0KSArIG0xO1xuICB9IGVsc2UgaWYgKHJvdWdobmVzcyA+PSByNSkge1xuICAgIG1pcCA9IChyNCAtIHJvdWdobmVzcykgKiAobTUgLSBtNCkgLyAocjQgLSByNSkgKyBtNDtcbiAgfSBlbHNlIGlmIChyb3VnaG5lc3MgPj0gcjYpIHtcbiAgICBtaXAgPSAocjUgLSByb3VnaG5lc3MpICogKG02IC0gbTUpIC8gKHI1IC0gcjYpICsgbTU7XG4gIH0gZWxzZSB7XG4gICAgbWlwID0gLTIuMCAqIGxvZzIoMS4xNiAqIHJvdWdobmVzcyk7ICB9XG4gIHJldHVybiBtaXA7XG59XG52ZWM0IHRleHR1cmVDdWJlVVYoc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBzYW1wbGVEaXIsIGZsb2F0IHJvdWdobmVzcykge1xuICBmbG9hdCBtaXAgPSBjbGFtcChyb3VnaG5lc3NUb01pcChyb3VnaG5lc3MpLCBtMCwgY3ViZVVWX21heE1pcExldmVsKTtcbiAgZmxvYXQgbWlwRiA9IGZyYWN0KG1pcCk7XG4gIGZsb2F0IG1pcEludCA9IGZsb29yKG1pcCk7XG4gIHZlYzMgY29sb3IwID0gYmlsaW5lYXJDdWJlVVYoZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCk7XG4gIGlmIChtaXBGID09IDAuMCkge1xuICAgIHJldHVybiB2ZWM0KGNvbG9yMCwgMS4wKTtcbiAgfSBlbHNlIHtcbiAgICB2ZWMzIGNvbG9yMSA9IGJpbGluZWFyQ3ViZVVWKGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQgKyAxLjApO1xuICAgIHJldHVybiB2ZWM0KG1peChjb2xvcjAsIGNvbG9yMSwgbWlwRiksIDEuMCk7XG4gIH1cbn1cbiNlbmRpZiI7CgoJdmFyIGRlZmF1bHRub3JtYWxfdmVydGV4ID0gInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBvYmplY3ROb3JtYWw7XG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcblx0dHJhbnNmb3JtZWROb3JtYWwgPSBtYXQzKCBpbnN0YW5jZU1hdHJpeCApICogdHJhbnNmb3JtZWROb3JtYWw7XG4jZW5kaWZcbnRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogdHJhbnNmb3JtZWROb3JtYWw7XG4jaWZkZWYgRkxJUF9TSURFRFxuXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XG4jZW5kaWZcbiNpZmRlZiBVU0VfVEFOR0VOVFxuXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9ICggbW9kZWxWaWV3TWF0cml4ICogdmVjNCggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XG5cdCNpZmRlZiBGTElQX1NJREVEXG5cdFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gLSB0cmFuc2Zvcm1lZFRhbmdlbnQ7XG5cdCNlbmRpZlxuI2VuZGlmIjsKCgl2YXIgZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGRpc3BsYWNlbWVudE1hcDtcblx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRTY2FsZTtcblx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xuI2VuZGlmIjsKCgl2YXIgZGlzcGxhY2VtZW50bWFwX3ZlcnRleCA9ICIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxuXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdlV2ICkueCAqIGRpc3BsYWNlbWVudFNjYWxlICsgZGlzcGxhY2VtZW50QmlhcyApO1xuI2VuZGlmIjsKCgl2YXIgZW1pc3NpdmVtYXBfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxuXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcblx0ZW1pc3NpdmVDb2xvci5yZ2IgPSBlbWlzc2l2ZU1hcFRleGVsVG9MaW5lYXIoIGVtaXNzaXZlQ29sb3IgKS5yZ2I7XG5cdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcbiNlbmRpZiI7CgoJdmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcbiNlbmRpZiI7CgoJdmFyIGVuY29kaW5nc19mcmFnbWVudCA9ICJnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKCBnbF9GcmFnQ29sb3IgKTsiOwoKCXZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9ICJcbnZlYzQgTGluZWFyVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2YWx1ZTtcbn1cbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XG5cdHJldHVybiB2ZWM0KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggZ2FtbWFGYWN0b3IgKSApLCB2YWx1ZS5hICk7XG59XG52ZWM0IExpbmVhclRvR2FtbWEoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IGdhbW1hRmFjdG9yICkge1xuXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUuYSApO1xufVxudmVjNCBzUkdCVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XG5cdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHZhbHVlLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjA0MDQ1ICkgKSApICksIHZhbHVlLmEgKTtcbn1cbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xuXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzMoIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS5hICk7XG59XG52ZWM0IFJHQkVUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcblx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xufVxudmVjNCBMaW5lYXJUb1JHQkUoIGluIHZlYzQgdmFsdWUgKSB7XG5cdGZsb2F0IG1heENvbXBvbmVudCA9IG1heCggbWF4KCB2YWx1ZS5yLCB2YWx1ZS5nICksIHZhbHVlLmIgKTtcblx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XG5cdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyBleHAyKCBmRXhwICksICggZkV4cCArIDEyOC4wICkgLyAyNTUuMCApO1xufVxudmVjNCBSR0JNVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xuXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogdmFsdWUuYSAqIG1heFJhbmdlLCAxLjAgKTtcbn1cbnZlYzQgTGluZWFyVG9SR0JNKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcblx0ZmxvYXQgbWF4UkdCID0gbWF4KCB2YWx1ZS5yLCBtYXgoIHZhbHVlLmcsIHZhbHVlLmIgKSApO1xuXHRmbG9hdCBNID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xuXHRNID0gY2VpbCggTSAqIDI1NS4wICkgLyAyNTUuMDtcblx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvICggTSAqIG1heFJhbmdlICksIE0gKTtcbn1cbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcblx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggKCBtYXhSYW5nZSAvIDI1NS4wICkgLyB2YWx1ZS5hICksIDEuMCApO1xufVxudmVjNCBMaW5lYXJUb1JHQkQoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xuXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XG5cdGZsb2F0IEQgPSBtYXgoIG1heFJhbmdlIC8gbWF4UkdCLCAxLjAgKTtcblx0RCA9IG1pbiggZmxvb3IoIEQgKSAvIDI1NS4wLCAxLjAgKTtcblx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggRCAqICggMjU1LjAgLyBtYXhSYW5nZSApICksIEQgKTtcbn1cbmNvbnN0IG1hdDMgY0xvZ0x1dk0gPSBtYXQzKCAwLjIyMDksIDAuMzM5MCwgMC40MTg0LCAwLjExMzgsIDAuNjc4MCwgMC43MzE5LCAwLjAxMDIsIDAuMTEzMCwgMC4yOTY5ICk7XG52ZWM0IExpbmVhclRvTG9nTHV2KCBpbiB2ZWM0IHZhbHVlICkgIHtcblx0dmVjMyBYcF9ZX1hZWnAgPSBjTG9nTHV2TSAqIHZhbHVlLnJnYjtcblx0WHBfWV9YWVpwID0gbWF4KCBYcF9ZX1hZWnAsIHZlYzMoIDFlLTYsIDFlLTYsIDFlLTYgKSApO1xuXHR2ZWM0IHZSZXN1bHQ7XG5cdHZSZXN1bHQueHkgPSBYcF9ZX1hZWnAueHkgLyBYcF9ZX1hZWnAuejtcblx0ZmxvYXQgTGUgPSAyLjAgKiBsb2cyKFhwX1lfWFlacC55KSArIDEyNy4wO1xuXHR2UmVzdWx0LncgPSBmcmFjdCggTGUgKTtcblx0dlJlc3VsdC56ID0gKCBMZSAtICggZmxvb3IoIHZSZXN1bHQudyAqIDI1NS4wICkgKSAvIDI1NS4wICkgLyAyNTUuMDtcblx0cmV0dXJuIHZSZXN1bHQ7XG59XG5jb25zdCBtYXQzIGNMb2dMdXZJbnZlcnNlTSA9IG1hdDMoIDYuMDAxNCwgLTIuNzAwOCwgLTEuNzk5NiwgLTEuMzMyMCwgMy4xMDI5LCAtNS43NzIxLCAwLjMwMDgsIC0xLjA4ODIsIDUuNjI2OCApO1xudmVjNCBMb2dMdXZUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcblx0ZmxvYXQgTGUgPSB2YWx1ZS56ICogMjU1LjAgKyB2YWx1ZS53O1xuXHR2ZWMzIFhwX1lfWFlacDtcblx0WHBfWV9YWVpwLnkgPSBleHAyKCAoIExlIC0gMTI3LjAgKSAvIDIuMCApO1xuXHRYcF9ZX1hZWnAueiA9IFhwX1lfWFlacC55IC8gdmFsdWUueTtcblx0WHBfWV9YWVpwLnggPSB2YWx1ZS54ICogWHBfWV9YWVpwLno7XG5cdHZlYzMgdlJHQiA9IGNMb2dMdXZJbnZlcnNlTSAqIFhwX1lfWFlacC5yZ2I7XG5cdHJldHVybiB2ZWM0KCBtYXgoIHZSR0IsIDAuMCApLCAxLjAgKTtcbn0iOwoKCXZhciBlbnZtYXBfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9FTlZNQVBcblx0I2lmZGVmIEVOVl9XT1JMRFBPU1xuXHRcdHZlYzMgY2FtZXJhVG9GcmFnO1xuXHRcdFxuXHRcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XG5cdFx0XHRjYW1lcmFUb0ZyYWcgPSBub3JtYWxpemUoIHZlYzMoIC0gdmlld01hdHJpeFsgMCBdWyAyIF0sIC0gdmlld01hdHJpeFsgMSBdWyAyIF0sIC0gdmlld01hdHJpeFsgMiBdWyAyIF0gKSApO1xuXHRcdH0gIGVsc2Uge1xuXHRcdFx0Y2FtZXJhVG9GcmFnID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XG5cdFx0fVxuXHRcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcblx0XHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxuXHRcdFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCApO1xuXHRcdCNlbHNlXG5cdFx0XHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb0ZyYWcsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcblx0XHQjZW5kaWZcblx0I2Vsc2Vcblx0XHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcblx0I2VuZGlmXG5cdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXG5cdFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcblx0XHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICksIDAuMCApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcblx0XHR2ZWMyIHNhbXBsZVVWO1xuXHRcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcblx0XHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIHJlZmxlY3RWZWMueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xuXHRcdHNhbXBsZVVWLnggPSBhdGFuKCByZWZsZWN0VmVjLnosIHJlZmxlY3RWZWMueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XG5cdFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxuXHRcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcblx0XHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwgMC4wLCAxLjAgKSApO1xuXHRcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcblx0I2Vsc2Vcblx0XHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XG5cdCNlbmRpZlxuXHQjaWZuZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcblx0XHRlbnZDb2xvciA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudkNvbG9yICk7XG5cdCNlbmRpZlxuXHQjaWZkZWYgRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXG5cdFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgb3V0Z29pbmdMaWdodCAqIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xuXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcblx0XHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcblx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXG5cdFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xuXHQjZW5kaWZcbiNlbmRpZiI7CgoJdmFyIGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0VOVk1BUFxuXHR1bmlmb3JtIGZsb2F0IGVudk1hcEludGVuc2l0eTtcblx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xuXHR1bmlmb3JtIGludCBtYXhNaXBMZXZlbDtcblx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcblx0XHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcblx0I2Vsc2Vcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XG5cdCNlbmRpZlxuXHRcbiNlbmRpZiI7CgoJdmFyIGVudm1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xuXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxuXHRcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXG5cdCNlbmRpZlxuXHQjaWZkZWYgRU5WX1dPUkxEUE9TXG5cdFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXHRcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xuXHQjZWxzZVxuXHRcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBlbnZtYXBfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9FTlZNQVBcblx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8ZGVmaW5lZCggUEhPTkcgKVxuXHRcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXG5cdCNlbmRpZlxuXHQjaWZkZWYgRU5WX1dPUkxEUE9TXG5cdFx0XG5cdFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXHQjZWxzZVxuXHRcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcblx0XHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBlbnZtYXBfdmVydGV4ID0gIiNpZmRlZiBVU0VfRU5WTUFQXG5cdCNpZmRlZiBFTlZfV09STERQT1Ncblx0XHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xuXHQjZWxzZVxuXHRcdHZlYzMgY2FtZXJhVG9WZXJ0ZXg7XG5cdFx0aWYgKCBpc09ydGhvZ3JhcGhpYyApIHsgXG5cdFx0XHRjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB3b3JsZFBvc2l0aW9uLnh5eiAtIGNhbWVyYVBvc2l0aW9uICk7XG5cdFx0fVxuXHRcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xuXHRcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXG5cdFx0XHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xuXHRcdCNlbHNlXG5cdFx0XHR2UmVmbGVjdCA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XG5cdFx0I2VuZGlmXG5cdCNlbmRpZlxuI2VuZGlmIjsKCgl2YXIgZm9nX3ZlcnRleCA9ICIjaWZkZWYgVVNFX0ZPR1xuXHRmb2dEZXB0aCA9IC1tdlBvc2l0aW9uLno7XG4jZW5kaWYiOwoKCXZhciBmb2dfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9GT0dcblx0dmFyeWluZyBmbG9hdCBmb2dEZXB0aDtcbiNlbmRpZiI7CgoJdmFyIGZvZ19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0ZPR1xuXHQjaWZkZWYgRk9HX0VYUDJcblx0XHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiBmb2dEZXB0aCAqIGZvZ0RlcHRoICk7XG5cdCNlbHNlXG5cdFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xuXHQjZW5kaWZcblx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xuI2VuZGlmIjsKCgl2YXIgZm9nX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9GT0dcblx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xuXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xuXHQjaWZkZWYgRk9HX0VYUDJcblx0XHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XG5cdCNlbHNlXG5cdFx0dW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xuXHRcdHVuaWZvcm0gZmxvYXQgZm9nRmFyO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgoJdmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9HUkFESUVOVE1BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBncmFkaWVudE1hcDtcbiNlbmRpZlxudmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xuXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xuXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xuXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXG5cdFx0cmV0dXJuIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkucmdiO1xuXHQjZWxzZVxuXHRcdHJldHVybiAoIGNvb3JkLnggPCAwLjcgKSA/IHZlYzMoIDAuNyApIDogdmVjMyggMS4wICk7XG5cdCNlbmRpZlxufSI7CgoJdmFyIGxpZ2h0bWFwX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfTElHSFRNQVBcblx0dmVjNCBsaWdodE1hcFRleGVsPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICk7XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBQSSAqIGxpZ2h0TWFwVGV4ZWxUb0xpbmVhciggbGlnaHRNYXBUZXhlbCApLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xuI2VuZGlmIjsKCgl2YXIgbGlnaHRtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX0xJR0hUTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGxpZ2h0TWFwO1xuXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xuI2VuZGlmIjsKCgl2YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gInZlYzMgZGlmZnVzZSA9IHZlYzMoIDEuMCApO1xuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XG5nZW9tZXRyeS5ub3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XG5nZW9tZXRyeS52aWV3RGlyID0gKCBpc09ydGhvZ3JhcGhpYyApID8gdmVjMyggMCwgMCwgMSApIDogbm9ybWFsaXplKCAtbXZQb3NpdGlvbi54eXogKTtcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xuYmFja0dlb21ldHJ5LnBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XG5iYWNrR2VvbWV0cnkubm9ybWFsID0gLWdlb21ldHJ5Lm5vcm1hbDtcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcbnZMaWdodEZyb250ID0gdmVjMyggMC4wICk7XG52SW5kaXJlY3RGcm9udCA9IHZlYzMoIDAuMCApO1xuI2lmZGVmIERPVUJMRV9TSURFRFxuXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XG5cdHZJbmRpcmVjdEJhY2sgPSB2ZWMzKCAwLjAgKTtcbiNlbmRpZlxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcbmZsb2F0IGRvdE5MO1xudmVjMyBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xuXHRcdGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBwb2ludExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcblx0XHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcblx0XHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xuXHRcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xuXHRcdCNpZmRlZiBET1VCTEVfU0lERURcblx0XHRcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xuXHRcdCNlbmRpZlxuXHR9XG4jZW5kaWZcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xuXHRcdGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIHNwb3RMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XG5cdFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XG5cdFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcblx0XHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcblx0XHQjaWZkZWYgRE9VQkxFX1NJREVEXG5cdFx0XHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcblx0XHQjZW5kaWZcblx0fVxuI2VuZGlmXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXG5cdCNwcmFnbWEgdW5yb2xsX2xvb3Bcblx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XG5cdFx0Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xuXHRcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xuXHRcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XG5cdFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XG5cdFx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XG5cdFx0I2VuZGlmXG5cdH1cbiNlbmRpZlxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XG5cdFx0dkluZGlyZWN0RnJvbnQgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBnZW9tZXRyeSApO1xuXHRcdCNpZmRlZiBET1VCTEVfU0lERURcblx0XHRcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkgKTtcblx0XHQjZW5kaWZcblx0fVxuI2VuZGlmIjsKCgl2YXIgbGlnaHRzX3BhcnNfYmVnaW4gPSAidW5pZm9ybSBib29sIHJlY2VpdmVTaGFkb3c7XG51bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XG51bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xudmVjMyBzaEdldElycmFkaWFuY2VBdCggaW4gdmVjMyBub3JtYWwsIGluIHZlYzMgc2hDb2VmZmljaWVudHNbIDkgXSApIHtcblx0ZmxvYXQgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblx0dmVjMyByZXN1bHQgPSBzaENvZWZmaWNpZW50c1sgMCBdICogMC44ODYyMjc7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMSBdICogMi4wICogMC41MTE2NjQgKiB5O1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDIgXSAqIDIuMCAqIDAuNTExNjY0ICogejtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyAzIF0gKiAyLjAgKiAwLjUxMTY2NCAqIHg7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNCBdICogMi4wICogMC40MjkwNDMgKiB4ICogeTtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA1IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6O1xuXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDYgXSAqICggMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7XG5cdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNyBdICogMi4wICogMC40MjkwNDMgKiB4ICogejtcblx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA4IF0gKiAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxudmVjMyBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBsaWdodFByb2JlWyA5IF0sIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnkgKSB7XG5cdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcblx0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBsaWdodFByb2JlICk7XG5cdHJldHVybiBpcnJhZGlhbmNlO1xufVxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xuXHR2ZWMzIGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcblx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXG5cdFx0aXJyYWRpYW5jZSAqPSBQSTtcblx0I2VuZGlmXG5cdHJldHVybiBpcnJhZGlhbmNlO1xufVxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxuXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XG5cdFx0dmVjMyBkaXJlY3Rpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0XHRpbnQgc2hhZG93O1xuXHRcdGZsb2F0IHNoYWRvd0JpYXM7XG5cdFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xuXHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0fTtcblx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xuXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xuXHRcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcblx0XHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcblx0XHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcblx0fVxuI2VuZGlmXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcblx0c3RydWN0IFBvaW50TGlnaHQge1xuXHRcdHZlYzMgcG9zaXRpb247XG5cdFx0dmVjMyBjb2xvcjtcblx0XHRmbG9hdCBkaXN0YW5jZTtcblx0XHRmbG9hdCBkZWNheTtcblx0XHRpbnQgc2hhZG93O1xuXHRcdGZsb2F0IHNoYWRvd0JpYXM7XG5cdFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xuXHRcdHZlYzIgc2hhZG93TWFwU2l6ZTtcblx0XHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xuXHRcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcblx0fTtcblx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XG5cdHZvaWQgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XG5cdFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xuXHRcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xuXHRcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcblx0XHRkaXJlY3RMaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XG5cdFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xuXHRcdGRpcmVjdExpZ2h0LnZpc2libGUgPSAoIGRpcmVjdExpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XG5cdH1cbiNlbmRpZlxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcblx0c3RydWN0IFNwb3RMaWdodCB7XG5cdFx0dmVjMyBwb3NpdGlvbjtcblx0XHR2ZWMzIGRpcmVjdGlvbjtcblx0XHR2ZWMzIGNvbG9yO1xuXHRcdGZsb2F0IGRpc3RhbmNlO1xuXHRcdGZsb2F0IGRlY2F5O1xuXHRcdGZsb2F0IGNvbmVDb3M7XG5cdFx0ZmxvYXQgcGVudW1icmFDb3M7XG5cdFx0aW50IHNoYWRvdztcblx0XHRmbG9hdCBzaGFkb3dCaWFzO1xuXHRcdGZsb2F0IHNoYWRvd1JhZGl1cztcblx0XHR2ZWMyIHNoYWRvd01hcFNpemU7XG5cdH07XG5cdHVuaWZvcm0gU3BvdExpZ2h0IHNwb3RMaWdodHNbIE5VTV9TUE9UX0xJR0hUUyBdO1xuXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcblx0XHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcblx0XHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcblx0XHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XG5cdFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xuXHRcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcblx0XHRcdGZsb2F0IHNwb3RFZmZlY3QgPSBzbW9vdGhzdGVwKCBzcG90TGlnaHQuY29uZUNvcywgc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBhbmdsZUNvcyApO1xuXHRcdFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBzcG90TGlnaHQuY29sb3I7XG5cdFx0XHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcblx0XHRcdGRpcmVjdExpZ2h0LnZpc2libGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXJlY3RMaWdodC5jb2xvciA9IHZlYzMoIDAuMCApO1xuXHRcdFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuI2VuZGlmXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXG5cdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcblx0XHR2ZWMzIGNvbG9yO1xuXHRcdHZlYzMgcG9zaXRpb247XG5cdFx0dmVjMyBoYWxmV2lkdGg7XG5cdFx0dmVjMyBoYWxmSGVpZ2h0O1xuXHR9O1xuXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMTtcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18yO1xuXHR1bmlmb3JtIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodHNbIE5VTV9SRUNUX0FSRUFfTElHSFRTIF07XG4jZW5kaWZcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXG5cdHN0cnVjdCBIZW1pc3BoZXJlTGlnaHQge1xuXHRcdHZlYzMgZGlyZWN0aW9uO1xuXHRcdHZlYzMgc2t5Q29sb3I7XG5cdFx0dmVjMyBncm91bmRDb2xvcjtcblx0fTtcblx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XG5cdHZlYzMgZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gSGVtaXNwaGVyZUxpZ2h0IGhlbWlMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSApIHtcblx0XHRmbG9hdCBkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoZW1pTGlnaHQuZGlyZWN0aW9uICk7XG5cdFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3ROTCArIDAuNTtcblx0XHR2ZWMzIGlycmFkaWFuY2UgPSBtaXgoIGhlbWlMaWdodC5ncm91bmRDb2xvciwgaGVtaUxpZ2h0LnNreUNvbG9yLCBoZW1pRGlmZnVzZVdlaWdodCApO1xuXHRcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xuXHRcdFx0aXJyYWRpYW5jZSAqPSBQSTtcblx0XHQjZW5kaWZcblx0XHRyZXR1cm4gaXJyYWRpYW5jZTtcblx0fVxuI2VuZGlmIjsKCgl2YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSAiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKVxuXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGUkFDVElPTlxuXHRcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xuXHQjZW5kaWZcblx0dmVjMyBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XG5cdFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGdlb21ldHJ5Lm5vcm1hbCwgdmlld01hdHJpeCApO1xuXHRcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXG5cdFx0XHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XG5cdFx0XHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXG5cdFx0XHRcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcblx0XHRcdCNlbHNlXG5cdFx0XHRcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XG5cdFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXG5cdFx0XHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XG5cdFx0XHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVZlYywgMS4wICk7XG5cdFx0I2Vsc2Vcblx0XHRcdHZlYzQgZW52TWFwQ29sb3IgPSB2ZWM0KCAwLjAgKTtcblx0XHQjZW5kaWZcblx0XHRyZXR1cm4gUEkgKiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XG5cdH1cblx0ZmxvYXQgZ2V0U3BlY3VsYXJNSVBMZXZlbCggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XG5cdFx0ZmxvYXQgbWF4TUlQTGV2ZWxTY2FsYXIgPSBmbG9hdCggbWF4TUlQTGV2ZWwgKTtcblx0XHRmbG9hdCBzaWdtYSA9IFBJICogcm91Z2huZXNzICogcm91Z2huZXNzIC8gKCAxLjAgKyByb3VnaG5lc3MgKTtcblx0XHRmbG9hdCBkZXNpcmVkTUlQTGV2ZWwgPSBtYXhNSVBMZXZlbFNjYWxhciArIGxvZzIoIHNpZ21hICk7XG5cdFx0cmV0dXJuIGNsYW1wKCBkZXNpcmVkTUlQTGV2ZWwsIDAuMCwgbWF4TUlQTGV2ZWxTY2FsYXIgKTtcblx0fVxuXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcblx0XHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxuXHRcdCAgdmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggLXZpZXdEaXIsIG5vcm1hbCApO1xuXHRcdCAgcmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggbWl4KCByZWZsZWN0VmVjLCBub3JtYWwsIHJvdWdobmVzcyAqIHJvdWdobmVzcykgKTtcblx0XHQjZWxzZVxuXHRcdCAgdmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggLXZpZXdEaXIsIG5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XG5cdFx0I2VuZGlmXG5cdFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcblx0XHRmbG9hdCBzcGVjdWxhck1JUExldmVsID0gZ2V0U3BlY3VsYXJNSVBMZXZlbCggcm91Z2huZXNzLCBtYXhNSVBMZXZlbCApO1xuXHRcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXG5cdFx0XHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcblx0XHRcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcblx0XHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xuXHRcdFx0I2Vsc2Vcblx0XHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xuXHRcdFx0I2VuZGlmXG5cdFx0XHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcblx0XHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcblx0XHRcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xuXHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgcXVlcnlSZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcblx0XHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcblx0XHRcdHZlYzIgc2FtcGxlVVY7XG5cdFx0XHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIHJlZmxlY3RWZWMueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xuXHRcdFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcblx0XHRcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcblx0XHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xuXHRcdFx0I2Vsc2Vcblx0XHRcdFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xuXHRcdFx0I2VuZGlmXG5cdFx0XHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcblx0XHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxuXHRcdFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsMC4wLDEuMCApICk7XG5cdFx0XHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXG5cdFx0XHRcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkRMb2RFWFQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcblx0XHRcdCNlbHNlXG5cdFx0XHRcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XG5cdFx0I2VuZGlmXG5cdFx0cmV0dXJuIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcblx0fVxuI2VuZGlmIjsKCgl2YXIgbGlnaHRzX3Rvb25fZnJhZ21lbnQgPSAiVG9vbk1hdGVyaWFsIG1hdGVyaWFsO1xubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcbm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhcjtcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7IjsKCgl2YXIgbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCA9ICJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG4jZW5kaWZcbnN0cnVjdCBUb29uTWF0ZXJpYWwge1xuXHR2ZWMzXHRkaWZmdXNlQ29sb3I7XG5cdHZlYzNcdHNwZWN1bGFyQ29sb3I7XG5cdGZsb2F0XHRzcGVjdWxhclNoaW5pbmVzcztcblx0ZmxvYXRcdHNwZWN1bGFyU3RyZW5ndGg7XG59O1xudm9pZCBSRV9EaXJlY3RfVG9vbiggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICogZGlyZWN0TGlnaHQuY29sb3I7XG5cdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xuXHRcdGlycmFkaWFuY2UgKj0gUEk7XG5cdCNlbmRpZlxuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XG5cdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XG59XG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9Ub29uKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFRvb25NYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xufVxuI2RlZmluZSBSRV9EaXJlY3RcdFx0XHRcdFJFX0RpcmVjdF9Ub29uXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVx0XHRSRV9JbmRpcmVjdERpZmZ1c2VfVG9vblxuI2RlZmluZSBNYXRlcmlhbF9MaWdodFByb2JlTE9EKCBtYXRlcmlhbCApXHQoMCkiOwoKCXZhciBsaWdodHNfcGhvbmdfZnJhZ21lbnQgPSAiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcbm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhcjtcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7IjsKCgl2YXIgbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQgPSAidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuI2VuZGlmXG5zdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcblx0dmVjM1x0ZGlmZnVzZUNvbG9yO1xuXHR2ZWMzXHRzcGVjdWxhckNvbG9yO1xuXHRmbG9hdFx0c3BlY3VsYXJTaGluaW5lc3M7XG5cdGZsb2F0XHRzcGVjdWxhclN0cmVuZ3RoO1xufTtcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XG5cdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xuXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xuXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcblx0XHRpcnJhZGlhbmNlICo9IFBJO1xuXHQjZW5kaWZcblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xuXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzICkgKiBtYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoO1xufVxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbn1cbiNkZWZpbmUgUkVfRGlyZWN0XHRcdFx0XHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcdFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmdcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVx0KDApIjsKCgl2YXIgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50ID0gIlBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7XG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcbnZlYzMgZHh5ID0gbWF4KCBhYnMoIGRGZHgoIGdlb21ldHJ5Tm9ybWFsICkgKSwgYWJzKCBkRmR5KCBnZW9tZXRyeU5vcm1hbCApICkgKTtcbmZsb2F0IGdlb21ldHJ5Um91Z2huZXNzID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApO1xubWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtYXgoIHJvdWdobmVzc0ZhY3RvciwgMC4wNTI1ICk7bWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XG5tYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MsIDEuMCApO1xuI2lmZGVmIFJFRkxFQ1RJVklUWVxuXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UICogcG93MiggcmVmbGVjdGl2aXR5ICkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XG4jZWxzZVxuXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xuI2VuZGlmXG4jaWZkZWYgQ0xFQVJDT0FUXG5cdG1hdGVyaWFsLmNsZWFyY29hdCA9IHNhdHVyYXRlKCBjbGVhcmNvYXQgKTtcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1heCggY2xlYXJjb2F0Um91Z2huZXNzLCAwLjA1MjUgKTtcblx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xuXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgMS4wICk7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hFRU5cblx0bWF0ZXJpYWwuc2hlZW5Db2xvciA9IHNoZWVuO1xuI2VuZGlmIjsKCgl2YXIgbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSAic3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xuXHR2ZWMzXHRkaWZmdXNlQ29sb3I7XG5cdGZsb2F0XHRzcGVjdWxhclJvdWdobmVzcztcblx0dmVjM1x0c3BlY3VsYXJDb2xvcjtcbiNpZmRlZiBDTEVBUkNPQVRcblx0ZmxvYXQgY2xlYXJjb2F0O1xuXHRmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XG4jZW5kaWZcbiNpZmRlZiBVU0VfU0hFRU5cblx0dmVjMyBzaGVlbkNvbG9yO1xuI2VuZGlmXG59O1xuI2RlZmluZSBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMTZcbiNkZWZpbmUgREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjA0XG5mbG9hdCBjbGVhcmNvYXRESFJBcHByb3goIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkwgKSB7XG5cdHJldHVybiBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICsgKCAxLjAgLSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICkgKiAoIHBvdyggMS4wIC0gZG90TkwsIDUuMCApICogcG93KCAxLjAgLSByb3VnaG5lc3MsIDIuMCApICk7XG59XG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXG5cdHZvaWQgUkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsKCBjb25zdCBpbiBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXHRcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnkubm9ybWFsO1xuXHRcdHZlYzMgdmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XG5cdFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xuXHRcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xuXHRcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XG5cdFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xuXHRcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XG5cdFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3M7XG5cdFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XG5cdFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1x0XHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XG5cdFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xuXHRcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcblx0XHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xuXHRcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xuXHRcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xuXHRcdG1hdDMgbUludiA9IG1hdDMoXG5cdFx0XHR2ZWMzKCB0MS54LCAwLCB0MS55ICksXG5cdFx0XHR2ZWMzKCAgICAwLCAxLCAgICAwICksXG5cdFx0XHR2ZWMzKCB0MS56LCAwLCB0MS53IClcblx0XHQpO1xuXHRcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xuXHR9XG4jZW5kaWZcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcblx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XG5cdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XG5cdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xuXHRcdGlycmFkaWFuY2UgKj0gUEk7XG5cdCNlbmRpZlxuXHQjaWZkZWYgQ0xFQVJDT0FUXG5cdFx0ZmxvYXQgY2NEb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcblx0XHR2ZWMzIGNjSXJyYWRpYW5jZSA9IGNjRG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcblx0XHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcblx0XHRcdGNjSXJyYWRpYW5jZSAqPSBQSTtcblx0XHQjZW5kaWZcblx0XHRmbG9hdCBjbGVhcmNvYXRESFIgPSBtYXRlcmlhbC5jbGVhcmNvYXQgKiBjbGVhcmNvYXRESFJBcHByb3goIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgY2NEb3ROTCApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGNjSXJyYWRpYW5jZSAqIG1hdGVyaWFsLmNsZWFyY29hdCAqIEJSREZfU3BlY3VsYXJfR0dYKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xuXHQjZWxzZVxuXHRcdGZsb2F0IGNsZWFyY29hdERIUiA9IDAuMDtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfU0hFRU5cblx0XHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSAoIDEuMCAtIGNsZWFyY29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfU2hlZW4oXG5cdFx0XHRtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyxcblx0XHRcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbixcblx0XHRcdGdlb21ldHJ5LFxuXHRcdFx0bWF0ZXJpYWwuc2hlZW5Db2xvclxuXHRcdCk7XG5cdCNlbHNlXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhcmNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MpO1xuXHQjZW5kaWZcblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSAoIDEuMCAtIGNsZWFyY29hdERIUiApICogaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbn1cbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcbn1cbnZvaWQgUkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyByYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGNsZWFyY29hdFJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCkge1xuXHQjaWZkZWYgQ0xFQVJDT0FUXG5cdFx0ZmxvYXQgY2NEb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBjbGVhcmNvYXRSYWRpYW5jZSAqIG1hdGVyaWFsLmNsZWFyY29hdCAqIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICk7XG5cdFx0ZmxvYXQgY2NEb3ROTCA9IGNjRG90TlY7XG5cdFx0ZmxvYXQgY2xlYXJjb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogY2xlYXJjb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIGNjRG90TkwgKTtcblx0I2Vsc2Vcblx0XHRmbG9hdCBjbGVhcmNvYXRESFIgPSAwLjA7XG5cdCNlbmRpZlxuXHRmbG9hdCBjbGVhcmNvYXRJbnYgPSAxLjAgLSBjbGVhcmNvYXRESFI7XG5cdHZlYzMgc2luZ2xlU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIG11bHRpU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xuXHR2ZWMzIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZSA9IGlycmFkaWFuY2UgKiBSRUNJUFJPQ0FMX1BJO1xuXHRCUkRGX1NwZWN1bGFyX011bHRpc2NhdHRlcmluZ19FbnZpcm9ubWVudCggZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCBzaW5nbGVTY2F0dGVyaW5nLCBtdWx0aVNjYXR0ZXJpbmcgKTtcblx0dmVjMyBkaWZmdXNlID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSAoIHNpbmdsZVNjYXR0ZXJpbmcgKyBtdWx0aVNjYXR0ZXJpbmcgKSApO1xuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IGNsZWFyY29hdEludiAqIHJhZGlhbmNlICogc2luZ2xlU2NhdHRlcmluZztcblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBkaWZmdXNlICogY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlO1xufVxuI2RlZmluZSBSRV9EaXJlY3RcdFx0XHRcdFJFX0RpcmVjdF9QaHlzaWNhbFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcdFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVx0XHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclx0XHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XG5cdHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XG59IjsKCgl2YXIgbGlnaHRzX2ZyYWdtZW50X2JlZ2luID0gIlxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcbmdlb21ldHJ5LnBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsO1xuZ2VvbWV0cnkudmlld0RpciA9ICggaXNPcnRob2dyYXBoaWMgKSA/IHZlYzMoIDAsIDAsIDEgKSA6IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xuI2lmZGVmIENMRUFSQ09BVFxuXHRnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwgPSBjbGVhcmNvYXROb3JtYWw7XG4jZW5kaWZcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXG5cdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xuXHRcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xuXHRcdGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBwb2ludExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIClcblx0XHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMzKCBwb2ludExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XG5cdFx0I2VuZGlmXG5cdFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuXHR9XG4jZW5kaWZcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxuXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xuXHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcblx0XHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XG5cdFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcblx0XHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxuXHRcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzMoIHNwb3RMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUsIHJlY2VpdmVTaGFkb3cgKSApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XG5cdFx0I2VuZGlmXG5cdFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuXHR9XG4jZW5kaWZcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXG5cdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcblx0XHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcblx0XHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XG5cdFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fRElSX0xJR0hUX1NIQURPV1MgKVxuXHRcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzMoIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XG5cdFx0I2VuZGlmXG5cdFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xuXHR9XG4jZW5kaWZcbiNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXG5cdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUkVDVF9BUkVBX0xJR0hUUzsgaSArKyApIHtcblx0XHRyZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcblx0XHRSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcblx0fVxuI2VuZGlmXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcblx0dmVjMyBpYmxJcnJhZGlhbmNlID0gdmVjMyggMC4wICk7XG5cdHZlYzMgaXJyYWRpYW5jZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XG5cdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5ICk7XG5cdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxuXHRcdCNwcmFnbWEgdW5yb2xsX2xvb3Bcblx0XHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XG5cdFx0XHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcblx0XHR9XG5cdCNlbmRpZlxuI2VuZGlmXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXG5cdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcblx0dmVjMyBjbGVhcmNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xuI2VuZGlmIjsKCgl2YXIgbGlnaHRzX2ZyYWdtZW50X21hcHMgPSAiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXG5cdCNpZmRlZiBVU0VfTElHSFRNQVBcblx0XHR2ZWM0IGxpZ2h0TWFwVGV4ZWw9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKTtcblx0XHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IGxpZ2h0TWFwVGV4ZWxUb0xpbmVhciggbGlnaHRNYXBUZXhlbCApLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xuXHRcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xuXHRcdFx0bGlnaHRNYXBJcnJhZGlhbmNlICo9IFBJO1xuXHRcdCNlbmRpZlxuXHRcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xuXHQjZW5kaWZcblx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxuXHRcdGlibElycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggZ2VvbWV0cnksIG1heE1pcExldmVsICk7XG5cdCNlbmRpZlxuI2VuZGlmXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxuXHRyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcywgbWF4TWlwTGV2ZWwgKTtcblx0I2lmZGVmIENMRUFSQ09BVFxuXHRcdGNsZWFyY29hdFJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgbWF4TWlwTGV2ZWwgKTtcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBsaWdodHNfZnJhZ21lbnRfZW5kID0gIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxuXHRSRV9JbmRpcmVjdERpZmZ1c2UoIGlycmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcbiNlbmRpZlxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxuXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgaWJsSXJyYWRpYW5jZSwgY2xlYXJjb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcbiNlbmRpZiI7CgoJdmFyIGxvZ2RlcHRoYnVmX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKSAmJiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUZfRVhUIClcblx0Z2xfRnJhZ0RlcHRoRVhUID0gdklzUGVyc3BlY3RpdmUgPT0gMC4wID8gZ2xfRnJhZ0Nvb3JkLnogOiBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1xuI2VuZGlmIjsKCgl2YXIgbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCA9ICIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXG5cdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcblx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xuXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xuI2VuZGlmIjsKCgl2YXIgbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxuXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxuXHRcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcblx0XHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xuXHQjZWxzZVxuXHRcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBsb2dkZXB0aGJ1Zl92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxuXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxuXHRcdHZGcmFnRGVwdGggPSAxLjAgKyBnbF9Qb3NpdGlvbi53O1xuXHRcdHZJc1BlcnNwZWN0aXZlID0gZmxvYXQoIGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSApO1xuXHQjZWxzZVxuXHRcdGlmICggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICkge1xuXHRcdFx0Z2xfUG9zaXRpb24ueiA9IGxvZzIoIG1heCggRVBTSUxPTiwgZ2xfUG9zaXRpb24udyArIDEuMCApICkgKiBsb2dEZXB0aEJ1ZkZDIC0gMS4wO1xuXHRcdFx0Z2xfUG9zaXRpb24ueiAqPSBnbF9Qb3NpdGlvbi53O1xuXHRcdH1cblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBtYXBfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9NQVBcblx0dmVjNCB0ZXhlbENvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVdiApO1xuXHR0ZXhlbENvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4ZWxDb2xvciApO1xuXHRkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcbiNlbmRpZiI7CgoJdmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcbiNlbmRpZiI7CgoJdmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9ICIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApXG5cdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xuI2VuZGlmXG4jaWZkZWYgVVNFX01BUFxuXHR2ZWM0IG1hcFRleGVsID0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XG5cdGRpZmZ1c2VDb2xvciAqPSBtYXBUZXhlbFRvTGluZWFyKCBtYXBUZXhlbCApO1xuI2VuZGlmXG4jaWZkZWYgVVNFX0FMUEhBTUFQXG5cdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHV2ICkuZztcbiNlbmRpZiI7CgoJdmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcblx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xuI2VuZGlmXG4jaWZkZWYgVVNFX01BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XG4jZW5kaWZcbiNpZmRlZiBVU0VfQUxQSEFNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XG4jZW5kaWYiOwoKCXZhciBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgPSAiZmxvYXQgbWV0YWxuZXNzRmFjdG9yID0gbWV0YWxuZXNzO1xuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcblx0dmVjNCB0ZXhlbE1ldGFsbmVzcyA9IHRleHR1cmUyRCggbWV0YWxuZXNzTWFwLCB2VXYgKTtcblx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XG4jZW5kaWYiOwoKCXZhciBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX01FVEFMTkVTU01BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCBtZXRhbG5lc3NNYXA7XG4jZW5kaWYiOwoKCXZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcblx0b2JqZWN0Tm9ybWFsICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcblx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMCAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xuXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwxICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XG5cdG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDIgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcblx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMyAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xuI2VuZGlmIjsKCgl2YXIgbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXggPSAiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcblx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XG5cdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xuXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xuXHQjZWxzZVxuXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xuXHQjZW5kaWZcbiNlbmRpZiI7CgoJdmFyIG1vcnBodGFyZ2V0X3ZlcnRleCA9ICIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xuXHR0cmFuc2Zvcm1lZCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XG5cdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MCAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xuXHR0cmFuc2Zvcm1lZCArPSBtb3JwaFRhcmdldDEgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcblx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQyICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XG5cdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MyAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xuXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcblx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ0ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XG5cdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0NSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xuXHR0cmFuc2Zvcm1lZCArPSBtb3JwaFRhcmdldDYgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcblx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ3ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XG5cdCNlbmRpZlxuI2VuZGlmIjsKCgl2YXIgbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gIiNpZmRlZiBGTEFUX1NIQURFRFxuXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcblx0dmVjMyBmZHkgPSB2ZWMzKCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnggKSwgZEZkeSggdlZpZXdQb3NpdGlvbi55ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueiApICk7XG5cdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xuI2Vsc2Vcblx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHZOb3JtYWwgKTtcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcblx0I2VuZGlmXG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdHZlYzMgdGFuZ2VudCA9IG5vcm1hbGl6ZSggdlRhbmdlbnQgKTtcblx0XHR2ZWMzIGJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggdkJpdGFuZ2VudCApO1xuXHRcdCNpZmRlZiBET1VCTEVfU0lERURcblx0XHRcdHRhbmdlbnQgPSB0YW5nZW50ICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xuXHRcdFx0Yml0YW5nZW50ID0gYml0YW5nZW50ICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xuXHRcdCNlbmRpZlxuXHRcdCNpZiBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKVxuXHRcdFx0bWF0MyB2VEJOID0gbWF0MyggdGFuZ2VudCwgYml0YW5nZW50LCBub3JtYWwgKTtcblx0XHQjZW5kaWZcblx0I2VuZGlmXG4jZW5kaWZcbnZlYzMgZ2VvbWV0cnlOb3JtYWwgPSBub3JtYWw7IjsKCgl2YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSAiI2lmZGVmIE9CSkVDVFNQQUNFX05PUk1BTE1BUFxuXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xuXHQjaWZkZWYgRkxJUF9TSURFRFxuXHRcdG5vcm1hbCA9IC0gbm9ybWFsO1xuXHQjZW5kaWZcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcblx0I2VuZGlmXG5cdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XG4jZWxpZiBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcblx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcblx0bWFwTi54eSAqPSBub3JtYWxTY2FsZTtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0bm9ybWFsID0gbm9ybWFsaXplKCB2VEJOICogbWFwTiApO1xuXHQjZWxzZVxuXHRcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBtYXBOICk7XG5cdCNlbmRpZlxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxuXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xuI2VuZGlmIjsKCgl2YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9OT1JNQUxNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xuXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XG4jZW5kaWZcbiNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcblx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcbiNlbmRpZlxuI2lmICEgZGVmaW5lZCAoIFVTRV9UQU5HRU5UICkgJiYgKCBkZWZpbmVkICggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQgKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIClcblx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMyBtYXBOICkge1xuXHRcdHZlYzMgcTAgPSB2ZWMzKCBkRmR4KCBleWVfcG9zLnggKSwgZEZkeCggZXllX3Bvcy55ICksIGRGZHgoIGV5ZV9wb3MueiApICk7XG5cdFx0dmVjMyBxMSA9IHZlYzMoIGRGZHkoIGV5ZV9wb3MueCApLCBkRmR5KCBleWVfcG9zLnkgKSwgZEZkeSggZXllX3Bvcy56ICkgKTtcblx0XHR2ZWMyIHN0MCA9IGRGZHgoIHZVdi5zdCApO1xuXHRcdHZlYzIgc3QxID0gZEZkeSggdlV2LnN0ICk7XG5cdFx0ZmxvYXQgc2NhbGUgPSBzaWduKCBzdDEudCAqIHN0MC5zIC0gc3QwLnQgKiBzdDEucyApO1xuXHRcdHZlYzMgUyA9IG5vcm1hbGl6ZSggKCBxMCAqIHN0MS50IC0gcTEgKiBzdDAudCApICogc2NhbGUgKTtcblx0XHR2ZWMzIFQgPSBub3JtYWxpemUoICggLSBxMCAqIHN0MS5zICsgcTEgKiBzdDAucyApICogc2NhbGUgKTtcblx0XHR2ZWMzIE4gPSBub3JtYWxpemUoIHN1cmZfbm9ybSApO1xuXHRcdG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1xuXHRcdG1hcE4ueHkgKj0gKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xuXHRcdHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcblx0fVxuI2VuZGlmIjsKCgl2YXIgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiA9ICIjaWZkZWYgQ0xFQVJDT0FUXG5cdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gZ2VvbWV0cnlOb3JtYWw7XG4jZW5kaWYiOwoKCXZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMgPSAiI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cdHZlYzMgY2xlYXJjb2F0TWFwTiA9IHRleHR1cmUyRCggY2xlYXJjb2F0Tm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XG5cdGNsZWFyY29hdE1hcE4ueHkgKj0gY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdGNsZWFyY29hdE5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIGNsZWFyY29hdE1hcE4gKTtcblx0I2Vsc2Vcblx0XHRjbGVhcmNvYXROb3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLSB2Vmlld1Bvc2l0aW9uLCBjbGVhcmNvYXROb3JtYWwsIGNsZWFyY29hdE1hcE4gKTtcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBjbGVhcmNvYXRfbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSAiI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXG5cdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdE5vcm1hbE1hcDtcblx0dW5pZm9ybSB2ZWMyIGNsZWFyY29hdE5vcm1hbFNjYWxlO1xuI2VuZGlmIjsKCgl2YXIgcGFja2luZyA9ICJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XG5cdHJldHVybiBub3JtYWxpemUoIG5vcm1hbCApICogMC41ICsgMC41O1xufVxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XG5cdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xufVxuY29uc3QgZmxvYXQgUGFja1Vwc2NhbGUgPSAyNTYuIC8gMjU1Ljtjb25zdCBmbG9hdCBVbnBhY2tEb3duc2NhbGUgPSAyNTUuIC8gMjU2LjtcbmNvbnN0IHZlYzMgUGFja0ZhY3RvcnMgPSB2ZWMzKCAyNTYuICogMjU2LiAqIDI1Ni4sIDI1Ni4gKiAyNTYuLCAgMjU2LiApO1xuY29uc3QgdmVjNCBVbnBhY2tGYWN0b3JzID0gVW5wYWNrRG93bnNjYWxlIC8gdmVjNCggUGFja0ZhY3RvcnMsIDEuICk7XG5jb25zdCBmbG9hdCBTaGlmdFJpZ2h0OCA9IDEuIC8gMjU2LjtcbnZlYzQgcGFja0RlcHRoVG9SR0JBKCBjb25zdCBpbiBmbG9hdCB2ICkge1xuXHR2ZWM0IHIgPSB2ZWM0KCBmcmFjdCggdiAqIFBhY2tGYWN0b3JzICksIHYgKTtcblx0ci55encgLT0gci54eXogKiBTaGlmdFJpZ2h0ODtcdHJldHVybiByICogUGFja1Vwc2NhbGU7XG59XG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xuXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzICk7XG59XG52ZWM0IHBhY2sySGFsZlRvUkdCQSggdmVjMiB2ICkge1xuXHR2ZWM0IHIgPSB2ZWM0KCB2LngsIGZyYWN0KCB2LnggKiAyNTUuMCApLCB2LnksIGZyYWN0KCB2LnkgKiAyNTUuMCApKTtcblx0cmV0dXJuIHZlYzQoIHIueCAtIHIueSAvIDI1NS4wLCByLnksIHIueiAtIHIudyAvIDI1NS4wLCByLncpO1xufVxudmVjMiB1bnBhY2sySGFsZlRvUkdCQSggdmVjNCB2ICkge1xuXHRyZXR1cm4gdmVjMiggdi54ICsgKCB2LnkgLyAyNTUuMCApLCB2LnogKyAoIHYudyAvIDI1NS4wICkgKTtcbn1cbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcblx0cmV0dXJuICggdmlld1ogKyBuZWFyICkgLyAoIG5lYXIgLSBmYXIgKTtcbn1cbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgbGluZWFyQ2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcblx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xufVxuZmxvYXQgdmlld1pUb1BlcnNwZWN0aXZlRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XG5cdHJldHVybiAoKCBuZWFyICsgdmlld1ogKSAqIGZhciApIC8gKCggZmFyIC0gbmVhciApICogdmlld1ogKTtcbn1cbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBpbnZDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xuXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogaW52Q2xpcFogLSBmYXIgKTtcbn0iOwoKCXZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gIiNpZmRlZiBQUkVNVUxUSVBMSUVEX0FMUEhBXG5cdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XG4jZW5kaWYiOwoKCXZhciBwcm9qZWN0X3ZlcnRleCA9ICJ2ZWM0IG12UG9zaXRpb24gPSB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcblx0bXZQb3NpdGlvbiA9IGluc3RhbmNlTWF0cml4ICogbXZQb3NpdGlvbjtcbiNlbmRpZlxubXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIG12UG9zaXRpb247XG5nbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uOyI7CgoJdmFyIGRpdGhlcmluZ19mcmFnbWVudCA9ICIjaWZkZWYgRElUSEVSSU5HXG5cdGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcbiNlbmRpZiI7CgoJdmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBESVRIRVJJTkdcblx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XG5cdFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xuXHRcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XG5cdFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcblx0XHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xuXHR9XG4jZW5kaWYiOwoKCXZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSAiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcblx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2VXYgKTtcblx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XG4jZW5kaWYiOwoKCXZhciByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxuXHR1bmlmb3JtIHNhbXBsZXIyRCByb3VnaG5lc3NNYXA7XG4jZW5kaWYiOwoKCXZhciBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCA9ICIjaWZkZWYgVVNFX1NIQURPV01BUFxuXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHQjZW5kaWZcblx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xuXHRcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgcG9pbnRTaGFkb3dNYXBbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cdFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xuXHQjZW5kaWZcblx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcblx0XHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcblx0fVxuXHR2ZWMyIHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diApIHtcblx0XHRyZXR1cm4gdW5wYWNrMkhhbGZUb1JHQkEoIHRleHR1cmUyRCggc2hhZG93LCB1diApICk7XG5cdH1cblx0ZmxvYXQgVlNNU2hhZG93IChzYW1wbGVyMkQgc2hhZG93LCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICl7XG5cdFx0ZmxvYXQgb2NjbHVzaW9uID0gMS4wO1xuXHRcdHZlYzIgZGlzdHJpYnV0aW9uID0gdGV4dHVyZTJERGlzdHJpYnV0aW9uKCBzaGFkb3csIHV2ICk7XG5cdFx0ZmxvYXQgaGFyZF9zaGFkb3cgPSBzdGVwKCBjb21wYXJlICwgZGlzdHJpYnV0aW9uLnggKTtcblx0XHRpZiAoaGFyZF9zaGFkb3cgIT0gMS4wICkge1xuXHRcdFx0ZmxvYXQgZGlzdGFuY2UgPSBjb21wYXJlIC0gZGlzdHJpYnV0aW9uLnggO1xuXHRcdFx0ZmxvYXQgdmFyaWFuY2UgPSBtYXgoIDAuMDAwMDAsIGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKTtcblx0XHRcdGZsb2F0IHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gdmFyaWFuY2UgLyAodmFyaWFuY2UgKyBkaXN0YW5jZSAqIGRpc3RhbmNlICk7XHRcdFx0c29mdG5lc3NfcHJvYmFiaWxpdHkgPSBjbGFtcCggKCBzb2Z0bmVzc19wcm9iYWJpbGl0eSAtIDAuMyApIC8gKCAwLjk1IC0gMC4zICksIDAuMCwgMS4wICk7XHRcdFx0b2NjbHVzaW9uID0gY2xhbXAoIG1heCggaGFyZF9zaGFkb3csIHNvZnRuZXNzX3Byb2JhYmlsaXR5ICksIDAuMCwgMS4wICk7XG5cdFx0fVxuXHRcdHJldHVybiBvY2NsdXNpb247XG5cdH1cblx0ZmxvYXQgdGV4dHVyZTJEU2hhZG93TGVycCggc2FtcGxlcjJEIGRlcHRocywgdmVjMiBzaXplLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xuXHRcdGNvbnN0IHZlYzIgb2Zmc2V0ID0gdmVjMiggMC4wLCAxLjAgKTtcblx0XHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2l6ZTtcblx0XHR2ZWMyIGNlbnRyb2lkVVYgPSAoIGZsb29yKCB1diAqIHNpemUgLSAwLjUgKSArIDAuNSApICogdGV4ZWxTaXplO1xuXHRcdGZsb2F0IGxiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh4LCBjb21wYXJlICk7XG5cdFx0ZmxvYXQgbHQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHksIGNvbXBhcmUgKTtcblx0XHRmbG9hdCByYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eCwgY29tcGFyZSApO1xuXHRcdGZsb2F0IHJ0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl5LCBjb21wYXJlICk7XG5cdFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2l6ZSArIDAuNSApO1xuXHRcdGZsb2F0IGEgPSBtaXgoIGxiLCBsdCwgZi55ICk7XG5cdFx0ZmxvYXQgYiA9IG1peCggcmIsIHJ0LCBmLnkgKTtcblx0XHRmbG9hdCBjID0gbWl4KCBhLCBiLCBmLnggKTtcblx0XHRyZXR1cm4gYztcblx0fVxuXHRmbG9hdCBnZXRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkICkge1xuXHRcdGZsb2F0IHNoYWRvdyA9IDEuMDtcblx0XHRzaGFkb3dDb29yZC54eXogLz0gc2hhZG93Q29vcmQudztcblx0XHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXM7XG5cdFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xuXHRcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcblx0XHRidmVjMiBmcnVzdHVtVGVzdFZlYyA9IGJ2ZWMyKCBpbkZydXN0dW0sIHNoYWRvd0Nvb3JkLnogPD0gMS4wICk7XG5cdFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGFsbCggZnJ1c3R1bVRlc3RWZWMgKTtcblx0XHRpZiAoIGZydXN0dW1UZXN0ICkge1xuXHRcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxuXHRcdFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XG5cdFx0XHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcblx0XHRcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XG5cdFx0XHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHgyID0gZHgwIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHkyID0gZHkwIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xuXHRcdFx0ZmxvYXQgZHkzID0gZHkxIC8gMi4wO1xuXHRcdFx0c2hhZG93ID0gKFxuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MiApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkzICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXG5cdFx0XHQpICogKCAxLjAgLyAxNy4wICk7XG5cdFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxuXHRcdFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XG5cdFx0XHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcblx0XHRcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XG5cdFx0XHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xuXHRcdFx0c2hhZG93ID0gKFxuXHRcdFx0XHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXG5cdFx0XHRcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcblx0XHRcdFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICksIHNoYWRvd0Nvb3JkLnogKVxuXHRcdFx0KSAqICggMS4wIC8gOS4wICk7XG5cdFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcblx0XHRcdHNoYWRvdyA9IFZTTVNoYWRvdyggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xuXHRcdCNlbHNlXG5cdFx0XHRzaGFkb3cgPSB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XG5cdFx0I2VuZGlmXG5cdFx0fVxuXHRcdHJldHVybiBzaGFkb3c7XG5cdH1cblx0dmVjMiBjdWJlVG9VViggdmVjMyB2LCBmbG9hdCB0ZXhlbFNpemVZICkge1xuXHRcdHZlYzMgYWJzViA9IGFicyggdiApO1xuXHRcdGZsb2F0IHNjYWxlVG9DdWJlID0gMS4wIC8gbWF4KCBhYnNWLngsIG1heCggYWJzVi55LCBhYnNWLnogKSApO1xuXHRcdGFic1YgKj0gc2NhbGVUb0N1YmU7XG5cdFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xuXHRcdHZlYzIgcGxhbmFyID0gdi54eTtcblx0XHRmbG9hdCBhbG1vc3RBVGV4ZWwgPSAxLjUgKiB0ZXhlbFNpemVZO1xuXHRcdGZsb2F0IGFsbW9zdE9uZSA9IDEuMCAtIGFsbW9zdEFUZXhlbDtcblx0XHRpZiAoIGFic1YueiA+PSBhbG1vc3RPbmUgKSB7XG5cdFx0XHRpZiAoIHYueiA+IDAuMCApXG5cdFx0XHRcdHBsYW5hci54ID0gNC4wIC0gdi54O1xuXHRcdH0gZWxzZSBpZiAoIGFic1YueCA+PSBhbG1vc3RPbmUgKSB7XG5cdFx0XHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xuXHRcdFx0cGxhbmFyLnggPSB2LnogKiBzaWduWCArIDIuMCAqIHNpZ25YO1xuXHRcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XG5cdFx0XHRmbG9hdCBzaWduWSA9IHNpZ24oIHYueSApO1xuXHRcdFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcblx0XHRcdHBsYW5hci55ID0gdi56ICogc2lnblkgLSAyLjA7XG5cdFx0fVxuXHRcdHJldHVybiB2ZWMyKCAwLjEyNSwgMC4yNSApICogcGxhbmFyICsgdmVjMiggMC4zNzUsIDAuNzUgKTtcblx0fVxuXHRmbG9hdCBnZXRQb2ludFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcblx0XHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xuXHRcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xuXHRcdGZsb2F0IGRwID0gKCBsZW5ndGgoIGxpZ2h0VG9Qb3NpdGlvbiApIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XHRcdGRwICs9IHNoYWRvd0JpYXM7XG5cdFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcblx0XHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxuXHRcdFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xuXHRcdFx0XHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXG5cdFx0XHRcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh4LCB0ZXhlbFNpemUueSApLCBkcCApICtcblx0XHRcdFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHgsIHRleGVsU2l6ZS55ICksIGRwIClcblx0XHRcdCkgKiAoIDEuMCAvIDkuMCApO1xuXHRcdCNlbHNlXG5cdFx0XHRyZXR1cm4gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcblx0XHQjZW5kaWZcblx0fVxuI2VuZGlmIjsKCgl2YXIgc2hhZG93bWFwX3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBtYXQ0IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xuXHQjZW5kaWZcblx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFx0dW5pZm9ybSBtYXQ0IHNwb3RTaGFkb3dNYXRyaXhbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdlNwb3RTaGFkb3dDb29yZFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xuXHQjZW5kaWZcblx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxuXHRcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcblx0XHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XG5cdCNlbmRpZlxuI2VuZGlmIjsKCgl2YXIgc2hhZG93bWFwX3ZlcnRleCA9ICIjaWZkZWYgVVNFX1NIQURPV01BUFxuXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxuXHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcblx0XHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XG5cdH1cblx0I2VuZGlmXG5cdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxuXHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cdFx0dlNwb3RTaGFkb3dDb29yZFsgaSBdID0gc3BvdFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcblx0fVxuXHQjZW5kaWZcblx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxuXHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xuXHRcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcblx0fVxuXHQjZW5kaWZcbiNlbmRpZiI7CgoJdmFyIHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCA9ICJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xuXHRmbG9hdCBzaGFkb3cgPSAxLjA7XG5cdCNpZmRlZiBVU0VfU0hBRE9XTUFQXG5cdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXG5cdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cdFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XG5cdFx0c2hhZG93ICo9IGFsbCggYnZlYzIoIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XG5cdH1cblx0I2VuZGlmXG5cdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxuXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xuXHQjcHJhZ21hIHVucm9sbF9sb29wXG5cdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XG5cdFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xuXHRcdHNoYWRvdyAqPSBhbGwoIGJ2ZWMyKCBzcG90TGlnaHQuc2hhZG93LCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xuXHR9XG5cdCNlbmRpZlxuXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXG5cdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcblx0I3ByYWdtYSB1bnJvbGxfbG9vcFxuXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcblx0XHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcblx0XHRzaGFkb3cgKj0gYWxsKCBidmVjMiggcG9pbnRMaWdodC5zaGFkb3csIHJlY2VpdmVTaGFkb3cgKSApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xuXHR9XG5cdCNlbmRpZlxuXHQjZW5kaWZcblx0cmV0dXJuIHNoYWRvdztcbn0iOwoKCXZhciBza2luYmFzZV92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9TS0lOTklOR1xuXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcblx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XG5cdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xuXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcbiNlbmRpZiI7CgoJdmFyIHNraW5uaW5nX3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfU0tJTk5JTkdcblx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XG5cdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcblx0I2lmZGVmIEJPTkVfVEVYVFVSRVxuXHRcdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xuXHRcdHVuaWZvcm0gaW50IGJvbmVUZXh0dXJlU2l6ZTtcblx0XHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XG5cdFx0XHRmbG9hdCBqID0gaSAqIDQuMDtcblx0XHRcdGZsb2F0IHggPSBtb2QoIGosIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKSApO1xuXHRcdFx0ZmxvYXQgeSA9IGZsb29yKCBqIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XG5cdFx0XHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcblx0XHRcdGZsb2F0IGR5ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApO1xuXHRcdFx0eSA9IGR5ICogKCB5ICsgMC41ICk7XG5cdFx0XHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XG5cdFx0XHR2ZWM0IHYyID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAxLjUgKSwgeSApICk7XG5cdFx0XHR2ZWM0IHYzID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAyLjUgKSwgeSApICk7XG5cdFx0XHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XG5cdFx0XHRtYXQ0IGJvbmUgPSBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xuXHRcdFx0cmV0dXJuIGJvbmU7XG5cdFx0fVxuXHQjZWxzZVxuXHRcdHVuaWZvcm0gbWF0NCBib25lTWF0cmljZXNbIE1BWF9CT05FUyBdO1xuXHRcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcblx0XHRcdG1hdDQgYm9uZSA9IGJvbmVNYXRyaWNlc1sgaW50KGkpIF07XG5cdFx0XHRyZXR1cm4gYm9uZTtcblx0XHR9XG5cdCNlbmRpZlxuI2VuZGlmIjsKCgl2YXIgc2tpbm5pbmdfdmVydGV4ID0gIiNpZmRlZiBVU0VfU0tJTk5JTkdcblx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcblx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XG5cdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xuXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcblx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XG5cdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xuXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xuI2VuZGlmIjsKCgl2YXIgc2tpbm5vcm1hbF92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9TS0lOTklOR1xuXHRtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KCAwLjAgKTtcblx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcblx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcblx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnogKiBib25lTWF0Wjtcblx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0Vztcblx0c2tpbk1hdHJpeCAgPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xuXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcblx0I2VuZGlmXG4jZW5kaWYiOwoKCXZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9ICJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxuXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTtcblx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcbiNlbHNlXG5cdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XG4jZW5kaWYiOwoKCXZhciBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50ID0gIiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcblx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XG4jZW5kaWYiOwoKCXZhciB0b25lbWFwcGluZ19mcmFnbWVudCA9ICIjaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcblx0Z2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XG4jZW5kaWYiOwoKCXZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gIiNpZm5kZWYgc2F0dXJhdGVcbiNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcbiNlbmRpZlxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ0V4cG9zdXJlO1xudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ1doaXRlUG9pbnQ7XG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRyZXR1cm4gdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yO1xufVxudmVjMyBSZWluaGFyZFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yIC8gKCB2ZWMzKCAxLjAgKSArIGNvbG9yICkgKTtcbn1cbiNkZWZpbmUgVW5jaGFydGVkMkhlbHBlciggeCApIG1heCggKCAoIHggKiAoIDAuMTUgKiB4ICsgMC4xMCAqIDAuNTAgKSArIDAuMjAgKiAwLjAyICkgLyAoIHggKiAoIDAuMTUgKiB4ICsgMC41MCApICsgMC4yMCAqIDAuMzAgKSApIC0gMC4wMiAvIDAuMzAsIHZlYzMoIDAuMCApIClcbnZlYzMgVW5jaGFydGVkMlRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRyZXR1cm4gc2F0dXJhdGUoIFVuY2hhcnRlZDJIZWxwZXIoIGNvbG9yICkgLyBVbmNoYXJ0ZWQySGVscGVyKCB2ZWMzKCB0b25lTWFwcGluZ1doaXRlUG9pbnQgKSApICk7XG59XG52ZWMzIE9wdGltaXplZENpbmVvblRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcblx0cmV0dXJuIHBvdyggKCBjb2xvciAqICggNi4yICogY29sb3IgKyAwLjUgKSApIC8gKCBjb2xvciAqICggNi4yICogY29sb3IgKyAxLjcgKSArIDAuMDYgKSwgdmVjMyggMi4yICkgKTtcbn1cbnZlYzMgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xuXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRyZXR1cm4gc2F0dXJhdGUoICggY29sb3IgKiAoIDIuNTEgKiBjb2xvciArIDAuMDMgKSApIC8gKCBjb2xvciAqICggMi40MyAqIGNvbG9yICsgMC41OSApICsgMC4xNCApICk7XG59IjsKCgl2YXIgdXZfcGFyc19mcmFnbWVudCA9ICIjaWYgKCBkZWZpbmVkKCBVU0VfVVYgKSAmJiAhIGRlZmluZWQoIFVWU19WRVJURVhfT05MWSApIClcblx0dmFyeWluZyB2ZWMyIHZVdjtcbiNlbmRpZiI7CgoJdmFyIHV2X3BhcnNfdmVydGV4ID0gIiNpZmRlZiBVU0VfVVZcblx0I2lmZGVmIFVWU19WRVJURVhfT05MWVxuXHRcdHZlYzIgdlV2O1xuXHQjZWxzZVxuXHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cdCNlbmRpZlxuXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XG4jZW5kaWYiOwoKCXZhciB1dl92ZXJ0ZXggPSAiI2lmZGVmIFVTRV9VVlxuXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xuI2VuZGlmIjsKCgl2YXIgdXYyX3BhcnNfZnJhZ21lbnQgPSAiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXG5cdHZhcnlpbmcgdmVjMiB2VXYyO1xuI2VuZGlmIjsKCgl2YXIgdXYyX3BhcnNfdmVydGV4ID0gIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxuXHRhdHRyaWJ1dGUgdmVjMiB1djI7XG5cdHZhcnlpbmcgdmVjMiB2VXYyO1xuXHR1bmlmb3JtIG1hdDMgdXYyVHJhbnNmb3JtO1xuI2VuZGlmIjsKCgl2YXIgdXYyX3ZlcnRleCA9ICIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcblx0dlV2MiA9ICggdXYyVHJhbnNmb3JtICogdmVjMyggdXYyLCAxICkgKS54eTtcbiNlbmRpZiI7CgoJdmFyIHdvcmxkcG9zX3ZlcnRleCA9ICIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxuXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XG5cdCNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xuXHRcdHdvcmxkUG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIHdvcmxkUG9zaXRpb247XG5cdCNlbmRpZlxuXHR3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xuI2VuZGlmIjsKCgl2YXIgYmFja2dyb3VuZF9mcmFnID0gInVuaWZvcm0gc2FtcGxlcjJEIHQyRDtcbnZhcnlpbmcgdmVjMiB2VXY7XG52b2lkIG1haW4oKSB7XG5cdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHQyRCwgdlV2ICk7XG5cdGdsX0ZyYWdDb2xvciA9IG1hcFRleGVsVG9MaW5lYXIoIHRleENvbG9yICk7XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cbn0iOwoKCXZhciBiYWNrZ3JvdW5kX3ZlcnQgPSAidmFyeWluZyB2ZWMyIHZVdjtcbnVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcbnZvaWQgbWFpbigpIHtcblx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcblx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbi54eSwgMS4wLCAxLjAgKTtcbn0iOwoKCXZhciBjdWJlX2ZyYWcgPSAiI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHR2ZWMzIHZSZWZsZWN0ID0gdldvcmxkRGlyZWN0aW9uO1xuXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxuXHRnbF9GcmFnQ29sb3IgPSBlbnZDb2xvcjtcblx0Z2xfRnJhZ0NvbG9yLmEgKj0gb3BhY2l0eTtcblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxufSI7CgoJdmFyIGN1YmVfdmVydCA9ICJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbnZvaWQgbWFpbigpIHtcblx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHRnbF9Qb3NpdGlvbi56ID0gZ2xfUG9zaXRpb24udztcbn0iOwoKCXZhciBkZXB0aF9mcmFnID0gIiNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcblx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XG5cdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcblx0XHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxuXHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIDEuMCAtIGdsX0ZyYWdDb29yZC56ICksIG9wYWNpdHkgKTtcblx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXG5cdFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBnbF9GcmFnQ29vcmQueiApO1xuXHQjZW5kaWZcbn0iOwoKCXZhciBkZXB0aF92ZXJ0ID0gIiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcblx0XHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHQjZW5kaWZcblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG59IjsKCgl2YXIgZGlzdGFuY2VSR0JBX2ZyYWcgPSAiI2RlZmluZSBESVNUQU5DRVxudW5pZm9ybSB2ZWMzIHJlZmVyZW5jZVBvc2l0aW9uO1xudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbiAoKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xuXHRkaXN0ID0gKCBkaXN0IC0gbmVhckRpc3RhbmNlICkgLyAoIGZhckRpc3RhbmNlIC0gbmVhckRpc3RhbmNlICk7XG5cdGRpc3QgPSBzYXR1cmF0ZSggZGlzdCApO1xuXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcbn0iOwoKCXZhciBkaXN0YW5jZVJHQkFfdmVydCA9ICIjZGVmaW5lIERJU1RBTkNFXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXG5cdFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0XHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHRcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2VuZGlmXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xufSI7CgoJdmFyIGVxdWlyZWN0X2ZyYWcgPSAidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcbiNpbmNsdWRlIDxjb21tb24+XG52b2lkIG1haW4oKSB7XG5cdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcblx0dmVjMiBzYW1wbGVVVjtcblx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xuXHRzYW1wbGVVVi54ID0gYXRhbiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcblx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xuXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XG59IjsKCgl2YXIgZXF1aXJlY3RfdmVydCA9ICJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuI2luY2x1ZGUgPGNvbW1vbj5cbnZvaWQgbWFpbigpIHtcblx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxufSI7CgoJdmFyIGxpbmVkYXNoZWRfZnJhZyA9ICJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbnVuaWZvcm0gZmxvYXQgZGFzaFNpemU7XG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHRpZiAoIG1vZCggdkxpbmVEaXN0YW5jZSwgdG90YWxTaXplICkgPiBkYXNoU2l6ZSApIHtcblx0XHRkaXNjYXJkO1xuXHR9XG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxufSI7CgoJdmFyIGxpbmVkYXNoZWRfdmVydCA9ICJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xuYXR0cmlidXRlIGZsb2F0IGxpbmVEaXN0YW5jZTtcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cblx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xuXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBtZXNoYmFzaWNfZnJhZyA9ICJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG4jZW5kaWZcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHQjaWZkZWYgVVNFX0xJR0hUTUFQXG5cdFxuXHRcdHZlYzQgbGlnaHRNYXBUZXhlbD0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBsaWdodE1hcFRleGVsVG9MaW5lYXIoIGxpZ2h0TWFwVGV4ZWwgKS5yZ2IgKiBsaWdodE1hcEludGVuc2l0eTtcblx0I2Vsc2Vcblx0XHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XG5cdCNlbmRpZlxuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xuXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2U7XG5cdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XG5cdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG59IjsKCgl2YXIgbWVzaGJhc2ljX3ZlcnQgPSAiI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx1djJfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaWZkZWYgVVNFX0VOVk1BUFxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2VuZGlmXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBtZXNobGFtYmVydF9mcmFnID0gInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xudmFyeWluZyB2ZWMzIHZJbmRpcmVjdEZyb250O1xuI2lmZGVmIERPVUJMRV9TSURFRFxuXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcblx0dmFyeWluZyB2ZWMzIHZJbmRpcmVjdEJhY2s7XG4jZW5kaWZcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJzZGZzPlxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cblx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2SW5kaXJlY3RGcm9udCA6IHZJbmRpcmVjdEJhY2s7XG5cdCNlbHNlXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZJbmRpcmVjdEZyb250O1xuXHQjZW5kaWZcblx0I2luY2x1ZGUgPGxpZ2h0bWFwX2ZyYWdtZW50PlxuXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcblx0I2lmZGVmIERPVUJMRV9TSURFRFxuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2TGlnaHRGcm9udCA6IHZMaWdodEJhY2s7XG5cdCNlbHNlXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9IHZMaWdodEZyb250O1xuXHQjZW5kaWZcblx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0RpZmZ1c2VfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApICogZ2V0U2hhZG93TWFzaygpO1xuXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XG5cdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XG5cdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG59IjsKCgl2YXIgbWVzaGxhbWJlcnRfdmVydCA9ICIjZGVmaW5lIExBTUJFUlRcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcbnZhcnlpbmcgdmVjMyB2SW5kaXJlY3RGcm9udDtcbiNpZmRlZiBET1VCTEVfU0lERURcblx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XG5cdHZhcnlpbmcgdmVjMyB2SW5kaXJlY3RCYWNrO1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8YnNkZnM+XG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx1djJfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cblx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBtZXNobWF0Y2FwX2ZyYWcgPSAiI2RlZmluZSBNQVRDQVBcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xudW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwO1xudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cdHZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xuXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XG5cdHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7XG5cdHZlYzIgdXYgPSB2ZWMyKCBkb3QoIHgsIG5vcm1hbCApLCBkb3QoIHksIG5vcm1hbCApICkgKiAwLjQ5NSArIDAuNTtcblx0I2lmZGVmIFVTRV9NQVRDQVBcblx0XHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XG5cdFx0bWF0Y2FwQ29sb3IgPSBtYXRjYXBUZXhlbFRvTGluZWFyKCBtYXRjYXBDb2xvciApO1xuXHQjZWxzZVxuXHRcdHZlYzQgbWF0Y2FwQ29sb3IgPSB2ZWM0KCAxLjAgKTtcblx0I2VuZGlmXG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XG5cdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG59IjsKCgl2YXIgbWVzaG1hdGNhcF92ZXJ0ID0gIiNkZWZpbmUgTUFUQ0FQXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG4jZW5kaWZcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuXHQjaWZuZGVmIEZMQVRfU0hBREVEXG5cdFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcblx0I2VuZGlmXG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG59IjsKCgl2YXIgbWVzaHRvb25fZnJhZyA9ICIjZGVmaW5lIFRPT05cbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xudW5pZm9ybSB2ZWMzIHNwZWN1bGFyO1xudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Z3JhZGllbnRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bGlnaHRzX3Rvb25fZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG5cdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cbn0iOwoKCXZhciBtZXNodG9vbl92ZXJ0ID0gIiNkZWZpbmUgVE9PTlxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx1djJfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcbiNlbmRpZlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBtZXNocGhvbmdfZnJhZyA9ICIjZGVmaW5lIFBIT05HXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcbnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnNkZnM+XG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cblx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG5cdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XG5cdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG5cdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cbn0iOwoKCXZhciBtZXNocGhvbmdfdmVydCA9ICIjZGVmaW5lIFBIT05HXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG4jZW5kaWZcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx1djJfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxuXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcbiNlbmRpZlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XG59IjsKCgl2YXIgbWVzaHBoeXNpY2FsX2ZyYWcgPSAiI2RlZmluZSBTVEFOREFSRFxuI2lmZGVmIFBIWVNJQ0FMXG5cdCNkZWZpbmUgUkVGTEVDVElWSVRZXG5cdCNkZWZpbmUgQ0xFQVJDT0FUXG5cdCNkZWZpbmUgVFJBTlNQQVJFTkNZXG4jZW5kaWZcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XG51bmlmb3JtIGZsb2F0IG1ldGFsbmVzcztcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpZmRlZiBUUkFOU1BBUkVOQ1lcblx0dW5pZm9ybSBmbG9hdCB0cmFuc3BhcmVuY3k7XG4jZW5kaWZcbiNpZmRlZiBSRUZMRUNUSVZJVFlcblx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XG4jZW5kaWZcbiNpZmRlZiBDTEVBUkNPQVRcblx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXQ7XG5cdHVuaWZvcm0gZmxvYXQgY2xlYXJjb2F0Um91Z2huZXNzO1xuI2VuZGlmXG4jaWZkZWYgVVNFX1NIRUVOXG5cdHVuaWZvcm0gdmVjMyBzaGVlbjtcbiNlbmRpZlxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblx0XHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XG5cdFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XG5cdCNlbmRpZlxuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnNkZnM+XG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xuXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xuXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG5cdCNpbmNsdWRlIDxjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG5cdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cblx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG5cdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cblx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcblx0I2lmZGVmIFRSQU5TUEFSRU5DWVxuXHRcdGRpZmZ1c2VDb2xvci5hICo9IHNhdHVyYXRlKCAxLiAtIHRyYW5zcGFyZW5jeSArIGxpbmVhclRvUmVsYXRpdmVMdW1pbmFuY2UoIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciApICk7XG5cdCNlbmRpZlxuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50PlxufSI7CgoJdmFyIG1lc2hwaHlzaWNhbF92ZXJ0ID0gIiNkZWZpbmUgU1RBTkRBUkRcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2lmbmRlZiBGTEFUX1NIQURFRFxuXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcblx0I2lmZGVmIFVTRV9UQU5HRU5UXG5cdFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xuXHRcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xuXHQjZW5kaWZcbiNlbmRpZlxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxuXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cblx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdHZUYW5nZW50ID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZFRhbmdlbnQgKTtcblx0XHR2Qml0YW5nZW50ID0gbm9ybWFsaXplKCBjcm9zcyggdk5vcm1hbCwgdlRhbmdlbnQgKSAqIHRhbmdlbnQudyApO1xuXHQjZW5kaWZcbiNlbmRpZlxuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cblx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cblx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBub3JtYWxfZnJhZyA9ICIjZGVmaW5lIE5PUk1BTFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcblx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG4jZW5kaWZcbiNpZm5kZWYgRkxBVF9TSEFERURcblx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG5cdCNpZmRlZiBVU0VfVEFOR0VOVFxuXHRcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcblx0XHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcblx0I2VuZGlmXG4jZW5kaWZcbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cblx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrTm9ybWFsVG9SR0IoIG5vcm1hbCApLCBvcGFjaXR5ICk7XG59IjsKCgl2YXIgbm9ybWFsX3ZlcnQgPSAiI2RlZmluZSBOT1JNQUxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXG5cdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xuI2VuZGlmXG4jaWZuZGVmIEZMQVRfU0hBREVEXG5cdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblx0XHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XG5cdFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XG5cdCNlbmRpZlxuI2VuZGlmXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuI2lmbmRlZiBGTEFUX1NIQURFRFxuXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xuXHQjaWZkZWYgVVNFX1RBTkdFTlRcblx0XHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XG5cdFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcblx0I2VuZGlmXG4jZW5kaWZcblx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxuXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcbiNlbmRpZlxufSI7CgoJdmFyIHBvaW50c19mcmFnID0gInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX3BhcnRpY2xlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xuXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cblx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxufSI7CgoJdmFyIHBvaW50c192ZXJ0ID0gInVuaWZvcm0gZmxvYXQgc2l6ZTtcbnVuaWZvcm0gZmxvYXQgc2NhbGU7XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcblx0I2lmZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cblx0XHRib29sIGlzUGVyc3BlY3RpdmUgPSBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0aWYgKCBpc1BlcnNwZWN0aXZlICkgZ2xfUG9pbnRTaXplICo9ICggc2NhbGUgLyAtIG12UG9zaXRpb24ueiApO1xuXHQjZW5kaWZcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cblx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxufSI7CgoJdmFyIHNoYWRvd19mcmFnID0gInVuaWZvcm0gdmVjMyBjb2xvcjtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8cGFja2luZz5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbG9yLCBvcGFjaXR5ICogKCAxLjAgLSBnZXRTaGFkb3dNYXNrKCkgKSApO1xuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxufSI7CgoJdmFyIHNoYWRvd192ZXJ0ID0gIiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4Plxudm9pZCBtYWluKCkge1xuXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBzcHJpdGVfZnJhZyA9ICJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XG5cdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG59IjsKCgl2YXIgc3ByaXRlX3ZlcnQgPSAidW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcbnVuaWZvcm0gdmVjMiBjZW50ZXI7XG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG52b2lkIG1haW4oKSB7XG5cdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG5cdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHR2ZWMyIHNjYWxlO1xuXHRzY2FsZS54ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMCBdLngsIG1vZGVsTWF0cml4WyAwIF0ueSwgbW9kZWxNYXRyaXhbIDAgXS56ICkgKTtcblx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XG5cdCNpZm5kZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxuXHRcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcblx0XHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcblx0I2VuZGlmXG5cdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XG5cdHZlYzIgcm90YXRlZFBvc2l0aW9uO1xuXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XG5cdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcblx0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn0iOwoKCXZhciBTaGFkZXJDaHVuayA9IHsKCQlhbHBoYW1hcF9mcmFnbWVudDogYWxwaGFtYXBfZnJhZ21lbnQsCgkJYWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCwKCQlhbHBoYXRlc3RfZnJhZ21lbnQ6IGFscGhhdGVzdF9mcmFnbWVudCwKCQlhb21hcF9mcmFnbWVudDogYW9tYXBfZnJhZ21lbnQsCgkJYW9tYXBfcGFyc19mcmFnbWVudDogYW9tYXBfcGFyc19mcmFnbWVudCwKCQliZWdpbl92ZXJ0ZXg6IGJlZ2luX3ZlcnRleCwKCQliZWdpbm5vcm1hbF92ZXJ0ZXg6IGJlZ2lubm9ybWFsX3ZlcnRleCwKCQlic2RmczogYnNkZnMsCgkJYnVtcG1hcF9wYXJzX2ZyYWdtZW50OiBidW1wbWFwX3BhcnNfZnJhZ21lbnQsCgkJY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsCgkJY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LAoJCWNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4LAoJCWNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsCgkJY29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LAoJCWNvbG9yX3BhcnNfZnJhZ21lbnQ6IGNvbG9yX3BhcnNfZnJhZ21lbnQsCgkJY29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LAoJCWNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LAoJCWNvbW1vbjogY29tbW9uLAoJCWN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LAoJCWRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCwKCQlkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCwKCQlkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LAoJCWVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCwKCQllbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50LAoJCWVuY29kaW5nc19mcmFnbWVudDogZW5jb2RpbmdzX2ZyYWdtZW50LAoJCWVuY29kaW5nc19wYXJzX2ZyYWdtZW50OiBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCwKCQllbnZtYXBfZnJhZ21lbnQ6IGVudm1hcF9mcmFnbWVudCwKCQllbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ6IGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCwKCQllbnZtYXBfcGFyc19mcmFnbWVudDogZW52bWFwX3BhcnNfZnJhZ21lbnQsCgkJZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsCgkJZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ6IGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50LAoJCWVudm1hcF92ZXJ0ZXg6IGVudm1hcF92ZXJ0ZXgsCgkJZm9nX3ZlcnRleDogZm9nX3ZlcnRleCwKCQlmb2dfcGFyc192ZXJ0ZXg6IGZvZ19wYXJzX3ZlcnRleCwKCQlmb2dfZnJhZ21lbnQ6IGZvZ19mcmFnbWVudCwKCQlmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsCgkJZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudDogZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCwKCQlsaWdodG1hcF9mcmFnbWVudDogbGlnaHRtYXBfZnJhZ21lbnQsCgkJbGlnaHRtYXBfcGFyc19mcmFnbWVudDogbGlnaHRtYXBfcGFyc19mcmFnbWVudCwKCQlsaWdodHNfbGFtYmVydF92ZXJ0ZXg6IGxpZ2h0c19sYW1iZXJ0X3ZlcnRleCwKCQlsaWdodHNfcGFyc19iZWdpbjogbGlnaHRzX3BhcnNfYmVnaW4sCgkJbGlnaHRzX3Rvb25fZnJhZ21lbnQ6IGxpZ2h0c190b29uX2ZyYWdtZW50LAoJCWxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQsCgkJbGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsCgkJbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50LAoJCWxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LAoJCWxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCwKCQlsaWdodHNfZnJhZ21lbnRfYmVnaW46IGxpZ2h0c19mcmFnbWVudF9iZWdpbiwKCQlsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsCgkJbGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCwKCQlsb2dkZXB0aGJ1Zl9mcmFnbWVudDogbG9nZGVwdGhidWZfZnJhZ21lbnQsCgkJbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCwKCQlsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsCgkJbG9nZGVwdGhidWZfdmVydGV4OiBsb2dkZXB0aGJ1Zl92ZXJ0ZXgsCgkJbWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsCgkJbWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LAoJCW1hcF9wYXJ0aWNsZV9mcmFnbWVudDogbWFwX3BhcnRpY2xlX2ZyYWdtZW50LAoJCW1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCwKCQltZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCwKCQltZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudDogbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQsCgkJbW9ycGhub3JtYWxfdmVydGV4OiBtb3JwaG5vcm1hbF92ZXJ0ZXgsCgkJbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg6IG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LAoJCW1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LAoJCW5vcm1hbF9mcmFnbWVudF9iZWdpbjogbm9ybWFsX2ZyYWdtZW50X2JlZ2luLAoJCW5vcm1hbF9mcmFnbWVudF9tYXBzOiBub3JtYWxfZnJhZ21lbnRfbWFwcywKCQlub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsCgkJY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbjogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiwKCQljbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHM6IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcywKCQljbGVhcmNvYXRfbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ6IGNsZWFyY29hdF9ub3JtYWxtYXBfcGFyc19mcmFnbWVudCwKCQlwYWNraW5nOiBwYWNraW5nLAoJCXByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ6IHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQsCgkJcHJvamVjdF92ZXJ0ZXg6IHByb2plY3RfdmVydGV4LAoJCWRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LAoJCWRpdGhlcmluZ19wYXJzX2ZyYWdtZW50OiBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCwKCQlyb3VnaG5lc3NtYXBfZnJhZ21lbnQ6IHJvdWdobmVzc21hcF9mcmFnbWVudCwKCQlyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsCgkJc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LAoJCXNoYWRvd21hcF9wYXJzX3ZlcnRleDogc2hhZG93bWFwX3BhcnNfdmVydGV4LAoJCXNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsCgkJc2hhZG93bWFza19wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQsCgkJc2tpbmJhc2VfdmVydGV4OiBza2luYmFzZV92ZXJ0ZXgsCgkJc2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LAoJCXNraW5uaW5nX3ZlcnRleDogc2tpbm5pbmdfdmVydGV4LAoJCXNraW5ub3JtYWxfdmVydGV4OiBza2lubm9ybWFsX3ZlcnRleCwKCQlzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsCgkJc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudDogc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCwKCQl0b25lbWFwcGluZ19mcmFnbWVudDogdG9uZW1hcHBpbmdfZnJhZ21lbnQsCgkJdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCwKCQl1dl9wYXJzX2ZyYWdtZW50OiB1dl9wYXJzX2ZyYWdtZW50LAoJCXV2X3BhcnNfdmVydGV4OiB1dl9wYXJzX3ZlcnRleCwKCQl1dl92ZXJ0ZXg6IHV2X3ZlcnRleCwKCQl1djJfcGFyc19mcmFnbWVudDogdXYyX3BhcnNfZnJhZ21lbnQsCgkJdXYyX3BhcnNfdmVydGV4OiB1djJfcGFyc192ZXJ0ZXgsCgkJdXYyX3ZlcnRleDogdXYyX3ZlcnRleCwKCQl3b3JsZHBvc192ZXJ0ZXg6IHdvcmxkcG9zX3ZlcnRleCwKCgkJYmFja2dyb3VuZF9mcmFnOiBiYWNrZ3JvdW5kX2ZyYWcsCgkJYmFja2dyb3VuZF92ZXJ0OiBiYWNrZ3JvdW5kX3ZlcnQsCgkJY3ViZV9mcmFnOiBjdWJlX2ZyYWcsCgkJY3ViZV92ZXJ0OiBjdWJlX3ZlcnQsCgkJZGVwdGhfZnJhZzogZGVwdGhfZnJhZywKCQlkZXB0aF92ZXJ0OiBkZXB0aF92ZXJ0LAoJCWRpc3RhbmNlUkdCQV9mcmFnOiBkaXN0YW5jZVJHQkFfZnJhZywKCQlkaXN0YW5jZVJHQkFfdmVydDogZGlzdGFuY2VSR0JBX3ZlcnQsCgkJZXF1aXJlY3RfZnJhZzogZXF1aXJlY3RfZnJhZywKCQllcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdF92ZXJ0LAoJCWxpbmVkYXNoZWRfZnJhZzogbGluZWRhc2hlZF9mcmFnLAoJCWxpbmVkYXNoZWRfdmVydDogbGluZWRhc2hlZF92ZXJ0LAoJCW1lc2hiYXNpY19mcmFnOiBtZXNoYmFzaWNfZnJhZywKCQltZXNoYmFzaWNfdmVydDogbWVzaGJhc2ljX3ZlcnQsCgkJbWVzaGxhbWJlcnRfZnJhZzogbWVzaGxhbWJlcnRfZnJhZywKCQltZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydF92ZXJ0LAoJCW1lc2htYXRjYXBfZnJhZzogbWVzaG1hdGNhcF9mcmFnLAoJCW1lc2htYXRjYXBfdmVydDogbWVzaG1hdGNhcF92ZXJ0LAoJCW1lc2h0b29uX2ZyYWc6IG1lc2h0b29uX2ZyYWcsCgkJbWVzaHRvb25fdmVydDogbWVzaHRvb25fdmVydCwKCQltZXNocGhvbmdfZnJhZzogbWVzaHBob25nX2ZyYWcsCgkJbWVzaHBob25nX3ZlcnQ6IG1lc2hwaG9uZ192ZXJ0LAoJCW1lc2hwaHlzaWNhbF9mcmFnOiBtZXNocGh5c2ljYWxfZnJhZywKCQltZXNocGh5c2ljYWxfdmVydDogbWVzaHBoeXNpY2FsX3ZlcnQsCgkJbm9ybWFsX2ZyYWc6IG5vcm1hbF9mcmFnLAoJCW5vcm1hbF92ZXJ0OiBub3JtYWxfdmVydCwKCQlwb2ludHNfZnJhZzogcG9pbnRzX2ZyYWcsCgkJcG9pbnRzX3ZlcnQ6IHBvaW50c192ZXJ0LAoJCXNoYWRvd19mcmFnOiBzaGFkb3dfZnJhZywKCQlzaGFkb3dfdmVydDogc2hhZG93X3ZlcnQsCgkJc3ByaXRlX2ZyYWc6IHNwcml0ZV9mcmFnLAoJCXNwcml0ZV92ZXJ0OiBzcHJpdGVfdmVydAoJfTsKCgkvKioKCSAqIFVuaWZvcm1zIGxpYnJhcnkgZm9yIHNoYXJlZCB3ZWJnbCBzaGFkZXJzCgkgKi8KCgl2YXIgVW5pZm9ybXNMaWIgPSB7CgoJCWNvbW1vbjogewoKCQkJZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sCgkJCW9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LAoKCQkJbWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCXV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sCgkJCXV2MlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9LAoKCQkJYWxwaGFNYXA6IHsgdmFsdWU6IG51bGwgfSwKCgkJfSwKCgkJc3BlY3VsYXJtYXA6IHsKCgkJCXNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sCgoJCX0sCgoJCWVudm1hcDogewoKCQkJZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCWZsaXBFbnZNYXA6IHsgdmFsdWU6IC0gMSB9LAoJCQlyZWZsZWN0aXZpdHk6IHsgdmFsdWU6IDEuMCB9LAoJCQlyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSwKCQkJbWF4TWlwTGV2ZWw6IHsgdmFsdWU6IDAgfQoKCQl9LAoKCQlhb21hcDogewoKCQkJYW9NYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJYW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfQoKCQl9LAoKCQlsaWdodG1hcDogewoKCQkJbGlnaHRNYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJbGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfQoKCQl9LAoKCQllbWlzc2l2ZW1hcDogewoKCQkJZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfQoKCQl9LAoKCQlidW1wbWFwOiB7CgoJCQlidW1wTWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCWJ1bXBTY2FsZTogeyB2YWx1ZTogMSB9CgoJCX0sCgoJCW5vcm1hbG1hcDogewoKCQkJbm9ybWFsTWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCW5vcm1hbFNjYWxlOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMSwgMSApIH0KCgkJfSwKCgkJZGlzcGxhY2VtZW50bWFwOiB7CgoJCQlkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJZGlzcGxhY2VtZW50U2NhbGU6IHsgdmFsdWU6IDEgfSwKCQkJZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9CgoJCX0sCgoJCXJvdWdobmVzc21hcDogewoKCQkJcm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0KCgkJfSwKCgkJbWV0YWxuZXNzbWFwOiB7CgoJCQltZXRhbG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfQoKCQl9LAoKCQlncmFkaWVudG1hcDogewoKCQkJZ3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfQoKCQl9LAoKCQlmb2c6IHsKCgkJCWZvZ0RlbnNpdHk6IHsgdmFsdWU6IDAuMDAwMjUgfSwKCQkJZm9nTmVhcjogeyB2YWx1ZTogMSB9LAoJCQlmb2dGYXI6IHsgdmFsdWU6IDIwMDAgfSwKCQkJZm9nQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhmZmZmZmYgKSB9CgoJCX0sCgoJCWxpZ2h0czogewoKCQkJYW1iaWVudExpZ2h0Q29sb3I6IHsgdmFsdWU6IFtdIH0sCgoJCQlsaWdodFByb2JlOiB7IHZhbHVlOiBbXSB9LAoKCQkJZGlyZWN0aW9uYWxMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CgkJCQlkaXJlY3Rpb246IHt9LAoJCQkJY29sb3I6IHt9LAoKCQkJCXNoYWRvdzoge30sCgkJCQlzaGFkb3dCaWFzOiB7fSwKCQkJCXNoYWRvd1JhZGl1czoge30sCgkJCQlzaGFkb3dNYXBTaXplOiB7fQoJCQl9IH0sCgoJCQlkaXJlY3Rpb25hbFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSwKCQkJZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sCgoJCQlzcG90TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczogewoJCQkJY29sb3I6IHt9LAoJCQkJcG9zaXRpb246IHt9LAoJCQkJZGlyZWN0aW9uOiB7fSwKCQkJCWRpc3RhbmNlOiB7fSwKCQkJCWNvbmVDb3M6IHt9LAoJCQkJcGVudW1icmFDb3M6IHt9LAoJCQkJZGVjYXk6IHt9LAoKCQkJCXNoYWRvdzoge30sCgkJCQlzaGFkb3dCaWFzOiB7fSwKCQkJCXNoYWRvd1JhZGl1czoge30sCgkJCQlzaGFkb3dNYXBTaXplOiB7fQoJCQl9IH0sCgoJCQlzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LAoJCQlzcG90U2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LAoKCQkJcG9pbnRMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CgkJCQljb2xvcjoge30sCgkJCQlwb3NpdGlvbjoge30sCgkJCQlkZWNheToge30sCgkJCQlkaXN0YW5jZToge30sCgoJCQkJc2hhZG93OiB7fSwKCQkJCXNoYWRvd0JpYXM6IHt9LAoJCQkJc2hhZG93UmFkaXVzOiB7fSwKCQkJCXNoYWRvd01hcFNpemU6IHt9LAoJCQkJc2hhZG93Q2FtZXJhTmVhcjoge30sCgkJCQlzaGFkb3dDYW1lcmFGYXI6IHt9CgkJCX0gfSwKCgkJCXBvaW50U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LAoJCQlwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSwKCgkJCWhlbWlzcGhlcmVMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CgkJCQlkaXJlY3Rpb246IHt9LAoJCQkJc2t5Q29sb3I6IHt9LAoJCQkJZ3JvdW5kQ29sb3I6IHt9CgkJCX0gfSwKCgkJCS8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmMKCQkJcmVjdEFyZWFMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7CgkJCQljb2xvcjoge30sCgkJCQlwb3NpdGlvbjoge30sCgkJCQl3aWR0aDoge30sCgkJCQloZWlnaHQ6IHt9CgkJCX0gfQoKCQl9LAoKCQlwb2ludHM6IHsKCgkJCWRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhlZWVlZWUgKSB9LAoJCQlvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSwKCQkJc2l6ZTogeyB2YWx1ZTogMS4wIH0sCgkJCXNjYWxlOiB7IHZhbHVlOiAxLjAgfSwKCQkJbWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCWFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sCgkJCXV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0KCgkJfSwKCgkJc3ByaXRlOiB7CgoJCQlkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSwKCQkJb3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sCgkJCWNlbnRlcjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSwKCQkJcm90YXRpb246IHsgdmFsdWU6IDAuMCB9LAoJCQltYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJYWxwaGFNYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJdXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfQoKCQl9CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqLwoKCXZhciBTaGFkZXJMaWIgPSB7CgoJCWJhc2ljOiB7CgoJCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQkJVW5pZm9ybXNMaWIuY29tbW9uLAoJCQkJVW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsCgkJCQlVbmlmb3Jtc0xpYi5lbnZtYXAsCgkJCQlVbmlmb3Jtc0xpYi5hb21hcCwKCQkJCVVuaWZvcm1zTGliLmxpZ2h0bWFwLAoJCQkJVW5pZm9ybXNMaWIuZm9nCgkJCV0gKSwKCgkJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX3ZlcnQsCgkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfZnJhZwoKCQl9LAoKCQlsYW1iZXJ0OiB7CgoJCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQkJVW5pZm9ybXNMaWIuY29tbW9uLAoJCQkJVW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsCgkJCQlVbmlmb3Jtc0xpYi5lbnZtYXAsCgkJCQlVbmlmb3Jtc0xpYi5hb21hcCwKCQkJCVVuaWZvcm1zTGliLmxpZ2h0bWFwLAoJCQkJVW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsCgkJCQlVbmlmb3Jtc0xpYi5mb2csCgkJCQlVbmlmb3Jtc0xpYi5saWdodHMsCgkJCQl7CgkJCQkJZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9CgkJCQl9CgkJCV0gKSwKCgkJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X2ZyYWcKCgkJfSwKCgkJcGhvbmc6IHsKCgkJCXVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbCgkJCQlVbmlmb3Jtc0xpYi5jb21tb24sCgkJCQlVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCwKCQkJCVVuaWZvcm1zTGliLmVudm1hcCwKCQkJCVVuaWZvcm1zTGliLmFvbWFwLAoJCQkJVW5pZm9ybXNMaWIubGlnaHRtYXAsCgkJCQlVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCwKCQkJCVVuaWZvcm1zTGliLmJ1bXBtYXAsCgkJCQlVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsCgkJCQlVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsCgkJCQlVbmlmb3Jtc0xpYi5mb2csCgkJCQlVbmlmb3Jtc0xpYi5saWdodHMsCgkJCQl7CgkJCQkJZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LAoJCQkJCXNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MTExMTExICkgfSwKCQkJCQlzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH0KCQkJCX0KCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ19mcmFnCgoJCX0sCgoJCXN0YW5kYXJkOiB7CgoJCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQkJVW5pZm9ybXNMaWIuY29tbW9uLAoJCQkJVW5pZm9ybXNMaWIuZW52bWFwLAoJCQkJVW5pZm9ybXNMaWIuYW9tYXAsCgkJCQlVbmlmb3Jtc0xpYi5saWdodG1hcCwKCQkJCVVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLAoJCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKCQkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKCQkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKCQkJCVVuaWZvcm1zTGliLnJvdWdobmVzc21hcCwKCQkJCVVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCwKCQkJCVVuaWZvcm1zTGliLmZvZywKCQkJCVVuaWZvcm1zTGliLmxpZ2h0cywKCQkJCXsKCQkJCQllbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sCgkJCQkJcm91Z2huZXNzOiB7IHZhbHVlOiAwLjUgfSwKCQkJCQltZXRhbG5lc3M6IHsgdmFsdWU6IDAuNSB9LAoJCQkJCWVudk1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9IC8vIHRlbXBvcmFyeQoJCQkJfQoJCQldICksCgoJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LAoJCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWcKCgkJfSwKCgkJdG9vbjogewoKCQkJdW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFsKCQkJCVVuaWZvcm1zTGliLmNvbW1vbiwKCQkJCVVuaWZvcm1zTGliLnNwZWN1bGFybWFwLAoJCQkJVW5pZm9ybXNMaWIuYW9tYXAsCgkJCQlVbmlmb3Jtc0xpYi5saWdodG1hcCwKCQkJCVVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLAoJCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKCQkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKCQkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKCQkJCVVuaWZvcm1zTGliLmdyYWRpZW50bWFwLAoJCQkJVW5pZm9ybXNMaWIuZm9nLAoJCQkJVW5pZm9ybXNMaWIubGlnaHRzLAoJCQkJewoJCQkJCWVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSwKCQkJCQlzcGVjdWxhcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDExMTExMSApIH0sCgkJCQkJc2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9CgkJCQl9CgkJCV0gKSwKCgkJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHRvb25fdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX2ZyYWcKCgkJfSwKCgkJbWF0Y2FwOiB7CgoJCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQkJVW5pZm9ybXNMaWIuY29tbW9uLAoJCQkJVW5pZm9ybXNMaWIuYnVtcG1hcCwKCQkJCVVuaWZvcm1zTGliLm5vcm1hbG1hcCwKCQkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKCQkJCVVuaWZvcm1zTGliLmZvZywKCQkJCXsKCQkJCQltYXRjYXA6IHsgdmFsdWU6IG51bGwgfQoJCQkJfQoJCQldICksCgoJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZwoKCQl9LAoKCQlwb2ludHM6IHsKCgkJCXVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbCgkJCQlVbmlmb3Jtc0xpYi5wb2ludHMsCgkJCQlVbmlmb3Jtc0xpYi5mb2cKCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c19mcmFnCgoJCX0sCgoJCWRhc2hlZDogewoKCQkJdW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFsKCQkJCVVuaWZvcm1zTGliLmNvbW1vbiwKCQkJCVVuaWZvcm1zTGliLmZvZywKCQkJCXsKCQkJCQlzY2FsZTogeyB2YWx1ZTogMSB9LAoJCQkJCWRhc2hTaXplOiB7IHZhbHVlOiAxIH0sCgkJCQkJdG90YWxTaXplOiB7IHZhbHVlOiAyIH0KCQkJCX0KCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsCgkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWcKCgkJfSwKCgkJZGVwdGg6IHsKCgkJCXVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbCgkJCQlVbmlmb3Jtc0xpYi5jb21tb24sCgkJCQlVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAKCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LAoJCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfZnJhZwoKCQl9LAoKCQlub3JtYWw6IHsKCgkJCXVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbCgkJCQlVbmlmb3Jtc0xpYi5jb21tb24sCgkJCQlVbmlmb3Jtc0xpYi5idW1wbWFwLAoJCQkJVW5pZm9ybXNMaWIubm9ybWFsbWFwLAoJCQkJVW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLAoJCQkJewoJCQkJCW9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9CgkJCQl9CgkJCV0gKSwKCgkJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubm9ybWFsX3ZlcnQsCgkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5ub3JtYWxfZnJhZwoKCQl9LAoKCQlzcHJpdGU6IHsKCgkJCXVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbCgkJCQlVbmlmb3Jtc0xpYi5zcHJpdGUsCgkJCQlVbmlmb3Jtc0xpYi5mb2cKCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV9mcmFnCgoJCX0sCgoJCWJhY2tncm91bmQ6IHsKCgkJCXVuaWZvcm1zOiB7CgkJCQl1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9LAoJCQkJdDJEOiB7IHZhbHVlOiBudWxsIH0sCgkJCX0sCgoJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfZnJhZwoKCQl9LAoJCS8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCQkvLwlDdWJlIG1hcCBzaGFkZXIKCQkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKCQljdWJlOiB7CgoJCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQkJVW5pZm9ybXNMaWIuZW52bWFwLAoJCQkJewoJCQkJCW9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9CgkJCQl9CgkJCV0gKSwKCgkJCXZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV92ZXJ0LAoJCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV9mcmFnCgoJCX0sCgoJCWVxdWlyZWN0OiB7CgoJCQl1bmlmb3JtczogewoJCQkJdEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sCgkJCX0sCgoJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X3ZlcnQsCgkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF9mcmFnCgoJCX0sCgoJCWRpc3RhbmNlUkdCQTogewoKCQkJdW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFsKCQkJCVVuaWZvcm1zTGliLmNvbW1vbiwKCQkJCVVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCwKCQkJCXsKCQkJCQlyZWZlcmVuY2VQb3NpdGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjMoKSB9LAoJCQkJCW5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LAoJCQkJCWZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH0KCQkJCX0KCQkJXSApLAoKCQkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCwKCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV9mcmFnCgoJCX0sCgoJCXNoYWRvdzogewoKCQkJdW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFsKCQkJCVVuaWZvcm1zTGliLmxpZ2h0cywKCQkJCVVuaWZvcm1zTGliLmZvZywKCQkJCXsKCQkJCQljb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwICkgfSwKCQkJCQlvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfQoJCQkJfSBdICksCgoJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd192ZXJ0LAoJCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X2ZyYWcKCgkJfQoKCX07CgoJU2hhZGVyTGliLnBoeXNpY2FsID0gewoKCQl1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggWwoJCQlTaGFkZXJMaWIuc3RhbmRhcmQudW5pZm9ybXMsCgkJCXsKCQkJCXRyYW5zcGFyZW5jeTogeyB2YWx1ZTogMCB9LAoJCQkJY2xlYXJjb2F0OiB7IHZhbHVlOiAwIH0sCgkJCQljbGVhcmNvYXRSb3VnaG5lc3M6IHsgdmFsdWU6IDAgfSwKCQkJCXNoZWVuOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSwKCQkJCWNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMSwgMSApIH0sCgkJCQljbGVhcmNvYXROb3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSwKCQkJfQoJCV0gKSwKCgkJdmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCwKCQlmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWcKCgl9OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkgewoKCQl2YXIgY29udGV4dCA9IG51bGw7CgkJdmFyIGlzQW5pbWF0aW5nID0gZmFsc2U7CgkJdmFyIGFuaW1hdGlvbkxvb3AgPSBudWxsOwoKCQlmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHsKCgkJCWlmICggaXNBbmltYXRpbmcgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCWFuaW1hdGlvbkxvb3AoIHRpbWUsIGZyYW1lICk7CgoJCQljb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApOwoKCQl9CgoJCXJldHVybiB7CgoJCQlzdGFydDogZnVuY3Rpb24gKCkgewoKCQkJCWlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSB7IHJldHVybjsgfQoJCQkJaWYgKCBhbmltYXRpb25Mb29wID09PSBudWxsICkgeyByZXR1cm47IH0KCgkJCQljb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApOwoKCQkJCWlzQW5pbWF0aW5nID0gdHJ1ZTsKCgkJCX0sCgoJCQlzdG9wOiBmdW5jdGlvbiAoKSB7CgoJCQkJaXNBbmltYXRpbmcgPSBmYWxzZTsKCgkJCX0sCgoJCQlzZXRBbmltYXRpb25Mb29wOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkgewoKCQkJCWFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjazsKCgkJCX0sCgoJCQlzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnRleHQgPSB2YWx1ZTsKCgkJCX0KCgkJfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHsKCgkJdmFyIGJ1ZmZlcnMgPSBuZXcgV2Vha01hcCgpOwoKCQlmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHsKCgkJCXZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTsKCQkJdmFyIHVzYWdlID0gYXR0cmlidXRlLnVzYWdlOwoKCQkJdmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpOwoKCQkJZ2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7CgkJCWdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApOwoKCQkJYXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTsKCgkJCXZhciB0eXBlID0gNTEyNjsKCgkJCWlmICggYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgKSB7CgoJCQkJdHlwZSA9IDUxMjY7CgoJCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGRhdGEgYnVmZmVyIGZvcm1hdDogRmxvYXQ2NEFycmF5LicgKTsKCgkJCX0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7CgoJCQkJdHlwZSA9IDUxMjM7CgoJCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgKSB7CgoJCQkJdHlwZSA9IDUxMjI7CgoJCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5ICkgewoKCQkJCXR5cGUgPSA1MTI1OwoKCQkJfSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkgewoKCQkJCXR5cGUgPSA1MTI0OwoKCQkJfSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgKSB7CgoJCQkJdHlwZSA9IDUxMjA7CgoJCQl9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7CgoJCQkJdHlwZSA9IDUxMjE7CgoJCQl9CgoJCQlyZXR1cm4gewoJCQkJYnVmZmVyOiBidWZmZXIsCgkJCQl0eXBlOiB0eXBlLAoJCQkJYnl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCwKCQkJCXZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uCgkJCX07CgoJCX0KCgkJZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHsKCgkJCXZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTsKCQkJdmFyIHVwZGF0ZVJhbmdlID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlOwoKCQkJZ2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7CgoJCQlpZiAoIHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEgKSB7CgoJCQkJLy8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXMKCgkJCQlnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCAwLCBhcnJheSApOwoKCQkJfSBlbHNlIHsKCgkJCQlnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCB1cGRhdGVSYW5nZS5vZmZzZXQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCwKCQkJCQlhcnJheS5zdWJhcnJheSggdXBkYXRlUmFuZ2Uub2Zmc2V0LCB1cGRhdGVSYW5nZS5vZmZzZXQgKyB1cGRhdGVSYW5nZS5jb3VudCApICk7CgoJCQkJdXBkYXRlUmFuZ2UuY291bnQgPSAtIDE7IC8vIHJlc2V0IHJhbmdlCgoJCQl9CgoJCX0KCgkJLy8KCgkJZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7CgoJCQlpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgeyBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTsgfQoKCQkJcmV0dXJuIGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTsKCgkJfQoKCQlmdW5jdGlvbiByZW1vdmUoIGF0dHJpYnV0ZSApIHsKCgkJCWlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhOyB9CgoJCQl2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTsKCgkJCWlmICggZGF0YSApIHsKCgkJCQlnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7CgoJCQkJYnVmZmVycy5kZWxldGUoIGF0dHJpYnV0ZSApOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgewoKCQkJaWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHsgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7IH0KCgkJCXZhciBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApOwoKCQkJaWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7CgoJCQkJYnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwgY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSApOwoKCQkJfSBlbHNlIGlmICggZGF0YS52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7CgoJCQkJdXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7CgoJCQkJZGF0YS52ZXJzaW9uID0gYXR0cmlidXRlLnZlcnNpb247CgoJCQl9CgoJCX0KCgkJcmV0dXJuIHsKCgkJCWdldDogZ2V0LAoJCQlyZW1vdmU6IHJlbW92ZSwKCQkJdXBkYXRlOiB1cGRhdGUKCgkJfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqLwoKCS8vIFBsYW5lR2VvbWV0cnkKCglmdW5jdGlvbiBQbGFuZUdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnUGxhbmVHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJd2lkdGg6IHdpZHRoLAoJCQloZWlnaHQ6IGhlaWdodCwKCQkJd2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cywKCQkJaGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzCgkJfTsKCgkJdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCVBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglQbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7CgoJLy8gUGxhbmVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFBsYW5lQnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzICkgewoKCQlCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQl3aWR0aDogd2lkdGgsCgkJCWhlaWdodDogaGVpZ2h0LAoJCQl3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLAoJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMKCQl9OwoKCQl3aWR0aCA9IHdpZHRoIHx8IDE7CgkJaGVpZ2h0ID0gaGVpZ2h0IHx8IDE7CgoJCXZhciB3aWR0aF9oYWxmID0gd2lkdGggLyAyOwoJCXZhciBoZWlnaHRfaGFsZiA9IGhlaWdodCAvIDI7CgoJCXZhciBncmlkWCA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxOwoJCXZhciBncmlkWSA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTsKCgkJdmFyIGdyaWRYMSA9IGdyaWRYICsgMTsKCQl2YXIgZ3JpZFkxID0gZ3JpZFkgKyAxOwoKCQl2YXIgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7CgkJdmFyIHNlZ21lbnRfaGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7CgoJCXZhciBpeCwgaXk7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2cwoKCQlmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHsKCgkJCXZhciB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmOwoKCQkJZm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7CgoJCQkJdmFyIHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmOwoKCQkJCXZlcnRpY2VzLnB1c2goIHgsIC0geSwgMCApOwoKCQkJCW5vcm1hbHMucHVzaCggMCwgMCwgMSApOwoKCQkJCXV2cy5wdXNoKCBpeCAvIGdyaWRYICk7CgkJCQl1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7CgoJCQl9CgoJCX0KCgkJLy8gaW5kaWNlcwoKCQlmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkgewoKCQkJZm9yICggaXggPSAwOyBpeCA8IGdyaWRYOyBpeCArKyApIHsKCgkJCQl2YXIgYSA9IGl4ICsgZ3JpZFgxICogaXk7CgkJCQl2YXIgYiA9IGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTsKCQkJCXZhciBjID0gKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7CgkJCQl2YXIgZCA9ICggaXggKyAxICkgKyBncmlkWDEgKiBpeTsKCgkJCQkvLyBmYWNlcwoKCQkJCWluZGljZXMucHVzaCggYSwgYiwgZCApOwoJCQkJaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7CgoJCQl9CgoJCX0KCgkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJdGhpcy5zZXRJbmRleCggaW5kaWNlcyApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTsKCgl9CgoJUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCVBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTEJhY2tncm91bmQoIHJlbmRlcmVyLCBzdGF0ZSwgb2JqZWN0cywgcHJlbXVsdGlwbGllZEFscGhhICkgewoKCQl2YXIgY2xlYXJDb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTsKCQl2YXIgY2xlYXJBbHBoYSA9IDA7CgoJCXZhciBwbGFuZU1lc2g7CgkJdmFyIGJveE1lc2g7CgkJLy8gU3RvcmUgdGhlIGN1cnJlbnQgYmFja2dyb3VuZCB0ZXh0dXJlIGFuZCBpdHMgYHZlcnNpb25gCgkJLy8gc28gd2UgY2FuIHJlY29tcGlsZSB0aGUgbWF0ZXJpYWwgYWNjb3JkaW5nbHkuCgkJdmFyIGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDsKCQl2YXIgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDsKCgkJZnVuY3Rpb24gcmVuZGVyKCByZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCBmb3JjZUNsZWFyICkgewoKCQkJdmFyIGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kOwoKCQkJLy8gSWdub3JlIGJhY2tncm91bmQgaW4gQVIKCQkJLy8gVE9ETzogUmVjb25zaWRlciB0aGlzLgoKCQkJdmFyIHhyID0gcmVuZGVyZXIueHI7CgkJCXZhciBzZXNzaW9uID0geHIuZ2V0U2Vzc2lvbiAmJiB4ci5nZXRTZXNzaW9uKCk7CgoJCQlpZiAoIHNlc3Npb24gJiYgc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZSA9PT0gJ2FkZGl0aXZlJyApIHsKCgkJCQliYWNrZ3JvdW5kID0gbnVsbDsKCgkJCX0KCgkJCWlmICggYmFja2dyb3VuZCA9PT0gbnVsbCApIHsKCgkJCQlzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApOwoJCQkJY3VycmVudEJhY2tncm91bmQgPSBudWxsOwoJCQkJY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDsKCgkJCX0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yICkgewoKCQkJCXNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7CgkJCQlmb3JjZUNsZWFyID0gdHJ1ZTsKCQkJCWN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDsKCQkJCWN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7CgoJCQl9CgoJCQlpZiAoIHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyICkgewoKCQkJCXJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTsKCgkJCX0KCgkJCWlmICggYmFja2dyb3VuZCAmJiAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSB8fCBiYWNrZ3JvdW5kLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHx8IGJhY2tncm91bmQubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSApIHsKCgkJCQlpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJYm94TWVzaCA9IG5ldyBNZXNoKAoJCQkJCQluZXcgQm94QnVmZmVyR2VvbWV0cnkoIDEsIDEsIDEgKSwKCQkJCQkJbmV3IFNoYWRlck1hdGVyaWFsKCB7CgkJCQkJCQl0eXBlOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsCgkJCQkJCQl1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmN1YmUudW5pZm9ybXMgKSwKCQkJCQkJCXZlcnRleFNoYWRlcjogU2hhZGVyTGliLmN1YmUudmVydGV4U2hhZGVyLAoJCQkJCQkJZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLAoJCQkJCQkJc2lkZTogQmFja1NpZGUsCgkJCQkJCQlkZXB0aFRlc3Q6IGZhbHNlLAoJCQkJCQkJZGVwdGhXcml0ZTogZmFsc2UsCgkJCQkJCQlmb2c6IGZhbHNlCgkJCQkJCX0gKQoJCQkJCSk7CgoJCQkJCWJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbm9ybWFsJyApOwoJCQkJCWJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAndXYnICk7CgoJCQkJCWJveE1lc2gub25CZWZvcmVSZW5kZXIgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhICkgewoKCQkJCQkJdGhpcy5tYXRyaXhXb3JsZC5jb3B5UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApOwoKCQkJCQl9OwoKCQkJCQkvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbAoJCQkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggYm94TWVzaC5tYXRlcmlhbCwgJ21hcCcsIHsKCgkJCQkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCQkJCXJldHVybiB0aGlzLmVudk1hcC52YWx1ZTsKCgkJCQkJCX0KCgkJCQkJfSApOwoKCQkJCQlvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApOwoKCQkJCX0KCgkJCQl2YXIgdGV4dHVyZSA9IGJhY2tncm91bmQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPyBiYWNrZ3JvdW5kLnRleHR1cmUgOiBiYWNrZ3JvdW5kOwoJCQkJYm94TWVzaC5tYXRlcmlhbC5lbnZNYXAgPSB0ZXh0dXJlOwoKCQkJCWlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHwKCQkJCSAgICAgY3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7CgoJCQkJCWJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCQljdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7CgkJCQkJY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uOwoKCQkJCX0KCgkJCQkvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdAoJCQkJcmVuZGVyTGlzdC51bnNoaWZ0KCBib3hNZXNoLCBib3hNZXNoLmdlb21ldHJ5LCBib3hNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7CgoJCQl9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkgewoKCQkJCWlmICggcGxhbmVNZXNoID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCXBsYW5lTWVzaCA9IG5ldyBNZXNoKAoJCQkJCQluZXcgUGxhbmVCdWZmZXJHZW9tZXRyeSggMiwgMiApLAoJCQkJCQluZXcgU2hhZGVyTWF0ZXJpYWwoIHsKCQkJCQkJCXR5cGU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLAoJCQkJCQkJdW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kLnVuaWZvcm1zICksCgkJCQkJCQl2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLnZlcnRleFNoYWRlciwKCQkJCQkJCWZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC5mcmFnbWVudFNoYWRlciwKCQkJCQkJCXNpZGU6IEZyb250U2lkZSwKCQkJCQkJCWRlcHRoVGVzdDogZmFsc2UsCgkJCQkJCQlkZXB0aFdyaXRlOiBmYWxzZSwKCQkJCQkJCWZvZzogZmFsc2UKCQkJCQkJfSApCgkJCQkJKTsKCgkJCQkJcGxhbmVNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTsKCgkJCQkJLy8gZW5hYmxlIGNvZGUgaW5qZWN0aW9uIGZvciBub24tYnVpbHQtaW4gbWF0ZXJpYWwKCQkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHsKCgkJCQkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCQkJCXJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTsKCgkJCQkJCX0KCgkJCQkJfSApOwoKCQkJCQlvYmplY3RzLnVwZGF0ZSggcGxhbmVNZXNoICk7CgoJCQkJfQoKCQkJCXBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50MkQudmFsdWUgPSBiYWNrZ3JvdW5kOwoKCQkJCWlmICggYmFja2dyb3VuZC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkgewoKCQkJCQliYWNrZ3JvdW5kLnVwZGF0ZU1hdHJpeCgpOwoKCQkJCX0KCgkJCQlwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggYmFja2dyb3VuZC5tYXRyaXggKTsKCgkJCQlpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8CgkJCQkJICAgY3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSBiYWNrZ3JvdW5kLnZlcnNpb24gKSB7CgoJCQkJCXBsYW5lTWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJCWN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDsKCQkJCQljdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSBiYWNrZ3JvdW5kLnZlcnNpb247CgoJCQkJfQoKCgkJCQkvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdAoJCQkJcmVuZGVyTGlzdC51bnNoaWZ0KCBwbGFuZU1lc2gsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gc2V0Q2xlYXIoIGNvbG9yLCBhbHBoYSApIHsKCgkJCXN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTsKCgkJfQoKCQlyZXR1cm4gewoKCQkJZ2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCkgewoKCQkJCXJldHVybiBjbGVhckNvbG9yOwoKCQkJfSwKCQkJc2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7CgoJCQkJY2xlYXJDb2xvci5zZXQoIGNvbG9yICk7CgkJCQljbGVhckFscGhhID0gYWxwaGEgIT09IHVuZGVmaW5lZCA/IGFscGhhIDogMTsKCQkJCXNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7CgoJCQl9LAoJCQlnZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIGNsZWFyQWxwaGE7CgoJCQl9LAoJCQlzZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoIGFscGhhICkgewoKCQkJCWNsZWFyQWxwaGEgPSBhbHBoYTsKCQkJCXNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7CgoJCQl9LAoJCQlyZW5kZXI6IHJlbmRlcgoKCQl9OwoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICkgewoKCQl2YXIgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7CgoJCXZhciBtb2RlOwoKCQlmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHsKCgkJCW1vZGUgPSB2YWx1ZTsKCgkJfQoKCQlmdW5jdGlvbiByZW5kZXIoIHN0YXJ0LCBjb3VudCApIHsKCgkJCWdsLmRyYXdBcnJheXMoIG1vZGUsIHN0YXJ0LCBjb3VudCApOwoKCQkJaW5mby51cGRhdGUoIGNvdW50LCBtb2RlICk7CgoJCX0KCgkJZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7CgoJCQlpZiAoIHByaW1jb3VudCA9PT0gMCApIHsgcmV0dXJuOyB9CgoJCQl2YXIgZXh0ZW5zaW9uLCBtZXRob2ROYW1lOwoKCQkJaWYgKCBpc1dlYkdMMiApIHsKCgkJCQlleHRlbnNpb24gPSBnbDsKCQkJCW1ldGhvZE5hbWUgPSAnZHJhd0FycmF5c0luc3RhbmNlZCc7CgoJCQl9IGVsc2UgewoKCQkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTsKCQkJCW1ldGhvZE5hbWUgPSAnZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFJzsKCgkJCQlpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHsKCgkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTsKCQkJCQlyZXR1cm47CgoJCQkJfQoKCQkJfQoKCQkJZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICk7CgoJCQlpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApOwoKCQl9CgoJCS8vCgoJCXRoaXMuc2V0TW9kZSA9IHNldE1vZGU7CgkJdGhpcy5yZW5kZXIgPSByZW5kZXI7CgkJdGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApIHsKCgkJdmFyIG1heEFuaXNvdHJvcHk7CgoJCWZ1bmN0aW9uIGdldE1heEFuaXNvdHJvcHkoKSB7CgoJCQlpZiAoIG1heEFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIG1heEFuaXNvdHJvcHk7IH0KCgkJCXZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTsKCgkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKCQkJCW1heEFuaXNvdHJvcHkgPSBnbC5nZXRQYXJhbWV0ZXIoIGV4dGVuc2lvbi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgKTsKCgkJCX0gZWxzZSB7CgoJCQkJbWF4QW5pc290cm9weSA9IDA7CgoJCQl9CgoJCQlyZXR1cm4gbWF4QW5pc290cm9weTsKCgkJfQoKCQlmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHsKCgkJCWlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkgewoKCQkJCWlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMywgMzYzMzggKS5wcmVjaXNpb24gPiAwICYmCgkJCQkJZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMiwgMzYzMzggKS5wcmVjaXNpb24gPiAwICkgewoKCQkJCQlyZXR1cm4gJ2hpZ2hwJzsKCgkJCQl9CgoJCQkJcHJlY2lzaW9uID0gJ21lZGl1bXAnOwoKCQkJfQoKCQkJaWYgKCBwcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHsKCgkJCQlpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzMsIDM2MzM3ICkucHJlY2lzaW9uID4gMCAmJgoJCQkJCWdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzIsIDM2MzM3ICkucHJlY2lzaW9uID4gMCApIHsKCgkJCQkJcmV0dXJuICdtZWRpdW1wJzsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gJ2xvd3AnOwoKCQl9CgoJCS8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovCgkJdmFyIGlzV2ViR0wyID0gKCB0eXBlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2wgaW5zdGFuY2VvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICkgfHwKCQkJKCB0eXBlb2YgV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQgKTsKCQkvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovCgoJCXZhciBwcmVjaXNpb24gPSBwYXJhbWV0ZXJzLnByZWNpc2lvbiAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVjaXNpb24gOiAnaGlnaHAnOwoJCXZhciBtYXhQcmVjaXNpb24gPSBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApOwoKCQlpZiAoIG1heFByZWNpc2lvbiAhPT0gcHJlY2lzaW9uICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjonLCBwcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIG1heFByZWNpc2lvbiwgJ2luc3RlYWQuJyApOwoJCQlwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247CgoJCX0KCgkJdmFyIGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPT09IHRydWU7CgoJCXZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MzAgKTsKCQl2YXIgbWF4VmVydGV4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM1NjYwICk7CgkJdmFyIG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzMzc5ICk7CgkJdmFyIG1heEN1YmVtYXBTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDA3NiApOwoKCQl2YXIgbWF4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTsKCQl2YXIgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ3ICk7CgkJdmFyIG1heFZhcnlpbmdzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OCApOwoJCXZhciBtYXhGcmFnbWVudFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OSApOwoKCQl2YXIgdmVydGV4VGV4dHVyZXMgPSBtYXhWZXJ0ZXhUZXh0dXJlcyA+IDA7CgkJdmFyIGZsb2F0RnJhZ21lbnRUZXh0dXJlcyA9IGlzV2ViR0wyIHx8ICEhIGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7CgkJdmFyIGZsb2F0VmVydGV4VGV4dHVyZXMgPSB2ZXJ0ZXhUZXh0dXJlcyAmJiBmbG9hdEZyYWdtZW50VGV4dHVyZXM7CgoJCXZhciBtYXhTYW1wbGVzID0gaXNXZWJHTDIgPyBnbC5nZXRQYXJhbWV0ZXIoIDM2MTgzICkgOiAwOwoKCQlyZXR1cm4gewoKCQkJaXNXZWJHTDI6IGlzV2ViR0wyLAoKCQkJZ2V0TWF4QW5pc290cm9weTogZ2V0TWF4QW5pc290cm9weSwKCQkJZ2V0TWF4UHJlY2lzaW9uOiBnZXRNYXhQcmVjaXNpb24sCgoJCQlwcmVjaXNpb246IHByZWNpc2lvbiwKCQkJbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciwKCgkJCW1heFRleHR1cmVzOiBtYXhUZXh0dXJlcywKCQkJbWF4VmVydGV4VGV4dHVyZXM6IG1heFZlcnRleFRleHR1cmVzLAoJCQltYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsCgkJCW1heEN1YmVtYXBTaXplOiBtYXhDdWJlbWFwU2l6ZSwKCgkJCW1heEF0dHJpYnV0ZXM6IG1heEF0dHJpYnV0ZXMsCgkJCW1heFZlcnRleFVuaWZvcm1zOiBtYXhWZXJ0ZXhVbmlmb3JtcywKCQkJbWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLAoJCQltYXhGcmFnbWVudFVuaWZvcm1zOiBtYXhGcmFnbWVudFVuaWZvcm1zLAoKCQkJdmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLAoJCQlmbG9hdEZyYWdtZW50VGV4dHVyZXM6IGZsb2F0RnJhZ21lbnRUZXh0dXJlcywKCQkJZmxvYXRWZXJ0ZXhUZXh0dXJlczogZmxvYXRWZXJ0ZXhUZXh0dXJlcywKCgkJCW1heFNhbXBsZXM6IG1heFNhbXBsZXMKCgkJfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBXZWJHTENsaXBwaW5nKCkgewoKCQl2YXIgc2NvcGUgPSB0aGlzLAoKCQkJZ2xvYmFsU3RhdGUgPSBudWxsLAoJCQludW1HbG9iYWxQbGFuZXMgPSAwLAoJCQlsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLAoJCQlyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2UsCgoJCQlwbGFuZSA9IG5ldyBQbGFuZSgpLAoJCQl2aWV3Tm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKSwKCgkJCXVuaWZvcm0gPSB7IHZhbHVlOiBudWxsLCBuZWVkc1VwZGF0ZTogZmFsc2UgfTsKCgkJdGhpcy51bmlmb3JtID0gdW5pZm9ybTsKCQl0aGlzLm51bVBsYW5lcyA9IDA7CgkJdGhpcy5udW1JbnRlcnNlY3Rpb24gPSAwOwoKCQl0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHBsYW5lcywgZW5hYmxlTG9jYWxDbGlwcGluZywgY2FtZXJhICkgewoKCQkJdmFyIGVuYWJsZWQgPQoJCQkJcGxhbmVzLmxlbmd0aCAhPT0gMCB8fAoJCQkJZW5hYmxlTG9jYWxDbGlwcGluZyB8fAoJCQkJLy8gZW5hYmxlIHN0YXRlIG9mIHByZXZpb3VzIGZyYW1lIC0gdGhlIGNsaXBwaW5nIGNvZGUgaGFzIHRvCgkJCQkvLyBydW4gYW5vdGhlciBmcmFtZSBpbiBvcmRlciB0byByZXNldCB0aGUgc3RhdGU6CgkJCQludW1HbG9iYWxQbGFuZXMgIT09IDAgfHwKCQkJCWxvY2FsQ2xpcHBpbmdFbmFibGVkOwoKCQkJbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBlbmFibGVMb2NhbENsaXBwaW5nOwoKCQkJZ2xvYmFsU3RhdGUgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgMCApOwoJCQludW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoOwoKCQkJcmV0dXJuIGVuYWJsZWQ7CgoJCX07CgoJCXRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkgewoKCQkJcmVuZGVyaW5nU2hhZG93cyA9IHRydWU7CgkJCXByb2plY3RQbGFuZXMoIG51bGwgKTsKCgkJfTsKCgkJdGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkgewoKCQkJcmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlOwoJCQlyZXNldEdsb2JhbFN0YXRlKCk7CgoJCX07CgoJCXRoaXMuc2V0U3RhdGUgPSBmdW5jdGlvbiAoIHBsYW5lcywgY2xpcEludGVyc2VjdGlvbiwgY2xpcFNoYWRvd3MsIGNhbWVyYSwgY2FjaGUsIGZyb21DYWNoZSApIHsKCgkJCWlmICggISBsb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBwbGFuZXMgPT09IG51bGwgfHwgcGxhbmVzLmxlbmd0aCA9PT0gMCB8fCByZW5kZXJpbmdTaGFkb3dzICYmICEgY2xpcFNoYWRvd3MgKSB7CgoJCQkJLy8gdGhlcmUncyBubyBsb2NhbCBjbGlwcGluZwoKCQkJCWlmICggcmVuZGVyaW5nU2hhZG93cyApIHsKCgkJCQkJLy8gdGhlcmUncyBubyBnbG9iYWwgY2xpcHBpbmcKCgkJCQkJcHJvamVjdFBsYW5lcyggbnVsbCApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXJlc2V0R2xvYmFsU3RhdGUoKTsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCXZhciBuR2xvYmFsID0gcmVuZGVyaW5nU2hhZG93cyA/IDAgOiBudW1HbG9iYWxQbGFuZXMsCgkJCQkJbEdsb2JhbCA9IG5HbG9iYWwgKiA0LAoKCQkJCQlkc3RBcnJheSA9IGNhY2hlLmNsaXBwaW5nU3RhdGUgfHwgbnVsbDsKCgkJCQl1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGUKCgkJCQlkc3RBcnJheSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBsR2xvYmFsLCBmcm9tQ2FjaGUgKTsKCgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IGxHbG9iYWw7ICsrIGkgKSB7CgoJCQkJCWRzdEFycmF5WyBpIF0gPSBnbG9iYWxTdGF0ZVsgaSBdOwoKCQkJCX0KCgkJCQljYWNoZS5jbGlwcGluZ1N0YXRlID0gZHN0QXJyYXk7CgkJCQl0aGlzLm51bUludGVyc2VjdGlvbiA9IGNsaXBJbnRlcnNlY3Rpb24gPyB0aGlzLm51bVBsYW5lcyA6IDA7CgkJCQl0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsOwoKCQkJfQoKCgkJfTsKCgkJZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHsKCgkJCWlmICggdW5pZm9ybS52YWx1ZSAhPT0gZ2xvYmFsU3RhdGUgKSB7CgoJCQkJdW5pZm9ybS52YWx1ZSA9IGdsb2JhbFN0YXRlOwoJCQkJdW5pZm9ybS5uZWVkc1VwZGF0ZSA9IG51bUdsb2JhbFBsYW5lcyA+IDA7CgoJCQl9CgoJCQlzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7CgkJCXNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7CgoJCX0KCgkJZnVuY3Rpb24gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSApIHsKCgkJCXZhciBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDAsCgkJCQlkc3RBcnJheSA9IG51bGw7CgoJCQlpZiAoIG5QbGFuZXMgIT09IDAgKSB7CgoJCQkJZHN0QXJyYXkgPSB1bmlmb3JtLnZhbHVlOwoKCQkJCWlmICggc2tpcFRyYW5zZm9ybSAhPT0gdHJ1ZSB8fCBkc3RBcnJheSA9PT0gbnVsbCApIHsKCgkJCQkJdmFyIGZsYXRTaXplID0gZHN0T2Zmc2V0ICsgblBsYW5lcyAqIDQsCgkJCQkJCXZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlOwoKCQkJCQl2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApOwoKCQkJCQlpZiAoIGRzdEFycmF5ID09PSBudWxsIHx8IGRzdEFycmF5Lmxlbmd0aCA8IGZsYXRTaXplICkgewoKCQkJCQkJZHN0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBmbGF0U2l6ZSApOwoKCQkJCQl9CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7CgoJCQkJCQlwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApOwoKCQkJCQkJcGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApOwoJCQkJCQlkc3RBcnJheVsgaTQgKyAzIF0gPSBwbGFuZS5jb25zdGFudDsKCgkJCQkJfQoKCQkJCX0KCgkJCQl1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7CgkJCQl1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCX0KCgkJCXNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7CgoJCQlyZXR1cm4gZHN0QXJyYXk7CgoJCX0KCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHsKCgkJdmFyIGV4dGVuc2lvbnMgPSB7fTsKCgkJcmV0dXJuIHsKCgkJCWdldDogZnVuY3Rpb24gKCBuYW1lICkgewoKCQkJCWlmICggZXh0ZW5zaW9uc1sgbmFtZSBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXJldHVybiBleHRlbnNpb25zWyBuYW1lIF07CgoJCQkJfQoKCQkJCXZhciBleHRlbnNpb247CgoJCQkJc3dpdGNoICggbmFtZSApIHsKCgkJCQkJY2FzZSAnV0VCR0xfZGVwdGhfdGV4dHVyZSc6CgkJCQkJCWV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmUnICk7CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnOgoJCQkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApOwoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnOgoJCQkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApOwoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJzoKCQkJCQkJZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7CgkJCQkJCWJyZWFrOwoKCQkJCQlkZWZhdWx0OgoJCQkJCQlleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oIG5hbWUgKTsKCgkJCQl9CgoJCQkJaWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nICk7CgoJCQkJfQoKCQkJCWV4dGVuc2lvbnNbIG5hbWUgXSA9IGV4dGVuc2lvbjsKCgkJCQlyZXR1cm4gZXh0ZW5zaW9uOwoKCQkJfQoKCQl9OwoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTEdlb21ldHJpZXMoIGdsLCBhdHRyaWJ1dGVzLCBpbmZvICkgewoKCQl2YXIgZ2VvbWV0cmllcyA9IG5ldyBXZWFrTWFwKCk7CgkJdmFyIHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpOwoKCQlmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZSggZXZlbnQgKSB7CgoJCQl2YXIgZ2VvbWV0cnkgPSBldmVudC50YXJnZXQ7CgkJCXZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBnZW9tZXRyeSApOwoKCQkJaWYgKCBidWZmZXJnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHsKCgkJCQlhdHRyaWJ1dGVzLnJlbW92ZSggYnVmZmVyZ2VvbWV0cnkuaW5kZXggKTsKCgkJCX0KCgkJCWZvciAoIHZhciBuYW1lIGluIGJ1ZmZlcmdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7CgoJCQkJYXR0cmlidXRlcy5yZW1vdmUoIGJ1ZmZlcmdlb21ldHJ5LmF0dHJpYnV0ZXNbIG5hbWUgXSApOwoKCQkJfQoKCQkJZ2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApOwoKCQkJZ2VvbWV0cmllcy5kZWxldGUoIGdlb21ldHJ5ICk7CgoJCQl2YXIgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGJ1ZmZlcmdlb21ldHJ5ICk7CgoJCQlpZiAoIGF0dHJpYnV0ZSApIHsKCgkJCQlhdHRyaWJ1dGVzLnJlbW92ZSggYXR0cmlidXRlICk7CgkJCQl3aXJlZnJhbWVBdHRyaWJ1dGVzLmRlbGV0ZSggYnVmZmVyZ2VvbWV0cnkgKTsKCgkJCX0KCgkJCS8vCgoJCQlpbmZvLm1lbW9yeS5nZW9tZXRyaWVzIC0tOwoKCQl9CgoJCWZ1bmN0aW9uIGdldCggb2JqZWN0LCBnZW9tZXRyeSApIHsKCgkJCXZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBnZW9tZXRyeSApOwoKCQkJaWYgKCBidWZmZXJnZW9tZXRyeSApIHsgcmV0dXJuIGJ1ZmZlcmdlb21ldHJ5OyB9CgoJCQlnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7CgoJCQlpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7CgoJCQkJYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyeTsKCgkJCX0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7CgoJCQkJaWYgKCBnZW9tZXRyeS5fYnVmZmVyR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbU9iamVjdCggb2JqZWN0ICk7CgoJCQkJfQoKCQkJCWJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5OwoKCQkJfQoKCQkJZ2VvbWV0cmllcy5zZXQoIGdlb21ldHJ5LCBidWZmZXJnZW9tZXRyeSApOwoKCQkJaW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKzsKCgkJCXJldHVybiBidWZmZXJnZW9tZXRyeTsKCgkJfQoKCQlmdW5jdGlvbiB1cGRhdGUoIGdlb21ldHJ5ICkgewoKCQkJdmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7CgkJCXZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwoKCQkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCgkJCQlhdHRyaWJ1dGVzLnVwZGF0ZSggaW5kZXgsIDM0OTYzICk7CgoJCQl9CgoJCQlmb3IgKCB2YXIgbmFtZSBpbiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7CgoJCQkJYXR0cmlidXRlcy51cGRhdGUoIGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdLCAzNDk2MiApOwoKCQkJfQoKCQkJLy8gbW9ycGggdGFyZ2V0cwoKCQkJdmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlczsKCgkJCWZvciAoIHZhciBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHsKCgkJCQl2YXIgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQlhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgMzQ5NjIgKTsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHsKCgkJCXZhciBpbmRpY2VzID0gW107CgoJCQl2YXIgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4OwoJCQl2YXIgZ2VvbWV0cnlQb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgkJCXZhciB2ZXJzaW9uID0gMDsKCgkJCWlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHsKCgkJCQl2YXIgYXJyYXkgPSBnZW9tZXRyeUluZGV4LmFycmF5OwoJCQkJdmVyc2lvbiA9IGdlb21ldHJ5SW5kZXgudmVyc2lvbjsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7CgoJCQkJCXZhciBhID0gYXJyYXlbIGkgKyAwIF07CgkJCQkJdmFyIGIgPSBhcnJheVsgaSArIDEgXTsKCQkJCQl2YXIgYyA9IGFycmF5WyBpICsgMiBdOwoKCQkJCQlpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCXZhciBhcnJheSA9IGdlb21ldHJ5UG9zaXRpb24uYXJyYXk7CgkJCQl2ZXJzaW9uID0gZ2VvbWV0cnlQb3NpdGlvbi52ZXJzaW9uOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHsKCgkJCQkJdmFyIGEgPSBpICsgMDsKCQkJCQl2YXIgYiA9IGkgKyAxOwoJCQkJCXZhciBjID0gaSArIDI7CgoJCQkJCWluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApOwoKCQkJCX0KCgkJCX0KCgkJCXZhciBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU1heCggaW5kaWNlcyApID4gNjU1MzUgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApOwoJCQlhdHRyaWJ1dGUudmVyc2lvbiA9IHZlcnNpb247CgoJCQlhdHRyaWJ1dGVzLnVwZGF0ZSggYXR0cmlidXRlLCAzNDk2MyApOwoKCQkJLy8KCgkJCXZhciBwcmV2aW91c0F0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApOwoKCQkJaWYgKCBwcmV2aW91c0F0dHJpYnV0ZSApIHsgYXR0cmlidXRlcy5yZW1vdmUoIHByZXZpb3VzQXR0cmlidXRlICk7IH0KCgkJCS8vCgoJCQl3aXJlZnJhbWVBdHRyaWJ1dGVzLnNldCggZ2VvbWV0cnksIGF0dHJpYnV0ZSApOwoKCQl9CgoJCWZ1bmN0aW9uIGdldFdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKSB7CgoJCQl2YXIgY3VycmVudEF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApOwoKCQkJaWYgKCBjdXJyZW50QXR0cmlidXRlICkgewoKCQkJCXZhciBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7CgoJCQkJaWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkgewoKCQkJCQkvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lCgoJCQkJCWlmICggY3VycmVudEF0dHJpYnV0ZS52ZXJzaW9uIDwgZ2VvbWV0cnlJbmRleC52ZXJzaW9uICkgewoKCQkJCQkJdXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQl1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7CgoJCQl9CgoJCQlyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7CgoJCX0KCgkJcmV0dXJuIHsKCgkJCWdldDogZ2V0LAoJCQl1cGRhdGU6IHVwZGF0ZSwKCgkJCWdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlCgoJCX07CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICkgewoKCQl2YXIgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7CgoJCXZhciBtb2RlOwoKCQlmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHsKCgkJCW1vZGUgPSB2YWx1ZTsKCgkJfQoKCQl2YXIgdHlwZSwgYnl0ZXNQZXJFbGVtZW50OwoKCQlmdW5jdGlvbiBzZXRJbmRleCggdmFsdWUgKSB7CgoJCQl0eXBlID0gdmFsdWUudHlwZTsKCQkJYnl0ZXNQZXJFbGVtZW50ID0gdmFsdWUuYnl0ZXNQZXJFbGVtZW50OwoKCQl9CgoJCWZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkgewoKCQkJZ2wuZHJhd0VsZW1lbnRzKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQgKTsKCgkJCWluZm8udXBkYXRlKCBjb3VudCwgbW9kZSApOwoKCQl9CgoJCWZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggZ2VvbWV0cnksIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkgewoKCQkJaWYgKCBwcmltY291bnQgPT09IDAgKSB7IHJldHVybjsgfQoKCQkJdmFyIGV4dGVuc2lvbiwgbWV0aG9kTmFtZTsKCgkJCWlmICggaXNXZWJHTDIgKSB7CgoJCQkJZXh0ZW5zaW9uID0gZ2w7CgkJCQltZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCc7CgoJCQl9IGVsc2UgewoKCQkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTsKCQkJCW1ldGhvZE5hbWUgPSAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnOwoKCQkJCWlmICggZXh0ZW5zaW9uID09PSBudWxsICkgewoKCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTsKCQkJCQlyZXR1cm47CgoJCQkJfQoKCQkJfQoKCQkJZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCwgcHJpbWNvdW50ICk7CgoJCQlpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApOwoKCQl9CgoJCS8vCgoJCXRoaXMuc2V0TW9kZSA9IHNldE1vZGU7CgkJdGhpcy5zZXRJbmRleCA9IHNldEluZGV4OwoJCXRoaXMucmVuZGVyID0gcmVuZGVyOwoJCXRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzOwoKCX0KCgkvKioKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCglmdW5jdGlvbiBXZWJHTEluZm8oIGdsICkgewoKCQl2YXIgbWVtb3J5ID0gewoJCQlnZW9tZXRyaWVzOiAwLAoJCQl0ZXh0dXJlczogMAoJCX07CgoJCXZhciByZW5kZXIgPSB7CgkJCWZyYW1lOiAwLAoJCQljYWxsczogMCwKCQkJdHJpYW5nbGVzOiAwLAoJCQlwb2ludHM6IDAsCgkJCWxpbmVzOiAwCgkJfTsKCgkJZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHsKCgkJCWluc3RhbmNlQ291bnQgPSBpbnN0YW5jZUNvdW50IHx8IDE7CgoJCQlyZW5kZXIuY2FsbHMgKys7CgoJCQlzd2l0Y2ggKCBtb2RlICkgewoKCQkJCWNhc2UgNDoKCQkJCQlyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgMToKCQkJCQlyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAyICk7CgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAzOgoJCQkJCXJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDEgKTsKCQkJCQlicmVhazsKCgkJCQljYXNlIDI6CgkJCQkJcmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDsKCQkJCQlicmVhazsKCgkJCQljYXNlIDA6CgkJCQkJcmVuZGVyLnBvaW50cyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7CgkJCQkJYnJlYWs7CgoJCQkJZGVmYXVsdDoKCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmZvOiBVbmtub3duIGRyYXcgbW9kZTonLCBtb2RlICk7CgkJCQkJYnJlYWs7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gcmVzZXQoKSB7CgoJCQlyZW5kZXIuZnJhbWUgKys7CgkJCXJlbmRlci5jYWxscyA9IDA7CgkJCXJlbmRlci50cmlhbmdsZXMgPSAwOwoJCQlyZW5kZXIucG9pbnRzID0gMDsKCQkJcmVuZGVyLmxpbmVzID0gMDsKCgkJfQoKCQlyZXR1cm4gewoJCQltZW1vcnk6IG1lbW9yeSwKCQkJcmVuZGVyOiByZW5kZXIsCgkJCXByb2dyYW1zOiBudWxsLAoJCQlhdXRvUmVzZXQ6IHRydWUsCgkJCXJlc2V0OiByZXNldCwKCQkJdXBkYXRlOiB1cGRhdGUKCQl9OwoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBhYnNOdW1lcmljYWxTb3J0KCBhLCBiICkgewoKCQlyZXR1cm4gTWF0aC5hYnMoIGJbIDEgXSApIC0gTWF0aC5hYnMoIGFbIDEgXSApOwoKCX0KCglmdW5jdGlvbiBXZWJHTE1vcnBodGFyZ2V0cyggZ2wgKSB7CgoJCXZhciBpbmZsdWVuY2VzTGlzdCA9IHt9OwoJCXZhciBtb3JwaEluZmx1ZW5jZXMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICk7CgoJCWZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKSB7CgoJCQl2YXIgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7CgoJCQkvLyBXaGVuIG9iamVjdCBkb2Vzbid0IGhhdmUgbW9ycGggdGFyZ2V0IGluZmx1ZW5jZXMgZGVmaW5lZCwgd2UgdHJlYXQgaXQgYXMgYSAwLWxlbmd0aCBhcnJheQoJCQkvLyBUaGlzIGlzIGltcG9ydGFudCB0byBtYWtlIHN1cmUgd2Ugc2V0IHVwIG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZSAvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcwoKCQkJdmFyIGxlbmd0aCA9IG9iamVjdEluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCA/IDAgOiBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsKCgkJCXZhciBpbmZsdWVuY2VzID0gaW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF07CgoJCQlpZiAoIGluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBpbml0aWFsaXNlIGxpc3QKCgkJCQlpbmZsdWVuY2VzID0gW107CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkgewoKCQkJCQlpbmZsdWVuY2VzWyBpIF0gPSBbIGksIDAgXTsKCgkJCQl9CgoJCQkJaW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzOwoKCQkJfQoKCQkJdmFyIG1vcnBoVGFyZ2V0cyA9IG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247CgkJCXZhciBtb3JwaE5vcm1hbHMgPSBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDsKCgkJCS8vIFJlbW92ZSBjdXJyZW50IG1vcnBoQXR0cmlidXRlcwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkgewoKCQkJCXZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07CgoJCQkJaWYgKCBpbmZsdWVuY2VbIDEgXSAhPT0gMCApIHsKCgkJCQkJaWYgKCBtb3JwaFRhcmdldHMgKSB7IGdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKTsgfQoJCQkJCWlmICggbW9ycGhOb3JtYWxzICkgeyBnZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdtb3JwaE5vcm1hbCcgKyBpICk7IH0KCgkJCQl9CgoJCQl9CgoJCQkvLyBDb2xsZWN0IGluZmx1ZW5jZXMKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHsKCgkJCQl2YXIgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdOwoKCQkJCWluZmx1ZW5jZVsgMCBdID0gaTsKCQkJCWluZmx1ZW5jZVsgMSBdID0gb2JqZWN0SW5mbHVlbmNlc1sgaSBdOwoKCQkJfQoKCQkJaW5mbHVlbmNlcy5zb3J0KCBhYnNOdW1lcmljYWxTb3J0ICk7CgoJCQkvLyBBZGQgbW9ycGhBdHRyaWJ1dGVzCgoJCQl2YXIgbW9ycGhJbmZsdWVuY2VzU3VtID0gMDsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IDg7IGkgKysgKSB7CgoJCQkJdmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTsKCgkJCQlpZiAoIGluZmx1ZW5jZSApIHsKCgkJCQkJdmFyIGluZGV4ID0gaW5mbHVlbmNlWyAwIF07CgkJCQkJdmFyIHZhbHVlID0gaW5mbHVlbmNlWyAxIF07CgoJCQkJCWlmICggdmFsdWUgKSB7CgoJCQkJCQlpZiAoIG1vcnBoVGFyZ2V0cyApIHsgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbW9ycGhUYXJnZXQnICsgaSwgbW9ycGhUYXJnZXRzWyBpbmRleCBdICk7IH0KCQkJCQkJaWYgKCBtb3JwaE5vcm1hbHMgKSB7IGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGksIG1vcnBoTm9ybWFsc1sgaW5kZXggXSApOyB9CgoJCQkJCQltb3JwaEluZmx1ZW5jZXNbIGkgXSA9IHZhbHVlOwoJCQkJCQltb3JwaEluZmx1ZW5jZXNTdW0gKz0gdmFsdWU7CgkJCQkJCWNvbnRpbnVlOwoKCQkJCQl9CgoJCQkJfQoKCQkJCW1vcnBoSW5mbHVlbmNlc1sgaSBdID0gMDsKCgkJCX0KCgkJCS8vIEdMU0wgc2hhZGVyIHVzZXMgZm9ybXVsYSBiYXNlaW5mbHVlbmNlICogYmFzZSArIHN1bSh0YXJnZXQgKiBpbmZsdWVuY2UpCgkJCS8vIFRoaXMgYWxsb3dzIHVzIHRvIHN3aXRjaCBiZXR3ZWVuIGFic29sdXRlIG1vcnBocyBhbmQgcmVsYXRpdmUgbW9ycGhzIHdpdGhvdXQgY2hhbmdpbmcgc2hhZGVyIGNvZGUKCQkJLy8gV2hlbiBiYXNlaW5mbHVlbmNlID0gMSAtIHN1bShpbmZsdWVuY2UpLCB0aGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0byBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKQoJCQl2YXIgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTsKCgkJCXByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2UnLCBtb3JwaEJhc2VJbmZsdWVuY2UgKTsKCQkJcHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG1vcnBoSW5mbHVlbmNlcyApOwoKCQl9CgoJCXJldHVybiB7CgoJCQl1cGRhdGU6IHVwZGF0ZQoKCQl9OwoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTE9iamVjdHMoIGdsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvICkgewoKCQl2YXIgdXBkYXRlTGlzdCA9IHt9OwoKCQlmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHsKCgkJCXZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lOwoKCQkJdmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5OwoJCQl2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApOwoKCQkJLy8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lCgoJCQlpZiAoIHVwZGF0ZUxpc3RbIGJ1ZmZlcmdlb21ldHJ5LmlkIF0gIT09IGZyYW1lICkgewoKCQkJCWlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCQkJYnVmZmVyZ2VvbWV0cnkudXBkYXRlRnJvbU9iamVjdCggb2JqZWN0ICk7CgoJCQkJfQoKCQkJCWdlb21ldHJpZXMudXBkYXRlKCBidWZmZXJnZW9tZXRyeSApOwoKCQkJCXVwZGF0ZUxpc3RbIGJ1ZmZlcmdlb21ldHJ5LmlkIF0gPSBmcmFtZTsKCgkJCX0KCgkJCWlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCApIHsKCgkJCQlhdHRyaWJ1dGVzLnVwZGF0ZSggb2JqZWN0Lmluc3RhbmNlTWF0cml4LCAzNDk2MiApOwoKCQkJfQoKCQkJcmV0dXJuIGJ1ZmZlcmdlb21ldHJ5OwoKCQl9CgoJCWZ1bmN0aW9uIGRpc3Bvc2UoKSB7CgoJCQl1cGRhdGVMaXN0ID0ge307CgoJCX0KCgkJcmV0dXJuIHsKCgkJCXVwZGF0ZTogdXBkYXRlLAoJCQlkaXNwb3NlOiBkaXNwb3NlCgoJCX07CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIEN1YmVUZXh0dXJlKCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7CgoJCWltYWdlcyA9IGltYWdlcyAhPT0gdW5kZWZpbmVkID8gaW1hZ2VzIDogW107CgkJbWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7CgkJZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBSR0JGb3JtYXQ7CgoJCVRleHR1cmUuY2FsbCggdGhpcywgaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7CgoJCXRoaXMuZmxpcFkgPSBmYWxzZTsKCgl9CgoJQ3ViZVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTsKCUN1YmVUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVUZXh0dXJlOwoKCUN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoIEN1YmVUZXh0dXJlLnByb3RvdHlwZSwgJ2ltYWdlcycsIHsKCgkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5pbWFnZTsKCgkJfSwKCgkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy5pbWFnZSA9IHZhbHVlOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBUYWthaGlybyBodHRwczovL2dpdGh1Yi5jb20vdGFrYWhpcm94CgkgKi8KCglmdW5jdGlvbiBEYXRhVGV4dHVyZTJEQXJyYXkoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkgewoKCQlUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwgKTsKCgkJdGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSwgZGVwdGg6IGRlcHRoIHx8IDEgfTsKCgkJdGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyOwoJCXRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCgkJdGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7CgoJCXRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7CgkJdGhpcy5mbGlwWSA9IGZhbHNlOwoKCQl0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgl9CgoJRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7CglEYXRhVGV4dHVyZTJEQXJyYXkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmUyREFycmF5OwoJRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlMkRBcnJheSA9IHRydWU7CgoJLyoqCgkgKiBAYXV0aG9yIEFydHVyIFRyemVzaW9rCgkgKi8KCglmdW5jdGlvbiBEYXRhVGV4dHVyZTNEKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApIHsKCgkJLy8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuCgkJLy8gVXNlcnMgY2FuIHN0aWxsIHNldCBpbiBEYXRhVGV4dHVyZTNEIGRpcmVjdGx5LgoJCS8vCgkJLy8JdmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YVRleHR1cmUzRCggZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTsKCQkvLyAJdGV4dHVyZS5hbmlzb3Ryb3B5ID0gMTY7CgkJLy8KCQkvLyBTZWUgIzE0ODM5CgoJCVRleHR1cmUuY2FsbCggdGhpcywgbnVsbCApOwoKCQl0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhIHx8IG51bGwsIHdpZHRoOiB3aWR0aCB8fCAxLCBoZWlnaHQ6IGhlaWdodCB8fCAxLCBkZXB0aDogZGVwdGggfHwgMSB9OwoKCQl0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7CgkJdGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyOwoKCQl0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZzsKCgkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCQl0aGlzLmZsaXBZID0gZmFsc2U7CgoJCXRoaXMubmVlZHNVcGRhdGUgPSB0cnVlOwoKCgl9CgoJRGF0YVRleHR1cmUzRC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApOwoJRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhVGV4dHVyZTNEOwoJRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZTNEID0gdHJ1ZTsKCgkvKioKCSAqIEBhdXRob3IgdHNjaHcKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICoKCSAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS4KCSAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCwKCSAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLgoJICoKCSAqCgkgKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjoKCSAqCgkgKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zCgkgKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWUKCSAqCgkgKgoJICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOgoJICoKCSAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdICkKCSAqCgkgKiAJCXVwbG9hZHMgYSB1bmlmb3JtIHZhbHVlKHMpCgkgKiAgCXRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXMKCSAqCgkgKgoJICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKToKCSAqCgkgKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzICkKCSAqCgkgKiAJCXNldHMgdW5pZm9ybXMgaW4gJ3NlcScgdG8gJ3ZhbHVlc1tpZF0udmFsdWUnCgkgKgoJICogLnNlcVdpdGhWYWx1ZSggc2VxLCB2YWx1ZXMgKSA6IGZpbHRlcmVkU2VxCgkgKgoJICogCQlmaWx0ZXJzICdzZXEnIGVudHJpZXMgd2l0aCBjb3JyZXNwb25kaW5nIGVudHJ5IGluIHZhbHVlcwoJICoKCSAqCgkgKiBNZXRob2RzIG9mIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyICh0ZXh0dXJlcyBmYWN0b3JpemF0aW9ucyk6CgkgKgoJICogLnNldFZhbHVlKCBnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzICkKCSAqCgkgKiAJCXNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnCgkgKgoJICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wICkKCSAqCgkgKiAJCWxpa2UgLnNldCBmb3IgYW4gb3B0aW9uYWwgcHJvcGVydHkgb2YgdGhlIG9iamVjdAoJICoKCSAqLwoKCXZhciBlbXB0eVRleHR1cmUgPSBuZXcgVGV4dHVyZSgpOwoJdmFyIGVtcHR5VGV4dHVyZTJkQXJyYXkgPSBuZXcgRGF0YVRleHR1cmUyREFycmF5KCk7Cgl2YXIgZW1wdHlUZXh0dXJlM2QgPSBuZXcgRGF0YVRleHR1cmUzRCgpOwoJdmFyIGVtcHR5Q3ViZVRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTsKCgkvLyAtLS0gVXRpbGl0aWVzIC0tLQoKCS8vIEFycmF5IENhY2hlcyAocHJvdmlkZSB0eXBlZCBhcnJheXMgZm9yIHRlbXBvcmFyeSBieSBzaXplKQoKCXZhciBhcnJheUNhY2hlRjMyID0gW107Cgl2YXIgYXJyYXlDYWNoZUkzMiA9IFtdOwoKCS8vIEZsb2F0MzJBcnJheSBjYWNoZXMgdXNlZCBmb3IgdXBsb2FkaW5nIE1hdHJpeCB1bmlmb3JtcwoKCXZhciBtYXQ0YXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCAxNiApOwoJdmFyIG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDkgKTsKCXZhciBtYXQyYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA0ICk7CgoJLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzCgoJZnVuY3Rpb24gZmxhdHRlbiggYXJyYXksIG5CbG9ja3MsIGJsb2NrU2l6ZSApIHsKCgkJdmFyIGZpcnN0RWxlbSA9IGFycmF5WyAwIF07CgoJCWlmICggZmlyc3RFbGVtIDw9IDAgfHwgZmlyc3RFbGVtID4gMCApIHsgcmV0dXJuIGFycmF5OyB9CgkJLy8gdW5vcHRpbWl6ZWQ6ICEgaXNOYU4oIGZpcnN0RWxlbSApCgkJLy8gc2VlIGh0dHA6Ly9qYWNrc29uZHVuc3Rhbi5jb20vYXJ0aWNsZXMvOTgzCgoJCXZhciBuID0gbkJsb2NrcyAqIGJsb2NrU2l6ZSwKCQkJciA9IGFycmF5Q2FjaGVGMzJbIG4gXTsKCgkJaWYgKCByID09PSB1bmRlZmluZWQgKSB7CgoJCQlyID0gbmV3IEZsb2F0MzJBcnJheSggbiApOwoJCQlhcnJheUNhY2hlRjMyWyBuIF0gPSByOwoKCQl9CgoJCWlmICggbkJsb2NrcyAhPT0gMCApIHsKCgkJCWZpcnN0RWxlbS50b0FycmF5KCByLCAwICk7CgoJCQlmb3IgKCB2YXIgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsrIGkgKSB7CgoJCQkJb2Zmc2V0ICs9IGJsb2NrU2l6ZTsKCQkJCWFycmF5WyBpIF0udG9BcnJheSggciwgb2Zmc2V0ICk7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIHI7CgoJfQoKCWZ1bmN0aW9uIGFycmF5c0VxdWFsKCBhLCBiICkgewoKCQlpZiAoIGEubGVuZ3RoICE9PSBiLmxlbmd0aCApIHsgcmV0dXJuIGZhbHNlOyB9CgoJCWZvciAoIHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCWlmICggYVsgaSBdICE9PSBiWyBpIF0gKSB7IHJldHVybiBmYWxzZTsgfQoKCQl9CgoJCXJldHVybiB0cnVlOwoKCX0KCglmdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7CgoJCWZvciAoIHZhciBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCWFbIGkgXSA9IGJbIGkgXTsKCgkJfQoKCX0KCgkvLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvbgoKCWZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICkgewoKCQl2YXIgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTsKCgkJaWYgKCByID09PSB1bmRlZmluZWQgKSB7CgoJCQlyID0gbmV3IEludDMyQXJyYXkoIG4gKTsKCQkJYXJyYXlDYWNoZUkzMlsgbiBdID0gcjsKCgkJfQoKCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKQoJCQl7IHJbIGkgXSA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTsgfQoKCQlyZXR1cm4gcjsKCgl9CgoJLy8gLS0tIFNldHRlcnMgLS0tCgoJLy8gTm90ZTogRGVmaW5pbmcgdGhlc2UgbWV0aG9kcyBleHRlcm5hbGx5LCBiZWNhdXNlIHRoZXkgY29tZSBpbiBhIGJ1bmNoCgkvLyBhbmQgdGhpcyB3YXkgdGhlaXIgbmFtZXMgbWluaWZ5LgoKCS8vIFNpbmdsZSBzY2FsYXIKCglmdW5jdGlvbiBzZXRWYWx1ZVYxZiggZ2wsIHYgKSB7CgoJCXZhciBjYWNoZSA9IHRoaXMuY2FjaGU7CgoJCWlmICggY2FjaGVbIDAgXSA9PT0gdiApIHsgcmV0dXJuOyB9CgoJCWdsLnVuaWZvcm0xZiggdGhpcy5hZGRyLCB2ICk7CgoJCWNhY2hlWyAwIF0gPSB2OwoKCX0KCgkvLyBTaW5nbGUgZmxvYXQgdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuVmVjdG9yTikKCglmdW5jdGlvbiBzZXRWYWx1ZVYyZiggZ2wsIHYgKSB7CgoJCXZhciBjYWNoZSA9IHRoaXMuY2FjaGU7CgoJCWlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7CgoJCQlpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7CgoJCQkJZ2wudW5pZm9ybTJmKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7CgoJCQkJY2FjaGVbIDAgXSA9IHYueDsKCQkJCWNhY2hlWyAxIF0gPSB2Lnk7CgoJCQl9CgoJCX0gZWxzZSB7CgoJCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJCWdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApOwoKCQkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKCQl9CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlVjNmKCBnbCwgdiApIHsKCgkJdmFyIGNhY2hlID0gdGhpcy5jYWNoZTsKCgkJaWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHsKCgkJCWlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7CgoJCQkJZ2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnogKTsKCgkJCQljYWNoZVsgMCBdID0gdi54OwoJCQkJY2FjaGVbIDEgXSA9IHYueTsKCQkJCWNhY2hlWyAyIF0gPSB2Lno7CgoJCQl9CgoJCX0gZWxzZSBpZiAoIHYuciAhPT0gdW5kZWZpbmVkICkgewoKCQkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnIgfHwgY2FjaGVbIDEgXSAhPT0gdi5nIHx8IGNhY2hlWyAyIF0gIT09IHYuYiApIHsKCgkJCQlnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi5yLCB2LmcsIHYuYiApOwoKCQkJCWNhY2hlWyAwIF0gPSB2LnI7CgkJCQljYWNoZVsgMSBdID0gdi5nOwoJCQkJY2FjaGVbIDIgXSA9IHYuYjsKCgkJCX0KCgkJfSBlbHNlIHsKCgkJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSB7IHJldHVybjsgfQoKCQkJZ2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCB2ICk7CgoJCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgoJCX0KCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVWNGYoIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoKCQlpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkgewoKCQkJaWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7CgoJCQkJZ2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApOwoKCQkJCWNhY2hlWyAwIF0gPSB2Lng7CgkJCQljYWNoZVsgMSBdID0gdi55OwoJCQkJY2FjaGVbIDIgXSA9IHYuejsKCQkJCWNhY2hlWyAzIF0gPSB2Lnc7CgoJCQl9CgoJCX0gZWxzZSB7CgoJCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJCWdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgdiApOwoKCQkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKCQl9CgoJfQoKCS8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBNYXRyaXhOKQoKCWZ1bmN0aW9uIHNldFZhbHVlTTIoIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoJCXZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7CgoJCWlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHsKCgkJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSB7IHJldHVybjsgfQoKCQkJZ2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApOwoKCQkJY29weUFycmF5KCBjYWNoZSwgdiApOwoKCQl9IGVsc2UgewoKCQkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSB7IHJldHVybjsgfQoKCQkJbWF0MmFycmF5LnNldCggZWxlbWVudHMgKTsKCgkJCWdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDJhcnJheSApOwoKCQkJY29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTsKCgkJfQoKCX0KCglmdW5jdGlvbiBzZXRWYWx1ZU0zKCBnbCwgdiApIHsKCgkJdmFyIGNhY2hlID0gdGhpcy5jYWNoZTsKCQl2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzOwoKCQlpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7CgoJCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJCWdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTsKCgkJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCgkJfSBlbHNlIHsKCgkJCWlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgeyByZXR1cm47IH0KCgkJCW1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7CgoJCQlnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTsKCgkJCWNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7CgoJCX0KCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVNNCggZ2wsIHYgKSB7CgoJCXZhciBjYWNoZSA9IHRoaXMuY2FjaGU7CgkJdmFyIGVsZW1lbnRzID0gdi5lbGVtZW50czsKCgkJaWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkgewoKCQkJaWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHsgcmV0dXJuOyB9CgoJCQlnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7CgoJCQljb3B5QXJyYXkoIGNhY2hlLCB2ICk7CgoJCX0gZWxzZSB7CgoJCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHsgcmV0dXJuOyB9CgoJCQltYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApOwoKCQkJZ2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7CgoJCQljb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApOwoKCQl9CgoJfQoKCS8vIFNpbmdsZSB0ZXh0dXJlICgyRCAvIEN1YmUpCgoJZnVuY3Rpb24gc2V0VmFsdWVUMSggZ2wsIHYsIHRleHR1cmVzICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoJCXZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKCQlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgoJCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwoJCQljYWNoZVsgMCBdID0gdW5pdDsKCgkJfQoKCQl0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZTJEKCB2IHx8IGVtcHR5VGV4dHVyZSwgdW5pdCApOwoKCX0KCglmdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5MSggZ2wsIHYsIHRleHR1cmVzICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoJCXZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKCQlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgoJCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwoJCQljYWNoZVsgMCBdID0gdW5pdDsKCgkJfQoKCQl0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggdiB8fCBlbXB0eVRleHR1cmUyZEFycmF5LCB1bml0ICk7CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlVDNEMSggZ2wsIHYsIHRleHR1cmVzICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoJCXZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKCQlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgoJCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwoJCQljYWNoZVsgMCBdID0gdW5pdDsKCgkJfQoKCQl0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHlUZXh0dXJlM2QsIHVuaXQgKTsKCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoJCXZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpOwoKCQlpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7CgoJCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApOwoJCQljYWNoZVsgMCBdID0gdW5pdDsKCgkJfQoKCQl0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZUN1YmUoIHYgfHwgZW1wdHlDdWJlVGV4dHVyZSwgdW5pdCApOwoKCX0KCgkvLyBJbnRlZ2VyIC8gQm9vbGVhbiB2ZWN0b3JzIG9yIGFycmF5cyB0aGVyZW9mIChhbHdheXMgZmxhdCBhcnJheXMpCgoJZnVuY3Rpb24gc2V0VmFsdWVWMWkoIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoKCQlpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSB7IHJldHVybjsgfQoKCQlnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdiApOwoKCQljYWNoZVsgMCBdID0gdjsKCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVWMmkoIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoKCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJZ2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7CgoJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVWM2koIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoKCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJZ2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7CgoJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVWNGkoIGdsLCB2ICkgewoKCQl2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwoKCQlpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgeyByZXR1cm47IH0KCgkJZ2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7CgoJCWNvcHlBcnJheSggY2FjaGUsIHYgKTsKCgl9CgoJLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgdGhlIHNpbmd1bGFyIGNhc2UKCglmdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHsKCgkJc3dpdGNoICggdHlwZSApIHsKCgkJCWNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWVWMWY7IC8vIEZMT0FUCgkJCWNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmY7IC8vIF9WRUMyCgkJCWNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzCgkJCWNhc2UgMHg4YjUyOiByZXR1cm4gc2V0VmFsdWVWNGY7IC8vIF9WRUM0CgoJCQljYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTI7IC8vIF9NQVQyCgkJCWNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNMzsgLy8gX01BVDMKCQkJY2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNAoKCQkJY2FzZSAweDhiNWU6IGNhc2UgMHg4ZDY2OiByZXR1cm4gc2V0VmFsdWVUMTsgLy8gU0FNUExFUl8yRCwgU0FNUExFUl9FWFRFUk5BTF9PRVMKCQkJY2FzZSAweDhiNWY6IHJldHVybiBzZXRWYWx1ZVQzRDE7IC8vIFNBTVBMRVJfM0QKCQkJY2FzZSAweDhiNjA6IHJldHVybiBzZXRWYWx1ZVQ2OyAvLyBTQU1QTEVSX0NVQkUKCQkJY2FzZSAweDhEQzE6IHJldHVybiBzZXRWYWx1ZVQyREFycmF5MTsgLy8gU0FNUExFUl8yRF9BUlJBWQoKCQkJY2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTAoJCQljYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZVYyaTsgLy8gX1ZFQzIKCQkJY2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2k7IC8vIF9WRUMzCgkJCWNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNAoKCQl9CgoJfQoKCS8vIEFycmF5IG9mIHNjYWxhcnMKCWZ1bmN0aW9uIHNldFZhbHVlVjFmQXJyYXkoIGdsLCB2ICkgewoKCQlnbC51bmlmb3JtMWZ2KCB0aGlzLmFkZHIsIHYgKTsKCgl9CgoJLy8gSW50ZWdlciAvIEJvb2xlYW4gdmVjdG9ycyBvciBhcnJheXMgdGhlcmVvZiAoYWx3YXlzIGZsYXQgYXJyYXlzKQoJZnVuY3Rpb24gc2V0VmFsdWVWMWlBcnJheSggZ2wsIHYgKSB7CgoJCWdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApOwoKCX0KCglmdW5jdGlvbiBzZXRWYWx1ZVYyaUFycmF5KCBnbCwgdiApIHsKCgkJZ2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlVjNpQXJyYXkoIGdsLCB2ICkgewoKCQlnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTsKCgl9CgoJZnVuY3Rpb24gc2V0VmFsdWVWNGlBcnJheSggZ2wsIHYgKSB7CgoJCWdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApOwoKCX0KCgoJLy8gQXJyYXkgb2YgdmVjdG9ycyAoZmxhdCBvciBmcm9tIFRIUkVFIGNsYXNzZXMpCgoJZnVuY3Rpb24gc2V0VmFsdWVWMmZBcnJheSggZ2wsIHYgKSB7CgoJCXZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAyICk7CgoJCWdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgZGF0YSApOwoKCX0KCglmdW5jdGlvbiBzZXRWYWx1ZVYzZkFycmF5KCBnbCwgdiApIHsKCgkJdmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDMgKTsKCgkJZ2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlVjRmQXJyYXkoIGdsLCB2ICkgewoKCQl2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApOwoKCQlnbC51bmlmb3JtNGZ2KCB0aGlzLmFkZHIsIGRhdGEgKTsKCgl9CgoJLy8gQXJyYXkgb2YgbWF0cmljZXMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzZXMpCgoJZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHsKCgkJdmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTsKCgkJZ2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApOwoKCX0KCglmdW5jdGlvbiBzZXRWYWx1ZU0zQXJyYXkoIGdsLCB2ICkgewoKCQl2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgOSApOwoKCQlnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlTTRBcnJheSggZ2wsIHYgKSB7CgoJCXZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAxNiApOwoKCQlnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7CgoJfQoKCS8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIEN1YmUpCgoJZnVuY3Rpb24gc2V0VmFsdWVUMUFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7CgoJCXZhciBuID0gdi5sZW5ndGg7CgoJCXZhciB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7CgoJCWdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTsKCgkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkgewoKCQkJdGV4dHVyZXMuc2FmZVNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApOwoKCQl9CgoJfQoKCWZ1bmN0aW9uIHNldFZhbHVlVDZBcnJheSggZ2wsIHYsIHRleHR1cmVzICkgewoKCQl2YXIgbiA9IHYubGVuZ3RoOwoKCQl2YXIgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApOwoKCQlnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7CgoJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCXRleHR1cmVzLnNhZmVTZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTsKCgkJfQoKCX0KCgkvLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXkKCglmdW5jdGlvbiBnZXRQdXJlQXJyYXlTZXR0ZXIoIHR5cGUgKSB7CgoJCXN3aXRjaCAoIHR5cGUgKSB7CgoJCQljYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUCgkJCWNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmZBcnJheTsgLy8gX1ZFQzIKCQkJY2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZkFycmF5OyAvLyBfVkVDMwoJCQljYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0CgoJCQljYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDIKCQkJY2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzCgkJCWNhc2UgMHg4YjVjOiByZXR1cm4gc2V0VmFsdWVNNEFycmF5OyAvLyBfTUFUNAoKCQkJY2FzZSAweDhiNWU6IHJldHVybiBzZXRWYWx1ZVQxQXJyYXk7IC8vIFNBTVBMRVJfMkQKCQkJY2FzZSAweDhiNjA6IHJldHVybiBzZXRWYWx1ZVQ2QXJyYXk7IC8vIFNBTVBMRVJfQ1VCRQoKCQkJY2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWlBcnJheTsgLy8gSU5ULCBCT09MCgkJCWNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyCgkJCWNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpQXJyYXk7IC8vIF9WRUMzCgkJCWNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpQXJyYXk7IC8vIF9WRUM0CgoJCX0KCgl9CgoJLy8gLS0tIFVuaWZvcm0gQ2xhc3NlcyAtLS0KCglmdW5jdGlvbiBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHsKCgkJdGhpcy5pZCA9IGlkOwoJCXRoaXMuYWRkciA9IGFkZHI7CgkJdGhpcy5jYWNoZSA9IFtdOwoJCXRoaXMuc2V0VmFsdWUgPSBnZXRTaW5ndWxhclNldHRlciggYWN0aXZlSW5mby50eXBlICk7CgoJCS8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUcKCgl9CgoJZnVuY3Rpb24gUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7CgoJCXRoaXMuaWQgPSBpZDsKCQl0aGlzLmFkZHIgPSBhZGRyOwoJCXRoaXMuY2FjaGUgPSBbXTsKCQl0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7CgkJdGhpcy5zZXRWYWx1ZSA9IGdldFB1cmVBcnJheVNldHRlciggYWN0aXZlSW5mby50eXBlICk7CgoJCS8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUcKCgl9CgoJUHVyZUFycmF5VW5pZm9ybS5wcm90b3R5cGUudXBkYXRlQ2FjaGUgPSBmdW5jdGlvbiAoIGRhdGEgKSB7CgoJCXZhciBjYWNoZSA9IHRoaXMuY2FjaGU7CgoJCWlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkgewoKCQkJdGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7CgoJCX0KCgkJY29weUFycmF5KCBjYWNoZSwgZGF0YSApOwoKCX07CgoJZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkgewoKCQl0aGlzLmlkID0gaWQ7CgoJCXRoaXMuc2VxID0gW107CgkJdGhpcy5tYXAgPSB7fTsKCgl9CgoJU3RydWN0dXJlZFVuaWZvcm0ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgdmFsdWUsIHRleHR1cmVzICkgewoKCQl2YXIgc2VxID0gdGhpcy5zZXE7CgoJCWZvciAoIHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQl2YXIgdSA9IHNlcVsgaSBdOwoJCQl1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgdGV4dHVyZXMgKTsKCgkJfQoKCX07CgoJLy8gLS0tIFRvcC1sZXZlbCAtLS0KCgkvLyBQYXJzZXIgLSBidWlsZHMgdXAgdGhlIHByb3BlcnR5IHRyZWUgZnJvbSB0aGUgcGF0aCBzdHJpbmdzCgoJdmFyIFJlUGF0aFBhcnQgPSAvKFtcd1xkX10rKShcXSk/KFxbfFwuKT8vZzsKCgkvLyBleHRyYWN0cwoJLy8gCS0gdGhlIGlkZW50aWZpZXIgKG1lbWJlciBuYW1lIG9yIGFycmF5IGluZGV4KQoJLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgcmlnaHQgYnJhY2tldCAoZm91bmQgd2hlbiBhcnJheSBpbmRleCkKCS8vICAtIGZvbGxvd2VkIGJ5IGFuIG9wdGlvbmFsIGxlZnQgYnJhY2tldCBvciBkb3QgKHR5cGUgb2Ygc3Vic2NyaXB0KQoJLy8KCS8vIE5vdGU6IFRoZXNlIHBvcnRpb25zIGNhbiBiZSByZWFkIGluIGEgbm9uLW92ZXJsYXBwaW5nIGZhc2hpb24gYW5kCgkvLyBhbGxvdyBzdHJhaWdodGZvcndhcmQgcGFyc2luZyBvZiB0aGUgaGllcmFyY2h5IHRoYXQgV2ViR0wgZW5jb2RlcwoJLy8gaW4gdGhlIHVuaWZvcm0gbmFtZXMuCgoJZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkgewoKCQljb250YWluZXIuc2VxLnB1c2goIHVuaWZvcm1PYmplY3QgKTsKCQljb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0OwoKCX0KCglmdW5jdGlvbiBwYXJzZVVuaWZvcm0oIGFjdGl2ZUluZm8sIGFkZHIsIGNvbnRhaW5lciApIHsKCgkJdmFyIHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsCgkJCXBhdGhMZW5ndGggPSBwYXRoLmxlbmd0aDsKCgkJLy8gcmVzZXQgUmVnRXhwIG9iamVjdCwgYmVjYXVzZSBvZiB0aGUgZWFybHkgZXhpdCBvZiBhIHByZXZpb3VzIHJ1bgoJCVJlUGF0aFBhcnQubGFzdEluZGV4ID0gMDsKCgkJd2hpbGUgKCB0cnVlICkgewoKCQkJdmFyIG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksCgkJCQltYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4LAoKCQkJCWlkID0gbWF0Y2hbIDEgXSwKCQkJCWlkSXNJbmRleCA9IG1hdGNoWyAyIF0gPT09ICddJywKCQkJCXN1YnNjcmlwdCA9IG1hdGNoWyAzIF07CgoJCQlpZiAoIGlkSXNJbmRleCApIHsgaWQgPSBpZCB8IDA7IH0gLy8gY29udmVydCB0byBpbnRlZ2VyCgoJCQlpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHsKCgkJCQkvLyBiYXJlIG5hbWUgb3IgInB1cmUiIGJvdHRvbS1sZXZlbCBhcnJheSAiWzBdIiBzdWZmaXgKCgkJCQlhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID8KCQkJCQluZXcgU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSA6CgkJCQkJbmV3IFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgKTsKCgkJCQlicmVhazsKCgkJCX0gZWxzZSB7CgoJCQkJLy8gc3RlcCBpbnRvIGlubmVyIG5vZGUgLyBjcmVhdGUgaXQgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0CgoJCQkJdmFyIG1hcCA9IGNvbnRhaW5lci5tYXAsIG5leHQgPSBtYXBbIGlkIF07CgoJCQkJaWYgKCBuZXh0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCW5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7CgkJCQkJYWRkVW5pZm9ybSggY29udGFpbmVyLCBuZXh0ICk7CgoJCQkJfQoKCQkJCWNvbnRhaW5lciA9IG5leHQ7CgoJCQl9CgoJCX0KCgl9CgoJLy8gUm9vdCBDb250YWluZXIKCglmdW5jdGlvbiBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApIHsKCgkJdGhpcy5zZXEgPSBbXTsKCQl0aGlzLm1hcCA9IHt9OwoKCQl2YXIgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE4ICk7CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IG47ICsrIGkgKSB7CgoJCQl2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0oIHByb2dyYW0sIGkgKSwKCQkJCWFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApOwoKCQkJcGFyc2VVbmlmb3JtKCBpbmZvLCBhZGRyLCB0aGlzICk7CgoJCX0KCgl9CgoJV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKSB7CgoJCXZhciB1ID0gdGhpcy5tYXBbIG5hbWUgXTsKCgkJaWYgKCB1ICE9PSB1bmRlZmluZWQgKSB7IHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTsgfQoKCX07CgoJV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7CgoJCXZhciB2ID0gb2JqZWN0WyBuYW1lIF07CgoJCWlmICggdiAhPT0gdW5kZWZpbmVkICkgeyB0aGlzLnNldFZhbHVlKCBnbCwgbmFtZSwgdiApOyB9CgoJfTsKCgoJLy8gU3RhdGljIGludGVyZmFjZQoKCVdlYkdMVW5pZm9ybXMudXBsb2FkID0gZnVuY3Rpb24gKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzICkgewoKCQlmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJdmFyIHUgPSBzZXFbIGkgXSwKCQkJCXYgPSB2YWx1ZXNbIHUuaWQgXTsKCgkJCWlmICggdi5uZWVkc1VwZGF0ZSAhPT0gZmFsc2UgKSB7CgoJCQkJLy8gbm90ZTogYWx3YXlzIHVwZGF0aW5nIHdoZW4gLm5lZWRzVXBkYXRlIGlzIHVuZGVmaW5lZAoJCQkJdS5zZXRWYWx1ZSggZ2wsIHYudmFsdWUsIHRleHR1cmVzICk7CgoJCQl9CgoJCX0KCgl9OwoKCVdlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlID0gZnVuY3Rpb24gKCBzZXEsIHZhbHVlcyApIHsKCgkJdmFyIHIgPSBbXTsKCgkJZm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCXZhciB1ID0gc2VxWyBpIF07CgkJCWlmICggdS5pZCBpbiB2YWx1ZXMgKSB7IHIucHVzaCggdSApOyB9CgoJCX0KCgkJcmV0dXJuIHI7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTFNoYWRlciggZ2wsIHR5cGUsIHN0cmluZyApIHsKCgkJdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggdHlwZSApOwoKCQlnbC5zaGFkZXJTb3VyY2UoIHNoYWRlciwgc3RyaW5nICk7CgkJZ2wuY29tcGlsZVNoYWRlciggc2hhZGVyICk7CgoJCXJldHVybiBzaGFkZXI7CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCXZhciBwcm9ncmFtSWRDb3VudCA9IDA7CgoJZnVuY3Rpb24gYWRkTGluZU51bWJlcnMoIHN0cmluZyApIHsKCgkJdmFyIGxpbmVzID0gc3RyaW5nLnNwbGl0KCAnXG4nICk7CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArKyApIHsKCgkJCWxpbmVzWyBpIF0gPSAoIGkgKyAxICkgKyAnOiAnICsgbGluZXNbIGkgXTsKCgkJfQoKCQlyZXR1cm4gbGluZXMuam9pbiggJ1xuJyApOwoKCX0KCglmdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICkgewoKCQlzd2l0Y2ggKCBlbmNvZGluZyApIHsKCgkJCWNhc2UgTGluZWFyRW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnTGluZWFyJywgJyggdmFsdWUgKScgXTsKCQkJY2FzZSBzUkdCRW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnc1JHQicsICcoIHZhbHVlICknIF07CgkJCWNhc2UgUkdCRUVuY29kaW5nOgoJCQkJcmV0dXJuIFsgJ1JHQkUnLCAnKCB2YWx1ZSApJyBdOwoJCQljYXNlIFJHQk03RW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnUkdCTScsICcoIHZhbHVlLCA3LjAgKScgXTsKCQkJY2FzZSBSR0JNMTZFbmNvZGluZzoKCQkJCXJldHVybiBbICdSR0JNJywgJyggdmFsdWUsIDE2LjAgKScgXTsKCQkJY2FzZSBSR0JERW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnUkdCRCcsICcoIHZhbHVlLCAyNTYuMCApJyBdOwoJCQljYXNlIEdhbW1hRW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnR2FtbWEnLCAnKCB2YWx1ZSwgZmxvYXQoIEdBTU1BX0ZBQ1RPUiApICknIF07CgkJCWNhc2UgTG9nTHV2RW5jb2Rpbmc6CgkJCQlyZXR1cm4gWyAnTG9nTHV2JywgJyggdmFsdWUgKScgXTsKCQkJZGVmYXVsdDoKCQkJCXRocm93IG5ldyBFcnJvciggJ3Vuc3VwcG9ydGVkIGVuY29kaW5nOiAnICsgZW5jb2RpbmcgKTsKCgkJfQoKCX0KCglmdW5jdGlvbiBnZXRTaGFkZXJFcnJvcnMoIGdsLCBzaGFkZXIsIHR5cGUgKSB7CgoJCXZhciBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgMzU3MTMgKTsKCQl2YXIgbG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpOwoKCQlpZiAoIHN0YXR1cyAmJiBsb2cgPT09ICcnICkgeyByZXR1cm4gJyc7IH0KCgkJLy8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb24KCQkvLyBjb25zb2xlLmxvZyggJyoqJyArIHR5cGUgKyAnKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7CgoJCXZhciBzb3VyY2UgPSBnbC5nZXRTaGFkZXJTb3VyY2UoIHNoYWRlciApOwoKCQlyZXR1cm4gJ1RIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKCkgJyArIHR5cGUgKyAnXG4nICsgbG9nICsgYWRkTGluZU51bWJlcnMoIHNvdXJjZSApOwoKCX0KCglmdW5jdGlvbiBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcgKSB7CgoJCXZhciBjb21wb25lbnRzID0gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApOwoJCXJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuICcgKyBjb21wb25lbnRzWyAwIF0gKyAnVG9MaW5lYXInICsgY29tcG9uZW50c1sgMSBdICsgJzsgfSc7CgoJfQoKCWZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBlbmNvZGluZyApIHsKCgkJdmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7CgkJcmV0dXJuICd2ZWM0ICcgKyBmdW5jdGlvbk5hbWUgKyAnKCB2ZWM0IHZhbHVlICkgeyByZXR1cm4gTGluZWFyVG8nICsgY29tcG9uZW50c1sgMCBdICsgY29tcG9uZW50c1sgMSBdICsgJzsgfSc7CgoJfQoKCWZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7CgoJCXZhciB0b25lTWFwcGluZ05hbWU7CgoJCXN3aXRjaCAoIHRvbmVNYXBwaW5nICkgewoKCQkJY2FzZSBMaW5lYXJUb25lTWFwcGluZzoKCQkJCXRvbmVNYXBwaW5nTmFtZSA9ICdMaW5lYXInOwoJCQkJYnJlYWs7CgoJCQljYXNlIFJlaW5oYXJkVG9uZU1hcHBpbmc6CgkJCQl0b25lTWFwcGluZ05hbWUgPSAnUmVpbmhhcmQnOwoJCQkJYnJlYWs7CgoJCQljYXNlIFVuY2hhcnRlZDJUb25lTWFwcGluZzoKCQkJCXRvbmVNYXBwaW5nTmFtZSA9ICdVbmNoYXJ0ZWQyJzsKCQkJCWJyZWFrOwoKCQkJY2FzZSBDaW5lb25Ub25lTWFwcGluZzoKCQkJCXRvbmVNYXBwaW5nTmFtZSA9ICdPcHRpbWl6ZWRDaW5lb24nOwoJCQkJYnJlYWs7CgoJCQljYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzoKCQkJCXRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJzsKCQkJCWJyZWFrOwoKCQkJZGVmYXVsdDoKCQkJCXRocm93IG5ldyBFcnJvciggJ3Vuc3VwcG9ydGVkIHRvbmVNYXBwaW5nOiAnICsgdG9uZU1hcHBpbmcgKTsKCgkJfQoKCQlyZXR1cm4gJ3ZlYzMgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzMgY29sb3IgKSB7IHJldHVybiAnICsgdG9uZU1hcHBpbmdOYW1lICsgJ1RvbmVNYXBwaW5nKCBjb2xvciApOyB9JzsKCgl9CgoJZnVuY3Rpb24gZ2VuZXJhdGVFeHRlbnNpb25zKCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzLCByZW5kZXJlckV4dGVuc2lvbnMgKSB7CgoJCWV4dGVuc2lvbnMgPSBleHRlbnNpb25zIHx8IHt9OwoKCQl2YXIgY2h1bmtzID0gWwoJCQkoIGV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgfHwgcGFyYW1ldGVycy5lbnZNYXBDdWJlVVYgfHwgcGFyYW1ldGVycy5idW1wTWFwIHx8IHBhcmFtZXRlcnMudGFuZ2VudFNwYWNlTm9ybWFsTWFwIHx8IHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwIHx8IHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgKSA/ICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZScgOiAnJywKCQkJKCBleHRlbnNpb25zLmZyYWdEZXB0aCB8fCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZScgOiAnJywKCQkJKCBleHRlbnNpb25zLmRyYXdCdWZmZXJzICkgJiYgcmVuZGVyZXJFeHRlbnNpb25zLmdldCggJ1dFQkdMX2RyYXdfYnVmZmVycycgKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9kcmF3X2J1ZmZlcnMgOiByZXF1aXJlJyA6ICcnLAoJCQkoIGV4dGVuc2lvbnMuc2hhZGVyVGV4dHVyZUxPRCB8fCBwYXJhbWV0ZXJzLmVudk1hcCApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyApID8gJyNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZScgOiAnJwoJCV07CgoJCXJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXG4nICk7CgoJfQoKCWZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHsKCgkJdmFyIGNodW5rcyA9IFtdOwoKCQlmb3IgKCB2YXIgbmFtZSBpbiBkZWZpbmVzICkgewoKCQkJdmFyIHZhbHVlID0gZGVmaW5lc1sgbmFtZSBdOwoKCQkJaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CgoJCQljaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApOwoKCQl9CgoJCXJldHVybiBjaHVua3Muam9pbiggJ1xuJyApOwoKCX0KCglmdW5jdGlvbiBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKSB7CgoJCXZhciBhdHRyaWJ1dGVzID0ge307CgoJCXZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MjEgKTsKCgkJZm9yICggdmFyIGkgPSAwOyBpIDwgbjsgaSArKyApIHsKCgkJCXZhciBpbmZvID0gZ2wuZ2V0QWN0aXZlQXR0cmliKCBwcm9ncmFtLCBpICk7CgkJCXZhciBuYW1lID0gaW5mby5uYW1lOwoKCQkJLy8gY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFByb2dyYW06IEFDVElWRSBWRVJURVggQVRUUklCVVRFOicsIG5hbWUsIGkgKTsKCgkJCWF0dHJpYnV0ZXNbIG5hbWUgXSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICk7CgoJCX0KCgkJcmV0dXJuIGF0dHJpYnV0ZXM7CgoJfQoKCWZ1bmN0aW9uIGZpbHRlckVtcHR5TGluZSggc3RyaW5nICkgewoKCQlyZXR1cm4gc3RyaW5nICE9PSAnJzsKCgl9CgoJZnVuY3Rpb24gcmVwbGFjZUxpZ2h0TnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkgewoKCQlyZXR1cm4gc3RyaW5nCgkJCS5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKQoJCQkucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodHMgKQoJCQkucmVwbGFjZSggL05VTV9SRUNUX0FSRUFfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMgKQoJCQkucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApCgkJCS5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApCgkJCS5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICkKCQkJLnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApCgkJCS5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApOwoKCX0KCglmdW5jdGlvbiByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHsKCgkJcmV0dXJuIHN0cmluZwoJCQkucmVwbGFjZSggL05VTV9DTElQUElOR19QTEFORVMvZywgcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApCgkJCS5yZXBsYWNlKCAvVU5JT05fQ0xJUFBJTkdfUExBTkVTL2csICggcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyAtIHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbiApICk7CgoJfQoKCS8vIFJlc29sdmUgSW5jbHVkZXMKCgl2YXIgaW5jbHVkZVBhdHRlcm4gPSAvXlsgXHRdKiNpbmNsdWRlICs8KFtcd1xkLi9dKyk+L2dtOwoKCWZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyggc3RyaW5nICkgewoKCQlyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIgKTsKCgl9CgoJZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHsKCgkJdmFyIHN0cmluZyA9IFNoYWRlckNodW5rWyBpbmNsdWRlIF07CgoJCWlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSB7CgoJCQl0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7CgoJCX0KCgkJcmV0dXJuIHJlc29sdmVJbmNsdWRlcyggc3RyaW5nICk7CgoJfQoKCS8vIFVucm9sbCBMb29wcwoKCXZhciBsb29wUGF0dGVybiA9IC8jcHJhZ21hIHVucm9sbF9sb29wW1xzXSs/Zm9yIFwoIGludCBpIFw9IChcZCspXDsgaSA8IChcZCspXDsgaSBcK1wrIFwpIFx7KFtcc1xTXSs/KSg/PVx9KVx9L2c7CgoJZnVuY3Rpb24gdW5yb2xsTG9vcHMoIHN0cmluZyApIHsKCgkJcmV0dXJuIHN0cmluZy5yZXBsYWNlKCBsb29wUGF0dGVybiwgbG9vcFJlcGxhY2VyICk7CgoJfQoKCWZ1bmN0aW9uIGxvb3BSZXBsYWNlciggbWF0Y2gsIHN0YXJ0LCBlbmQsIHNuaXBwZXQgKSB7CgoJCXZhciBzdHJpbmcgPSAnJzsKCgkJZm9yICggdmFyIGkgPSBwYXJzZUludCggc3RhcnQgKTsgaSA8IHBhcnNlSW50KCBlbmQgKTsgaSArKyApIHsKCgkJCXN0cmluZyArPSBzbmlwcGV0CgkJCQkucmVwbGFjZSggL1xbIGkgXF0vZywgJ1sgJyArIGkgKyAnIF0nICkKCQkJCS5yZXBsYWNlKCAvVU5ST0xMRURfTE9PUF9JTkRFWC9nLCBpICk7CgoJCX0KCgkJcmV0dXJuIHN0cmluZzsKCgl9CgoJLy8KCglmdW5jdGlvbiBnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApIHsKCgkJdmFyIHByZWNpc2lvbnN0cmluZyA9ICJwcmVjaXNpb24gIiArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgIiBmbG9hdDtcbnByZWNpc2lvbiAiICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAiIGludDsiOwoKCQlpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAiaGlnaHAiICkgewoKCQkJcHJlY2lzaW9uc3RyaW5nICs9ICJcbiNkZWZpbmUgSElHSF9QUkVDSVNJT04iOwoKCQl9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gIm1lZGl1bXAiICkgewoKCQkJcHJlY2lzaW9uc3RyaW5nICs9ICJcbiNkZWZpbmUgTUVESVVNX1BSRUNJU0lPTiI7CgoJCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAibG93cCIgKSB7CgoJCQlwcmVjaXNpb25zdHJpbmcgKz0gIlxuI2RlZmluZSBMT1dfUFJFQ0lTSU9OIjsKCgkJfQoKCQlyZXR1cm4gcHJlY2lzaW9uc3RyaW5nOwoKCX0KCglmdW5jdGlvbiBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgoJCXZhciBzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX0JBU0lDJzsKCgkJaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHsKCgkJCXNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJzsKCgkJfSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkgewoKCQkJc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7CgoJCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gVlNNU2hhZG93TWFwICkgewoKCQkJc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9WU00nOwoKCQl9CgoJCXJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lOwoKCX0KCglmdW5jdGlvbiBnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgoJCXZhciBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnOwoKCQlpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkgewoKCQkJc3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkgewoKCQkJCWNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOgoJCQkJY2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6CgkJCQkJZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJzsKCQkJCQlicmVhazsKCgkJCQljYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOgoJCQkJY2FzZSBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzoKCQkJCQllbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkVfVVYnOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6CgkJCQljYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOgoJCQkJCWVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfRVFVSVJFQyc7CgkJCQkJYnJlYWs7CgoJCQkJY2FzZSBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzoKCQkJCQllbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX1NQSEVSRSc7CgkJCQkJYnJlYWs7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIGVudk1hcFR5cGVEZWZpbmU7CgoJfQoKCWZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApIHsKCgkJdmFyIGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGTEVDVElPTic7CgoJCWlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7CgoJCQlzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7CgoJCQkJY2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6CgkJCQljYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOgoJCQkJCWVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7CgkJCQkJYnJlYWs7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIGVudk1hcE1vZGVEZWZpbmU7CgoJfQoKCWZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUoIHBhcmFtZXRlcnMgKSB7CgoJCXZhciBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7CgoJCWlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7CgoJCQlzd2l0Y2ggKCBwYXJhbWV0ZXJzLmNvbWJpbmUgKSB7CgoJCQkJY2FzZSBNdWx0aXBseU9wZXJhdGlvbjoKCQkJCQllbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFknOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgTWl4T3BlcmF0aW9uOgoJCQkJCWVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NSVgnOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgQWRkT3BlcmF0aW9uOgoJCQkJCWVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19BREQnOwoJCQkJCWJyZWFrOwoKCQkJfQoKCQl9CgoJCXJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTsKCgl9CgoJZnVuY3Rpb24gV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgZXh0ZW5zaW9ucywgY2FjaGVLZXksIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMgKSB7CgoJCXZhciBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTsKCgkJdmFyIGRlZmluZXMgPSBtYXRlcmlhbC5kZWZpbmVzOwoKCQl2YXIgdmVydGV4U2hhZGVyID0gc2hhZGVyLnZlcnRleFNoYWRlcjsKCQl2YXIgZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXI7CgkJdmFyIHNoYWRvd01hcFR5cGVEZWZpbmUgPSBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKTsKCQl2YXIgZW52TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApOwoJCXZhciBlbnZNYXBNb2RlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lKCBwYXJhbWV0ZXJzICk7CgkJdmFyIGVudk1hcEJsZW5kaW5nRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBCbGVuZGluZ0RlZmluZSggcGFyYW1ldGVycyApOwoKCgkJdmFyIGdhbW1hRmFjdG9yRGVmaW5lID0gKCByZW5kZXJlci5nYW1tYUZhY3RvciA+IDAgKSA/IHJlbmRlcmVyLmdhbW1hRmFjdG9yIDogMS4wOwoKCQl2YXIgY3VzdG9tRXh0ZW5zaW9ucyA9IHBhcmFtZXRlcnMuaXNXZWJHTDIgPyAnJyA6IGdlbmVyYXRlRXh0ZW5zaW9ucyggbWF0ZXJpYWwuZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgZXh0ZW5zaW9ucyApOwoKCQl2YXIgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApOwoKCQl2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTsKCgkJdmFyIHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7CgoJCXZhciBudW1NdWx0aXZpZXdWaWV3cyA9IHBhcmFtZXRlcnMubnVtTXVsdGl2aWV3Vmlld3M7CgoJCWlmICggbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCApIHsKCgkJCXByZWZpeFZlcnRleCA9IFsKCgkJCQljdXN0b21EZWZpbmVzCgoJCQldLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xuJyApOwoKCQkJaWYgKCBwcmVmaXhWZXJ0ZXgubGVuZ3RoID4gMCApIHsKCgkJCQlwcmVmaXhWZXJ0ZXggKz0gJ1xuJzsKCgkJCX0KCgkJCXByZWZpeEZyYWdtZW50ID0gWwoKCQkJCWN1c3RvbUV4dGVuc2lvbnMsCgkJCQljdXN0b21EZWZpbmVzCgoJCQldLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xuJyApOwoKCQkJaWYgKCBwcmVmaXhGcmFnbWVudC5sZW5ndGggPiAwICkgewoKCQkJCXByZWZpeEZyYWdtZW50ICs9ICdcbic7CgoJCQl9CgoJCX0gZWxzZSB7CgoJCQlwcmVmaXhWZXJ0ZXggPSBbCgoJCQkJZ2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSwKCgkJCQknI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsCgoJCQkJY3VzdG9tRGVmaW5lcywKCgkJCQlwYXJhbWV0ZXJzLmluc3RhbmNpbmcgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lORycgOiAnJywKCQkJCXBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFZFUlRFWF9URVhUVVJFUycgOiAnJywKCgkJCQknI2RlZmluZSBHQU1NQV9GQUNUT1IgJyArIGdhbW1hRmFjdG9yRGVmaW5lLAoKCQkJCScjZGVmaW5lIE1BWF9CT05FUyAnICsgcGFyYW1ldGVycy5tYXhCb25lcywKCQkJCSggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsCgkJCQkoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsCgoJCQkJcGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLAoJCQkJcGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJywKCQkJCXBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsCgkJCQkoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJywKCQkJCSggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy50YW5nZW50U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAnIDogJycsCgoJCQkJcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJywKCQkJCXBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwICYmIHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFVTRV9ESVNQTEFDRU1FTlRNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5hbHBoYU1hcCA/ICcjZGVmaW5lIFVTRV9BTFBIQU1BUCcgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsCgkJCQlwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJywKCQkJCXBhcmFtZXRlcnMudmVydGV4VXZzID8gJyNkZWZpbmUgVVNFX1VWJyA6ICcnLAoJCQkJcGFyYW1ldGVycy51dnNWZXJ0ZXhPbmx5ID8gJyNkZWZpbmUgVVZTX1ZFUlRFWF9PTkxZJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLnNraW5uaW5nID8gJyNkZWZpbmUgVVNFX1NLSU5OSU5HJyA6ICcnLAoJCQkJcGFyYW1ldGVycy51c2VWZXJ0ZXhUZXh0dXJlID8gJyNkZWZpbmUgQk9ORV9URVhUVVJFJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID8gJyNkZWZpbmUgVVNFX01PUlBIVEFSR0VUUycgOiAnJywKCQkJCXBhcmFtZXRlcnMubW9ycGhOb3JtYWxzICYmIHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPT09IGZhbHNlID8gJyNkZWZpbmUgVVNFX01PUlBITk9STUFMUycgOiAnJywKCQkJCXBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsCgkJCQlwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsCgoJCQkJcGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJywKCQkJCXBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsCgoJCQkJcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJywKCQkJCXBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiAoIHBhcmFtZXRlcnMuaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSApID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJywKCgkJCQkndW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4OycsCgkJCQkndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDsnLAoJCQkJJ3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4OycsCgkJCQkndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7JywKCQkJCSd1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4OycsCgkJCQkndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsCgkJCQkndW5pZm9ybSBib29sIGlzT3J0aG9ncmFwaGljOycsCgoJCQkJJyNpZmRlZiBVU0VfSU5TVEFOQ0lORycsCgoJCQkJJyBhdHRyaWJ1dGUgbWF0NCBpbnN0YW5jZU1hdHJpeDsnLAoKCQkJCScjZW5kaWYnLAoKCQkJCSdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnLAoJCQkJJ2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDsnLAoJCQkJJ2F0dHJpYnV0ZSB2ZWMyIHV2OycsCgoJCQkJJyNpZmRlZiBVU0VfVEFOR0VOVCcsCgoJCQkJJwlhdHRyaWJ1dGUgdmVjNCB0YW5nZW50OycsCgoJCQkJJyNlbmRpZicsCgoJCQkJJyNpZmRlZiBVU0VfQ09MT1InLAoKCQkJCScJYXR0cmlidXRlIHZlYzMgY29sb3I7JywKCgkJCQknI2VuZGlmJywKCgkJCQknI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFMnLAoKCQkJCScJYXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwOycsCgkJCQknCWF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MTsnLAoJCQkJJwlhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDI7JywKCQkJCScJYXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzOycsCgoJCQkJJwkjaWZkZWYgVVNFX01PUlBITk9STUFMUycsCgoJCQkJJwkJYXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwwOycsCgkJCQknCQlhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDE7JywKCQkJCScJCWF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjsnLAoJCQkJJwkJYXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwzOycsCgoJCQkJJwkjZWxzZScsCgoJCQkJJwkJYXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ0OycsCgkJCQknCQlhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7JywKCQkJCScJCWF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NjsnLAoJCQkJJwkJYXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ3OycsCgoJCQkJJwkjZW5kaWYnLAoKCQkJCScjZW5kaWYnLAoKCQkJCScjaWZkZWYgVVNFX1NLSU5OSU5HJywKCgkJCQknCWF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDsnLAoJCQkJJwlhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0OycsCgoJCQkJJyNlbmRpZicsCgoJCQkJJ1xuJwoKCQkJXS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcbicgKTsKCgkJCXByZWZpeEZyYWdtZW50ID0gWwoKCQkJCWN1c3RvbUV4dGVuc2lvbnMsCgoJCQkJZ2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSwKCgkJCQknI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsCgoJCQkJY3VzdG9tRGVmaW5lcywKCgkJCQlwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIEFMUEhBVEVTVCAnICsgcGFyYW1ldGVycy5hbHBoYVRlc3QgKyAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJyApIDogJycsIC8vIGFkZCAnLjAnIGlmIGludGVnZXIKCgkJCQknI2RlZmluZSBHQU1NQV9GQUNUT1IgJyArIGdhbW1hRmFjdG9yRGVmaW5lLAoKCQkJCSggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsCgkJCQkoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsCgoJCQkJcGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5tYXRjYXAgPyAnI2RlZmluZSBVU0VfTUFUQ0FQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwVHlwZURlZmluZSA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwQmxlbmRpbmdEZWZpbmUgOiAnJywKCQkJCXBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJywKCQkJCXBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLAoJCQkJKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLm9iamVjdFNwYWNlTm9ybWFsTWFwICkgPyAnI2RlZmluZSBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAnIDogJycsCgkJCQkoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMudGFuZ2VudFNwYWNlTm9ybWFsTWFwICkgPyAnI2RlZmluZSBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJywKCQkJCXBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMuc2hlZW4gPyAnI2RlZmluZSBVU0VfU0hFRU4nIDogJycsCgoJCQkJcGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLAoJCQkJcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsCgkJCQlwYXJhbWV0ZXJzLnZlcnRleFV2cyA/ICcjZGVmaW5lIFVTRV9VVicgOiAnJywKCQkJCXBhcmFtZXRlcnMudXZzVmVydGV4T25seSA/ICcjZGVmaW5lIFVWU19WRVJURVhfT05MWScgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLmdyYWRpZW50TWFwID8gJyNkZWZpbmUgVVNFX0dSQURJRU5UTUFQJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLAoJCQkJcGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLAoKCQkJCXBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsCgkJCQlwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLAoKCQkJCXBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID8gJyNkZWZpbmUgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUycgOiAnJywKCgkJCQlwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsCgkJCQlwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgKCBwYXJhbWV0ZXJzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsCgoJCQkJKCAoIG1hdGVyaWFsLmV4dGVuc2lvbnMgPyBtYXRlcmlhbC5leHRlbnNpb25zLnNoYWRlclRleHR1cmVMT0QgOiBmYWxzZSApIHx8IHBhcmFtZXRlcnMuZW52TWFwICkgJiYgKCBwYXJhbWV0ZXJzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcgKSApID8gJyNkZWZpbmUgVEVYVFVSRV9MT0RfRVhUJyA6ICcnLAoKCQkJCSd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLAoJCQkJJ3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjsnLAoJCQkJJ3VuaWZvcm0gYm9vbCBpc09ydGhvZ3JhcGhpYzsnLAoKCQkJCSggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gJyNkZWZpbmUgVE9ORV9NQVBQSU5HJyA6ICcnLAoJCQkJKCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBTaGFkZXJDaHVua1sgJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB0b25lTWFwcGluZygpIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3cKCQkJCSggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggJ3RvbmVNYXBwaW5nJywgcGFyYW1ldGVycy50b25lTWFwcGluZyApIDogJycsCgoJCQkJcGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsCgoJCQkJKCBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nIHx8IHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLmVudk1hcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLmxpZ2h0TWFwRW5jb2RpbmcgKSA/CgkJCQkJU2hhZGVyQ2h1bmtbICdlbmNvZGluZ3NfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHZhcmlvdXMgZW5jb2RpbmcvZGVjb2RpbmcgZnVuY3Rpb24gZGVmaW5lZCBiZWxvdwoJCQkJcGFyYW1ldGVycy5tYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ21hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLm1hcEVuY29kaW5nICkgOiAnJywKCQkJCXBhcmFtZXRlcnMubWF0Y2FwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdtYXRjYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyApIDogJycsCgkJCQlwYXJhbWV0ZXJzLmVudk1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnZW52TWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgKSA6ICcnLAoJCQkJcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nICkgOiAnJywKCQkJCXBhcmFtZXRlcnMubGlnaHRNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ2xpZ2h0TWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubGlnaHRNYXBFbmNvZGluZyApIDogJycsCgkJCQlwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nID8gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCAnbGluZWFyVG9PdXRwdXRUZXhlbCcsIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgKSA6ICcnLAoKCQkJCXBhcmFtZXRlcnMuZGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgbWF0ZXJpYWwuZGVwdGhQYWNraW5nIDogJycsCgoJCQkJJ1xuJwoKCQkJXS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcbicgKTsKCgkJfQoKCQl2ZXJ0ZXhTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApOwoJCXZlcnRleFNoYWRlciA9IHJlcGxhY2VMaWdodE51bXMoIHZlcnRleFNoYWRlciwgcGFyYW1ldGVycyApOwoJCXZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7CgoJCWZyYWdtZW50U2hhZGVyID0gcmVzb2x2ZUluY2x1ZGVzKCBmcmFnbWVudFNoYWRlciApOwoJCWZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTsKCQlmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTsKCgkJdmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApOwoJCWZyYWdtZW50U2hhZGVyID0gdW5yb2xsTG9vcHMoIGZyYWdtZW50U2hhZGVyICk7CgoJCWlmICggcGFyYW1ldGVycy5pc1dlYkdMMiAmJiAhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7CgoJCQl2YXIgaXNHTFNMM1NoYWRlck1hdGVyaWFsID0gZmFsc2U7CgoJCQl2YXIgdmVyc2lvblJlZ2V4ID0gL15ccyojdmVyc2lvblxzKzMwMFxzK2VzXHMqXG4vOwoKCQkJaWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmCgkJCQl2ZXJ0ZXhTaGFkZXIubWF0Y2goIHZlcnNpb25SZWdleCApICE9PSBudWxsICYmCgkJCQlmcmFnbWVudFNoYWRlci5tYXRjaCggdmVyc2lvblJlZ2V4ICkgIT09IG51bGwgKSB7CgoJCQkJaXNHTFNMM1NoYWRlck1hdGVyaWFsID0gdHJ1ZTsKCgkJCQl2ZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhTaGFkZXIucmVwbGFjZSggdmVyc2lvblJlZ2V4LCAnJyApOwoJCQkJZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlci5yZXBsYWNlKCB2ZXJzaW9uUmVnZXgsICcnICk7CgoJCQl9CgoJCQkvLyBHTFNMIDMuMCBjb252ZXJzaW9uCgoJCQlwcmVmaXhWZXJ0ZXggPSBbCgkJCQknI3ZlcnNpb24gMzAwIGVzXG4nLAoJCQkJJyNkZWZpbmUgYXR0cmlidXRlIGluJywKCQkJCScjZGVmaW5lIHZhcnlpbmcgb3V0JywKCQkJCScjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJwoJCQldLmpvaW4oICdcbicgKSArICdcbicgKyBwcmVmaXhWZXJ0ZXg7CgoJCQlwcmVmaXhGcmFnbWVudCA9IFsKCQkJCScjdmVyc2lvbiAzMDAgZXNcbicsCgkJCQknI2RlZmluZSB2YXJ5aW5nIGluJywKCQkJCWlzR0xTTDNTaGFkZXJNYXRlcmlhbCA/ICcnIDogJ291dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjsnLAoJCQkJaXNHTFNMM1NoYWRlck1hdGVyaWFsID8gJycgOiAnI2RlZmluZSBnbF9GcmFnQ29sb3IgcGNfZnJhZ0NvbG9yJywKCQkJCScjZGVmaW5lIGdsX0ZyYWdEZXB0aEVYVCBnbF9GcmFnRGVwdGgnLAoJCQkJJyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnLAoJCQkJJyNkZWZpbmUgdGV4dHVyZUN1YmUgdGV4dHVyZScsCgkJCQknI2RlZmluZSB0ZXh0dXJlMkRQcm9qIHRleHR1cmVQcm9qJywKCQkJCScjZGVmaW5lIHRleHR1cmUyRExvZEVYVCB0ZXh0dXJlTG9kJywKCQkJCScjZGVmaW5lIHRleHR1cmUyRFByb2pMb2RFWFQgdGV4dHVyZVByb2pMb2QnLAoJCQkJJyNkZWZpbmUgdGV4dHVyZUN1YmVMb2RFWFQgdGV4dHVyZUxvZCcsCgkJCQknI2RlZmluZSB0ZXh0dXJlMkRHcmFkRVhUIHRleHR1cmVHcmFkJywKCQkJCScjZGVmaW5lIHRleHR1cmUyRFByb2pHcmFkRVhUIHRleHR1cmVQcm9qR3JhZCcsCgkJCQknI2RlZmluZSB0ZXh0dXJlQ3ViZUdyYWRFWFQgdGV4dHVyZUdyYWQnCgkJCV0uam9pbiggJ1xuJyApICsgJ1xuJyArIHByZWZpeEZyYWdtZW50OwoKCQkJLy8gTXVsdGl2aWV3CgoJCQlpZiAoIG51bU11bHRpdmlld1ZpZXdzID4gMCApIHsKCgkJCQlwcmVmaXhWZXJ0ZXggPSBwcmVmaXhWZXJ0ZXgucmVwbGFjZSgKCQkJCQknI3ZlcnNpb24gMzAwIGVzXG4nLAoJCQkJCVsKCQkJCQkJJyN2ZXJzaW9uIDMwMCBlc1xuJywKCQkJCQkJJyNleHRlbnNpb24gR0xfT1ZSX211bHRpdmlldzIgOiByZXF1aXJlJywKCQkJCQkJJ2xheW91dChudW1fdmlld3MgPSAnICsgbnVtTXVsdGl2aWV3Vmlld3MgKyAnKSBpbjsnLAoJCQkJCQknI2RlZmluZSBWSUVXX0lEIGdsX1ZpZXdJRF9PVlInCgkJCQkJXS5qb2luKCAnXG4nICkKCQkJCSk7CgoJCQkJcHJlZml4VmVydGV4ID0gcHJlZml4VmVydGV4LnJlcGxhY2UoCgkJCQkJWwoJCQkJCQkndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDsnLAoJCQkJCQkndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7JywKCQkJCQkJJ3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsCgkJCQkJCSd1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4OycKCQkJCQldLmpvaW4oICdcbicgKSwKCQkJCQlbCgkJCQkJCSd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cmljZXNbJyArIG51bU11bHRpdmlld1ZpZXdzICsgJ107JywKCQkJCQkJJ3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cmljZXNbJyArIG51bU11bHRpdmlld1ZpZXdzICsgJ107JywKCQkJCQkJJ3VuaWZvcm0gbWF0NCB2aWV3TWF0cmljZXNbJyArIG51bU11bHRpdmlld1ZpZXdzICsgJ107JywKCQkJCQkJJ3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaWNlc1snICsgbnVtTXVsdGl2aWV3Vmlld3MgKyAnXTsnLAoKCQkJCQkJJyNkZWZpbmUgbW9kZWxWaWV3TWF0cml4IG1vZGVsVmlld01hdHJpY2VzW1ZJRVdfSURdJywKCQkJCQkJJyNkZWZpbmUgcHJvamVjdGlvbk1hdHJpeCBwcm9qZWN0aW9uTWF0cmljZXNbVklFV19JRF0nLAoJCQkJCQknI2RlZmluZSB2aWV3TWF0cml4IHZpZXdNYXRyaWNlc1tWSUVXX0lEXScsCgkJCQkJCScjZGVmaW5lIG5vcm1hbE1hdHJpeCBub3JtYWxNYXRyaWNlc1tWSUVXX0lEXScKCQkJCQldLmpvaW4oICdcbicgKQoJCQkJKTsKCgkJCQlwcmVmaXhGcmFnbWVudCA9IHByZWZpeEZyYWdtZW50LnJlcGxhY2UoCgkJCQkJJyN2ZXJzaW9uIDMwMCBlc1xuJywKCQkJCQlbCgkJCQkJCScjdmVyc2lvbiAzMDAgZXNcbicsCgkJCQkJCScjZXh0ZW5zaW9uIEdMX09WUl9tdWx0aXZpZXcyIDogcmVxdWlyZScsCgkJCQkJCScjZGVmaW5lIFZJRVdfSUQgZ2xfVmlld0lEX09WUicKCQkJCQldLmpvaW4oICdcbicgKQoJCQkJKTsKCgkJCQlwcmVmaXhGcmFnbWVudCA9IHByZWZpeEZyYWdtZW50LnJlcGxhY2UoCgkJCQkJJ3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsCgkJCQkJWwoJCQkJCQkndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaWNlc1snICsgbnVtTXVsdGl2aWV3Vmlld3MgKyAnXTsnLAoJCQkJCQknI2RlZmluZSB2aWV3TWF0cml4IHZpZXdNYXRyaWNlc1tWSUVXX0lEXScKCQkJCQldLmpvaW4oICdcbicgKQoJCQkJKTsKCgkJCX0KCgkJfQoKCQl2YXIgdmVydGV4R2xzbCA9IHByZWZpeFZlcnRleCArIHZlcnRleFNoYWRlcjsKCQl2YXIgZnJhZ21lbnRHbHNsID0gcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjsKCgkJLy8gY29uc29sZS5sb2coICcqVkVSVEVYKicsIHZlcnRleEdsc2wgKTsKCQkvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTsKCgkJdmFyIGdsVmVydGV4U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMywgdmVydGV4R2xzbCApOwoJCXZhciBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMiwgZnJhZ21lbnRHbHNsICk7CgoJCWdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTsKCQlnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTsKCgkJLy8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLgoKCQlpZiAoIG1hdGVyaWFsLmluZGV4MEF0dHJpYnV0ZU5hbWUgIT09IHVuZGVmaW5lZCApIHsKCgkJCWdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSApOwoKCQl9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHsKCgkJCS8vIHByb2dyYW1zIHdpdGggbW9ycGhUYXJnZXRzIGRpc3BsYWNlIHBvc2l0aW9uIG91dCBvZiBhdHRyaWJ1dGUgMAoJCQlnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTsKCgkJfQoKCQlnbC5saW5rUHJvZ3JhbSggcHJvZ3JhbSApOwoKCQkvLyBjaGVjayBmb3IgbGluayBlcnJvcnMKCQlpZiAoIHJlbmRlcmVyLmRlYnVnLmNoZWNrU2hhZGVyRXJyb3JzICkgewoKCQkJdmFyIHByb2dyYW1Mb2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyggcHJvZ3JhbSApLnRyaW0oKTsKCQkJdmFyIHZlcnRleExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsVmVydGV4U2hhZGVyICkudHJpbSgpOwoJCQl2YXIgZnJhZ21lbnRMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbEZyYWdtZW50U2hhZGVyICkudHJpbSgpOwoKCQkJdmFyIHJ1bm5hYmxlID0gdHJ1ZTsKCQkJdmFyIGhhdmVEaWFnbm9zdGljcyA9IHRydWU7CgoJCQlpZiAoIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE0ICkgPT09IGZhbHNlICkgewoKCQkJCXJ1bm5hYmxlID0gZmFsc2U7CgoJCQkJdmFyIHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApOwoJCQkJdmFyIGZyYWdtZW50RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xGcmFnbWVudFNoYWRlciwgJ2ZyYWdtZW50JyApOwoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogJywgZ2wuZ2V0RXJyb3IoKSwgJzM1NzE1JywgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTUgKSwgJ2dsLmdldFByb2dyYW1JbmZvTG9nJywgcHJvZ3JhbUxvZywgdmVydGV4RXJyb3JzLCBmcmFnbWVudEVycm9ycyApOwoKCQkJfSBlbHNlIGlmICggcHJvZ3JhbUxvZyAhPT0gJycgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpJywgcHJvZ3JhbUxvZyApOwoKCQkJfSBlbHNlIGlmICggdmVydGV4TG9nID09PSAnJyB8fCBmcmFnbWVudExvZyA9PT0gJycgKSB7CgoJCQkJaGF2ZURpYWdub3N0aWNzID0gZmFsc2U7CgoJCQl9CgoJCQlpZiAoIGhhdmVEaWFnbm9zdGljcyApIHsKCgkJCQl0aGlzLmRpYWdub3N0aWNzID0gewoKCQkJCQlydW5uYWJsZTogcnVubmFibGUsCgkJCQkJbWF0ZXJpYWw6IG1hdGVyaWFsLAoKCQkJCQlwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLAoKCQkJCQl2ZXJ0ZXhTaGFkZXI6IHsKCgkJCQkJCWxvZzogdmVydGV4TG9nLAoJCQkJCQlwcmVmaXg6IHByZWZpeFZlcnRleAoKCQkJCQl9LAoKCQkJCQlmcmFnbWVudFNoYWRlcjogewoKCQkJCQkJbG9nOiBmcmFnbWVudExvZywKCQkJCQkJcHJlZml4OiBwcmVmaXhGcmFnbWVudAoKCQkJCQl9CgoJCQkJfTsKCgkJCX0KCgkJfQoKCQkvLyBjbGVhbiB1cAoKCQlnbC5kZWxldGVTaGFkZXIoIGdsVmVydGV4U2hhZGVyICk7CgkJZ2wuZGVsZXRlU2hhZGVyKCBnbEZyYWdtZW50U2hhZGVyICk7CgoJCS8vIHNldCB1cCBjYWNoaW5nIGZvciB1bmlmb3JtIGxvY2F0aW9ucwoKCQl2YXIgY2FjaGVkVW5pZm9ybXM7CgoJCXRoaXMuZ2V0VW5pZm9ybXMgPSBmdW5jdGlvbiAoKSB7CgoJCQlpZiAoIGNhY2hlZFVuaWZvcm1zID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKTsKCgkJCX0KCgkJCXJldHVybiBjYWNoZWRVbmlmb3JtczsKCgkJfTsKCgkJLy8gc2V0IHVwIGNhY2hpbmcgZm9yIGF0dHJpYnV0ZSBsb2NhdGlvbnMKCgkJdmFyIGNhY2hlZEF0dHJpYnV0ZXM7CgoJCXRoaXMuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHsKCgkJCWlmICggY2FjaGVkQXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTsKCgkJCX0KCgkJCXJldHVybiBjYWNoZWRBdHRyaWJ1dGVzOwoKCQl9OwoKCQkvLyBmcmVlIHJlc291cmNlCgoJCXRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKCgkJCWdsLmRlbGV0ZVByb2dyYW0oIHByb2dyYW0gKTsKCQkJdGhpcy5wcm9ncmFtID0gdW5kZWZpbmVkOwoKCQl9OwoKCQkvLwoKCQl0aGlzLm5hbWUgPSBzaGFkZXIubmFtZTsKCQl0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQgKys7CgkJdGhpcy5jYWNoZUtleSA9IGNhY2hlS2V5OwoJCXRoaXMudXNlZFRpbWVzID0gMTsKCQl0aGlzLnByb2dyYW0gPSBwcm9ncmFtOwoJCXRoaXMudmVydGV4U2hhZGVyID0gZ2xWZXJ0ZXhTaGFkZXI7CgkJdGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7CgkJdGhpcy5udW1NdWx0aXZpZXdWaWV3cyA9IG51bU11bHRpdmlld1ZpZXdzOwoKCQlyZXR1cm4gdGhpczsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gV2ViR0xQcm9ncmFtcyggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHsKCgkJdmFyIHByb2dyYW1zID0gW107CgoJCXZhciBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjsKCQl2YXIgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyOwoJCXZhciBmbG9hdFZlcnRleFRleHR1cmVzID0gY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXM7CgkJdmFyIHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247CgkJdmFyIG1heFZlcnRleFVuaWZvcm1zID0gY2FwYWJpbGl0aWVzLm1heFZlcnRleFVuaWZvcm1zOwoJCXZhciB2ZXJ0ZXhUZXh0dXJlcyA9IGNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlczsKCgkJdmFyIHNoYWRlcklEcyA9IHsKCQkJTWVzaERlcHRoTWF0ZXJpYWw6ICdkZXB0aCcsCgkJCU1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJywKCQkJTWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJywKCQkJTWVzaEJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsCgkJCU1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0JywKCQkJTWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsCgkJCU1lc2hUb29uTWF0ZXJpYWw6ICd0b29uJywKCQkJTWVzaFN0YW5kYXJkTWF0ZXJpYWw6ICdwaHlzaWNhbCcsCgkJCU1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLAoJCQlNZXNoTWF0Y2FwTWF0ZXJpYWw6ICdtYXRjYXAnLAoJCQlMaW5lQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJywKCQkJTGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJywKCQkJUG9pbnRzTWF0ZXJpYWw6ICdwb2ludHMnLAoJCQlTaGFkb3dNYXRlcmlhbDogJ3NoYWRvdycsCgkJCVNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJwoJCX07CgoJCXZhciBwYXJhbWV0ZXJOYW1lcyA9IFsKCQkJInByZWNpc2lvbiIsICJpc1dlYkdMMiIsICJzdXBwb3J0c1ZlcnRleFRleHR1cmVzIiwgIm91dHB1dEVuY29kaW5nIiwgImluc3RhbmNpbmciLCAibnVtTXVsdGl2aWV3Vmlld3MiLAoJCQkibWFwIiwgIm1hcEVuY29kaW5nIiwgIm1hdGNhcCIsICJtYXRjYXBFbmNvZGluZyIsICJlbnZNYXAiLCAiZW52TWFwTW9kZSIsICJlbnZNYXBFbmNvZGluZyIsICJlbnZNYXBDdWJlVVYiLAoJCQkibGlnaHRNYXAiLCAibGlnaHRNYXBFbmNvZGluZyIsICJhb01hcCIsICJlbWlzc2l2ZU1hcCIsICJlbWlzc2l2ZU1hcEVuY29kaW5nIiwgImJ1bXBNYXAiLCAibm9ybWFsTWFwIiwgIm9iamVjdFNwYWNlTm9ybWFsTWFwIiwgInRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsICJjbGVhcmNvYXROb3JtYWxNYXAiLCAiZGlzcGxhY2VtZW50TWFwIiwgInNwZWN1bGFyTWFwIiwKCQkJInJvdWdobmVzc01hcCIsICJtZXRhbG5lc3NNYXAiLCAiZ3JhZGllbnRNYXAiLAoJCQkiYWxwaGFNYXAiLCAiY29tYmluZSIsICJ2ZXJ0ZXhDb2xvcnMiLCAidmVydGV4VGFuZ2VudHMiLCAidmVydGV4VXZzIiwgInV2c1ZlcnRleE9ubHkiLCAiZm9nIiwgInVzZUZvZyIsICJmb2dFeHAyIiwKCQkJImZsYXRTaGFkaW5nIiwgInNpemVBdHRlbnVhdGlvbiIsICJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwgInNraW5uaW5nIiwKCQkJIm1heEJvbmVzIiwgInVzZVZlcnRleFRleHR1cmUiLCAibW9ycGhUYXJnZXRzIiwgIm1vcnBoTm9ybWFscyIsCgkJCSJtYXhNb3JwaFRhcmdldHMiLCAibWF4TW9ycGhOb3JtYWxzIiwgInByZW11bHRpcGxpZWRBbHBoYSIsCgkJCSJudW1EaXJMaWdodHMiLCAibnVtUG9pbnRMaWdodHMiLCAibnVtU3BvdExpZ2h0cyIsICJudW1IZW1pTGlnaHRzIiwgIm51bVJlY3RBcmVhTGlnaHRzIiwKCQkJIm51bURpckxpZ2h0U2hhZG93cyIsICJudW1Qb2ludExpZ2h0U2hhZG93cyIsICJudW1TcG90TGlnaHRTaGFkb3dzIiwKCQkJInNoYWRvd01hcEVuYWJsZWQiLCAic2hhZG93TWFwVHlwZSIsICJ0b25lTWFwcGluZyIsICdwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cycsCgkJCSJhbHBoYVRlc3QiLCAiZG91YmxlU2lkZWQiLCAiZmxpcFNpZGVkIiwgIm51bUNsaXBwaW5nUGxhbmVzIiwgIm51bUNsaXBJbnRlcnNlY3Rpb24iLCAiZGVwdGhQYWNraW5nIiwgImRpdGhlcmluZyIsCgkJCSJzaGVlbiIKCQldOwoKCgkJZnVuY3Rpb24gYWxsb2NhdGVCb25lcyggb2JqZWN0ICkgewoKCQkJdmFyIHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uOwoJCQl2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lczsKCgkJCWlmICggZmxvYXRWZXJ0ZXhUZXh0dXJlcyApIHsKCgkJCQlyZXR1cm4gMTAyNDsKCgkJCX0gZWxzZSB7CgoJCQkJLy8gZGVmYXVsdCBmb3Igd2hlbiBvYmplY3QgaXMgbm90IHNwZWNpZmllZAoJCQkJLy8gKCBmb3IgZXhhbXBsZSB3aGVuIHByZWJ1aWxkaW5nIHNoYWRlciB0byBiZSB1c2VkIHdpdGggbXVsdGlwbGUgb2JqZWN0cyApCgkJCQkvLwoJCQkJLy8gIC0gbGVhdmUgc29tZSBleHRyYSBzcGFjZSBmb3Igb3RoZXIgdW5pZm9ybXMKCQkJCS8vICAtIGxpbWl0IGhlcmUgaXMgQU5HTEUncyAyNTQgbWF4IHVuaWZvcm0gdmVjdG9ycwoJCQkJLy8gICAgKHVwIHRvIDU0IHNob3VsZCBiZSBzYWZlKQoKCQkJCXZhciBuVmVydGV4VW5pZm9ybXMgPSBtYXhWZXJ0ZXhVbmlmb3JtczsKCQkJCXZhciBuVmVydGV4TWF0cmljZXMgPSBNYXRoLmZsb29yKCAoIG5WZXJ0ZXhVbmlmb3JtcyAtIDIwICkgLyA0ICk7CgoJCQkJdmFyIG1heEJvbmVzID0gTWF0aC5taW4oIG5WZXJ0ZXhNYXRyaWNlcywgYm9uZXMubGVuZ3RoICk7CgoJCQkJaWYgKCBtYXhCb25lcyA8IGJvbmVzLmxlbmd0aCApIHsKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicgKTsKCQkJCQlyZXR1cm4gMDsKCgkJCQl9CgoJCQkJcmV0dXJuIG1heEJvbmVzOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hcCwgZ2FtbWFPdmVycmlkZUxpbmVhciApIHsKCgkJCXZhciBlbmNvZGluZzsKCgkJCWlmICggISBtYXAgKSB7CgoJCQkJZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZzsKCgkJCX0gZWxzZSBpZiAoIG1hcC5pc1RleHR1cmUgKSB7CgoJCQkJZW5jb2RpbmcgPSBtYXAuZW5jb2Rpbmc7CgoJCQl9IGVsc2UgaWYgKCBtYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHsKCgkJCQljb25zb2xlLndhcm4oICJUSFJFRS5XZWJHTFByb2dyYW1zLmdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXA6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuIiApOwoJCQkJZW5jb2RpbmcgPSBtYXAudGV4dHVyZS5lbmNvZGluZzsKCgkJCX0KCgkJCS8vIGFkZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgV2ViR0xSZW5kZXJlci5nYW1tYUlucHV0L2dhbW1hT3V0cHV0IHBhcmFtZXRlciwgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgYXQgc29tZSBwb2ludC4KCQkJaWYgKCBlbmNvZGluZyA9PT0gTGluZWFyRW5jb2RpbmcgJiYgZ2FtbWFPdmVycmlkZUxpbmVhciApIHsKCgkJCQllbmNvZGluZyA9IEdhbW1hRW5jb2Rpbmc7CgoJCQl9CgoJCQlyZXR1cm4gZW5jb2Rpbmc7CgoJCX0KCgkJdGhpcy5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgbGlnaHRzLCBzaGFkb3dzLCBmb2csIG5DbGlwUGxhbmVzLCBuQ2xpcEludGVyc2VjdGlvbiwgb2JqZWN0ICkgewoKCQkJdmFyIHNoYWRlcklEID0gc2hhZGVySURzWyBtYXRlcmlhbC50eXBlIF07CgoJCQkvLyBoZXVyaXN0aWNzIHRvIGNyZWF0ZSBzaGFkZXIgcGFyYW1ldGVycyBhY2NvcmRpbmcgdG8gbGlnaHRzIGluIHRoZSBzY2VuZQoJCQkvLyAobm90IHRvIGJsb3cgb3ZlciBtYXhMaWdodHMgYnVkZ2V0KQoKCQkJdmFyIG1heEJvbmVzID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggPyBhbGxvY2F0ZUJvbmVzKCBvYmplY3QgKSA6IDA7CgoJCQlpZiAoIG1hdGVyaWFsLnByZWNpc2lvbiAhPT0gbnVsbCApIHsKCgkJCQlwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMuZ2V0TWF4UHJlY2lzaW9uKCBtYXRlcmlhbC5wcmVjaXNpb24gKTsKCgkJCQlpZiAoIHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW0uZ2V0UGFyYW1ldGVyczonLCBtYXRlcmlhbC5wcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIHByZWNpc2lvbiwgJ2luc3RlYWQuJyApOwoKCQkJCX0KCgkJCX0KCgkJCXZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7CgkJCXZhciBudW1NdWx0aXZpZXdWaWV3cyA9IGN1cnJlbnRSZW5kZXJUYXJnZXQgJiYgY3VycmVudFJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGl2aWV3UmVuZGVyVGFyZ2V0ID8gY3VycmVudFJlbmRlclRhcmdldC5udW1WaWV3cyA6IDA7CgoJCQl2YXIgcGFyYW1ldGVycyA9IHsKCgkJCQlpc1dlYkdMMjogaXNXZWJHTDIsCgoJCQkJc2hhZGVySUQ6IHNoYWRlcklELAoKCQkJCXByZWNpc2lvbjogcHJlY2lzaW9uLAoKCQkJCWluc3RhbmNpbmc6IG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUsCgoJCQkJc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsCgkJCQludW1NdWx0aXZpZXdWaWV3czogbnVtTXVsdGl2aWV3Vmlld3MsCgkJCQlvdXRwdXRFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggKCAhIGN1cnJlbnRSZW5kZXJUYXJnZXQgKSA/IG51bGwgOiBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlcmVyLmdhbW1hT3V0cHV0ICksCgkJCQltYXA6ICEhIG1hdGVyaWFsLm1hcCwKCQkJCW1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5tYXAgKSwKCQkJCW1hdGNhcDogISEgbWF0ZXJpYWwubWF0Y2FwLAoJCQkJbWF0Y2FwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLm1hdGNhcCApLAoJCQkJZW52TWFwOiAhISBtYXRlcmlhbC5lbnZNYXAsCgkJCQllbnZNYXBNb2RlOiBtYXRlcmlhbC5lbnZNYXAgJiYgbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcsCgkJCQllbnZNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwuZW52TWFwICksCgkJCQllbnZNYXBDdWJlVVY6ICggISEgbWF0ZXJpYWwuZW52TWFwICkgJiYgKCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApIHx8ICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nICkgKSwKCQkJCWxpZ2h0TWFwOiAhISBtYXRlcmlhbC5saWdodE1hcCwKCQkJCWxpZ2h0TWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLmxpZ2h0TWFwICksCgkJCQlhb01hcDogISEgbWF0ZXJpYWwuYW9NYXAsCgkJCQllbWlzc2l2ZU1hcDogISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAsCgkJCQllbWlzc2l2ZU1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApLAoJCQkJYnVtcE1hcDogISEgbWF0ZXJpYWwuYnVtcE1hcCwKCQkJCW5vcm1hbE1hcDogISEgbWF0ZXJpYWwubm9ybWFsTWFwLAoJCQkJb2JqZWN0U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IE9iamVjdFNwYWNlTm9ybWFsTWFwLAoJCQkJdGFuZ2VudFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBUYW5nZW50U3BhY2VOb3JtYWxNYXAsCgkJCQljbGVhcmNvYXROb3JtYWxNYXA6ICEhIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCwKCQkJCWRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLAoJCQkJcm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsCgkJCQltZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCwKCQkJCXNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCwKCQkJCWFscGhhTWFwOiAhISBtYXRlcmlhbC5hbHBoYU1hcCwKCgkJCQlncmFkaWVudE1hcDogISEgbWF0ZXJpYWwuZ3JhZGllbnRNYXAsCgoJCQkJc2hlZW46ICEhIG1hdGVyaWFsLnNoZWVuLAoKCQkJCWNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsCgoJCQkJdmVydGV4VGFuZ2VudHM6ICggbWF0ZXJpYWwubm9ybWFsTWFwICYmIG1hdGVyaWFsLnZlcnRleFRhbmdlbnRzICksCgkJCQl2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycywKCQkJCXZlcnRleFV2czogISEgbWF0ZXJpYWwubWFwIHx8ICEhIG1hdGVyaWFsLmJ1bXBNYXAgfHwgISEgbWF0ZXJpYWwubm9ybWFsTWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwIHx8ICEhIG1hdGVyaWFsLmFscGhhTWFwIHx8ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwIHx8ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcCB8fCAhISBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwIHx8ICEhIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCwKCQkJCXV2c1ZlcnRleE9ubHk6ICEgKCAhISBtYXRlcmlhbC5tYXAgfHwgISEgbWF0ZXJpYWwuYnVtcE1hcCB8fCAhISBtYXRlcmlhbC5ub3JtYWxNYXAgfHwgISEgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgfHwgISEgbWF0ZXJpYWwuYWxwaGFNYXAgfHwgISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgfHwgISEgbWF0ZXJpYWwucm91Z2huZXNzTWFwIHx8ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSAmJiAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsCgoJCQkJZm9nOiAhISBmb2csCgkJCQl1c2VGb2c6IG1hdGVyaWFsLmZvZywKCQkJCWZvZ0V4cDI6ICggZm9nICYmIGZvZy5pc0ZvZ0V4cDIgKSwKCgkJCQlmbGF0U2hhZGluZzogbWF0ZXJpYWwuZmxhdFNoYWRpbmcsCgoJCQkJc2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24sCgkJCQlsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLAoKCQkJCXNraW5uaW5nOiBtYXRlcmlhbC5za2lubmluZyAmJiBtYXhCb25lcyA+IDAsCgkJCQltYXhCb25lczogbWF4Qm9uZXMsCgkJCQl1c2VWZXJ0ZXhUZXh0dXJlOiBmbG9hdFZlcnRleFRleHR1cmVzLAoKCQkJCW1vcnBoVGFyZ2V0czogbWF0ZXJpYWwubW9ycGhUYXJnZXRzLAoJCQkJbW9ycGhOb3JtYWxzOiBtYXRlcmlhbC5tb3JwaE5vcm1hbHMsCgkJCQltYXhNb3JwaFRhcmdldHM6IHJlbmRlcmVyLm1heE1vcnBoVGFyZ2V0cywKCQkJCW1heE1vcnBoTm9ybWFsczogcmVuZGVyZXIubWF4TW9ycGhOb3JtYWxzLAoKCQkJCW51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCwKCQkJCW51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLAoJCQkJbnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLAoJCQkJbnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsCgkJCQludW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsCgoJCQkJbnVtRGlyTGlnaHRTaGFkb3dzOiBsaWdodHMuZGlyZWN0aW9uYWxTaGFkb3dNYXAubGVuZ3RoLAoJCQkJbnVtUG9pbnRMaWdodFNoYWRvd3M6IGxpZ2h0cy5wb2ludFNoYWRvd01hcC5sZW5ndGgsCgkJCQludW1TcG90TGlnaHRTaGFkb3dzOiBsaWdodHMuc3BvdFNoYWRvd01hcC5sZW5ndGgsCgoJCQkJbnVtQ2xpcHBpbmdQbGFuZXM6IG5DbGlwUGxhbmVzLAoJCQkJbnVtQ2xpcEludGVyc2VjdGlvbjogbkNsaXBJbnRlcnNlY3Rpb24sCgoJCQkJZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsCgoJCQkJc2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgc2hhZG93cy5sZW5ndGggPiAwLAoJCQkJc2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsCgoJCQkJdG9uZU1hcHBpbmc6IG1hdGVyaWFsLnRvbmVNYXBwZWQgPyByZW5kZXJlci50b25lTWFwcGluZyA6IE5vVG9uZU1hcHBpbmcsCgkJCQlwaHlzaWNhbGx5Q29ycmVjdExpZ2h0czogcmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMsCgoJCQkJcHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsCgoJCQkJYWxwaGFUZXN0OiBtYXRlcmlhbC5hbHBoYVRlc3QsCgkJCQlkb3VibGVTaWRlZDogbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSwKCQkJCWZsaXBTaWRlZDogbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUsCgoJCQkJZGVwdGhQYWNraW5nOiAoIG1hdGVyaWFsLmRlcHRoUGFja2luZyAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgOiBmYWxzZQoKCQkJfTsKCgkJCXJldHVybiBwYXJhbWV0ZXJzOwoKCQl9OwoKCQl0aGlzLmdldFByb2dyYW1DYWNoZUtleSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKSB7CgoJCQl2YXIgYXJyYXkgPSBbXTsKCgkJCWlmICggcGFyYW1ldGVycy5zaGFkZXJJRCApIHsKCgkJCQlhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7CgoJCQl9IGVsc2UgewoKCQkJCWFycmF5LnB1c2goIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyICk7CgkJCQlhcnJheS5wdXNoKCBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIgKTsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuZGVmaW5lcyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWZvciAoIHZhciBuYW1lIGluIG1hdGVyaWFsLmRlZmluZXMgKSB7CgoJCQkJCWFycmF5LnB1c2goIG5hbWUgKTsKCQkJCQlhcnJheS5wdXNoKCBtYXRlcmlhbC5kZWZpbmVzWyBuYW1lIF0gKTsKCgkJCQl9CgoJCQl9CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJOYW1lcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJYXJyYXkucHVzaCggcGFyYW1ldGVyc1sgcGFyYW1ldGVyTmFtZXNbIGkgXSBdICk7CgoJCQl9CgoJCQlhcnJheS5wdXNoKCBtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUudG9TdHJpbmcoKSApOwoKCQkJYXJyYXkucHVzaCggcmVuZGVyZXIuZ2FtbWFPdXRwdXQgKTsKCgkJCWFycmF5LnB1c2goIHJlbmRlcmVyLmdhbW1hRmFjdG9yICk7CgoJCQlyZXR1cm4gYXJyYXkuam9pbigpOwoKCQl9OwoKCQl0aGlzLmFjcXVpcmVQcm9ncmFtID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjYWNoZUtleSApIHsKCgkJCXZhciBwcm9ncmFtOwoKCQkJLy8gQ2hlY2sgaWYgY29kZSBoYXMgYmVlbiBhbHJlYWR5IGNvbXBpbGVkCgkJCWZvciAoIHZhciBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHsKCgkJCQl2YXIgcHJlZXhpc3RpbmdQcm9ncmFtID0gcHJvZ3JhbXNbIHAgXTsKCgkJCQlpZiAoIHByZWV4aXN0aW5nUHJvZ3JhbS5jYWNoZUtleSA9PT0gY2FjaGVLZXkgKSB7CgoJCQkJCXByb2dyYW0gPSBwcmVleGlzdGluZ1Byb2dyYW07CgkJCQkJKysgcHJvZ3JhbS51c2VkVGltZXM7CgoJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCXByb2dyYW0gPSBuZXcgV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgZXh0ZW5zaW9ucywgY2FjaGVLZXksIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMgKTsKCQkJCXByb2dyYW1zLnB1c2goIHByb2dyYW0gKTsKCgkJCX0KCgkJCXJldHVybiBwcm9ncmFtOwoKCQl9OwoKCQl0aGlzLnJlbGVhc2VQcm9ncmFtID0gZnVuY3Rpb24gKCBwcm9ncmFtICkgewoKCQkJaWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHsKCgkJCQkvLyBSZW1vdmUgZnJvbSB1bm9yZGVyZWQgc2V0CgkJCQl2YXIgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTsKCQkJCXByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdOwoJCQkJcHJvZ3JhbXMucG9wKCk7CgoJCQkJLy8gRnJlZSBXZWJHTCByZXNvdXJjZXMKCQkJCXByb2dyYW0uZGVzdHJveSgpOwoKCQkJfQoKCQl9OwoKCQkvLyBFeHBvc2VkIGZvciByZXNvdXJjZSBtb25pdG9yaW5nICYgZXJyb3IgZmVlZGJhY2sgdmlhIHJlbmRlcmVyLmluZm86CgkJdGhpcy5wcm9ncmFtcyA9IHByb2dyYW1zOwoKCX0KCgkvKioKCSAqIEBhdXRob3IgZm9yZGFjaW91cyAvIGZvcmRhY2lvdXMuZ2l0aHViLmlvCgkgKi8KCglmdW5jdGlvbiBXZWJHTFByb3BlcnRpZXMoKSB7CgoJCXZhciBwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTsKCgkJZnVuY3Rpb24gZ2V0KCBvYmplY3QgKSB7CgoJCQl2YXIgbWFwID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApOwoKCQkJaWYgKCBtYXAgPT09IHVuZGVmaW5lZCApIHsKCgkJCQltYXAgPSB7fTsKCQkJCXByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApOwoKCQkJfQoKCQkJcmV0dXJuIG1hcDsKCgkJfQoKCQlmdW5jdGlvbiByZW1vdmUoIG9iamVjdCApIHsKCgkJCXByb3BlcnRpZXMuZGVsZXRlKCBvYmplY3QgKTsKCgkJfQoKCQlmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwga2V5LCB2YWx1ZSApIHsKCgkJCXByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKVsga2V5IF0gPSB2YWx1ZTsKCgkJfQoKCQlmdW5jdGlvbiBkaXNwb3NlKCkgewoKCQkJcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7CgoJCX0KCgkJcmV0dXJuIHsKCQkJZ2V0OiBnZXQsCgkJCXJlbW92ZTogcmVtb3ZlLAoJCQl1cGRhdGU6IHVwZGF0ZSwKCQkJZGlzcG9zZTogZGlzcG9zZQoJCX07CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkgewoKCQlpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkgewoKCQkJcmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjsKCgkJfSBlbHNlIGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHsKCgkJCXJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjsKCgkJfSBlbHNlIGlmICggYS5wcm9ncmFtICE9PSBiLnByb2dyYW0gKSB7CgoJCQlyZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkOwoKCQl9IGVsc2UgaWYgKCBhLm1hdGVyaWFsLmlkICE9PSBiLm1hdGVyaWFsLmlkICkgewoKCQkJcmV0dXJuIGEubWF0ZXJpYWwuaWQgLSBiLm1hdGVyaWFsLmlkOwoKCQl9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHsKCgkJCXJldHVybiBhLnogLSBiLno7CgoJCX0gZWxzZSB7CgoJCQlyZXR1cm4gYS5pZCAtIGIuaWQ7CgoJCX0KCgl9CgoJZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkgewoKCQlpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkgewoKCQkJcmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjsKCgkJfSBlbHNlIGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHsKCgkJCXJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjsKCgkJfSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7CgoJCQlyZXR1cm4gYi56IC0gYS56OwoKCQl9IGVsc2UgewoKCQkJcmV0dXJuIGEuaWQgLSBiLmlkOwoKCQl9CgoJfQoKCglmdW5jdGlvbiBXZWJHTFJlbmRlckxpc3QoKSB7CgoJCXZhciByZW5kZXJJdGVtcyA9IFtdOwoJCXZhciByZW5kZXJJdGVtc0luZGV4ID0gMDsKCgkJdmFyIG9wYXF1ZSA9IFtdOwoJCXZhciB0cmFuc3BhcmVudCA9IFtdOwoKCQl2YXIgZGVmYXVsdFByb2dyYW0gPSB7IGlkOiAtIDEgfTsKCgkJZnVuY3Rpb24gaW5pdCgpIHsKCgkJCXJlbmRlckl0ZW1zSW5kZXggPSAwOwoKCQkJb3BhcXVlLmxlbmd0aCA9IDA7CgkJCXRyYW5zcGFyZW50Lmxlbmd0aCA9IDA7CgoJCX0KCgkJZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHsKCgkJCXZhciByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTsKCgkJCWlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCXJlbmRlckl0ZW0gPSB7CgkJCQkJaWQ6IG9iamVjdC5pZCwKCQkJCQlvYmplY3Q6IG9iamVjdCwKCQkJCQlnZW9tZXRyeTogZ2VvbWV0cnksCgkJCQkJbWF0ZXJpYWw6IG1hdGVyaWFsLAoJCQkJCXByb2dyYW06IG1hdGVyaWFsLnByb2dyYW0gfHwgZGVmYXVsdFByb2dyYW0sCgkJCQkJZ3JvdXBPcmRlcjogZ3JvdXBPcmRlciwKCQkJCQlyZW5kZXJPcmRlcjogb2JqZWN0LnJlbmRlck9yZGVyLAoJCQkJCXo6IHosCgkJCQkJZ3JvdXA6IGdyb3VwCgkJCQl9OwoKCQkJCXJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF0gPSByZW5kZXJJdGVtOwoKCQkJfSBlbHNlIHsKCgkJCQlyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkOwoJCQkJcmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7CgkJCQlyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7CgkJCQlyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7CgkJCQlyZW5kZXJJdGVtLnByb2dyYW0gPSBtYXRlcmlhbC5wcm9ncmFtIHx8IGRlZmF1bHRQcm9ncmFtOwoJCQkJcmVuZGVySXRlbS5ncm91cE9yZGVyID0gZ3JvdXBPcmRlcjsKCQkJCXJlbmRlckl0ZW0ucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7CgkJCQlyZW5kZXJJdGVtLnogPSB6OwoJCQkJcmVuZGVySXRlbS5ncm91cCA9IGdyb3VwOwoKCQkJfQoKCQkJcmVuZGVySXRlbXNJbmRleCArKzsKCgkJCXJldHVybiByZW5kZXJJdGVtOwoKCQl9CgoJCWZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHsKCgkJCXZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApOwoKCQkJKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSA/IHRyYW5zcGFyZW50IDogb3BhcXVlICkucHVzaCggcmVuZGVySXRlbSApOwoKCQl9CgoJCWZ1bmN0aW9uIHVuc2hpZnQoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHsKCgkJCXZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApOwoKCQkJKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSA/IHRyYW5zcGFyZW50IDogb3BhcXVlICkudW5zaGlmdCggcmVuZGVySXRlbSApOwoKCQl9CgoJCWZ1bmN0aW9uIHNvcnQoKSB7CgoJCQlpZiAoIG9wYXF1ZS5sZW5ndGggPiAxICkgeyBvcGFxdWUuc29ydCggcGFpbnRlclNvcnRTdGFibGUgKTsgfQoJCQlpZiAoIHRyYW5zcGFyZW50Lmxlbmd0aCA+IDEgKSB7IHRyYW5zcGFyZW50LnNvcnQoIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApOyB9CgoJCX0KCgkJcmV0dXJuIHsKCQkJb3BhcXVlOiBvcGFxdWUsCgkJCXRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCwKCgkJCWluaXQ6IGluaXQsCgkJCXB1c2g6IHB1c2gsCgkJCXVuc2hpZnQ6IHVuc2hpZnQsCgoJCQlzb3J0OiBzb3J0CgkJfTsKCgl9CgoJZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0cygpIHsKCgkJdmFyIGxpc3RzID0gbmV3IFdlYWtNYXAoKTsKCgkJZnVuY3Rpb24gb25TY2VuZURpc3Bvc2UoIGV2ZW50ICkgewoKCQkJdmFyIHNjZW5lID0gZXZlbnQudGFyZ2V0OwoKCQkJc2NlbmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblNjZW5lRGlzcG9zZSApOwoKCQkJbGlzdHMuZGVsZXRlKCBzY2VuZSApOwoKCQl9CgoJCWZ1bmN0aW9uIGdldCggc2NlbmUsIGNhbWVyYSApIHsKCgkJCXZhciBjYW1lcmFzID0gbGlzdHMuZ2V0KCBzY2VuZSApOwoJCQl2YXIgbGlzdDsKCQkJaWYgKCBjYW1lcmFzID09PSB1bmRlZmluZWQgKSB7CgoJCQkJbGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTsKCQkJCWxpc3RzLnNldCggc2NlbmUsIG5ldyBXZWFrTWFwKCkgKTsKCQkJCWxpc3RzLmdldCggc2NlbmUgKS5zZXQoIGNhbWVyYSwgbGlzdCApOwoKCQkJCXNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UgKTsKCgkJCX0gZWxzZSB7CgoJCQkJbGlzdCA9IGNhbWVyYXMuZ2V0KCBjYW1lcmEgKTsKCQkJCWlmICggbGlzdCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQlsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpOwoJCQkJCWNhbWVyYXMuc2V0KCBjYW1lcmEsIGxpc3QgKTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gbGlzdDsKCgkJfQoKCQlmdW5jdGlvbiBkaXNwb3NlKCkgewoKCQkJbGlzdHMgPSBuZXcgV2Vha01hcCgpOwoKCQl9CgoJCXJldHVybiB7CgkJCWdldDogZ2V0LAoJCQlkaXNwb3NlOiBkaXNwb3NlCgkJfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gVW5pZm9ybXNDYWNoZSgpIHsKCgkJdmFyIGxpZ2h0cyA9IHt9OwoKCQlyZXR1cm4gewoKCQkJZ2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkgewoKCQkJCWlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07CgoJCQkJfQoKCQkJCXZhciB1bmlmb3JtczsKCgkJCQlzd2l0Y2ggKCBsaWdodC50eXBlICkgewoKCQkJCQljYXNlICdEaXJlY3Rpb25hbExpZ2h0JzoKCQkJCQkJdW5pZm9ybXMgPSB7CgkJCQkJCQlkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksCgkJCQkJCQljb2xvcjogbmV3IENvbG9yKCksCgoJCQkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQkJCXNoYWRvd0JpYXM6IDAsCgkJCQkJCQlzaGFkb3dSYWRpdXM6IDEsCgkJCQkJCQlzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpCgkJCQkJCX07CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdTcG90TGlnaHQnOgoJCQkJCQl1bmlmb3JtcyA9IHsKCQkJCQkJCXBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLAoJCQkJCQkJZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLAoJCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpLAoJCQkJCQkJZGlzdGFuY2U6IDAsCgkJCQkJCQljb25lQ29zOiAwLAoJCQkJCQkJcGVudW1icmFDb3M6IDAsCgkJCQkJCQlkZWNheTogMCwKCgkJCQkJCQlzaGFkb3c6IGZhbHNlLAoJCQkJCQkJc2hhZG93QmlhczogMCwKCQkJCQkJCXNoYWRvd1JhZGl1czogMSwKCQkJCQkJCXNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCkKCQkJCQkJfTsKCQkJCQkJYnJlYWs7CgoJCQkJCWNhc2UgJ1BvaW50TGlnaHQnOgoJCQkJCQl1bmlmb3JtcyA9IHsKCQkJCQkJCXBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLAoJCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpLAoJCQkJCQkJZGlzdGFuY2U6IDAsCgkJCQkJCQlkZWNheTogMCwKCgkJCQkJCQlzaGFkb3c6IGZhbHNlLAoJCQkJCQkJc2hhZG93QmlhczogMCwKCQkJCQkJCXNoYWRvd1JhZGl1czogMSwKCQkJCQkJCXNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCksCgkJCQkJCQlzaGFkb3dDYW1lcmFOZWFyOiAxLAoJCQkJCQkJc2hhZG93Q2FtZXJhRmFyOiAxMDAwCgkJCQkJCX07CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdIZW1pc3BoZXJlTGlnaHQnOgoJCQkJCQl1bmlmb3JtcyA9IHsKCQkJCQkJCWRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSwKCQkJCQkJCXNreUNvbG9yOiBuZXcgQ29sb3IoKSwKCQkJCQkJCWdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKQoJCQkJCQl9OwoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSAnUmVjdEFyZWFMaWdodCc6CgkJCQkJCXVuaWZvcm1zID0gewoJCQkJCQkJY29sb3I6IG5ldyBDb2xvcigpLAoJCQkJCQkJcG9zaXRpb246IG5ldyBWZWN0b3IzKCksCgkJCQkJCQloYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksCgkJCQkJCQloYWxmSGVpZ2h0OiBuZXcgVmVjdG9yMygpCgkJCQkJCQkvLyBUT0RPIChhYmVsbmF0aW9uKTogc2V0IFJlY3RBcmVhTGlnaHQgc2hhZG93IHVuaWZvcm1zCgkJCQkJCX07CgkJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCQlsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtczsKCgkJCQlyZXR1cm4gdW5pZm9ybXM7CgoJCQl9CgoJCX07CgoJfQoKCXZhciBuZXh0VmVyc2lvbiA9IDA7CgoJZnVuY3Rpb24gc2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0KCBsaWdodEEsIGxpZ2h0QiApIHsKCgkJcmV0dXJuICggbGlnaHRCLmNhc3RTaGFkb3cgPyAxIDogMCApIC0gKCBsaWdodEEuY2FzdFNoYWRvdyA/IDEgOiAwICk7CgoJfQoKCWZ1bmN0aW9uIFdlYkdMTGlnaHRzKCkgewoKCQl2YXIgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpOwoKCQl2YXIgc3RhdGUgPSB7CgoJCQl2ZXJzaW9uOiAwLAoKCQkJaGFzaDogewoJCQkJZGlyZWN0aW9uYWxMZW5ndGg6IC0gMSwKCQkJCXBvaW50TGVuZ3RoOiAtIDEsCgkJCQlzcG90TGVuZ3RoOiAtIDEsCgkJCQlyZWN0QXJlYUxlbmd0aDogLSAxLAoJCQkJaGVtaUxlbmd0aDogLSAxLAoKCQkJCW51bURpcmVjdGlvbmFsU2hhZG93czogLSAxLAoJCQkJbnVtUG9pbnRTaGFkb3dzOiAtIDEsCgkJCQludW1TcG90U2hhZG93czogLSAxLAoJCQl9LAoKCQkJYW1iaWVudDogWyAwLCAwLCAwIF0sCgkJCXByb2JlOiBbXSwKCQkJZGlyZWN0aW9uYWw6IFtdLAoJCQlkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sCgkJCWRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiBbXSwKCQkJc3BvdDogW10sCgkJCXNwb3RTaGFkb3dNYXA6IFtdLAoJCQlzcG90U2hhZG93TWF0cml4OiBbXSwKCQkJcmVjdEFyZWE6IFtdLAoJCQlwb2ludDogW10sCgkJCXBvaW50U2hhZG93TWFwOiBbXSwKCQkJcG9pbnRTaGFkb3dNYXRyaXg6IFtdLAoJCQloZW1pOiBbXSwKCgkJCW51bURpcmVjdGlvbmFsU2hhZG93czogLSAxLAoJCQludW1Qb2ludFNoYWRvd3M6IC0gMSwKCQkJbnVtU3BvdFNoYWRvd3M6IC0gMQoKCQl9OwoKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkgeyBzdGF0ZS5wcm9iZS5wdXNoKCBuZXcgVmVjdG9yMygpICk7IH0KCgkJdmFyIHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpOwoJCXZhciBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTsKCQl2YXIgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpOwoKCQlmdW5jdGlvbiBzZXR1cCggbGlnaHRzLCBzaGFkb3dzLCBjYW1lcmEgKSB7CgoJCQl2YXIgciA9IDAsIGcgPSAwLCBiID0gMDsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7IHN0YXRlLnByb2JlWyBpIF0uc2V0KCAwLCAwLCAwICk7IH0KCgkJCXZhciBkaXJlY3Rpb25hbExlbmd0aCA9IDA7CgkJCXZhciBwb2ludExlbmd0aCA9IDA7CgkJCXZhciBzcG90TGVuZ3RoID0gMDsKCQkJdmFyIHJlY3RBcmVhTGVuZ3RoID0gMDsKCQkJdmFyIGhlbWlMZW5ndGggPSAwOwoKCQkJdmFyIG51bURpcmVjdGlvbmFsU2hhZG93cyA9IDA7CgkJCXZhciBudW1Qb2ludFNoYWRvd3MgPSAwOwoJCQl2YXIgbnVtU3BvdFNoYWRvd3MgPSAwOwoKCQkJdmFyIHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlOwoKCQkJbGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCApOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGxpZ2h0ID0gbGlnaHRzWyBpIF07CgoJCQkJdmFyIGNvbG9yID0gbGlnaHQuY29sb3I7CgkJCQl2YXIgaW50ZW5zaXR5ID0gbGlnaHQuaW50ZW5zaXR5OwoJCQkJdmFyIGRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7CgoJCQkJdmFyIHNoYWRvd01hcCA9ICggbGlnaHQuc2hhZG93ICYmIGxpZ2h0LnNoYWRvdy5tYXAgKSA/IGxpZ2h0LnNoYWRvdy5tYXAudGV4dHVyZSA6IG51bGw7CgoJCQkJaWYgKCBsaWdodC5pc0FtYmllbnRMaWdodCApIHsKCgkJCQkJciArPSBjb2xvci5yICogaW50ZW5zaXR5OwoJCQkJCWcgKz0gY29sb3IuZyAqIGludGVuc2l0eTsKCQkJCQliICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7CgoJCQkJfSBlbHNlIGlmICggbGlnaHQuaXNMaWdodFByb2JlICkgewoKCQkJCQlmb3IgKCB2YXIgaiA9IDA7IGogPCA5OyBqICsrICkgewoKCQkJCQkJc3RhdGUucHJvYmVbIGogXS5hZGRTY2FsZWRWZWN0b3IoIGxpZ2h0LnNoLmNvZWZmaWNpZW50c1sgaiBdLCBpbnRlbnNpdHkgKTsKCgkJCQkJfQoKCQkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHsKCgkJCQkJdmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApOwoKCQkJCQl1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTsKCQkJCQl1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwoJCQkJCXZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTsKCQkJCQl1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKCB2ZWN0b3IzICk7CgkJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApOwoKCQkJCQl1bmlmb3Jtcy5zaGFkb3cgPSBsaWdodC5jYXN0U2hhZG93OwoKCQkJCQlpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7CgoJCQkJCQl2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93OwoKCQkJCQkJdW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzOwoJCQkJCQl1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzOwoJCQkJCQl1bmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7CgoJCQkJCQlzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd01hcDsKCQkJCQkJc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4OwoKCQkJCQkJbnVtRGlyZWN0aW9uYWxTaGFkb3dzICsrOwoKCQkJCQl9CgoJCQkJCXN0YXRlLmRpcmVjdGlvbmFsWyBkaXJlY3Rpb25hbExlbmd0aCBdID0gdW5pZm9ybXM7CgoJCQkJCWRpcmVjdGlvbmFsTGVuZ3RoICsrOwoKCQkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzU3BvdExpZ2h0ICkgewoKCQkJCQl2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7CgoJCQkJCXVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTsKCQkJCQl1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTsKCgkJCQkJdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7CgkJCQkJdW5pZm9ybXMuZGlzdGFuY2UgPSBkaXN0YW5jZTsKCgkJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTsKCQkJCQl2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7CgkJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApOwoJCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTsKCgkJCQkJdW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApOwoJCQkJCXVuaWZvcm1zLnBlbnVtYnJhQ29zID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICogKCAxIC0gbGlnaHQucGVudW1icmEgKSApOwoJCQkJCXVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7CgoJCQkJCXVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7CgoJCQkJCWlmICggbGlnaHQuY2FzdFNoYWRvdyApIHsKCgkJCQkJCXZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7CgoJCQkJCQl1bmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7CgkJCQkJCXVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7CgkJCQkJCXVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTsKCgkJCQkJCXN0YXRlLnNwb3RTaGFkb3dNYXBbIHNwb3RMZW5ndGggXSA9IHNoYWRvd01hcDsKCQkJCQkJc3RhdGUuc3BvdFNoYWRvd01hdHJpeFsgc3BvdExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDsKCgkJCQkJCW51bVNwb3RTaGFkb3dzICsrOwoKCQkJCQl9CgoJCQkJCXN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXSA9IHVuaWZvcm1zOwoKCQkJCQlzcG90TGVuZ3RoICsrOwoKCQkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzUmVjdEFyZWFMaWdodCApIHsKCgkJCQkJdmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApOwoKCQkJCQkvLyAoYSkgaW50ZW5zaXR5IGlzIHRoZSB0b3RhbCB2aXNpYmxlIGxpZ2h0IGVtaXR0ZWQKCQkJCQkvL3VuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAvICggbGlnaHQud2lkdGggKiBsaWdodC5oZWlnaHQgKiBNYXRoLlBJICkgKTsKCgkJCQkJLy8gKGIpIGludGVuc2l0eSBpcyB0aGUgYnJpZ2h0bmVzcyBvZiB0aGUgbGlnaHQKCQkJCQl1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTsKCgkJCQkJdW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwoJCQkJCXVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApOwoKCQkJCQkvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzCgkJCQkJbWF0cml4NDIuaWRlbnRpdHkoKTsKCQkJCQltYXRyaXg0LmNvcHkoIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CgkJCQkJbWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApOwoJCQkJCW1hdHJpeDQyLmV4dHJhY3RSb3RhdGlvbiggbWF0cml4NCApOwoKCQkJCQl1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTsKCQkJCQl1bmlmb3Jtcy5oYWxmSGVpZ2h0LnNldCggMC4wLCBsaWdodC5oZWlnaHQgKiAwLjUsIDAuMCApOwoKCQkJCQl1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApOwoJCQkJCXVuaWZvcm1zLmhhbGZIZWlnaHQuYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApOwoKCQkJCQkvLyBUT0RPIChhYmVsbmF0aW9uKTogUmVjdEFyZWFMaWdodCBkaXN0YW5jZT8KCQkJCQkvLyB1bmlmb3Jtcy5kaXN0YW5jZSA9IGRpc3RhbmNlOwoKCQkJCQlzdGF0ZS5yZWN0QXJlYVsgcmVjdEFyZWFMZW5ndGggXSA9IHVuaWZvcm1zOwoKCQkJCQlyZWN0QXJlYUxlbmd0aCArKzsKCgkJCQl9IGVsc2UgaWYgKCBsaWdodC5pc1BvaW50TGlnaHQgKSB7CgoJCQkJCXZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTsKCgkJCQkJdW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwoJCQkJCXVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApOwoKCQkJCQl1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTsKCQkJCQl1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlOwoJCQkJCXVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7CgoJCQkJCXVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7CgoJCQkJCWlmICggbGlnaHQuY2FzdFNoYWRvdyApIHsKCgkJCQkJCXZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7CgoJCQkJCQl1bmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7CgkJCQkJCXVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7CgkJCQkJCXVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTsKCQkJCQkJdW5pZm9ybXMuc2hhZG93Q2FtZXJhTmVhciA9IHNoYWRvdy5jYW1lcmEubmVhcjsKCQkJCQkJdW5pZm9ybXMuc2hhZG93Q2FtZXJhRmFyID0gc2hhZG93LmNhbWVyYS5mYXI7CgoJCQkJCQlzdGF0ZS5wb2ludFNoYWRvd01hcFsgcG9pbnRMZW5ndGggXSA9IHNoYWRvd01hcDsKCQkJCQkJc3RhdGUucG9pbnRTaGFkb3dNYXRyaXhbIHBvaW50TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4OwoKCQkJCQkJbnVtUG9pbnRTaGFkb3dzICsrOwoKCQkJCQl9CgoJCQkJCXN0YXRlLnBvaW50WyBwb2ludExlbmd0aCBdID0gdW5pZm9ybXM7CgoJCQkJCXBvaW50TGVuZ3RoICsrOwoKCQkJCX0gZWxzZSBpZiAoIGxpZ2h0LmlzSGVtaXNwaGVyZUxpZ2h0ICkgewoKCQkJCQl2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7CgoJCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CgkJCQkJdW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApOwoJCQkJCXVuaWZvcm1zLmRpcmVjdGlvbi5ub3JtYWxpemUoKTsKCgkJCQkJdW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7CgkJCQkJdW5pZm9ybXMuZ3JvdW5kQ29sb3IuY29weSggbGlnaHQuZ3JvdW5kQ29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7CgoJCQkJCXN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zOwoKCQkJCQloZW1pTGVuZ3RoICsrOwoKCQkJCX0KCgkJCX0KCgkJCXN0YXRlLmFtYmllbnRbIDAgXSA9IHI7CgkJCXN0YXRlLmFtYmllbnRbIDEgXSA9IGc7CgkJCXN0YXRlLmFtYmllbnRbIDIgXSA9IGI7CgoJCQl2YXIgaGFzaCA9IHN0YXRlLmhhc2g7CgoJCQlpZiAoIGhhc2guZGlyZWN0aW9uYWxMZW5ndGggIT09IGRpcmVjdGlvbmFsTGVuZ3RoIHx8CgkJCQloYXNoLnBvaW50TGVuZ3RoICE9PSBwb2ludExlbmd0aCB8fAoJCQkJaGFzaC5zcG90TGVuZ3RoICE9PSBzcG90TGVuZ3RoIHx8CgkJCQloYXNoLnJlY3RBcmVhTGVuZ3RoICE9PSByZWN0QXJlYUxlbmd0aCB8fAoJCQkJaGFzaC5oZW1pTGVuZ3RoICE9PSBoZW1pTGVuZ3RoIHx8CgkJCQloYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyAhPT0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzIHx8CgkJCQloYXNoLm51bVBvaW50U2hhZG93cyAhPT0gbnVtUG9pbnRTaGFkb3dzIHx8CgkJCQloYXNoLm51bVNwb3RTaGFkb3dzICE9PSBudW1TcG90U2hhZG93cyApIHsKCgkJCQlzdGF0ZS5kaXJlY3Rpb25hbC5sZW5ndGggPSBkaXJlY3Rpb25hbExlbmd0aDsKCQkJCXN0YXRlLnNwb3QubGVuZ3RoID0gc3BvdExlbmd0aDsKCQkJCXN0YXRlLnJlY3RBcmVhLmxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoOwoJCQkJc3RhdGUucG9pbnQubGVuZ3RoID0gcG9pbnRMZW5ndGg7CgkJCQlzdGF0ZS5oZW1pLmxlbmd0aCA9IGhlbWlMZW5ndGg7CgoJCQkJc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXAubGVuZ3RoID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzOwoJCQkJc3RhdGUucG9pbnRTaGFkb3dNYXAubGVuZ3RoID0gbnVtUG9pbnRTaGFkb3dzOwoJCQkJc3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93czsKCQkJCXN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93czsKCQkJCXN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93czsKCQkJCXN0YXRlLnNwb3RTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7CgoJCQkJaGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoOwoJCQkJaGFzaC5wb2ludExlbmd0aCA9IHBvaW50TGVuZ3RoOwoJCQkJaGFzaC5zcG90TGVuZ3RoID0gc3BvdExlbmd0aDsKCQkJCWhhc2gucmVjdEFyZWFMZW5ndGggPSByZWN0QXJlYUxlbmd0aDsKCQkJCWhhc2guaGVtaUxlbmd0aCA9IGhlbWlMZW5ndGg7CgoJCQkJaGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7CgkJCQloYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93czsKCQkJCWhhc2gubnVtU3BvdFNoYWRvd3MgPSBudW1TcG90U2hhZG93czsKCgkJCQlzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIHsKCQkJc2V0dXA6IHNldHVwLAoJCQlzdGF0ZTogc3RhdGUKCQl9OwoKCX0KCgkvKioKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCglmdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCkgewoKCQl2YXIgbGlnaHRzID0gbmV3IFdlYkdMTGlnaHRzKCk7CgoJCXZhciBsaWdodHNBcnJheSA9IFtdOwoJCXZhciBzaGFkb3dzQXJyYXkgPSBbXTsKCgkJZnVuY3Rpb24gaW5pdCgpIHsKCgkJCWxpZ2h0c0FycmF5Lmxlbmd0aCA9IDA7CgkJCXNoYWRvd3NBcnJheS5sZW5ndGggPSAwOwoKCQl9CgoJCWZ1bmN0aW9uIHB1c2hMaWdodCggbGlnaHQgKSB7CgoJCQlsaWdodHNBcnJheS5wdXNoKCBsaWdodCApOwoKCQl9CgoJCWZ1bmN0aW9uIHB1c2hTaGFkb3coIHNoYWRvd0xpZ2h0ICkgewoKCQkJc2hhZG93c0FycmF5LnB1c2goIHNoYWRvd0xpZ2h0ICk7CgoJCX0KCgkJZnVuY3Rpb24gc2V0dXBMaWdodHMoIGNhbWVyYSApIHsKCgkJCWxpZ2h0cy5zZXR1cCggbGlnaHRzQXJyYXksIHNoYWRvd3NBcnJheSwgY2FtZXJhICk7CgoJCX0KCgkJdmFyIHN0YXRlID0gewoJCQlsaWdodHNBcnJheTogbGlnaHRzQXJyYXksCgkJCXNoYWRvd3NBcnJheTogc2hhZG93c0FycmF5LAoKCQkJbGlnaHRzOiBsaWdodHMKCQl9OwoKCQlyZXR1cm4gewoJCQlpbml0OiBpbml0LAoJCQlzdGF0ZTogc3RhdGUsCgkJCXNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cywKCgkJCXB1c2hMaWdodDogcHVzaExpZ2h0LAoJCQlwdXNoU2hhZG93OiBwdXNoU2hhZG93CgkJfTsKCgl9CgoJZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZXMoKSB7CgoJCXZhciByZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpOwoKCQlmdW5jdGlvbiBvblNjZW5lRGlzcG9zZSggZXZlbnQgKSB7CgoJCQl2YXIgc2NlbmUgPSBldmVudC50YXJnZXQ7CgoJCQlzY2VuZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uU2NlbmVEaXNwb3NlICk7CgoJCQlyZW5kZXJTdGF0ZXMuZGVsZXRlKCBzY2VuZSApOwoKCQl9CgoJCWZ1bmN0aW9uIGdldCggc2NlbmUsIGNhbWVyYSApIHsKCgkJCXZhciByZW5kZXJTdGF0ZTsKCgkJCWlmICggcmVuZGVyU3RhdGVzLmhhcyggc2NlbmUgKSA9PT0gZmFsc2UgKSB7CgoJCQkJcmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSgpOwoJCQkJcmVuZGVyU3RhdGVzLnNldCggc2NlbmUsIG5ldyBXZWFrTWFwKCkgKTsKCQkJCXJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICkuc2V0KCBjYW1lcmEsIHJlbmRlclN0YXRlICk7CgoJCQkJc2NlbmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblNjZW5lRGlzcG9zZSApOwoKCQkJfSBlbHNlIHsKCgkJCQlpZiAoIHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICkuaGFzKCBjYW1lcmEgKSA9PT0gZmFsc2UgKSB7CgoJCQkJCXJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTsKCQkJCQlyZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSApLnNldCggY2FtZXJhLCByZW5kZXJTdGF0ZSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKS5nZXQoIGNhbWVyYSApOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiByZW5kZXJTdGF0ZTsKCgkJfQoKCQlmdW5jdGlvbiBkaXNwb3NlKCkgewoKCQkJcmVuZGVyU3RhdGVzID0gbmV3IFdlYWtNYXAoKTsKCgkJfQoKCQlyZXR1cm4gewoJCQlnZXQ6IGdldCwKCQkJZGlzcG9zZTogZGlzcG9zZQoJCX07CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cHM6Ly9jbGFyYS5pbwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqCgkgKiAgb3BhY2l0eTogPGZsb2F0PiwKCSAqCgkgKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LAoJICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sCgkgKgoJICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LAoJICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PgoJICogfQoJICovCgoJZnVuY3Rpb24gTWVzaERlcHRoTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCU1hdGVyaWFsLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ01lc2hEZXB0aE1hdGVyaWFsJzsKCgkJdGhpcy5kZXB0aFBhY2tpbmcgPSBCYXNpY0RlcHRoUGFja2luZzsKCgkJdGhpcy5za2lubmluZyA9IGZhbHNlOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7CgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwOwoKCQl0aGlzLndpcmVmcmFtZSA9IGZhbHNlOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTsKCgkJdGhpcy5mb2cgPSBmYWxzZTsKCgkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgl9CgoJTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7CglNZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGVwdGhNYXRlcmlhbDsKCglNZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7CgoJTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZzsKCgkJdGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZzsKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7CgoJCXRoaXMubWFwID0gc291cmNlLm1hcDsKCgkJdGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDsKCgkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwOwoJCXRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7CgkJdGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7CgoJCXRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTsKCQl0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICoKCSAqICByZWZlcmVuY2VQb3NpdGlvbjogPGZsb2F0PiwKCSAqICBuZWFyRGlzdGFuY2U6IDxmbG9hdD4sCgkgKiAgZmFyRGlzdGFuY2U6IDxmbG9hdD4sCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKgoJICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PiwKCSAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+CgkgKgoJICogfQoJICovCgoJZnVuY3Rpb24gTWVzaERpc3RhbmNlTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCU1hdGVyaWFsLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ01lc2hEaXN0YW5jZU1hdGVyaWFsJzsKCgkJdGhpcy5yZWZlcmVuY2VQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7CgkJdGhpcy5uZWFyRGlzdGFuY2UgPSAxOwoJCXRoaXMuZmFyRGlzdGFuY2UgPSAxMDAwOwoKCQl0aGlzLnNraW5uaW5nID0gZmFsc2U7CgkJdGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTsKCgkJdGhpcy5tYXAgPSBudWxsOwoKCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCgkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsOwoJCXRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxOwoJCXRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7CgoJCXRoaXMuZm9nID0gZmFsc2U7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCU1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaERpc3RhbmNlTWF0ZXJpYWw7CgoJTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPSB0cnVlOwoKCU1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoIHNvdXJjZS5yZWZlcmVuY2VQb3NpdGlvbiApOwoJCXRoaXMubmVhckRpc3RhbmNlID0gc291cmNlLm5lYXJEaXN0YW5jZTsKCQl0aGlzLmZhckRpc3RhbmNlID0gc291cmNlLmZhckRpc3RhbmNlOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCgkJdGhpcy5tYXAgPSBzb3VyY2UubWFwOwoKCQl0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwOwoKCQl0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7CgkJdGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhczsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgl2YXIgdnNtX2ZyYWcgPSAidW5pZm9ybSBzYW1wbGVyMkQgc2hhZG93X3Bhc3M7XG51bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjtcbnVuaWZvcm0gZmxvYXQgcmFkaXVzO1xuI2luY2x1ZGUgPHBhY2tpbmc+XG52b2lkIG1haW4oKSB7XG4gIGZsb2F0IG1lYW4gPSAwLjA7XG4gIGZsb2F0IHNxdWFyZWRfbWVhbiA9IDAuMDtcblx0ZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgICkgLyByZXNvbHV0aW9uICkgKTtcbiAgZm9yICggZmxvYXQgaSA9IC0xLjA7IGkgPCAxLjAgOyBpICs9IFNBTVBMRV9SQVRFKSB7XG4gICAgI2lmZGVmIEhPUklaT05BTF9QQVNTXG4gICAgICB2ZWMyIGRpc3RyaWJ1dGlvbiA9IHVucGFjazJIYWxmVG9SR0JBICggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCBpLCAwLjAgKSAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XG4gICAgICBtZWFuICs9IGRpc3RyaWJ1dGlvbi54O1xuICAgICAgc3F1YXJlZF9tZWFuICs9IGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKyBkaXN0cmlidXRpb24ueCAqIGRpc3RyaWJ1dGlvbi54O1xuICAgICNlbHNlXG4gICAgICBmbG9hdCBkZXB0aCA9IHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd19wYXNzLCAoIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoIDAuMCwgIGkgKSAgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xuICAgICAgbWVhbiArPSBkZXB0aDtcbiAgICAgIHNxdWFyZWRfbWVhbiArPSBkZXB0aCAqIGRlcHRoO1xuICAgICNlbmRpZlxuICB9XG4gIG1lYW4gPSBtZWFuICogSEFMRl9TQU1QTEVfUkFURTtcbiAgc3F1YXJlZF9tZWFuID0gc3F1YXJlZF9tZWFuICogSEFMRl9TQU1QTEVfUkFURTtcbiAgZmxvYXQgc3RkX2RldiA9IHNxcnQoIHNxdWFyZWRfbWVhbiAtIG1lYW4gKiBtZWFuICk7XG4gIGdsX0ZyYWdDb2xvciA9IHBhY2sySGFsZlRvUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XG59IjsKCgl2YXIgdnNtX3ZlcnQgPSAidm9pZCBtYWluKCkge1xuXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcbn0iOwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggX3JlbmRlcmVyLCBfb2JqZWN0cywgbWF4VGV4dHVyZVNpemUgKSB7CgoJCXZhciBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCksCgoJCQlfc2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCksCgkJCV92aWV3cG9ydFNpemUgPSBuZXcgVmVjdG9yMigpLAoKCQkJX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSwKCgkJCV9kZXB0aE1hdGVyaWFscyA9IFtdLAoJCQlfZGlzdGFuY2VNYXRlcmlhbHMgPSBbXSwKCgkJCV9tYXRlcmlhbENhY2hlID0ge307CgoJCXZhciBzaGFkb3dTaWRlID0geyAwOiBCYWNrU2lkZSwgMTogRnJvbnRTaWRlLCAyOiBEb3VibGVTaWRlIH07CgoJCXZhciBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7CgoJCQlkZWZpbmVzOiB7CgkJCQlTQU1QTEVfUkFURTogMi4wIC8gOC4wLAoJCQkJSEFMRl9TQU1QTEVfUkFURTogMS4wIC8gOC4wCgkJCX0sCgoJCQl1bmlmb3JtczogewoJCQkJc2hhZG93X3Bhc3M6IHsgdmFsdWU6IG51bGwgfSwKCQkJCXJlc29sdXRpb246IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCkgfSwKCQkJCXJhZGl1czogeyB2YWx1ZTogNC4wIH0KCQkJfSwKCgkJCXZlcnRleFNoYWRlcjogdnNtX3ZlcnQsCgoJCQlmcmFnbWVudFNoYWRlcjogdnNtX2ZyYWcKCgkJfSApOwoKCQl2YXIgc2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwgPSBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmNsb25lKCk7CgkJc2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwuZGVmaW5lcy5IT1JJWk9OQUxfUEFTUyA9IDE7CgoJCXZhciBmdWxsU2NyZWVuVHJpID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgkJZnVsbFNjcmVlblRyaS5zZXRBdHRyaWJ1dGUoCgkJCSJwb3NpdGlvbiIsCgkJCW5ldyBCdWZmZXJBdHRyaWJ1dGUoCgkJCQluZXcgRmxvYXQzMkFycmF5KCBbIC0gMSwgLSAxLCAwLjUsIDMsIC0gMSwgMC41LCAtIDEsIDMsIDAuNSBdICksCgkJCQkzCgkJCSkKCQkpOwoKCQl2YXIgZnVsbFNjcmVlbk1lc2ggPSBuZXcgTWVzaCggZnVsbFNjcmVlblRyaSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCApOwoKCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQl0aGlzLmVuYWJsZWQgPSBmYWxzZTsKCgkJdGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTsKCQl0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMudHlwZSA9IFBDRlNoYWRvd01hcDsKCgkJdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHsKCgkJCWlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoJCQlpZiAoIHNjb3BlLmF1dG9VcGRhdGUgPT09IGZhbHNlICYmIHNjb3BlLm5lZWRzVXBkYXRlID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CgoJCQlpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSB7IHJldHVybjsgfQoKCQkJdmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7CgkJCXZhciBhY3RpdmVDdWJlRmFjZSA9IF9yZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpOwoJCQl2YXIgYWN0aXZlTWlwbWFwTGV2ZWwgPSBfcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTsKCgkJCXZhciBfc3RhdGUgPSBfcmVuZGVyZXIuc3RhdGU7CgoJCQkvLyBTZXQgR0wgc3RhdGUgZm9yIGRlcHRoIG1hcC4KCQkJX3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7CgkJCV9zdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAxLCAxLCAxLCAxICk7CgkJCV9zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTsKCQkJX3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApOwoKCQkJLy8gcmVuZGVyIGRlcHRoIG1hcAoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl2YXIgbGlnaHQgPSBsaWdodHNbIGkgXTsKCQkJCXZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7CgoJCQkJaWYgKCBzaGFkb3cgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicgKTsKCQkJCQljb250aW51ZTsKCgkJCQl9CgoJCQkJX3NoYWRvd01hcFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTsKCgkJCQl2YXIgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpOwoKCQkJCV9zaGFkb3dNYXBTaXplLm11bHRpcGx5KCBzaGFkb3dGcmFtZUV4dGVudHMgKTsKCgkJCQlfdmlld3BvcnRTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7CgoJCQkJaWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gbWF4VGV4dHVyZVNpemUgfHwgX3NoYWRvd01hcFNpemUueSA+IG1heFRleHR1cmVTaXplICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRvd01hcDonLCBsaWdodCwgJ2hhcyBzaGFkb3cgZXhjZWVkaW5nIG1heCB0ZXh0dXJlIHNpemUsIHJlZHVjaW5nJyApOwoKCQkJCQlpZiAoIF9zaGFkb3dNYXBTaXplLnggPiBtYXhUZXh0dXJlU2l6ZSApIHsKCgkJCQkJCV92aWV3cG9ydFNpemUueCA9IE1hdGguZmxvb3IoIG1heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnggKTsKCQkJCQkJX3NoYWRvd01hcFNpemUueCA9IF92aWV3cG9ydFNpemUueCAqIHNoYWRvd0ZyYW1lRXh0ZW50cy54OwoJCQkJCQlzaGFkb3cubWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54OwoKCQkJCQl9CgoJCQkJCWlmICggX3NoYWRvd01hcFNpemUueSA+IG1heFRleHR1cmVTaXplICkgewoKCQkJCQkJX3ZpZXdwb3J0U2l6ZS55ID0gTWF0aC5mbG9vciggbWF4VGV4dHVyZVNpemUgLyBzaGFkb3dGcmFtZUV4dGVudHMueSApOwoJCQkJCQlfc2hhZG93TWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55ICogc2hhZG93RnJhbWVFeHRlbnRzLnk7CgkJCQkJCXNoYWRvdy5tYXBTaXplLnkgPSBfdmlld3BvcnRTaXplLnk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJaWYgKCBzaGFkb3cubWFwID09PSBudWxsICYmICEgc2hhZG93LmlzUG9pbnRMaWdodFNoYWRvdyAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApIHsKCgkJCQkJdmFyIHBhcnMgPSB7IG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07CgoJCQkJCXNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTsKCQkJCQlzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyAiLnNoYWRvd01hcCI7CgoJCQkJCXNoYWRvdy5tYXBQYXNzID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55LCBwYXJzICk7CgoJCQkJCXNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKCQkJCX0KCgkJCQlpZiAoIHNoYWRvdy5tYXAgPT09IG51bGwgKSB7CgoJCQkJCXZhciBwYXJzID0geyBtaW5GaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIG1hZ0ZpbHRlcjogTmVhcmVzdEZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07CgoJCQkJCXNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTsKCQkJCQlzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyAiLnNoYWRvd01hcCI7CgoJCQkJCXNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKCQkJCX0KCgkJCQlfcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBzaGFkb3cubWFwICk7CgkJCQlfcmVuZGVyZXIuY2xlYXIoKTsKCgkJCQl2YXIgdmlld3BvcnRDb3VudCA9IHNoYWRvdy5nZXRWaWV3cG9ydENvdW50KCk7CgoJCQkJZm9yICggdmFyIHZwID0gMDsgdnAgPCB2aWV3cG9ydENvdW50OyB2cCArKyApIHsKCgkJCQkJdmFyIHZpZXdwb3J0ID0gc2hhZG93LmdldFZpZXdwb3J0KCB2cCApOwoKCQkJCQlfdmlld3BvcnQuc2V0KAoJCQkJCQlfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC54LAoJCQkJCQlfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC55LAoJCQkJCQlfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC56LAoJCQkJCQlfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC53CgkJCQkJKTsKCgkJCQkJX3N0YXRlLnZpZXdwb3J0KCBfdmlld3BvcnQgKTsKCgkJCQkJc2hhZG93LnVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdnAgKTsKCgkJCQkJX2ZydXN0dW0gPSBzaGFkb3cuZ2V0RnJ1c3R1bSgpOwoKCQkJCQlyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIHNoYWRvdy5jYW1lcmEsIGxpZ2h0LCB0aGlzLnR5cGUgKTsKCgkJCQl9CgoJCQkJLy8gZG8gYmx1ciBwYXNzIGZvciBWU00KCgkJCQlpZiAoICEgc2hhZG93LmlzUG9pbnRMaWdodFNoYWRvdyAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApIHsKCgkJCQkJVlNNUGFzcyggc2hhZG93LCBjYW1lcmEgKTsKCgkJCQl9CgoJCQl9CgoJCQlzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlOwoKCQkJX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7CgoJCX07CgoJCWZ1bmN0aW9uIFZTTVBhc3MoIHNoYWRvdywgY2FtZXJhICkgewoKCQkJdmFyIGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKCBmdWxsU2NyZWVuTWVzaCApOwoKCQkJLy8gdmVydGljYWwgcGFzcwoKCQkJc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5zaGFkb3dfcGFzcy52YWx1ZSA9IHNoYWRvdy5tYXAudGV4dHVyZTsKCQkJc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7CgkJCXNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gc2hhZG93LnJhZGl1czsKCQkJX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcFBhc3MgKTsKCQkJX3JlbmRlcmVyLmNsZWFyKCk7CgkJCV9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsVmVydGljYWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsICk7CgoJCQkvLyBob3Jpem9uYWwgcGFzcwoKCQkJc2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwUGFzcy50ZXh0dXJlOwoJCQlzaGFkb3dNYXRlcmlhbEhvcml6b25hbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7CgkJCXNoYWRvd01hdGVyaWFsSG9yaXpvbmFsLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHNoYWRvdy5yYWRpdXM7CgkJCV9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTsKCQkJX3JlbmRlcmVyLmNsZWFyKCk7CgkJCV9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsSG9yaXpvbmFsLCBmdWxsU2NyZWVuTWVzaCwgbnVsbCApOwoKCQl9CgoJCWZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWxWYXJpYW50KCB1c2VNb3JwaGluZywgdXNlU2tpbm5pbmcsIHVzZUluc3RhbmNpbmcgKSB7CgoJCQl2YXIgaW5kZXggPSB1c2VNb3JwaGluZyA8PCAwIHwgdXNlU2tpbm5pbmcgPDwgMSB8IHVzZUluc3RhbmNpbmcgPDwgMjsKCgkJCXZhciBtYXRlcmlhbCA9IF9kZXB0aE1hdGVyaWFsc1sgaW5kZXggXTsKCgkJCWlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHsKCgkJCQltYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCggewoKCQkJCQlkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcsCgoJCQkJCW1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsCgkJCQkJc2tpbm5pbmc6IHVzZVNraW5uaW5nCgoJCQkJfSApOwoKCQkJCV9kZXB0aE1hdGVyaWFsc1sgaW5kZXggXSA9IG1hdGVyaWFsOwoKCQkJfQoKCQkJcmV0dXJuIG1hdGVyaWFsOwoKCQl9CgoJCWZ1bmN0aW9uIGdldERpc3RhbmNlTWF0ZXJpYWxWYXJpYW50KCB1c2VNb3JwaGluZywgdXNlU2tpbm5pbmcsIHVzZUluc3RhbmNpbmcgKSB7CgoJCQl2YXIgaW5kZXggPSB1c2VNb3JwaGluZyA8PCAwIHwgdXNlU2tpbm5pbmcgPDwgMSB8IHVzZUluc3RhbmNpbmcgPDwgMjsKCgkJCXZhciBtYXRlcmlhbCA9IF9kaXN0YW5jZU1hdGVyaWFsc1sgaW5kZXggXTsKCgkJCWlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHsKCgkJCQltYXRlcmlhbCA9IG5ldyBNZXNoRGlzdGFuY2VNYXRlcmlhbCggewoKCQkJCQltb3JwaFRhcmdldHM6IHVzZU1vcnBoaW5nLAoJCQkJCXNraW5uaW5nOiB1c2VTa2lubmluZwoKCQkJCX0gKTsKCgkJCQlfZGlzdGFuY2VNYXRlcmlhbHNbIGluZGV4IF0gPSBtYXRlcmlhbDsKCgkJCX0KCgkJCXJldHVybiBtYXRlcmlhbDsKCgkJfQoKCQlmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhTmVhciwgc2hhZG93Q2FtZXJhRmFyLCB0eXBlICkgewoKCQkJdmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5OwoKCQkJdmFyIHJlc3VsdCA9IG51bGw7CgoJCQl2YXIgZ2V0TWF0ZXJpYWxWYXJpYW50ID0gZ2V0RGVwdGhNYXRlcmlhbFZhcmlhbnQ7CgkJCXZhciBjdXN0b21NYXRlcmlhbCA9IG9iamVjdC5jdXN0b21EZXB0aE1hdGVyaWFsOwoKCQkJaWYgKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgKSB7CgoJCQkJZ2V0TWF0ZXJpYWxWYXJpYW50ID0gZ2V0RGlzdGFuY2VNYXRlcmlhbFZhcmlhbnQ7CgkJCQljdXN0b21NYXRlcmlhbCA9IG9iamVjdC5jdXN0b21EaXN0YW5jZU1hdGVyaWFsOwoKCQkJfQoKCQkJaWYgKCBjdXN0b21NYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCXZhciB1c2VNb3JwaGluZyA9IGZhbHNlOwoKCQkJCWlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzID09PSB0cnVlICkgewoKCQkJCQlpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgPT09IHRydWUgKSB7CgoJCQkJCQl1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aCA+IDA7CgoJCQkJCX0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgPT09IHRydWUgKSB7CgoJCQkJCQl1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoID4gMDsKCgkJCQkJfQoKCQkJCX0KCgkJCQl2YXIgdXNlU2tpbm5pbmcgPSBmYWxzZTsKCgkJCQlpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoID09PSB0cnVlICkgewoKCQkJCQlpZiAoIG1hdGVyaWFsLnNraW5uaW5nID09PSB0cnVlICkgewoKCQkJCQkJdXNlU2tpbm5pbmcgPSB0cnVlOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6IFRIUkVFLlNraW5uZWRNZXNoIHdpdGggbWF0ZXJpYWwuc2tpbm5pbmcgc2V0IHRvIGZhbHNlOicsIG9iamVjdCApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXZhciB1c2VJbnN0YW5jaW5nID0gb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZTsKCgkJCQlyZXN1bHQgPSBnZXRNYXRlcmlhbFZhcmlhbnQoIHVzZU1vcnBoaW5nLCB1c2VTa2lubmluZywgdXNlSW5zdGFuY2luZyApOwoKCQkJfSBlbHNlIHsKCgkJCQlyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDsKCgkJCX0KCgkJCWlmICggX3JlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmCgkJCQkJbWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiYKCQkJCQltYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggIT09IDAgKSB7CgoJCQkJLy8gaW4gdGhpcyBjYXNlIHdlIG5lZWQgYSB1bmlxdWUgbWF0ZXJpYWwgaW5zdGFuY2UgcmVmbGVjdGluZyB0aGUKCQkJCS8vIGFwcHJvcHJpYXRlIHN0YXRlCgoJCQkJdmFyIGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7CgoJCQkJdmFyIG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdOwoKCQkJCWlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQltYXRlcmlhbHNGb3JWYXJpYW50ID0ge307CgkJCQkJX21hdGVyaWFsQ2FjaGVbIGtleUEgXSA9IG1hdGVyaWFsc0ZvclZhcmlhbnQ7CgoJCQkJfQoKCQkJCXZhciBjYWNoZWRNYXRlcmlhbCA9IG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXTsKCgkJCQlpZiAoIGNhY2hlZE1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWNhY2hlZE1hdGVyaWFsID0gcmVzdWx0LmNsb25lKCk7CgkJCQkJbWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdID0gY2FjaGVkTWF0ZXJpYWw7CgoJCQkJfQoKCQkJCXJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsOwoKCQkJfQoKCQkJcmVzdWx0LnZpc2libGUgPSBtYXRlcmlhbC52aXNpYmxlOwoJCQlyZXN1bHQud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lOwoKCQkJaWYgKCB0eXBlID09PSBWU01TaGFkb3dNYXAgKSB7CgoJCQkJcmVzdWx0LnNpZGUgPSAoIG1hdGVyaWFsLnNoYWRvd1NpZGUgIT09IG51bGwgKSA/IG1hdGVyaWFsLnNoYWRvd1NpZGUgOiBtYXRlcmlhbC5zaWRlOwoKCQkJfSBlbHNlIHsKCgkJCQlyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IHNoYWRvd1NpZGVbIG1hdGVyaWFsLnNpZGUgXTsKCgkJCX0KCgkJCXJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzOwoJCQlyZXN1bHQuY2xpcHBpbmdQbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lczsKCQkJcmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uOwoKCQkJcmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDsKCQkJcmVzdWx0LmxpbmV3aWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDsKCgkJCWlmICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICYmIHJlc3VsdC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID09PSB0cnVlICkgewoKCQkJCXJlc3VsdC5yZWZlcmVuY2VQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7CgkJCQlyZXN1bHQubmVhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhTmVhcjsKCQkJCXJlc3VsdC5mYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYUZhcjsKCgkJCX0KCgkJCXJldHVybiByZXN1bHQ7CgoJCX0KCgkJZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApIHsKCgkJCWlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCXZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7CgoJCQlpZiAoIHZpc2libGUgJiYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkgKSB7CgoJCQkJaWYgKCAoIG9iamVjdC5jYXN0U2hhZG93IHx8ICggb2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgdHlwZSA9PT0gVlNNU2hhZG93TWFwICkgKSAmJiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSApIHsKCgkJCQkJb2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTsKCgkJCQkJdmFyIGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKCBvYmplY3QgKTsKCQkJCQl2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7CgoJCQkJCWlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHsKCgkJCQkJCXZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7CgoJCQkJCQlmb3IgKCB2YXIgayA9IDAsIGtsID0gZ3JvdXBzLmxlbmd0aDsgayA8IGtsOyBrICsrICkgewoKCQkJCQkJCXZhciBncm91cCA9IGdyb3Vwc1sgayBdOwoJCQkJCQkJdmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdOwoKCQkJCQkJCWlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7CgoJCQkJCQkJCXZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIsIHR5cGUgKTsKCgkJCQkJCQkJX3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHsKCgkJCQkJCXZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgbGlnaHQsIHNoYWRvd0NhbWVyYS5uZWFyLCBzaGFkb3dDYW1lcmEuZmFyLCB0eXBlICk7CgoJCQkJCQlfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJcmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKTsKCgkJCX0KCgkJfQoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICkgewoKCQl2YXIgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7CgoJCWZ1bmN0aW9uIENvbG9yQnVmZmVyKCkgewoKCQkJdmFyIGxvY2tlZCA9IGZhbHNlOwoKCQkJdmFyIGNvbG9yID0gbmV3IFZlY3RvcjQoKTsKCQkJdmFyIGN1cnJlbnRDb2xvck1hc2sgPSBudWxsOwoJCQl2YXIgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApOwoKCQkJcmV0dXJuIHsKCgkJCQlzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHsKCgkJCQkJaWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7CgoJCQkJCQlnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApOwoJCQkJCQljdXJyZW50Q29sb3JNYXNrID0gY29sb3JNYXNrOwoKCQkJCQl9CgoJCQkJfSwKCgkJCQlzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHsKCgkJCQkJbG9ja2VkID0gbG9jazsKCgkJCQl9LAoKCQkJCXNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHsKCgkJCQkJaWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7CgoJCQkJCQlyICo9IGE7IGcgKj0gYTsgYiAqPSBhOwoKCQkJCQl9CgoJCQkJCWNvbG9yLnNldCggciwgZywgYiwgYSApOwoKCQkJCQlpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7CgoJCQkJCQlnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7CgkJCQkJCWN1cnJlbnRDb2xvckNsZWFyLmNvcHkoIGNvbG9yICk7CgoJCQkJCX0KCgkJCQl9LAoKCQkJCXJlc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJCWxvY2tlZCA9IGZhbHNlOwoKCQkJCQljdXJyZW50Q29sb3JNYXNrID0gbnVsbDsKCQkJCQljdXJyZW50Q29sb3JDbGVhci5zZXQoIC0gMSwgMCwgMCwgMCApOyAvLyBzZXQgdG8gaW52YWxpZCBzdGF0ZQoKCQkJCX0KCgkJCX07CgoJCX0KCgkJZnVuY3Rpb24gRGVwdGhCdWZmZXIoKSB7CgoJCQl2YXIgbG9ja2VkID0gZmFsc2U7CgoJCQl2YXIgY3VycmVudERlcHRoTWFzayA9IG51bGw7CgkJCXZhciBjdXJyZW50RGVwdGhGdW5jID0gbnVsbDsKCQkJdmFyIGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDsKCgkJCXJldHVybiB7CgoJCQkJc2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7CgoJCQkJCWlmICggZGVwdGhUZXN0ICkgewoKCQkJCQkJZW5hYmxlKCAyOTI5ICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlkaXNhYmxlKCAyOTI5ICk7CgoJCQkJCX0KCgkJCQl9LAoKCQkJCXNldE1hc2s6IGZ1bmN0aW9uICggZGVwdGhNYXNrICkgewoKCQkJCQlpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHsKCgkJCQkJCWdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7CgkJCQkJCWN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7CgoJCQkJCX0KCgkJCQl9LAoKCQkJCXNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkgewoKCQkJCQlpZiAoIGN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHsKCgkJCQkJCWlmICggZGVwdGhGdW5jICkgewoKCQkJCQkJCXN3aXRjaCAoIGRlcHRoRnVuYyApIHsKCgkJCQkJCQkJY2FzZSBOZXZlckRlcHRoOgoKCQkJCQkJCQkJZ2wuZGVwdGhGdW5jKCA1MTIgKTsKCQkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJCWNhc2UgQWx3YXlzRGVwdGg6CgoJCQkJCQkJCQlnbC5kZXB0aEZ1bmMoIDUxOSApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJY2FzZSBMZXNzRGVwdGg6CgoJCQkJCQkJCQlnbC5kZXB0aEZ1bmMoIDUxMyApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJY2FzZSBMZXNzRXF1YWxEZXB0aDoKCgkJCQkJCQkJCWdsLmRlcHRoRnVuYyggNTE1ICk7CgkJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCQljYXNlIEVxdWFsRGVwdGg6CgoJCQkJCQkJCQlnbC5kZXB0aEZ1bmMoIDUxNCApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJY2FzZSBHcmVhdGVyRXF1YWxEZXB0aDoKCgkJCQkJCQkJCWdsLmRlcHRoRnVuYyggNTE4ICk7CgkJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCQljYXNlIEdyZWF0ZXJEZXB0aDoKCgkJCQkJCQkJCWdsLmRlcHRoRnVuYyggNTE2ICk7CgkJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCQljYXNlIE5vdEVxdWFsRGVwdGg6CgoJCQkJCQkJCQlnbC5kZXB0aEZ1bmMoIDUxNyApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJZGVmYXVsdDoKCgkJCQkJCQkJCWdsLmRlcHRoRnVuYyggNTE1ICk7CgoJCQkJCQkJfQoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQlnbC5kZXB0aEZ1bmMoIDUxNSApOwoKCQkJCQkJfQoKCQkJCQkJY3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYzsKCgkJCQkJfQoKCQkJCX0sCgoJCQkJc2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7CgoJCQkJCWxvY2tlZCA9IGxvY2s7CgoJCQkJfSwKCgkJCQlzZXRDbGVhcjogZnVuY3Rpb24gKCBkZXB0aCApIHsKCgkJCQkJaWYgKCBjdXJyZW50RGVwdGhDbGVhciAhPT0gZGVwdGggKSB7CgoJCQkJCQlnbC5jbGVhckRlcHRoKCBkZXB0aCApOwoJCQkJCQljdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoOwoKCQkJCQl9CgoJCQkJfSwKCgkJCQlyZXNldDogZnVuY3Rpb24gKCkgewoKCQkJCQlsb2NrZWQgPSBmYWxzZTsKCgkJCQkJY3VycmVudERlcHRoTWFzayA9IG51bGw7CgkJCQkJY3VycmVudERlcHRoRnVuYyA9IG51bGw7CgkJCQkJY3VycmVudERlcHRoQ2xlYXIgPSBudWxsOwoKCQkJCX0KCgkJCX07CgoJCX0KCgkJZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHsKCgkJCXZhciBsb2NrZWQgPSBmYWxzZTsKCgkJCXZhciBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsOwoJCQl2YXIgY3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDsKCQkJdmFyIGN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDsKCQkJdmFyIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsOwoJCQl2YXIgY3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDsKCQkJdmFyIGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsOwoJCQl2YXIgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7CgkJCXZhciBjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDsKCgkJCXJldHVybiB7CgoJCQkJc2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHsKCgkJCQkJaWYgKCAhIGxvY2tlZCApIHsKCgkJCQkJCWlmICggc3RlbmNpbFRlc3QgKSB7CgoJCQkJCQkJZW5hYmxlKCAyOTYwICk7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCWRpc2FibGUoIDI5NjAgKTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0sCgoJCQkJc2V0TWFzazogZnVuY3Rpb24gKCBzdGVuY2lsTWFzayApIHsKCgkJCQkJaWYgKCBjdXJyZW50U3RlbmNpbE1hc2sgIT09IHN0ZW5jaWxNYXNrICYmICEgbG9ja2VkICkgewoKCQkJCQkJZ2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7CgkJCQkJCWN1cnJlbnRTdGVuY2lsTWFzayA9IHN0ZW5jaWxNYXNrOwoKCQkJCQl9CgoJCQkJfSwKCgkJCQlzZXRGdW5jOiBmdW5jdGlvbiAoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApIHsKCgkJCQkJaWYgKCBjdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8CgkJCQkJICAgICBjdXJyZW50U3RlbmNpbFJlZiAJIT09IHN0ZW5jaWxSZWYgCXx8CgkJCQkJICAgICBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrICE9PSBzdGVuY2lsTWFzayApIHsKCgkJCQkJCWdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTsKCgkJCQkJCWN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jOwoJCQkJCQljdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7CgkJCQkJCWN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBzdGVuY2lsTWFzazsKCgkJCQkJfQoKCQkJCX0sCgoJCQkJc2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkgewoKCQkJCQlpZiAoIGN1cnJlbnRTdGVuY2lsRmFpbAkgIT09IHN0ZW5jaWxGYWlsIAl8fAoJCQkJCSAgICAgY3VycmVudFN0ZW5jaWxaRmFpbCAhPT0gc3RlbmNpbFpGYWlsIHx8CgkJCQkJICAgICBjdXJyZW50U3RlbmNpbFpQYXNzICE9PSBzdGVuY2lsWlBhc3MgKSB7CgoJCQkJCQlnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApOwoKCQkJCQkJY3VycmVudFN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7CgkJCQkJCWN1cnJlbnRTdGVuY2lsWkZhaWwgPSBzdGVuY2lsWkZhaWw7CgkJCQkJCWN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7CgoJCQkJCX0KCgkJCQl9LAoKCQkJCXNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkgewoKCQkJCQlsb2NrZWQgPSBsb2NrOwoKCQkJCX0sCgoJCQkJc2V0Q2xlYXI6IGZ1bmN0aW9uICggc3RlbmNpbCApIHsKCgkJCQkJaWYgKCBjdXJyZW50U3RlbmNpbENsZWFyICE9PSBzdGVuY2lsICkgewoKCQkJCQkJZ2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7CgkJCQkJCWN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsOwoKCQkJCQl9CgoJCQkJfSwKCgkJCQlyZXNldDogZnVuY3Rpb24gKCkgewoKCQkJCQlsb2NrZWQgPSBmYWxzZTsKCgkJCQkJY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDsKCQkJCQljdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsOwoJCQkJCWN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDsKCQkJCQljdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDsKCQkJCQljdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsOwoJCQkJCWN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsOwoJCQkJCWN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsOwoJCQkJCWN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsOwoKCQkJCX0KCgkJCX07CgoJCX0KCgkJLy8KCgkJdmFyIGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7CgkJdmFyIGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7CgkJdmFyIHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpOwoKCQl2YXIgbWF4VmVydGV4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTsKCQl2YXIgbmV3QXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7CgkJdmFyIGVuYWJsZWRBdHRyaWJ1dGVzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTsKCQl2YXIgYXR0cmlidXRlRGl2aXNvcnMgPSBuZXcgVWludDhBcnJheSggbWF4VmVydGV4QXR0cmlidXRlcyApOwoKCQl2YXIgZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9OwoKCQl2YXIgY3VycmVudFByb2dyYW0gPSBudWxsOwoKCQl2YXIgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IG51bGw7CgkJdmFyIGN1cnJlbnRCbGVuZGluZyA9IG51bGw7CgkJdmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDsKCQl2YXIgY3VycmVudEJsZW5kU3JjID0gbnVsbDsKCQl2YXIgY3VycmVudEJsZW5kRHN0ID0gbnVsbDsKCQl2YXIgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7CgkJdmFyIGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDsKCQl2YXIgY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsOwoJCXZhciBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTsKCgkJdmFyIGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsOwoJCXZhciBjdXJyZW50Q3VsbEZhY2UgPSBudWxsOwoKCQl2YXIgY3VycmVudExpbmVXaWR0aCA9IG51bGw7CgoJCXZhciBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7CgkJdmFyIGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsOwoKCQl2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM1NjYxICk7CgoJCXZhciBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTsKCQl2YXIgdmVyc2lvbiA9IDA7CgkJdmFyIGdsVmVyc2lvbiA9IGdsLmdldFBhcmFtZXRlciggNzkzOCApOwoKCQlpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnV2ViR0wnICkgIT09IC0gMSApIHsKCgkJCXZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMXCAoWzAtOV0pLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7CgkJCWxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAxLjAgKTsKCgkJfSBlbHNlIGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdPcGVuR0wgRVMnICkgIT09IC0gMSApIHsKCgkJCXZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXk9wZW5HTFwgRVNcIChbMC05XSkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTsKCQkJbGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDIuMCApOwoKCQl9CgoJCXZhciBjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsOwoJCXZhciBjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9OwoKCQl2YXIgY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpOwoJCXZhciBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpOwoKCQlmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKCB0eXBlLCB0YXJnZXQsIGNvdW50ICkgewoKCQkJdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheSggNCApOyAvLyA0IGlzIHJlcXVpcmVkIHRvIG1hdGNoIGRlZmF1bHQgdW5wYWNrIGFsaWdubWVudCBvZiA0LgoJCQl2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTsKCgkJCWdsLmJpbmRUZXh0dXJlKCB0eXBlLCB0ZXh0dXJlICk7CgkJCWdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQxLCA5NzI4ICk7CgkJCWdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQwLCA5NzI4ICk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHsKCgkJCQlnbC50ZXhJbWFnZTJEKCB0YXJnZXQgKyBpLCAwLCA2NDA4LCAxLCAxLCAwLCA2NDA4LCA1MTIxLCBkYXRhICk7CgoJCQl9CgoJCQlyZXR1cm4gdGV4dHVyZTsKCgkJfQoKCQl2YXIgZW1wdHlUZXh0dXJlcyA9IHt9OwoJCWVtcHR5VGV4dHVyZXNbIDM1NTMgXSA9IGNyZWF0ZVRleHR1cmUoIDM1NTMsIDM1NTMsIDEgKTsKCQllbXB0eVRleHR1cmVzWyAzNDA2NyBdID0gY3JlYXRlVGV4dHVyZSggMzQwNjcsIDM0MDY5LCA2ICk7CgoJCS8vIGluaXQKCgkJY29sb3JCdWZmZXIuc2V0Q2xlYXIoIDAsIDAsIDAsIDEgKTsKCQlkZXB0aEJ1ZmZlci5zZXRDbGVhciggMSApOwoJCXN0ZW5jaWxCdWZmZXIuc2V0Q2xlYXIoIDAgKTsKCgkJZW5hYmxlKCAyOTI5ICk7CgkJZGVwdGhCdWZmZXIuc2V0RnVuYyggTGVzc0VxdWFsRGVwdGggKTsKCgkJc2V0RmxpcFNpZGVkKCBmYWxzZSApOwoJCXNldEN1bGxGYWNlKCBDdWxsRmFjZUJhY2sgKTsKCQllbmFibGUoIDI4ODQgKTsKCgkJc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTsKCgkJLy8KCgkJZnVuY3Rpb24gaW5pdEF0dHJpYnV0ZXMoKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBuZXdBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJbmV3QXR0cmlidXRlc1sgaSBdID0gMDsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHsKCgkJCWVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgMCApOwoKCQl9CgoJCWZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApIHsKCgkJCW5ld0F0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTsKCgkJCWlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID09PSAwICkgewoKCQkJCWdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCBhdHRyaWJ1dGUgKTsKCQkJCWVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7CgoJCQl9CgoJCQlpZiAoIGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSAhPT0gbWVzaFBlckF0dHJpYnV0ZSApIHsKCgkJCQl2YXIgZXh0ZW5zaW9uID0gaXNXZWJHTDIgPyBnbCA6IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTsKCgkJCQlleHRlbnNpb25bIGlzV2ViR0wyID8gJ3ZlcnRleEF0dHJpYkRpdmlzb3InIDogJ3ZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRScgXSggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICk7CgkJCQlhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gPSBtZXNoUGVyQXR0cmlidXRlOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCkgewoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpICE9PSBsOyArKyBpICkgewoKCQkJCWlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSAhPT0gbmV3QXR0cmlidXRlc1sgaSBdICkgewoKCQkJCQlnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTsKCQkJCQllbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gZW5hYmxlKCBpZCApIHsKCgkJCWlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gdHJ1ZSApIHsKCgkJCQlnbC5lbmFibGUoIGlkICk7CgkJCQllbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gdHJ1ZTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBkaXNhYmxlKCBpZCApIHsKCgkJCWlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gZmFsc2UgKSB7CgoJCQkJZ2wuZGlzYWJsZSggaWQgKTsKCQkJCWVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSBmYWxzZTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiB1c2VQcm9ncmFtKCBwcm9ncmFtICkgewoKCQkJaWYgKCBjdXJyZW50UHJvZ3JhbSAhPT0gcHJvZ3JhbSApIHsKCgkJCQlnbC51c2VQcm9ncmFtKCBwcm9ncmFtICk7CgoJCQkJY3VycmVudFByb2dyYW0gPSBwcm9ncmFtOwoKCQkJCXJldHVybiB0cnVlOwoKCQkJfQoKCQkJcmV0dXJuIGZhbHNlOwoKCQl9CgoJCXZhciBlcXVhdGlvblRvR0wgPSB7fTsKCQllcXVhdGlvblRvR0xbIEFkZEVxdWF0aW9uIF0gPSAzMjc3NDsKCQllcXVhdGlvblRvR0xbIFN1YnRyYWN0RXF1YXRpb24gXSA9IDMyNzc4OwoJCWVxdWF0aW9uVG9HTFsgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gXSA9IDMyNzc5OwoKCQlpZiAoIGlzV2ViR0wyICkgewoKCQkJZXF1YXRpb25Ub0dMWyBNaW5FcXVhdGlvbiBdID0gMzI3NzU7CgkJCWVxdWF0aW9uVG9HTFsgTWF4RXF1YXRpb24gXSA9IDMyNzc2OwoKCQl9IGVsc2UgewoKCQkJdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTsKCgkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKCQkJCWVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IGV4dGVuc2lvbi5NSU5fRVhUOwoJCQkJZXF1YXRpb25Ub0dMWyBNYXhFcXVhdGlvbiBdID0gZXh0ZW5zaW9uLk1BWF9FWFQ7CgoJCQl9CgoJCX0KCgkJdmFyIGZhY3RvclRvR0wgPSB7fTsKCQlmYWN0b3JUb0dMWyBaZXJvRmFjdG9yIF0gPSAwOwoJCWZhY3RvclRvR0xbIE9uZUZhY3RvciBdID0gMTsKCQlmYWN0b3JUb0dMWyBTcmNDb2xvckZhY3RvciBdID0gNzY4OwoJCWZhY3RvclRvR0xbIFNyY0FscGhhRmFjdG9yIF0gPSA3NzA7CgkJZmFjdG9yVG9HTFsgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciBdID0gNzc2OwoJCWZhY3RvclRvR0xbIERzdENvbG9yRmFjdG9yIF0gPSA3NzQ7CgkJZmFjdG9yVG9HTFsgRHN0QWxwaGFGYWN0b3IgXSA9IDc3MjsKCQlmYWN0b3JUb0dMWyBPbmVNaW51c1NyY0NvbG9yRmFjdG9yIF0gPSA3Njk7CgkJZmFjdG9yVG9HTFsgT25lTWludXNTcmNBbHBoYUZhY3RvciBdID0gNzcxOwoJCWZhY3RvclRvR0xbIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgXSA9IDc3NTsKCQlmYWN0b3JUb0dMWyBPbmVNaW51c0RzdEFscGhhRmFjdG9yIF0gPSA3NzM7CgoJCWZ1bmN0aW9uIHNldEJsZW5kaW5nKCBibGVuZGluZywgYmxlbmRFcXVhdGlvbiwgYmxlbmRTcmMsIGJsZW5kRHN0LCBibGVuZEVxdWF0aW9uQWxwaGEsIGJsZW5kU3JjQWxwaGEsIGJsZW5kRHN0QWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHsKCgkJCWlmICggYmxlbmRpbmcgPT09IE5vQmxlbmRpbmcgKSB7CgoJCQkJaWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkICkgewoKCQkJCQlkaXNhYmxlKCAzMDQyICk7CgkJCQkJY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlOwoKCQkJCX0KCgkJCQlyZXR1cm47CgoJCQl9CgoJCQlpZiAoICEgY3VycmVudEJsZW5kaW5nRW5hYmxlZCApIHsKCgkJCQllbmFibGUoIDMwNDIgKTsKCQkJCWN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlOwoKCQkJfQoKCQkJaWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7CgoJCQkJaWYgKCBibGVuZGluZyAhPT0gY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gY3VycmVudFByZW11bHRpcGxlZEFscGhhICkgewoKCQkJCQlpZiAoIGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbiApIHsKCgkJCQkJCWdsLmJsZW5kRXF1YXRpb24oIDMyNzc0ICk7CgoJCQkJCQljdXJyZW50QmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uOwoJCQkJCQljdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247CgoJCQkJCX0KCgkJCQkJaWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7CgoJCQkJCQlzd2l0Y2ggKCBibGVuZGluZyApIHsKCgkJCQkJCQljYXNlIE5vcm1hbEJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCAxLCA3NzEsIDEsIDc3MSApOwoJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCWNhc2UgQWRkaXRpdmVCbGVuZGluZzoKCQkJCQkJCQlnbC5ibGVuZEZ1bmMoIDEsIDEgKTsKCQkJCQkJCQlicmVhazsKCgkJCQkJCQljYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6CgkJCQkJCQkJZ2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDAsIDc2OSwgNzcxICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJY2FzZSBNdWx0aXBseUJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCAwLCA3NjgsIDAsIDc3MCApOwoJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCWRlZmF1bHQ6CgkJCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlzd2l0Y2ggKCBibGVuZGluZyApIHsKCgkJCQkJCQljYXNlIE5vcm1hbEJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCA3NzAsIDc3MSwgMSwgNzcxICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJY2FzZSBBZGRpdGl2ZUJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuYyggNzcwLCAxICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJY2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuYyggMCwgNzY5ICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJY2FzZSBNdWx0aXBseUJsZW5kaW5nOgoJCQkJCQkJCWdsLmJsZW5kRnVuYyggMCwgNzY4ICk7CgkJCQkJCQkJYnJlYWs7CgoJCQkJCQkJZGVmYXVsdDoKCQkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTsKCQkJCQkJCQlicmVhazsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQljdXJyZW50QmxlbmRTcmMgPSBudWxsOwoJCQkJCWN1cnJlbnRCbGVuZERzdCA9IG51bGw7CgkJCQkJY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsOwoJCQkJCWN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDsKCgkJCQkJY3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7CgkJCQkJY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gcHJlbXVsdGlwbGllZEFscGhhOwoKCQkJCX0KCgkJCQlyZXR1cm47CgoJCQl9CgoJCQkvLyBjdXN0b20gYmxlbmRpbmcKCgkJCWJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uOwoJCQlibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYzsKCQkJYmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGEgfHwgYmxlbmREc3Q7CgoJCQlpZiAoIGJsZW5kRXF1YXRpb24gIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uIHx8IGJsZW5kRXF1YXRpb25BbHBoYSAhPT0gY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSApIHsKCgkJCQlnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbiBdLCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb25BbHBoYSBdICk7CgoJCQkJY3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uOwoJCQkJY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTsKCgkJCX0KCgkJCWlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkgewoKCQkJCWdsLmJsZW5kRnVuY1NlcGFyYXRlKCBmYWN0b3JUb0dMWyBibGVuZFNyYyBdLCBmYWN0b3JUb0dMWyBibGVuZERzdCBdLCBmYWN0b3JUb0dMWyBibGVuZFNyY0FscGhhIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0QWxwaGEgXSApOwoKCQkJCWN1cnJlbnRCbGVuZFNyYyA9IGJsZW5kU3JjOwoJCQkJY3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7CgkJCQljdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7CgkJCQljdXJyZW50QmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGE7CgoJCQl9CgoJCQljdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZzsKCQkJY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gbnVsbDsKCgkJfQoKCQlmdW5jdGlvbiBzZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICkgewoKCQkJbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZQoJCQkJPyBkaXNhYmxlKCAyODg0ICkKCQkJCTogZW5hYmxlKCAyODg0ICk7CgoJCQl2YXIgZmxpcFNpZGVkID0gKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApOwoJCQlpZiAoIGZyb250RmFjZUNXICkgeyBmbGlwU2lkZWQgPSAhIGZsaXBTaWRlZDsgfQoKCQkJc2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKTsKCgkJCSggbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSApCgkJCQk/IHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICkKCQkJCTogc2V0QmxlbmRpbmcoIG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhICk7CgoJCQlkZXB0aEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5kZXB0aEZ1bmMgKTsKCQkJZGVwdGhCdWZmZXIuc2V0VGVzdCggbWF0ZXJpYWwuZGVwdGhUZXN0ICk7CgkJCWRlcHRoQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTsKCQkJY29sb3JCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuY29sb3JXcml0ZSApOwoKCQkJdmFyIHN0ZW5jaWxXcml0ZSA9IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZTsKCQkJc3RlbmNpbEJ1ZmZlci5zZXRUZXN0KCBzdGVuY2lsV3JpdGUgKTsKCQkJaWYgKCBzdGVuY2lsV3JpdGUgKSB7CgoJCQkJc3RlbmNpbEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrICk7CgkJCQlzdGVuY2lsQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLnN0ZW5jaWxGdW5jLCBtYXRlcmlhbC5zdGVuY2lsUmVmLCBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgKTsKCQkJCXN0ZW5jaWxCdWZmZXIuc2V0T3AoIG1hdGVyaWFsLnN0ZW5jaWxGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWkZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyApOwoKCQkJfQoKCQkJc2V0UG9seWdvbk9mZnNldCggbWF0ZXJpYWwucG9seWdvbk9mZnNldCwgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciwgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzICk7CgoJCX0KCgkJLy8KCgkJZnVuY3Rpb24gc2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKSB7CgoJCQlpZiAoIGN1cnJlbnRGbGlwU2lkZWQgIT09IGZsaXBTaWRlZCApIHsKCgkJCQlpZiAoIGZsaXBTaWRlZCApIHsKCgkJCQkJZ2wuZnJvbnRGYWNlKCAyMzA0ICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJZ2wuZnJvbnRGYWNlKCAyMzA1ICk7CgoJCQkJfQoKCQkJCWN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gc2V0Q3VsbEZhY2UoIGN1bGxGYWNlICkgewoKCQkJaWYgKCBjdWxsRmFjZSAhPT0gQ3VsbEZhY2VOb25lICkgewoKCQkJCWVuYWJsZSggMjg4NCApOwoKCQkJCWlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHsKCgkJCQkJaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VCYWNrICkgewoKCQkJCQkJZ2wuY3VsbEZhY2UoIDEwMjkgKTsKCgkJCQkJfSBlbHNlIGlmICggY3VsbEZhY2UgPT09IEN1bGxGYWNlRnJvbnQgKSB7CgoJCQkJCQlnbC5jdWxsRmFjZSggMTAyOCApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJZ2wuY3VsbEZhY2UoIDEwMzIgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJZGlzYWJsZSggMjg4NCApOwoKCQkJfQoKCQkJY3VycmVudEN1bGxGYWNlID0gY3VsbEZhY2U7CgoJCX0KCgkJZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHsKCgkJCWlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7CgoJCQkJaWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSB7IGdsLmxpbmVXaWR0aCggd2lkdGggKTsgfQoKCQkJCWN1cnJlbnRMaW5lV2lkdGggPSB3aWR0aDsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBzZXRQb2x5Z29uT2Zmc2V0KCBwb2x5Z29uT2Zmc2V0LCBmYWN0b3IsIHVuaXRzICkgewoKCQkJaWYgKCBwb2x5Z29uT2Zmc2V0ICkgewoKCQkJCWVuYWJsZSggMzI4MjMgKTsKCgkJCQlpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7CgoJCQkJCWdsLnBvbHlnb25PZmZzZXQoIGZhY3RvciwgdW5pdHMgKTsKCgkJCQkJY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBmYWN0b3I7CgkJCQkJY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzOwoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJZGlzYWJsZSggMzI4MjMgKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7CgoJCQlpZiAoIHNjaXNzb3JUZXN0ICkgewoKCQkJCWVuYWJsZSggMzA4OSApOwoKCQkJfSBlbHNlIHsKCgkJCQlkaXNhYmxlKCAzMDg5ICk7CgoJCQl9CgoJCX0KCgkJLy8gdGV4dHVyZQoKCQlmdW5jdGlvbiBhY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKSB7CgoJCQlpZiAoIHdlYmdsU2xvdCA9PT0gdW5kZWZpbmVkICkgeyB3ZWJnbFNsb3QgPSAzMzk4NCArIG1heFRleHR1cmVzIC0gMTsgfQoKCQkJaWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHsKCgkJCQlnbC5hY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKTsKCQkJCWN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgKSB7CgoJCQlpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCA9PT0gbnVsbCApIHsKCgkJCQlhY3RpdmVUZXh0dXJlKCk7CgoJCQl9CgoJCQl2YXIgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdOwoKCQkJaWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHsKCgkJCQlib3VuZFRleHR1cmUgPSB7IHR5cGU6IHVuZGVmaW5lZCwgdGV4dHVyZTogdW5kZWZpbmVkIH07CgkJCQljdXJyZW50Qm91bmRUZXh0dXJlc1sgY3VycmVudFRleHR1cmVTbG90IF0gPSBib3VuZFRleHR1cmU7CgoJCQl9CgoJCQlpZiAoIGJvdW5kVGV4dHVyZS50eXBlICE9PSB3ZWJnbFR5cGUgfHwgYm91bmRUZXh0dXJlLnRleHR1cmUgIT09IHdlYmdsVGV4dHVyZSApIHsKCgkJCQlnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTsKCgkJCQlib3VuZFRleHR1cmUudHlwZSA9IHdlYmdsVHlwZTsKCQkJCWJvdW5kVGV4dHVyZS50ZXh0dXJlID0gd2ViZ2xUZXh0dXJlOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHVuYmluZFRleHR1cmUoKSB7CgoJCQl2YXIgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdOwoKCQkJaWYgKCBib3VuZFRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBib3VuZFRleHR1cmUudHlwZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWdsLmJpbmRUZXh0dXJlKCBib3VuZFRleHR1cmUudHlwZSwgbnVsbCApOwoKCQkJCWJvdW5kVGV4dHVyZS50eXBlID0gdW5kZWZpbmVkOwoJCQkJYm91bmRUZXh0dXJlLnRleHR1cmUgPSB1bmRlZmluZWQ7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gY29tcHJlc3NlZFRleEltYWdlMkQoKSB7CgoJCQl0cnkgewoKCQkJCWdsLmNvbXByZXNzZWRUZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7CgoJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiB0ZXhJbWFnZTJEKCkgewoKCQkJdHJ5IHsKCgkJCQlnbC50ZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7CgoJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiB0ZXhJbWFnZTNEKCkgewoKCQkJdHJ5IHsKCgkJCQlnbC50ZXhJbWFnZTNELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7CgoJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTsKCgkJCX0KCgkJfQoKCQkvLwoKCQlmdW5jdGlvbiBzY2lzc29yKCBzY2lzc29yICkgewoKCQkJaWYgKCBjdXJyZW50U2Npc3Nvci5lcXVhbHMoIHNjaXNzb3IgKSA9PT0gZmFsc2UgKSB7CgoJCQkJZ2wuc2Npc3Nvciggc2Npc3Nvci54LCBzY2lzc29yLnksIHNjaXNzb3Iueiwgc2Npc3Nvci53ICk7CgkJCQljdXJyZW50U2Npc3Nvci5jb3B5KCBzY2lzc29yICk7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gdmlld3BvcnQoIHZpZXdwb3J0ICkgewoKCQkJaWYgKCBjdXJyZW50Vmlld3BvcnQuZXF1YWxzKCB2aWV3cG9ydCApID09PSBmYWxzZSApIHsKCgkJCQlnbC52aWV3cG9ydCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQueiwgdmlld3BvcnQudyApOwoJCQkJY3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICk7CgoJCQl9CgoJCX0KCgkJLy8KCgkJZnVuY3Rpb24gcmVzZXQoKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJaWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdID09PSAxICkgewoKCQkJCQlnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTsKCQkJCQllbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDsKCgkJCQl9CgoJCQl9CgoJCQllbmFibGVkQ2FwYWJpbGl0aWVzID0ge307CgoJCQljdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsOwoJCQljdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9OwoKCQkJY3VycmVudFByb2dyYW0gPSBudWxsOwoKCQkJY3VycmVudEJsZW5kaW5nID0gbnVsbDsKCgkJCWN1cnJlbnRGbGlwU2lkZWQgPSBudWxsOwoJCQljdXJyZW50Q3VsbEZhY2UgPSBudWxsOwoKCQkJY29sb3JCdWZmZXIucmVzZXQoKTsKCQkJZGVwdGhCdWZmZXIucmVzZXQoKTsKCQkJc3RlbmNpbEJ1ZmZlci5yZXNldCgpOwoKCQl9CgoJCXJldHVybiB7CgoJCQlidWZmZXJzOiB7CgkJCQljb2xvcjogY29sb3JCdWZmZXIsCgkJCQlkZXB0aDogZGVwdGhCdWZmZXIsCgkJCQlzdGVuY2lsOiBzdGVuY2lsQnVmZmVyCgkJCX0sCgoJCQlpbml0QXR0cmlidXRlczogaW5pdEF0dHJpYnV0ZXMsCgkJCWVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLAoJCQllbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yOiBlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yLAoJCQlkaXNhYmxlVW51c2VkQXR0cmlidXRlczogZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMsCgkJCWVuYWJsZTogZW5hYmxlLAoJCQlkaXNhYmxlOiBkaXNhYmxlLAoKCQkJdXNlUHJvZ3JhbTogdXNlUHJvZ3JhbSwKCgkJCXNldEJsZW5kaW5nOiBzZXRCbGVuZGluZywKCQkJc2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLAoKCQkJc2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsCgkJCXNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSwKCgkJCXNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLAoJCQlzZXRQb2x5Z29uT2Zmc2V0OiBzZXRQb2x5Z29uT2Zmc2V0LAoKCQkJc2V0U2Npc3NvclRlc3Q6IHNldFNjaXNzb3JUZXN0LAoKCQkJYWN0aXZlVGV4dHVyZTogYWN0aXZlVGV4dHVyZSwKCQkJYmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLAoJCQl1bmJpbmRUZXh0dXJlOiB1bmJpbmRUZXh0dXJlLAoJCQljb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsCgkJCXRleEltYWdlMkQ6IHRleEltYWdlMkQsCgkJCXRleEltYWdlM0Q6IHRleEltYWdlM0QsCgoJCQlzY2lzc29yOiBzY2lzc29yLAoJCQl2aWV3cG9ydDogdmlld3BvcnQsCgoJCQlyZXNldDogcmVzZXQKCgkJfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApIHsKCgkJdmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyOwoJCXZhciBtYXhUZXh0dXJlcyA9IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlczsKCQl2YXIgbWF4Q3ViZW1hcFNpemUgPSBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemU7CgkJdmFyIG1heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplOwoJCXZhciBtYXhTYW1wbGVzID0gY2FwYWJpbGl0aWVzLm1heFNhbXBsZXM7CgoJCXZhciBfdmlkZW9UZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7CgkJdmFyIF9jYW52YXM7CgoJCS8vIGNvcmRvdmEgaU9TIChhcyBvZiA1LjApIHN0aWxsIHVzZXMgVUlXZWJWaWV3LCB3aGljaCBwcm92aWRlcyBPZmZzY3JlZW5DYW52YXMsCgkJLy8gYWxzbyBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgid2ViZ2wiKSwgYnV0IG5vdCBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgiMmQiKSEKCQkvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtYXkgb25seSBpbXBsZW1lbnQgT2Zmc2NyZWVuQ2FudmFzIHBhcnRpYWxseSAoZS5nLiBsYWNraW5nIDJkKS4KCgkJdmFyIHVzZU9mZnNjcmVlbkNhbnZhcyA9IGZhbHNlOwoKCQl0cnkgewoKCQkJdXNlT2Zmc2NyZWVuQ2FudmFzID0gdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcKCQkJCSYmICggbmV3IE9mZnNjcmVlbkNhbnZhcyggMSwgMSApLmdldENvbnRleHQoICIyZCIgKSApICE9PSBudWxsOwoKCQl9IGNhdGNoICggZXJyICkgewoKCQkJLy8gSWdub3JlIGFueSBlcnJvcnMKCgkJfQoKCQlmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7CgoJCQkvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzCgoJCQlyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID8KCQkJCW5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6CgkJCQlkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTsKCgkJfQoKCQlmdW5jdGlvbiByZXNpemVJbWFnZSggaW1hZ2UsIG5lZWRzUG93ZXJPZlR3bywgbmVlZHNOZXdDYW52YXMsIG1heFNpemUgKSB7CgoJCQl2YXIgc2NhbGUgPSAxOwoKCQkJLy8gaGFuZGxlIGNhc2UgaWYgdGV4dHVyZSBleGNlZWRzIG1heCBzaXplCgoJCQlpZiAoIGltYWdlLndpZHRoID4gbWF4U2l6ZSB8fCBpbWFnZS5oZWlnaHQgPiBtYXhTaXplICkgewoKCQkJCXNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7CgoJCQl9CgoJCQkvLyBvbmx5IHBlcmZvcm0gcmVzaXplIGlmIG5lY2Vzc2FyeQoKCQkJaWYgKCBzY2FsZSA8IDEgfHwgbmVlZHNQb3dlck9mVHdvID09PSB0cnVlICkgewoKCQkJCS8vIG9ubHkgcGVyZm9ybSByZXNpemUgZm9yIGNlcnRhaW4gaW1hZ2UgdHlwZXMKCgkJCQlpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8CgkJCQkJKCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fAoJCQkJCSggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7CgoJCQkJCXZhciBmbG9vciA9IG5lZWRzUG93ZXJPZlR3byA/IF9NYXRoLmZsb29yUG93ZXJPZlR3byA6IE1hdGguZmxvb3I7CgoJCQkJCXZhciB3aWR0aCA9IGZsb29yKCBzY2FsZSAqIGltYWdlLndpZHRoICk7CgkJCQkJdmFyIGhlaWdodCA9IGZsb29yKCBzY2FsZSAqIGltYWdlLmhlaWdodCApOwoKCQkJCQlpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIHsgX2NhbnZhcyA9IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApOyB9CgoJCQkJCS8vIGN1YmUgdGV4dHVyZXMgY2FuJ3QgcmV1c2UgdGhlIHNhbWUgY2FudmFzCgoJCQkJCXZhciBjYW52YXMgPSBuZWVkc05ld0NhbnZhcyA/IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIDogX2NhbnZhczsKCgkJCQkJY2FudmFzLndpZHRoID0gd2lkdGg7CgkJCQkJY2FudmFzLmhlaWdodCA9IGhlaWdodDsKCgkJCQkJdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApOwoJCQkJCWNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCApOwoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGhhcyBiZWVuIHJlc2l6ZWQgZnJvbSAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykgdG8gKCcgKyB3aWR0aCArICd4JyArIGhlaWdodCArICcpLicgKTsKCgkJCQkJcmV0dXJuIGNhbnZhczsKCgkJCQl9IGVsc2UgewoKCQkJCQlpZiAoICdkYXRhJyBpbiBpbWFnZSApIHsKCgkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLicgKTsKCgkJCQkJfQoKCQkJCQlyZXR1cm4gaW1hZ2U7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIGltYWdlOwoKCQl9CgoJCWZ1bmN0aW9uIGlzUG93ZXJPZlR3byggaW1hZ2UgKSB7CgoJCQlyZXR1cm4gX01hdGguaXNQb3dlck9mVHdvKCBpbWFnZS53aWR0aCApICYmIF9NYXRoLmlzUG93ZXJPZlR3byggaW1hZ2UuaGVpZ2h0ICk7CgoJCX0KCgkJZnVuY3Rpb24gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApIHsKCgkJCWlmICggaXNXZWJHTDIgKSB7IHJldHVybiBmYWxzZTsgfQoKCQkJcmV0dXJuICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkgfHwKCQkJCSggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApOwoKCQl9CgoJCWZ1bmN0aW9uIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgewoKCQkJcmV0dXJuIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICYmIHN1cHBvcnRzTWlwcyAmJgoJCQkJdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcjsKCgkJfQoKCQlmdW5jdGlvbiBnZW5lcmF0ZU1pcG1hcCggdGFyZ2V0LCB0ZXh0dXJlLCB3aWR0aCwgaGVpZ2h0ICkgewoKCQkJX2dsLmdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKTsKCgkJCXZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7CgoJCQkvLyBOb3RlOiBNYXRoLmxvZyggeCApICogTWF0aC5MT0cyRSB1c2VkIGluc3RlYWQgb2YgTWF0aC5sb2cyKCB4ICkgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBieSBJRTExCgkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBNYXRoLmxvZyggTWF0aC5tYXgoIHdpZHRoLCBoZWlnaHQgKSApICogTWF0aC5MT0cyRTsKCgkJfQoKCQlmdW5jdGlvbiBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApIHsKCgkJCWlmICggaXNXZWJHTDIgPT09IGZhbHNlICkgeyByZXR1cm4gZ2xGb3JtYXQ7IH0KCgkJCXZhciBpbnRlcm5hbEZvcm1hdCA9IGdsRm9ybWF0OwoKCQkJaWYgKCBnbEZvcm1hdCA9PT0gNjQwMyApIHsKCgkJCQlpZiAoIGdsVHlwZSA9PT0gNTEyNiApIHsgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNjsgfQoJCQkJaWYgKCBnbFR5cGUgPT09IDUxMzEgKSB7IGludGVybmFsRm9ybWF0ID0gMzMzMjU7IH0KCQkJCWlmICggZ2xUeXBlID09PSA1MTIxICkgeyBpbnRlcm5hbEZvcm1hdCA9IDMzMzIxOyB9CgoJCQl9CgoJCQlpZiAoIGdsRm9ybWF0ID09PSA2NDA3ICkgewoKCQkJCWlmICggZ2xUeXBlID09PSA1MTI2ICkgeyBpbnRlcm5hbEZvcm1hdCA9IDM0ODM3OyB9CgkJCQlpZiAoIGdsVHlwZSA9PT0gNTEzMSApIHsgaW50ZXJuYWxGb3JtYXQgPSAzNDg0MzsgfQoJCQkJaWYgKCBnbFR5cGUgPT09IDUxMjEgKSB7IGludGVybmFsRm9ybWF0ID0gMzI4NDk7IH0KCgkJCX0KCgkJCWlmICggZ2xGb3JtYXQgPT09IDY0MDggKSB7CgoJCQkJaWYgKCBnbFR5cGUgPT09IDUxMjYgKSB7IGludGVybmFsRm9ybWF0ID0gMzQ4MzY7IH0KCQkJCWlmICggZ2xUeXBlID09PSA1MTMxICkgeyBpbnRlcm5hbEZvcm1hdCA9IDM0ODQyOyB9CgkJCQlpZiAoIGdsVHlwZSA9PT0gNTEyMSApIHsgaW50ZXJuYWxGb3JtYXQgPSAzMjg1NjsgfQoKCQkJfQoKCQkJaWYgKCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjUgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDMzMzI2IHx8CgkJCQlpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4NDIgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDM0ODM2ICkgewoKCQkJCWV4dGVuc2lvbnMuZ2V0KCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKTsKCgkJCX0gZWxzZSBpZiAoIGludGVybmFsRm9ybWF0ID09PSAzNDg0MyB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4MzcgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogRmxvYXRpbmcgcG9pbnQgdGV4dHVyZXMgd2l0aCBSR0IgZm9ybWF0IG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgUkdCQSBpbnN0ZWFkLicgKTsKCgkJCX0KCgkJCXJldHVybiBpbnRlcm5hbEZvcm1hdDsKCgkJfQoKCQkvLyBGYWxsYmFjayBmaWx0ZXJzIGZvciBub24tcG93ZXItb2YtMiB0ZXh0dXJlcwoKCQlmdW5jdGlvbiBmaWx0ZXJGYWxsYmFjayggZiApIHsKCgkJCWlmICggZiA9PT0gTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyICkgewoKCQkJCXJldHVybiA5NzI4OwoKCQkJfQoKCQkJcmV0dXJuIDk3Mjk7CgoJCX0KCgkJLy8KCgkJZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7CgoJCQl2YXIgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDsKCgkJCXRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7CgoJCQlkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApOwoKCQkJaWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgewoKCQkJCV92aWRlb1RleHR1cmVzLmRlbGV0ZSggdGV4dHVyZSApOwoKCQkJfQoKCQkJaW5mby5tZW1vcnkudGV4dHVyZXMgLS07CgoJCX0KCgkJZnVuY3Rpb24gb25SZW5kZXJUYXJnZXREaXNwb3NlKCBldmVudCApIHsKCgkJCXZhciByZW5kZXJUYXJnZXQgPSBldmVudC50YXJnZXQ7CgoJCQlyZW5kZXJUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTsKCgkJCWRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApOwoKCQkJaW5mby5tZW1vcnkudGV4dHVyZXMgLS07CgoJCX0KCgkJLy8KCgkJZnVuY3Rpb24gZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKSB7CgoJCQl2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKCQkJaWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KCgkJCV9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoKCQkJcHJvcGVydGllcy5yZW1vdmUoIHRleHR1cmUgKTsKCgkJfQoKCQlmdW5jdGlvbiBkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7CgoJCQl2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCQkJdmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7CgoJCQlpZiAoICEgcmVuZGVyVGFyZ2V0ICkgeyByZXR1cm47IH0KCgkJCWlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTsKCgkJCX0KCgkJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApIHsKCgkJCQlyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTsKCgkJCX0KCgkJCWlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkgewoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgoJCQkJCV9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApOwoJCQkJCWlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSB7IF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gKTsgfQoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJX2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApOwoJCQkJaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIHsgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKTsgfQoKCQkJfQoKCQkJaWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldCApIHsKCgkJCQlfZ2wuZGVsZXRlVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JUZXh0dXJlICk7CgkJCQlfZ2wuZGVsZXRlVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhTdGVuY2lsVGV4dHVyZSApOwoKCQkJCWluZm8ubWVtb3J5LnRleHR1cmVzIC09IDI7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbFZpZXdGcmFtZWJ1ZmZlcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCV9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsVmlld0ZyYW1lYnVmZmVyc1sgaSBdICk7CgoJCQkJfQoKCQkJfQoKCQkJcHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7CgkJCXByb3BlcnRpZXMucmVtb3ZlKCByZW5kZXJUYXJnZXQgKTsKCgkJfQoKCQkvLwoKCQl2YXIgdGV4dHVyZVVuaXRzID0gMDsKCgkJZnVuY3Rpb24gcmVzZXRUZXh0dXJlVW5pdHMoKSB7CgoJCQl0ZXh0dXJlVW5pdHMgPSAwOwoKCQl9CgoJCWZ1bmN0aW9uIGFsbG9jYXRlVGV4dHVyZVVuaXQoKSB7CgoJCQl2YXIgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdHM7CgoJCQlpZiAoIHRleHR1cmVVbml0ID49IG1heFRleHR1cmVzICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIG1heFRleHR1cmVzICk7CgoJCQl9CgoJCQl0ZXh0dXJlVW5pdHMgKz0gMTsKCgkJCXJldHVybiB0ZXh0dXJlVW5pdDsKCgkJfQoKCQkvLwoKCQlmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7CgoJCQl2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApOwoKCQkJaWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgeyB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTsgfQoKCQkJaWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkgewoKCQkJCXZhciBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7CgoJCQkJaWYgKCBpbWFnZSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyB1bmRlZmluZWQnICk7CgoJCQkJfSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlJyApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7CgkJCQkJcmV0dXJuOwoKCQkJCX0KCgkJCX0KCgkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApOwoJCQlzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTsKCgkJfQoKCQlmdW5jdGlvbiBzZXRUZXh0dXJlMkRBcnJheSggdGV4dHVyZSwgc2xvdCApIHsKCgkJCXZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7CgoJCQlpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7CgoJCQkJdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApOwoJCQlzdGF0ZS5iaW5kVGV4dHVyZSggMzU4NjYsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7CgoJCX0KCgkJZnVuY3Rpb24gc2V0VGV4dHVyZTNEKCB0ZXh0dXJlLCBzbG90ICkgewoKCQkJdmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTsKCgkJCWlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHsKCgkJCQl1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJc3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7CgkJCXN0YXRlLmJpbmRUZXh0dXJlKCAzMjg3OSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTsKCgkJfQoKCQlmdW5jdGlvbiBzZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApIHsKCgkJCWlmICggdGV4dHVyZS5pbWFnZS5sZW5ndGggIT09IDYgKSB7IHJldHVybjsgfQoKCQkJdmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTsKCgkJCWlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHsKCgkJCQlpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTsKCgkJCQlzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTsKCQkJCXN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTsKCgkJCQlfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCB0ZXh0dXJlLmZsaXBZICk7CgoJCQkJdmFyIGlzQ29tcHJlc3NlZCA9ICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKTsKCQkJCXZhciBpc0RhdGFUZXh0dXJlID0gKCB0ZXh0dXJlLmltYWdlWyAwIF0gJiYgdGV4dHVyZS5pbWFnZVsgMCBdLmlzRGF0YVRleHR1cmUgKTsKCgkJCQl2YXIgY3ViZUltYWdlID0gW107CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCgkJCQkJaWYgKCAhIGlzQ29tcHJlc3NlZCAmJiAhIGlzRGF0YVRleHR1cmUgKSB7CgoJCQkJCQljdWJlSW1hZ2VbIGkgXSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlWyBpIF0sIGZhbHNlLCB0cnVlLCBtYXhDdWJlbWFwU2l6ZSApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJY3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXZhciBpbWFnZSA9IGN1YmVJbWFnZVsgMCBdLAoJCQkJCXN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggaW1hZ2UgKSB8fCBpc1dlYkdMMiwKCQkJCQlnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICksCgkJCQkJZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICksCgkJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICk7CgoJCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM0MDY3LCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKTsKCgkJCQl2YXIgbWlwbWFwczsKCgkJCQlpZiAoIGlzQ29tcHJlc3NlZCApIHsKCgkJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCgkJCQkJCW1pcG1hcHMgPSBjdWJlSW1hZ2VbIGkgXS5taXBtYXBzOwoKCQkJCQkJZm9yICggdmFyIGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7CgoJCQkJCQkJdmFyIG1pcG1hcCA9IG1pcG1hcHNbIGogXTsKCgkJCQkJCQlpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JGb3JtYXQgKSB7CgoJCQkJCQkJCWlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7CgoJCQkJCQkJCQlzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7CgoJCQkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAuc2V0VGV4dHVyZUN1YmUoKScgKTsKCgkJCQkJCQkJfQoKCQkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQl0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxOwoKCQkJCX0gZWxzZSB7CgoJCQkJCW1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7CgoJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgoJCQkJCQlpZiAoIGlzRGF0YVRleHR1cmUgKSB7CgoJCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7CgoJCQkJCQkJZm9yICggdmFyIGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7CgoJCQkJCQkJCXZhciBtaXBtYXAgPSBtaXBtYXBzWyBqIF07CgkJCQkJCQkJdmFyIG1pcG1hcEltYWdlID0gbWlwbWFwLmltYWdlWyBpIF0uaW1hZ2U7CgoJCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTsKCgkJCQkJCQl9CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCXN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTsKCgkJCQkJCQlmb3IgKCB2YXIgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHsKCgkJCQkJCQkJdmFyIG1pcG1hcCA9IG1pcG1hcHNbIGogXTsKCgkJCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlWyBpIF0gKTsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJdGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoOwoKCQkJCX0KCgkJCQlpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7CgoJCQkJCS8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS4KCQkJCQlnZW5lcmF0ZU1pcG1hcCggMzQwNjcsIHRleHR1cmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTsKCgkJCQl9CgoJCQkJdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uOwoKCQkJCWlmICggdGV4dHVyZS5vblVwZGF0ZSApIHsgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApOyB9CgoJCQl9IGVsc2UgewoKCQkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApOwoJCQkJc3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApIHsKCgkJCXN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApOwoJCQlzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX193ZWJnbFRleHR1cmUgKTsKCgkJfQoKCQl2YXIgd3JhcHBpbmdUb0dMID0ge307CgkJd3JhcHBpbmdUb0dMWyBSZXBlYXRXcmFwcGluZyBdID0gMTA0OTc7CgkJd3JhcHBpbmdUb0dMWyBDbGFtcFRvRWRnZVdyYXBwaW5nIF0gPSAzMzA3MTsKCQl3cmFwcGluZ1RvR0xbIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgXSA9IDMzNjQ4OwoKCQl2YXIgZmlsdGVyVG9HTCA9IHt9OwoJCWZpbHRlclRvR0xbIE5lYXJlc3RGaWx0ZXIgXSA9IDk3Mjg7CgkJZmlsdGVyVG9HTFsgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgXSA9IDk5ODQ7CgkJZmlsdGVyVG9HTFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdID0gOTk4NjsKCQlmaWx0ZXJUb0dMWyBMaW5lYXJGaWx0ZXIgXSA9IDk3Mjk7CgkJZmlsdGVyVG9HTFsgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciBdID0gOTk4NTsKCQlmaWx0ZXJUb0dMWyBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgXSA9IDk5ODc7CgoJCWZ1bmN0aW9uIHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgewoKCQkJaWYgKCBzdXBwb3J0c01pcHMgKSB7CgoJCQkJX2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0Miwgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBTIF0gKTsKCQkJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDMsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwVCBdICk7CgoJCQkJaWYgKCB0ZXh0dXJlVHlwZSA9PT0gMzI4NzkgfHwgdGV4dHVyZVR5cGUgPT09IDM1ODY2ICkgewoKCQkJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDMyODgyLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApOwoKCQkJCX0KCgkJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7CgkJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQxLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1pbkZpbHRlciBdICk7CgoJCQl9IGVsc2UgewoKCQkJCV9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIDMzMDcxICk7CgkJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCAzMzA3MSApOwoKCQkJCWlmICggdGV4dHVyZVR5cGUgPT09IDMyODc5IHx8IHRleHR1cmVUeXBlID09PSAzNTg2NiApIHsKCgkJCQkJX2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAzMjg4MiwgMzMwNzEgKTsKCgkJCQl9CgoJCQkJaWYgKCB0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS53cmFwUyBhbmQgVGV4dHVyZS53cmFwVCBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcuJyApOwoKCQkJCX0KCgkJCQlfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5tYWdGaWx0ZXIgKSApOwoJCQkJX2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWluRmlsdGVyICkgKTsKCgkJCQlpZiAoIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXIgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nICk7CgoJCQkJfQoKCQkJfQoKCQkJdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApOwoKCQkJaWYgKCBleHRlbnNpb24gKSB7CgoJCQkJaWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gbnVsbCApIHsgcmV0dXJuOyB9CgkJCQlpZiAoIHRleHR1cmUudHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiAoIGlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInICkgKSA9PT0gbnVsbCApIHsgcmV0dXJuOyB9CgoJCQkJaWYgKCB0ZXh0dXJlLmFuaXNvdHJvcHkgPiAxIHx8IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSApIHsKCgkJCQkJX2dsLnRleFBhcmFtZXRlcmYoIHRleHR1cmVUeXBlLCBleHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKCB0ZXh0dXJlLmFuaXNvdHJvcHksIGNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkgKSApOwoJCQkJCXByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSA9IHRleHR1cmUuYW5pc290cm9weTsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICkgewoKCQkJaWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID0gdHJ1ZTsKCgkJCQl0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApOwoKCQkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTsKCgkJCQlpbmZvLm1lbW9yeS50ZXh0dXJlcyArKzsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiB1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHsKCgkJCXZhciB0ZXh0dXJlVHlwZSA9IDM1NTM7CgoJCQlpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZTJEQXJyYXkgKSB7IHRleHR1cmVUeXBlID0gMzU4NjY7IH0KCQkJaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUzRCApIHsgdGV4dHVyZVR5cGUgPSAzMjg3OTsgfQoKCQkJaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7CgoJCQlzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTsKCQkJc3RhdGUuYmluZFRleHR1cmUoIHRleHR1cmVUeXBlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoKCQkJX2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgdGV4dHVyZS5mbGlwWSApOwoJCQlfZ2wucGl4ZWxTdG9yZWkoIDM3NDQxLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTsKCQkJX2dsLnBpeGVsU3RvcmVpKCAzMzE3LCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApOwoKCQkJdmFyIG5lZWRzUG93ZXJPZlR3byA9IHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSAmJiBpc1Bvd2VyT2ZUd28oIHRleHR1cmUuaW1hZ2UgKSA9PT0gZmFsc2U7CgkJCXZhciBpbWFnZSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlLCBuZWVkc1Bvd2VyT2ZUd28sIGZhbHNlLCBtYXhUZXh0dXJlU2l6ZSApOwoKCQkJdmFyIHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggaW1hZ2UgKSB8fCBpc1dlYkdMMiwKCQkJCWdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQgKSwKCQkJCWdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApLAoJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICk7CgoJCQlzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApOwoKCQkJdmFyIG1pcG1hcCwgbWlwbWFwcyA9IHRleHR1cmUubWlwbWFwczsKCgkJCWlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHsKCgkJCQkvLyBwb3B1bGF0ZSBkZXB0aCB0ZXh0dXJlIHdpdGggZHVtbXkgZGF0YQoKCQkJCWdsSW50ZXJuYWxGb3JtYXQgPSA2NDAyOwoKCQkJCWlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7CgoJCQkJCWlmICggaXNXZWJHTDIgPT09IGZhbHNlICkgeyB0aHJvdyBuZXcgRXJyb3IoICdGbG9hdCBEZXB0aCBUZXh0dXJlIG9ubHkgc3VwcG9ydGVkIGluIFdlYkdMMi4wJyApOyB9CgkJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IDM2MDEyOwoKCQkJCX0gZWxzZSBpZiAoIGlzV2ViR0wyICkgewoKCQkJCQkvLyBXZWJHTCAyLjAgcmVxdWlyZXMgc2lnbmVkIGludGVybmFsZm9ybWF0IGZvciBnbFRleEltYWdlMkQKCQkJCQlnbEludGVybmFsRm9ybWF0ID0gMzMxODk7CgoJCQkJfQoKCQkJCWlmICggdGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICYmIGdsSW50ZXJuYWxGb3JtYXQgPT09IDY0MDIgKSB7CgoJCQkJCS8vIFRoZSBlcnJvciBJTlZBTElEX09QRVJBVElPTiBpcyBnZW5lcmF0ZWQgYnkgdGV4SW1hZ2UyRCBpZiBmb3JtYXQgYW5kIGludGVybmFsZm9ybWF0IGFyZQoJCQkJCS8vIERFUFRIX0NPTVBPTkVOVCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfU0hPUlQgb3IgVU5TSUdORURfSU5UCgkJCQkJLy8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pCgkJCQkJaWYgKCB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkU2hvcnRUeXBlICYmIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnRUeXBlICkgewoKCQkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkU2hvcnRUeXBlIG9yIFVuc2lnbmVkSW50VHlwZSBmb3IgRGVwdGhGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTsKCgkJCQkJCXRleHR1cmUudHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlOwoJCQkJCQlnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCQkvLyBEZXB0aCBzdGVuY2lsIHRleHR1cmVzIG5lZWQgdGhlIERFUFRIX1NURU5DSUwgaW50ZXJuYWwgZm9ybWF0CgkJCQkvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLykKCQkJCWlmICggdGV4dHVyZS5mb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHsKCgkJCQkJZ2xJbnRlcm5hbEZvcm1hdCA9IDM0MDQxOwoKCQkJCQkvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmUKCQkJCQkvLyBERVBUSF9TVEVOQ0lMIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9JTlRfMjRfOF9XRUJHTC4KCQkJCQkvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLykKCQkJCQlpZiAoIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnQyNDhUeXBlICkgewoKCQkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkSW50MjQ4VHlwZSBmb3IgRGVwdGhTdGVuY2lsRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7CgoJCQkJCQl0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7CgkJCQkJCWdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTsKCgkJCX0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZSApIHsKCgkJCQkvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZQoJCQkJLy8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzCgkJCQkvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHMKCgkJCQlpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCAmJiBzdXBwb3J0c01pcHMgKSB7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQkJbWlwbWFwID0gbWlwbWFwc1sgaSBdOwoJCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7CgoJCQkJCX0KCgkJCQkJdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCQkJCQl0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTsKCQkJCQl0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDsKCgkJCQl9CgoJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCW1pcG1hcCA9IG1pcG1hcHNbIGkgXTsKCgkJCQkJaWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCRm9ybWF0ICkgewoKCQkJCQkJaWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHsKCgkJCQkJCQlzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApOwoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoKCQkJCQkJc3RhdGUudGV4SW1hZ2UyRCggMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7CgoJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUyREFycmF5ICkgewoKCQkJCXN0YXRlLnRleEltYWdlM0QoIDM1ODY2LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApOwoJCQkJdGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7CgoJCQl9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUzRCApIHsKCgkJCQlzdGF0ZS50ZXhJbWFnZTNEKCAzMjg3OSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTsKCQkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwOwoKCQkJfSBlbHNlIHsKCgkJCQkvLyByZWd1bGFyIFRleHR1cmUgKGltYWdlLCB2aWRlbywgY2FudmFzKQoKCQkJCS8vIHVzZSBtYW51YWxseSBjcmVhdGVkIG1pcG1hcHMgaWYgYXZhaWxhYmxlCgkJCQkvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHMKCQkJCS8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVscwoKCQkJCWlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIHN1cHBvcnRzTWlwcyApIHsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQltaXBtYXAgPSBtaXBtYXBzWyBpIF07CgkJCQkJCXN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApOwoKCQkJCQl9CgoJCQkJCXRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7CgkJCQkJdGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTsKCgkJCQl9IGVsc2UgewoKCQkJCQlzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApOwoJCQkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHsKCgkJCQlnZW5lcmF0ZU1pcG1hcCggMzU1MywgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApOwoKCQkJfQoKCQkJdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uOwoKCQkJaWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgeyB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7IH0KCgkJfQoKCQkvLyBSZW5kZXIgdGFyZ2V0cwoKCQkvLyBTZXR1cCBzdG9yYWdlIGZvciB0YXJnZXQgdGV4dHVyZSBhbmQgYmluZCBpdCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyCgkJZnVuY3Rpb24gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQgKSB7CgoJCQl2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgKTsKCQkJdmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTsKCQkJdmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApOwoJCQlzdGF0ZS50ZXhJbWFnZTJEKCB0ZXh0dXJlVGFyZ2V0LCAwLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTsKCQkJX2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7CgkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwICk7CgkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7CgoJCX0KCgkJLy8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXIKCQlmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBpc011bHRpc2FtcGxlICkgewoKCQkJX2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCByZW5kZXJidWZmZXIgKTsKCgkJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmICEgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7CgoJCQkJaWYgKCBpc011bHRpc2FtcGxlICkgewoKCQkJCQl2YXIgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApOwoKCQkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgMzMxODksIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCV9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzMxODksIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoKCQkJCX0KCgkJCQlfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzNjA5NiwgMzYxNjEsIHJlbmRlcmJ1ZmZlciApOwoKCQkJfSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkgewoKCQkJCWlmICggaXNNdWx0aXNhbXBsZSApIHsKCgkJCQkJdmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTsKCgkJCQkJX2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggMzYxNjEsIHNhbXBsZXMsIDM1MDU2LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIDM0MDQxLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCgkJCQl9CgoKCQkJCV9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDMzMzA2LCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7CgoJCQl9IGVsc2UgewoKCQkJCXZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdCApOwoJCQkJdmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTsKCQkJCXZhciBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIGdsRm9ybWF0LCBnbFR5cGUgKTsKCgkJCQlpZiAoIGlzTXVsdGlzYW1wbGUgKSB7CgoJCQkJCXZhciBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7CgoJCQkJCV9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoKCQkJCX0KCgkJCX0KCgkJCV9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgbnVsbCApOwoKCQl9CgoJCS8vIFNldHVwIHJlc291cmNlcyBmb3IgYSBEZXB0aCBUZXh0dXJlIGZvciBhIEZCTyAobmVlZHMgYW4gZXh0ZW5zaW9uKQoJCWZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkgewoKCQkJdmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApOwoJCQlpZiAoIGlzQ3ViZSApIHsgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTsgfQoKCQkJX2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7CgoJCQlpZiAoICEgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSApIHsKCgkJCQl0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApOwoKCQkJfQoKCQkJLy8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplCgkJCWlmICggISBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlIHx8CgkJCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8CgkJCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgIT09IHJlbmRlclRhcmdldC5oZWlnaHQgKSB7CgoJCQkJcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDsKCQkJCXJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDsKCQkJCXJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJfQoKCQkJc2V0VGV4dHVyZTJEKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwICk7CgoJCQl2YXIgd2ViZ2xEZXB0aFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlOwoKCQkJaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB7CgoJCQkJX2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwOTYsIDM1NTMsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7CgoJCQl9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgewoKCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApOwoKCQkJfSBlbHNlIHsKCgkJCQl0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXQnICk7CgoJCQl9CgoJCX0KCgkJLy8gU2V0dXAgR0wgcmVzb3VyY2VzIGZvciBhIG5vbi10ZXh0dXJlIGRlcHRoIGJ1ZmZlcgoJCWZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHsKCgkJCXZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApOwoKCQkJdmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID09PSB0cnVlICk7CgoJCQlpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7CgoJCQkJaWYgKCBpc0N1YmUgKSB7IHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApOyB9CgoJCQkJc2V0dXBEZXB0aFRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKTsKCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBpc0N1YmUgKSB7CgoJCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gW107CgoJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7CgoJCQkJCQlfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApOwoJCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpOwoJCQkJCQlzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCApOwoKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCgkJCQkJX2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7CgkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7CgkJCQkJc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICk7CgoJCQkJfQoKCQkJfQoKCQkJX2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTsKCgkJfQoKCQkvLyBTZXQgdXAgR0wgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyIHRhcmdldAoJCWZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7CgoJCQl2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTsKCQkJdmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7CgoJCQlyZW5kZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTsKCgkJCXRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTsKCgkJCWluZm8ubWVtb3J5LnRleHR1cmVzICsrOwoKCQkJdmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID09PSB0cnVlICk7CgkJCXZhciBpc011bHRpc2FtcGxlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7CgkJCXZhciBpc011bHRpdmlldyA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQgPT09IHRydWUgKTsKCQkJdmFyIHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggcmVuZGVyVGFyZ2V0ICkgfHwgaXNXZWJHTDI7CgoJCQkvLyBTZXR1cCBmcmFtZWJ1ZmZlcgoKCQkJaWYgKCBpc0N1YmUgKSB7CgoJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkgewoKCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwoKCQkJCWlmICggaXNNdWx0aXNhbXBsZSApIHsKCgkJCQkJaWYgKCBpc1dlYkdMMiApIHsKCgkJCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7CgkJCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpOwoKCQkJCQkJX2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApOwoJCQkJCQl2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgKTsKCQkJCQkJdmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTsKCQkJCQkJdmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApOwoJCQkJCQl2YXIgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApOwoJCQkJCQlfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgoJCQkJCQlfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTsKCQkJCQkJX2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzYwNjQsIDM2MTYxLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApOwoJCQkJCQlfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIG51bGwgKTsKCgkJCQkJCWlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkgewoKCQkJCQkJCXJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpOwoJCQkJCQkJc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0cnVlICk7CgoJCQkJCQl9CgoJCQkJCQlfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApOwoKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMi4nICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgaWYgKCBpc011bHRpdmlldyApIHsKCgkJCQkJdmFyIHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoOwoJCQkJCXZhciBoZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0OwoJCQkJCXZhciBudW1WaWV3cyA9IHJlbmRlclRhcmdldC5udW1WaWV3czsKCgkJCQkJX2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7CgoJCQkJCXZhciBleHQgPSBleHRlbnNpb25zLmdldCggJ09WUl9tdWx0aXZpZXcyJyApOwoKCQkJCQlpbmZvLm1lbW9yeS50ZXh0dXJlcyArPSAyOwoKCQkJCQl2YXIgY29sb3JUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTsKCQkJCQlfZ2wuYmluZFRleHR1cmUoIDM1ODY2LCBjb2xvclRleHR1cmUgKTsKCQkJCQlfZ2wudGV4UGFyYW1ldGVyaSggMzU4NjYsIDEwMjQwLCA5NzI4ICk7CgkJCQkJX2dsLnRleFBhcmFtZXRlcmkoIDM1ODY2LCAxMDI0MSwgOTcyOCApOwoJCQkJCV9nbC50ZXhJbWFnZTNEKCAzNTg2NiwgMCwgMzI4NTYsIHdpZHRoLCBoZWlnaHQsIG51bVZpZXdzLCAwLCA2NDA4LCA1MTIxLCBudWxsICk7CgkJCQkJZXh0LmZyYW1lYnVmZmVyVGV4dHVyZU11bHRpdmlld09WUiggMzYxNjAsIDM2MDY0LCBjb2xvclRleHR1cmUsIDAsIDAsIG51bVZpZXdzICk7CgoJCQkJCXZhciBkZXB0aFN0ZW5jaWxUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTsKCQkJCQlfZ2wuYmluZFRleHR1cmUoIDM1ODY2LCBkZXB0aFN0ZW5jaWxUZXh0dXJlICk7CgkJCQkJX2dsLnRleFBhcmFtZXRlcmkoIDM1ODY2LCAxMDI0MCwgOTcyOCApOwoJCQkJCV9nbC50ZXhQYXJhbWV0ZXJpKCAzNTg2NiwgMTAyNDEsIDk3MjggKTsKCQkJCQlfZ2wudGV4SW1hZ2UzRCggMzU4NjYsIDAsIDM1MDU2LCB3aWR0aCwgaGVpZ2h0LCBudW1WaWV3cywgMCwgMzQwNDEsIDM0MDQyLCBudWxsICk7CgkJCQkJZXh0LmZyYW1lYnVmZmVyVGV4dHVyZU11bHRpdmlld09WUiggMzYxNjAsIDMzMzA2LCBkZXB0aFN0ZW5jaWxUZXh0dXJlLCAwLCAwLCBudW1WaWV3cyApOwoKCQkJCQl2YXIgdmlld0ZyYW1lYnVmZmVycyA9IG5ldyBBcnJheSggbnVtVmlld3MgKTsKCQkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1WaWV3czsgKysgaSApIHsKCgkJCQkJCXZpZXdGcmFtZWJ1ZmZlcnNbIGkgXSA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwoJCQkJCQlfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgdmlld0ZyYW1lYnVmZmVyc1sgaSBdICk7CgkJCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggMzYxNjAsIDM2MDY0LCBjb2xvclRleHR1cmUsIDAsIGkgKTsKCgkJCQkJfQoKCQkJCQlyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclRleHR1cmUgPSBjb2xvclRleHR1cmU7CgkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhTdGVuY2lsVGV4dHVyZSA9IGRlcHRoU3RlbmNpbFRleHR1cmU7CgkJCQkJcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsVmlld0ZyYW1lYnVmZmVycyA9IHZpZXdGcmFtZWJ1ZmZlcnM7CgoJCQkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7CgkJCQkJX2dsLmJpbmRUZXh0dXJlKCAzNTg2NiwgbnVsbCApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIFNldHVwIGNvbG9yIGJ1ZmZlcgoKCQkJaWYgKCBpc0N1YmUgKSB7CgoJCQkJc3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoJCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM0MDY3LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzICk7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHsKCgkJCQkJc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCwgMzYwNjQsIDM0MDY5ICsgaSApOwoKCQkJCX0KCgkJCQlpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkgewoKCQkJCQlnZW5lcmF0ZU1pcG1hcCggMzQwNjcsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTsKCgkJCQl9CgoJCQkJc3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCBudWxsICk7CgoJCQl9IGVsc2UgaWYgKCAhIGlzTXVsdGl2aWV3ICkgewoKCQkJCXN0YXRlLmJpbmRUZXh0dXJlKCAzNTUzLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApOwoJCQkJc2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM1NTMsIHJlbmRlclRhcmdldC50ZXh0dXJlLCBzdXBwb3J0c01pcHMgKTsKCQkJCXNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCAzNjA2NCwgMzU1MyApOwoKCQkJCWlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7CgoJCQkJCWdlbmVyYXRlTWlwbWFwKCAzNTUzLCByZW5kZXJUYXJnZXQudGV4dHVyZSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgoJCQkJfQoKCQkJCXN0YXRlLmJpbmRUZXh0dXJlKCAzNTUzLCBudWxsICk7CgoJCQl9CgoJCQkvLyBTZXR1cCBkZXB0aCBhbmQgc3RlbmNpbCBidWZmZXJzCgoJCQlpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHsKCgkJCQlzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApIHsKCgkJCXZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7CgkJCXZhciBzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28oIHJlbmRlclRhcmdldCApIHx8IGlzV2ViR0wyOwoKCQkJaWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkgewoKCQkJCXZhciB0YXJnZXQgPSByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPyAzNDA2NyA6IDM1NTM7CgkJCQl2YXIgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTsKCgkJCQlzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0LCB3ZWJnbFRleHR1cmUgKTsKCQkJCWdlbmVyYXRlTWlwbWFwKCB0YXJnZXQsIHRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApOwoJCQkJc3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgbnVsbCApOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7CgoJCQlpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSB7CgoJCQkJaWYgKCBpc1dlYkdMMiApIHsKCgkJCQkJdmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7CgoJCQkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApOwoJCQkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA5LCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApOwoKCQkJCQl2YXIgd2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7CgkJCQkJdmFyIGhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7CgkJCQkJdmFyIG1hc2sgPSAxNjM4NDsKCgkJCQkJaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7IG1hc2sgfD0gMjU2OyB9CgkJCQkJaWYgKCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciApIHsgbWFzayB8PSAxMDI0OyB9CgoJCQkJCV9nbC5ibGl0RnJhbWVidWZmZXIoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIG1hc2ssIDk3MjggKTsKCgkJCQl9IGVsc2UgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBXZWJHTDIuJyApOwoKCQkJCX0KCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSB7CgoJCQlyZXR1cm4gKCBpc1dlYkdMMiAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ICkgPwoJCQkJTWF0aC5taW4oIG1heFNhbXBsZXMsIHJlbmRlclRhcmdldC5zYW1wbGVzICkgOiAwOwoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZVZpZGVvVGV4dHVyZSggdGV4dHVyZSApIHsKCgkJCXZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lOwoKCQkJLy8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlCgoJCQlpZiAoIF92aWRlb1RleHR1cmVzLmdldCggdGV4dHVyZSApICE9PSBmcmFtZSApIHsKCgkJCQlfdmlkZW9UZXh0dXJlcy5zZXQoIHRleHR1cmUsIGZyYW1lICk7CgkJCQl0ZXh0dXJlLnVwZGF0ZSgpOwoKCQkJfQoKCQl9CgoJCS8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CgoJCXZhciB3YXJuZWRUZXh0dXJlMkQgPSBmYWxzZTsKCQl2YXIgd2FybmVkVGV4dHVyZUN1YmUgPSBmYWxzZTsKCgkJZnVuY3Rpb24gc2FmZVNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHsKCgkJCWlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7CgoJCQkJaWYgKCB3YXJuZWRUZXh0dXJlMkQgPT09IGZhbHNlICkgewoKCQkJCQljb25zb2xlLndhcm4oICJUSFJFRS5XZWJHTFRleHR1cmVzLnNhZmVTZXRUZXh0dXJlMkQ6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuIiApOwoJCQkJCXdhcm5lZFRleHR1cmUyRCA9IHRydWU7CgoJCQkJfQoKCQkJCXRleHR1cmUgPSB0ZXh0dXJlLnRleHR1cmU7CgoJCQl9CgoJCQlzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKTsKCgkJfQoKCQlmdW5jdGlvbiBzYWZlU2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7CgoJCQlpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApIHsKCgkJCQlpZiAoIHdhcm5lZFRleHR1cmVDdWJlID09PSBmYWxzZSApIHsKCgkJCQkJY29uc29sZS53YXJuKCAiVEhSRUUuV2ViR0xUZXh0dXJlcy5zYWZlU2V0VGV4dHVyZUN1YmU6IGRvbid0IHVzZSBjdWJlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC4iICk7CgkJCQkJd2FybmVkVGV4dHVyZUN1YmUgPSB0cnVlOwoKCQkJCX0KCgkJCQl0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlOwoKCQkJfQoKCQkJLy8gY3VycmVudGx5IHJlbHlpbmcgb24gdGhlIGZhY3QgdGhhdCBXZWJHTFJlbmRlclRhcmdldEN1YmUudGV4dHVyZSBpcyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlCgkJCS8vIFRPRE86IHVuaWZ5IHRoZXNlIGNvZGUgcGF0aHMKCQkJaWYgKCAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkgfHwKCQkJCSggQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICYmIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSA2ICkgKSB7CgoJCQkJLy8gQ29tcHJlc3NlZFRleHR1cmUgY2FuIGhhdmUgQXJyYXkgaW4gaW1hZ2UgOi8KCgkJCQkvLyB0aGlzIGZ1bmN0aW9uIGFsb25lIHNob3VsZCB0YWtlIGNhcmUgb2YgY3ViZSB0ZXh0dXJlcwoJCQkJc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKTsKCgkJCX0gZWxzZSB7CgoJCQkJLy8gYXNzdW1lZDogdGV4dHVyZSBwcm9wZXJ0eSBvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUKCQkJCXNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApOwoKCQkJfQoKCQl9CgoJCS8vCgoJCXRoaXMuYWxsb2NhdGVUZXh0dXJlVW5pdCA9IGFsbG9jYXRlVGV4dHVyZVVuaXQ7CgkJdGhpcy5yZXNldFRleHR1cmVVbml0cyA9IHJlc2V0VGV4dHVyZVVuaXRzOwoKCQl0aGlzLnNldFRleHR1cmUyRCA9IHNldFRleHR1cmUyRDsKCQl0aGlzLnNldFRleHR1cmUyREFycmF5ID0gc2V0VGV4dHVyZTJEQXJyYXk7CgkJdGhpcy5zZXRUZXh0dXJlM0QgPSBzZXRUZXh0dXJlM0Q7CgkJdGhpcy5zZXRUZXh0dXJlQ3ViZSA9IHNldFRleHR1cmVDdWJlOwoJCXRoaXMuc2V0VGV4dHVyZUN1YmVEeW5hbWljID0gc2V0VGV4dHVyZUN1YmVEeW5hbWljOwoJCXRoaXMuc2V0dXBSZW5kZXJUYXJnZXQgPSBzZXR1cFJlbmRlclRhcmdldDsKCQl0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCA9IHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcDsKCQl0aGlzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ID0gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQ7CgoJCXRoaXMuc2FmZVNldFRleHR1cmUyRCA9IHNhZmVTZXRUZXh0dXJlMkQ7CgkJdGhpcy5zYWZlU2V0VGV4dHVyZUN1YmUgPSBzYWZlU2V0VGV4dHVyZUN1YmU7CgoJfQoKCS8qKgoJICogQGF1dGhvciB0aGVzcGl0ZSAvIGh0dHA6Ly93d3cudHdpdHRlci5jb20vdGhlc3BpdGUKCSAqLwoKCWZ1bmN0aW9uIFdlYkdMVXRpbHMoIGdsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7CgoJCXZhciBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjsKCgkJZnVuY3Rpb24gY29udmVydCggcCApIHsKCgkJCXZhciBleHRlbnNpb247CgoJCQlpZiAoIHAgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSB7IHJldHVybiA1MTIxOyB9CgkJCWlmICggcCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlICkgeyByZXR1cm4gMzI4MTk7IH0KCQkJaWYgKCBwID09PSBVbnNpZ25lZFNob3J0NTU1MVR5cGUgKSB7IHJldHVybiAzMjgyMDsgfQoJCQlpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NjVUeXBlICkgeyByZXR1cm4gMzM2MzU7IH0KCgkJCWlmICggcCA9PT0gQnl0ZVR5cGUgKSB7IHJldHVybiA1MTIwOyB9CgkJCWlmICggcCA9PT0gU2hvcnRUeXBlICkgeyByZXR1cm4gNTEyMjsgfQoJCQlpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgeyByZXR1cm4gNTEyMzsgfQoJCQlpZiAoIHAgPT09IEludFR5cGUgKSB7IHJldHVybiA1MTI0OyB9CgkJCWlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgeyByZXR1cm4gNTEyNTsgfQoJCQlpZiAoIHAgPT09IEZsb2F0VHlwZSApIHsgcmV0dXJuIDUxMjY7IH0KCgkJCWlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHsKCgkJCQlpZiAoIGlzV2ViR0wyICkgeyByZXR1cm4gNTEzMTsgfQoKCQkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTsKCgkJCQlpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHsKCgkJCQkJcmV0dXJuIGV4dGVuc2lvbi5IQUxGX0ZMT0FUX09FUzsKCgkJCQl9IGVsc2UgewoKCQkJCQlyZXR1cm4gbnVsbDsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgeyByZXR1cm4gNjQwNjsgfQoJCQlpZiAoIHAgPT09IFJHQkZvcm1hdCApIHsgcmV0dXJuIDY0MDc7IH0KCQkJaWYgKCBwID09PSBSR0JBRm9ybWF0ICkgeyByZXR1cm4gNjQwODsgfQoJCQlpZiAoIHAgPT09IEx1bWluYW5jZUZvcm1hdCApIHsgcmV0dXJuIDY0MDk7IH0KCQkJaWYgKCBwID09PSBMdW1pbmFuY2VBbHBoYUZvcm1hdCApIHsgcmV0dXJuIDY0MTA7IH0KCQkJaWYgKCBwID09PSBEZXB0aEZvcm1hdCApIHsgcmV0dXJuIDY0MDI7IH0KCQkJaWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7IHJldHVybiAzNDA0MTsgfQoJCQlpZiAoIHAgPT09IFJlZEZvcm1hdCApIHsgcmV0dXJuIDY0MDM7IH0KCgkJCWlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0IHx8CgkJCQlwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgewoKCQkJCWV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7CgoJCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgoJCQkJCWlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDsgfQoJCQkJCWlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgeyByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUOyB9CgkJCQkJaWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7IH0KCQkJCQlpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDsgfQoKCQkJCX0gZWxzZSB7CgoJCQkJCXJldHVybiBudWxsOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHwKCQkJCXAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7CgoJCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7CgoJCQkJaWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7CgoJCQkJCWlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgKSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRzsgfQoJCQkJCWlmICggcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRzsgfQoJCQkJCWlmICggcCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ICkgeyByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HOyB9CgkJCQkJaWYgKCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUc7IH0KCgkJCQl9IGVsc2UgewoKCQkJCQlyZXR1cm4gbnVsbDsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCApIHsKCgkJCQlleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyApOwoKCQkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKCQkJCQlyZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7CgoJCQkJfSBlbHNlIHsKCgkJCQkJcmV0dXJuIG51bGw7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCB8fAoJCQkJcCA9PT0gUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4NV9Gb3JtYXQgfHwKCQkJCXAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCB8fAoJCQkJcCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0IHx8CgkJCQlwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSB7CgoJCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTsKCgkJCQlpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHsKCgkJCQkJLy8gVE9ETyBDb21wbGV0ZT8KCgkJCQkJcmV0dXJuIHA7CgoJCQkJfSBlbHNlIHsKCgkJCQkJcmV0dXJuIG51bGw7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCBwID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7CgoJCQkJaWYgKCBpc1dlYkdMMiApIHsgcmV0dXJuIDM0MDQyOyB9CgoJCQkJZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9kZXB0aF90ZXh0dXJlJyApOwoKCQkJCWlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgewoKCQkJCQlyZXR1cm4gZXh0ZW5zaW9uLlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXJldHVybiBudWxsOwoKCQkJCX0KCgkJCX0KCgkJfQoKCQlyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07CgoJfQoKCS8qKgoJICogQGF1dGhvciBmZXJuYW5kb2pzZyAvIGh0dHA6Ly9mZXJuYW5kb2pzZy5jb20KCSAqIEBhdXRob3IgVGFrYWhpcm8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveAoJICovCgoJZnVuY3Rpb24gV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIG51bVZpZXdzLCBvcHRpb25zICkgewoKCQlXZWJHTFJlbmRlclRhcmdldC5jYWxsKCB0aGlzLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7CgoJCXRoaXMuZGVwdGhCdWZmZXIgPSBmYWxzZTsKCQl0aGlzLnN0ZW5jaWxCdWZmZXIgPSBmYWxzZTsKCgkJdGhpcy5udW1WaWV3cyA9IG51bVZpZXdzOwoKCX0KCglXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQsCgoJCWlzV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQ6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCQl0aGlzLm51bVZpZXdzID0gc291cmNlLm51bVZpZXdzOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldE51bVZpZXdzOiBmdW5jdGlvbiAoIG51bVZpZXdzICkgewoKCQkJaWYgKCB0aGlzLm51bVZpZXdzICE9PSBudW1WaWV3cyApIHsKCgkJCQl0aGlzLm51bVZpZXdzID0gbnVtVmlld3M7CgkJCQl0aGlzLmRpc3Bvc2UoKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBmZXJuYW5kb2pzZyAvIGh0dHA6Ly9mZXJuYW5kb2pzZy5jb20KCSAqIEBhdXRob3IgVGFrYWhpcm8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveAoJICovCgoJZnVuY3Rpb24gV2ViR0xNdWx0aXZpZXcoIHJlbmRlcmVyLCBnbCApIHsKCgkJdmFyIERFRkFVTFRfTlVNVklFV1MgPSAyOwoKCQl2YXIgZXh0ZW5zaW9ucyA9IHJlbmRlcmVyLmV4dGVuc2lvbnM7CgkJdmFyIHByb3BlcnRpZXMgPSByZW5kZXJlci5wcm9wZXJ0aWVzOwoKCQl2YXIgcmVuZGVyVGFyZ2V0LCBjdXJyZW50UmVuZGVyVGFyZ2V0OwoJCXZhciBtYXQzLCBtYXQ0LCBjYW1lcmFBcnJheSwgcmVuZGVyU2l6ZTsKCgkJdmFyIGF2YWlsYWJsZTsKCQl2YXIgbWF4TnVtVmlld3MgPSAwOwoKCQkvLwoKCQlmdW5jdGlvbiBpc0F2YWlsYWJsZSgpIHsKCgkJCWlmICggYXZhaWxhYmxlID09PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnT1ZSX211bHRpdmlldzInICk7CgoJCQkJYXZhaWxhYmxlID0gZXh0ZW5zaW9uICE9PSBudWxsICYmIGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCkuYW50aWFsaWFzID09PSBmYWxzZTsKCgkJCQlpZiAoIGF2YWlsYWJsZSApIHsKCgkJCQkJbWF4TnVtVmlld3MgPSBnbC5nZXRQYXJhbWV0ZXIoIGV4dGVuc2lvbi5NQVhfVklFV1NfT1ZSICk7CgkJCQkJcmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMTXVsdGl2aWV3UmVuZGVyVGFyZ2V0KCAwLCAwLCBERUZBVUxUX05VTVZJRVdTICk7CgoJCQkJCXJlbmRlclNpemUgPSBuZXcgVmVjdG9yMigpOwoJCQkJCW1hdDQgPSBbXTsKCQkJCQltYXQzID0gW107CgkJCQkJY2FtZXJhQXJyYXkgPSBbXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbWF4TnVtVmlld3M7IGkgKysgKSB7CgoJCQkJCQltYXQ0WyBpIF0gPSBuZXcgTWF0cml4NCgpOwoJCQkJCQltYXQzWyBpIF0gPSBuZXcgTWF0cml4MygpOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIGF2YWlsYWJsZTsKCgkJfQoKCQlmdW5jdGlvbiBnZXRDYW1lcmFBcnJheSggY2FtZXJhICkgewoKCQkJaWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSApIHsgcmV0dXJuIGNhbWVyYS5jYW1lcmFzOyB9CgoJCQljYW1lcmFBcnJheVsgMCBdID0gY2FtZXJhOwoKCQkJcmV0dXJuIGNhbWVyYUFycmF5OwoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZUNhbWVyYVByb2plY3Rpb25NYXRyaWNlc1VuaWZvcm0oIGNhbWVyYSwgdW5pZm9ybXMgKSB7CgoJCQl2YXIgY2FtZXJhcyA9IGdldENhbWVyYUFycmF5KCBjYW1lcmEgKTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkgewoKCQkJCW1hdDRbIGkgXS5jb3B5KCBjYW1lcmFzWyBpIF0ucHJvamVjdGlvbk1hdHJpeCApOwoKCQkJfQoKCQkJdW5pZm9ybXMuc2V0VmFsdWUoIGdsLCAncHJvamVjdGlvbk1hdHJpY2VzJywgbWF0NCApOwoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZUNhbWVyYVZpZXdNYXRyaWNlc1VuaWZvcm0oIGNhbWVyYSwgdW5pZm9ybXMgKSB7CgoJCQl2YXIgY2FtZXJhcyA9IGdldENhbWVyYUFycmF5KCBjYW1lcmEgKTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkgewoKCQkJCW1hdDRbIGkgXS5jb3B5KCBjYW1lcmFzWyBpIF0ubWF0cml4V29ybGRJbnZlcnNlICk7CgoJCQl9CgoJCQl1bmlmb3Jtcy5zZXRWYWx1ZSggZ2wsICd2aWV3TWF0cmljZXMnLCBtYXQ0ICk7CgoJCX0KCgkJZnVuY3Rpb24gdXBkYXRlT2JqZWN0TWF0cmljZXNVbmlmb3Jtcyggb2JqZWN0LCBjYW1lcmEsIHVuaWZvcm1zICkgewoKCQkJdmFyIGNhbWVyYXMgPSBnZXRDYW1lcmFBcnJheSggY2FtZXJhICk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSArKyApIHsKCgkJCQltYXQ0WyBpIF0ubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhc1sgaSBdLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgkJCQltYXQzWyBpIF0uZ2V0Tm9ybWFsTWF0cml4KCBtYXQ0WyBpIF0gKTsKCgkJCX0KCgkJCXVuaWZvcm1zLnNldFZhbHVlKCBnbCwgJ21vZGVsVmlld01hdHJpY2VzJywgbWF0NCApOwoJCQl1bmlmb3Jtcy5zZXRWYWx1ZSggZ2wsICdub3JtYWxNYXRyaWNlcycsIG1hdDMgKTsKCgkJfQoKCQlmdW5jdGlvbiBpc011bHRpdmlld0NvbXBhdGlibGUoIGNhbWVyYSApIHsKCgkJCWlmICggY2FtZXJhLmlzQXJyYXlDYW1lcmEgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuIHRydWU7IH0KCgkJCXZhciBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7CgoJCQlpZiAoIGNhbWVyYXMubGVuZ3RoID4gbWF4TnVtVmlld3MgKSB7IHJldHVybiBmYWxzZTsgfQoKCQkJZm9yICggdmFyIGkgPSAxLCBpbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJaWYgKCBjYW1lcmFzWyAwIF0udmlld3BvcnQueiAhPT0gY2FtZXJhc1sgaSBdLnZpZXdwb3J0LnogfHwKCQkJCQljYW1lcmFzWyAwIF0udmlld3BvcnQudyAhPT0gY2FtZXJhc1sgaSBdLnZpZXdwb3J0LncgKSB7IHJldHVybiBmYWxzZTsgfQoKCQkJfQoKCQkJcmV0dXJuIHRydWU7CgoJCX0KCgkJZnVuY3Rpb24gcmVzaXplUmVuZGVyVGFyZ2V0KCBjYW1lcmEgKSB7CgoJCQlpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKSB7CgoJCQkJcmVuZGVyU2l6ZS5zZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQud2lkdGgsIGN1cnJlbnRSZW5kZXJUYXJnZXQuaGVpZ2h0ICk7CgoJCQl9IGVsc2UgewoKCQkJCXJlbmRlcmVyLmdldERyYXdpbmdCdWZmZXJTaXplKCByZW5kZXJTaXplICk7CgoJCQl9CgoJCQlpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkgewoKCQkJCXZhciB2aWV3cG9ydCA9IGNhbWVyYS5jYW1lcmFzWyAwIF0udmlld3BvcnQ7CgoJCQkJcmVuZGVyVGFyZ2V0LnNldFNpemUoIHZpZXdwb3J0LnosIHZpZXdwb3J0LncgKTsKCQkJCXJlbmRlclRhcmdldC5zZXROdW1WaWV3cyggY2FtZXJhLmNhbWVyYXMubGVuZ3RoICk7CgoJCQl9IGVsc2UgewoKCQkJCXJlbmRlclRhcmdldC5zZXRTaXplKCByZW5kZXJTaXplLngsIHJlbmRlclNpemUueSApOwoJCQkJcmVuZGVyVGFyZ2V0LnNldE51bVZpZXdzKCBERUZBVUxUX05VTVZJRVdTICk7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gYXR0YWNoQ2FtZXJhKCBjYW1lcmEgKSB7CgoJCQlpZiAoIGlzTXVsdGl2aWV3Q29tcGF0aWJsZSggY2FtZXJhICkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCWN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTsKCQkJcmVzaXplUmVuZGVyVGFyZ2V0KCBjYW1lcmEgKTsKCQkJcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTsKCgkJfQoKCQlmdW5jdGlvbiBkZXRhY2hDYW1lcmEoIGNhbWVyYSApIHsKCgkJCWlmICggcmVuZGVyVGFyZ2V0ICE9PSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSApIHsgcmV0dXJuOyB9CgoJCQlyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTsKCgkJCWZsdXNoKCBjYW1lcmEgKTsKCgkJfQoKCQlmdW5jdGlvbiBmbHVzaCggY2FtZXJhICkgewoKCQkJdmFyIHNyY1JlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDsKCQkJdmFyIG51bVZpZXdzID0gc3JjUmVuZGVyVGFyZ2V0Lm51bVZpZXdzOwoKCQkJdmFyIHNyY0ZyYW1lYnVmZmVycyA9IHByb3BlcnRpZXMuZ2V0KCBzcmNSZW5kZXJUYXJnZXQgKS5fX3dlYmdsVmlld0ZyYW1lYnVmZmVyczsKCgkJCXZhciB2aWV3V2lkdGggPSBzcmNSZW5kZXJUYXJnZXQud2lkdGg7CgkJCXZhciB2aWV3SGVpZ2h0ID0gc3JjUmVuZGVyVGFyZ2V0LmhlaWdodDsKCgkJCWlmICggY2FtZXJhLmlzQXJyYXlDYW1lcmEgKSB7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbnVtVmlld3M7IGkgKysgKSB7CgoJCQkJCXZhciB2aWV3cG9ydCA9IGNhbWVyYS5jYW1lcmFzWyBpIF0udmlld3BvcnQ7CgoJCQkJCXZhciB4MSA9IHZpZXdwb3J0Lng7CgkJCQkJdmFyIHkxID0gdmlld3BvcnQueTsKCQkJCQl2YXIgeDIgPSB4MSArIHZpZXdwb3J0Lno7CgkJCQkJdmFyIHkyID0geTEgKyB2aWV3cG9ydC53OwoKCQkJCQlnbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCBzcmNGcmFtZWJ1ZmZlcnNbIGkgXSApOwoJCQkJCWdsLmJsaXRGcmFtZWJ1ZmZlciggMCwgMCwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0LCB4MSwgeTEsIHgyLCB5MiwgMTYzODQsIDk3MjggKTsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCWdsLmJpbmRGcmFtZWJ1ZmZlciggMzYwMDgsIHNyY0ZyYW1lYnVmZmVyc1sgMCBdICk7CgkJCQlnbC5ibGl0RnJhbWVidWZmZXIoIDAsIDAsIHZpZXdXaWR0aCwgdmlld0hlaWdodCwgMCwgMCwgcmVuZGVyU2l6ZS54LCByZW5kZXJTaXplLnksIDE2Mzg0LCA5NzI4ICk7CgoJCQl9CgoJCX0KCgkJdGhpcy5pc0F2YWlsYWJsZSA9IGlzQXZhaWxhYmxlOwoJCXRoaXMuYXR0YWNoQ2FtZXJhID0gYXR0YWNoQ2FtZXJhOwoJCXRoaXMuZGV0YWNoQ2FtZXJhID0gZGV0YWNoQ2FtZXJhOwoJCXRoaXMudXBkYXRlQ2FtZXJhUHJvamVjdGlvbk1hdHJpY2VzVW5pZm9ybSA9IHVwZGF0ZUNhbWVyYVByb2plY3Rpb25NYXRyaWNlc1VuaWZvcm07CgkJdGhpcy51cGRhdGVDYW1lcmFWaWV3TWF0cmljZXNVbmlmb3JtID0gdXBkYXRlQ2FtZXJhVmlld01hdHJpY2VzVW5pZm9ybTsKCQl0aGlzLnVwZGF0ZU9iamVjdE1hdHJpY2VzVW5pZm9ybXMgPSB1cGRhdGVPYmplY3RNYXRyaWNlc1VuaWZvcm1zOwoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBHcm91cCgpIHsKCgkJT2JqZWN0M0QuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnR3JvdXAnOwoKCX0KCglHcm91cC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogR3JvdXAsCgoJCWlzR3JvdXA6IHRydWUKCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gQXJyYXlDYW1lcmEoIGFycmF5ICkgewoKCQlQZXJzcGVjdGl2ZUNhbWVyYS5jYWxsKCB0aGlzICk7CgoJCXRoaXMuY2FtZXJhcyA9IGFycmF5IHx8IFtdOwoKCX0KCglBcnJheUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQXJyYXlDYW1lcmEsCgoJCWlzQXJyYXlDYW1lcmE6IHRydWUKCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGpzYW50ZWxsIC8gaHR0cHM6Ly93d3cuanNhbnRlbGwuY29tLwoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCXZhciBjYW1lcmFMUG9zID0gbmV3IFZlY3RvcjMoKTsKCXZhciBjYW1lcmFSUG9zID0gbmV3IFZlY3RvcjMoKTsKCgkvKioKCSAqIEFzc3VtZXMgMiBjYW1lcmFzIHRoYXQgYXJlIHBhcmFsbGVsIGFuZCBzaGFyZSBhbiBYLWF4aXMsIGFuZCB0aGF0CgkgKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LgoJICogQW5kIHRoYXQgbmVhciBhbmQgZmFyIHBsYW5lcyBhcmUgaWRlbnRpY2FsIGZvciBib3RoIGNhbWVyYXMuCgkgKiBWaXN1YWxpemF0aW9uIG9mIHRoaXMgdGVjaG5pcXVlOiBodHRwczovL2NvbXB1dGVyZ3JhcGhpY3Muc3RhY2tleGNoYW5nZS5jb20vYS80NzY1CgkgKi8KCWZ1bmN0aW9uIHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYSwgY2FtZXJhTCwgY2FtZXJhUiApIHsKCgkJY2FtZXJhTFBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYUwubWF0cml4V29ybGQgKTsKCQljYW1lcmFSUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhUi5tYXRyaXhXb3JsZCApOwoKCQl2YXIgaXBkID0gY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBjYW1lcmFSUG9zICk7CgoJCXZhciBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50czsKCQl2YXIgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7CgoJCS8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmQKCQkvLyBtb3N0IGxpa2VseSBpZGVudGljYWwgdG9wIGFuZCBib3R0b20gZnJ1c3R1bSBleHRlbnRzLgoJCS8vIFVzZSB0aGUgbGVmdCBjYW1lcmEgZm9yIHRoZXNlIHZhbHVlcy4KCQl2YXIgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTsKCQl2YXIgZmFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdICsgMSApOwoJCXZhciB0b3BGb3YgPSAoIHByb2pMWyA5IF0gKyAxICkgLyBwcm9qTFsgNSBdOwoJCXZhciBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdOwoKCQl2YXIgbGVmdEZvdiA9ICggcHJvakxbIDggXSAtIDEgKSAvIHByb2pMWyAwIF07CgkJdmFyIHJpZ2h0Rm92ID0gKCBwcm9qUlsgOCBdICsgMSApIC8gcHJvalJbIDAgXTsKCQl2YXIgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92OwoJCXZhciByaWdodCA9IG5lYXIgKiByaWdodEZvdjsKCgkJLy8gQ2FsY3VsYXRlIHRoZSBuZXcgY2FtZXJhJ3MgcG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlCgkJLy8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC4KCQl2YXIgek9mZnNldCA9IGlwZCAvICggLSBsZWZ0Rm92ICsgcmlnaHRGb3YgKTsKCQl2YXIgeE9mZnNldCA9IHpPZmZzZXQgKiAtIGxlZnRGb3Y7CgoJCS8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/CgkJY2FtZXJhTC5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApOwoJCWNhbWVyYS50cmFuc2xhdGVYKCB4T2Zmc2V0ICk7CgkJY2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTsKCQljYW1lcmEubWF0cml4V29ybGQuY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7CgkJY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKTsKCgkJLy8gRmluZCB0aGUgdW5pb24gb2YgdGhlIGZydXN0dW0gdmFsdWVzIG9mIHRoZSBjYW1lcmFzIGFuZCBzY2FsZQoJCS8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSwKCQkvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS4KCQl2YXIgbmVhcjIgPSBuZWFyICsgek9mZnNldDsKCQl2YXIgZmFyMiA9IGZhciArIHpPZmZzZXQ7CgkJdmFyIGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7CgkJdmFyIHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7CgkJdmFyIHRvcDIgPSB0b3BGb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7CgkJdmFyIGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7CgoJCWNhbWVyYS5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdDIsIHJpZ2h0MiwgdG9wMiwgYm90dG9tMiwgbmVhcjIsIGZhcjIgKTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gV2ViVlJNYW5hZ2VyKCByZW5kZXJlciApIHsKCgkJdmFyIHJlbmRlcldpZHRoLCByZW5kZXJIZWlnaHQ7CgkJdmFyIHNjb3BlID0gdGhpczsKCgkJdmFyIGRldmljZSA9IG51bGw7CgkJdmFyIGZyYW1lRGF0YSA9IG51bGw7CgoJCXZhciBwb3NlVGFyZ2V0ID0gbnVsbDsKCgkJdmFyIGNvbnRyb2xsZXJzID0gW107CgkJdmFyIHN0YW5kaW5nTWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCQl2YXIgc3RhbmRpbmdNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTsKCgkJdmFyIGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7CgoJCXZhciByZWZlcmVuY2VTcGFjZVR5cGUgPSAnbG9jYWwtZmxvb3InOwoKCQlpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdWUkZyYW1lRGF0YScgaW4gd2luZG93ICkgewoKCQkJZnJhbWVEYXRhID0gbmV3IHdpbmRvdy5WUkZyYW1lRGF0YSgpOwoJCQl3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UsIGZhbHNlICk7CgoJCX0KCgkJdmFyIG1hdHJpeFdvcmxkSW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7CgkJdmFyIHRlbXBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTsKCQl2YXIgdGVtcFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTsKCgkJdmFyIGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTsKCQljYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTsKCQljYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTsKCgkJdmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTsKCQljYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTsKCQljYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTsKCgkJdmFyIGNhbWVyYVZSID0gbmV3IEFycmF5Q2FtZXJhKCBbIGNhbWVyYUwsIGNhbWVyYVIgXSApOwoJCWNhbWVyYVZSLmxheWVycy5lbmFibGUoIDEgKTsKCQljYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAyICk7CgoJCS8vCgoJCWZ1bmN0aW9uIGlzUHJlc2VudGluZygpIHsKCgkJCXJldHVybiBkZXZpY2UgIT09IG51bGwgJiYgZGV2aWNlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZTsKCgkJfQoKCQl2YXIgY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpLCBjdXJyZW50UGl4ZWxSYXRpbzsKCgkJZnVuY3Rpb24gb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlKCkgewoKCQkJaWYgKCBpc1ByZXNlbnRpbmcoKSApIHsKCgkJCQl2YXIgZXllUGFyYW1ldGVycyA9IGRldmljZS5nZXRFeWVQYXJhbWV0ZXJzKCAnbGVmdCcgKTsKCQkJCXJlbmRlcldpZHRoID0gMiAqIGV5ZVBhcmFtZXRlcnMucmVuZGVyV2lkdGggKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOwoJCQkJcmVuZGVySGVpZ2h0ID0gZXllUGFyYW1ldGVycy5yZW5kZXJIZWlnaHQgKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOwoKCQkJCWN1cnJlbnRQaXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpOwoJCQkJcmVuZGVyZXIuZ2V0U2l6ZSggY3VycmVudFNpemUgKTsKCgkJCQlyZW5kZXJlci5zZXREcmF3aW5nQnVmZmVyU2l6ZSggcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCwgMSApOwoKCQkJCWNhbWVyYUwudmlld3BvcnQuc2V0KCAwLCAwLCByZW5kZXJXaWR0aCAvIDIsIHJlbmRlckhlaWdodCApOwoJCQkJY2FtZXJhUi52aWV3cG9ydC5zZXQoIHJlbmRlcldpZHRoIC8gMiwgMCwgcmVuZGVyV2lkdGggLyAyLCByZW5kZXJIZWlnaHQgKTsKCgkJCQlhbmltYXRpb24uc3RhcnQoKTsKCgkJCQlzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uc3RhcnQnIH0gKTsKCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBzY29wZS5lbmFibGVkICkgewoKCQkJCQlyZW5kZXJlci5zZXREcmF3aW5nQnVmZmVyU2l6ZSggY3VycmVudFNpemUud2lkdGgsIGN1cnJlbnRTaXplLmhlaWdodCwgY3VycmVudFBpeGVsUmF0aW8gKTsKCgkJCQl9CgoJCQkJYW5pbWF0aW9uLnN0b3AoKTsKCgkJCQlzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7CgoJCQl9CgoJCX0KCgkJLy8KCgkJdmFyIHRyaWdnZXJzID0gW107CgkJdmFyIGdyaXBzID0gW107CgoJCWZ1bmN0aW9uIGZpbmRHYW1lcGFkKCBpZCApIHsKCgkJCXZhciBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcyAmJiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGdhbWVwYWRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGdhbWVwYWQgPSBnYW1lcGFkc1sgaSBdOwoKCQkJCWlmICggZ2FtZXBhZCAmJiAoIGdhbWVwYWQuaWQgPT09ICdEYXlkcmVhbSBDb250cm9sbGVyJyB8fAoJCQkJCWdhbWVwYWQuaWQgPT09ICdHZWFyIFZSIENvbnRyb2xsZXInIHx8IGdhbWVwYWQuaWQgPT09ICdPY3VsdXMgR28gQ29udHJvbGxlcicgfHwKCQkJCQlnYW1lcGFkLmlkID09PSAnT3BlblZSIEdhbWVwYWQnIHx8IGdhbWVwYWQuaWQuc3RhcnRzV2l0aCggJ09jdWx1cyBUb3VjaCcgKSB8fAoJCQkJCWdhbWVwYWQuaWQuc3RhcnRzV2l0aCggJ0hUQyBWaXZlIEZvY3VzJyApIHx8CgkJCQkJZ2FtZXBhZC5pZC5zdGFydHNXaXRoKCAnU3BhdGlhbCBDb250cm9sbGVyJyApICkgKSB7CgoJCQkJCXZhciBoYW5kID0gZ2FtZXBhZC5oYW5kOwoKCQkJCQlpZiAoIGlkID09PSAwICYmICggaGFuZCA9PT0gJycgfHwgaGFuZCA9PT0gJ3JpZ2h0JyApICkgeyByZXR1cm4gZ2FtZXBhZDsgfQoJCQkJCWlmICggaWQgPT09IDEgJiYgKCBoYW5kID09PSAnbGVmdCcgKSApIHsgcmV0dXJuIGdhbWVwYWQ7IH0KCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gdXBkYXRlQ29udHJvbGxlcnMoKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJdmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdOwoKCQkJCXZhciBnYW1lcGFkID0gZmluZEdhbWVwYWQoIGkgKTsKCgkJCQlpZiAoIGdhbWVwYWQgIT09IHVuZGVmaW5lZCAmJiBnYW1lcGFkLnBvc2UgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJaWYgKCBnYW1lcGFkLnBvc2UgPT09IG51bGwgKSB7IHJldHVybjsgfQoKCQkJCQkvLyBQb3NlCgoJCQkJCXZhciBwb3NlID0gZ2FtZXBhZC5wb3NlOwoKCQkJCQlpZiAoIHBvc2UuaGFzUG9zaXRpb24gPT09IGZhbHNlICkgeyBjb250cm9sbGVyLnBvc2l0aW9uLnNldCggMC4yLCAtIDAuNiwgLSAwLjA1ICk7IH0KCgkJCQkJaWYgKCBwb3NlLnBvc2l0aW9uICE9PSBudWxsICkgeyBjb250cm9sbGVyLnBvc2l0aW9uLmZyb21BcnJheSggcG9zZS5wb3NpdGlvbiApOyB9CgkJCQkJaWYgKCBwb3NlLm9yaWVudGF0aW9uICE9PSBudWxsICkgeyBjb250cm9sbGVyLnF1YXRlcm5pb24uZnJvbUFycmF5KCBwb3NlLm9yaWVudGF0aW9uICk7IH0KCQkJCQljb250cm9sbGVyLm1hdHJpeC5jb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnF1YXRlcm5pb24sIGNvbnRyb2xsZXIuc2NhbGUgKTsKCQkJCQljb250cm9sbGVyLm1hdHJpeC5wcmVtdWx0aXBseSggc3RhbmRpbmdNYXRyaXggKTsKCQkJCQljb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIucG9zaXRpb24sIGNvbnRyb2xsZXIucXVhdGVybmlvbiwgY29udHJvbGxlci5zY2FsZSApOwoJCQkJCWNvbnRyb2xsZXIubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7CgkJCQkJY29udHJvbGxlci52aXNpYmxlID0gdHJ1ZTsKCgkJCQkJLy8gVHJpZ2dlcgoKCQkJCQl2YXIgYnV0dG9uSWQgPSBnYW1lcGFkLmlkID09PSAnRGF5ZHJlYW0gQ29udHJvbGxlcicgPyAwIDogMTsKCgkJCQkJaWYgKCB0cmlnZ2Vyc1sgaSBdID09PSB1bmRlZmluZWQgKSB7IHRyaWdnZXJzWyBpIF0gPSBmYWxzZTsgfQoKCQkJCQlpZiAoIHRyaWdnZXJzWyBpIF0gIT09IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkICkgewoKCQkJCQkJdHJpZ2dlcnNbIGkgXSA9IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkOwoKCQkJCQkJaWYgKCB0cmlnZ2Vyc1sgaSBdID09PSB0cnVlICkgewoKCQkJCQkJCWNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2VsZWN0c3RhcnQnIH0gKTsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJY29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3RlbmQnIH0gKTsKCQkJCQkJCWNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2VsZWN0JyB9ICk7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJLy8gR3JpcAoJCQkJCWJ1dHRvbklkID0gMjsKCgkJCQkJaWYgKCBncmlwc1sgaSBdID09PSB1bmRlZmluZWQgKSB7IGdyaXBzWyBpIF0gPSBmYWxzZTsgfQoKCQkJCQkvLyBTa2lwIGlmIHRoZSBncmlwIGJ1dHRvbiBkb2Vzbid0IGV4aXN0IG9uIHRoaXMgY29udHJvbGxlcgoJCQkJCWlmICggZ2FtZXBhZC5idXR0b25zWyBidXR0b25JZCBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQlpZiAoIGdyaXBzWyBpIF0gIT09IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkICkgewoKCQkJCQkJCWdyaXBzWyBpIF0gPSBnYW1lcGFkLmJ1dHRvbnNbIGJ1dHRvbklkIF0ucHJlc3NlZDsKCgkJCQkJCQlpZiAoIGdyaXBzWyBpIF0gPT09IHRydWUgKSB7CgoJCQkJCQkJCWNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc3F1ZWV6ZXN0YXJ0JyB9ICk7CgoJCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkJY29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzcXVlZXplZW5kJyB9ICk7CgkJCQkJCQkJY29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzcXVlZXplJyB9ICk7CgoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCgkJCQkJY29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHVwZGF0ZVZpZXdwb3J0RnJvbUJvdW5kcyggdmlld3BvcnQsIGJvdW5kcyApIHsKCgkJCWlmICggYm91bmRzICE9PSBudWxsICYmIGJvdW5kcy5sZW5ndGggPT09IDQgKSB7CgoJCQkJdmlld3BvcnQuc2V0KCBib3VuZHNbIDAgXSAqIHJlbmRlcldpZHRoLCBib3VuZHNbIDEgXSAqIHJlbmRlckhlaWdodCwgYm91bmRzWyAyIF0gKiByZW5kZXJXaWR0aCwgYm91bmRzWyAzIF0gKiByZW5kZXJIZWlnaHQgKTsKCgkJCX0KCgkJfQoKCQkvLwoKCQl0aGlzLmVuYWJsZWQgPSBmYWxzZTsKCgkJdGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpZCApIHsKCgkJCXZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGlkIF07CgoJCQlpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb250cm9sbGVyID0gbmV3IEdyb3VwKCk7CgkJCQljb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKCQkJCWNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlOwoKCQkJCWNvbnRyb2xsZXJzWyBpZCBdID0gY29udHJvbGxlcjsKCgkJCX0KCgkJCXJldHVybiBjb250cm9sbGVyOwoKCQl9OwoKCQl0aGlzLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBkZXZpY2U7CgoJCX07CgoJCXRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsgZGV2aWNlID0gdmFsdWU7IH0KCgkJCWFuaW1hdGlvbi5zZXRDb250ZXh0KCB2YWx1ZSApOwoKCQl9OwoKCQl0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlOwoKCQl9OwoKCQl0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlyZWZlcmVuY2VTcGFjZVR5cGUgPSB2YWx1ZTsKCgkJfTsKCgkJdGhpcy5zZXRQb3NlVGFyZ2V0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCQlpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkgeyBwb3NlVGFyZ2V0ID0gb2JqZWN0OyB9CgoJCX07CgoJCXRoaXMuZ2V0Q2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7CgoJCQl2YXIgdXNlckhlaWdodCA9IHJlZmVyZW5jZVNwYWNlVHlwZSA9PT0gJ2xvY2FsLWZsb29yJyA/IDEuNiA6IDA7CgoJCQlkZXZpY2UuZGVwdGhOZWFyID0gY2FtZXJhLm5lYXI7CgkJCWRldmljZS5kZXB0aEZhciA9IGNhbWVyYS5mYXI7CgoJCQlkZXZpY2UuZ2V0RnJhbWVEYXRhKCBmcmFtZURhdGEgKTsKCgkJCS8vCgoJCQlpZiAoIHJlZmVyZW5jZVNwYWNlVHlwZSA9PT0gJ2xvY2FsLWZsb29yJyApIHsKCgkJCQl2YXIgc3RhZ2VQYXJhbWV0ZXJzID0gZGV2aWNlLnN0YWdlUGFyYW1ldGVyczsKCgkJCQlpZiAoIHN0YWdlUGFyYW1ldGVycyApIHsKCgkJCQkJc3RhbmRpbmdNYXRyaXguZnJvbUFycmF5KCBzdGFnZVBhcmFtZXRlcnMuc2l0dGluZ1RvU3RhbmRpbmdUcmFuc2Zvcm0gKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlzdGFuZGluZ01hdHJpeC5tYWtlVHJhbnNsYXRpb24oIDAsIHVzZXJIZWlnaHQsIDAgKTsKCgkJCQl9CgoJCQl9CgoKCQkJdmFyIHBvc2UgPSBmcmFtZURhdGEucG9zZTsKCQkJdmFyIHBvc2VPYmplY3QgPSBwb3NlVGFyZ2V0ICE9PSBudWxsID8gcG9zZVRhcmdldCA6IGNhbWVyYTsKCgkJCS8vIFdlIHdhbnQgdG8gbWFuaXB1bGF0ZSBwb3NlT2JqZWN0IGJ5IGl0cyBwb3NpdGlvbiBhbmQgcXVhdGVybmlvbiBjb21wb25lbnRzIHNpbmNlIHVzZXJzIG1heSByZWx5IG9uIHRoZW0uCgkJCXBvc2VPYmplY3QubWF0cml4LmNvcHkoIHN0YW5kaW5nTWF0cml4ICk7CgkJCXBvc2VPYmplY3QubWF0cml4LmRlY29tcG9zZSggcG9zZU9iamVjdC5wb3NpdGlvbiwgcG9zZU9iamVjdC5xdWF0ZXJuaW9uLCBwb3NlT2JqZWN0LnNjYWxlICk7CgoJCQlpZiAoIHBvc2Uub3JpZW50YXRpb24gIT09IG51bGwgKSB7CgoJCQkJdGVtcFF1YXRlcm5pb24uZnJvbUFycmF5KCBwb3NlLm9yaWVudGF0aW9uICk7CgkJCQlwb3NlT2JqZWN0LnF1YXRlcm5pb24ubXVsdGlwbHkoIHRlbXBRdWF0ZXJuaW9uICk7CgoJCQl9CgoJCQlpZiAoIHBvc2UucG9zaXRpb24gIT09IG51bGwgKSB7CgoJCQkJdGVtcFF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBzdGFuZGluZ01hdHJpeCApOwoJCQkJdGVtcFBvc2l0aW9uLmZyb21BcnJheSggcG9zZS5wb3NpdGlvbiApOwoJCQkJdGVtcFBvc2l0aW9uLmFwcGx5UXVhdGVybmlvbiggdGVtcFF1YXRlcm5pb24gKTsKCQkJCXBvc2VPYmplY3QucG9zaXRpb24uYWRkKCB0ZW1wUG9zaXRpb24gKTsKCgkJCX0KCgkJCXBvc2VPYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTsKCgkJCXZhciBjaGlsZHJlbiA9IHBvc2VPYmplY3QuY2hpbGRyZW47CgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJY2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApOwoKCQkJfQoKCQkJLy8KCgkJCWNhbWVyYUwubmVhciA9IGNhbWVyYS5uZWFyOwoJCQljYW1lcmFSLm5lYXIgPSBjYW1lcmEubmVhcjsKCgkJCWNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjsKCQkJY2FtZXJhUi5mYXIgPSBjYW1lcmEuZmFyOwoKCQkJY2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFZpZXdNYXRyaXggKTsKCQkJY2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KCBmcmFtZURhdGEucmlnaHRWaWV3TWF0cml4ICk7CgoJCQkvLyBUT0RPIChtcmRvb2IpIERvdWJsZSBjaGVjayB0aGlzIGNvZGUKCgkJCXN0YW5kaW5nTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCBzdGFuZGluZ01hdHJpeCApOwoKCQkJaWYgKCByZWZlcmVuY2VTcGFjZVR5cGUgPT09ICdsb2NhbC1mbG9vcicgKSB7CgoJCQkJY2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIHN0YW5kaW5nTWF0cml4SW52ZXJzZSApOwoJCQkJY2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoIHN0YW5kaW5nTWF0cml4SW52ZXJzZSApOwoKCQkJfQoKCQkJdmFyIHBhcmVudCA9IHBvc2VPYmplY3QucGFyZW50OwoKCQkJaWYgKCBwYXJlbnQgIT09IG51bGwgKSB7CgoJCQkJbWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIHBhcmVudC5tYXRyaXhXb3JsZCApOwoKCQkJCWNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBtYXRyaXhXb3JsZEludmVyc2UgKTsKCQkJCWNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBtYXRyaXhXb3JsZEludmVyc2UgKTsKCgkJCX0KCgkJCS8vIGVudk1hcCBhbmQgTWlycm9yIG5lZWRzIGNhbWVyYS5tYXRyaXhXb3JsZAoKCQkJY2FtZXJhTC5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCBjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZSApOwoJCQljYW1lcmFSLm1hdHJpeFdvcmxkLmdldEludmVyc2UoIGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlICk7CgoJCQljYW1lcmFMLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXggKTsKCQkJY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggZnJhbWVEYXRhLnJpZ2h0UHJvamVjdGlvbk1hdHJpeCApOwoKCQkJc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhVlIsIGNhbWVyYUwsIGNhbWVyYVIgKTsKCgkJCS8vCgoJCQl2YXIgbGF5ZXJzID0gZGV2aWNlLmdldExheWVycygpOwoKCQkJaWYgKCBsYXllcnMubGVuZ3RoICkgewoKCQkJCXZhciBsYXllciA9IGxheWVyc1sgMCBdOwoKCQkJCXVwZGF0ZVZpZXdwb3J0RnJvbUJvdW5kcyggY2FtZXJhTC52aWV3cG9ydCwgbGF5ZXIubGVmdEJvdW5kcyApOwoJCQkJdXBkYXRlVmlld3BvcnRGcm9tQm91bmRzKCBjYW1lcmFSLnZpZXdwb3J0LCBsYXllci5yaWdodEJvdW5kcyApOwoKCQkJfQoKCQkJdXBkYXRlQ29udHJvbGxlcnMoKTsKCgkJCXJldHVybiBjYW1lcmFWUjsKCgkJfTsKCgkJdGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBzdGFuZGluZ01hdHJpeDsKCgkJfTsKCgkJdGhpcy5pc1ByZXNlbnRpbmcgPSBpc1ByZXNlbnRpbmc7CgoJCS8vIEFuaW1hdGlvbiBMb29wCgoJCXZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTsKCgkJdGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHsKCgkJCWFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApOwoKCQkJaWYgKCBpc1ByZXNlbnRpbmcoKSApIHsgYW5pbWF0aW9uLnN0YXJ0KCk7IH0KCgkJfTsKCgkJdGhpcy5zdWJtaXRGcmFtZSA9IGZ1bmN0aW9uICgpIHsKCgkJCWlmICggaXNQcmVzZW50aW5nKCkgKSB7IGRldmljZS5zdWJtaXRGcmFtZSgpOyB9CgoJCX07CgoJCXRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHsKCgkJCWlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSB7CgoJCQkJd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlICk7CgoJCQl9CgoJCX07CgoJCS8vIERFUFJFQ0FURUQKCgkJdGhpcy5zZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSA9IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYlZSTWFuYWdlcjogc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkLicgKTsKCgkJfTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFdlYlhSTWFuYWdlciggcmVuZGVyZXIsIGdsICkgewoKCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQl2YXIgc2Vzc2lvbiA9IG51bGw7CgoJCS8vIHZhciBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wOwoKCQl2YXIgcmVmZXJlbmNlU3BhY2UgPSBudWxsOwoJCXZhciByZWZlcmVuY2VTcGFjZVR5cGUgPSAnbG9jYWwtZmxvb3InOwoKCQl2YXIgcG9zZSA9IG51bGw7CgkJdmFyIHBvc2VUYXJnZXQgPSBudWxsOwoKCQl2YXIgY29udHJvbGxlcnMgPSBbXTsKCQl2YXIgc29ydGVkSW5wdXRTb3VyY2VzID0gW107CgoJCWZ1bmN0aW9uIGlzUHJlc2VudGluZygpIHsKCgkJCXJldHVybiBzZXNzaW9uICE9PSBudWxsICYmIHJlZmVyZW5jZVNwYWNlICE9PSBudWxsOwoKCQl9CgoJCS8vCgoJCXZhciBjYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7CgkJY2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7CgkJY2FtZXJhTC52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7CgoJCXZhciBjYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7CgkJY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7CgkJY2FtZXJhUi52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7CgoJCXZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYSggWyBjYW1lcmFMLCBjYW1lcmFSIF0gKTsKCQljYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAxICk7CgkJY2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMiApOwoKCQl2YXIgX2N1cnJlbnREZXB0aE5lYXIgPSBudWxsOwoJCXZhciBfY3VycmVudERlcHRoRmFyID0gbnVsbDsKCgkJLy8KCgkJdGhpcy5lbmFibGVkID0gZmFsc2U7CgoJCXRoaXMuZ2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uICggaWQgKSB7CgoJCQl2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpZCBdOwoKCQkJaWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29udHJvbGxlciA9IG5ldyBHcm91cCgpOwoJCQkJY29udHJvbGxlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgkJCQljb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTsKCgkJCQljb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7CgoJCQl9CgoJCQlyZXR1cm4gY29udHJvbGxlcjsKCgkJfTsKCgkJLy8KCgkJZnVuY3Rpb24gb25TZXNzaW9uRXZlbnQoIGV2ZW50ICkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkgewoKCQkJCWlmICggc29ydGVkSW5wdXRTb3VyY2VzWyBpIF0gPT09IGV2ZW50LmlucHV0U291cmNlICkgewoKCQkJCQljb250cm9sbGVyc1sgaSBdLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogZXZlbnQudHlwZSB9ICk7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHsKCgkJCXJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBudWxsICk7CgkJCXJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCkgKTsgLy8gSGFjayAjMTU4MzAKCQkJYW5pbWF0aW9uLnN0b3AoKTsKCgkJCXNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25lbmQnIH0gKTsKCgkJfQoKCQlmdW5jdGlvbiBvblJlcXVlc3RSZWZlcmVuY2VTcGFjZSggdmFsdWUgKSB7CgoJCQlyZWZlcmVuY2VTcGFjZSA9IHZhbHVlOwoKCQkJYW5pbWF0aW9uLnNldENvbnRleHQoIHNlc3Npb24gKTsKCQkJYW5pbWF0aW9uLnN0YXJ0KCk7CgoJCQlzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uc3RhcnQnIH0gKTsKCgkJfQoKCQl0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkgewoKCQkJLy8gZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlOwoKCQl9OwoKCQl0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlyZWZlcmVuY2VTcGFjZVR5cGUgPSB2YWx1ZTsKCgkJfTsKCgkJdGhpcy5nZXRTZXNzaW9uID0gZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHNlc3Npb247CgoJCX07CgoJCXRoaXMuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlzZXNzaW9uID0gdmFsdWU7CgoJCQlpZiAoIHNlc3Npb24gIT09IG51bGwgKSB7CgoJCQkJc2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTsKCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTsKCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7CgkJCQlzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTsKCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7CgkJCQlzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplZW5kJywgb25TZXNzaW9uRXZlbnQgKTsKCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApOwoKCQkJCS8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgoJCQkJc2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBiYXNlTGF5ZXI6IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsLAoJCQkJCXsKCQkJCQkJYW50aWFsaWFzOiBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFudGlhbGlhcywKCQkJCQkJYWxwaGE6IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCkuYWxwaGEsCgkJCQkJCWRlcHRoOiBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmRlcHRoLAoJCQkJCQlzdGVuY2lsOiBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLnN0ZW5jaWwKCQkJCQl9CgkJCQkpIH0gKTsKCgkJCQlzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICkudGhlbiggb25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UgKTsKCgkJCQkvLwoKCQkJCXNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0c291cmNlc2NoYW5nZScsIHVwZGF0ZUlucHV0U291cmNlcyApOwoKCQkJCXVwZGF0ZUlucHV0U291cmNlcygpOwoKCQkJfQoKCQl9OwoKCQlmdW5jdGlvbiB1cGRhdGVJbnB1dFNvdXJjZXMoKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJc29ydGVkSW5wdXRTb3VyY2VzWyBpIF0gPSBmaW5kSW5wdXRTb3VyY2UoIGkgKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBmaW5kSW5wdXRTb3VyY2UoIGlkICkgewoKCQkJdmFyIGlucHV0U291cmNlcyA9IHNlc3Npb24uaW5wdXRTb3VyY2VzOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgaW5wdXRTb3VyY2VzLmxlbmd0aDsgaSArKyApIHsKCgkJCQl2YXIgaW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZXNbIGkgXTsKCQkJCXZhciBoYW5kZWRuZXNzID0gaW5wdXRTb3VyY2UuaGFuZGVkbmVzczsKCgkJCQlpZiAoIGlkID09PSAwICYmICggaGFuZGVkbmVzcyA9PT0gJ25vbmUnIHx8IGhhbmRlZG5lc3MgPT09ICdyaWdodCcgKSApIHsgcmV0dXJuIGlucHV0U291cmNlOyB9CgkJCQlpZiAoIGlkID09PSAxICYmICggaGFuZGVkbmVzcyA9PT0gJ2xlZnQnICkgKSB7IHJldHVybiBpbnB1dFNvdXJjZTsgfQoKCQkJfQoKCQl9CgoJCS8vCgoJCWZ1bmN0aW9uIHVwZGF0ZUNhbWVyYSggY2FtZXJhLCBwYXJlbnQgKSB7CgoJCQlpZiAoIHBhcmVudCA9PT0gbnVsbCApIHsKCgkJCQljYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeCApOwoKCQkJfSBlbHNlIHsKCgkJCQljYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7CgoJCQl9CgoJCQljYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIGNhbWVyYS5tYXRyaXhXb3JsZCApOwoKCQl9CgoJCXRoaXMuc2V0UG9zZVRhcmdldCA9IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJaWYgKCBvYmplY3QgIT09IHVuZGVmaW5lZCApIHsgcG9zZVRhcmdldCA9IG9iamVjdDsgfQoKCQl9OwoKCQl0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhICkgewoKCQkJY2FtZXJhVlIubmVhciA9IGNhbWVyYVIubmVhciA9IGNhbWVyYUwubmVhciA9IGNhbWVyYS5uZWFyOwoJCQljYW1lcmFWUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjsKCQkJaWYgKCBfY3VycmVudERlcHRoTmVhciAhPT0gY2FtZXJhVlIubmVhciB8fCBfY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFWUi5mYXIgKSB7CgoJCQkJc2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggewoJCQkJCWRlcHRoTmVhcjogY2FtZXJhVlIubmVhciwKCQkJCQlkZXB0aEZhcjogY2FtZXJhVlIuZmFyCgkJCQl9ICk7CgoJCQkJX2N1cnJlbnREZXB0aE5lYXIgPSBjYW1lcmFWUi5uZWFyOwoJCQkJX2N1cnJlbnREZXB0aEZhciA9IGNhbWVyYVZSLmZhcjsKCgkJCX0KCgkJCXZhciBwYXJlbnQgPSBjYW1lcmEucGFyZW50OwoJCQl2YXIgY2FtZXJhcyA9IGNhbWVyYVZSLmNhbWVyYXM7CgkJCXZhciBvYmplY3QgPSBwb3NlVGFyZ2V0IHx8IGNhbWVyYTsKCgkJCXVwZGF0ZUNhbWVyYSggY2FtZXJhVlIsIHBhcmVudCApOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgY2FtZXJhcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJdXBkYXRlQ2FtZXJhKCBjYW1lcmFzWyBpIF0sIHBhcmVudCApOwoKCQkJfQoKCQkJLy8gdXBkYXRlIGNhbWVyYSBhbmQgaXRzIGNoaWxkcmVuCgkJCW9iamVjdC5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmFWUi5tYXRyaXhXb3JsZCApOwoKCQkJdmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQljaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7CgoJCQl9CgoJCQlzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFWUiwgY2FtZXJhTCwgY2FtZXJhUiApOwoKCQkJcmV0dXJuIGNhbWVyYVZSOwoKCQl9OwoKCQl0aGlzLmdldENhbWVyYVBvc2UgPSBmdW5jdGlvbiAoICkgewoKCQkJcmV0dXJuIHBvc2U7CgoJCX07CgoJCXRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nOwoKCQkvLyBBbmltYXRpb24gTG9vcAoKCQl2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDsKCgkJZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7CgoJCQlwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSggcmVmZXJlbmNlU3BhY2UgKTsKCgkJCWlmICggcG9zZSAhPT0gbnVsbCApIHsKCgkJCQl2YXIgdmlld3MgPSBwb3NlLnZpZXdzOwoJCQkJdmFyIGJhc2VMYXllciA9IHNlc3Npb24ucmVuZGVyU3RhdGUuYmFzZUxheWVyOwoKCQkJCXJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBiYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTsKCgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJCXZhciB2aWV3ID0gdmlld3NbIGkgXTsKCQkJCQl2YXIgdmlld3BvcnQgPSBiYXNlTGF5ZXIuZ2V0Vmlld3BvcnQoIHZpZXcgKTsKCQkJCQl2YXIgdmlld01hdHJpeCA9IHZpZXcudHJhbnNmb3JtLmludmVyc2UubWF0cml4OwoKCQkJCQl2YXIgY2FtZXJhID0gY2FtZXJhVlIuY2FtZXJhc1sgaSBdOwoJCQkJCWNhbWVyYS5tYXRyaXguZnJvbUFycmF5KCB2aWV3TWF0cml4ICkuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeCApOwoJCQkJCWNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7CgkJCQkJY2FtZXJhLnZpZXdwb3J0LnNldCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCApOwoKCQkJCQlpZiAoIGkgPT09IDAgKSB7CgoJCQkJCQljYW1lcmFWUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJLy8KCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHsKCgkJCQl2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07CgoJCQkJdmFyIGlucHV0U291cmNlID0gc29ydGVkSW5wdXRTb3VyY2VzWyBpIF07CgoJCQkJaWYgKCBpbnB1dFNvdXJjZSApIHsKCgkJCQkJdmFyIGlucHV0UG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLnRhcmdldFJheVNwYWNlLCByZWZlcmVuY2VTcGFjZSApOwoKCQkJCQlpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHsKCgkJCQkJCWNvbnRyb2xsZXIubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTsKCQkJCQkJY29udHJvbGxlci5tYXRyaXguZGVjb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnJvdGF0aW9uLCBjb250cm9sbGVyLnNjYWxlICk7CgkJCQkJCWNvbnRyb2xsZXIudmlzaWJsZSA9IHRydWU7CgoJCQkJCQljb250aW51ZTsKCgkJCQkJfQoKCQkJCX0KCgkJCQljb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTsKCgkJCX0KCgkJCWlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgeyBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUsIGZyYW1lICk7IH0KCgkJfQoKCQl2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7CgkJYW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTsKCgkJdGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHsKCgkJCW9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrOwoKCQl9OwoKCQl0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTsKCgkJLy8gREVQUkVDQVRFRAoKCQl0aGlzLmdldFN0YW5kaW5nTWF0cml4ID0gZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBnZXRTdGFuZGluZ01hdHJpeCgpIGlzIG5vIGxvbmdlciBuZWVkZWQuJyApOwoJCQlyZXR1cm4gbmV3IE1hdHJpeDQoKTsKCgkJfTsKCgkJdGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IGdldERldmljZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJyApOwoKCQl9OwoKCQl0aGlzLnNldERldmljZSA9IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogc2V0RGV2aWNlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4nICk7CgoJCX07CgoJCXRoaXMuc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUgPSBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IHNldEZyYW1lT2ZSZWZlcmVuY2VUeXBlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4nICk7CgoJCX07CgoJCXRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7fTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggV2ViWFJNYW5hZ2VyLnByb3RvdHlwZSwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApOwoKCS8qKgoJICogQGF1dGhvciBzdXBlcmVnZ2JlcnQgLyBodHRwOi8vd3d3LnBhdWxicnVudC5jby51ay8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrLwoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gV2ViR0xSZW5kZXJlciggcGFyYW1ldGVycyApIHsKCgkJcGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307CgoJCXZhciBfY2FudmFzID0gcGFyYW1ldGVycy5jYW52YXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuY2FudmFzIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICksCgkJCV9jb250ZXh0ID0gcGFyYW1ldGVycy5jb250ZXh0ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmNvbnRleHQgOiBudWxsLAoKCQkJX2FscGhhID0gcGFyYW1ldGVycy5hbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5hbHBoYSA6IGZhbHNlLAoJCQlfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSwKCQkJX3N0ZW5jaWwgPSBwYXJhbWV0ZXJzLnN0ZW5jaWwgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuc3RlbmNpbCA6IHRydWUsCgkJCV9hbnRpYWxpYXMgPSBwYXJhbWV0ZXJzLmFudGlhbGlhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5hbnRpYWxpYXMgOiBmYWxzZSwKCQkJX3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsCgkJCV9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgOiBmYWxzZSwKCQkJX3Bvd2VyUHJlZmVyZW5jZSA9IHBhcmFtZXRlcnMucG93ZXJQcmVmZXJlbmNlICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSA6ICdkZWZhdWx0JywKCQkJX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCA6IGZhbHNlOwoKCQl2YXIgY3VycmVudFJlbmRlckxpc3QgPSBudWxsOwoJCXZhciBjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsOwoKCQkvLyBwdWJsaWMgcHJvcGVydGllcwoKCQl0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzOwoKCQkvLyBEZWJ1ZyBjb25maWd1cmF0aW9uIGNvbnRhaW5lcgoJCXRoaXMuZGVidWcgPSB7CgoJCQkvKioKCQkJICogRW5hYmxlcyBlcnJvciBjaGVja2luZyBhbmQgcmVwb3J0aW5nIHdoZW4gc2hhZGVyIHByb2dyYW1zIGFyZSBiZWluZyBjb21waWxlZAoJCQkgKiBAdHlwZSB7Ym9vbGVhbn0KCQkJICovCgkJCWNoZWNrU2hhZGVyRXJyb3JzOiB0cnVlCgkJfTsKCgkJLy8gY2xlYXJpbmcKCgkJdGhpcy5hdXRvQ2xlYXIgPSB0cnVlOwoJCXRoaXMuYXV0b0NsZWFyQ29sb3IgPSB0cnVlOwoJCXRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlOwoJCXRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7CgoJCS8vIHNjZW5lIGdyYXBoCgoJCXRoaXMuc29ydE9iamVjdHMgPSB0cnVlOwoKCQkvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmcKCgkJdGhpcy5jbGlwcGluZ1BsYW5lcyA9IFtdOwoJCXRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTsKCgkJLy8gcGh5c2ljYWxseSBiYXNlZCBzaGFkaW5nCgoJCXRoaXMuZ2FtbWFGYWN0b3IgPSAyLjA7CS8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCXRoaXMuZ2FtbWFPdXRwdXQgPSBmYWxzZTsKCgkJLy8gcGh5c2ljYWwgbGlnaHRzCgoJCXRoaXMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSBmYWxzZTsKCgkJLy8gdG9uZSBtYXBwaW5nCgoJCXRoaXMudG9uZU1hcHBpbmcgPSBMaW5lYXJUb25lTWFwcGluZzsKCQl0aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7CgkJdGhpcy50b25lTWFwcGluZ1doaXRlUG9pbnQgPSAxLjA7CgoJCS8vIG1vcnBocwoKCQl0aGlzLm1heE1vcnBoVGFyZ2V0cyA9IDg7CgkJdGhpcy5tYXhNb3JwaE5vcm1hbHMgPSA0OwoKCQkvLyBpbnRlcm5hbCBwcm9wZXJ0aWVzCgoJCXZhciBfdGhpcyA9IHRoaXMsCgoJCQlfaXNDb250ZXh0TG9zdCA9IGZhbHNlLAoKCQkJLy8gaW50ZXJuYWwgc3RhdGUgY2FjaGUKCgkJCV9mcmFtZWJ1ZmZlciA9IG51bGwsCgoJCQlfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gMCwKCQkJX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDAsCgkJCV9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbCwKCQkJX2N1cnJlbnRGcmFtZWJ1ZmZlciA9IG51bGwsCgkJCV9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMSwKCgkJCS8vIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGNhY2hpbmcKCgkJCV9jdXJyZW50R2VvbWV0cnlQcm9ncmFtID0gewoJCQkJZ2VvbWV0cnk6IG51bGwsCgkJCQlwcm9ncmFtOiBudWxsLAoJCQkJd2lyZWZyYW1lOiBmYWxzZQoJCQl9LAoKCQkJX2N1cnJlbnRDYW1lcmEgPSBudWxsLAoJCQlfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbCwKCgkJCV9jdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLAoJCQlfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLAoJCQlfY3VycmVudFNjaXNzb3JUZXN0ID0gbnVsbCwKCgkJCS8vCgoJCQlfd2lkdGggPSBfY2FudmFzLndpZHRoLAoJCQlfaGVpZ2h0ID0gX2NhbnZhcy5oZWlnaHQsCgoJCQlfcGl4ZWxSYXRpbyA9IDEsCgoJCQlfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICksCgkJCV9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApLAoJCQlfc2Npc3NvclRlc3QgPSBmYWxzZSwKCgkJCS8vIGZydXN0dW0KCgkJCV9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSwKCgkJCS8vIGNsaXBwaW5nCgoJCQlfY2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZygpLAoJCQlfY2xpcHBpbmdFbmFibGVkID0gZmFsc2UsCgkJCV9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLAoKCQkJLy8gY2FtZXJhIG1hdHJpY2VzIGNhY2hlCgoJCQlfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksCgoJCQlfdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7CgoJCWZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7CgoJCQlyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgPyBfcGl4ZWxSYXRpbyA6IDE7CgoJCX0KCgkJLy8gaW5pdGlhbGl6ZQoKCQl2YXIgX2dsOwoKCQl0cnkgewoKCQkJdmFyIGNvbnRleHRBdHRyaWJ1dGVzID0gewoJCQkJYWxwaGE6IF9hbHBoYSwKCQkJCWRlcHRoOiBfZGVwdGgsCgkJCQlzdGVuY2lsOiBfc3RlbmNpbCwKCQkJCWFudGlhbGlhczogX2FudGlhbGlhcywKCQkJCXByZW11bHRpcGxpZWRBbHBoYTogX3ByZW11bHRpcGxpZWRBbHBoYSwKCQkJCXByZXNlcnZlRHJhd2luZ0J1ZmZlcjogX3ByZXNlcnZlRHJhd2luZ0J1ZmZlciwKCQkJCXBvd2VyUHJlZmVyZW5jZTogX3Bvd2VyUHJlZmVyZW5jZSwKCQkJCWZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6IF9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0LAoJCQkJeHJDb21wYXRpYmxlOiB0cnVlCgkJCX07CgoJCQkvLyBldmVudCBsaXN0ZW5lcnMgbXVzdCBiZSByZWdpc3RlcmVkIGJlZm9yZSBXZWJHTCBjb250ZXh0IGlzIGNyZWF0ZWQsIHNlZSAjMTI3NTMKCgkJCV9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApOwoJCQlfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7CgoJCQlfZ2wgPSBfY29udGV4dCB8fCBfY2FudmFzLmdldENvbnRleHQoICd3ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzICkgfHwgX2NhbnZhcy5nZXRDb250ZXh0KCAnZXhwZXJpbWVudGFsLXdlYmdsJywgY29udGV4dEF0dHJpYnV0ZXMgKTsKCgkJCWlmICggX2dsID09PSBudWxsICkgewoKCQkJCWlmICggX2NhbnZhcy5nZXRDb250ZXh0KCAnd2ViZ2wnICkgIT09IG51bGwgKSB7CgoJCQkJCXRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuJyApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIFNvbWUgZXhwZXJpbWVudGFsLXdlYmdsIGltcGxlbWVudGF0aW9ucyBkbyBub3QgaGF2ZSBnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQKCgkJCWlmICggX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCV9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQgPSBmdW5jdGlvbiAoKSB7CgoJCQkJCXJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07CgoJCQkJfTsKCgkJCX0KCgkJfSBjYXRjaCAoIGVycm9yICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7CgkJCXRocm93IGVycm9yOwoKCQl9CgoJCXZhciBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvOwoJCXZhciBwcm9wZXJ0aWVzLCB0ZXh0dXJlcywgYXR0cmlidXRlcywgZ2VvbWV0cmllcywgb2JqZWN0czsKCQl2YXIgcHJvZ3JhbUNhY2hlLCByZW5kZXJMaXN0cywgcmVuZGVyU3RhdGVzOwoKCQl2YXIgYmFja2dyb3VuZCwgbW9ycGh0YXJnZXRzLCBidWZmZXJSZW5kZXJlciwgaW5kZXhlZEJ1ZmZlclJlbmRlcmVyOwoKCQl2YXIgdXRpbHM7CgoJCWZ1bmN0aW9uIGluaXRHTENvbnRleHQoKSB7CgoJCQlleHRlbnNpb25zID0gbmV3IFdlYkdMRXh0ZW5zaW9ucyggX2dsICk7CgoJCQljYXBhYmlsaXRpZXMgPSBuZXcgV2ViR0xDYXBhYmlsaXRpZXMoIF9nbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApOwoKCQkJaWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IGZhbHNlICkgewoKCQkJCWV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTsKCQkJCWV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7CgkJCQlleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7CgkJCQlleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApOwoJCQkJZXh0ZW5zaW9ucy5nZXQoICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7CgkJCQlleHRlbnNpb25zLmdldCggJ09FU19lbGVtZW50X2luZGV4X3VpbnQnICk7CgkJCQlleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7CgoJCQl9CgoJCQlleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTsKCgkJCXV0aWxzID0gbmV3IFdlYkdMVXRpbHMoIF9nbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7CgoJCQlzdGF0ZSA9IG5ldyBXZWJHTFN0YXRlKCBfZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApOwoJCQlzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7CgkJCXN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCkgKTsKCgkJCWluZm8gPSBuZXcgV2ViR0xJbmZvKCBfZ2wgKTsKCQkJcHJvcGVydGllcyA9IG5ldyBXZWJHTFByb3BlcnRpZXMoKTsKCQkJdGV4dHVyZXMgPSBuZXcgV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApOwoJCQlhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsICk7CgkJCWdlb21ldHJpZXMgPSBuZXcgV2ViR0xHZW9tZXRyaWVzKCBfZ2wsIGF0dHJpYnV0ZXMsIGluZm8gKTsKCQkJb2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoIF9nbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApOwoJCQltb3JwaHRhcmdldHMgPSBuZXcgV2ViR0xNb3JwaHRhcmdldHMoIF9nbCApOwoJCQlwcm9ncmFtQ2FjaGUgPSBuZXcgV2ViR0xQcm9ncmFtcyggX3RoaXMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApOwoJCQlyZW5kZXJMaXN0cyA9IG5ldyBXZWJHTFJlbmRlckxpc3RzKCk7CgkJCXJlbmRlclN0YXRlcyA9IG5ldyBXZWJHTFJlbmRlclN0YXRlcygpOwoKCQkJYmFja2dyb3VuZCA9IG5ldyBXZWJHTEJhY2tncm91bmQoIF90aGlzLCBzdGF0ZSwgb2JqZWN0cywgX3ByZW11bHRpcGxpZWRBbHBoYSApOwoKCQkJYnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKTsKCQkJaW5kZXhlZEJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApOwoKCQkJaW5mby5wcm9ncmFtcyA9IHByb2dyYW1DYWNoZS5wcm9ncmFtczsKCgkJCV90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllczsKCQkJX3RoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7CgkJCV90aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzOwoJCQlfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzOwoJCQlfdGhpcy5zdGF0ZSA9IHN0YXRlOwoJCQlfdGhpcy5pbmZvID0gaW5mbzsKCgkJfQoKCQlpbml0R0xDb250ZXh0KCk7CgoJCS8vIHhyCgoJCXZhciB4ciA9ICggdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3hyJyBpbiBuYXZpZ2F0b3IgKSA/IG5ldyBXZWJYUk1hbmFnZXIoIF90aGlzLCBfZ2wgKSA6IG5ldyBXZWJWUk1hbmFnZXIoIF90aGlzICk7CgoJCXRoaXMueHIgPSB4cjsKCgkJLy8gTXVsdGl2aWV3CgoJCXZhciBtdWx0aXZpZXcgPSBuZXcgV2ViR0xNdWx0aXZpZXcoIF90aGlzLCBfZ2wgKTsKCgkJLy8gc2hhZG93IG1hcAoKCQl2YXIgc2hhZG93TWFwID0gbmV3IFdlYkdMU2hhZG93TWFwKCBfdGhpcywgb2JqZWN0cywgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7CgoJCXRoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwOwoKCQkvLyBBUEkKCgkJdGhpcy5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIF9nbDsKCgkJfTsKCgkJdGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTsKCgkJfTsKCgkJdGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkgewoKCQkJdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApOwoJCQlpZiAoIGV4dGVuc2lvbiApIHsgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7IH0KCgkJfTsKCgkJdGhpcy5mb3JjZUNvbnRleHRSZXN0b3JlID0gZnVuY3Rpb24gKCkgewoKCQkJdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApOwoJCQlpZiAoIGV4dGVuc2lvbiApIHsgZXh0ZW5zaW9uLnJlc3RvcmVDb250ZXh0KCk7IH0KCgkJfTsKCgkJdGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIF9waXhlbFJhdGlvOwoKCQl9OwoKCQl0aGlzLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KCgkJCV9waXhlbFJhdGlvID0gdmFsdWU7CgoJCQl0aGlzLnNldFNpemUoIF93aWR0aCwgX2hlaWdodCwgZmFsc2UgKTsKCgkJfTsKCgkJdGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IC5nZXRzaXplKCkgbm93IHJlcXVpcmVzIGEgVmVjdG9yMiBhcyBhbiBhcmd1bWVudCcgKTsKCgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMigpOwoKCQkJfQoKCQkJcmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCwgX2hlaWdodCApOwoKCQl9OwoKCQl0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlICkgewoKCQkJaWYgKCB4ci5pc1ByZXNlbnRpbmcoKSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuJyApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJX3dpZHRoID0gd2lkdGg7CgkJCV9oZWlnaHQgPSBoZWlnaHQ7CgoJCQlfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBfcGl4ZWxSYXRpbyApOwoJCQlfY2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoIGhlaWdodCAqIF9waXhlbFJhdGlvICk7CgoJCQlpZiAoIHVwZGF0ZVN0eWxlICE9PSBmYWxzZSApIHsKCgkJCQlfY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwoJCQkJX2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnOwoKCQkJfQoKCQkJdGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApOwoKCQl9OwoKCQl0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1dlYkdMUmVuZGVyZXI6IC5nZXRkcmF3aW5nQnVmZmVyU2l6ZSgpIG5vdyByZXF1aXJlcyBhIFZlY3RvcjIgYXMgYW4gYXJndW1lbnQnICk7CgoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuc2V0KCBfd2lkdGggKiBfcGl4ZWxSYXRpbywgX2hlaWdodCAqIF9waXhlbFJhdGlvICkuZmxvb3IoKTsKCgkJfTsKCgkJdGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgcGl4ZWxSYXRpbyApIHsKCgkJCV93aWR0aCA9IHdpZHRoOwoJCQlfaGVpZ2h0ID0gaGVpZ2h0OwoKCQkJX3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvOwoKCQkJX2NhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogcGl4ZWxSYXRpbyApOwoJCQlfY2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoIGhlaWdodCAqIHBpeGVsUmF0aW8gKTsKCgkJCXRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTsKCgkJfTsKCgkJdGhpcy5nZXRDdXJyZW50Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnV2ViR0xSZW5kZXJlcjogLmdldEN1cnJlbnRWaWV3cG9ydCgpIG5vdyByZXF1aXJlcyBhIFZlY3RvcjQgYXMgYW4gYXJndW1lbnQnICk7CgoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjQoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuY29weSggX2N1cnJlbnRWaWV3cG9ydCApOwoKCQl9OwoKCQl0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlyZXR1cm4gdGFyZ2V0LmNvcHkoIF92aWV3cG9ydCApOwoKCQl9OwoKCQl0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkgewoKCQkJaWYgKCB4LmlzVmVjdG9yNCApIHsKCgkJCQlfdmlld3BvcnQuc2V0KCB4LngsIHgueSwgeC56LCB4LncgKTsKCgkJCX0gZWxzZSB7CgoJCQkJX3ZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApOwoKCQkJfQoKCQkJc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKSApOwoKCQl9OwoKCQl0aGlzLmdldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCXJldHVybiB0YXJnZXQuY29weSggX3NjaXNzb3IgKTsKCgkJfTsKCgkJdGhpcy5zZXRTY2lzc29yID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkgewoKCQkJaWYgKCB4LmlzVmVjdG9yNCApIHsKCgkJCQlfc2Npc3Nvci5zZXQoIHgueCwgeC55LCB4LnosIHgudyApOwoKCQkJfSBlbHNlIHsKCgkJCQlfc2Npc3Nvci5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTsKCgkJCX0KCgkJCXN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCkgKTsKCgkJfTsKCgkJdGhpcy5nZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBfc2Npc3NvclRlc3Q7CgoJCX07CgoJCXRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7CgoJCQlzdGF0ZS5zZXRTY2lzc29yVGVzdCggX3NjaXNzb3JUZXN0ID0gYm9vbGVhbiApOwoKCQl9OwoKCQkvLyBDbGVhcmluZwoKCQl0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCk7CgoJCX07CgoJCXRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHsKCgkJCWJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7CgoJCX07CgoJCXRoaXMuZ2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQWxwaGEoKTsKCgkJfTsKCgkJdGhpcy5zZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkgewoKCQkJYmFja2dyb3VuZC5zZXRDbGVhckFscGhhLmFwcGx5KCBiYWNrZ3JvdW5kLCBhcmd1bWVudHMgKTsKCgkJfTsKCgkJdGhpcy5jbGVhciA9IGZ1bmN0aW9uICggY29sb3IsIGRlcHRoLCBzdGVuY2lsICkgewoKCQkJdmFyIGJpdHMgPSAwOwoKCQkJaWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yICkgeyBiaXRzIHw9IDE2Mzg0OyB9CgkJCWlmICggZGVwdGggPT09IHVuZGVmaW5lZCB8fCBkZXB0aCApIHsgYml0cyB8PSAyNTY7IH0KCQkJaWYgKCBzdGVuY2lsID09PSB1bmRlZmluZWQgfHwgc3RlbmNpbCApIHsgYml0cyB8PSAxMDI0OyB9CgoJCQlfZ2wuY2xlYXIoIGJpdHMgKTsKCgkJfTsKCgkJdGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7CgoJCX07CgoJCXRoaXMuY2xlYXJEZXB0aCA9IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuY2xlYXIoIGZhbHNlLCB0cnVlLCBmYWxzZSApOwoKCQl9OwoKCQl0aGlzLmNsZWFyU3RlbmNpbCA9IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuY2xlYXIoIGZhbHNlLCBmYWxzZSwgdHJ1ZSApOwoKCQl9OwoKCQkvLwoKCQl0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7CgoJCQlfY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTsKCQkJX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApOwoKCQkJcmVuZGVyTGlzdHMuZGlzcG9zZSgpOwoJCQlyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpOwoJCQlwcm9wZXJ0aWVzLmRpc3Bvc2UoKTsKCQkJb2JqZWN0cy5kaXNwb3NlKCk7CgoJCQl4ci5kaXNwb3NlKCk7CgoJCQlhbmltYXRpb24uc3RvcCgpOwoKCQl9OwoKCQkvLyBFdmVudHMKCgkJZnVuY3Rpb24gb25Db250ZXh0TG9zdCggZXZlbnQgKSB7CgoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IExvc3QuJyApOwoKCQkJX2lzQ29udGV4dExvc3QgPSB0cnVlOwoKCQl9CgoJCWZ1bmN0aW9uIG9uQ29udGV4dFJlc3RvcmUoIC8qIGV2ZW50ICovICkgewoKCQkJY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTsKCgkJCV9pc0NvbnRleHRMb3N0ID0gZmFsc2U7CgoJCQlpbml0R0xDb250ZXh0KCk7CgoJCX0KCgkJZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkgewoKCQkJdmFyIG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0OwoKCQkJbWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApOwoKCQkJZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApOwoKCQl9CgoJCS8vIEJ1ZmZlciBkZWFsbG9jYXRpb24KCgkJZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApIHsKCgkJCXJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7CgoJCQlwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTsKCgkJfQoKCgkJZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKSB7CgoJCQl2YXIgcHJvZ3JhbUluZm8gPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5wcm9ncmFtOwoKCQkJbWF0ZXJpYWwucHJvZ3JhbSA9IHVuZGVmaW5lZDsKCgkJCWlmICggcHJvZ3JhbUluZm8gIT09IHVuZGVmaW5lZCApIHsKCgkJCQlwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW1JbmZvICk7CgoJCQl9CgoJCX0KCgkJLy8gQnVmZmVyIHJlbmRlcmluZwoKCQlmdW5jdGlvbiByZW5kZXJPYmplY3RJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApIHsKCgkJCW9iamVjdC5yZW5kZXIoIGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJCV90aGlzLnJlbmRlckJ1ZmZlckltbWVkaWF0ZSggb2JqZWN0LCBwcm9ncmFtICk7CgoJCQl9ICk7CgoJCX0KCgkJdGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUgPSBmdW5jdGlvbiAoIG9iamVjdCwgcHJvZ3JhbSApIHsKCgkJCXN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7CgoJCQl2YXIgYnVmZmVycyA9IHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKTsKCgkJCWlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyAmJiAhIGJ1ZmZlcnMucG9zaXRpb24gKSB7IGJ1ZmZlcnMucG9zaXRpb24gPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH0KCQkJaWYgKCBvYmplY3QuaGFzTm9ybWFscyAmJiAhIGJ1ZmZlcnMubm9ybWFsICkgeyBidWZmZXJzLm5vcm1hbCA9IF9nbC5jcmVhdGVCdWZmZXIoKTsgfQoJCQlpZiAoIG9iamVjdC5oYXNVdnMgJiYgISBidWZmZXJzLnV2ICkgeyBidWZmZXJzLnV2ID0gX2dsLmNyZWF0ZUJ1ZmZlcigpOyB9CgkJCWlmICggb2JqZWN0Lmhhc0NvbG9ycyAmJiAhIGJ1ZmZlcnMuY29sb3IgKSB7IGJ1ZmZlcnMuY29sb3IgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH0KCgkJCXZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpOwoKCQkJaWYgKCBvYmplY3QuaGFzUG9zaXRpb25zICkgewoKCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy5wb3NpdGlvbiApOwoJCQkJX2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QucG9zaXRpb25BcnJheSwgMzUwNDggKTsKCgkJCQlzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uICk7CgkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMucG9zaXRpb24sIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7CgoJCQl9CgoJCQlpZiAoIG9iamVjdC5oYXNOb3JtYWxzICkgewoKCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy5ub3JtYWwgKTsKCQkJCV9nbC5idWZmZXJEYXRhKCAzNDk2Miwgb2JqZWN0Lm5vcm1hbEFycmF5LCAzNTA0OCApOwoKCQkJCXN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsICk7CgkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCApOwoKCQkJfQoKCQkJaWYgKCBvYmplY3QuaGFzVXZzICkgewoKCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy51diApOwoJCQkJX2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QudXZBcnJheSwgMzUwNDggKTsKCgkJCQlzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnV2ICk7CgkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMudXYsIDIsIDUxMjYsIGZhbHNlLCAwLCAwICk7CgoJCQl9CgoJCQlpZiAoIG9iamVjdC5oYXNDb2xvcnMgKSB7CgoJCQkJX2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLmNvbG9yICk7CgkJCQlfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5jb2xvckFycmF5LCAzNTA0OCApOwoKCQkJCXN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IgKTsKCQkJCV9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy5jb2xvciwgMywgNTEyNiwgZmFsc2UsIDAsIDAgKTsKCgkJCX0KCgkJCXN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7CgoJCQlfZ2wuZHJhd0FycmF5cyggNCwgMCwgb2JqZWN0LmNvdW50ICk7CgoJCQlvYmplY3QuY291bnQgPSAwOwoKCQl9OwoKCQl0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCA9IGZ1bmN0aW9uICggY2FtZXJhLCBmb2csIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApIHsKCgkJCXZhciBmcm9udEZhY2VDVyA9ICggb2JqZWN0LmlzTWVzaCAmJiBvYmplY3QubWF0cml4V29ybGQuZGV0ZXJtaW5hbnQoKSA8IDAgKTsKCgkJCXZhciBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBmb2csIG1hdGVyaWFsLCBvYmplY3QgKTsKCgkJCXN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKTsKCgkJCXZhciB1cGRhdGVCdWZmZXJzID0gZmFsc2U7CgoJCQlpZiAoIF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ICE9PSBnZW9tZXRyeS5pZCB8fAoJCQkJX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSAhPT0gcHJvZ3JhbS5pZCB8fAoJCQkJX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lICE9PSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApICkgewoKCQkJCV9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gZ2VvbWV0cnkuaWQ7CgkJCQlfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gcHJvZ3JhbS5pZDsKCQkJCV9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZTsKCQkJCXVwZGF0ZUJ1ZmZlcnMgPSB0cnVlOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgfHwgbWF0ZXJpYWwubW9ycGhOb3JtYWxzICkgewoKCQkJCW1vcnBodGFyZ2V0cy51cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICk7CgoJCQkJdXBkYXRlQnVmZmVycyA9IHRydWU7CgoJCQl9CgoJCQkvLwoKCQkJdmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7CgkJCXZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgoJCQkvLwoKCQkJaWYgKCBpbmRleCAhPT0gbnVsbCAmJiBpbmRleC5jb3VudCA9PT0gMCApIHsgcmV0dXJuOyB9CgkJCWlmICggcG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbi5jb3VudCA9PT0gMCApIHsgcmV0dXJuOyB9CgoJCQkvLwoKCQkJdmFyIHJhbmdlRmFjdG9yID0gMTsKCgkJCWlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgewoKCQkJCWluZGV4ID0gZ2VvbWV0cmllcy5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7CgkJCQlyYW5nZUZhY3RvciA9IDI7CgoJCQl9CgoJCQl2YXIgYXR0cmlidXRlOwoJCQl2YXIgcmVuZGVyZXIgPSBidWZmZXJSZW5kZXJlcjsKCgkJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgoJCQkJYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGluZGV4ICk7CgoJCQkJcmVuZGVyZXIgPSBpbmRleGVkQnVmZmVyUmVuZGVyZXI7CgkJCQlyZW5kZXJlci5zZXRJbmRleCggYXR0cmlidXRlICk7CgoJCQl9CgoJCQlpZiAoIHVwZGF0ZUJ1ZmZlcnMgKSB7CgoJCQkJc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApOwoKCQkJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgoJCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MywgYXR0cmlidXRlLmJ1ZmZlciApOwoKCQkJCX0KCgkJCX0KCgkJCS8vCgoJCQl2YXIgZGF0YUNvdW50ID0gKCBpbmRleCAhPT0gbnVsbCApID8gaW5kZXguY291bnQgOiBwb3NpdGlvbi5jb3VudDsKCgkJCXZhciByYW5nZVN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7CgkJCXZhciByYW5nZUNvdW50ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50ICogcmFuZ2VGYWN0b3I7CgoJCQl2YXIgZ3JvdXBTdGFydCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciA6IDA7CgkJCXZhciBncm91cENvdW50ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5jb3VudCAqIHJhbmdlRmFjdG9yIDogSW5maW5pdHk7CgoJCQl2YXIgZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIHJhbmdlU3RhcnQsIGdyb3VwU3RhcnQgKTsKCQkJdmFyIGRyYXdFbmQgPSBNYXRoLm1pbiggZGF0YUNvdW50LCByYW5nZVN0YXJ0ICsgcmFuZ2VDb3VudCwgZ3JvdXBTdGFydCArIGdyb3VwQ291bnQgKSAtIDE7CgoJCQl2YXIgZHJhd0NvdW50ID0gTWF0aC5tYXgoIDAsIGRyYXdFbmQgLSBkcmF3U3RhcnQgKyAxICk7CgoJCQlpZiAoIGRyYXdDb3VudCA9PT0gMCApIHsgcmV0dXJuOyB9CgoJCQkvLwoKCQkJaWYgKCBvYmplY3QuaXNNZXNoICkgewoKCQkJCWlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgewoKCQkJCQlzdGF0ZS5zZXRMaW5lV2lkdGgoIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApOwoJCQkJCXJlbmRlcmVyLnNldE1vZGUoIDEgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlyZW5kZXJlci5zZXRNb2RlKCA0ICk7CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzTGluZSApIHsKCgkJCQl2YXIgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoOwoKCQkJCWlmICggbGluZVdpZHRoID09PSB1bmRlZmluZWQgKSB7IGxpbmVXaWR0aCA9IDE7IH0gLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWwKCgkJCQlzdGF0ZS5zZXRMaW5lV2lkdGgoIGxpbmVXaWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApOwoKCQkJCWlmICggb2JqZWN0LmlzTGluZVNlZ21lbnRzICkgewoKCQkJCQlyZW5kZXJlci5zZXRNb2RlKCAxICk7CgoJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7CgoJCQkJCXJlbmRlcmVyLnNldE1vZGUoIDIgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlyZW5kZXJlci5zZXRNb2RlKCAzICk7CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzUG9pbnRzICkgewoKCQkJCXJlbmRlcmVyLnNldE1vZGUoIDAgKTsKCgkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHsKCgkJCQlyZW5kZXJlci5zZXRNb2RlKCA0ICk7CgoJCQl9CgoJCQlpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7CgoJCQkJcmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgZHJhd1N0YXJ0LCBkcmF3Q291bnQsIG9iamVjdC5jb3VudCApOwoKCQkJfSBlbHNlIGlmICggZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApIHsKCgkJCQlyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTsKCgkJCX0gZWxzZSB7CgoJCQkJcmVuZGVyZXIucmVuZGVyKCBkcmF3U3RhcnQsIGRyYXdDb3VudCApOwoKCQkJfQoKCQl9OwoKCQlmdW5jdGlvbiBzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICkgewoKCQkJaWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IGZhbHNlICYmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCB8fCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkgKSB7CgoJCQkJaWYgKCBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkgPT09IG51bGwgKSB7IHJldHVybjsgfQoKCQkJfQoKCQkJc3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTsKCgkJCXZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwoKCQkJdmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7CgoJCQl2YXIgbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzID0gbWF0ZXJpYWwuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlczsKCgkJCWZvciAoIHZhciBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkgewoKCQkJCXZhciBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTsKCgkJCQlpZiAoIHByb2dyYW1BdHRyaWJ1dGUgPj0gMCApIHsKCgkJCQkJdmFyIGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07CgoJCQkJCWlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXZhciBub3JtYWxpemVkID0gZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZDsKCQkJCQkJdmFyIHNpemUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5pdGVtU2l6ZTsKCgkJCQkJCXZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnlBdHRyaWJ1dGUgKTsKCgkJCQkJCS8vIFRPRE8gQXR0cmlidXRlIG1heSBub3QgYmUgYXZhaWxhYmxlIG9uIGNvbnRleHQgcmVzdG9yZQoKCQkJCQkJaWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHsgY29udGludWU7IH0KCgkJCQkJCXZhciBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyOwoJCQkJCQl2YXIgdHlwZSA9IGF0dHJpYnV0ZS50eXBlOwoJCQkJCQl2YXIgYnl0ZXNQZXJFbGVtZW50ID0gYXR0cmlidXRlLmJ5dGVzUGVyRWxlbWVudDsKCgkJCQkJCWlmICggZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHsKCgkJCQkJCQl2YXIgZGF0YSA9IGdlb21ldHJ5QXR0cmlidXRlLmRhdGE7CgkJCQkJCQl2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7CgkJCQkJCQl2YXIgb2Zmc2V0ID0gZ2VvbWV0cnlBdHRyaWJ1dGUub2Zmc2V0OwoKCQkJCQkJCWlmICggZGF0YSAmJiBkYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgKSB7CgoJCQkJCQkJCXN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUsIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApOwoKCQkJCQkJCQlpZiAoIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCQkJCQlnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9IGRhdGEubWVzaFBlckF0dHJpYnV0ZSAqIGRhdGEuY291bnQ7CgoJCQkJCQkJCX0KCgkJCQkJCQl9IGVsc2UgewoKCQkJCQkJCQlzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUgKTsKCgkJCQkJCQl9CgoJCQkJCQkJX2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTsKCQkJCQkJCV9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsIG9mZnNldCAqIGJ5dGVzUGVyRWxlbWVudCApOwoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQlpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlICkgewoKCQkJCQkJCQlzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7CgoJCQkJCQkJCWlmICggZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCQkJCWdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID0gZ2VvbWV0cnlBdHRyaWJ1dGUubWVzaFBlckF0dHJpYnV0ZSAqIGdlb21ldHJ5QXR0cmlidXRlLmNvdW50OwoKCQkJCQkJCQl9CgoJCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkJc3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlICk7CgoJCQkJCQkJfQoKCQkJCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7CgkJCQkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgMCwgMCApOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgaWYgKCBuYW1lID09PSAnaW5zdGFuY2VNYXRyaXgnICkgewoKCQkJCQkJdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBvYmplY3QuaW5zdGFuY2VNYXRyaXggKTsKCgkJCQkJCS8vIFRPRE8gQXR0cmlidXRlIG1heSBub3QgYmUgYXZhaWxhYmxlIG9uIGNvbnRleHQgcmVzdG9yZQoKCQkJCQkJaWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHsgY29udGludWU7IH0KCgkJCQkJCXZhciBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyOwoJCQkJCQl2YXIgdHlwZSA9IGF0dHJpYnV0ZS50eXBlOwoKCQkJCQkJc3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSArIDAsIDEgKTsKCQkJCQkJc3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSArIDEsIDEgKTsKCQkJCQkJc3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSArIDIsIDEgKTsKCQkJCQkJc3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSArIDMsIDEgKTsKCgkJCQkJCV9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7CgoJCQkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSArIDAsIDQsIHR5cGUsIGZhbHNlLCA2NCwgMCApOwoJCQkJCQlfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSArIDEsIDQsIHR5cGUsIGZhbHNlLCA2NCwgMTYgKTsKCQkJCQkJX2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUgKyAyLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDMyICk7CgkJCQkJCV9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlICsgMywgNCwgdHlwZSwgZmFsc2UsIDY0LCA0OCApOwoKCQkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXZhciB2YWx1ZSA9IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1sgbmFtZSBdOwoKCQkJCQkJaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCXN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHsKCgkJCQkJCQkJY2FzZSAyOgoJCQkJCQkJCQlfZ2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJY2FzZSAzOgoJCQkJCQkJCQlfZ2wudmVydGV4QXR0cmliM2Z2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJY2FzZSA0OgoJCQkJCQkJCQlfZ2wudmVydGV4QXR0cmliNGZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApOwoJCQkJCQkJCQlicmVhazsKCgkJCQkJCQkJZGVmYXVsdDoKCQkJCQkJCQkJX2dsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlzdGF0ZS5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpOwoKCQl9CgoJCS8vIENvbXBpbGUKCgkJdGhpcy5jb21waWxlID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkgewoKCQkJY3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIGNhbWVyYSApOwoJCQljdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpOwoKCQkJc2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJCWlmICggb2JqZWN0LmlzTGlnaHQgKSB7CgoJCQkJCWN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApOwoKCQkJCQlpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkgewoKCQkJCQkJY3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfSApOwoKCQkJY3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTsKCgkJCXNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHsKCgkJCQlpZiAoIG9iamVjdC5tYXRlcmlhbCApIHsKCgkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3QubWF0ZXJpYWwgKSApIHsKCgkJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IG9iamVjdC5tYXRlcmlhbC5sZW5ndGg7IGkgKysgKSB7CgoJCQkJCQkJaW5pdE1hdGVyaWFsKCBvYmplY3QubWF0ZXJpYWxbIGkgXSwgc2NlbmUuZm9nLCBvYmplY3QgKTsKCgkJCQkJCX0KCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsLCBzY2VuZS5mb2csIG9iamVjdCApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfSApOwoKCQl9OwoKCQkvLyBBbmltYXRpb24gTG9vcAoKCQl2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDsKCgkJZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSApIHsKCgkJCWlmICggeHIuaXNQcmVzZW50aW5nKCkgKSB7IHJldHVybjsgfQoJCQlpZiAoIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayApIHsgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7IH0KCgkJfQoKCQl2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7CgkJYW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTsKCgkJaWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyApIHsgYW5pbWF0aW9uLnNldENvbnRleHQoIHdpbmRvdyApOyB9CgoJCXRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7CgoJCQlvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjazsKCQkJeHIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTsKCgkJCWFuaW1hdGlvbi5zdGFydCgpOwoKCQl9OwoKCQkvLyBSZW5kZXJpbmcKCgkJdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7CgoJCQl2YXIgcmVuZGVyVGFyZ2V0LCBmb3JjZUNsZWFyOwoKCQkJaWYgKCBhcmd1bWVudHNbIDIgXSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyKCk6IHRoZSByZW5kZXJUYXJnZXQgYXJndW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5zZXRSZW5kZXJUYXJnZXQoKSBpbnN0ZWFkLicgKTsKCQkJCXJlbmRlclRhcmdldCA9IGFyZ3VtZW50c1sgMiBdOwoKCQkJfQoKCQkJaWYgKCBhcmd1bWVudHNbIDMgXSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyKCk6IHRoZSBmb3JjZUNsZWFyIGFyZ3VtZW50IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuY2xlYXIoKSBpbnN0ZWFkLicgKTsKCQkJCWZvcmNlQ2xlYXIgPSBhcmd1bWVudHNbIDMgXTsKCgkJCX0KCgkJCWlmICggISAoIGNhbWVyYSAmJiBjYW1lcmEuaXNDYW1lcmEgKSApIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXI6IGNhbWVyYSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQ2FtZXJhLicgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCWlmICggX2lzQ29udGV4dExvc3QgKSB7IHJldHVybjsgfQoKCQkJLy8gcmVzZXQgY2FjaGluZyBmb3IgdGhpcyBmcmFtZQoKCQkJX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgPSBudWxsOwoJCQlfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gbnVsbDsKCQkJX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gZmFsc2U7CgkJCV9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMTsKCQkJX2N1cnJlbnRDYW1lcmEgPSBudWxsOwoKCQkJLy8gdXBkYXRlIHNjZW5lIGdyYXBoCgoJCQlpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSB7IHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7IH0KCgkJCS8vIHVwZGF0ZSBjYW1lcmEgbWF0cmljZXMgYW5kIGZydXN0dW0KCgkJCWlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCApIHsgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7IH0KCgkJCWlmICggeHIuZW5hYmxlZCAmJiB4ci5pc1ByZXNlbnRpbmcoKSApIHsKCgkJCQljYW1lcmEgPSB4ci5nZXRDYW1lcmEoIGNhbWVyYSApOwoKCQkJfQoKCQkJLy8KCgkJCWN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBjYW1lcmEgKTsKCQkJY3VycmVudFJlbmRlclN0YXRlLmluaXQoKTsKCgkJCXNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0IHx8IF9jdXJyZW50UmVuZGVyVGFyZ2V0ICk7CgoJCQlfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApOwoJCQlfZnJ1c3R1bS5zZXRGcm9tTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApOwoKCQkJX2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gdGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZDsKCQkJX2NsaXBwaW5nRW5hYmxlZCA9IF9jbGlwcGluZy5pbml0KCB0aGlzLmNsaXBwaW5nUGxhbmVzLCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQsIGNhbWVyYSApOwoKCQkJY3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0cy5nZXQoIHNjZW5lLCBjYW1lcmEgKTsKCQkJY3VycmVudFJlbmRlckxpc3QuaW5pdCgpOwoKCQkJcHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgMCwgX3RoaXMuc29ydE9iamVjdHMgKTsKCgkJCWlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7CgoJCQkJY3VycmVudFJlbmRlckxpc3Quc29ydCgpOwoKCQkJfQoKCQkJLy8KCgkJCWlmICggX2NsaXBwaW5nRW5hYmxlZCApIHsgX2NsaXBwaW5nLmJlZ2luU2hhZG93cygpOyB9CgoJCQl2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTsKCgkJCXNoYWRvd01hcC5yZW5kZXIoIHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSApOwoKCQkJY3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTsKCgkJCWlmICggX2NsaXBwaW5nRW5hYmxlZCApIHsgX2NsaXBwaW5nLmVuZFNoYWRvd3MoKTsgfQoKCQkJLy8KCgkJCWlmICggdGhpcy5pbmZvLmF1dG9SZXNldCApIHsgdGhpcy5pbmZvLnJlc2V0KCk7IH0KCgkJCWlmICggcmVuZGVyVGFyZ2V0ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdGhpcy5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApOwoKCQkJfQoKCQkJaWYgKCB4ci5lbmFibGVkICYmIG11bHRpdmlldy5pc0F2YWlsYWJsZSgpICkgewoKCQkJCW11bHRpdmlldy5hdHRhY2hDYW1lcmEoIGNhbWVyYSApOwoKCQkJfQoKCQkJLy8KCgkJCWJhY2tncm91bmQucmVuZGVyKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgZm9yY2VDbGVhciApOwoKCQkJLy8gcmVuZGVyIHNjZW5lCgoJCQl2YXIgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTsKCQkJdmFyIHRyYW5zcGFyZW50T2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zcGFyZW50OwoKCQkJaWYgKCBzY2VuZS5vdmVycmlkZU1hdGVyaWFsICkgewoKCQkJCXZhciBvdmVycmlkZU1hdGVyaWFsID0gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbDsKCgkJCQlpZiAoIG9wYXF1ZU9iamVjdHMubGVuZ3RoICkgeyByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICk7IH0KCQkJCWlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCApIHsgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICk7IH0KCgkJCX0gZWxzZSB7CgoJCQkJLy8gb3BhcXVlIHBhc3MgKGZyb250LXRvLWJhY2sgb3JkZXIpCgoJCQkJaWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCApIHsgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApOyB9CgoJCQkJLy8gdHJhbnNwYXJlbnQgcGFzcyAoYmFjay10by1mcm9udCBvcmRlcikKCgkJCQlpZiAoIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggKSB7IHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSApOyB9CgoJCQl9CgoJCQkvLwoKCQkJc2NlbmUub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEgKTsKCgkJCS8vCgoJCQlpZiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgewoKCQkJCS8vIEdlbmVyYXRlIG1pcG1hcCBpZiB3ZSdyZSB1c2luZyBhbnkga2luZCBvZiBtaXBtYXAgZmlsdGVyaW5nCgoJCQkJdGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCBfY3VycmVudFJlbmRlclRhcmdldCApOwoKCQkJCS8vIHJlc29sdmUgbXVsdGlzYW1wbGUgcmVuZGVyYnVmZmVycyB0byBhIHNpbmdsZS1zYW1wbGUgdGV4dHVyZSBpZiBuZWNlc3NhcnkKCgkJCQl0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTsKCgkJCX0KCgkJCS8vIEVuc3VyZSBkZXB0aCBidWZmZXIgd3JpdGluZyBpcyBlbmFibGVkIHNvIGl0IGNhbiBiZSBjbGVhcmVkIG9uIG5leHQgcmVuZGVyCgoJCQlzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTsKCQkJc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCB0cnVlICk7CgkJCXN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApOwoKCQkJc3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTsKCgkJCWlmICggeHIuZW5hYmxlZCApIHsKCgkJCQlpZiAoIG11bHRpdmlldy5pc0F2YWlsYWJsZSgpICkgewoKCQkJCQltdWx0aXZpZXcuZGV0YWNoQ2FtZXJhKCBjYW1lcmEgKTsKCgkJCQl9CgoJCQkJeHIuc3VibWl0RnJhbWUoKTsKCgkJCX0KCgkJCS8vIF9nbC5maW5pc2goKTsKCgkJCWN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDsKCQkJY3VycmVudFJlbmRlclN0YXRlID0gbnVsbDsKCgkJfTsKCgkJZnVuY3Rpb24gcHJvamVjdE9iamVjdCggb2JqZWN0LCBjYW1lcmEsIGdyb3VwT3JkZXIsIHNvcnRPYmplY3RzICkgewoKCQkJaWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQkJdmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTsKCgkJCWlmICggdmlzaWJsZSApIHsKCgkJCQlpZiAoIG9iamVjdC5pc0dyb3VwICkgewoKCQkJCQlncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyOwoKCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc0xPRCApIHsKCgkJCQkJaWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHsgb2JqZWN0LnVwZGF0ZSggY2FtZXJhICk7IH0KCgkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHsKCgkJCQkJY3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7CgoJCQkJCWlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7CgoJCQkJCQljdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7CgoJCQkJCWlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHsKCgkJCQkJCWlmICggc29ydE9iamVjdHMgKSB7CgoJCQkJCQkJX3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKQoJCQkJCQkJCS5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7CgoJCQkJCQl9CgoJCQkJCQl2YXIgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7CgkJCQkJCXZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDsKCgkJCQkJCWlmICggbWF0ZXJpYWwudmlzaWJsZSApIHsKCgkJCQkJCQljdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApOwoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggb2JqZWN0LmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ICkgewoKCQkJCQlpZiAoIHNvcnRPYmplY3RzICkgewoKCQkJCQkJX3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKQoJCQkJCQkJLmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTsKCgkJCQkJfQoKCQkJCQljdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIG51bGwsIG9iamVjdC5tYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApOwoKCQkJCX0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSB7CgoJCQkJCWlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7CgoJCQkJCQkvLyB1cGRhdGUgc2tlbGV0b24gb25seSBvbmNlIGluIGEgZnJhbWUKCgkJCQkJCWlmICggb2JqZWN0LnNrZWxldG9uLmZyYW1lICE9PSBpbmZvLnJlbmRlci5mcmFtZSApIHsKCgkJCQkJCQlvYmplY3Quc2tlbGV0b24udXBkYXRlKCk7CgkJCQkJCQlvYmplY3Quc2tlbGV0b24uZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQlpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7CgoJCQkJCQlpZiAoIHNvcnRPYmplY3RzICkgewoKCQkJCQkJCV92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkICkKCQkJCQkJCQkuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApOwoKCQkJCQkJfQoKCQkJCQkJdmFyIGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApOwoJCQkJCQl2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7CgoJCQkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7CgoJCQkJCQkJdmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwczsKCgkJCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJCQkJdmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07CgkJCQkJCQkJdmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdOwoKCQkJCQkJCQlpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkgewoKCQkJCQkJCQkJY3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgZ3JvdXBNYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgZ3JvdXAgKTsKCgkJCQkJCQkJfQoKCQkJCQkJCX0KCgkJCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7CgoJCQkJCQkJY3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIF92ZWN0b3IzLnosIG51bGwgKTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJcHJvamVjdE9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHJlbmRlck9iamVjdHMoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSByZW5kZXJMaXN0Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07CgoJCQkJdmFyIG9iamVjdCA9IHJlbmRlckl0ZW0ub2JqZWN0OwoJCQkJdmFyIGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTsKCQkJCXZhciBtYXRlcmlhbCA9IG92ZXJyaWRlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCA/IHJlbmRlckl0ZW0ubWF0ZXJpYWwgOiBvdmVycmlkZU1hdGVyaWFsOwoJCQkJdmFyIGdyb3VwID0gcmVuZGVySXRlbS5ncm91cDsKCgkJCQlpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkgewoKCQkJCQlfY3VycmVudEFycmF5Q2FtZXJhID0gY2FtZXJhOwoKCQkJCQlpZiAoIHhyLmVuYWJsZWQgJiYgbXVsdGl2aWV3LmlzQXZhaWxhYmxlKCkgKSB7CgoJCQkJCQlyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJdmFyIGNhbWVyYXMgPSBjYW1lcmEuY2FtZXJhczsKCgkJCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBjYW1lcmFzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQkJCXZhciBjYW1lcmEyID0gY2FtZXJhc1sgaiBdOwoKCQkJCQkJCWlmICggb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEyLmxheWVycyApICkgewoKCQkJCQkJCQlzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBjYW1lcmEyLnZpZXdwb3J0ICkgKTsKCgkJCQkJCQkJY3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEyICk7CgoJCQkJCQkJCXJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhMiwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0gZWxzZSB7CgoJCQkJCV9jdXJyZW50QXJyYXlDYW1lcmEgPSBudWxsOwoKCQkJCQlyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApOwoKCQkJCX0KCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApIHsKCgkJCW9iamVjdC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTsKCQkJY3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIF9jdXJyZW50QXJyYXlDYW1lcmEgfHwgY2FtZXJhICk7CgoJCQlvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApOwoJCQlvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApOwoKCQkJaWYgKCBvYmplY3QuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgKSB7CgoJCQkJdmFyIHByb2dyYW0gPSBzZXRQcm9ncmFtKCBjYW1lcmEsIHNjZW5lLmZvZywgbWF0ZXJpYWwsIG9iamVjdCApOwoKCQkJCXN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCApOwoKCQkJCV9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gbnVsbDsKCQkJCV9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLnByb2dyYW0gPSBudWxsOwoJCQkJX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gZmFsc2U7CgoJCQkJcmVuZGVyT2JqZWN0SW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKTsKCgkJCX0gZWxzZSB7CgoJCQkJX3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLmZvZywgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7CgoJCQl9CgoJCQlvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTsKCQkJY3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUsIF9jdXJyZW50QXJyYXlDYW1lcmEgfHwgY2FtZXJhICk7CgoJCX0KCgkJZnVuY3Rpb24gaW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgZm9nLCBvYmplY3QgKSB7CgoJCQl2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7CgoJCQl2YXIgbGlnaHRzID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmxpZ2h0czsKCQkJdmFyIHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7CgoJCQl2YXIgbGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzLnN0YXRlLnZlcnNpb247CgoJCQl2YXIgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKAoJCQkJbWF0ZXJpYWwsIGxpZ2h0cy5zdGF0ZSwgc2hhZG93c0FycmF5LCBmb2csIF9jbGlwcGluZy5udW1QbGFuZXMsIF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb24sIG9iamVjdCApOwoKCQkJdmFyIHByb2dyYW1DYWNoZUtleSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ2FjaGVLZXkoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7CgoJCQl2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtOwoJCQl2YXIgcHJvZ3JhbUNoYW5nZSA9IHRydWU7CgoJCQlpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBuZXcgbWF0ZXJpYWwKCQkJCW1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTsKCgkJCX0gZWxzZSBpZiAoIHByb2dyYW0uY2FjaGVLZXkgIT09IHByb2dyYW1DYWNoZUtleSApIHsKCgkJCQkvLyBjaGFuZ2VkIGdsc2wgb3IgcGFyYW1ldGVycwoJCQkJcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKTsKCgkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gIT09IGxpZ2h0c1N0YXRlVmVyc2lvbiApIHsKCgkJCQltYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uOwoKCQkJCXByb2dyYW1DaGFuZ2UgPSBmYWxzZTsKCgkJCX0gZWxzZSBpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBzYW1lIGdsc2wgYW5kIHVuaWZvcm0gbGlzdAoJCQkJcmV0dXJuOwoKCQkJfSBlbHNlIHsKCgkJCQkvLyBvbmx5IHJlYnVpbGQgdW5pZm9ybSBsaXN0CgkJCQlwcm9ncmFtQ2hhbmdlID0gZmFsc2U7CgoJCQl9CgoJCQlpZiAoIHByb2dyYW1DaGFuZ2UgKSB7CgoJCQkJaWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkgewoKCQkJCQl2YXIgc2hhZGVyID0gU2hhZGVyTGliWyBwYXJhbWV0ZXJzLnNoYWRlcklEIF07CgoJCQkJCW1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPSB7CgkJCQkJCW5hbWU6IG1hdGVyaWFsLnR5cGUsCgkJCQkJCXVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBzaGFkZXIudW5pZm9ybXMgKSwKCQkJCQkJdmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLAoJCQkJCQlmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyCgkJCQkJfTsKCgkJCQl9IGVsc2UgewoKCQkJCQltYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID0gewoJCQkJCQluYW1lOiBtYXRlcmlhbC50eXBlLAoJCQkJCQl1bmlmb3JtczogbWF0ZXJpYWwudW5pZm9ybXMsCgkJCQkJCXZlcnRleFNoYWRlcjogbWF0ZXJpYWwudmVydGV4U2hhZGVyLAoJCQkJCQlmcmFnbWVudFNoYWRlcjogbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIKCQkJCQl9OwoKCQkJCX0KCgkJCQltYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIsIF90aGlzICk7CgoJCQkJLy8gQ29tcHV0aW5nIGNhY2hlIGtleSBhZ2FpbiBhcyBvbkJlZm9yZUNvbXBpbGUgbWF5IGhhdmUgY2hhbmdlZCB0aGUgc2hhZGVycwoJCQkJcHJvZ3JhbUNhY2hlS2V5ID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1DYWNoZUtleSggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTsKCgkJCQlwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBtYXRlcmlhbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgcGFyYW1ldGVycywgcHJvZ3JhbUNhY2hlS2V5ICk7CgoJCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0gPSBwcm9ncmFtOwoJCQkJbWF0ZXJpYWwucHJvZ3JhbSA9IHByb2dyYW07CgoJCQl9CgoJCQl2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTsKCgkJCWlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzICkgewoKCQkJCW1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyA9IDA7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhUYXJnZXRzOyBpICsrICkgewoKCQkJCQlpZiAoIHByb2dyYW1BdHRyaWJ1dGVzWyAnbW9ycGhUYXJnZXQnICsgaSBdID49IDAgKSB7CgoJCQkJCQltYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMgKys7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLm1vcnBoTm9ybWFscyApIHsKCgkJCQltYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMgPSAwOwoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoTm9ybWFsczsgaSArKyApIHsKCgkJCQkJaWYgKCBwcm9ncmFtQXR0cmlidXRlc1sgJ21vcnBoTm9ybWFsJyArIGkgXSA+PSAwICkgewoKCQkJCQkJbWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzICsrOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJdmFyIHVuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlci51bmlmb3JtczsKCgkJCWlmICggISBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmCgkJCQkhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgfHwKCQkJCW1hdGVyaWFsLmNsaXBwaW5nID09PSB0cnVlICkgewoKCQkJCW1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyA9IF9jbGlwcGluZy5udW1QbGFuZXM7CgkJCQltYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbjsKCQkJCXVuaWZvcm1zLmNsaXBwaW5nUGxhbmVzID0gX2NsaXBwaW5nLnVuaWZvcm07CgoJCQl9CgoJCQltYXRlcmlhbFByb3BlcnRpZXMuZm9nID0gZm9nOwoKCQkJLy8gc3RvcmUgdGhlIGxpZ2h0IHNldHVwIGl0IHdhcyBjcmVhdGVkIGZvcgoKCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzID0gbWF0ZXJpYWxOZWVkc0xpZ2h0cyggbWF0ZXJpYWwgKTsKCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjsKCgkJCWlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkgewoKCQkJCS8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZQoKCQkJCXVuaWZvcm1zLmFtYmllbnRMaWdodENvbG9yLnZhbHVlID0gbGlnaHRzLnN0YXRlLmFtYmllbnQ7CgkJCQl1bmlmb3Jtcy5saWdodFByb2JlLnZhbHVlID0gbGlnaHRzLnN0YXRlLnByb2JlOwoJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWw7CgkJCQl1bmlmb3Jtcy5zcG90TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3Q7CgkJCQl1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTsKCQkJCXVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50OwoJCQkJdW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pOwoKCQkJCXVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwOwoJCQkJdW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7CgkJCQl1bmlmb3Jtcy5zcG90U2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXA7CgkJCQl1bmlmb3Jtcy5zcG90U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXRyaXg7CgkJCQl1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDsKCQkJCXVuaWZvcm1zLnBvaW50U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWF0cml4OwoJCQkJLy8gVE9ETyAoYWJlbG5hdGlvbik6IGFkZCBhcmVhIGxpZ2h0cyBzaGFkb3cgaW5mbyB0byB1bmlmb3JtcwoKCQkJfQoKCQkJdmFyIHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLmdldFVuaWZvcm1zKCksCgkJCQl1bmlmb3Jtc0xpc3QgPQoJCQkJCVdlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlKCBwcm9nVW5pZm9ybXMuc2VxLCB1bmlmb3JtcyApOwoKCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IHVuaWZvcm1zTGlzdDsKCgkJfQoKCQlmdW5jdGlvbiBzZXRQcm9ncmFtKCBjYW1lcmEsIGZvZywgbWF0ZXJpYWwsIG9iamVjdCApIHsKCgkJCXRleHR1cmVzLnJlc2V0VGV4dHVyZVVuaXRzKCk7CgoJCQl2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7CgkJCXZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzOwoKCQkJaWYgKCBfY2xpcHBpbmdFbmFibGVkICkgewoKCQkJCWlmICggX2xvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IGNhbWVyYSAhPT0gX2N1cnJlbnRDYW1lcmEgKSB7CgoJCQkJCXZhciB1c2VDYWNoZSA9CgkJCQkJCWNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiYKCQkJCQkJbWF0ZXJpYWwuaWQgPT09IF9jdXJyZW50TWF0ZXJpYWxJZDsKCgkJCQkJLy8gd2UgbWlnaHQgd2FudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBzb21lIENsaXBwaW5nR3JvdXAKCQkJCQkvLyBvYmplY3QgaW5zdGVhZCBvZiB0aGUgbWF0ZXJpYWwsIG9uY2UgaXQgYmVjb21lcyBmZWFzaWJsZQoJCQkJCS8vICgjODQ2NSwgIzgzNzkpCgkJCQkJX2NsaXBwaW5nLnNldFN0YXRlKAoJCQkJCQltYXRlcmlhbC5jbGlwcGluZ1BsYW5lcywgbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbiwgbWF0ZXJpYWwuY2xpcFNoYWRvd3MsCgkJCQkJCWNhbWVyYSwgbWF0ZXJpYWxQcm9wZXJ0aWVzLCB1c2VDYWNoZSApOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwudmVyc2lvbiA9PT0gbWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiApIHsKCgkJCQlpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCW1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5mb2cgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyAhPT0gZm9nICkgewoKCQkJCQltYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICYmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiAhPT0gbGlnaHRzLnN0YXRlLnZlcnNpb24gKSApIHsKCgkJCQkJbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gdW5kZWZpbmVkICYmCgkJCQkJKCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IF9jbGlwcGluZy5udW1QbGFuZXMgfHwKCQkJCQltYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uICkgKSB7CgoJCQkJCW1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLnZlcnNpb24gIT09IG1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gKSB7CgoJCQkJaW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgZm9nLCBvYmplY3QgKTsKCQkJCW1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gPSBtYXRlcmlhbC52ZXJzaW9uOwoKCQkJfQoKCQkJdmFyIHJlZnJlc2hQcm9ncmFtID0gZmFsc2U7CgkJCXZhciByZWZyZXNoTWF0ZXJpYWwgPSBmYWxzZTsKCQkJdmFyIHJlZnJlc2hMaWdodHMgPSBmYWxzZTsKCgkJCXZhciBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0sCgkJCQlwX3VuaWZvcm1zID0gcHJvZ3JhbS5nZXRVbmlmb3JtcygpLAoJCQkJbV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7CgoJCQlpZiAoIHN0YXRlLnVzZVByb2dyYW0oIHByb2dyYW0ucHJvZ3JhbSApICkgewoKCQkJCXJlZnJlc2hQcm9ncmFtID0gdHJ1ZTsKCQkJCXJlZnJlc2hNYXRlcmlhbCA9IHRydWU7CgkJCQlyZWZyZXNoTGlnaHRzID0gdHJ1ZTsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCApIHsKCgkJCQlfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDsKCgkJCQlyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlOwoKCQkJfQoKCQkJaWYgKCByZWZyZXNoUHJvZ3JhbSB8fCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkgewoKCQkJCWlmICggcHJvZ3JhbS5udW1NdWx0aXZpZXdWaWV3cyA+IDAgKSB7CgoJCQkJCW11bHRpdmlldy51cGRhdGVDYW1lcmFQcm9qZWN0aW9uTWF0cmljZXNVbmlmb3JtKCBjYW1lcmEsIHBfdW5pZm9ybXMgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdwcm9qZWN0aW9uTWF0cml4JywgY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTsKCgkJCQl9CgoJCQkJaWYgKCBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApIHsKCgkJCQkJcF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsCgkJCQkJCTIuMCAvICggTWF0aC5sb2coIGNhbWVyYS5mYXIgKyAxLjAgKSAvIE1hdGguTE4yICkgKTsKCgkJCQl9CgoJCQkJaWYgKCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkgewoKCQkJCQlfY3VycmVudENhbWVyYSA9IGNhbWVyYTsKCgkJCQkJLy8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGUKCQkJCQkvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlbgoJCQkJCS8vIHRoZSBuZXh0IG1hdGVyaWFsIHRoYXQgZG9lcyBnZXRzIGFjdGl2YXRlZDoKCgkJCQkJcmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTsJCS8vIHNldCB0byB0cnVlIG9uIG1hdGVyaWFsIGNoYW5nZQoJCQkJCXJlZnJlc2hMaWdodHMgPSB0cnVlOwkJLy8gcmVtYWlucyBzZXQgdW50aWwgdXBkYXRlIGRvbmUKCgkJCQl9CgoJCQkJLy8gbG9hZCBtYXRlcmlhbCBzcGVjaWZpYyB1bmlmb3JtcwoJCQkJLy8gKHNoYWRlciBtYXRlcmlhbCBhbHNvIGdldHMgdGhlbSBmb3IgdGhlIHNha2Ugb2YgZ2VuZXJpY2l0eSkKCgkJCQlpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fAoJCQkJCW1hdGVyaWFsLmVudk1hcCApIHsKCgkJCQkJdmFyIHVDYW1Qb3MgPSBwX3VuaWZvcm1zLm1hcC5jYW1lcmFQb3NpdGlvbjsKCgkJCQkJaWYgKCB1Q2FtUG9zICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQl1Q2FtUG9zLnNldFZhbHVlKCBfZ2wsCgkJCQkJCQlfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fAoJCQkJCW1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkgewoKCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdpc09ydGhvZ3JhcGhpYycsIGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSA9PT0gdHJ1ZSApOwoKCQkJCX0KCgkJCQlpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsIHx8CgkJCQkJbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fAoJCQkJCW1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHwKCQkJCQltYXRlcmlhbC5za2lubmluZyApIHsKCgkJCQkJaWYgKCBwcm9ncmFtLm51bU11bHRpdmlld1ZpZXdzID4gMCApIHsKCgkJCQkJCW11bHRpdmlldy51cGRhdGVDYW1lcmFWaWV3TWF0cmljZXNVbmlmb3JtKCBjYW1lcmEsIHBfdW5pZm9ybXMgKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3ZpZXdNYXRyaXgnLCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQkvLyBza2lubmluZyB1bmlmb3JtcyBtdXN0IGJlIHNldCBldmVuIGlmIG1hdGVyaWFsIGRpZG4ndCBjaGFuZ2UKCQkJLy8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSB0ZXh0dXJlIG11c3QgZ28gYmVmb3JlIG90aGVyIHRleHR1cmVzCgkJCS8vIG5vdCBzdXJlIHdoeSwgYnV0IG90aGVyd2lzZSB3ZWlyZCB0aGluZ3MgaGFwcGVuCgoJCQlpZiAoIG1hdGVyaWFsLnNraW5uaW5nICkgewoKCQkJCXBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcgKTsKCQkJCXBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7CgoJCQkJdmFyIHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uOwoKCQkJCWlmICggc2tlbGV0b24gKSB7CgoJCQkJCXZhciBib25lcyA9IHNrZWxldG9uLmJvbmVzOwoKCQkJCQlpZiAoIGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzICkgewoKCQkJCQkJaWYgKCBza2VsZXRvbi5ib25lVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCS8vIGxheW91dCAoMSBtYXRyaXggPSA0IHBpeGVscykKCQkJCQkJCS8vICAgICAgUkdCQSBSR0JBIFJHQkEgUkdCQSAoPT4gY29sdW1uMSwgY29sdW1uMiwgY29sdW1uMywgY29sdW1uNCkKCQkJCQkJCS8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgYm9uZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpCgkJCQkJCQkvLyAgICAgICAxNngxNiBwaXhlbCB0ZXh0dXJlIG1heCAgIDY0IGJvbmVzICogNCBwaXhlbHMgPSAoMTYgKiAxNikKCQkJCQkJCS8vICAgICAgIDMyeDMyIHBpeGVsIHRleHR1cmUgbWF4ICAyNTYgYm9uZXMgKiA0IHBpeGVscyA9ICgzMiAqIDMyKQoJCQkJCQkJLy8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBib25lcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpCgoKCQkJCQkJCXZhciBzaXplID0gTWF0aC5zcXJ0KCBib25lcy5sZW5ndGggKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXgKCQkJCQkJCXNpemUgPSBfTWF0aC5jZWlsUG93ZXJPZlR3byggc2l6ZSApOwoJCQkJCQkJc2l6ZSA9IE1hdGgubWF4KCBzaXplLCA0ICk7CgoJCQkJCQkJdmFyIGJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApOyAvLyA0IGZsb2F0cyBwZXIgUkdCQSBwaXhlbAoJCQkJCQkJYm9uZU1hdHJpY2VzLnNldCggc2tlbGV0b24uYm9uZU1hdHJpY2VzICk7IC8vIGNvcHkgY3VycmVudCB2YWx1ZXMKCgkJCQkJCQl2YXIgYm9uZVRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIGJvbmVNYXRyaWNlcywgc2l6ZSwgc2l6ZSwgUkdCQUZvcm1hdCwgRmxvYXRUeXBlICk7CgoJCQkJCQkJc2tlbGV0b24uYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzOwoJCQkJCQkJc2tlbGV0b24uYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTsKCQkJCQkJCXNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7CgoJCQkJCQl9CgoJCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApOwoJCQkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZVNpemUnLCBza2VsZXRvbi5ib25lVGV4dHVyZVNpemUgKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgc2tlbGV0b24sICdib25lTWF0cmljZXMnICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlpZiAoIHJlZnJlc2hNYXRlcmlhbCB8fCBtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyAhPT0gb2JqZWN0LnJlY2VpdmVTaGFkb3cgKSB7CgoJCQkJbWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgPSBvYmplY3QucmVjZWl2ZVNoYWRvdzsKCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3JlY2VpdmVTaGFkb3cnLCBvYmplY3QucmVjZWl2ZVNoYWRvdyApOwoKCQkJfQoKCQkJaWYgKCByZWZyZXNoTWF0ZXJpYWwgKSB7CgoJCQkJcF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTsKCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nV2hpdGVQb2ludCcsIF90aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCApOwoKCQkJCWlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkgewoKCQkJCQkvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvCgoJCQkJCS8vIG5vdGU6IGFsbCBsaWdodGluZyB1bmlmb3JtcyBhcmUgYWx3YXlzIHNldCBjb3JyZWN0bHkKCQkJCQkvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyCgkJCQkJLy8gdmFsdWVzCgkJCQkJLy8KCQkJCQkvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0CgkJCQkJLy8gdGhlIEdMIHN0YXRlIHdoZW4gcmVxdWlyZWQKCgkJCQkJbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIG1fdW5pZm9ybXMsIHJlZnJlc2hMaWdodHMgKTsKCgkJCQl9CgoJCQkJLy8gcmVmcmVzaCB1bmlmb3JtcyBjb21tb24gdG8gc2V2ZXJhbCBtYXRlcmlhbHMKCgkJCQlpZiAoIGZvZyAmJiBtYXRlcmlhbC5mb2cgKSB7CgoJCQkJCXJlZnJlc2hVbmlmb3Jtc0ZvZyggbV91bmlmb3JtcywgZm9nICk7CgoJCQkJfQoKCQkJCWlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApOwoKCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApOwoJCQkJCXJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsICkgewoKCQkJCQlyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgkJCQkJcmVmcmVzaFVuaWZvcm1zVG9vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkgewoKCQkJCQlyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgkJCQkJcmVmcmVzaFVuaWZvcm1zUGhvbmcoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCApIHsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApOwoKCQkJCQlpZiAoIG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgKSB7CgoJCQkJCQlyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApOwoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgKSB7CgoJCQkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApOwoKCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERlcHRoTWF0ZXJpYWwgKSB7CgoJCQkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCQkJCQlyZWZyZXNoVW5pZm9ybXNEZXB0aCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsICkgewoKCQkJCQlyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgkJCQkJcmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgKSB7CgoJCQkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCQkJCQlyZWZyZXNoVW5pZm9ybXNOb3JtYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNMaW5lQmFzaWNNYXRlcmlhbCApIHsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zTGluZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQkJaWYgKCBtYXRlcmlhbC5pc0xpbmVEYXNoZWRNYXRlcmlhbCApIHsKCgkJCQkJCXJlZnJlc2hVbmlmb3Jtc0Rhc2goIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1BvaW50c01hdGVyaWFsICkgewoKCQkJCQlyZWZyZXNoVW5pZm9ybXNQb2ludHMoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHsKCgkJCQkJcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsICkgewoKCQkJCQltX3VuaWZvcm1zLmNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CgkJCQkJbV91bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7CgoJCQkJCXJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTsKCgkJCQl9CgoJCQkJLy8gUmVjdEFyZWFMaWdodCBUZXh0dXJlCgkJCQkvLyBUT0RPIChtcmRvb2IpOiBGaW5kIGEgbmljZXIgaW1wbGVtZW50YXRpb24KCgkJCQlpZiAoIG1fdW5pZm9ybXMubHRjXzEgIT09IHVuZGVmaW5lZCApIHsgbV91bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18xOyB9CgkJCQlpZiAoIG1fdW5pZm9ybXMubHRjXzIgIT09IHVuZGVmaW5lZCApIHsgbV91bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18yOyB9CgoJCQkJV2ViR0xVbmlmb3Jtcy51cGxvYWQoIF9nbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCwgbV91bmlmb3JtcywgdGV4dHVyZXMgKTsKCgkJCQlpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7CgoJCQkJCW1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlOyAvLyAjMTU1ODEKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkgewoKCQkJCVdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7CgkJCQltYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHsKCgkJCQlwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdjZW50ZXInLCBvYmplY3QuY2VudGVyICk7CgoJCQl9CgoJCQkvLyBjb21tb24gbWF0cmljZXMKCgkJCWlmICggcHJvZ3JhbS5udW1NdWx0aXZpZXdWaWV3cyA+IDAgKSB7CgoJCQkJbXVsdGl2aWV3LnVwZGF0ZU9iamVjdE1hdHJpY2VzVW5pZm9ybXMoIG9iamVjdCwgY2FtZXJhLCBwX3VuaWZvcm1zICk7CgoJCQl9IGVsc2UgewoKCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsVmlld01hdHJpeCcsIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTsKCQkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTsKCgkJCX0KCgkJCXBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsTWF0cml4Jywgb2JqZWN0Lm1hdHJpeFdvcmxkICk7CgoJCQlyZXR1cm4gcHJvZ3JhbTsKCgkJfQoKCQkvLyBVbmlmb3JtcyAocmVmcmVzaCB1bmlmb3JtcyBvYmplY3RzKQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCgkJCXVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5OwoKCQkJaWYgKCBtYXRlcmlhbC5jb2xvciApIHsKCgkJCQl1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmVtaXNzaXZlICkgewoKCQkJCXVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLm1hcCApIHsKCgkJCQl1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkgewoKCQkJCXVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkgewoKCQkJCXVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmVudk1hcCApIHsKCgkJCQl1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7CgoJCQkJLy8gZG9uJ3QgZmxpcCBDdWJlVGV4dHVyZSBlbnZNYXBzLCBmbGlwIGV2ZXJ5dGhpbmcgZWxzZToKCQkJCS8vICBXZWJHTFJlbmRlclRhcmdldEN1YmUgd2lsbCBiZSBmbGlwcGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCQkJLy8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS50ZXh0dXJlIHdpbGwgYmUgZmxpcHBlZCBiZWNhdXNlIGl0J3MgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZQoJCQkJLy8gdGhpcyBjaGVjayBtdXN0IGJlIGhhbmRsZWQgZGlmZmVyZW50bHksIG9yIHJlbW92ZWQgZW50aXJlbHksIGlmIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB1c2VzIGEgQ3ViZVRleHR1cmUgaW4gdGhlIGZ1dHVyZQoJCQkJdW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlID8gLSAxIDogMTsKCgkJCQl1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7CgkJCQl1bmlmb3Jtcy5yZWZyYWN0aW9uUmF0aW8udmFsdWUgPSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW87CgoJCQkJdW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwuZW52TWFwICkuX19tYXhNaXBMZXZlbDsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwubGlnaHRNYXAgKSB7CgoJCQkJdW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDsKCQkJCXVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmFvTWFwICkgewoKCQkJCXVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7CgkJCQl1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5OwoKCQkJfQoKCQkJLy8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzCgkJCS8vIDEuIGNvbG9yIG1hcAoJCQkvLyAyLiBzcGVjdWxhciBtYXAKCQkJLy8gMy4gbm9ybWFsIG1hcAoJCQkvLyA0LiBidW1wIG1hcAoJCQkvLyA1LiBhbHBoYSBtYXAKCQkJLy8gNi4gZW1pc3NpdmUgbWFwCgoJCQl2YXIgdXZTY2FsZU1hcDsKCgkJCWlmICggbWF0ZXJpYWwubWFwICkgewoKCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7CgoJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7CgoJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7CgoJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDsKCgkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwubm9ybWFsTWFwOwoKCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYnVtcE1hcDsKCgkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwOwoKCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkgewoKCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7CgoJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7CgoJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7CgoJCQl9CgoJCQlpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCQkJaWYgKCB1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7CgoJCQkJCXV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7CgoJCQkJfQoKCQkJCWlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkgewoKCQkJCQl1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpOwoKCQkJCX0KCgkJCQl1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApOwoKCQkJfQoKCQkJLy8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzIGZvciB1djIKCQkJLy8gMS4gYW8gbWFwCgkJCS8vIDIuIGxpZ2h0IG1hcAoKCQkJdmFyIHV2MlNjYWxlTWFwOwoKCQkJaWYgKCBtYXRlcmlhbC5hb01hcCApIHsKCgkJCQl1djJTY2FsZU1hcCA9IG1hdGVyaWFsLmFvTWFwOwoKCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwubGlnaHRNYXAgKSB7CgoJCQkJdXYyU2NhbGVNYXAgPSBtYXRlcmlhbC5saWdodE1hcDsKCgkJCX0KCgkJCWlmICggdXYyU2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCQkJaWYgKCB1djJTY2FsZU1hcC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgewoKCQkJCQl1djJTY2FsZU1hcCA9IHV2MlNjYWxlTWFwLnRleHR1cmU7CgoJCQkJfQoKCQkJCWlmICggdXYyU2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHsKCgkJCQkJdXYyU2NhbGVNYXAudXBkYXRlTWF0cml4KCk7CgoJCQkJfQoKCQkJCXVuaWZvcm1zLnV2MlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1djJTY2FsZU1hcC5tYXRyaXggKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMaW5lKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgoJCQl1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CgkJCXVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5OwoKCQl9CgoJCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCgkJCXVuaWZvcm1zLmRhc2hTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemU7CgkJCXVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTsKCQkJdW5pZm9ybXMuc2NhbGUudmFsdWUgPSBtYXRlcmlhbC5zY2FsZTsKCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCgkJCXVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTsKCQkJdW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7CgkJCXVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogX3BpeGVsUmF0aW87CgkJCXVuaWZvcm1zLnNjYWxlLnZhbHVlID0gX2hlaWdodCAqIDAuNTsKCgkJCWlmICggbWF0ZXJpYWwubWFwICkgewoKCQkJCXVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7CgoJCQkJdW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDsKCgkJCX0KCgkJCS8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllcwoJCQkvLyAxLiBjb2xvciBtYXAKCQkJLy8gMi4gYWxwaGEgbWFwCgoJCQl2YXIgdXZTY2FsZU1hcDsKCgkJCWlmICggbWF0ZXJpYWwubWFwICkgewoKCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7CgoJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHsKCgkJCQl1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7CgoJCQl9CgoJCQlpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHsKCgkJCQkJdXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTsKCgkJCQl9CgoJCQkJdW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgoJCQl1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CgkJCXVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5OwoJCQl1bmlmb3Jtcy5yb3RhdGlvbi52YWx1ZSA9IG1hdGVyaWFsLnJvdGF0aW9uOwoKCQkJaWYgKCBtYXRlcmlhbC5tYXAgKSB7CgoJCQkJdW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHsKCgkJCQl1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwOwoKCQkJfQoKCQkJLy8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzCgkJCS8vIDEuIGNvbG9yIG1hcAoJCQkvLyAyLiBhbHBoYSBtYXAKCgkJCXZhciB1dlNjYWxlTWFwOwoKCQkJaWYgKCBtYXRlcmlhbC5tYXAgKSB7CgoJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDsKCgkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkgewoKCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDsKCgkJCX0KCgkJCWlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkgewoKCQkJCQl1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpOwoKCQkJCX0KCgkJCQl1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0ZvZyggdW5pZm9ybXMsIGZvZyApIHsKCgkJCXVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlLmNvcHkoIGZvZy5jb2xvciApOwoKCQkJaWYgKCBmb2cuaXNGb2cgKSB7CgoJCQkJdW5pZm9ybXMuZm9nTmVhci52YWx1ZSA9IGZvZy5uZWFyOwoJCQkJdW5pZm9ybXMuZm9nRmFyLnZhbHVlID0gZm9nLmZhcjsKCgkJCX0gZWxzZSBpZiAoIGZvZy5pc0ZvZ0V4cDIgKSB7CgoJCQkJdW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5OwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCgkJCWlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7CgoJCQkJdW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKCQkJdW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTsKCQkJdW5pZm9ybXMuc2hpbmluZXNzLnZhbHVlID0gTWF0aC5tYXgoIG1hdGVyaWFsLnNoaW5pbmVzcywgMWUtNCApOyAvLyB0byBwcmV2ZW50IHBvdyggMC4wLCAwLjAgKQoKCQkJaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHsKCgkJCQl1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5idW1wTWFwICkgewoKCQkJCXVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwOwoJCQkJdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlOwoJCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTsgfQoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7CgoJCQkJdW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwOwoJCQkJdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTsKCQkJCWlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKCQkJdW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTsKCQkJdW5pZm9ybXMuc2hpbmluZXNzLnZhbHVlID0gTWF0aC5tYXgoIG1hdGVyaWFsLnNoaW5pbmVzcywgMWUtNCApOyAvLyB0byBwcmV2ZW50IHBvdyggMC4wLCAwLjAgKQoKCQkJaWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5ncmFkaWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmdyYWRpZW50TWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHsKCgkJCQl1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5idW1wTWFwICkgewoKCQkJCXVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwOwoJCQkJdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlOwoJCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTsgfQoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7CgoJCQkJdW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwOwoJCQkJdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTsKCQkJCWlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHsKCgkJCXVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzczsKCQkJdW5pZm9ybXMubWV0YWxuZXNzLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzOwoKCQkJaWYgKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgKSB7CgoJCQkJdW5pZm9ybXMucm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgKSB7CgoJCQkJdW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHsKCgkJCQl1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwOwoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5idW1wTWFwICkgewoKCQkJCXVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwOwoJCQkJdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlOwoJCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTsgfQoKCQkJfQoKCQkJaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7CgoJCQkJdW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwOwoJCQkJdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTsKCQkJCWlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmVudk1hcCApIHsKCgkJCQkvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb24KCQkJCXVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKCQkJcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApOwoKCQkJdW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uCgoJCQl1bmlmb3Jtcy5jbGVhcmNvYXQudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXQ7CgkJCXVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzczsKCQkJaWYgKCBtYXRlcmlhbC5zaGVlbiApIHsgdW5pZm9ybXMuc2hlZW4udmFsdWUuY29weSggbWF0ZXJpYWwuc2hlZW4gKTsgfQoKCQkJaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSB7CgoJCQkJdW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTsKCQkJCXVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDsKCgkJCQlpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgewoKCQkJCQl1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTsKCgkJCQl9CgoJCQl9CgoJCQl1bmlmb3Jtcy50cmFuc3BhcmVuY3kudmFsdWUgPSBtYXRlcmlhbC50cmFuc3BhcmVuY3k7CgoJCX0KCgkJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgoJCQlpZiAoIG1hdGVyaWFsLm1hdGNhcCApIHsKCgkJCQl1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7CgoJCQkJdW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7CgkJCQl1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7CgkJCQlpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgeyB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxOyB9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7CgkJCQl1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApOwoJCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7IH0KCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkgewoKCQkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDsKCQkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhczsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEZXB0aCggdW5pZm9ybXMsIG1hdGVyaWFsICkgewoKCQkJaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7CgoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTsKCQkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzOwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgoJCQlpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7CgoJCQl9CgoJCQl1bmlmb3Jtcy5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5jb3B5KCBtYXRlcmlhbC5yZWZlcmVuY2VQb3NpdGlvbiApOwoJCQl1bmlmb3Jtcy5uZWFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5uZWFyRGlzdGFuY2U7CgkJCXVuaWZvcm1zLmZhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuZmFyRGlzdGFuY2U7CgoJCX0KCgkJZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTm9ybWFsKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7CgoJCQlpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7CgoJCQkJdW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7CgkJCQl1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7CgkJCQlpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgeyB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxOyB9CgoJCQl9CgoJCQlpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHsKCgkJCQl1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7CgkJCQl1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApOwoJCQkJaWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHsgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7IH0KCgkJCX0KCgkJCWlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkgewoKCQkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDsKCQkJCXVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhczsKCgkJCX0KCgkJfQoKCQkvLyBJZiB1bmlmb3JtcyBhcmUgbWFya2VkIGFzIGNsZWFuLCB0aGV5IGRvbid0IG5lZWQgdG8gYmUgbG9hZGVkIHRvIHRoZSBHUFUuCgoJCWZ1bmN0aW9uIG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCB1bmlmb3JtcywgdmFsdWUgKSB7CgoJCQl1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZSA9IHZhbHVlOwoJCQl1bmlmb3Jtcy5saWdodFByb2JlLm5lZWRzVXBkYXRlID0gdmFsdWU7CgoJCQl1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlOwoJCQl1bmlmb3Jtcy5wb2ludExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlOwoJCQl1bmlmb3Jtcy5zcG90TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7CgkJCXVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7CgkJCXVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTsKCgkJfQoKCQlmdW5jdGlvbiBtYXRlcmlhbE5lZWRzTGlnaHRzKCBtYXRlcmlhbCApIHsKCgkJCXJldHVybiBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHwKCQkJCW1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fAoJCQkJKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmIG1hdGVyaWFsLmxpZ2h0cyA9PT0gdHJ1ZSApOwoKCQl9CgoJCS8vIHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEOwoJCXRoaXMuc2V0VGV4dHVyZTJEID0gKCBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgd2FybmVkID0gZmFsc2U7CgoJCQkvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogcGVlbCB0ZXh0dXJlLnRleHR1cmUKCQkJcmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHsKCgkJCQlpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgewoKCQkJCQlpZiAoICEgd2FybmVkICkgewoKCQkJCQkJY29uc29sZS53YXJuKCAiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXRUZXh0dXJlMkQ6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuIiApOwoJCQkJCQl3YXJuZWQgPSB0cnVlOwoKCQkJCQl9CgoJCQkJCXRleHR1cmUgPSB0ZXh0dXJlLnRleHR1cmU7CgoJCQkJfQoKCQkJCXRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApOwoKCQkJfTsKCgkJfSgpICk7CgoJCS8vCgkJdGhpcy5zZXRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoIF9mcmFtZWJ1ZmZlciAhPT0gdmFsdWUgJiYgX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgKSB7IF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCB2YWx1ZSApOyB9CgoJCQlfZnJhbWVidWZmZXIgPSB2YWx1ZTsKCgkJfTsKCgkJdGhpcy5nZXRBY3RpdmVDdWJlRmFjZSA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBfY3VycmVudEFjdGl2ZUN1YmVGYWNlOwoKCQl9OwoKCQl0aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsID0gZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWw7CgoJCX07CgoJCXRoaXMuZ2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0OwoKCQl9OwoKCQl0aGlzLnNldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKSB7CgoJCQlfY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDsKCQkJX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlOwoJCQlfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7CgoJCQlpZiAoIHJlbmRlclRhcmdldCAmJiBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7CgoJCQkJdGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApOwoKCQkJfQoKCQkJdmFyIGZyYW1lYnVmZmVyID0gX2ZyYW1lYnVmZmVyOwoJCQl2YXIgaXNDdWJlID0gZmFsc2U7CgoJCQlpZiAoIHJlbmRlclRhcmdldCApIHsKCgkJCQl2YXIgX193ZWJnbEZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjsKCgkJCQlpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApIHsKCgkJCQkJZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIHx8IDAgXTsKCQkJCQlpc0N1YmUgPSB0cnVlOwoKCQkJCX0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSB7CgoJCQkJCWZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlcjsKCgkJCQl9IGVsc2UgewoKCQkJCQlmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlcjsKCgkJCQl9CgoJCQkJX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCByZW5kZXJUYXJnZXQudmlld3BvcnQgKTsKCQkJCV9jdXJyZW50U2Npc3Nvci5jb3B5KCByZW5kZXJUYXJnZXQuc2Npc3NvciApOwoJCQkJX2N1cnJlbnRTY2lzc29yVGVzdCA9IHJlbmRlclRhcmdldC5zY2lzc29yVGVzdDsKCgkJCX0gZWxzZSB7CgoJCQkJX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpOwoJCQkJX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKTsKCQkJCV9jdXJyZW50U2Npc3NvclRlc3QgPSBfc2Npc3NvclRlc3Q7CgoJCQl9CgoJCQlpZiAoIF9jdXJyZW50RnJhbWVidWZmZXIgIT09IGZyYW1lYnVmZmVyICkgewoKCQkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApOwoJCQkJX2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyOwoKCQkJfQoKCQkJc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQgKTsKCQkJc3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yICk7CgkJCXN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7CgoJCQlpZiAoIGlzQ3ViZSApIHsKCgkJCQl2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTsKCQkJCV9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDM2MDY0LCAzNDA2OSArICggYWN0aXZlQ3ViZUZhY2UgfHwgMCApLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgfHwgMCApOwoKCQkJfQoKCQl9OwoKCQl0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4ICkgewoKCQkJaWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC4nICk7CgkJCQlyZXR1cm47CgoJCQl9CgoJCQl2YXIgZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyOwoKCQkJaWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgJiYgYWN0aXZlQ3ViZUZhY2VJbmRleCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlSW5kZXggXTsKCgkJCX0KCgkJCWlmICggZnJhbWVidWZmZXIgKSB7CgoJCQkJdmFyIHJlc3RvcmUgPSBmYWxzZTsKCgkJCQlpZiAoIGZyYW1lYnVmZmVyICE9PSBfY3VycmVudEZyYW1lYnVmZmVyICkgewoKCQkJCQlfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTsKCgkJCQkJcmVzdG9yZSA9IHRydWU7CgoJCQkJfQoKCQkJCXRyeSB7CgoJCQkJCXZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7CgkJCQkJdmFyIHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDsKCQkJCQl2YXIgdGV4dHVyZVR5cGUgPSB0ZXh0dXJlLnR5cGU7CgoJCQkJCWlmICggdGV4dHVyZUZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICkgIT09IF9nbC5nZXRQYXJhbWV0ZXIoIDM1NzM5ICkgKSB7CgoJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuJyApOwoJCQkJCQlyZXR1cm47CgoJCQkJCX0KCgkJCQkJaWYgKCB0ZXh0dXJlVHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKCAzNTczOCApICYmIC8vIElFMTEsIEVkZ2UgYW5kIENocm9tZSBNYWMgPCA1MiAoIzk1MTMpCgkJCQkJCSEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3gKCQkJCQkJISAoIHRleHR1cmVUeXBlID09PSBIYWxmRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApIDogZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgKSApICkgewoKCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7CgkJCQkJCXJldHVybjsKCgkJCQkJfQoKCQkJCQlpZiAoIF9nbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKCAzNjE2MCApID09PSAzNjA1MyApIHsKCgkJCQkJCS8vIHRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50IGVuc3VyZXMgdmFsaWQgcmVhZCByZXF1ZXN0cyAobm8gb3V0LW9mLWJvdW5kcyBwaXhlbHMsIHNlZSAjODYwNCkKCgkJCQkJCWlmICggKCB4ID49IDAgJiYgeCA8PSAoIHJlbmRlclRhcmdldC53aWR0aCAtIHdpZHRoICkgKSAmJiAoIHkgPj0gMCAmJiB5IDw9ICggcmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCApICkgKSB7CgoJCQkJCQkJX2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZWFkUGl4ZWxzIGZyb20gcmVuZGVyVGFyZ2V0IGZhaWxlZC4gRnJhbWVidWZmZXIgbm90IGNvbXBsZXRlLicgKTsKCgkJCQkJfQoKCQkJCX0gZmluYWxseSB7CgoJCQkJCWlmICggcmVzdG9yZSApIHsKCgkJCQkJCV9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBfY3VycmVudEZyYW1lYnVmZmVyICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCX07CgoJCXRoaXMuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgdGV4dHVyZSwgbGV2ZWwgKSB7CgoJCQlpZiAoIGxldmVsID09PSB1bmRlZmluZWQgKSB7IGxldmVsID0gMDsgfQoKCQkJdmFyIGxldmVsU2NhbGUgPSBNYXRoLnBvdyggMiwgLSBsZXZlbCApOwoJCQl2YXIgd2lkdGggPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApOwoJCQl2YXIgaGVpZ2h0ID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7CgkJCXZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICk7CgoJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTsKCgkJCV9nbC5jb3B5VGV4SW1hZ2UyRCggMzU1MywgbGV2ZWwsIGdsRm9ybWF0LCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB3aWR0aCwgaGVpZ2h0LCAwICk7CgoJCQlzdGF0ZS51bmJpbmRUZXh0dXJlKCk7CgoJCX07CgoJCXRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBsZXZlbCApIHsKCgkJCXZhciB3aWR0aCA9IHNyY1RleHR1cmUuaW1hZ2Uud2lkdGg7CgkJCXZhciBoZWlnaHQgPSBzcmNUZXh0dXJlLmltYWdlLmhlaWdodDsKCQkJdmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS5mb3JtYXQgKTsKCQkJdmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUudHlwZSApOwoKCQkJdGV4dHVyZXMuc2V0VGV4dHVyZTJEKCBkc3RUZXh0dXJlLCAwICk7CgoJCQlpZiAoIHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSApIHsKCgkJCQlfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZS5kYXRhICk7CgoJCQl9IGVsc2UgewoKCQkJCV9nbC50ZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCB8fCAwLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBnbEZvcm1hdCwgZ2xUeXBlLCBzcmNUZXh0dXJlLmltYWdlICk7CgoJCQl9CgoJCQlzdGF0ZS51bmJpbmRUZXh0dXJlKCk7CgoJCX07CgoJCXRoaXMuaW5pdFRleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmUgKSB7CgoJCQl0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTsKCgkJCXN0YXRlLnVuYmluZFRleHR1cmUoKTsKCgkJfTsKCgkJaWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHsKCgkJCV9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKCgkJfQoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gRm9nRXhwMiggY29sb3IsIGRlbnNpdHkgKSB7CgoJCXRoaXMubmFtZSA9ICcnOwoKCQl0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApOwoJCXRoaXMuZGVuc2l0eSA9ICggZGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgPyBkZW5zaXR5IDogMC4wMDAyNTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggRm9nRXhwMi5wcm90b3R5cGUsIHsKCgkJaXNGb2dFeHAyOiB0cnVlLAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyBGb2dFeHAyKCB0aGlzLmNvbG9yLCB0aGlzLmRlbnNpdHkgKTsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoIC8qIG1ldGEgKi8gKSB7CgoJCQlyZXR1cm4gewoJCQkJdHlwZTogJ0ZvZ0V4cDInLAoJCQkJY29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksCgkJCQlkZW5zaXR5OiB0aGlzLmRlbnNpdHkKCQkJfTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gRm9nKCBjb2xvciwgbmVhciwgZmFyICkgewoKCQl0aGlzLm5hbWUgPSAnJzsKCgkJdGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTsKCgkJdGhpcy5uZWFyID0gKCBuZWFyICE9PSB1bmRlZmluZWQgKSA/IG5lYXIgOiAxOwoJCXRoaXMuZmFyID0gKCBmYXIgIT09IHVuZGVmaW5lZCApID8gZmFyIDogMTAwMDsKCgl9CgoJT2JqZWN0LmFzc2lnbiggRm9nLnByb3RvdHlwZSwgewoKCQlpc0ZvZzogdHJ1ZSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgRm9nKCB0aGlzLmNvbG9yLCB0aGlzLm5lYXIsIHRoaXMuZmFyICk7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCAvKiBtZXRhICovICkgewoKCQkJcmV0dXJuIHsKCQkJCXR5cGU6ICdGb2cnLAoJCQkJY29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksCgkJCQluZWFyOiB0aGlzLm5lYXIsCgkJCQlmYXI6IHRoaXMuZmFyCgkJCX07CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXMKCSAqLwoKCWZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlICkgewoKCQl0aGlzLmFycmF5ID0gYXJyYXk7CgkJdGhpcy5zdHJpZGUgPSBzdHJpZGU7CgkJdGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBzdHJpZGUgOiAwOwoKCQl0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlOwoJCXRoaXMudXBkYXRlUmFuZ2UgPSB7IG9mZnNldDogMCwgY291bnQ6IC0gMSB9OwoKCQl0aGlzLnZlcnNpb24gPSAwOwoKCX0KCglPYmplY3QuZGVmaW5lUHJvcGVydHkoIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwgJ25lZWRzVXBkYXRlJywgewoKCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoIHZhbHVlID09PSB0cnVlICkgeyB0aGlzLnZlcnNpb24gKys7IH0KCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsIHsKCgkJaXNJbnRlcmxlYXZlZEJ1ZmZlcjogdHJ1ZSwKCgkJb25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkge30sCgoJCXNldFVzYWdlOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy51c2FnZSA9IHZhbHVlOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJdGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApOwoJCQl0aGlzLmNvdW50ID0gc291cmNlLmNvdW50OwoJCQl0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7CgkJCXRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY29weUF0OiBmdW5jdGlvbiAoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7CgoJCQlpbmRleDEgKj0gdGhpcy5zdHJpZGU7CgkJCWluZGV4MiAqPSBhdHRyaWJ1dGUuc3RyaWRlOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpICsrICkgewoKCQkJCXRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCQl9LAoKCQlvblVwbG9hZDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHsKCgkJCXRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXMKCSAqLwoKCWZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgaXRlbVNpemUsIG9mZnNldCwgbm9ybWFsaXplZCApIHsKCgkJdGhpcy5kYXRhID0gaW50ZXJsZWF2ZWRCdWZmZXI7CgkJdGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplOwoJCXRoaXMub2Zmc2V0ID0gb2Zmc2V0OwoKCQl0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkID09PSB0cnVlOwoKCX0KCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7CgoJCWNvdW50OiB7CgoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQlyZXR1cm4gdGhpcy5kYXRhLmNvdW50OwoKCQkJfQoKCQl9LAoKCQlhcnJheTogewoKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuZGF0YS5hcnJheTsKCgkJCX0KCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHsKCgkJaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSwKCgkJc2V0WDogZnVuY3Rpb24gKCBpbmRleCwgeCApIHsKCgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXSA9IHg7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0WTogZnVuY3Rpb24gKCBpbmRleCwgeSApIHsKCgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF0gPSB5OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldFo6IGZ1bmN0aW9uICggaW5kZXgsIHogKSB7CgoJCQl0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdID0gejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRXOiBmdW5jdGlvbiAoIGluZGV4LCB3ICkgewoKCQkJdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXSA9IHc7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0WDogZnVuY3Rpb24gKCBpbmRleCApIHsKCgkJCXJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07CgoJCX0sCgoJCWdldFk6IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQlyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXTsKCgkJfSwKCgkJZ2V0WjogZnVuY3Rpb24gKCBpbmRleCApIHsKCgkJCXJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdOwoKCQl9LAoKCQlnZXRXOiBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkJcmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07CgoJCX0sCgoJCXNldFhZOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5ICkgewoKCQkJaW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDsKCgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4OwoJCQl0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRYWVo6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHogKSB7CgoJCQlpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0OwoKCQkJdGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7CgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5OwoJCQl0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMiBdID0gejsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRYWVpXOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6LCB3ICkgewoKCQkJaW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDsKCgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4OwoJCQl0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTsKCQkJdGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7CgkJCXRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAzIF0gPSB3OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICoKCSAqIHBhcmFtZXRlcnMgPSB7CgkgKiAgY29sb3I6IDxoZXg+LAoJICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICByb3RhdGlvbjogPGZsb2F0PiwKCSAqICBzaXplQXR0ZW51YXRpb246IDxib29sPgoJICogfQoJICovCgoJZnVuY3Rpb24gU3ByaXRlTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCU1hdGVyaWFsLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1Nwcml0ZU1hdGVyaWFsJzsKCgkJdGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsKCgkJdGhpcy5tYXAgPSBudWxsOwoKCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCgkJdGhpcy5yb3RhdGlvbiA9IDA7CgoJCXRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTsKCgkJdGhpcy50cmFuc3BhcmVudCA9IHRydWU7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCVNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ByaXRlTWF0ZXJpYWw7CglTcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuaXNTcHJpdGVNYXRlcmlhbCA9IHRydWU7CgoJU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7CgoJCXRoaXMubWFwID0gc291cmNlLm1hcDsKCgkJdGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDsKCgkJdGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjsKCgkJdGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCgl2YXIgX2dlb21ldHJ5OwoKCXZhciBfaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF93b3JsZFNjYWxlID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfbXZQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7CgoJdmFyIF9hbGlnbmVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpOwoJdmFyIF9yb3RhdGVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpOwoJdmFyIF92aWV3V29ybGRNYXRyaXggPSBuZXcgTWF0cml4NCgpOwoKCXZhciBfdkEkMSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3ZCJDEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92QyQxID0gbmV3IFZlY3RvcjMoKTsKCgl2YXIgX3V2QSQxID0gbmV3IFZlY3RvcjIoKTsKCXZhciBfdXZCJDEgPSBuZXcgVmVjdG9yMigpOwoJdmFyIF91dkMkMSA9IG5ldyBWZWN0b3IyKCk7CgoJZnVuY3Rpb24gU3ByaXRlKCBtYXRlcmlhbCApIHsKCgkJT2JqZWN0M0QuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnU3ByaXRlJzsKCgkJaWYgKCBfZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHsKCgkJCV9nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoKCQkJdmFyIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIFsKCQkJCS0gMC41LCAtIDAuNSwgMCwgMCwgMCwKCQkJCTAuNSwgLSAwLjUsIDAsIDEsIDAsCgkJCQkwLjUsIDAuNSwgMCwgMSwgMSwKCQkJCS0gMC41LCAwLjUsIDAsIDAsIDEKCQkJXSApOwoKCQkJdmFyIGludGVybGVhdmVkQnVmZmVyID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBmbG9hdDMyQXJyYXksIDUgKTsKCgkJCV9nZW9tZXRyeS5zZXRJbmRleCggWyAwLCAxLCAyLAkwLCAyLCAzIF0gKTsKCQkJX2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApOwoJCQlfZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCAyLCAzLCBmYWxzZSApICk7CgoJCX0KCgkJdGhpcy5nZW9tZXRyeSA9IF9nZW9tZXRyeTsKCQl0aGlzLm1hdGVyaWFsID0gKCBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbCA6IG5ldyBTcHJpdGVNYXRlcmlhbCgpOwoKCQl0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApOwoKCX0KCglTcHJpdGUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFNwcml0ZSwKCgkJaXNTcHJpdGU6IHRydWUsCgoJCXJheWNhc3Q6IGZ1bmN0aW9uICggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkgewoKCQkJaWYgKCByYXljYXN0ZXIuY2FtZXJhID09PSBudWxsICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcHJpdGU6ICJSYXljYXN0ZXIuY2FtZXJhIiBuZWVkcyB0byBiZSBzZXQgaW4gb3JkZXIgdG8gcmF5Y2FzdCBhZ2FpbnN0IHNwcml0ZXMuJyApOwoKCQkJfQoKCQkJX3dvcmxkU2NhbGUuc2V0RnJvbU1hdHJpeFNjYWxlKCB0aGlzLm1hdHJpeFdvcmxkICk7CgoJCQlfdmlld1dvcmxkTWF0cml4LmNvcHkoIHJheWNhc3Rlci5jYW1lcmEubWF0cml4V29ybGQgKTsKCQkJdGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHRoaXMubWF0cml4V29ybGQgKTsKCgkJCV9tdlBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tb2RlbFZpZXdNYXRyaXggKTsKCgkJCWlmICggcmF5Y2FzdGVyLmNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICYmIHRoaXMubWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID09PSBmYWxzZSApIHsKCgkJCQlfd29ybGRTY2FsZS5tdWx0aXBseVNjYWxhciggLSBfbXZQb3NpdGlvbi56ICk7CgoJCQl9CgoJCQl2YXIgcm90YXRpb24gPSB0aGlzLm1hdGVyaWFsLnJvdGF0aW9uOwoJCQl2YXIgc2luLCBjb3M7CgkJCWlmICggcm90YXRpb24gIT09IDAgKSB7CgoJCQkJY29zID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7CgkJCQlzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTsKCgkJCX0KCgkJCXZhciBjZW50ZXIgPSB0aGlzLmNlbnRlcjsKCgkJCXRyYW5zZm9ybVZlcnRleCggX3ZBJDEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7CgkJCXRyYW5zZm9ybVZlcnRleCggX3ZCJDEuc2V0KCAwLjUsIC0gMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApOwoJCQl0cmFuc2Zvcm1WZXJ0ZXgoIF92QyQxLnNldCggMC41LCAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7CgoJCQlfdXZBJDEuc2V0KCAwLCAwICk7CgkJCV91dkIkMS5zZXQoIDEsIDAgKTsKCQkJX3V2QyQxLnNldCggMSwgMSApOwoKCQkJLy8gY2hlY2sgZmlyc3QgdHJpYW5nbGUKCQkJdmFyIGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSQxLCBfdkIkMSwgX3ZDJDEsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTsKCgkJCWlmICggaW50ZXJzZWN0ID09PSBudWxsICkgewoKCQkJCS8vIGNoZWNrIHNlY29uZCB0cmlhbmdsZQoJCQkJdHJhbnNmb3JtVmVydGV4KCBfdkIkMS5zZXQoIC0gMC41LCAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7CgkJCQlfdXZCJDEuc2V0KCAwLCAxICk7CgoJCQkJaW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZSggX3ZBJDEsIF92QyQxLCBfdkIkMSwgZmFsc2UsIF9pbnRlcnNlY3RQb2ludCApOwoJCQkJaWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7CgoJCQkJCXJldHVybjsKCgkJCQl9CgoJCQl9CgoJCQl2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0UG9pbnQgKTsKCgkJCWlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSB7IHJldHVybjsgfQoKCQkJaW50ZXJzZWN0cy5wdXNoKCB7CgoJCQkJZGlzdGFuY2U6IGRpc3RhbmNlLAoJCQkJcG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLAoJCQkJdXY6IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0UG9pbnQsIF92QSQxLCBfdkIkMSwgX3ZDJDEsIF91dkEkMSwgX3V2QiQxLCBfdXZDJDEsIG5ldyBWZWN0b3IyKCkgKSwKCQkJCWZhY2U6IG51bGwsCgkJCQlvYmplY3Q6IHRoaXMKCgkJCX0gKTsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQlPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCWlmICggc291cmNlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgeyB0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7IH0KCgkJCXJldHVybiB0aGlzOwoKCQl9CgoKCX0gKTsKCglmdW5jdGlvbiB0cmFuc2Zvcm1WZXJ0ZXgoIHZlcnRleFBvc2l0aW9uLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHNjYWxlLCBzaW4sIGNvcyApIHsKCgkJLy8gY29tcHV0ZSBwb3NpdGlvbiBpbiBjYW1lcmEgc3BhY2UKCQlfYWxpZ25lZFBvc2l0aW9uLnN1YlZlY3RvcnMoIHZlcnRleFBvc2l0aW9uLCBjZW50ZXIgKS5hZGRTY2FsYXIoIDAuNSApLm11bHRpcGx5KCBzY2FsZSApOwoKCQkvLyB0byBjaGVjayBpZiByb3RhdGlvbiBpcyBub3QgemVybwoJCWlmICggc2luICE9PSB1bmRlZmluZWQgKSB7CgoJCQlfcm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTsKCQkJX3JvdGF0ZWRQb3NpdGlvbi55ID0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnggKSArICggY29zICogX2FsaWduZWRQb3NpdGlvbi55ICk7CgoJCX0gZWxzZSB7CgoJCQlfcm90YXRlZFBvc2l0aW9uLmNvcHkoIF9hbGlnbmVkUG9zaXRpb24gKTsKCgkJfQoKCgkJdmVydGV4UG9zaXRpb24uY29weSggbXZQb3NpdGlvbiApOwoJCXZlcnRleFBvc2l0aW9uLnggKz0gX3JvdGF0ZWRQb3NpdGlvbi54OwoJCXZlcnRleFBvc2l0aW9uLnkgKz0gX3JvdGF0ZWRQb3NpdGlvbi55OwoKCQkvLyB0cmFuc2Zvcm0gdG8gd29ybGQgc3BhY2UKCQl2ZXJ0ZXhQb3NpdGlvbi5hcHBseU1hdHJpeDQoIF92aWV3V29ybGRNYXRyaXggKTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgX3YxJDQgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92MiQyID0gbmV3IFZlY3RvcjMoKTsKCglmdW5jdGlvbiBMT0QoKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0xPRCc7CgoJCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7CgkJCWxldmVsczogewoJCQkJZW51bWVyYWJsZTogdHJ1ZSwKCQkJCXZhbHVlOiBbXQoJCQl9CgkJfSApOwoKCQl0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOwoKCX0KCglMT0QucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IExPRCwKCgkJaXNMT0Q6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJT2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCBmYWxzZSApOwoKCQkJdmFyIGxldmVscyA9IHNvdXJjZS5sZXZlbHM7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTsKCgkJCQl0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTsKCgkJCX0KCgkJCXRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWFkZExldmVsOiBmdW5jdGlvbiAoIG9iamVjdCwgZGlzdGFuY2UgKSB7CgoJCQlpZiAoIGRpc3RhbmNlID09PSB1bmRlZmluZWQgKSB7IGRpc3RhbmNlID0gMDsgfQoKCQkJZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTsKCgkJCXZhciBsZXZlbHMgPSB0aGlzLmxldmVsczsKCgkJCWZvciAoIHZhciBsID0gMDsgbCA8IGxldmVscy5sZW5ndGg7IGwgKysgKSB7CgoJCQkJaWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgbCBdLmRpc3RhbmNlICkgewoKCQkJCQlicmVhazsKCgkJCQl9CgoJCQl9CgoJCQlsZXZlbHMuc3BsaWNlKCBsLCAwLCB7IGRpc3RhbmNlOiBkaXN0YW5jZSwgb2JqZWN0OiBvYmplY3QgfSApOwoKCQkJdGhpcy5hZGQoIG9iamVjdCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldE9iamVjdEZvckRpc3RhbmNlOiBmdW5jdGlvbiAoIGRpc3RhbmNlICkgewoKCQkJdmFyIGxldmVscyA9IHRoaXMubGV2ZWxzOwoKCQkJaWYgKCBsZXZlbHMubGVuZ3RoID4gMCApIHsKCgkJCQlmb3IgKCB2YXIgaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJaWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgaSBdLmRpc3RhbmNlICkgewoKCQkJCQkJYnJlYWs7CgoJCQkJCX0KCgkJCQl9CgoJCQkJcmV0dXJuIGxldmVsc1sgaSAtIDEgXS5vYmplY3Q7CgoJCQl9CgoJCQlyZXR1cm4gbnVsbDsKCgkJfSwKCgkJcmF5Y2FzdDogZnVuY3Rpb24gKCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7CgoJCQl2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7CgoJCQlpZiAoIGxldmVscy5sZW5ndGggPiAwICkgewoKCQkJCV92MSQ0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApOwoKCQkJCXZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF92MSQ0ICk7CgoJCQkJdGhpcy5nZXRPYmplY3RGb3JEaXN0YW5jZSggZGlzdGFuY2UgKS5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTsKCgkJCX0KCgkJfSwKCgkJdXBkYXRlOiBmdW5jdGlvbiAoIGNhbWVyYSApIHsKCgkJCXZhciBsZXZlbHMgPSB0aGlzLmxldmVsczsKCgkJCWlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7CgoJCQkJX3YxJDQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTsKCQkJCV92MiQyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApOwoKCQkJCXZhciBkaXN0YW5jZSA9IF92MSQ0LmRpc3RhbmNlVG8oIF92MiQyICk7CgoJCQkJbGV2ZWxzWyAwIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlOwoKCQkJCWZvciAoIHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQlpZiAoIGRpc3RhbmNlID49IGxldmVsc1sgaSBdLmRpc3RhbmNlICkgewoKCQkJCQkJbGV2ZWxzWyBpIC0gMSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7CgkJCQkJCWxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWJyZWFrOwoKCQkJCQl9CgoJCQkJfQoKCQkJCWZvciAoIDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCWxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7CgoJCQkJfQoKCQkJfQoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHsKCgkJCXZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7CgoJCQlpZiAoIHRoaXMuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSB7IGRhdGEub2JqZWN0LmF1dG9VcGRhdGUgPSBmYWxzZTsgfQoKCQkJZGF0YS5vYmplY3QubGV2ZWxzID0gW107CgoJCQl2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTsKCgkJCQlkYXRhLm9iamVjdC5sZXZlbHMucHVzaCggewoJCQkJCW9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsCgkJCQkJZGlzdGFuY2U6IGxldmVsLmRpc3RhbmNlCgkJCQl9ICk7CgoJCQl9CgoJCQlyZXR1cm4gZGF0YTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tCgkgKi8KCglmdW5jdGlvbiBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICkgewoKCQlpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2ggbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7CgoJCX0KCgkJTWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJdGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJzsKCgkJdGhpcy5iaW5kTW9kZSA9ICdhdHRhY2hlZCc7CgkJdGhpcy5iaW5kTWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCQl0aGlzLmJpbmRNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTsKCgl9CgoJU2tpbm5lZE1lc2gucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTWVzaC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogU2tpbm5lZE1lc2gsCgoJCWlzU2tpbm5lZE1lc2g6IHRydWUsCgoJCWJpbmQ6IGZ1bmN0aW9uICggc2tlbGV0b24sIGJpbmRNYXRyaXggKSB7CgoJCQl0aGlzLnNrZWxldG9uID0gc2tlbGV0b247CgoJCQlpZiAoIGJpbmRNYXRyaXggPT09IHVuZGVmaW5lZCApIHsKCgkJCQl0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7CgoJCQkJdGhpcy5za2VsZXRvbi5jYWxjdWxhdGVJbnZlcnNlcygpOwoKCQkJCWJpbmRNYXRyaXggPSB0aGlzLm1hdHJpeFdvcmxkOwoKCQkJfQoKCQkJdGhpcy5iaW5kTWF0cml4LmNvcHkoIGJpbmRNYXRyaXggKTsKCQkJdGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCBiaW5kTWF0cml4ICk7CgoJCX0sCgoJCXBvc2U6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMuc2tlbGV0b24ucG9zZSgpOwoKCQl9LAoKCQlub3JtYWxpemVTa2luV2VpZ2h0czogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7CgoJCQl2YXIgc2tpbldlaWdodCA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0OwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gc2tpbldlaWdodC5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmVjdG9yLnggPSBza2luV2VpZ2h0LmdldFgoIGkgKTsKCQkJCXZlY3Rvci55ID0gc2tpbldlaWdodC5nZXRZKCBpICk7CgkJCQl2ZWN0b3IueiA9IHNraW5XZWlnaHQuZ2V0WiggaSApOwoJCQkJdmVjdG9yLncgPSBza2luV2VpZ2h0LmdldFcoIGkgKTsKCgkJCQl2YXIgc2NhbGUgPSAxLjAgLyB2ZWN0b3IubWFuaGF0dGFuTGVuZ3RoKCk7CgoJCQkJaWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7CgoJCQkJCXZlY3Rvci5tdWx0aXBseVNjYWxhciggc2NhbGUgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQl2ZWN0b3Iuc2V0KCAxLCAwLCAwLCAwICk7IC8vIGRvIHNvbWV0aGluZyByZWFzb25hYmxlCgoJCQkJfQoKCQkJCXNraW5XZWlnaHQuc2V0WFlaVyggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdmVjdG9yLncgKTsKCgkJCX0KCgkJfSwKCgkJdXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7CgoJCQlNZXNoLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApOwoKCQkJaWYgKCB0aGlzLmJpbmRNb2RlID09PSAnYXR0YWNoZWQnICkgewoKCQkJCXRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApOwoKCQkJfSBlbHNlIGlmICggdGhpcy5iaW5kTW9kZSA9PT0gJ2RldGFjaGVkJyApIHsKCgkJCQl0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYmluZE1hdHJpeCApOwoKCQkJfSBlbHNlIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSApOwoKCQkJfQoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1pY2hhZWwgZ3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbQoJICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tCgkgKi8KCgl2YXIgX29mZnNldE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX2lkZW50aXR5TWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCglmdW5jdGlvbiBTa2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApIHsKCgkJLy8gY29weSB0aGUgYm9uZSBhcnJheQoKCQlib25lcyA9IGJvbmVzIHx8IFtdOwoKCQl0aGlzLmJvbmVzID0gYm9uZXMuc2xpY2UoIDAgKTsKCQl0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuYm9uZXMubGVuZ3RoICogMTYgKTsKCgkJdGhpcy5mcmFtZSA9IC0gMTsKCgkJLy8gdXNlIHRoZSBzdXBwbGllZCBib25lIGludmVyc2VzIG9yIGNhbGN1bGF0ZSB0aGUgaW52ZXJzZXMKCgkJaWYgKCBib25lSW52ZXJzZXMgPT09IHVuZGVmaW5lZCApIHsKCgkJCXRoaXMuY2FsY3VsYXRlSW52ZXJzZXMoKTsKCgkJfSBlbHNlIHsKCgkJCWlmICggdGhpcy5ib25lcy5sZW5ndGggPT09IGJvbmVJbnZlcnNlcy5sZW5ndGggKSB7CgoJCQkJdGhpcy5ib25lSW52ZXJzZXMgPSBib25lSW52ZXJzZXMuc2xpY2UoIDAgKTsKCgkJCX0gZWxzZSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b24gYm9uZUludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguJyApOwoKCQkJCXRoaXMuYm9uZUludmVyc2VzID0gW107CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCXRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTsKCgkJCQl9CgoJCQl9CgoJCX0KCgl9CgoJT2JqZWN0LmFzc2lnbiggU2tlbGV0b24ucHJvdG90eXBlLCB7CgoJCWNhbGN1bGF0ZUludmVyc2VzOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmJvbmVJbnZlcnNlcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIGludmVyc2UgPSBuZXcgTWF0cml4NCgpOwoKCQkJCWlmICggdGhpcy5ib25lc1sgaSBdICkgewoKCQkJCQlpbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCApOwoKCQkJCX0KCgkJCQl0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBpbnZlcnNlICk7CgoJCQl9CgoJCX0sCgoJCXBvc2U6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBib25lLCBpLCBpbDsKCgkJCS8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlcwoKCQkJZm9yICggaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQlib25lID0gdGhpcy5ib25lc1sgaSBdOwoKCQkJCWlmICggYm9uZSApIHsKCgkJCQkJYm9uZS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCB0aGlzLmJvbmVJbnZlcnNlc1sgaSBdICk7CgoJCQkJfQoKCQkJfQoKCQkJLy8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXMKCgkJCWZvciAoIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJYm9uZSA9IHRoaXMuYm9uZXNbIGkgXTsKCgkJCQlpZiAoIGJvbmUgKSB7CgoJCQkJCWlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkgewoKCQkJCQkJYm9uZS5tYXRyaXguZ2V0SW52ZXJzZSggYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTsKCQkJCQkJYm9uZS5tYXRyaXgubXVsdGlwbHkoIGJvbmUubWF0cml4V29ybGQgKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTsKCgkJCQkJfQoKCQkJCQlib25lLm1hdHJpeC5kZWNvbXBvc2UoIGJvbmUucG9zaXRpb24sIGJvbmUucXVhdGVybmlvbiwgYm9uZS5zY2FsZSApOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJdXBkYXRlOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgYm9uZXMgPSB0aGlzLmJvbmVzOwoJCQl2YXIgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7CgkJCXZhciBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlczsKCQkJdmFyIGJvbmVUZXh0dXJlID0gdGhpcy5ib25lVGV4dHVyZTsKCgkJCS8vIGZsYXR0ZW4gYm9uZSBtYXRyaWNlcyB0byBhcnJheQoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCS8vIGNvbXB1dGUgdGhlIG9mZnNldCBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGUgb3JpZ2luYWwgdHJhbnNmb3JtCgoJCQkJdmFyIG1hdHJpeCA9IGJvbmVzWyBpIF0gPyBib25lc1sgaSBdLm1hdHJpeFdvcmxkIDogX2lkZW50aXR5TWF0cml4OwoKCQkJCV9vZmZzZXRNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4LCBib25lSW52ZXJzZXNbIGkgXSApOwoJCQkJX29mZnNldE1hdHJpeC50b0FycmF5KCBib25lTWF0cmljZXMsIGkgKiAxNiApOwoKCQkJfQoKCQkJaWYgKCBib25lVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCX0KCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgU2tlbGV0b24oIHRoaXMuYm9uZXMsIHRoaXMuYm9uZUludmVyc2VzICk7CgoJCX0sCgoJCWdldEJvbmVCeU5hbWU6IGZ1bmN0aW9uICggbmFtZSApIHsKCgkJCWZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXZhciBib25lID0gdGhpcy5ib25lc1sgaSBdOwoKCQkJCWlmICggYm9uZS5uYW1lID09PSBuYW1lICkgewoKCQkJCQlyZXR1cm4gYm9uZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gdW5kZWZpbmVkOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb20KCSAqLwoKCWZ1bmN0aW9uIEJvbmUoKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0JvbmUnOwoKCX0KCglCb25lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBCb25lLAoKCQlpc0JvbmU6IHRydWUKCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJdmFyIF9pbnN0YW5jZUxvY2FsTWF0cml4ID0gbmV3IE1hdHJpeDQoKTsKCXZhciBfaW5zdGFuY2VXb3JsZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7CgoJdmFyIF9pbnN0YW5jZUludGVyc2VjdHMgPSBbXTsKCgl2YXIgX21lc2ggPSBuZXcgTWVzaCgpOwoKCWZ1bmN0aW9uIEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKSB7CgoJCU1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCXRoaXMuaW5zdGFuY2VNYXRyaXggPSBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBjb3VudCAqIDE2ICksIDE2ICk7CgoJCXRoaXMuY291bnQgPSBjb3VudDsKCgl9CgoJSW5zdGFuY2VkTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBNZXNoLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBJbnN0YW5jZWRNZXNoLAoKCQlpc0luc3RhbmNlZE1lc2g6IHRydWUsCgoJCWdldE1hdHJpeEF0OiBmdW5jdGlvbiAoIGluZGV4LCBtYXRyaXggKSB7CgoJCQltYXRyaXguZnJvbUFycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmFycmF5LCBpbmRleCAqIDE2ICk7CgoJCX0sCgoJCXJheWNhc3Q6IGZ1bmN0aW9uICggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkgewoKCQkJdmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDsKCQkJdmFyIHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7CgoJCQlfbWVzaC5nZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CgkJCV9tZXNoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDsKCgkJCWlmICggX21lc2gubWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CgoJCQlmb3IgKCB2YXIgaW5zdGFuY2VJZCA9IDA7IGluc3RhbmNlSWQgPCByYXljYXN0VGltZXM7IGluc3RhbmNlSWQgKysgKSB7CgoJCQkJLy8gY2FsY3VsYXRlIHRoZSB3b3JsZCBtYXRyaXggZm9yIGVhY2ggaW5zdGFuY2UKCgkJCQl0aGlzLmdldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApOwoKCQkJCV9pbnN0YW5jZVdvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApOwoKCQkJCS8vIHRoZSBtZXNoIHJlcHJlc2VudHMgdGhpcyBzaW5nbGUgaW5zdGFuY2UKCgkJCQlfbWVzaC5tYXRyaXhXb3JsZCA9IF9pbnN0YW5jZVdvcmxkTWF0cml4OwoKCQkJCV9tZXNoLnJheWNhc3QoIHJheWNhc3RlciwgX2luc3RhbmNlSW50ZXJzZWN0cyApOwoKCQkJCS8vIHByb2Nlc3MgdGhlIHJlc3VsdCBvZiByYXljYXN0CgoJCQkJaWYgKCBfaW5zdGFuY2VJbnRlcnNlY3RzLmxlbmd0aCA+IDAgKSB7CgoJCQkJCV9pbnN0YW5jZUludGVyc2VjdHNbIDAgXS5pbnN0YW5jZUlkID0gaW5zdGFuY2VJZDsKCQkJCQlfaW5zdGFuY2VJbnRlcnNlY3RzWyAwIF0ub2JqZWN0ID0gdGhpczsKCgkJCQkJaW50ZXJzZWN0cy5wdXNoKCBfaW5zdGFuY2VJbnRlcnNlY3RzWyAwIF0gKTsKCgkJCQkJX2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGggPSAwOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJc2V0TWF0cml4QXQ6IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHsKCgkJCW1hdHJpeC50b0FycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmFycmF5LCBpbmRleCAqIDE2ICk7CgoJCX0sCgoJCXVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkgewoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBjb2xvcjogPGhleD4sCgkgKiAgb3BhY2l0eTogPGZsb2F0PiwKCSAqCgkgKiAgbGluZXdpZHRoOiA8ZmxvYXQ+LAoJICogIGxpbmVjYXA6ICJyb3VuZCIsCgkgKiAgbGluZWpvaW46ICJyb3VuZCIKCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdMaW5lQmFzaWNNYXRlcmlhbCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7CgoJCXRoaXMubGluZXdpZHRoID0gMTsKCQl0aGlzLmxpbmVjYXAgPSAncm91bmQnOwoJCXRoaXMubGluZWpvaW4gPSAncm91bmQnOwoKCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKCX0KCglMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTsKCUxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVCYXNpY01hdGVyaWFsOwoKCUxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc0xpbmVCYXNpY01hdGVyaWFsID0gdHJ1ZTsKCglMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTsKCgkJdGhpcy5saW5ld2lkdGggPSBzb3VyY2UubGluZXdpZHRoOwoJCXRoaXMubGluZWNhcCA9IHNvdXJjZS5saW5lY2FwOwoJCXRoaXMubGluZWpvaW4gPSBzb3VyY2UubGluZWpvaW47CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJdmFyIF9zdGFydCA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2VuZCA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2ludmVyc2VNYXRyaXgkMSA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX3JheSQxID0gbmV3IFJheSgpOwoJdmFyIF9zcGhlcmUkMiA9IG5ldyBTcGhlcmUoKTsKCglmdW5jdGlvbiBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG1vZGUgKSB7CgoJCWlmICggbW9kZSA9PT0gMSApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5MaW5lOiBwYXJhbWV0ZXIgVEhSRUUuTGluZVBpZWNlcyBubyBsb25nZXIgc3VwcG9ydGVkLiBVc2UgVEhSRUUuTGluZVNlZ21lbnRzIGluc3RlYWQuJyApOwoKCQl9CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0xpbmUnOwoKCQl0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgkJdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbCA6IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmIH0gKTsKCgl9CgoJTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogTGluZSwKCgkJaXNMaW5lOiB0cnVlLAoKCQljb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKCgkJCWlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHsKCgkJCQkvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnkKCgkJCQlpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkgewoKCQkJCQl2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwoJCQkJCXZhciBsaW5lRGlzdGFuY2VzID0gWyAwIF07CgoJCQkJCWZvciAoIHZhciBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHsKCgkJCQkJCV9zdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSAtIDEgKTsKCQkJCQkJX2VuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApOwoKCQkJCQkJbGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTsKCQkJCQkJbGluZURpc3RhbmNlc1sgaSBdICs9IF9zdGFydC5kaXN0YW5jZVRvKCBfZW5kICk7CgoJCQkJCX0KCgkJCQkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTsKCgkJCQl9CgoJCQl9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkgewoKCQkJCXZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzOwoJCQkJdmFyIGxpbmVEaXN0YW5jZXMgPSBnZW9tZXRyeS5saW5lRGlzdGFuY2VzOwoKCQkJCWxpbmVEaXN0YW5jZXNbIDAgXSA9IDA7CgoJCQkJZm9yICggdmFyIGkgPSAxLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJbGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTsKCQkJCQlsaW5lRGlzdGFuY2VzWyBpIF0gKz0gdmVydGljZXNbIGkgLSAxIF0uZGlzdGFuY2VUbyggdmVydGljZXNbIGkgXSApOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHsKCgkJCXZhciBwcmVjaXNpb24gPSByYXljYXN0ZXIubGluZVByZWNpc2lvbjsKCgkJCXZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CgkJCXZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7CgoJCQkvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXkKCgkJCWlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7IGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOyB9CgoJCQlfc3BoZXJlJDIuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTsKCQkJX3NwaGVyZSQyLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTsKCQkJX3NwaGVyZSQyLnJhZGl1cyArPSBwcmVjaXNpb247CgoJCQlpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQyICkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCS8vCgoJCQlfaW52ZXJzZU1hdHJpeCQxLmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7CgkJCV9yYXkkMS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCQxICk7CgoJCQl2YXIgbG9jYWxQcmVjaXNpb24gPSBwcmVjaXNpb24gLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7CgkJCXZhciBsb2NhbFByZWNpc2lvblNxID0gbG9jYWxQcmVjaXNpb24gKiBsb2NhbFByZWNpc2lvbjsKCgkJCXZhciB2U3RhcnQgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgdkVuZCA9IG5ldyBWZWN0b3IzKCk7CgkJCXZhciBpbnRlclNlZ21lbnQgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgaW50ZXJSYXkgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgc3RlcCA9ICggdGhpcyAmJiB0aGlzLmlzTGluZVNlZ21lbnRzICkgPyAyIDogMTsKCgkJCWlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHsKCgkJCQl2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDsKCQkJCXZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlczsKCQkJCXZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5OwoKCQkJCWlmICggaW5kZXggIT09IG51bGwgKSB7CgoJCQkJCXZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHsKCgkJCQkJCXZhciBhID0gaW5kaWNlc1sgaSBdOwoJCQkJCQl2YXIgYiA9IGluZGljZXNbIGkgKyAxIF07CgoJCQkJCQl2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7CgkJCQkJCXZFbmQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGIgKiAzICk7CgoJCQkJCQl2YXIgZGlzdFNxID0gX3JheSQxLmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZTdGFydCwgdkVuZCwgaW50ZXJSYXksIGludGVyU2VnbWVudCApOwoKCQkJCQkJaWYgKCBkaXN0U3EgPiBsb2NhbFByZWNpc2lvblNxICkgeyBjb250aW51ZTsgfQoKCQkJCQkJaW50ZXJSYXkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7IC8vTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvbgoKCQkJCQkJdmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTsKCgkJCQkJCWlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSB7IGNvbnRpbnVlOyB9CgoJCQkJCQlpbnRlcnNlY3RzLnB1c2goIHsKCgkJCQkJCQlkaXN0YW5jZTogZGlzdGFuY2UsCgkJCQkJCQkvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz8KCQkJCQkJCS8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLAoJCQkJCQkJcG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLAoJCQkJCQkJaW5kZXg6IGksCgkJCQkJCQlmYWNlOiBudWxsLAoJCQkJCQkJZmFjZUluZGV4OiBudWxsLAoJCQkJCQkJb2JqZWN0OiB0aGlzCgoJCQkJCQl9ICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7CgoJCQkJCQl2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICk7CgkJCQkJCXZFbmQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICsgMyApOwoKCQkJCQkJdmFyIGRpc3RTcSA9IF9yYXkkMS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTsKCgkJCQkJCWlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIHsgY29udGludWU7IH0KCgkJCQkJCWludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb24KCgkJCQkJCXZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7CgoJCQkJCQlpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgeyBjb250aW51ZTsgfQoKCQkJCQkJaW50ZXJzZWN0cy5wdXNoKCB7CgoJCQkJCQkJZGlzdGFuY2U6IGRpc3RhbmNlLAoJCQkJCQkJLy8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/CgkJCQkJCQkvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSwKCQkJCQkJCXBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSwKCQkJCQkJCWluZGV4OiBpLAoJCQkJCQkJZmFjZTogbnVsbCwKCQkJCQkJCWZhY2VJbmRleDogbnVsbCwKCQkJCQkJCW9iamVjdDogdGhpcwoKCQkJCQkJfSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCQl2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlczsKCQkJCXZhciBuYlZlcnRpY2VzID0gdmVydGljZXMubGVuZ3RoOwoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IG5iVmVydGljZXMgLSAxOyBpICs9IHN0ZXAgKSB7CgoJCQkJCXZhciBkaXN0U3EgPSBfcmF5JDEuZGlzdGFuY2VTcVRvU2VnbWVudCggdmVydGljZXNbIGkgXSwgdmVydGljZXNbIGkgKyAxIF0sIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTsKCgkJCQkJaWYgKCBkaXN0U3EgPiBsb2NhbFByZWNpc2lvblNxICkgeyBjb250aW51ZTsgfQoKCQkJCQlpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uCgoJCQkJCXZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7CgoJCQkJCWlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSB7IGNvbnRpbnVlOyB9CgoJCQkJCWludGVyc2VjdHMucHVzaCggewoKCQkJCQkJZGlzdGFuY2U6IGRpc3RhbmNlLAoJCQkJCQkvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz8KCQkJCQkJLy8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksCgkJCQkJCXBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSwKCQkJCQkJaW5kZXg6IGksCgkJCQkJCWZhY2U6IG51bGwsCgkJCQkJCWZhY2VJbmRleDogbnVsbCwKCQkJCQkJb2JqZWN0OiB0aGlzCgoJCQkJCX0gKTsKCgkJCQl9CgoJCQl9CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJdmFyIF9zdGFydCQxID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfZW5kJDEgPSBuZXcgVmVjdG9yMygpOwoKCWZ1bmN0aW9uIExpbmVTZWdtZW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICkgewoKCQlMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApOwoKCQl0aGlzLnR5cGUgPSAnTGluZVNlZ21lbnRzJzsKCgl9CgoJTGluZVNlZ21lbnRzLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IExpbmVTZWdtZW50cywKCgkJaXNMaW5lU2VnbWVudHM6IHRydWUsCgoJCWNvbXB1dGVMaW5lRGlzdGFuY2VzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwoKCQkJaWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJCS8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeQoKCQkJCWlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7CgoJCQkJCXZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgkJCQkJdmFyIGxpbmVEaXN0YW5jZXMgPSBbXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICs9IDIgKSB7CgoJCQkJCQlfc3RhcnQkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApOwoJCQkJCQlfZW5kJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7CgoJCQkJCQlsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdOwoJCQkJCQlsaW5lRGlzdGFuY2VzWyBpICsgMSBdID0gbGluZURpc3RhbmNlc1sgaSBdICsgX3N0YXJ0JDEuZGlzdGFuY2VUbyggX2VuZCQxICk7CgoJCQkJCX0KCgkJCQkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmVTZWdtZW50cy5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApOwoKCQkJCX0KCgkJCX0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7CgoJCQkJdmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7CgkJCQl2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkgewoKCQkJCQlfc3RhcnQkMS5jb3B5KCB2ZXJ0aWNlc1sgaSBdICk7CgkJCQkJX2VuZCQxLmNvcHkoIHZlcnRpY2VzWyBpICsgMSBdICk7CgoJCQkJCWxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07CgkJCQkJbGluZURpc3RhbmNlc1sgaSArIDEgXSA9IGxpbmVEaXN0YW5jZXNbIGkgXSArIF9zdGFydCQxLmRpc3RhbmNlVG8oIF9lbmQkMSApOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtZ3JldGVyIC8gaHR0cDovL2dpdGh1Yi5jb20vbWdyZXRlcgoJICovCgoJZnVuY3Rpb24gTGluZUxvb3AoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHsKCgkJTGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJdGhpcy50eXBlID0gJ0xpbmVMb29wJzsKCgl9CgoJTGluZUxvb3AucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogTGluZUxvb3AsCgoJCWlzTGluZUxvb3A6IHRydWUsCgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBjb2xvcjogPGhleD4sCgkgKiAgb3BhY2l0eTogPGZsb2F0PiwKCSAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIHNpemU6IDxmbG9hdD4sCgkgKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD4KCSAqCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdQb2ludHNNYXRlcmlhbCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7CgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgoJCXRoaXMuc2l6ZSA9IDE7CgkJdGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlOwoKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOwoKCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKCX0KCglQb2ludHNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTsKCVBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50c01hdGVyaWFsOwoKCVBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5pc1BvaW50c01hdGVyaWFsID0gdHJ1ZTsKCglQb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTsKCgkJdGhpcy5tYXAgPSBzb3VyY2UubWFwOwoKCQl0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwOwoKCQl0aGlzLnNpemUgPSBzb3VyY2Uuc2l6ZTsKCQl0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247CgoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCgl2YXIgX2ludmVyc2VNYXRyaXgkMiA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX3JheSQyID0gbmV3IFJheSgpOwoJdmFyIF9zcGhlcmUkMyA9IG5ldyBTcGhlcmUoKTsKCXZhciBfcG9zaXRpb24kMSA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1BvaW50cyc7CgoJCXRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCQl0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsIDogbmV3IFBvaW50c01hdGVyaWFsKCB7IGNvbG9yOiBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYgfSApOwoKCQl0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpOwoKCX0KCglQb2ludHMucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFBvaW50cywKCgkJaXNQb2ludHM6IHRydWUsCgoJCXJheWNhc3Q6IGZ1bmN0aW9uICggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkgewoKCQkJdmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKCQkJdmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDsKCQkJdmFyIHRocmVzaG9sZCA9IHJheWNhc3Rlci5wYXJhbXMuUG9pbnRzLnRocmVzaG9sZDsKCgkJCS8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheQoKCQkJaWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHsgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7IH0KCgkJCV9zcGhlcmUkMy5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApOwoJCQlfc3BoZXJlJDMuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoJCQlfc3BoZXJlJDMucmFkaXVzICs9IHRocmVzaG9sZDsKCgkJCWlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDMgKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQkJLy8KCgkJCV9pbnZlcnNlTWF0cml4JDIuZ2V0SW52ZXJzZSggbWF0cml4V29ybGQgKTsKCQkJX3JheSQyLmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4JDIgKTsKCgkJCXZhciBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTsKCQkJdmFyIGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkOwoKCQkJaWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJCXZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4OwoJCQkJdmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzOwoJCQkJdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7CgoJCQkJaWYgKCBpbmRleCAhPT0gbnVsbCApIHsKCgkJCQkJdmFyIGluZGljZXMgPSBpbmRleC5hcnJheTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQl2YXIgYSA9IGluZGljZXNbIGkgXTsKCgkJCQkJCV9wb3NpdGlvbiQxLmZyb21BcnJheSggcG9zaXRpb25zLCBhICogMyApOwoKCQkJCQkJdGVzdFBvaW50KCBfcG9zaXRpb24kMSwgYSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApOwoKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgPCBsOyBpICsrICkgewoKCQkJCQkJX3Bvc2l0aW9uJDEuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKiAzICk7CgoJCQkJCQl0ZXN0UG9pbnQoIF9wb3NpdGlvbiQxLCBpLCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0aGlzICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCXZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCXRlc3RQb2ludCggdmVydGljZXNbIGkgXSwgaSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJdXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwoJCQl2YXIgbSwgbWwsIG5hbWU7CgoJCQlpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7CgoJCQkJdmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlczsKCQkJCXZhciBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApOwoKCQkJCWlmICgga2V5cy5sZW5ndGggPiAwICkgewoKCQkJCQl2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdOwoKCQkJCQlpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQl0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdOwoJCQkJCQl0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9OwoKCQkJCQkJZm9yICggbSA9IDAsIG1sID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7CgoJCQkJCQkJbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTsKCgkJCQkJCQl0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7CgkJCQkJCQl0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJdmFyIG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0czsKCgkJCQlpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkgewoKCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUG9pbnRzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpIGRvZXMgbm90IHN1cHBvcnQgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTsKCgkJCQl9CgoJCQl9CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7CgoJCX0KCgl9ICk7CgoJZnVuY3Rpb24gdGVzdFBvaW50KCBwb2ludCwgaW5kZXgsIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIG9iamVjdCApIHsKCgkJdmFyIHJheVBvaW50RGlzdGFuY2VTcSA9IF9yYXkkMi5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKTsKCgkJaWYgKCByYXlQb2ludERpc3RhbmNlU3EgPCBsb2NhbFRocmVzaG9sZFNxICkgewoKCQkJdmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTsKCgkJCV9yYXkkMi5jbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgaW50ZXJzZWN0UG9pbnQgKTsKCQkJaW50ZXJzZWN0UG9pbnQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoKCQkJdmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTsKCgkJCWlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSB7IHJldHVybjsgfQoKCQkJaW50ZXJzZWN0cy5wdXNoKCB7CgoJCQkJZGlzdGFuY2U6IGRpc3RhbmNlLAoJCQkJZGlzdGFuY2VUb1JheTogTWF0aC5zcXJ0KCByYXlQb2ludERpc3RhbmNlU3EgKSwKCQkJCXBvaW50OiBpbnRlcnNlY3RQb2ludCwKCQkJCWluZGV4OiBpbmRleCwKCQkJCWZhY2U6IG51bGwsCgkJCQlvYmplY3Q6IG9iamVjdAoKCQkJfSApOwoKCQl9CgoJfQoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFZpZGVvVGV4dHVyZSggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHsKCgkJVGV4dHVyZS5jYWxsKCB0aGlzLCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7CgoJCXRoaXMuZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBSR0JGb3JtYXQ7CgoJCXRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7CgkJdGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjsKCgkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCgl9CgoJVmlkZW9UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFZpZGVvVGV4dHVyZSwKCgkJaXNWaWRlb1RleHR1cmU6IHRydWUsCgoJCXVwZGF0ZTogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHZpZGVvID0gdGhpcy5pbWFnZTsKCgkJCWlmICggdmlkZW8ucmVhZHlTdGF0ZSA+PSB2aWRlby5IQVZFX0NVUlJFTlRfREFUQSApIHsKCgkJCQl0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCX0KCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCglmdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZSggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHsKCgkJVGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7CgoJCXRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTsKCQl0aGlzLm1pcG1hcHMgPSBtaXBtYXBzOwoKCQkvLyBubyBmbGlwcGluZyBmb3IgY3ViZSB0ZXh0dXJlcwoJCS8vIChhbHNvIGZsaXBwaW5nIGRvZXNuJ3Qgd29yayBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcyApCgoJCXRoaXMuZmxpcFkgPSBmYWxzZTsKCgkJLy8gY2FuJ3QgZ2VuZXJhdGUgbWlwbWFwcyBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcwoJCS8vIG1pcHMgbXVzdCBiZSBlbWJlZGRlZCBpbiBERFMgZmlsZXMKCgkJdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTsKCgl9CgoJQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTsKCUNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbXByZXNzZWRUZXh0dXJlOwoKCUNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5pc0NvbXByZXNzZWRUZXh0dXJlID0gdHJ1ZTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBDYW52YXNUZXh0dXJlKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHsKCgkJVGV4dHVyZS5jYWxsKCB0aGlzLCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApOwoKCQl0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgl9CgoJQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApOwoJQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW52YXNUZXh0dXJlOwoJQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuaXNDYW52YXNUZXh0dXJlID0gdHJ1ZTsKCgkvKioKCSAqIEBhdXRob3IgTWF0dCBEZXNMYXVyaWVycyAvIEBtYXR0ZGVzbAoJICogQGF1dGhvciBhdGl4IC8gYXJ0aHVyc2lsYmVyLmRlCgkgKi8KCglmdW5jdGlvbiBEZXB0aFRleHR1cmUoIHdpZHRoLCBoZWlnaHQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGZvcm1hdCApIHsKCgkJZm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBEZXB0aEZvcm1hdDsKCgkJaWYgKCBmb3JtYXQgIT09IERlcHRoRm9ybWF0ICYmIGZvcm1hdCAhPT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgewoKCQkJdGhyb3cgbmV3IEVycm9yKCAnRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnICk7CgoJCX0KCgkJaWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHsgdHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlOyB9CgkJaWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7IHR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7IH0KCgkJVGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTsKCgkJdGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9OwoKCQl0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjsKCQl0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjsKCgkJdGhpcy5mbGlwWSA9IGZhbHNlOwoJCXRoaXMuZ2VuZXJhdGVNaXBtYXBzCT0gZmFsc2U7CgoJfQoKCURlcHRoVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApOwoJRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoVGV4dHVyZTsKCURlcHRoVGV4dHVyZS5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmUgPSB0cnVlOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCglmdW5jdGlvbiBXaXJlZnJhbWVHZW9tZXRyeSggZ2VvbWV0cnkgKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1dpcmVmcmFtZUdlb21ldHJ5JzsKCgkJLy8gYnVmZmVyCgoJCXZhciB2ZXJ0aWNlcyA9IFtdOwoKCQkvLyBoZWxwZXIgdmFyaWFibGVzCgoJCXZhciBpLCBqLCBsLCBvLCBvbDsKCQl2YXIgZWRnZSA9IFsgMCwgMCBdLCBlZGdlcyA9IHt9LCBlLCBlZGdlMSwgZWRnZTI7CgkJdmFyIGtleSwga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdOwoJCXZhciB2ZXJ0ZXg7CgoJCS8vIGRpZmZlcmVudCBsb2dpYyBmb3IgR2VvbWV0cnkgYW5kIEJ1ZmZlckdlb21ldHJ5CgoJCWlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCS8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVkZ2VzIHdpdGhvdXQgZHVwbGljYXRlcwoKCQkJdmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7CgoJCQlmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGZhY2UgPSBmYWNlc1sgaSBdOwoKCQkJCWZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHsKCgkJCQkJZWRnZTEgPSBmYWNlWyBrZXlzWyBqIF0gXTsKCQkJCQllZGdlMiA9IGZhY2VbIGtleXNbICggaiArIDEgKSAlIDMgXSBdOwoJCQkJCWVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzCgkJCQkJZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApOwoKCQkJCQlrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07CgoJCQkJCWlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCQllZGdlc1sga2V5IF0gPSB7IGluZGV4MTogZWRnZVsgMCBdLCBpbmRleDI6IGVkZ2VbIDEgXSB9OwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJLy8gZ2VuZXJhdGUgdmVydGljZXMKCgkJCWZvciAoIGtleSBpbiBlZGdlcyApIHsKCgkJCQllID0gZWRnZXNbIGtleSBdOwoKCQkJCXZlcnRleCA9IGdlb21ldHJ5LnZlcnRpY2VzWyBlLmluZGV4MSBdOwoJCQkJdmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApOwoKCQkJCXZlcnRleCA9IGdlb21ldHJ5LnZlcnRpY2VzWyBlLmluZGV4MiBdOwoJCQkJdmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApOwoKCQkJfQoKCQl9IGVsc2UgaWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJdmFyIHBvc2l0aW9uLCBpbmRpY2VzLCBncm91cHM7CgkJCXZhciBncm91cCwgc3RhcnQsIGNvdW50OwoJCQl2YXIgaW5kZXgxLCBpbmRleDI7CgoJCQl2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpOwoKCQkJaWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHsKCgkJCQkvLyBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5CgoJCQkJcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwoJCQkJaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4OwoJCQkJZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzOwoKCQkJCWlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHsKCgkJCQkJZ3JvdXBzID0gWyB7IHN0YXJ0OiAwLCBjb3VudDogaW5kaWNlcy5jb3VudCwgbWF0ZXJpYWxJbmRleDogMCB9IF07CgoJCQkJfQoKCQkJCS8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzCgoJCQkJZm9yICggbyA9IDAsIG9sID0gZ3JvdXBzLmxlbmd0aDsgbyA8IG9sOyArKyBvICkgewoKCQkJCQlncm91cCA9IGdyb3Vwc1sgbyBdOwoKCQkJCQlzdGFydCA9IGdyb3VwLnN0YXJ0OwoJCQkJCWNvdW50ID0gZ3JvdXAuY291bnQ7CgoJCQkJCWZvciAoIGkgPSBzdGFydCwgbCA9ICggc3RhcnQgKyBjb3VudCApOyBpIDwgbDsgaSArPSAzICkgewoKCQkJCQkJZm9yICggaiA9IDA7IGogPCAzOyBqICsrICkgewoKCQkJCQkJCWVkZ2UxID0gaW5kaWNlcy5nZXRYKCBpICsgaiApOwoJCQkJCQkJZWRnZTIgPSBpbmRpY2VzLmdldFgoIGkgKyAoIGogKyAxICkgJSAzICk7CgkJCQkJCQllZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7IC8vIHNvcnRpbmcgcHJldmVudHMgZHVwbGljYXRlcwoJCQkJCQkJZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApOwoKCQkJCQkJCWtleSA9IGVkZ2VbIDAgXSArICcsJyArIGVkZ2VbIDEgXTsKCgkJCQkJCQlpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCQllZGdlc1sga2V5IF0gPSB7IGluZGV4MTogZWRnZVsgMCBdLCBpbmRleDI6IGVkZ2VbIDEgXSB9OwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCQkvLyBnZW5lcmF0ZSB2ZXJ0aWNlcwoKCQkJCWZvciAoIGtleSBpbiBlZGdlcyApIHsKCgkJCQkJZSA9IGVkZ2VzWyBrZXkgXTsKCgkJCQkJdmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBlLmluZGV4MSApOwoJCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCQkJdmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBlLmluZGV4MiApOwoJCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCS8vIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5CgoJCQkJcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwoKCQkJCWZvciAoIGkgPSAwLCBsID0gKCBwb3NpdGlvbi5jb3VudCAvIDMgKTsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCWZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHsKCgkJCQkJCS8vIHRocmVlIGVkZ2VzIHBlciB0cmlhbmdsZSwgYW4gZWRnZSBpcyByZXByZXNlbnRlZCBhcyAoaW5kZXgxLCBpbmRleDIpCgkJCQkJCS8vIGUuZy4gdGhlIGZpcnN0IHRyaWFuZ2xlIGhhcyB0aGUgZm9sbG93aW5nIGVkZ2VzOiAoMCwxKSwoMSwyKSwoMiwwKQoKCQkJCQkJaW5kZXgxID0gMyAqIGkgKyBqOwoJCQkJCQl2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MSApOwoJCQkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJCQlpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApOwoJCQkJCQl2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApOwoJCQkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCX0KCgkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgoJfQoKCVdpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2lyZWZyYW1lR2VvbWV0cnk7CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NQoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqCgkgKiBQYXJhbWV0cmljIFN1cmZhY2VzIEdlb21ldHJ5CgkgKiBiYXNlZCBvbiB0aGUgYnJpbGxpYW50IGFydGljbGUgYnkgQHByaWRlb3V0IGh0dHA6Ly9wcmlkZW91dC5uZXQvYmxvZy8/cD00NAoJICovCgoJLy8gUGFyYW1ldHJpY0dlb21ldHJ5CgoJZnVuY3Rpb24gUGFyYW1ldHJpY0dlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnUGFyYW1ldHJpY0dlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlmdW5jOiBmdW5jLAoJCQlzbGljZXM6IHNsaWNlcywKCQkJc3RhY2tzOiBzdGFja3MKCQl9OwoKCQl0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglQYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglQYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyYW1ldHJpY0dlb21ldHJ5OwoKCS8vIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1BhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJZnVuYzogZnVuYywKCQkJc2xpY2VzOiBzbGljZXMsCgkJCXN0YWNrczogc3RhY2tzCgkJfTsKCgkJLy8gYnVmZmVycwoKCQl2YXIgaW5kaWNlcyA9IFtdOwoJCXZhciB2ZXJ0aWNlcyA9IFtdOwoJCXZhciBub3JtYWxzID0gW107CgkJdmFyIHV2cyA9IFtdOwoKCQl2YXIgRVBTID0gMC4wMDAwMTsKCgkJdmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7CgoJCXZhciBwMCA9IG5ldyBWZWN0b3IzKCksIHAxID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgcHUgPSBuZXcgVmVjdG9yMygpLCBwdiA9IG5ldyBWZWN0b3IzKCk7CgoJCXZhciBpLCBqOwoKCQlpZiAoIGZ1bmMubGVuZ3RoIDwgMyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5QYXJhbWV0cmljR2VvbWV0cnk6IEZ1bmN0aW9uIG11c3Qgbm93IG1vZGlmeSBhIFZlY3RvcjMgYXMgdGhpcmQgcGFyYW1ldGVyLicgKTsKCgkJfQoKCQkvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzCgoJCXZhciBzbGljZUNvdW50ID0gc2xpY2VzICsgMTsKCgkJZm9yICggaSA9IDA7IGkgPD0gc3RhY2tzOyBpICsrICkgewoKCQkJdmFyIHYgPSBpIC8gc3RhY2tzOwoKCQkJZm9yICggaiA9IDA7IGogPD0gc2xpY2VzOyBqICsrICkgewoKCQkJCXZhciB1ID0gaiAvIHNsaWNlczsKCgkJCQkvLyB2ZXJ0ZXgKCgkJCQlmdW5jKCB1LCB2LCBwMCApOwoJCQkJdmVydGljZXMucHVzaCggcDAueCwgcDAueSwgcDAueiApOwoKCQkJCS8vIG5vcm1hbAoKCQkJCS8vIGFwcHJveGltYXRlIHRhbmdlbnQgdmVjdG9ycyB2aWEgZmluaXRlIGRpZmZlcmVuY2VzCgoJCQkJaWYgKCB1IC0gRVBTID49IDAgKSB7CgoJCQkJCWZ1bmMoIHUgLSBFUFMsIHYsIHAxICk7CgkJCQkJcHUuc3ViVmVjdG9ycyggcDAsIHAxICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJZnVuYyggdSArIEVQUywgdiwgcDEgKTsKCQkJCQlwdS5zdWJWZWN0b3JzKCBwMSwgcDAgKTsKCgkJCQl9CgoJCQkJaWYgKCB2IC0gRVBTID49IDAgKSB7CgoJCQkJCWZ1bmMoIHUsIHYgLSBFUFMsIHAxICk7CgkJCQkJcHYuc3ViVmVjdG9ycyggcDAsIHAxICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJZnVuYyggdSwgdiArIEVQUywgcDEgKTsKCQkJCQlwdi5zdWJWZWN0b3JzKCBwMSwgcDAgKTsKCgkJCQl9CgoJCQkJLy8gY3Jvc3MgcHJvZHVjdCBvZiB0YW5nZW50IHZlY3RvcnMgcmV0dXJucyBzdXJmYWNlIG5vcm1hbAoKCQkJCW5vcm1hbC5jcm9zc1ZlY3RvcnMoIHB1LCBwdiApLm5vcm1hbGl6ZSgpOwoJCQkJbm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7CgoJCQkJLy8gdXYKCgkJCQl1dnMucHVzaCggdSwgdiApOwoKCQkJfQoKCQl9CgoJCS8vIGdlbmVyYXRlIGluZGljZXMKCgkJZm9yICggaSA9IDA7IGkgPCBzdGFja3M7IGkgKysgKSB7CgoJCQlmb3IgKCBqID0gMDsgaiA8IHNsaWNlczsgaiArKyApIHsKCgkJCQl2YXIgYSA9IGkgKiBzbGljZUNvdW50ICsgajsKCQkJCXZhciBiID0gaSAqIHNsaWNlQ291bnQgKyBqICsgMTsKCQkJCXZhciBjID0gKCBpICsgMSApICogc2xpY2VDb3VudCArIGogKyAxOwoJCQkJdmFyIGQgPSAoIGkgKyAxICkgKiBzbGljZUNvdW50ICsgajsKCgkJCQkvLyBmYWNlcyBvbmUgYW5kIHR3bwoKCQkJCWluZGljZXMucHVzaCggYSwgYiwgZCApOwoJCQkJaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7CgoJCQl9CgoJCX0KCgkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJdGhpcy5zZXRJbmRleCggaW5kaWNlcyApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTsKCgl9CgoJUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgY2xvY2t3b3JrZ2VlayAvIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG9ja3dvcmtnZWVrCgkgKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5CgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBQb2x5aGVkcm9uR2VvbWV0cnkKCglmdW5jdGlvbiBQb2x5aGVkcm9uR2VvbWV0cnkoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQl2ZXJ0aWNlczogdmVydGljZXMsCgkJCWluZGljZXM6IGluZGljZXMsCgkJCXJhZGl1czogcmFkaXVzLAoJCQlkZXRhaWw6IGRldGFpbAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglQb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglQb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9seWhlZHJvbkdlb21ldHJ5OwoKCS8vIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkgewoKCQlCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXZlcnRpY2VzOiB2ZXJ0aWNlcywKCQkJaW5kaWNlczogaW5kaWNlcywKCQkJcmFkaXVzOiByYWRpdXMsCgkJCWRldGFpbDogZGV0YWlsCgkJfTsKCgkJcmFkaXVzID0gcmFkaXVzIHx8IDE7CgkJZGV0YWlsID0gZGV0YWlsIHx8IDA7CgoJCS8vIGRlZmF1bHQgYnVmZmVyIGRhdGEKCgkJdmFyIHZlcnRleEJ1ZmZlciA9IFtdOwoJCXZhciB1dkJ1ZmZlciA9IFtdOwoKCQkvLyB0aGUgc3ViZGl2aXNpb24gY3JlYXRlcyB0aGUgdmVydGV4IGJ1ZmZlciBkYXRhCgoJCXN1YmRpdmlkZSggZGV0YWlsICk7CgoJCS8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1cwoKCQlhcHBseVJhZGl1cyggcmFkaXVzICk7CgoJCS8vIGZpbmFsbHksIGNyZWF0ZSB0aGUgdXYgZGF0YQoKCQlnZW5lcmF0ZVVWcygpOwoKCQkvLyBidWlsZCBub24taW5kZXhlZCBnZW9tZXRyeQoKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLnNsaWNlKCksIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZCdWZmZXIsIDIgKSApOwoKCQlpZiAoIGRldGFpbCA9PT0gMCApIHsKCgkJCXRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsgLy8gZmxhdCBub3JtYWxzCgoJCX0gZWxzZSB7CgoJCQl0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHMKCgkJfQoKCQkvLyBoZWxwZXIgZnVuY3Rpb25zCgoJCWZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkgewoKCQkJdmFyIGEgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgYiA9IG5ldyBWZWN0b3IzKCk7CgkJCXZhciBjID0gbmV3IFZlY3RvcjMoKTsKCgkJCS8vIGl0ZXJhdGUgb3ZlciBhbGwgZmFjZXMgYW5kIGFwcGx5IGEgc3ViZGl2aXNvbiB3aXRoIHRoZSBnaXZlbiBkZXRhaWwgdmFsdWUKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMgKSB7CgoJCQkJLy8gZ2V0IHRoZSB2ZXJ0aWNlcyBvZiB0aGUgZmFjZQoKCQkJCWdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTsKCQkJCWdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTsKCQkJCWdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTsKCgkJCQkvLyBwZXJmb3JtIHN1YmRpdmlzaW9uCgoJCQkJc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICk7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkgewoKCQkJdmFyIGNvbHMgPSBNYXRoLnBvdyggMiwgZGV0YWlsICk7CgoJCQkvLyB3ZSB1c2UgdGhpcyBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGNyZWF0aW5nIHRoZSBzdWJkaXZpc2lvbgoKCQkJdmFyIHYgPSBbXTsKCgkJCXZhciBpLCBqOwoKCQkJLy8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb24KCgkJCWZvciAoIGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7CgoJCQkJdlsgaSBdID0gW107CgoJCQkJdmFyIGFqID0gYS5jbG9uZSgpLmxlcnAoIGMsIGkgLyBjb2xzICk7CgkJCQl2YXIgYmogPSBiLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTsKCgkJCQl2YXIgcm93cyA9IGNvbHMgLSBpOwoKCQkJCWZvciAoIGogPSAwOyBqIDw9IHJvd3M7IGogKysgKSB7CgoJCQkJCWlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkgewoKCQkJCQkJdlsgaSBdWyBqIF0gPSBhajsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXZbIGkgXVsgaiBdID0gYWouY2xvbmUoKS5sZXJwKCBiaiwgaiAvIHJvd3MgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCS8vIGNvbnN0cnVjdCBhbGwgb2YgdGhlIGZhY2VzCgoJCQlmb3IgKCBpID0gMDsgaSA8IGNvbHM7IGkgKysgKSB7CgoJCQkJZm9yICggaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHsKCgkJCQkJdmFyIGsgPSBNYXRoLmZsb29yKCBqIC8gMiApOwoKCQkJCQlpZiAoIGogJSAyID09PSAwICkgewoKCQkJCQkJcHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7CgkJCQkJCXB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApOwoJCQkJCQlwdXNoVmVydGV4KCB2WyBpIF1bIGsgXSApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJcHVzaFZlcnRleCggdlsgaSBdWyBrICsgMSBdICk7CgkJCQkJCXB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTsKCQkJCQkJcHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gYXBwbHlSYWRpdXMoIHJhZGl1cyApIHsKCgkJCXZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpOwoKCQkJLy8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7CgoJCQkJdmVydGV4LnggPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF07CgkJCQl2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTsKCQkJCXZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdOwoKCQkJCXZlcnRleC5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggcmFkaXVzICk7CgoJCQkJdmVydGV4QnVmZmVyWyBpICsgMCBdID0gdmVydGV4Lng7CgkJCQl2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0gPSB2ZXJ0ZXgueTsKCQkJCXZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56OwoKCQkJfQoKCQl9CgoJCWZ1bmN0aW9uIGdlbmVyYXRlVVZzKCkgewoKCQkJdmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7CgoJCQkJdmVydGV4LnggPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF07CgkJCQl2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTsKCQkJCXZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdOwoKCQkJCXZhciB1ID0gYXppbXV0aCggdmVydGV4ICkgLyAyIC8gTWF0aC5QSSArIDAuNTsKCQkJCXZhciB2ID0gaW5jbGluYXRpb24oIHZlcnRleCApIC8gTWF0aC5QSSArIDAuNTsKCQkJCXV2QnVmZmVyLnB1c2goIHUsIDEgLSB2ICk7CgoJCQl9CgoJCQljb3JyZWN0VVZzKCk7CgoJCQljb3JyZWN0U2VhbSgpOwoKCQl9CgoJCWZ1bmN0aW9uIGNvcnJlY3RTZWFtKCkgewoKCQkJLy8gaGFuZGxlIGNhc2Ugd2hlbiBmYWNlIHN0cmFkZGxlcyB0aGUgc2VhbSwgc2VlICMzMjY5CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB1dkJ1ZmZlci5sZW5ndGg7IGkgKz0gNiApIHsKCgkJCQkvLyB1diBkYXRhIG9mIGEgc2luZ2xlIGZhY2UKCgkJCQl2YXIgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTsKCQkJCXZhciB4MSA9IHV2QnVmZmVyWyBpICsgMiBdOwoJCQkJdmFyIHgyID0gdXZCdWZmZXJbIGkgKyA0IF07CgoJCQkJdmFyIG1heCA9IE1hdGgubWF4KCB4MCwgeDEsIHgyICk7CgkJCQl2YXIgbWluID0gTWF0aC5taW4oIHgwLCB4MSwgeDIgKTsKCgkJCQkvLyAwLjkgaXMgc29tZXdoYXQgYXJiaXRyYXJ5CgoJCQkJaWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkgewoKCQkJCQlpZiAoIHgwIDwgMC4yICkgeyB1dkJ1ZmZlclsgaSArIDAgXSArPSAxOyB9CgkJCQkJaWYgKCB4MSA8IDAuMiApIHsgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTsgfQoJCQkJCWlmICggeDIgPCAwLjIgKSB7IHV2QnVmZmVyWyBpICsgNCBdICs9IDE7IH0KCgkJCQl9CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gcHVzaFZlcnRleCggdmVydGV4ICkgewoKCQkJdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJfQoKCQlmdW5jdGlvbiBnZXRWZXJ0ZXhCeUluZGV4KCBpbmRleCwgdmVydGV4ICkgewoKCQkJdmFyIHN0cmlkZSA9IGluZGV4ICogMzsKCgkJCXZlcnRleC54ID0gdmVydGljZXNbIHN0cmlkZSArIDAgXTsKCQkJdmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdOwoJCQl2ZXJ0ZXgueiA9IHZlcnRpY2VzWyBzdHJpZGUgKyAyIF07CgoJCX0KCgkJZnVuY3Rpb24gY29ycmVjdFVWcygpIHsKCgkJCXZhciBhID0gbmV3IFZlY3RvcjMoKTsKCQkJdmFyIGIgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgYyA9IG5ldyBWZWN0b3IzKCk7CgoJCQl2YXIgY2VudHJvaWQgPSBuZXcgVmVjdG9yMygpOwoKCQkJdmFyIHV2QSA9IG5ldyBWZWN0b3IyKCk7CgkJCXZhciB1dkIgPSBuZXcgVmVjdG9yMigpOwoJCQl2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTsKCgkJCWZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDksIGogKz0gNiApIHsKCgkJCQlhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApOwoJCQkJYi5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDMgXSwgdmVydGV4QnVmZmVyWyBpICsgNCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA1IF0gKTsKCQkJCWMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7CgoJCQkJdXZBLnNldCggdXZCdWZmZXJbIGogKyAwIF0sIHV2QnVmZmVyWyBqICsgMSBdICk7CgkJCQl1dkIuc2V0KCB1dkJ1ZmZlclsgaiArIDIgXSwgdXZCdWZmZXJbIGogKyAzIF0gKTsKCQkJCXV2Qy5zZXQoIHV2QnVmZmVyWyBqICsgNCBdLCB1dkJ1ZmZlclsgaiArIDUgXSApOwoKCQkJCWNlbnRyb2lkLmNvcHkoIGEgKS5hZGQoIGIgKS5hZGQoIGMgKS5kaXZpZGVTY2FsYXIoIDMgKTsKCgkJCQl2YXIgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTsKCgkJCQljb3JyZWN0VVYoIHV2QSwgaiArIDAsIGEsIGF6aSApOwoJCQkJY29ycmVjdFVWKCB1dkIsIGogKyAyLCBiLCBhemkgKTsKCQkJCWNvcnJlY3RVViggdXZDLCBqICsgNCwgYywgYXppICk7CgoJCQl9CgoJCX0KCgkJZnVuY3Rpb24gY29ycmVjdFVWKCB1diwgc3RyaWRlLCB2ZWN0b3IsIGF6aW11dGggKSB7CgoJCQlpZiAoICggYXppbXV0aCA8IDAgKSAmJiAoIHV2LnggPT09IDEgKSApIHsKCgkJCQl1dkJ1ZmZlclsgc3RyaWRlIF0gPSB1di54IC0gMTsKCgkJCX0KCgkJCWlmICggKCB2ZWN0b3IueCA9PT0gMCApICYmICggdmVjdG9yLnogPT09IDAgKSApIHsKCgkJCQl1dkJ1ZmZlclsgc3RyaWRlIF0gPSBhemltdXRoIC8gMiAvIE1hdGguUEkgKyAwLjU7CgoJCQl9CgoJCX0KCgkJLy8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLgoKCQlmdW5jdGlvbiBhemltdXRoKCB2ZWN0b3IgKSB7CgoJCQlyZXR1cm4gTWF0aC5hdGFuMiggdmVjdG9yLnosIC0gdmVjdG9yLnggKTsKCgkJfQoKCgkJLy8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLgoKCQlmdW5jdGlvbiBpbmNsaW5hdGlvbiggdmVjdG9yICkgewoKCQkJcmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7CgoJCX0KCgl9CgoJUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgdGltb3RoeXByYXRsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vdGltb3RoeXByYXRsZXkKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBUZXRyYWhlZHJvbkdlb21ldHJ5CgoJZnVuY3Rpb24gVGV0cmFoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7CgoJCUdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1RldHJhaGVkcm9uR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQlkZXRhaWw6IGRldGFpbAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglUZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApOwoJVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXRyYWhlZHJvbkdlb21ldHJ5OwoKCS8vIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkKCglmdW5jdGlvbiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHsKCgkJdmFyIHZlcnRpY2VzID0gWwoJCQkxLCAxLCAxLCAJLSAxLCAtIDEsIDEsIAktIDEsIDEsIC0gMSwgCTEsIC0gMSwgLSAxCgkJXTsKCgkJdmFyIGluZGljZXMgPSBbCgkJCTIsIDEsIDAsIAkwLCAzLCAyLAkxLCAzLCAwLAkyLCAzLCAxCgkJXTsKCgkJUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApOwoKCQl0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcmFkaXVzOiByYWRpdXMsCgkJCWRldGFpbDogZGV0YWlsCgkJfTsKCgl9CgoJVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnk7CgoJLyoqCgkgKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5CgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICovCgoJLy8gT2N0YWhlZHJvbkdlb21ldHJ5CgoJZnVuY3Rpb24gT2N0YWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXM6IHJhZGl1cywKCQkJZGV0YWlsOiBkZXRhaWwKCQl9OwoKCQl0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglPY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglPY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2N0YWhlZHJvbkdlb21ldHJ5OwoKCS8vIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7CgoJCXZhciB2ZXJ0aWNlcyA9IFsKCQkJMSwgMCwgMCwgCS0gMSwgMCwgMCwJMCwgMSwgMCwKCQkJMCwgLSAxLCAwLCAJMCwgMCwgMSwJMCwgMCwgLSAxCgkJXTsKCgkJdmFyIGluZGljZXMgPSBbCgkJCTAsIDIsIDQsCTAsIDQsIDMsCTAsIDMsIDUsCgkJCTAsIDUsIDIsCTEsIDIsIDUsCTEsIDUsIDMsCgkJCTEsIDMsIDQsCTEsIDQsIDIKCQldOwoKCQlQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7CgoJCXRoaXMudHlwZSA9ICdPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQlkZXRhaWw6IGRldGFpbAoJCX07CgoJfQoKCU9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5OwoKCS8qKgoJICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleQoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqLwoKCS8vIEljb3NhaGVkcm9uR2VvbWV0cnkKCglmdW5jdGlvbiBJY29zYWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25HZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcmFkaXVzOiByYWRpdXMsCgkJCWRldGFpbDogZGV0YWlsCgkJfTsKCgkJdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCUljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglJY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uR2VvbWV0cnk7CgoJLy8gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgewoKCQl2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyOwoKCQl2YXIgdmVydGljZXMgPSBbCgkJCS0gMSwgdCwgMCwgCTEsIHQsIDAsIAktIDEsIC0gdCwgMCwgCTEsIC0gdCwgMCwKCQkJIDAsIC0gMSwgdCwgCTAsIDEsIHQsCTAsIC0gMSwgLSB0LCAJMCwgMSwgLSB0LAoJCQkgdCwgMCwgLSAxLCAJdCwgMCwgMSwgCS0gdCwgMCwgLSAxLCAJLSB0LCAwLCAxCgkJXTsKCgkJdmFyIGluZGljZXMgPSBbCgkJCSAwLCAxMSwgNSwgCTAsIDUsIDEsIAkwLCAxLCA3LCAJMCwgNywgMTAsIAkwLCAxMCwgMTEsCgkJCSAxLCA1LCA5LCAJNSwgMTEsIDQsCTExLCAxMCwgMiwJMTAsIDcsIDYsCTcsIDEsIDgsCgkJCSAzLCA5LCA0LCAJMywgNCwgMiwJMywgMiwgNiwJMywgNiwgOCwJMywgOCwgOSwKCQkJIDQsIDksIDUsIAkyLCA0LCAxMSwJNiwgMiwgMTAsCTgsIDYsIDcsCTksIDgsIDEKCQldOwoKCQlQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7CgoJCXRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXM6IHJhZGl1cywKCQkJZGV0YWlsOiBkZXRhaWwKCQl9OwoKCX0KCglJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCUljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgQWJlIFBhem9zIC8gaHR0cHM6Ly9oYW1vaWQuY29tCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICovCgoJLy8gRG9kZWNhaGVkcm9uR2VvbWV0cnkKCglmdW5jdGlvbiBEb2RlY2FoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7CgoJCUdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0RvZGVjYWhlZHJvbkdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXM6IHJhZGl1cywKCQkJZGV0YWlsOiBkZXRhaWwKCQl9OwoKCQl0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCURvZGVjYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApOwoJRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uR2VvbWV0cnk7CgoJLy8gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkKCglmdW5jdGlvbiBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7CgoJCXZhciB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7CgkJdmFyIHIgPSAxIC8gdDsKCgkJdmFyIHZlcnRpY2VzID0gWwoKCQkJLy8gKMKxMSwgwrExLCDCsTEpCgkJCS0gMSwgLSAxLCAtIDEsCS0gMSwgLSAxLCAxLAoJCQktIDEsIDEsIC0gMSwgLSAxLCAxLCAxLAoJCQkxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLAoJCQkxLCAxLCAtIDEsIDEsIDEsIDEsCgoJCQkvLyAoMCwgwrExL8+GLCDCsc+GKQoJCQkgMCwgLSByLCAtIHQsIDAsIC0gciwgdCwKCQkJIDAsIHIsIC0gdCwgMCwgciwgdCwKCgkJCS8vICjCsTEvz4YsIMKxz4YsIDApCgkJCS0gciwgLSB0LCAwLCAtIHIsIHQsIDAsCgkJCSByLCAtIHQsIDAsIHIsIHQsIDAsCgoJCQkvLyAowrHPhiwgMCwgwrExL8+GKQoJCQktIHQsIDAsIC0gciwgdCwgMCwgLSByLAoJCQktIHQsIDAsIHIsIHQsIDAsIHIKCQldOwoKCQl2YXIgaW5kaWNlcyA9IFsKCQkJMywgMTEsIDcsIAkzLCA3LCAxNSwgCTMsIDE1LCAxMywKCQkJNywgMTksIDE3LCAJNywgMTcsIDYsIAk3LCA2LCAxNSwKCQkJMTcsIDQsIDgsIAkxNywgOCwgMTAsIAkxNywgMTAsIDYsCgkJCTgsIDAsIDE2LCAJOCwgMTYsIDIsIAk4LCAyLCAxMCwKCQkJMCwgMTIsIDEsIAkwLCAxLCAxOCwgCTAsIDE4LCAxNiwKCQkJNiwgMTAsIDIsIAk2LCAyLCAxMywgCTYsIDEzLCAxNSwKCQkJMiwgMTYsIDE4LCAJMiwgMTgsIDMsIAkyLCAzLCAxMywKCQkJMTgsIDEsIDksIAkxOCwgOSwgMTEsIAkxOCwgMTEsIDMsCgkJCTQsIDE0LCAxMiwgCTQsIDEyLCAwLCAJNCwgMCwgOCwKCQkJMTEsIDksIDUsIAkxMSwgNSwgMTksIAkxMSwgMTksIDcsCgkJCTE5LCA1LCAxNCwgCTE5LCAxNCwgNCwgCTE5LCA0LCAxNywKCQkJMSwgMTIsIDE0LCAJMSwgMTQsIDUsIAkxLCA1LCA5CgkJXTsKCgkJUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApOwoKCQl0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQlkZXRhaWw6IGRldGFpbAoJCX07CgoJfQoKCURvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCURvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OwoKCS8qKgoJICogQGF1dGhvciBvb3Ntb3hpZWNvZGUgLyBodHRwczovL2dpdGh1Yi5jb20vb29zbW94aWVjb2RlCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NQoJICogQGF1dGhvciBtaW5pbmdvbGQgLyBodHRwczovL2dpdGh1Yi5jb20vbWluaW5nb2xkCgkgKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwczovL2dpdGh1Yi5jb20vam9ub2JyMQoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqCgkgKi8KCgkvLyBUdWJlR2VvbWV0cnkKCglmdW5jdGlvbiBUdWJlR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkLCB0YXBlciApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlwYXRoOiBwYXRoLAoJCQl0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cywKCQkJcmFkaXVzOiByYWRpdXMsCgkJCXJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cywKCQkJY2xvc2VkOiBjbG9zZWQKCQl9OwoKCQlpZiAoIHRhcGVyICE9PSB1bmRlZmluZWQgKSB7IGNvbnNvbGUud2FybiggJ1RIUkVFLlR1YmVHZW9tZXRyeTogdGFwZXIgaGFzIGJlZW4gcmVtb3ZlZC4nICk7IH0KCgkJdmFyIGJ1ZmZlckdlb21ldHJ5ID0gbmV3IFR1YmVCdWZmZXJHZW9tZXRyeSggcGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQgKTsKCgkJLy8gZXhwb3NlIGludGVybmFscwoKCQl0aGlzLnRhbmdlbnRzID0gYnVmZmVyR2VvbWV0cnkudGFuZ2VudHM7CgkJdGhpcy5ub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkubm9ybWFsczsKCQl0aGlzLmJpbm9ybWFscyA9IGJ1ZmZlckdlb21ldHJ5LmJpbm9ybWFsczsKCgkJLy8gY3JlYXRlIGdlb21ldHJ5CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBidWZmZXJHZW9tZXRyeSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglUdWJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglUdWJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUdlb21ldHJ5OwoKCS8vIFR1YmVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFR1YmVCdWZmZXJHZW9tZXRyeSggcGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQgKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1R1YmVCdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcGF0aDogcGF0aCwKCQkJdHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsCgkJCXJhZGl1czogcmFkaXVzLAoJCQlyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsCgkJCWNsb3NlZDogY2xvc2VkCgkJfTsKCgkJdHVidWxhclNlZ21lbnRzID0gdHVidWxhclNlZ21lbnRzIHx8IDY0OwoJCXJhZGl1cyA9IHJhZGl1cyB8fCAxOwoJCXJhZGlhbFNlZ21lbnRzID0gcmFkaWFsU2VnbWVudHMgfHwgODsKCQljbG9zZWQgPSBjbG9zZWQgfHwgZmFsc2U7CgoJCXZhciBmcmFtZXMgPSBwYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHR1YnVsYXJTZWdtZW50cywgY2xvc2VkICk7CgoJCS8vIGV4cG9zZSBpbnRlcm5hbHMKCgkJdGhpcy50YW5nZW50cyA9IGZyYW1lcy50YW5nZW50czsKCQl0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFsczsKCQl0aGlzLmJpbm9ybWFscyA9IGZyYW1lcy5iaW5vcm1hbHM7CgoJCS8vIGhlbHBlciB2YXJpYWJsZXMKCgkJdmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIHV2ID0gbmV3IFZlY3RvcjIoKTsKCQl2YXIgUCA9IG5ldyBWZWN0b3IzKCk7CgoJCXZhciBpLCBqOwoKCQkvLyBidWZmZXIKCgkJdmFyIHZlcnRpY2VzID0gW107CgkJdmFyIG5vcm1hbHMgPSBbXTsKCQl2YXIgdXZzID0gW107CgkJdmFyIGluZGljZXMgPSBbXTsKCgkJLy8gY3JlYXRlIGJ1ZmZlciBkYXRhCgoJCWdlbmVyYXRlQnVmZmVyRGF0YSgpOwoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCQkvLyBmdW5jdGlvbnMKCgkJZnVuY3Rpb24gZ2VuZXJhdGVCdWZmZXJEYXRhKCkgewoKCQkJZm9yICggaSA9IDA7IGkgPCB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7CgoJCQkJZ2VuZXJhdGVTZWdtZW50KCBpICk7CgoJCQl9CgoJCQkvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgbm90IGNsb3NlZCwgZ2VuZXJhdGUgdGhlIGxhc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzCgkJCS8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoCgkJCS8vCgkJCS8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIGR1cGxpY2F0ZSB0aGUgZmlyc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzICh1dnMgd2lsbCBkaWZmZXIpCgoJCQlnZW5lcmF0ZVNlZ21lbnQoICggY2xvc2VkID09PSBmYWxzZSApID8gdHVidWxhclNlZ21lbnRzIDogMCApOwoKCQkJLy8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi4KCQkJLy8gdGhpcyBtYWtlcyBpdCBlYXN5IGNvbXB1dGUgY29ycmVjdCB2YWx1ZXMgZm9yIGNsb3NlZCBnZW9tZXRyaWVzCgoJCQlnZW5lcmF0ZVVWcygpOwoKCQkJLy8gZmluYWxseSBjcmVhdGUgZmFjZXMKCgkJCWdlbmVyYXRlSW5kaWNlcygpOwoKCQl9CgoJCWZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHsKCgkJCS8vIHdlIHVzZSBnZXRQb2ludEF0IHRvIHNhbXBsZSBldmVubHkgZGlzdHJpYnV0ZWQgcG9pbnRzIGZyb20gdGhlIGdpdmVuIHBhdGgKCgkJCVAgPSBwYXRoLmdldFBvaW50QXQoIGkgLyB0dWJ1bGFyU2VnbWVudHMsIFAgKTsKCgkJCS8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbAoKCQkJdmFyIE4gPSBmcmFtZXMubm9ybWFsc1sgaSBdOwoJCQl2YXIgQiA9IGZyYW1lcy5iaW5vcm1hbHNbIGkgXTsKCgkJCS8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50CgoJCQlmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHsKCgkJCQl2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyOwoKCQkJCXZhciBzaW4gPSBNYXRoLnNpbiggdiApOwoJCQkJdmFyIGNvcyA9IC0gTWF0aC5jb3MoIHYgKTsKCgkJCQkvLyBub3JtYWwKCgkJCQlub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7CgkJCQlub3JtYWwueSA9ICggY29zICogTi55ICsgc2luICogQi55ICk7CgkJCQlub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7CgkJCQlub3JtYWwubm9ybWFsaXplKCk7CgoJCQkJbm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7CgoJCQkJLy8gdmVydGV4CgoJCQkJdmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDsKCQkJCXZlcnRleC55ID0gUC55ICsgcmFkaXVzICogbm9ybWFsLnk7CgkJCQl2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56OwoKCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBnZW5lcmF0ZUluZGljZXMoKSB7CgoJCQlmb3IgKCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7CgoJCQkJZm9yICggaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7CgoJCQkJCXZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTsKCQkJCQl2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApOwoJCQkJCXZhciBjID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyBpOwoJCQkJCXZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7CgoJCQkJCS8vIGZhY2VzCgoJCQkJCWluZGljZXMucHVzaCggYSwgYiwgZCApOwoJCQkJCWluZGljZXMucHVzaCggYiwgYywgZCApOwoKCQkJCX0KCgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHsKCgkJCWZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHsKCgkJCQlmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHsKCgkJCQkJdXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7CgkJCQkJdXYueSA9IGogLyByYWRpYWxTZWdtZW50czsKCgkJCQkJdXZzLnB1c2goIHV2LngsIHV2LnkgKTsKCgkJCQl9CgoJCQl9CgoJCX0KCgl9CgoJVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR1YmVCdWZmZXJHZW9tZXRyeTsKCglUdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsKCgkJdmFyIGRhdGEgPSBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJZGF0YS5wYXRoID0gdGhpcy5wYXJhbWV0ZXJzLnBhdGgudG9KU09OKCk7CgoJCXJldHVybiBkYXRhOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG9vc21veGllY29kZQoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqCgkgKiBiYXNlZCBvbiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcHF0b3J1cy8KCSAqLwoKCS8vIFRvcnVzS25vdEdlb21ldHJ5CgoJZnVuY3Rpb24gVG9ydXNLbm90R2VvbWV0cnkoIHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSwgaGVpZ2h0U2NhbGUgKSB7CgoJCUdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1RvcnVzS25vdEdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXM6IHJhZGl1cywKCQkJdHViZTogdHViZSwKCQkJdHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsCgkJCXJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cywKCQkJcDogcCwKCQkJcTogcQoJCX07CgoJCWlmICggaGVpZ2h0U2NhbGUgIT09IHVuZGVmaW5lZCApIHsgY29uc29sZS53YXJuKCAnVEhSRUUuVG9ydXNLbm90R2VvbWV0cnk6IGhlaWdodFNjYWxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2NhbGUoIHgsIHksIHogKSBpbnN0ZWFkLicgKTsgfQoKCQl0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSApOwoJCXRoaXMubWVyZ2VWZXJ0aWNlcygpOwoKCX0KCglUb3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCVRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEdlb21ldHJ5OwoKCS8vIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5CgoJZnVuY3Rpb24gVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSApIHsKCgkJQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnVG9ydXNLbm90QnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQl0dWJlOiB0dWJlLAoJCQl0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cywKCQkJcmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLAoJCQlwOiBwLAoJCQlxOiBxCgkJfTsKCgkJcmFkaXVzID0gcmFkaXVzIHx8IDE7CgkJdHViZSA9IHR1YmUgfHwgMC40OwoJCXR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IoIHR1YnVsYXJTZWdtZW50cyApIHx8IDY0OwoJCXJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4OwoJCXAgPSBwIHx8IDI7CgkJcSA9IHEgfHwgMzsKCgkJLy8gYnVmZmVycwoKCQl2YXIgaW5kaWNlcyA9IFtdOwoJCXZhciB2ZXJ0aWNlcyA9IFtdOwoJCXZhciBub3JtYWxzID0gW107CgkJdmFyIHV2cyA9IFtdOwoKCQkvLyBoZWxwZXIgdmFyaWFibGVzCgoJCXZhciBpLCBqOwoKCQl2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTsKCgkJdmFyIFAxID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgUDIgPSBuZXcgVmVjdG9yMygpOwoKCQl2YXIgQiA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIFQgPSBuZXcgVmVjdG9yMygpOwoJCXZhciBOID0gbmV3IFZlY3RvcjMoKTsKCgkJLy8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2cwoKCQlmb3IgKCBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7ICsrIGkgKSB7CgoJCQkvLyB0aGUgcmFkaWFuICJ1IiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnZW1lbnQKCgkJCXZhciB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjsKCgkJCS8vIG5vdyB3ZSBjYWxjdWxhdGUgdHdvIHBvaW50cy4gUDEgaXMgb3VyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlLCBQMiBpcyBhIGxpdHRsZSBmYXJ0aGVyIGFoZWFkLgoJCQkvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCAiY29vcmRpbmF0ZSBzcGFjZSIsIHdoaWNoIGlzIG5lY2Vzc2FyeSB0byBjYWxjdWxhdGUgdGhlIGNvcnJlY3QgdmVydGV4IHBvc2l0aW9ucwoKCQkJY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1LCBwLCBxLCByYWRpdXMsIFAxICk7CgkJCWNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSArIDAuMDEsIHAsIHEsIHJhZGl1cywgUDIgKTsKCgkJCS8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpcwoKCQkJVC5zdWJWZWN0b3JzKCBQMiwgUDEgKTsKCQkJTi5hZGRWZWN0b3JzKCBQMiwgUDEgKTsKCQkJQi5jcm9zc1ZlY3RvcnMoIFQsIE4gKTsKCQkJTi5jcm9zc1ZlY3RvcnMoIEIsIFQgKTsKCgkJCS8vIG5vcm1hbGl6ZSBCLCBOLiBUIGNhbiBiZSBpZ25vcmVkLCB3ZSBkb24ndCB1c2UgaXQKCgkJCUIubm9ybWFsaXplKCk7CgkJCU4ubm9ybWFsaXplKCk7CgoJCQlmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgKysgaiApIHsKCgkJCQkvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS4KCQkJCS8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLgoKCQkJCXZhciB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7CgkJCQl2YXIgY3ggPSAtIHR1YmUgKiBNYXRoLmNvcyggdiApOwoJCQkJdmFyIGN5ID0gdHViZSAqIE1hdGguc2luKCB2ICk7CgoJCQkJLy8gbm93IGNhbGN1bGF0ZSB0aGUgZmluYWwgdmVydGV4IHBvc2l0aW9uLgoJCQkJLy8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9zLCB0aGVuIHdlIGFkZCBpdCB0byB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUKCgkJCQl2ZXJ0ZXgueCA9IFAxLnggKyAoIGN4ICogTi54ICsgY3kgKiBCLnggKTsKCQkJCXZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApOwoJCQkJdmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7CgoJCQkJdmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApOwoKCQkJCS8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbCkKCgkJCQlub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpOwoKCQkJCW5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApOwoKCQkJCS8vIHV2CgoJCQkJdXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTsKCQkJCXV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTsKCgkJCX0KCgkJfQoKCQkvLyBnZW5lcmF0ZSBpbmRpY2VzCgoJCWZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHsKCgkJCWZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkgewoKCQkJCS8vIGluZGljZXMKCgkJCQl2YXIgYSA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyAoIGkgLSAxICk7CgkJCQl2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApOwoJCQkJdmFyIGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7CgkJCQl2YXIgZCA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpOwoKCQkJCS8vIGZhY2VzCgoJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQlpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsKCgkJCX0KCgkJfQoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCQkvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlCgoJCWZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHsKCgkJCXZhciBjdSA9IE1hdGguY29zKCB1ICk7CgkJCXZhciBzdSA9IE1hdGguc2luKCB1ICk7CgkJCXZhciBxdU92ZXJQID0gcSAvIHAgKiB1OwoJCQl2YXIgY3MgPSBNYXRoLmNvcyggcXVPdmVyUCApOwoKCQkJcG9zaXRpb24ueCA9IHJhZGl1cyAqICggMiArIGNzICkgKiAwLjUgKiBjdTsKCQkJcG9zaXRpb24ueSA9IHJhZGl1cyAqICggMiArIGNzICkgKiBzdSAqIDAuNTsKCQkJcG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7CgoJCX0KCgl9CgoJVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglUb3J1c0tub3RCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3Igb29zbW94aWVjb2RlCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqLwoKCS8vIFRvcnVzR2VvbWV0cnkKCglmdW5jdGlvbiBUb3J1c0dlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcmFkaXVzOiByYWRpdXMsCgkJCXR1YmU6IHR1YmUsCgkJCXJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cywKCQkJdHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsCgkJCWFyYzogYXJjCgkJfTsKCgkJdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCVRvcnVzR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglUb3J1c0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzR2VvbWV0cnk7CgoJLy8gVG9ydXNCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFRvcnVzQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkgewoKCQlCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdUb3J1c0J1ZmZlckdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXM6IHJhZGl1cywKCQkJdHViZTogdHViZSwKCQkJcmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLAoJCQl0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cywKCQkJYXJjOiBhcmMKCQl9OwoKCQlyYWRpdXMgPSByYWRpdXMgfHwgMTsKCQl0dWJlID0gdHViZSB8fCAwLjQ7CgkJcmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApIHx8IDg7CgkJdHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICkgfHwgNjsKCQlhcmMgPSBhcmMgfHwgTWF0aC5QSSAqIDI7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gaGVscGVyIHZhcmlhYmxlcwoKCQl2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTsKCgkJdmFyIGosIGk7CgoJCS8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnMKCgkJZm9yICggaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7CgoJCQlmb3IgKCBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7CgoJCQkJdmFyIHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjOwoJCQkJdmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjsKCgkJCQkvLyB2ZXJ0ZXgKCgkJCQl2ZXJ0ZXgueCA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguY29zKCB1ICk7CgkJCQl2ZXJ0ZXgueSA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguc2luKCB1ICk7CgkJCQl2ZXJ0ZXgueiA9IHR1YmUgKiBNYXRoLnNpbiggdiApOwoKCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCQkvLyBub3JtYWwKCgkJCQljZW50ZXIueCA9IHJhZGl1cyAqIE1hdGguY29zKCB1ICk7CgkJCQljZW50ZXIueSA9IHJhZGl1cyAqIE1hdGguc2luKCB1ICk7CgkJCQlub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBjZW50ZXIgKS5ub3JtYWxpemUoKTsKCgkJCQlub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTsKCgkJCQkvLyB1dgoKCQkJCXV2cy5wdXNoKCBpIC8gdHVidWxhclNlZ21lbnRzICk7CgkJCQl1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7CgoJCQl9CgoJCX0KCgkJLy8gZ2VuZXJhdGUgaW5kaWNlcwoKCQlmb3IgKCBqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHsKCgkJCWZvciAoIGkgPSAxOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHsKCgkJCQkvLyBpbmRpY2VzCgoJCQkJdmFyIGEgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpIC0gMTsKCQkJCXZhciBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTsKCQkJCXZhciBjID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpOwoJCQkJdmFyIGQgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpOwoKCQkJCS8vIGZhY2VzCgoJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQlpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsKCgkJCX0KCgkJfQoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCX0KCglUb3J1c0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJVG9ydXNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUb3J1c0J1ZmZlckdlb21ldHJ5OwoKCS8qKgoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqIFBvcnQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2VhcmN1dCAodjIuMS41KQoJICovCgoJdmFyIEVhcmN1dCA9IHsKCgkJdHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSApIHsKCgkJCWRpbSA9IGRpbSB8fCAyOwoKCQkJdmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLAoJCQkJb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWyAwIF0gKiBkaW0gOiBkYXRhLmxlbmd0aCwKCQkJCW91dGVyTm9kZSA9IGxpbmtlZExpc3QoIGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUgKSwKCQkJCXRyaWFuZ2xlcyA9IFtdOwoKCQkJaWYgKCAhIG91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYgKSB7IHJldHVybiB0cmlhbmdsZXM7IH0KCgkJCXZhciBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplOwoKCQkJaWYgKCBoYXNIb2xlcyApIHsgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZXMoIGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSApOyB9CgoJCQkvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3gKCQkJaWYgKCBkYXRhLmxlbmd0aCA+IDgwICogZGltICkgewoKCQkJCW1pblggPSBtYXhYID0gZGF0YVsgMCBdOwoJCQkJbWluWSA9IG1heFkgPSBkYXRhWyAxIF07CgoJCQkJZm9yICggdmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0gKSB7CgoJCQkJCXggPSBkYXRhWyBpIF07CgkJCQkJeSA9IGRhdGFbIGkgKyAxIF07CgkJCQkJaWYgKCB4IDwgbWluWCApIHsgbWluWCA9IHg7IH0KCQkJCQlpZiAoIHkgPCBtaW5ZICkgeyBtaW5ZID0geTsgfQoJCQkJCWlmICggeCA+IG1heFggKSB7IG1heFggPSB4OyB9CgkJCQkJaWYgKCB5ID4gbWF4WSApIHsgbWF4WSA9IHk7IH0KCgkJCQl9CgoJCQkJLy8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb24KCQkJCWludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7CgkJCQlpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDsKCgkJCX0KCgkJCWVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApOwoKCQkJcmV0dXJuIHRyaWFuZ2xlczsKCgkJfQoKCX07CgoJLy8gY3JlYXRlIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0IGZyb20gcG9seWdvbiBwb2ludHMgaW4gdGhlIHNwZWNpZmllZCB3aW5kaW5nIG9yZGVyCglmdW5jdGlvbiBsaW5rZWRMaXN0KCBkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSApIHsKCgkJdmFyIGksIGxhc3Q7CgoJCWlmICggY2xvY2t3aXNlID09PSAoIHNpZ25lZEFyZWEoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSApID4gMCApICkgewoKCQkJZm9yICggaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSApIHsgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApOyB9CgoJCX0gZWxzZSB7CgoJCQlmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIHsgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApOyB9CgoJCX0KCgkJaWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7CgoJCQlyZW1vdmVOb2RlKCBsYXN0ICk7CgkJCWxhc3QgPSBsYXN0Lm5leHQ7CgoJCX0KCgkJcmV0dXJuIGxhc3Q7CgoJfQoKCS8vIGVsaW1pbmF0ZSBjb2xpbmVhciBvciBkdXBsaWNhdGUgcG9pbnRzCglmdW5jdGlvbiBmaWx0ZXJQb2ludHMoIHN0YXJ0LCBlbmQgKSB7CgoJCWlmICggISBzdGFydCApIHsgcmV0dXJuIHN0YXJ0OyB9CgkJaWYgKCAhIGVuZCApIHsgZW5kID0gc3RhcnQ7IH0KCgkJdmFyIHAgPSBzdGFydCwKCQkJYWdhaW47CgkJZG8gewoKCQkJYWdhaW4gPSBmYWxzZTsKCgkJCWlmICggISBwLnN0ZWluZXIgJiYgKCBlcXVhbHMoIHAsIHAubmV4dCApIHx8IGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPT09IDAgKSApIHsKCgkJCQlyZW1vdmVOb2RlKCBwICk7CgkJCQlwID0gZW5kID0gcC5wcmV2OwoJCQkJaWYgKCBwID09PSBwLm5leHQgKSB7IGJyZWFrOyB9CgkJCQlhZ2FpbiA9IHRydWU7CgoJCQl9IGVsc2UgewoKCQkJCXAgPSBwLm5leHQ7CgoJCQl9CgoJCX0gd2hpbGUgKCBhZ2FpbiB8fCBwICE9PSBlbmQgKTsKCgkJcmV0dXJuIGVuZDsKCgl9CgoJLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpCglmdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7CgoJCWlmICggISBlYXIgKSB7IHJldHVybjsgfQoKCQkvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyCgkJaWYgKCAhIHBhc3MgJiYgaW52U2l6ZSApIHsgaW5kZXhDdXJ2ZSggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7IH0KCgkJdmFyIHN0b3AgPSBlYXIsCgkJCXByZXYsIG5leHQ7CgoJCS8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZQoJCXdoaWxlICggZWFyLnByZXYgIT09IGVhci5uZXh0ICkgewoKCQkJcHJldiA9IGVhci5wcmV2OwoJCQluZXh0ID0gZWFyLm5leHQ7CgoJCQlpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7CgoJCQkJLy8gY3V0IG9mZiB0aGUgdHJpYW5nbGUKCQkJCXRyaWFuZ2xlcy5wdXNoKCBwcmV2LmkgLyBkaW0gKTsKCQkJCXRyaWFuZ2xlcy5wdXNoKCBlYXIuaSAvIGRpbSApOwoJCQkJdHJpYW5nbGVzLnB1c2goIG5leHQuaSAvIGRpbSApOwoKCQkJCXJlbW92ZU5vZGUoIGVhciApOwoKCQkJCS8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXMKCQkJCWVhciA9IG5leHQubmV4dDsKCQkJCXN0b3AgPSBuZXh0Lm5leHQ7CgoJCQkJY29udGludWU7CgoJCQl9CgoJCQllYXIgPSBuZXh0OwoKCQkJLy8gaWYgd2UgbG9vcGVkIHRocm91Z2ggdGhlIHdob2xlIHJlbWFpbmluZyBwb2x5Z29uIGFuZCBjYW4ndCBmaW5kIGFueSBtb3JlIGVhcnMKCQkJaWYgKCBlYXIgPT09IHN0b3AgKSB7CgoJCQkJLy8gdHJ5IGZpbHRlcmluZyBwb2ludHMgYW5kIHNsaWNpbmcgYWdhaW4KCQkJCWlmICggISBwYXNzICkgewoKCQkJCQllYXJjdXRMaW5rZWQoIGZpbHRlclBvaW50cyggZWFyICksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxICk7CgoJCQkJCS8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5CgoJCQkJfSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHsKCgkJCQkJZWFyID0gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggZWFyLCB0cmlhbmdsZXMsIGRpbSApOwoJCQkJCWVhcmN1dExpbmtlZCggZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMiApOwoKCQkJCQkvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3bwoKCQkJCX0gZWxzZSBpZiAoIHBhc3MgPT09IDIgKSB7CgoJCQkJCXNwbGl0RWFyY3V0KCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7CgoJCQkJfQoKCQkJCWJyZWFrOwoKCQkJfQoKCQl9CgoJfQoKCS8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2RlcwoJZnVuY3Rpb24gaXNFYXIoIGVhciApIHsKCgkJdmFyIGEgPSBlYXIucHJldiwKCQkJYiA9IGVhciwKCQkJYyA9IGVhci5uZXh0OwoKCQlpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgeyByZXR1cm4gZmFsc2U7IH0gLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXIKCgkJLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXIKCQl2YXIgcCA9IGVhci5uZXh0Lm5leHQ7CgoJCXdoaWxlICggcCAhPT0gZWFyLnByZXYgKSB7CgoJCQlpZiAoIHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkgKSAmJgoJCQkJYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgeyByZXR1cm4gZmFsc2U7IH0KCQkJcCA9IHAubmV4dDsKCgkJfQoKCQlyZXR1cm4gdHJ1ZTsKCgl9CgoJZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHsKCgkJdmFyIGEgPSBlYXIucHJldiwKCQkJYiA9IGVhciwKCQkJYyA9IGVhci5uZXh0OwoKCQlpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgeyByZXR1cm4gZmFsc2U7IH0gLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXIKCgkJLy8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWQKCQl2YXIgbWluVFggPSBhLnggPCBiLnggPyAoIGEueCA8IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPCBjLnggPyBiLnggOiBjLnggKSwKCQkJbWluVFkgPSBhLnkgPCBiLnkgPyAoIGEueSA8IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPCBjLnkgPyBiLnkgOiBjLnkgKSwKCQkJbWF4VFggPSBhLnggPiBiLnggPyAoIGEueCA+IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPiBjLnggPyBiLnggOiBjLnggKSwKCQkJbWF4VFkgPSBhLnkgPiBiLnkgPyAoIGEueSA+IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPiBjLnkgPyBiLnkgOiBjLnkgKTsKCgkJLy8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDsKCQl2YXIgbWluWiA9IHpPcmRlciggbWluVFgsIG1pblRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplICksCgkJCW1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApOwoKCQl2YXIgcCA9IGVhci5wcmV2WiwKCQkJbiA9IGVhci5uZXh0WjsKCgkJLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zCgkJd2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICYmIG4gJiYgbi56IDw9IG1heFogKSB7CgoJCQlpZiAoIHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmCgkJCQlwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55ICkgJiYKCQkJCWFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHsgcmV0dXJuIGZhbHNlOyB9CgkJCXAgPSBwLnByZXZaOwoKCQkJaWYgKCBuICE9PSBlYXIucHJldiAmJiBuICE9PSBlYXIubmV4dCAmJgoJCQkJcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBuLngsIG4ueSApICYmCgkJCQlhcmVhKCBuLnByZXYsIG4sIG4ubmV4dCApID49IDAgKSB7IHJldHVybiBmYWxzZTsgfQoJCQluID0gbi5uZXh0WjsKCgkJfQoKCQkvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlcgoJCXdoaWxlICggcCAmJiBwLnogPj0gbWluWiApIHsKCgkJCWlmICggcCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiYKCQkJCXBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkgKSAmJgoJCQkJYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgeyByZXR1cm4gZmFsc2U7IH0KCQkJcCA9IHAucHJldlo7CgoJCX0KCgkJLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBpbmNyZWFzaW5nIHotb3JkZXIKCQl3aGlsZSAoIG4gJiYgbi56IDw9IG1heFogKSB7CgoJCQlpZiAoIG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmCgkJCQlwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55ICkgJiYKCQkJCWFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHsgcmV0dXJuIGZhbHNlOyB9CgkJCW4gPSBuLm5leHRaOwoKCQl9CgoJCXJldHVybiB0cnVlOwoKCX0KCgkvLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9ucwoJZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkgewoKCQl2YXIgcCA9IHN0YXJ0OwoJCWRvIHsKCgkJCXZhciBhID0gcC5wcmV2LAoJCQkJYiA9IHAubmV4dC5uZXh0OwoKCQkJaWYgKCAhIGVxdWFscyggYSwgYiApICYmIGludGVyc2VjdHMoIGEsIHAsIHAubmV4dCwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgKSB7CgoJCQkJdHJpYW5nbGVzLnB1c2goIGEuaSAvIGRpbSApOwoJCQkJdHJpYW5nbGVzLnB1c2goIHAuaSAvIGRpbSApOwoJCQkJdHJpYW5nbGVzLnB1c2goIGIuaSAvIGRpbSApOwoKCQkJCS8vIHJlbW92ZSB0d28gbm9kZXMgaW52b2x2ZWQKCQkJCXJlbW92ZU5vZGUoIHAgKTsKCQkJCXJlbW92ZU5vZGUoIHAubmV4dCApOwoKCQkJCXAgPSBzdGFydCA9IGI7CgoJCQl9CgoJCQlwID0gcC5uZXh0OwoKCQl9IHdoaWxlICggcCAhPT0gc3RhcnQgKTsKCgkJcmV0dXJuIHA7CgoJfQoKCS8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5CglmdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgewoKCQkvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3bwoJCXZhciBhID0gc3RhcnQ7CgkJZG8gewoKCQkJdmFyIGIgPSBhLm5leHQubmV4dDsKCQkJd2hpbGUgKCBiICE9PSBhLnByZXYgKSB7CgoJCQkJaWYgKCBhLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoIGEsIGIgKSApIHsKCgkJCQkJLy8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbAoJCQkJCXZhciBjID0gc3BsaXRQb2x5Z29uKCBhLCBiICk7CgoJCQkJCS8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzCgkJCQkJYSA9IGZpbHRlclBvaW50cyggYSwgYS5uZXh0ICk7CgkJCQkJYyA9IGZpbHRlclBvaW50cyggYywgYy5uZXh0ICk7CgoJCQkJCS8vIHJ1biBlYXJjdXQgb24gZWFjaCBoYWxmCgkJCQkJZWFyY3V0TGlua2VkKCBhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApOwoJCQkJCWVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTsKCQkJCQlyZXR1cm47CgoJCQkJfQoKCQkJCWIgPSBiLm5leHQ7CgoJCQl9CgoJCQlhID0gYS5uZXh0OwoKCQl9IHdoaWxlICggYSAhPT0gc3RhcnQgKTsKCgl9CgoJLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlcwoJZnVuY3Rpb24gZWxpbWluYXRlSG9sZXMoIGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSApIHsKCgkJdmFyIHF1ZXVlID0gW10sCgkJCWksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDsKCgkJZm9yICggaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSArKyApIHsKCgkJCXN0YXJ0ID0gaG9sZUluZGljZXNbIGkgXSAqIGRpbTsKCQkJZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1sgaSArIDEgXSAqIGRpbSA6IGRhdGEubGVuZ3RoOwoJCQlsaXN0ID0gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSApOwoJCQlpZiAoIGxpc3QgPT09IGxpc3QubmV4dCApIHsgbGlzdC5zdGVpbmVyID0gdHJ1ZTsgfQoJCQlxdWV1ZS5wdXNoKCBnZXRMZWZ0bW9zdCggbGlzdCApICk7CgoJCX0KCgkJcXVldWUuc29ydCggY29tcGFyZVggKTsKCgkJLy8gcHJvY2VzcyBob2xlcyBmcm9tIGxlZnQgdG8gcmlnaHQKCQlmb3IgKCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSArKyApIHsKCgkJCWVsaW1pbmF0ZUhvbGUoIHF1ZXVlWyBpIF0sIG91dGVyTm9kZSApOwoJCQlvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMoIG91dGVyTm9kZSwgb3V0ZXJOb2RlLm5leHQgKTsKCgkJfQoKCQlyZXR1cm4gb3V0ZXJOb2RlOwoKCX0KCglmdW5jdGlvbiBjb21wYXJlWCggYSwgYiApIHsKCgkJcmV0dXJuIGEueCAtIGIueDsKCgl9CgoJLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0CglmdW5jdGlvbiBlbGltaW5hdGVIb2xlKCBob2xlLCBvdXRlck5vZGUgKSB7CgoJCW91dGVyTm9kZSA9IGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKTsKCQlpZiAoIG91dGVyTm9kZSApIHsKCgkJCXZhciBiID0gc3BsaXRQb2x5Z29uKCBvdXRlck5vZGUsIGhvbGUgKTsKCQkJZmlsdGVyUG9pbnRzKCBiLCBiLm5leHQgKTsKCgkJfQoKCX0KCgkvLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uCglmdW5jdGlvbiBmaW5kSG9sZUJyaWRnZSggaG9sZSwgb3V0ZXJOb2RlICkgewoKCQl2YXIgcCA9IG91dGVyTm9kZSwKCQkJaHggPSBob2xlLngsCgkJCWh5ID0gaG9sZS55LAoJCQlxeCA9IC0gSW5maW5pdHksCgkJCW07CgoJCS8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDsKCQkvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50CgkJZG8gewoKCQkJaWYgKCBoeSA8PSBwLnkgJiYgaHkgPj0gcC5uZXh0LnkgJiYgcC5uZXh0LnkgIT09IHAueSApIHsKCgkJCQl2YXIgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTsKCQkJCWlmICggeCA8PSBoeCAmJiB4ID4gcXggKSB7CgoJCQkJCXF4ID0geDsKCQkJCQlpZiAoIHggPT09IGh4ICkgewoKCQkJCQkJaWYgKCBoeSA9PT0gcC55ICkgeyByZXR1cm4gcDsgfQoJCQkJCQlpZiAoIGh5ID09PSBwLm5leHQueSApIHsgcmV0dXJuIHAubmV4dDsgfQoKCQkJCQl9CgoJCQkJCW0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7CgoJCQkJfQoKCQkJfQoKCQkJcCA9IHAubmV4dDsKCgkJfSB3aGlsZSAoIHAgIT09IG91dGVyTm9kZSApOwoKCQlpZiAoICEgbSApIHsgcmV0dXJuIG51bGw7IH0KCgkJaWYgKCBoeCA9PT0gcXggKSB7IHJldHVybiBtLnByZXY7IH0gLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnQKCgkJLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50OwoJCS8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uOwoJCS8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50CgoJCXZhciBzdG9wID0gbSwKCQkJbXggPSBtLngsCgkJCW15ID0gbS55LAoJCQl0YW5NaW4gPSBJbmZpbml0eSwKCQkJdGFuOwoKCQlwID0gbS5uZXh0OwoKCQl3aGlsZSAoIHAgIT09IHN0b3AgKSB7CgoJCQlpZiAoIGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJgoJCQkJCXBvaW50SW5UcmlhbmdsZSggaHkgPCBteSA/IGh4IDogcXgsIGh5LCBteCwgbXksIGh5IDwgbXkgPyBxeCA6IGh4LCBoeSwgcC54LCBwLnkgKSApIHsKCgkJCQl0YW4gPSBNYXRoLmFicyggaHkgLSBwLnkgKSAvICggaHggLSBwLnggKTsgLy8gdGFuZ2VudGlhbAoKCQkJCWlmICggKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiBwLnggPiBtLnggKSApICYmIGxvY2FsbHlJbnNpZGUoIHAsIGhvbGUgKSApIHsKCgkJCQkJbSA9IHA7CgkJCQkJdGFuTWluID0gdGFuOwoKCQkJCX0KCgkJCX0KCgkJCXAgPSBwLm5leHQ7CgoJCX0KCgkJcmV0dXJuIG07CgoJfQoKCS8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXIKCWZ1bmN0aW9uIGluZGV4Q3VydmUoIHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgewoKCQl2YXIgcCA9IHN0YXJ0OwoJCWRvIHsKCgkJCWlmICggcC56ID09PSBudWxsICkgeyBwLnogPSB6T3JkZXIoIHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7IH0KCQkJcC5wcmV2WiA9IHAucHJldjsKCQkJcC5uZXh0WiA9IHAubmV4dDsKCQkJcCA9IHAubmV4dDsKCgkJfSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7CgoJCXAucHJldloubmV4dFogPSBudWxsOwoJCXAucHJldlogPSBudWxsOwoKCQlzb3J0TGlua2VkKCBwICk7CgoJfQoKCS8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtCgkvLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbAoJZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHsKCgkJdmFyIGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLAoJCQlpblNpemUgPSAxOwoKCQlkbyB7CgoJCQlwID0gbGlzdDsKCQkJbGlzdCA9IG51bGw7CgkJCXRhaWwgPSBudWxsOwoJCQludW1NZXJnZXMgPSAwOwoKCQkJd2hpbGUgKCBwICkgewoKCQkJCW51bU1lcmdlcyArKzsKCQkJCXEgPSBwOwoJCQkJcFNpemUgPSAwOwoJCQkJZm9yICggaSA9IDA7IGkgPCBpblNpemU7IGkgKysgKSB7CgoJCQkJCXBTaXplICsrOwoJCQkJCXEgPSBxLm5leHRaOwoJCQkJCWlmICggISBxICkgeyBicmVhazsgfQoKCQkJCX0KCgkJCQlxU2l6ZSA9IGluU2l6ZTsKCgkJCQl3aGlsZSAoIHBTaXplID4gMCB8fCAoIHFTaXplID4gMCAmJiBxICkgKSB7CgoJCQkJCWlmICggcFNpemUgIT09IDAgJiYgKCBxU2l6ZSA9PT0gMCB8fCAhIHEgfHwgcC56IDw9IHEueiApICkgewoKCQkJCQkJZSA9IHA7CgkJCQkJCXAgPSBwLm5leHRaOwoJCQkJCQlwU2l6ZSAtLTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWUgPSBxOwoJCQkJCQlxID0gcS5uZXh0WjsKCQkJCQkJcVNpemUgLS07CgoJCQkJCX0KCgkJCQkJaWYgKCB0YWlsICkgeyB0YWlsLm5leHRaID0gZTsgfQoJCQkJCWVsc2UgeyBsaXN0ID0gZTsgfQoKCQkJCQllLnByZXZaID0gdGFpbDsKCQkJCQl0YWlsID0gZTsKCgkJCQl9CgoJCQkJcCA9IHE7CgoJCQl9CgoJCQl0YWlsLm5leHRaID0gbnVsbDsKCQkJaW5TaXplICo9IDI7CgoJCX0gd2hpbGUgKCBudW1NZXJnZXMgPiAxICk7CgoJCXJldHVybiBsaXN0OwoKCX0KCgkvLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3gKCWZ1bmN0aW9uIHpPcmRlciggeCwgeSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHsKCgkJLy8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZQoJCXggPSAzMjc2NyAqICggeCAtIG1pblggKSAqIGludlNpemU7CgkJeSA9IDMyNzY3ICogKCB5IC0gbWluWSApICogaW52U2l6ZTsKCgkJeCA9ICggeCB8ICggeCA8PCA4ICkgKSAmIDB4MDBGRjAwRkY7CgkJeCA9ICggeCB8ICggeCA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7CgkJeCA9ICggeCB8ICggeCA8PCAyICkgKSAmIDB4MzMzMzMzMzM7CgkJeCA9ICggeCB8ICggeCA8PCAxICkgKSAmIDB4NTU1NTU1NTU7CgoJCXkgPSAoIHkgfCAoIHkgPDwgOCApICkgJiAweDAwRkYwMEZGOwoJCXkgPSAoIHkgfCAoIHkgPDwgNCApICkgJiAweDBGMEYwRjBGOwoJCXkgPSAoIHkgfCAoIHkgPDwgMiApICkgJiAweDMzMzMzMzMzOwoJCXkgPSAoIHkgfCAoIHkgPDwgMSApICkgJiAweDU1NTU1NTU1OwoKCQlyZXR1cm4geCB8ICggeSA8PCAxICk7CgoJfQoKCS8vIGZpbmQgdGhlIGxlZnRtb3N0IG5vZGUgb2YgYSBwb2x5Z29uIHJpbmcKCWZ1bmN0aW9uIGdldExlZnRtb3N0KCBzdGFydCApIHsKCgkJdmFyIHAgPSBzdGFydCwKCQkJbGVmdG1vc3QgPSBzdGFydDsKCQlkbyB7CgoJCQlpZiAoIHAueCA8IGxlZnRtb3N0LnggfHwgKCBwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSApICkgeyBsZWZ0bW9zdCA9IHA7IH0KCQkJcCA9IHAubmV4dDsKCgkJfSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7CgoJCXJldHVybiBsZWZ0bW9zdDsKCgl9CgoJLy8gY2hlY2sgaWYgYSBwb2ludCBsaWVzIHdpdGhpbiBhIGNvbnZleCB0cmlhbmdsZQoJZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkgKSB7CgoJCXJldHVybiAoIGN4IC0gcHggKSAqICggYXkgLSBweSApIC0gKCBheCAtIHB4ICkgKiAoIGN5IC0gcHkgKSA+PSAwICYmCgkJCSAgICggYXggLSBweCApICogKCBieSAtIHB5ICkgLSAoIGJ4IC0gcHggKSAqICggYXkgLSBweSApID49IDAgJiYKCQkJICAgKCBieCAtIHB4ICkgKiAoIGN5IC0gcHkgKSAtICggY3ggLSBweCApICogKCBieSAtIHB5ICkgPj0gMDsKCgl9CgoJLy8gY2hlY2sgaWYgYSBkaWFnb25hbCBiZXR3ZWVuIHR3byBwb2x5Z29uIG5vZGVzIGlzIHZhbGlkIChsaWVzIGluIHBvbHlnb24gaW50ZXJpb3IpCglmdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoIGEsIGIgKSB7CgoJCXJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgISBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApICYmCgkJCSAgIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgJiYgbWlkZGxlSW5zaWRlKCBhLCBiICk7CgoJfQoKCS8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGUKCWZ1bmN0aW9uIGFyZWEoIHAsIHEsIHIgKSB7CgoJCXJldHVybiAoIHEueSAtIHAueSApICogKCByLnggLSBxLnggKSAtICggcS54IC0gcC54ICkgKiAoIHIueSAtIHEueSApOwoKCX0KCgkvLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbAoJZnVuY3Rpb24gZXF1YWxzKCBwMSwgcDIgKSB7CgoJCXJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7CgoJfQoKCS8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3QKCWZ1bmN0aW9uIGludGVyc2VjdHMoIHAxLCBxMSwgcDIsIHEyICkgewoKCQlpZiAoICggZXF1YWxzKCBwMSwgcDIgKSAmJiBlcXVhbHMoIHExLCBxMiApICkgfHwKCQkJKCBlcXVhbHMoIHAxLCBxMiApICYmIGVxdWFscyggcDIsIHExICkgKSApIHsgcmV0dXJuIHRydWU7IH0KCQlyZXR1cm4gYXJlYSggcDEsIHExLCBwMiApID4gMCAhPT0gYXJlYSggcDEsIHExLCBxMiApID4gMCAmJgoJCQkgICBhcmVhKCBwMiwgcTIsIHAxICkgPiAwICE9PSBhcmVhKCBwMiwgcTIsIHExICkgPiAwOwoKCX0KCgkvLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50cwoJZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSB7CgoJCXZhciBwID0gYTsKCQlkbyB7CgoJCQlpZiAoIHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJgoJCQkJCWludGVyc2VjdHMoIHAsIHAubmV4dCwgYSwgYiApICkgeyByZXR1cm4gdHJ1ZTsgfQoJCQlwID0gcC5uZXh0OwoKCQl9IHdoaWxlICggcCAhPT0gYSApOwoKCQlyZXR1cm4gZmFsc2U7CgoJfQoKCS8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvbgoJZnVuY3Rpb24gbG9jYWxseUluc2lkZSggYSwgYiApIHsKCgkJcmV0dXJuIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPCAwID8KCQkJYXJlYSggYSwgYiwgYS5uZXh0ICkgPj0gMCAmJiBhcmVhKCBhLCBhLnByZXYsIGIgKSA+PSAwIDoKCQkJYXJlYSggYSwgYiwgYS5wcmV2ICkgPCAwIHx8IGFyZWEoIGEsIGEubmV4dCwgYiApIDwgMDsKCgl9CgoJLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uCglmdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7CgoJCXZhciBwID0gYSwKCQkJaW5zaWRlID0gZmFsc2UsCgkJCXB4ID0gKCBhLnggKyBiLnggKSAvIDIsCgkJCXB5ID0gKCBhLnkgKyBiLnkgKSAvIDI7CgkJZG8gewoKCQkJaWYgKCAoICggcC55ID4gcHkgKSAhPT0gKCBwLm5leHQueSA+IHB5ICkgKSAmJiBwLm5leHQueSAhPT0gcC55ICYmCgkJCQkJKCBweCA8ICggcC5uZXh0LnggLSBwLnggKSAqICggcHkgLSBwLnkgKSAvICggcC5uZXh0LnkgLSBwLnkgKSArIHAueCApICkKCQkJCXsgaW5zaWRlID0gISBpbnNpZGU7IH0KCQkJcCA9IHAubmV4dDsKCgkJfSB3aGlsZSAoIHAgIT09IGEgKTsKCgkJcmV0dXJuIGluc2lkZTsKCgl9CgoJLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvOwoJLy8gaWYgb25lIGJlbG9uZ3MgdG8gdGhlIG91dGVyIHJpbmcgYW5kIGFub3RoZXIgdG8gYSBob2xlLCBpdCBtZXJnZXMgaXQgaW50byBhIHNpbmdsZSByaW5nCglmdW5jdGlvbiBzcGxpdFBvbHlnb24oIGEsIGIgKSB7CgoJCXZhciBhMiA9IG5ldyBOb2RlKCBhLmksIGEueCwgYS55ICksCgkJCWIyID0gbmV3IE5vZGUoIGIuaSwgYi54LCBiLnkgKSwKCQkJYW4gPSBhLm5leHQsCgkJCWJwID0gYi5wcmV2OwoKCQlhLm5leHQgPSBiOwoJCWIucHJldiA9IGE7CgoJCWEyLm5leHQgPSBhbjsKCQlhbi5wcmV2ID0gYTI7CgoJCWIyLm5leHQgPSBhMjsKCQlhMi5wcmV2ID0gYjI7CgoJCWJwLm5leHQgPSBiMjsKCQliMi5wcmV2ID0gYnA7CgoJCXJldHVybiBiMjsKCgl9CgoJLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCkKCWZ1bmN0aW9uIGluc2VydE5vZGUoIGksIHgsIHksIGxhc3QgKSB7CgoJCXZhciBwID0gbmV3IE5vZGUoIGksIHgsIHkgKTsKCgkJaWYgKCAhIGxhc3QgKSB7CgoJCQlwLnByZXYgPSBwOwoJCQlwLm5leHQgPSBwOwoKCQl9IGVsc2UgewoKCQkJcC5uZXh0ID0gbGFzdC5uZXh0OwoJCQlwLnByZXYgPSBsYXN0OwoJCQlsYXN0Lm5leHQucHJldiA9IHA7CgkJCWxhc3QubmV4dCA9IHA7CgoJCX0KCgkJcmV0dXJuIHA7CgoJfQoKCWZ1bmN0aW9uIHJlbW92ZU5vZGUoIHAgKSB7CgoJCXAubmV4dC5wcmV2ID0gcC5wcmV2OwoJCXAucHJldi5uZXh0ID0gcC5uZXh0OwoKCQlpZiAoIHAucHJldlogKSB7IHAucHJldloubmV4dFogPSBwLm5leHRaOyB9CgkJaWYgKCBwLm5leHRaICkgeyBwLm5leHRaLnByZXZaID0gcC5wcmV2WjsgfQoKCX0KCglmdW5jdGlvbiBOb2RlKCBpLCB4LCB5ICkgewoKCQkvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXkKCQl0aGlzLmkgPSBpOwoKCQkvLyB2ZXJ0ZXggY29vcmRpbmF0ZXMKCQl0aGlzLnggPSB4OwoJCXRoaXMueSA9IHk7CgoJCS8vIHByZXZpb3VzIGFuZCBuZXh0IHZlcnRleCBub2RlcyBpbiBhIHBvbHlnb24gcmluZwoJCXRoaXMucHJldiA9IG51bGw7CgkJdGhpcy5uZXh0ID0gbnVsbDsKCgkJLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZQoJCXRoaXMueiA9IG51bGw7CgoJCS8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXIKCQl0aGlzLnByZXZaID0gbnVsbDsKCQl0aGlzLm5leHRaID0gbnVsbDsKCgkJLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnQKCQl0aGlzLnN0ZWluZXIgPSBmYWxzZTsKCgl9CgoJZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgewoKCQl2YXIgc3VtID0gMDsKCQlmb3IgKCB2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHsKCgkJCXN1bSArPSAoIGRhdGFbIGogXSAtIGRhdGFbIGkgXSApICogKCBkYXRhWyBpICsgMSBdICsgZGF0YVsgaiArIDEgXSApOwoJCQlqID0gaTsKCgkJfQoKCQlyZXR1cm4gc3VtOwoKCX0KCgkvKioKCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2cKCSAqLwoKCXZhciBTaGFwZVV0aWxzID0gewoKCQkvLyBjYWxjdWxhdGUgYXJlYSBvZiB0aGUgY29udG91ciBwb2x5Z29uCgoJCWFyZWE6IGZ1bmN0aW9uICggY29udG91ciApIHsKCgkJCXZhciBuID0gY29udG91ci5sZW5ndGg7CgkJCXZhciBhID0gMC4wOwoKCQkJZm9yICggdmFyIHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHsKCgkJCQlhICs9IGNvbnRvdXJbIHAgXS54ICogY29udG91clsgcSBdLnkgLSBjb250b3VyWyBxIF0ueCAqIGNvbnRvdXJbIHAgXS55OwoKCQkJfQoKCQkJcmV0dXJuIGEgKiAwLjU7CgoJCX0sCgoJCWlzQ2xvY2tXaXNlOiBmdW5jdGlvbiAoIHB0cyApIHsKCgkJCXJldHVybiBTaGFwZVV0aWxzLmFyZWEoIHB0cyApIDwgMDsKCgkJfSwKCgkJdHJpYW5ndWxhdGVTaGFwZTogZnVuY3Rpb24gKCBjb250b3VyLCBob2xlcyApIHsKCgkJCXZhciB2ZXJ0aWNlcyA9IFtdOyAvLyBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGxpa2UgWyB4MCx5MCwgeDEseTEsIHgyLHkyLCAuLi4gXQoJCQl2YXIgaG9sZUluZGljZXMgPSBbXTsgLy8gYXJyYXkgb2YgaG9sZSBpbmRpY2VzCgkJCXZhciBmYWNlcyA9IFtdOyAvLyBmaW5hbCBhcnJheSBvZiB2ZXJ0ZXggaW5kaWNlcyBsaWtlIFsgWyBhLGIsZCBdLCBbIGIsYyxkIF0gXQoKCQkJcmVtb3ZlRHVwRW5kUHRzKCBjb250b3VyICk7CgkJCWFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7CgoJCQkvLwoKCQkJdmFyIGhvbGVJbmRleCA9IGNvbnRvdXIubGVuZ3RoOwoKCQkJaG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkgKysgKSB7CgoJCQkJaG9sZUluZGljZXMucHVzaCggaG9sZUluZGV4ICk7CgkJCQlob2xlSW5kZXggKz0gaG9sZXNbIGkgXS5sZW5ndGg7CgkJCQlhZGRDb250b3VyKCB2ZXJ0aWNlcywgaG9sZXNbIGkgXSApOwoKCQkJfQoKCQkJLy8KCgkJCXZhciB0cmlhbmdsZXMgPSBFYXJjdXQudHJpYW5ndWxhdGUoIHZlcnRpY2VzLCBob2xlSW5kaWNlcyApOwoKCQkJLy8KCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMyApIHsKCgkJCQlmYWNlcy5wdXNoKCB0cmlhbmdsZXMuc2xpY2UoIGksIGkgKyAzICkgKTsKCgkJCX0KCgkJCXJldHVybiBmYWNlczsKCgkJfQoKCX07CgoJZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7CgoJCXZhciBsID0gcG9pbnRzLmxlbmd0aDsKCgkJaWYgKCBsID4gMiAmJiBwb2ludHNbIGwgLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkgewoKCQkJcG9pbnRzLnBvcCgpOwoKCQl9CgoJfQoKCWZ1bmN0aW9uIGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICkgewoKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250b3VyLmxlbmd0aDsgaSArKyApIHsKCgkJCXZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS54ICk7CgkJCXZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7CgoJCX0KCgl9CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nCgkgKgoJICogQ3JlYXRlcyBleHRydWRlZCBnZW9tZXRyeSBmcm9tIGEgcGF0aCBzaGFwZS4KCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICoKCSAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzCgkgKiAgc3RlcHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIGZvciB6LXNpZGUgZXh0cnVzaW9ucyAvIHVzZWQgZm9yIHN1YmRpdmlkaW5nIHNlZ21lbnRzIG9mIGV4dHJ1ZGUgc3BsaW5lIHRvbwoJICogIGRlcHRoOiA8ZmxvYXQ+LCAvLyBEZXB0aCB0byBleHRydWRlIHRoZSBzaGFwZQoJICoKCSAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbAoJICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRoZSBvcmlnaW5hbCBzaGFwZSBiZXZlbCBnb2VzCgkgKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbAoJICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSBkb2VzIGJldmVsIHN0YXJ0CgkgKiAgYmV2ZWxTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBiZXZlbCBsYXllcnMKCSAqCgkgKiAgZXh0cnVkZVBhdGg6IDxUSFJFRS5DdXJ2ZT4gLy8gY3VydmUgdG8gZXh0cnVkZSBzaGFwZSBhbG9uZwoJICoKCSAqICBVVkdlbmVyYXRvcjogPE9iamVjdD4gLy8gb2JqZWN0IHRoYXQgcHJvdmlkZXMgVVYgZ2VuZXJhdG9yIGZ1bmN0aW9ucwoJICoKCSAqIH0KCSAqLwoKCS8vIEV4dHJ1ZGVHZW9tZXRyeQoKCWZ1bmN0aW9uIEV4dHJ1ZGVHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkgewoKCQlHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdFeHRydWRlR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXNoYXBlczogc2hhcGVzLAoJCQlvcHRpb25zOiBvcHRpb25zCgkJfTsKCgkJdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBFeHRydWRlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgb3B0aW9ucyApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCUV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCUV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlR2VvbWV0cnk7CgoJRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBkYXRhID0gR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7CgoJCXZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzOwoJCXZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7CgoJCXJldHVybiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApOwoKCX07CgoJLy8gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5CgoJZnVuY3Rpb24gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0V4dHJ1ZGVCdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJc2hhcGVzOiBzaGFwZXMsCgkJCW9wdGlvbnM6IG9wdGlvbnMKCQl9OwoKCQlzaGFwZXMgPSBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA/IHNoYXBlcyA6IFsgc2hhcGVzIF07CgoJCXZhciBzY29wZSA9IHRoaXM7CgoJCXZhciB2ZXJ0aWNlc0FycmF5ID0gW107CgkJdmFyIHV2QXJyYXkgPSBbXTsKCgkJZm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQl2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTsKCQkJYWRkU2hhcGUoIHNoYXBlICk7CgoJCX0KCgkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlc0FycmF5LCAzICkgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApOwoKCQl0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7CgoJCS8vIGZ1bmN0aW9ucwoKCQlmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7CgoJCQl2YXIgcGxhY2Vob2xkZXIgPSBbXTsKCgkJCS8vIG9wdGlvbnMKCgkJCXZhciBjdXJ2ZVNlZ21lbnRzID0gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmN1cnZlU2VnbWVudHMgOiAxMjsKCQkJdmFyIHN0ZXBzID0gb3B0aW9ucy5zdGVwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVwcyA6IDE7CgkJCXZhciBkZXB0aCA9IG9wdGlvbnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGggOiAxMDA7CgoJCQl2YXIgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTsKCQkJdmFyIGJldmVsVGhpY2tuZXNzID0gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyA6IDY7CgkJCXZhciBiZXZlbFNpemUgPSBvcHRpb25zLmJldmVsU2l6ZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNpemUgOiBiZXZlbFRoaWNrbmVzcyAtIDI7CgkJCXZhciBiZXZlbE9mZnNldCA9IG9wdGlvbnMuYmV2ZWxPZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxPZmZzZXQgOiAwOwoJCQl2YXIgYmV2ZWxTZWdtZW50cyA9IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNlZ21lbnRzIDogMzsKCgkJCXZhciBleHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGg7CgoJCQl2YXIgdXZnZW4gPSBvcHRpb25zLlVWR2VuZXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLlVWR2VuZXJhdG9yIDogV29ybGRVVkdlbmVyYXRvcjsKCgkJCS8vIGRlcHJlY2F0ZWQgb3B0aW9ucwoKCQkJaWYgKCBvcHRpb25zLmFtb3VudCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogYW1vdW50IGhhcyBiZWVuIHJlbmFtZWQgdG8gZGVwdGguJyApOwoJCQkJZGVwdGggPSBvcHRpb25zLmFtb3VudDsKCgkJCX0KCgkJCS8vCgoJCQl2YXIgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlOwoJCQl2YXIgc3BsaW5lVHViZSwgYmlub3JtYWwsIG5vcm1hbCwgcG9zaXRpb24yOwoKCQkJaWYgKCBleHRydWRlUGF0aCApIHsKCgkJCQlleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApOwoKCQkJCWV4dHJ1ZGVCeVBhdGggPSB0cnVlOwoJCQkJYmV2ZWxFbmFibGVkID0gZmFsc2U7IC8vIGJldmVscyBub3Qgc3VwcG9ydGVkIGZvciBwYXRoIGV4dHJ1c2lvbgoKCQkJCS8vIFNFVFVQIFROQiB2YXJpYWJsZXMKCgkJCQkvLyBUT0RPMSAtIGhhdmUgYSAuaXNDbG9zZWQgaW4gc3BsaW5lPwoKCQkJCXNwbGluZVR1YmUgPSBleHRydWRlUGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCBzdGVwcywgZmFsc2UgKTsKCgkJCQkvLyBjb25zb2xlLmxvZyhzcGxpbmVUdWJlLCAnc3BsaW5lVHViZScsIHNwbGluZVR1YmUubm9ybWFscy5sZW5ndGgsICdzdGVwcycsIHN0ZXBzLCAnZXh0cnVkZVB0cycsIGV4dHJ1ZGVQdHMubGVuZ3RoKTsKCgkJCQliaW5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7CgkJCQlub3JtYWwgPSBuZXcgVmVjdG9yMygpOwoJCQkJcG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCS8vIFNhZmVndWFyZHMgaWYgYmV2ZWxzIGFyZSBub3QgZW5hYmxlZAoKCQkJaWYgKCAhIGJldmVsRW5hYmxlZCApIHsKCgkJCQliZXZlbFNlZ21lbnRzID0gMDsKCQkJCWJldmVsVGhpY2tuZXNzID0gMDsKCQkJCWJldmVsU2l6ZSA9IDA7CgkJCQliZXZlbE9mZnNldCA9IDA7CgoJCQl9CgoJCQkvLyBWYXJpYWJsZXMgaW5pdGlhbGl6YXRpb24KCgkJCXZhciBhaG9sZSwgaCwgaGw7IC8vIGxvb3Bpbmcgb2YgaG9sZXMKCgkJCXZhciBzaGFwZVBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTsKCgkJCXZhciB2ZXJ0aWNlcyA9IHNoYXBlUG9pbnRzLnNoYXBlOwoJCQl2YXIgaG9sZXMgPSBzaGFwZVBvaW50cy5ob2xlczsKCgkJCXZhciByZXZlcnNlID0gISBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCB2ZXJ0aWNlcyApOwoKCQkJaWYgKCByZXZlcnNlICkgewoKCQkJCXZlcnRpY2VzID0gdmVydGljZXMucmV2ZXJzZSgpOwoKCQkJCS8vIE1heWJlIHdlIHNob3VsZCBhbHNvIGNoZWNrIGlmIGhvbGVzIGFyZSBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBqdXN0IHRvIGJlIHNhZmUgLi4uCgoJCQkJZm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7CgoJCQkJCWFob2xlID0gaG9sZXNbIGggXTsKCgkJCQkJaWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBhaG9sZSApICkgewoKCQkJCQkJaG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgoJCQl2YXIgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoIHZlcnRpY2VzLCBob2xlcyApOwoKCQkJLyogVmVydGljZXMgKi8KCgkJCXZhciBjb250b3VyID0gdmVydGljZXM7IC8vIHZlcnRpY2VzIGhhcyBhbGwgcG9pbnRzIGJ1dCBjb250b3VyIGhhcyBvbmx5IHBvaW50cyBvZiBjaXJjdW1mZXJlbmNlCgoJCQlmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHsKCgkJCQlhaG9sZSA9IGhvbGVzWyBoIF07CgoJCQkJdmVydGljZXMgPSB2ZXJ0aWNlcy5jb25jYXQoIGFob2xlICk7CgoJCQl9CgoKCQkJZnVuY3Rpb24gc2NhbGVQdDIoIHB0LCB2ZWMsIHNpemUgKSB7CgoJCQkJaWYgKCAhIHZlYyApIHsgY29uc29sZS5lcnJvciggIlRIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogdmVjIGRvZXMgbm90IGV4aXN0IiApOyB9CgoJCQkJcmV0dXJuIHZlYy5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKCBzaXplICkuYWRkKCBwdCApOwoKCQkJfQoKCQkJdmFyIGIsIGJzLCB0LCB6LAoJCQkJdmVydCwgdmxlbiA9IHZlcnRpY2VzLmxlbmd0aCwKCQkJCWZhY2UsIGZsZW4gPSBmYWNlcy5sZW5ndGg7CgoKCQkJLy8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudAoKCgkJCWZ1bmN0aW9uIGdldEJldmVsVmVjKCBpblB0LCBpblByZXYsIGluTmV4dCApIHsKCgkJCQkvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyCgkJCQkvLyAgIHNoaWZ0ZWQgYnkgMSB1bml0IChsZW5ndGggb2Ygbm9ybWFsaXplZCB2ZWN0b3IpIHRvIHRoZSBsZWZ0CgkJCQkvLyBpZiB3ZSB3YWxrIGFsb25nIGNvbnRvdXIgY2xvY2t3aXNlLCB0aGlzIG5ldyBjb250b3VyIGlzIG91dHNpZGUgdGhlIG9sZCBvbmUKCQkJCS8vCgkJCQkvLyBpblB0JyBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gbGluZXMgcGFyYWxsZWwgdG8gdGhlIHR3bwoJCQkJLy8gIGFkamFjZW50IGVkZ2VzIG9mIGluUHQgYXQgYSBkaXN0YW5jZSBvZiAxIHVuaXQgb24gdGhlIGxlZnQgc2lkZS4KCgkJCQl2YXIgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdAoKCQkJCS8vIGdvb2QgcmVhZGluZyBmb3IgZ2VvbWV0cnkgYWxnb3JpdGhtcyAoaGVyZTogbGluZS1saW5lIGludGVyc2VjdGlvbikKCQkJCS8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTA1LV9pbnRlcnNlY3QtMS5odG1sCgoJCQkJdmFyIHZfcHJldl94ID0gaW5QdC54IC0gaW5QcmV2LngsCgkJCQkJdl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTsKCQkJCXZhciB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LAoJCQkJCXZfbmV4dF95ID0gaW5OZXh0LnkgLSBpblB0Lnk7CgoJCQkJdmFyIHZfcHJldl9sZW5zcSA9ICggdl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kgKTsKCgkJCQkvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzCgkJCQl2YXIgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTsKCgkJCQlpZiAoIE1hdGguYWJzKCBjb2xsaW5lYXIwICkgPiBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCQkJLy8gbm90IGNvbGxpbmVhcgoKCQkJCQkvLyBsZW5ndGggb2YgdmVjdG9ycyBmb3Igbm9ybWFsaXppbmcKCgkJCQkJdmFyIHZfcHJldl9sZW4gPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApOwoJCQkJCXZhciB2X25leHRfbGVuID0gTWF0aC5zcXJ0KCB2X25leHRfeCAqIHZfbmV4dF94ICsgdl9uZXh0X3kgKiB2X25leHRfeSApOwoKCQkJCQkvLyBzaGlmdCBhZGphY2VudCBwb2ludHMgYnkgdW5pdCB2ZWN0b3JzIHRvIHRoZSBsZWZ0CgoJCQkJCXZhciBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApOwoJCQkJCXZhciBwdFByZXZTaGlmdF95ID0gKCBpblByZXYueSArIHZfcHJldl94IC8gdl9wcmV2X2xlbiApOwoKCQkJCQl2YXIgcHROZXh0U2hpZnRfeCA9ICggaW5OZXh0LnggLSB2X25leHRfeSAvIHZfbmV4dF9sZW4gKTsKCQkJCQl2YXIgcHROZXh0U2hpZnRfeSA9ICggaW5OZXh0LnkgKyB2X25leHRfeCAvIHZfbmV4dF9sZW4gKTsKCgkJCQkJLy8gc2NhbGluZyBmYWN0b3IgZm9yIHZfcHJldiB0byBpbnRlcnNlY3Rpb24gcG9pbnQKCgkJCQkJdmFyIHNmID0gKCAoIHB0TmV4dFNoaWZ0X3ggLSBwdFByZXZTaGlmdF94ICkgKiB2X25leHRfeSAtCgkJCQkJCQkoIHB0TmV4dFNoaWZ0X3kgLSBwdFByZXZTaGlmdF95ICkgKiB2X25leHRfeCApIC8KCQkJCQkJKCB2X3ByZXZfeCAqIHZfbmV4dF95IC0gdl9wcmV2X3kgKiB2X25leHRfeCApOwoKCQkJCQkvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludAoKCQkJCQl2X3RyYW5zX3ggPSAoIHB0UHJldlNoaWZ0X3ggKyB2X3ByZXZfeCAqIHNmIC0gaW5QdC54ICk7CgkJCQkJdl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApOwoKCQkJCQkvLyBEb24ndCBub3JtYWxpemUhLCBvdGhlcndpc2Ugc2hhcnAgY29ybmVycyBiZWNvbWUgdWdseQoJCQkJCS8vICBidXQgcHJldmVudCBjcmF6eSBzcGlrZXMKCQkJCQl2YXIgdl90cmFuc19sZW5zcSA9ICggdl90cmFuc194ICogdl90cmFuc194ICsgdl90cmFuc195ICogdl90cmFuc195ICk7CgkJCQkJaWYgKCB2X3RyYW5zX2xlbnNxIDw9IDIgKSB7CgoJCQkJCQlyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCwgdl90cmFuc195ICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfdHJhbnNfbGVuc3EgLyAyICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQkvLyBoYW5kbGUgc3BlY2lhbCBjYXNlIG9mIGNvbGxpbmVhciBlZGdlcwoKCQkJCQl2YXIgZGlyZWN0aW9uX2VxID0gZmFsc2U7IC8vIGFzc3VtZXM6IG9wcG9zaXRlCgkJCQkJaWYgKCB2X3ByZXZfeCA+IE51bWJlci5FUFNJTE9OICkgewoKCQkJCQkJaWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkgewoKCQkJCQkJCWRpcmVjdGlvbl9lcSA9IHRydWU7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCQkJCQlpZiAoIHZfbmV4dF94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCQkJCQkJZGlyZWN0aW9uX2VxID0gdHJ1ZTsKCgkJCQkJCQl9CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCWlmICggTWF0aC5zaWduKCB2X3ByZXZfeSApID09PSBNYXRoLnNpZ24oIHZfbmV4dF95ICkgKSB7CgoJCQkJCQkJCWRpcmVjdGlvbl9lcSA9IHRydWU7CgoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJCWlmICggZGlyZWN0aW9uX2VxICkgewoKCQkJCQkJLy8gY29uc29sZS5sb2coIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNlcXVlbmNlIik7CgkJCQkJCXZfdHJhbnNfeCA9IC0gdl9wcmV2X3k7CgkJCQkJCXZfdHJhbnNfeSA9IHZfcHJldl94OwoJCQkJCQlzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gY29uc29sZS5sb2coIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNwaWtlIik7CgkJCQkJCXZfdHJhbnNfeCA9IHZfcHJldl94OwoJCQkJCQl2X3RyYW5zX3kgPSB2X3ByZXZfeTsKCQkJCQkJc2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgLyAyICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJcmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3ggLyBzaHJpbmtfYnksIHZfdHJhbnNfeSAvIHNocmlua19ieSApOwoKCQkJfQoKCgkJCXZhciBjb250b3VyTW92ZW1lbnRzID0gW107CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkgewoKCQkJCWlmICggaiA9PT0gaWwgKSB7IGogPSAwOyB9CgkJCQlpZiAoIGsgPT09IGlsICkgeyBrID0gMDsgfQoKCQkJCS8vICAoaiktLS0oaSktLS0oaykKCQkJCS8vIGNvbnNvbGUubG9nKCdpLGosaycsIGksIGogLCBrKQoKCQkJCWNvbnRvdXJNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBjb250b3VyWyBpIF0sIGNvbnRvdXJbIGogXSwgY29udG91clsgayBdICk7CgoJCQl9CgoJCQl2YXIgaG9sZXNNb3ZlbWVudHMgPSBbXSwKCQkJCW9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTsKCgkJCWZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkgewoKCQkJCWFob2xlID0gaG9sZXNbIGggXTsKCgkJCQlvbmVIb2xlTW92ZW1lbnRzID0gW107CgoJCQkJZm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHsKCgkJCQkJaWYgKCBqID09PSBpbCApIHsgaiA9IDA7IH0KCQkJCQlpZiAoIGsgPT09IGlsICkgeyBrID0gMDsgfQoKCQkJCQkvLyAgKGopLS0tKGkpLS0tKGspCgkJCQkJb25lSG9sZU1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGFob2xlWyBpIF0sIGFob2xlWyBqIF0sIGFob2xlWyBrIF0gKTsKCgkJCQl9CgoJCQkJaG9sZXNNb3ZlbWVudHMucHVzaCggb25lSG9sZU1vdmVtZW50cyApOwoJCQkJdmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTsKCgkJCX0KCgoJCQkvLyBMb29wIGJldmVsU2VnbWVudHMsIDEgZm9yIHRoZSBmcm9udCwgMSBmb3IgdGhlIGJhY2sKCgkJCWZvciAoIGIgPSAwOyBiIDwgYmV2ZWxTZWdtZW50czsgYiArKyApIHsKCgkJCQkvL2ZvciAoIGIgPSBiZXZlbFNlZ21lbnRzOyBiID4gMDsgYiAtLSApIHsKCgkJCQl0ID0gYiAvIGJldmVsU2VnbWVudHM7CgkJCQl6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7CgkJCQlicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0OwoKCQkJCS8vIGNvbnRyYWN0IHNoYXBlCgoJCQkJZm9yICggaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTsKCgkJCQkJdiggdmVydC54LCB2ZXJ0LnksIC0geiApOwoKCQkJCX0KCgkJCQkvLyBleHBhbmQgaG9sZXMKCgkJCQlmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHsKCgkJCQkJYWhvbGUgPSBob2xlc1sgaCBdOwoJCQkJCW9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdOwoKCQkJCQlmb3IgKCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCXZlcnQgPSBzY2FsZVB0MiggYWhvbGVbIGkgXSwgb25lSG9sZU1vdmVtZW50c1sgaSBdLCBicyApOwoKCQkJCQkJdiggdmVydC54LCB2ZXJ0LnksIC0geiApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJYnMgPSBiZXZlbFNpemUgKyBiZXZlbE9mZnNldDsKCgkJCS8vIEJhY2sgZmFjaW5nIHZlcnRpY2VzCgoJCQlmb3IgKCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7CgoJCQkJdmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTsKCgkJCQlpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHsKCgkJCQkJdiggdmVydC54LCB2ZXJ0LnksIDAgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQkvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIDAgXS55LCBleHRydWRlUHRzWyAwIF0ueCApOwoKCQkJCQlub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7CgkJCQkJYmlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTsKCgkJCQkJcG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIDAgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApOwoKCQkJCQl2KCBwb3NpdGlvbjIueCwgcG9zaXRpb24yLnksIHBvc2l0aW9uMi56ICk7CgoJCQkJfQoKCQkJfQoKCQkJLy8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi4KCQkJLy8gSW5jbHVkaW5nIGZyb250IGZhY2luZyB2ZXJ0aWNlcwoKCQkJdmFyIHM7CgoJCQlmb3IgKCBzID0gMTsgcyA8PSBzdGVwczsgcyArKyApIHsKCgkJCQlmb3IgKCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7CgoJCQkJCXZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0MiggdmVydGljZXNbIGkgXSwgdmVydGljZXNNb3ZlbWVudHNbIGkgXSwgYnMgKSA6IHZlcnRpY2VzWyBpIF07CgoJCQkJCWlmICggISBleHRydWRlQnlQYXRoICkgewoKCQkJCQkJdiggdmVydC54LCB2ZXJ0LnksIGRlcHRoIC8gc3RlcHMgKiBzICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgcyAtIDEgXS54ICk7CgoJCQkJCQlub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7CgkJCQkJCWJpbm9ybWFsLmNvcHkoIHNwbGluZVR1YmUuYmlub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC55ICk7CgoJCQkJCQlwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgcyBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7CgoJCQkJCQl2KCBwb3NpdGlvbjIueCwgcG9zaXRpb24yLnksIHBvc2l0aW9uMi56ICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoKCQkJLy8gQWRkIGJldmVsIHNlZ21lbnRzIHBsYW5lcwoKCQkJLy9mb3IgKCBiID0gMTsgYiA8PSBiZXZlbFNlZ21lbnRzOyBiICsrICkgewoJCQlmb3IgKCBiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYiAtLSApIHsKCgkJCQl0ID0gYiAvIGJldmVsU2VnbWVudHM7CgkJCQl6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7CgkJCQlicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0OwoKCQkJCS8vIGNvbnRyYWN0IHNoYXBlCgoJCQkJZm9yICggaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTsKCQkJCQl2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7CgoJCQkJfQoKCQkJCS8vIGV4cGFuZCBob2xlcwoKCQkJCWZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkgewoKCQkJCQlhaG9sZSA9IGhvbGVzWyBoIF07CgkJCQkJb25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07CgoJCQkJCWZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQkJdmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7CgoJCQkJCQlpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHsKCgkJCQkJCQl2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCXYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueCArIHogKTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCS8qIEZhY2VzICovCgoJCQkvLyBUb3AgYW5kIGJvdHRvbSBmYWNlcwoKCQkJYnVpbGRMaWRGYWNlcygpOwoKCQkJLy8gU2lkZXMgZmFjZXMKCgkJCWJ1aWxkU2lkZUZhY2VzKCk7CgoKCQkJLy8vLy8gIEludGVybmFsIGZ1bmN0aW9ucwoKCQkJZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHsKCgkJCQl2YXIgc3RhcnQgPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7CgoJCQkJaWYgKCBiZXZlbEVuYWJsZWQgKSB7CgoJCQkJCXZhciBsYXllciA9IDA7IC8vIHN0ZXBzICsgMQoJCQkJCXZhciBvZmZzZXQgPSB2bGVuICogbGF5ZXI7CgoJCQkJCS8vIEJvdHRvbSBmYWNlcwoKCQkJCQlmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7CgoJCQkJCQlmYWNlID0gZmFjZXNbIGkgXTsKCQkJCQkJZjMoIGZhY2VbIDIgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAwIF0gKyBvZmZzZXQgKTsKCgkJCQkJfQoKCQkJCQlsYXllciA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7CgkJCQkJb2Zmc2V0ID0gdmxlbiAqIGxheWVyOwoKCQkJCQkvLyBUb3AgZmFjZXMKCgkJCQkJZm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkgewoKCQkJCQkJZmFjZSA9IGZhY2VzWyBpIF07CgkJCQkJCWYzKCBmYWNlWyAwIF0gKyBvZmZzZXQsIGZhY2VbIDEgXSArIG9mZnNldCwgZmFjZVsgMiBdICsgb2Zmc2V0ICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQkvLyBCb3R0b20gZmFjZXMKCgkJCQkJZm9yICggaSA9IDA7IGkgPCBmbGVuOyBpICsrICkgewoKCQkJCQkJZmFjZSA9IGZhY2VzWyBpIF07CgkJCQkJCWYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7CgoJCQkJCX0KCgkJCQkJLy8gVG9wIGZhY2VzCgoJCQkJCWZvciAoIGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHsKCgkJCQkJCWZhY2UgPSBmYWNlc1sgaSBdOwoJCQkJCQlmMyggZmFjZVsgMCBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAxIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDIgXSArIHZsZW4gKiBzdGVwcyApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDAgKTsKCgkJCX0KCgkJCS8vIENyZWF0ZSBmYWNlcyBmb3IgdGhlIHotc2lkZXMgb2YgdGhlIHNoYXBlCgoJCQlmdW5jdGlvbiBidWlsZFNpZGVGYWNlcygpIHsKCgkJCQl2YXIgc3RhcnQgPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7CgkJCQl2YXIgbGF5ZXJvZmZzZXQgPSAwOwoJCQkJc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApOwoJCQkJbGF5ZXJvZmZzZXQgKz0gY29udG91ci5sZW5ndGg7CgoJCQkJZm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7CgoJCQkJCWFob2xlID0gaG9sZXNbIGggXTsKCQkJCQlzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApOwoKCQkJCQkvLywgdHJ1ZQoJCQkJCWxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDsKCgkJCQl9CgoKCQkJCXNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDEgKTsKCgoJCQl9CgoJCQlmdW5jdGlvbiBzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICkgewoKCQkJCXZhciBqLCBrOwoJCQkJaSA9IGNvbnRvdXIubGVuZ3RoOwoKCQkJCXdoaWxlICggLS0gaSA+PSAwICkgewoKCQkJCQlqID0gaTsKCQkJCQlrID0gaSAtIDE7CgkJCQkJaWYgKCBrIDwgMCApIHsgayA9IGNvbnRvdXIubGVuZ3RoIC0gMTsgfQoKCQkJCQkvL2NvbnNvbGUubG9nKCdiJywgaSxqLCBpLTEsIGssdmVydGljZXMubGVuZ3RoKTsKCgkJCQkJdmFyIHMgPSAwLAoJCQkJCQlzbCA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7CgoJCQkJCWZvciAoIHMgPSAwOyBzIDwgc2w7IHMgKysgKSB7CgoJCQkJCQl2YXIgc2xlbjEgPSB2bGVuICogczsKCQkJCQkJdmFyIHNsZW4yID0gdmxlbiAqICggcyArIDEgKTsKCgkJCQkJCXZhciBhID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjEsCgkJCQkJCQliID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjEsCgkJCQkJCQljID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsCgkJCQkJCQlkID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjI7CgoJCQkJCQlmNCggYSwgYiwgYywgZCApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJZnVuY3Rpb24gdiggeCwgeSwgeiApIHsKCgkJCQlwbGFjZWhvbGRlci5wdXNoKCB4ICk7CgkJCQlwbGFjZWhvbGRlci5wdXNoKCB5ICk7CgkJCQlwbGFjZWhvbGRlci5wdXNoKCB6ICk7CgoJCQl9CgoKCQkJZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7CgoJCQkJYWRkVmVydGV4KCBhICk7CgkJCQlhZGRWZXJ0ZXgoIGIgKTsKCQkJCWFkZFZlcnRleCggYyApOwoKCQkJCXZhciBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7CgkJCQl2YXIgdXZzID0gdXZnZW4uZ2VuZXJhdGVUb3BVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTsKCgkJCQlhZGRVViggdXZzWyAwIF0gKTsKCQkJCWFkZFVWKCB1dnNbIDEgXSApOwoJCQkJYWRkVVYoIHV2c1sgMiBdICk7CgoJCQl9CgoJCQlmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHsKCgkJCQlhZGRWZXJ0ZXgoIGEgKTsKCQkJCWFkZFZlcnRleCggYiApOwoJCQkJYWRkVmVydGV4KCBkICk7CgoJCQkJYWRkVmVydGV4KCBiICk7CgkJCQlhZGRWZXJ0ZXgoIGMgKTsKCQkJCWFkZFZlcnRleCggZCApOwoKCgkJCQl2YXIgbmV4dEluZGV4ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzOwoJCQkJdmFyIHV2cyA9IHV2Z2VuLmdlbmVyYXRlU2lkZVdhbGxVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTsKCgkJCQlhZGRVViggdXZzWyAwIF0gKTsKCQkJCWFkZFVWKCB1dnNbIDEgXSApOwoJCQkJYWRkVVYoIHV2c1sgMyBdICk7CgoJCQkJYWRkVVYoIHV2c1sgMSBdICk7CgkJCQlhZGRVViggdXZzWyAyIF0gKTsKCQkJCWFkZFVWKCB1dnNbIDMgXSApOwoKCQkJfQoKCQkJZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHsKCgkJCQl2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAwIF0gKTsKCQkJCXZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDEgXSApOwoJCQkJdmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMiBdICk7CgoJCQl9CgoKCQkJZnVuY3Rpb24gYWRkVVYoIHZlY3RvcjIgKSB7CgoJCQkJdXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTsKCQkJCXV2QXJyYXkucHVzaCggdmVjdG9yMi55ICk7CgoJCQl9CgoJCX0KCgl9CgoJRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTsKCglFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsKCgkJdmFyIGRhdGEgPSBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJdmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLnBhcmFtZXRlcnMub3B0aW9uczsKCgkJcmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7CgoJfTsKCgkvLwoKCXZhciBXb3JsZFVWR2VuZXJhdG9yID0gewoKCQlnZW5lcmF0ZVRvcFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QyApIHsKCgkJCXZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdOwoJCQl2YXIgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07CgkJCXZhciBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdOwoJCQl2YXIgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07CgkJCXZhciBjX3ggPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyBdOwoJCQl2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07CgoJCQlyZXR1cm4gWwoJCQkJbmV3IFZlY3RvcjIoIGFfeCwgYV95ICksCgkJCQluZXcgVmVjdG9yMiggYl94LCBiX3kgKSwKCQkJCW5ldyBWZWN0b3IyKCBjX3gsIGNfeSApCgkJCV07CgoJCX0sCgoJCWdlbmVyYXRlU2lkZVdhbGxVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMsIGluZGV4RCApIHsKCgkJCXZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdOwoJCQl2YXIgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07CgkJCXZhciBhX3ogPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDIgXTsKCQkJdmFyIGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07CgkJCXZhciBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTsKCQkJdmFyIGJfeiA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMiBdOwoJCQl2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTsKCQkJdmFyIGNfeSA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMSBdOwoJCQl2YXIgY196ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAyIF07CgkJCXZhciBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdOwoJCQl2YXIgZF95ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAxIF07CgkJCXZhciBkX3ogPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDIgXTsKCgkJCWlmICggTWF0aC5hYnMoIGFfeSAtIGJfeSApIDwgMC4wMSApIHsKCgkJCQlyZXR1cm4gWwoJCQkJCW5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSwKCQkJCQluZXcgVmVjdG9yMiggYl94LCAxIC0gYl96ICksCgkJCQkJbmV3IFZlY3RvcjIoIGNfeCwgMSAtIGNfeiApLAoJCQkJCW5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKQoJCQkJXTsKCgkJCX0gZWxzZSB7CgoJCQkJcmV0dXJuIFsKCQkJCQluZXcgVmVjdG9yMiggYV95LCAxIC0gYV96ICksCgkJCQkJbmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLAoJCQkJCW5ldyBWZWN0b3IyKCBjX3ksIDEgLSBjX3ogKSwKCQkJCQluZXcgVmVjdG9yMiggZF95LCAxIC0gZF96ICkKCQkJCV07CgoJCQl9CgoJCX0KCX07CgoJZnVuY3Rpb24gdG9KU09OKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKSB7CgoJCS8vCgoJCWRhdGEuc2hhcGVzID0gW107CgoJCWlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTsKCgkJCQlkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7CgoJCQl9CgoJCX0gZWxzZSB7CgoJCQlkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApOwoKCQl9CgoJCS8vCgoJCWlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoLnRvSlNPTigpOyB9CgoJCXJldHVybiBkYXRhOwoKCX0KCgkvKioKCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2cKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKgoJICogVGV4dCA9IDNEIFRleHQKCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGZvbnQ6IDxUSFJFRS5Gb250PiwgLy8gZm9udAoJICoKCSAqICBzaXplOiA8ZmxvYXQ+LCAvLyBzaXplIG9mIHRoZSB0ZXh0CgkgKiAgaGVpZ2h0OiA8ZmxvYXQ+LCAvLyB0aGlja25lc3MgdG8gZXh0cnVkZSB0ZXh0CgkgKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlcwoJICoKCSAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbAoJICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRleHQgYmV2ZWwgZ29lcwoJICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHRleHQgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbAoJICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+IC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydAoJICogfQoJICovCgoJLy8gVGV4dEdlb21ldHJ5CgoJZnVuY3Rpb24gVGV4dEdlb21ldHJ5KCB0ZXh0LCBwYXJhbWV0ZXJzICkgewoKCQlHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdUZXh0R2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXRleHQ6IHRleHQsCgkJCXBhcmFtZXRlcnM6IHBhcmFtZXRlcnMKCQl9OwoKCQl0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRleHRCdWZmZXJHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCVRleHRHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCVRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0R2VvbWV0cnk7CgoJLy8gVGV4dEJ1ZmZlckdlb21ldHJ5CgoJZnVuY3Rpb24gVGV4dEJ1ZmZlckdlb21ldHJ5KCB0ZXh0LCBwYXJhbWV0ZXJzICkgewoKCQlwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTsKCgkJdmFyIGZvbnQgPSBwYXJhbWV0ZXJzLmZvbnQ7CgoJCWlmICggISAoIGZvbnQgJiYgZm9udC5pc0ZvbnQgKSApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5UZXh0R2VvbWV0cnk6IGZvbnQgcGFyYW1ldGVyIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5Gb250LicgKTsKCQkJcmV0dXJuIG5ldyBHZW9tZXRyeSgpOwoKCQl9CgoJCXZhciBzaGFwZXMgPSBmb250LmdlbmVyYXRlU2hhcGVzKCB0ZXh0LCBwYXJhbWV0ZXJzLnNpemUgKTsKCgkJLy8gdHJhbnNsYXRlIHBhcmFtZXRlcnMgdG8gRXh0cnVkZUdlb21ldHJ5IEFQSQoKCQlwYXJhbWV0ZXJzLmRlcHRoID0gcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuaGVpZ2h0IDogNTA7CgoJCS8vIGRlZmF1bHRzCgoJCWlmICggcGFyYW1ldGVycy5iZXZlbFRoaWNrbmVzcyA9PT0gdW5kZWZpbmVkICkgeyBwYXJhbWV0ZXJzLmJldmVsVGhpY2tuZXNzID0gMTA7IH0KCQlpZiAoIHBhcmFtZXRlcnMuYmV2ZWxTaXplID09PSB1bmRlZmluZWQgKSB7IHBhcmFtZXRlcnMuYmV2ZWxTaXplID0gODsgfQoJCWlmICggcGFyYW1ldGVycy5iZXZlbEVuYWJsZWQgPT09IHVuZGVmaW5lZCApIHsgcGFyYW1ldGVycy5iZXZlbEVuYWJsZWQgPSBmYWxzZTsgfQoKCQlFeHRydWRlQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgc2hhcGVzLCBwYXJhbWV0ZXJzICk7CgoJCXRoaXMudHlwZSA9ICdUZXh0QnVmZmVyR2VvbWV0cnknOwoKCX0KCglUZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXMKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBTcGhlcmVHZW9tZXRyeQoKCWZ1bmN0aW9uIFNwaGVyZUdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQl3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLAoJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsCgkJCXBoaVN0YXJ0OiBwaGlTdGFydCwKCQkJcGhpTGVuZ3RoOiBwaGlMZW5ndGgsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTsKCQl0aGlzLm1lcmdlVmVydGljZXMoKTsKCgl9CgoJU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglTcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcGhlcmVHZW9tZXRyeTsKCgkvLyBTcGhlcmVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHsKCgkJQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnU3BoZXJlQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQl3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLAoJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsCgkJCXBoaVN0YXJ0OiBwaGlTdGFydCwKCQkJcGhpTGVuZ3RoOiBwaGlMZW5ndGgsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXJhZGl1cyA9IHJhZGl1cyB8fCAxOwoKCQl3aWR0aFNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCA4ICk7CgkJaGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCA2ICk7CgoJCXBoaVN0YXJ0ID0gcGhpU3RhcnQgIT09IHVuZGVmaW5lZCA/IHBoaVN0YXJ0IDogMDsKCQlwaGlMZW5ndGggPSBwaGlMZW5ndGggIT09IHVuZGVmaW5lZCA/IHBoaUxlbmd0aCA6IE1hdGguUEkgKiAyOwoKCQl0aGV0YVN0YXJ0ID0gdGhldGFTdGFydCAhPT0gdW5kZWZpbmVkID8gdGhldGFTdGFydCA6IDA7CgkJdGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJOwoKCQl2YXIgdGhldGFFbmQgPSBNYXRoLm1pbiggdGhldGFTdGFydCArIHRoZXRhTGVuZ3RoLCBNYXRoLlBJICk7CgoJCXZhciBpeCwgaXk7CgoJCXZhciBpbmRleCA9IDA7CgkJdmFyIGdyaWQgPSBbXTsKCgkJdmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2cwoKCQlmb3IgKCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHsKCgkJCXZhciB2ZXJ0aWNlc1JvdyA9IFtdOwoKCQkJdmFyIHYgPSBpeSAvIGhlaWdodFNlZ21lbnRzOwoKCQkJLy8gc3BlY2lhbCBjYXNlIGZvciB0aGUgcG9sZXMKCgkJCXZhciB1T2Zmc2V0ID0gMDsKCgkJCWlmICggaXkgPT0gMCAmJiB0aGV0YVN0YXJ0ID09IDAgKSB7CgoJCQkJdU9mZnNldCA9IDAuNSAvIHdpZHRoU2VnbWVudHM7CgoJCQl9IGVsc2UgaWYgKCBpeSA9PSBoZWlnaHRTZWdtZW50cyAmJiB0aGV0YUVuZCA9PSBNYXRoLlBJICkgewoKCQkJCXVPZmZzZXQgPSAtIDAuNSAvIHdpZHRoU2VnbWVudHM7CgoJCQl9CgoJCQlmb3IgKCBpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4ICsrICkgewoKCQkJCXZhciB1ID0gaXggLyB3aWR0aFNlZ21lbnRzOwoKCQkJCS8vIHZlcnRleAoKCQkJCXZlcnRleC54ID0gLSByYWRpdXMgKiBNYXRoLmNvcyggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApOwoJCQkJdmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApOwoJCQkJdmVydGV4LnogPSByYWRpdXMgKiBNYXRoLnNpbiggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApOwoKCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCQkvLyBub3JtYWwKCgkJCQlub3JtYWwuY29weSggdmVydGV4ICkubm9ybWFsaXplKCk7CgkJCQlub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTsKCgkJCQkvLyB1dgoKCQkJCXV2cy5wdXNoKCB1ICsgdU9mZnNldCwgMSAtIHYgKTsKCgkJCQl2ZXJ0aWNlc1Jvdy5wdXNoKCBpbmRleCArKyApOwoKCQkJfQoKCQkJZ3JpZC5wdXNoKCB2ZXJ0aWNlc1JvdyApOwoKCQl9CgoJCS8vIGluZGljZXMKCgkJZm9yICggaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHsKCgkJCWZvciAoIGl4ID0gMDsgaXggPCB3aWR0aFNlZ21lbnRzOyBpeCArKyApIHsKCgkJCQl2YXIgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdOwoJCQkJdmFyIGIgPSBncmlkWyBpeSBdWyBpeCBdOwoJCQkJdmFyIGMgPSBncmlkWyBpeSArIDEgXVsgaXggXTsKCQkJCXZhciBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdOwoKCQkJCWlmICggaXkgIT09IDAgfHwgdGhldGFTdGFydCA+IDAgKSB7IGluZGljZXMucHVzaCggYSwgYiwgZCApOyB9CgkJCQlpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgeyBpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsgfQoKCQkJfQoKCQl9CgoJCS8vIGJ1aWxkIGdlb21ldHJ5CgoJCXRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7CgoJfQoKCVNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJU3BoZXJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BoZXJlQnVmZmVyR2VvbWV0cnk7CgoJLyoqCgkgKiBAYXV0aG9yIEthbGViIE11cnBoeQoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqLwoKCS8vIFJpbmdHZW9tZXRyeQoKCWZ1bmN0aW9uIFJpbmdHZW9tZXRyeSggaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCB0aGV0YVNlZ21lbnRzLCBwaGlTZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7CgoJCUdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1JpbmdHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJaW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLAoJCQlvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsCgkJCXRoZXRhU2VnbWVudHM6IHRoZXRhU2VnbWVudHMsCgkJCXBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cywKCQkJdGhldGFTdGFydDogdGhldGFTdGFydCwKCQkJdGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoCgkJfTsKCgkJdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTsKCQl0aGlzLm1lcmdlVmVydGljZXMoKTsKCgl9CgoJUmluZ0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApOwoJUmluZ0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdHZW9tZXRyeTsKCgkvLyBSaW5nQnVmZmVyR2VvbWV0cnkKCglmdW5jdGlvbiBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgewoKCQlCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdSaW5nQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCWlubmVyUmFkaXVzOiBpbm5lclJhZGl1cywKCQkJb3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLAoJCQl0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLAoJCQlwaGlTZWdtZW50czogcGhpU2VnbWVudHMsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCWlubmVyUmFkaXVzID0gaW5uZXJSYWRpdXMgfHwgMC41OwoJCW91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgfHwgMTsKCgkJdGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwOwoJCXRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7CgoJCXRoZXRhU2VnbWVudHMgPSB0aGV0YVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApIDogODsKCQlwaGlTZWdtZW50cyA9IHBoaVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMSwgcGhpU2VnbWVudHMgKSA6IDE7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gc29tZSBoZWxwZXIgdmFyaWFibGVzCgoJCXZhciBzZWdtZW50OwoJCXZhciByYWRpdXMgPSBpbm5lclJhZGl1czsKCQl2YXIgcmFkaXVzU3RlcCA9ICggKCBvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzICkgLyBwaGlTZWdtZW50cyApOwoJCXZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpOwoJCXZhciB1diA9IG5ldyBWZWN0b3IyKCk7CgkJdmFyIGosIGk7CgoJCS8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnMKCgkJZm9yICggaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7CgoJCQlmb3IgKCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkgewoKCQkJCS8vIHZhbHVlcyBhcmUgZ2VuZXJhdGUgZnJvbSB0aGUgaW5zaWRlIG9mIHRoZSByaW5nIHRvIHRoZSBvdXRzaWRlCgoJCQkJc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBpIC8gdGhldGFTZWdtZW50cyAqIHRoZXRhTGVuZ3RoOwoKCQkJCS8vIHZlcnRleAoKCQkJCXZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTsKCQkJCXZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTsKCgkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJLy8gbm9ybWFsCgoJCQkJbm9ybWFscy5wdXNoKCAwLCAwLCAxICk7CgoJCQkJLy8gdXYKCgkJCQl1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjsKCQkJCXV2LnkgPSAoIHZlcnRleC55IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyOwoKCQkJCXV2cy5wdXNoKCB1di54LCB1di55ICk7CgoJCQl9CgoJCQkvLyBpbmNyZWFzZSB0aGUgcmFkaXVzIGZvciBuZXh0IHJvdyBvZiB2ZXJ0aWNlcwoKCQkJcmFkaXVzICs9IHJhZGl1c1N0ZXA7CgoJCX0KCgkJLy8gaW5kaWNlcwoKCQlmb3IgKCBqID0gMDsgaiA8IHBoaVNlZ21lbnRzOyBqICsrICkgewoKCQkJdmFyIHRoZXRhU2VnbWVudExldmVsID0gaiAqICggdGhldGFTZWdtZW50cyArIDEgKTsKCgkJCWZvciAoIGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSArKyApIHsKCgkJCQlzZWdtZW50ID0gaSArIHRoZXRhU2VnbWVudExldmVsOwoKCQkJCXZhciBhID0gc2VnbWVudDsKCQkJCXZhciBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxOwoJCQkJdmFyIGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7CgkJCQl2YXIgZCA9IHNlZ21lbnQgKyAxOwoKCQkJCS8vIGZhY2VzCgoJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQlpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsKCgkJCX0KCgkJfQoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCX0KCglSaW5nQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglSaW5nQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmluZ0J1ZmZlckdlb21ldHJ5OwoKCS8qKgoJICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODUKCSAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8KCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBMYXRoZUdlb21ldHJ5CgoJZnVuY3Rpb24gTGF0aGVHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcG9pbnRzOiBwb2ludHMsCgkJCXNlZ21lbnRzOiBzZWdtZW50cywKCQkJcGhpU3RhcnQ6IHBoaVN0YXJ0LAoJCQlwaGlMZW5ndGg6IHBoaUxlbmd0aAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgTGF0aGVCdWZmZXJHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApICk7CgkJdGhpcy5tZXJnZVZlcnRpY2VzKCk7CgoJfQoKCUxhdGhlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglMYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlR2VvbWV0cnk7CgoJLy8gTGF0aGVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIExhdGhlQnVmZmVyR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0xhdGhlQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXBvaW50czogcG9pbnRzLAoJCQlzZWdtZW50czogc2VnbWVudHMsCgkJCXBoaVN0YXJ0OiBwaGlTdGFydCwKCQkJcGhpTGVuZ3RoOiBwaGlMZW5ndGgKCQl9OwoKCQlzZWdtZW50cyA9IE1hdGguZmxvb3IoIHNlZ21lbnRzICkgfHwgMTI7CgkJcGhpU3RhcnQgPSBwaGlTdGFydCB8fCAwOwoJCXBoaUxlbmd0aCA9IHBoaUxlbmd0aCB8fCBNYXRoLlBJICogMjsKCgkJLy8gY2xhbXAgcGhpTGVuZ3RoIHNvIGl0J3MgaW4gcmFuZ2Ugb2YgWyAwLCAyUEkgXQoKCQlwaGlMZW5ndGggPSBfTWF0aC5jbGFtcCggcGhpTGVuZ3RoLCAwLCBNYXRoLlBJICogMiApOwoKCgkJLy8gYnVmZmVycwoKCQl2YXIgaW5kaWNlcyA9IFtdOwoJCXZhciB2ZXJ0aWNlcyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gaGVscGVyIHZhcmlhYmxlcwoKCQl2YXIgYmFzZTsKCQl2YXIgaW52ZXJzZVNlZ21lbnRzID0gMS4wIC8gc2VnbWVudHM7CgkJdmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7CgkJdmFyIHV2ID0gbmV3IFZlY3RvcjIoKTsKCQl2YXIgaSwgajsKCgkJLy8gZ2VuZXJhdGUgdmVydGljZXMgYW5kIHV2cwoKCQlmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHsKCgkJCXZhciBwaGkgPSBwaGlTdGFydCArIGkgKiBpbnZlcnNlU2VnbWVudHMgKiBwaGlMZW5ndGg7CgoJCQl2YXIgc2luID0gTWF0aC5zaW4oIHBoaSApOwoJCQl2YXIgY29zID0gTWF0aC5jb3MoIHBoaSApOwoKCQkJZm9yICggaiA9IDA7IGogPD0gKCBwb2ludHMubGVuZ3RoIC0gMSApOyBqICsrICkgewoKCQkJCS8vIHZlcnRleAoKCQkJCXZlcnRleC54ID0gcG9pbnRzWyBqIF0ueCAqIHNpbjsKCQkJCXZlcnRleC55ID0gcG9pbnRzWyBqIF0ueTsKCQkJCXZlcnRleC56ID0gcG9pbnRzWyBqIF0ueCAqIGNvczsKCgkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJLy8gdXYKCgkJCQl1di54ID0gaSAvIHNlZ21lbnRzOwoJCQkJdXYueSA9IGogLyAoIHBvaW50cy5sZW5ndGggLSAxICk7CgoJCQkJdXZzLnB1c2goIHV2LngsIHV2LnkgKTsKCgoJCQl9CgoJCX0KCgkJLy8gaW5kaWNlcwoKCQlmb3IgKCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkgewoKCQkJZm9yICggaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7CgoJCQkJYmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDsKCgkJCQl2YXIgYSA9IGJhc2U7CgkJCQl2YXIgYiA9IGJhc2UgKyBwb2ludHMubGVuZ3RoOwoJCQkJdmFyIGMgPSBiYXNlICsgcG9pbnRzLmxlbmd0aCArIDE7CgkJCQl2YXIgZCA9IGJhc2UgKyAxOwoKCQkJCS8vIGZhY2VzCgoJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQlpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTsKCgkJCX0KCgkJfQoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCQkvLyBnZW5lcmF0ZSBub3JtYWxzCgoJCXRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsKCgkJLy8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgd2UgbmVlZCB0byBhdmVyYWdlIHRoZSBub3JtYWxzIGFsb25nIHRoZSBzZWFtLgoJCS8vIGJlY2F1c2UgdGhlIGNvcnJlc3BvbmRpbmcgdmVydGljZXMgYXJlIGlkZW50aWNhbCAoYnV0IHN0aWxsIGhhdmUgZGlmZmVyZW50IFVWcykuCgoJCWlmICggcGhpTGVuZ3RoID09PSBNYXRoLlBJICogMiApIHsKCgkJCXZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTsKCQkJdmFyIG4xID0gbmV3IFZlY3RvcjMoKTsKCQkJdmFyIG4yID0gbmV3IFZlY3RvcjMoKTsKCQkJdmFyIG4gPSBuZXcgVmVjdG9yMygpOwoKCQkJLy8gdGhpcyBpcyB0aGUgYnVmZmVyIG9mZnNldCBmb3IgdGhlIGxhc3QgbGluZSBvZiB2ZXJ0aWNlcwoKCQkJYmFzZSA9IHNlZ21lbnRzICogcG9pbnRzLmxlbmd0aCAqIDM7CgoJCQlmb3IgKCBpID0gMCwgaiA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICsrLCBqICs9IDMgKSB7CgoJCQkJLy8gc2VsZWN0IHRoZSBub3JtYWwgb2YgdGhlIHZlcnRleCBpbiB0aGUgZmlyc3QgbGluZQoKCQkJCW4xLnggPSBub3JtYWxzWyBqICsgMCBdOwoJCQkJbjEueSA9IG5vcm1hbHNbIGogKyAxIF07CgkJCQluMS56ID0gbm9ybWFsc1sgaiArIDIgXTsKCgkJCQkvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBsYXN0IGxpbmUKCgkJCQluMi54ID0gbm9ybWFsc1sgYmFzZSArIGogKyAwIF07CgkJCQluMi55ID0gbm9ybWFsc1sgYmFzZSArIGogKyAxIF07CgkJCQluMi56ID0gbm9ybWFsc1sgYmFzZSArIGogKyAyIF07CgoJCQkJLy8gYXZlcmFnZSBub3JtYWxzCgoJCQkJbi5hZGRWZWN0b3JzKCBuMSwgbjIgKS5ub3JtYWxpemUoKTsKCgkJCQkvLyBhc3NpZ24gdGhlIG5ldyB2YWx1ZXMgdG8gYm90aCBub3JtYWxzCgoJCQkJbm9ybWFsc1sgaiArIDAgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMCBdID0gbi54OwoJCQkJbm9ybWFsc1sgaiArIDEgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMSBdID0gbi55OwoJCQkJbm9ybWFsc1sgaiArIDIgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMiBdID0gbi56OwoKCQkJfQoKCQl9CgoJfQoKCUxhdGhlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglMYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlQnVmZmVyR2VvbWV0cnk7CgoJLyoqCgkgKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwOi8vam9ub2JyMS5jb20KCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBTaGFwZUdlb21ldHJ5CgoJZnVuY3Rpb24gU2hhcGVHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkgewoKCQlHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdTaGFwZUdlb21ldHJ5JzsKCgkJaWYgKCB0eXBlb2YgY3VydmVTZWdtZW50cyA9PT0gJ29iamVjdCcgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZUdlb21ldHJ5OiBPcHRpb25zIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCWN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzLmN1cnZlU2VnbWVudHM7CgoJCX0KCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlzaGFwZXM6IHNoYXBlcywKCQkJY3VydmVTZWdtZW50czogY3VydmVTZWdtZW50cwoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgU2hhcGVCdWZmZXJHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkgKTsKCQl0aGlzLm1lcmdlVmVydGljZXMoKTsKCgl9CgoJU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCVNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVHZW9tZXRyeTsKCglTaGFwZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBkYXRhID0gR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7CgoJCXZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzOwoKCQlyZXR1cm4gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApOwoKCX07CgoJLy8gU2hhcGVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIFNoYXBlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApIHsKCgkJQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJc2hhcGVzOiBzaGFwZXMsCgkJCWN1cnZlU2VnbWVudHM6IGN1cnZlU2VnbWVudHMKCQl9OwoKCQljdXJ2ZVNlZ21lbnRzID0gY3VydmVTZWdtZW50cyB8fCAxMjsKCgkJLy8gYnVmZmVycwoKCQl2YXIgaW5kaWNlcyA9IFtdOwoJCXZhciB2ZXJ0aWNlcyA9IFtdOwoJCXZhciBub3JtYWxzID0gW107CgkJdmFyIHV2cyA9IFtdOwoKCQkvLyBoZWxwZXIgdmFyaWFibGVzCgoJCXZhciBncm91cFN0YXJ0ID0gMDsKCQl2YXIgZ3JvdXBDb3VudCA9IDA7CgoJCS8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciAic2hhcGVzIiBwYXJhbWV0ZXIKCgkJaWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA9PT0gZmFsc2UgKSB7CgoJCQlhZGRTaGFwZSggc2hhcGVzICk7CgoJCX0gZWxzZSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyBpICsrICkgewoKCQkJCWFkZFNoYXBlKCBzaGFwZXNbIGkgXSApOwoKCQkJCXRoaXMuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIGkgKTsgLy8gZW5hYmxlcyBNdWx0aU1hdGVyaWFsIHN1cHBvcnQKCgkJCQlncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7CgkJCQlncm91cENvdW50ID0gMDsKCgkJCX0KCgkJfQoKCQkvLyBidWlsZCBnZW9tZXRyeQoKCQl0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7CgkJdGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApOwoKCgkJLy8gaGVscGVyIGZ1bmN0aW9ucwoKCQlmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7CgoJCQl2YXIgaSwgbCwgc2hhcGVIb2xlOwoKCQkJdmFyIGluZGV4T2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMzsKCQkJdmFyIHBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTsKCgkJCXZhciBzaGFwZVZlcnRpY2VzID0gcG9pbnRzLnNoYXBlOwoJCQl2YXIgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlczsKCgkJCS8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlcwoKCQkJaWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkgewoKCQkJCXNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLnJldmVyc2UoKTsKCgkJCX0KCgkJCWZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTsKCgkJCQlpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlSG9sZSApID09PSB0cnVlICkgewoKCQkJCQlzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpOwoKCQkJCX0KCgkJCX0KCgkJCXZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApOwoKCQkJLy8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXkKCgkJCWZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTsKCQkJCXNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7CgoJCQl9CgoJCQkvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzCgoJCQlmb3IgKCBpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgdmVydGV4ID0gc2hhcGVWZXJ0aWNlc1sgaSBdOwoKCQkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgMCApOwoJCQkJbm9ybWFscy5wdXNoKCAwLCAwLCAxICk7CgkJCQl1dnMucHVzaCggdmVydGV4LngsIHZlcnRleC55ICk7IC8vIHdvcmxkIHV2cwoKCQkJfQoKCQkJLy8gaW5jaWRlcwoKCQkJZm9yICggaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBmYWNlID0gZmFjZXNbIGkgXTsKCgkJCQl2YXIgYSA9IGZhY2VbIDAgXSArIGluZGV4T2Zmc2V0OwoJCQkJdmFyIGIgPSBmYWNlWyAxIF0gKyBpbmRleE9mZnNldDsKCQkJCXZhciBjID0gZmFjZVsgMiBdICsgaW5kZXhPZmZzZXQ7CgoJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7CgkJCQlncm91cENvdW50ICs9IDM7CgoJCQl9CgoJCX0KCgl9CgoJU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCVNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVCdWZmZXJHZW9tZXRyeTsKCglTaGFwZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7CgoJCXZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzOwoKCQlyZXR1cm4gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApOwoKCX07CgoJLy8KCglmdW5jdGlvbiB0b0pTT04kMSggc2hhcGVzLCBkYXRhICkgewoKCQlkYXRhLnNoYXBlcyA9IFtdOwoKCQlpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkgewoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIHNoYXBlID0gc2hhcGVzWyBpIF07CgoJCQkJZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApOwoKCQkJfQoKCQl9IGVsc2UgewoKCQkJZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTsKCgkJfQoKCQlyZXR1cm4gZGF0YTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCglmdW5jdGlvbiBFZGdlc0dlb21ldHJ5KCBnZW9tZXRyeSwgdGhyZXNob2xkQW5nbGUgKSB7CgoJCUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZQoJCX07CgoJCXRocmVzaG9sZEFuZ2xlID0gKCB0aHJlc2hvbGRBbmdsZSAhPT0gdW5kZWZpbmVkICkgPyB0aHJlc2hvbGRBbmdsZSA6IDE7CgoJCS8vIGJ1ZmZlcgoKCQl2YXIgdmVydGljZXMgPSBbXTsKCgkJLy8gaGVscGVyIHZhcmlhYmxlcwoKCQl2YXIgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIF9NYXRoLkRFRzJSQUQgKiB0aHJlc2hvbGRBbmdsZSApOwoJCXZhciBlZGdlID0gWyAwLCAwIF0sIGVkZ2VzID0ge30sIGVkZ2UxLCBlZGdlMjsKCQl2YXIga2V5LCBrZXlzID0gWyAnYScsICdiJywgJ2MnIF07CgoJCS8vIHByZXBhcmUgc291cmNlIGdlb21ldHJ5CgoJCXZhciBnZW9tZXRyeTI7CgoJCWlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHsKCgkJCWdlb21ldHJ5MiA9IG5ldyBHZW9tZXRyeSgpOwoJCQlnZW9tZXRyeTIuZnJvbUJ1ZmZlckdlb21ldHJ5KCBnZW9tZXRyeSApOwoKCQl9IGVsc2UgewoKCQkJZ2VvbWV0cnkyID0gZ2VvbWV0cnkuY2xvbmUoKTsKCgkJfQoKCQlnZW9tZXRyeTIubWVyZ2VWZXJ0aWNlcygpOwoJCWdlb21ldHJ5Mi5jb21wdXRlRmFjZU5vcm1hbHMoKTsKCgkJdmFyIHNvdXJjZVZlcnRpY2VzID0gZ2VvbWV0cnkyLnZlcnRpY2VzOwoJCXZhciBmYWNlcyA9IGdlb21ldHJ5Mi5mYWNlczsKCgkJLy8gbm93IGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHdoZXJlIGVhY2ggZW50cnkgcmVwcmVzZW50cyBhbiBlZGdlIHdpdGggaXRzIGFkam9pbmluZyBmYWNlcwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJdmFyIGZhY2UgPSBmYWNlc1sgaSBdOwoKCQkJZm9yICggdmFyIGogPSAwOyBqIDwgMzsgaiArKyApIHsKCgkJCQllZGdlMSA9IGZhY2VbIGtleXNbIGogXSBdOwoJCQkJZWRnZTIgPSBmYWNlWyBrZXlzWyAoIGogKyAxICkgJSAzIF0gXTsKCQkJCWVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsKCQkJCWVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTsKCgkJCQlrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07CgoJCQkJaWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0sIGZhY2UxOiBpLCBmYWNlMjogdW5kZWZpbmVkIH07CgoJCQkJfSBlbHNlIHsKCgkJCQkJZWRnZXNbIGtleSBdLmZhY2UyID0gaTsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJLy8gZ2VuZXJhdGUgdmVydGljZXMKCgkJZm9yICgga2V5IGluIGVkZ2VzICkgewoKCQkJdmFyIGUgPSBlZGdlc1sga2V5IF07CgoJCQkvLyBhbiBlZGdlIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhlIGFuZ2xlIChpbiBkZWdyZWVzKSBiZXR3ZWVuIHRoZSBmYWNlIG5vcm1hbHMgb2YgdGhlIGFkam9pbmluZyBmYWNlcyBleGNlZWRzIHRoaXMgdmFsdWUuIGRlZmF1bHQgPSAxIGRlZ3JlZS4KCgkJCWlmICggZS5mYWNlMiA9PT0gdW5kZWZpbmVkIHx8IGZhY2VzWyBlLmZhY2UxIF0ubm9ybWFsLmRvdCggZmFjZXNbIGUuZmFjZTIgXS5ub3JtYWwgKSA8PSB0aHJlc2hvbGREb3QgKSB7CgoJCQkJdmFyIHZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MSBdOwoJCQkJdmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApOwoKCQkJCXZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MiBdOwoJCQkJdmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApOwoKCQkJfQoKCQl9CgoJCS8vIGJ1aWxkIGdlb21ldHJ5CgoJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwoKCX0KCglFZGdlc0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFZGdlc0dlb21ldHJ5OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgkvLyBDeWxpbmRlckdlb21ldHJ5CgoJZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgewoKCQlHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdDeWxpbmRlckdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXNUb3A6IHJhZGl1c1RvcCwKCQkJcmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sCgkJCWhlaWdodDogaGVpZ2h0LAoJCQlyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsCgkJCWhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cywKCQkJb3BlbkVuZGVkOiBvcGVuRW5kZWQsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTsKCQl0aGlzLm1lcmdlVmVydGljZXMoKTsKCgl9CgoJQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTsKCUN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3lsaW5kZXJHZW9tZXRyeTsKCgkvLyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5CgoJZnVuY3Rpb24gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgewoKCQlCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdDeWxpbmRlckJ1ZmZlckdlb21ldHJ5JzsKCgkJdGhpcy5wYXJhbWV0ZXJzID0gewoJCQlyYWRpdXNUb3A6IHJhZGl1c1RvcCwKCQkJcmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sCgkJCWhlaWdodDogaGVpZ2h0LAoJCQlyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsCgkJCWhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cywKCQkJb3BlbkVuZGVkOiBvcGVuRW5kZWQsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXZhciBzY29wZSA9IHRoaXM7CgoJCXJhZGl1c1RvcCA9IHJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkID8gcmFkaXVzVG9wIDogMTsKCQlyYWRpdXNCb3R0b20gPSByYWRpdXNCb3R0b20gIT09IHVuZGVmaW5lZCA/IHJhZGl1c0JvdHRvbSA6IDE7CgkJaGVpZ2h0ID0gaGVpZ2h0IHx8IDE7CgoJCXJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4OwoJCWhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxOwoKCQlvcGVuRW5kZWQgPSBvcGVuRW5kZWQgIT09IHVuZGVmaW5lZCA/IG9wZW5FbmRlZCA6IGZhbHNlOwoJCXRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMC4wOwoJCXRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gaGVscGVyIHZhcmlhYmxlcwoKCQl2YXIgaW5kZXggPSAwOwoJCXZhciBpbmRleEFycmF5ID0gW107CgkJdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyOwoJCXZhciBncm91cFN0YXJ0ID0gMDsKCgkJLy8gZ2VuZXJhdGUgZ2VvbWV0cnkKCgkJZ2VuZXJhdGVUb3JzbygpOwoKCQlpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7CgoJCQlpZiAoIHJhZGl1c1RvcCA+IDAgKSB7IGdlbmVyYXRlQ2FwKCB0cnVlICk7IH0KCQkJaWYgKCByYWRpdXNCb3R0b20gPiAwICkgeyBnZW5lcmF0ZUNhcCggZmFsc2UgKTsgfQoKCQl9CgoJCS8vIGJ1aWxkIGdlb21ldHJ5CgoJCXRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTsKCQl0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7CgoJCWZ1bmN0aW9uIGdlbmVyYXRlVG9yc28oKSB7CgoJCQl2YXIgeCwgeTsKCQkJdmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7CgkJCXZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpOwoKCQkJdmFyIGdyb3VwQ291bnQgPSAwOwoKCQkJLy8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWwKCQkJdmFyIHNsb3BlID0gKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSAvIGhlaWdodDsKCgkJCS8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnMKCgkJCWZvciAoIHkgPSAwOyB5IDw9IGhlaWdodFNlZ21lbnRzOyB5ICsrICkgewoKCQkJCXZhciBpbmRleFJvdyA9IFtdOwoKCQkJCXZhciB2ID0geSAvIGhlaWdodFNlZ21lbnRzOwoKCQkJCS8vIGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjdXJyZW50IHJvdwoKCQkJCXZhciByYWRpdXMgPSB2ICogKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSArIHJhZGl1c1RvcDsKCgkJCQlmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHsKCgkJCQkJdmFyIHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7CgoJCQkJCXZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7CgoJCQkJCXZhciBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApOwoJCQkJCXZhciBjb3NUaGV0YSA9IE1hdGguY29zKCB0aGV0YSApOwoKCQkJCQkvLyB2ZXJ0ZXgKCgkJCQkJdmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTsKCQkJCQl2ZXJ0ZXgueSA9IC0gdiAqIGhlaWdodCArIGhhbGZIZWlnaHQ7CgkJCQkJdmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTsKCQkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJCS8vIG5vcm1hbAoKCQkJCQlub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7CgkJCQkJbm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7CgoJCQkJCS8vIHV2CgoJCQkJCXV2cy5wdXNoKCB1LCAxIC0gdiApOwoKCQkJCQkvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvdwoKCQkJCQlpbmRleFJvdy5wdXNoKCBpbmRleCArKyApOwoKCQkJCX0KCgkJCQkvLyBub3cgc2F2ZSB2ZXJ0aWNlcyBvZiB0aGUgcm93IGluIG91ciBpbmRleCBhcnJheQoKCQkJCWluZGV4QXJyYXkucHVzaCggaW5kZXhSb3cgKTsKCgkJCX0KCgkJCS8vIGdlbmVyYXRlIGluZGljZXMKCgkJCWZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7CgoJCQkJZm9yICggeSA9IDA7IHkgPCBoZWlnaHRTZWdtZW50czsgeSArKyApIHsKCgkJCQkJLy8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlcwoKCQkJCQl2YXIgYSA9IGluZGV4QXJyYXlbIHkgXVsgeCBdOwoJCQkJCXZhciBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdOwoJCQkJCXZhciBjID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCArIDEgXTsKCQkJCQl2YXIgZCA9IGluZGV4QXJyYXlbIHkgXVsgeCArIDEgXTsKCgkJCQkJLy8gZmFjZXMKCgkJCQkJaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7CgkJCQkJaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7CgoJCQkJCS8vIHVwZGF0ZSBncm91cCBjb3VudGVyCgoJCQkJCWdyb3VwQ291bnQgKz0gNjsKCgkJCQl9CgoJCQl9CgoJCQkvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydAoKCQkJc2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIDAgKTsKCgkJCS8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3VwcwoKCQkJZ3JvdXBTdGFydCArPSBncm91cENvdW50OwoKCQl9CgoJCWZ1bmN0aW9uIGdlbmVyYXRlQ2FwKCB0b3AgKSB7CgoJCQl2YXIgeCwgY2VudGVySW5kZXhTdGFydCwgY2VudGVySW5kZXhFbmQ7CgoJCQl2YXIgdXYgPSBuZXcgVmVjdG9yMigpOwoJCQl2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTsKCgkJCXZhciBncm91cENvdW50ID0gMDsKCgkJCXZhciByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tOwoJCQl2YXIgc2lnbiA9ICggdG9wID09PSB0cnVlICkgPyAxIDogLSAxOwoKCQkJLy8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNlbnRlciB2ZXJ0ZXgKCQkJY2VudGVySW5kZXhTdGFydCA9IGluZGV4OwoKCQkJLy8gZmlyc3Qgd2UgZ2VuZXJhdGUgdGhlIGNlbnRlciB2ZXJ0ZXggZGF0YSBvZiB0aGUgY2FwLgoJCQkvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSwKCQkJLy8gd2UgbXVzdCBnZW5lcmF0ZSBhIGNlbnRlciB2ZXJ0ZXggcGVyIGZhY2Uvc2VnbWVudAoKCQkJZm9yICggeCA9IDE7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7CgoJCQkJLy8gdmVydGV4CgoJCQkJdmVydGljZXMucHVzaCggMCwgaGFsZkhlaWdodCAqIHNpZ24sIDAgKTsKCgkJCQkvLyBub3JtYWwKCgkJCQlub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTsKCgkJCQkvLyB1dgoKCQkJCXV2cy5wdXNoKCAwLjUsIDAuNSApOwoKCQkJCS8vIGluY3JlYXNlIGluZGV4CgoJCQkJaW5kZXggKys7CgoJCQl9CgoJCQkvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBjZW50ZXIgdmVydGV4CgoJCQljZW50ZXJJbmRleEVuZCA9IGluZGV4OwoKCQkJLy8gbm93IHdlIGdlbmVyYXRlIHRoZSBzdXJyb3VuZGluZyB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzCgoJCQlmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHsKCgkJCQl2YXIgdSA9IHggLyByYWRpYWxTZWdtZW50czsKCQkJCXZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7CgoJCQkJdmFyIGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7CgkJCQl2YXIgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTsKCgkJCQkvLyB2ZXJ0ZXgKCgkJCQl2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhOwoJCQkJdmVydGV4LnkgPSBoYWxmSGVpZ2h0ICogc2lnbjsKCQkJCXZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7CgkJCQl2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7CgoJCQkJLy8gbm9ybWFsCgoJCQkJbm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7CgoJCQkJLy8gdXYKCgkJCQl1di54ID0gKCBjb3NUaGV0YSAqIDAuNSApICsgMC41OwoJCQkJdXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7CgkJCQl1dnMucHVzaCggdXYueCwgdXYueSApOwoKCQkJCS8vIGluY3JlYXNlIGluZGV4CgoJCQkJaW5kZXggKys7CgoJCQl9CgoJCQkvLyBnZW5lcmF0ZSBpbmRpY2VzCgoJCQlmb3IgKCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkgewoKCQkJCXZhciBjID0gY2VudGVySW5kZXhTdGFydCArIHg7CgkJCQl2YXIgaSA9IGNlbnRlckluZGV4RW5kICsgeDsKCgkJCQlpZiAoIHRvcCA9PT0gdHJ1ZSApIHsKCgkJCQkJLy8gZmFjZSB0b3AKCgkJCQkJaW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgYyApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCS8vIGZhY2UgYm90dG9tCgoJCQkJCWluZGljZXMucHVzaCggaSArIDEsIGksIGMgKTsKCgkJCQl9CgoJCQkJZ3JvdXBDb3VudCArPSAzOwoKCQkJfQoKCQkJLy8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnQKCgkJCXNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApOwoKCQkJLy8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzCgoJCQlncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7CgoJCX0KCgl9CgoJQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCUN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgYWJlbG5hdGlvbiAvIGh0dHA6Ly9naXRodWIuY29tL2FiZWxuYXRpb24KCSAqLwoKCS8vIENvbmVHZW9tZXRyeQoKCWZ1bmN0aW9uIENvbmVHZW9tZXRyeSggcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHsKCgkJQ3lsaW5kZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7CgoJCXRoaXMudHlwZSA9ICdDb25lR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQloZWlnaHQ6IGhlaWdodCwKCQkJcmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLAoJCQloZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsCgkJCW9wZW5FbmRlZDogb3BlbkVuZGVkLAoJCQl0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LAoJCQl0aGV0YUxlbmd0aDogdGhldGFMZW5ndGgKCQl9OwoKCX0KCglDb25lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgKTsKCUNvbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lR2VvbWV0cnk7CgoJLy8gQ29uZUJ1ZmZlckdlb21ldHJ5CgoJZnVuY3Rpb24gQ29uZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgewoKCQlDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKTsKCgkJdGhpcy50eXBlID0gJ0NvbmVCdWZmZXJHZW9tZXRyeSc7CgoJCXRoaXMucGFyYW1ldGVycyA9IHsKCQkJcmFkaXVzOiByYWRpdXMsCgkJCWhlaWdodDogaGVpZ2h0LAoJCQlyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsCgkJCWhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cywKCQkJb3BlbkVuZGVkOiBvcGVuRW5kZWQsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJfQoKCUNvbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApOwoJQ29uZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbmVCdWZmZXJHZW9tZXRyeTsKCgkvKioKCSAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtcwoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODcKCSAqIEBhdXRob3IgaHVnaGVzCgkgKi8KCgkvLyBDaXJjbGVHZW9tZXRyeQoKCWZ1bmN0aW9uIENpcmNsZUdlb21ldHJ5KCByYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHsKCgkJR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQlzZWdtZW50czogc2VnbWVudHMsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTsKCQl0aGlzLm1lcmdlVmVydGljZXMoKTsKCgl9CgoJQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7CglDaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVHZW9tZXRyeTsKCgkvLyBDaXJjbGVCdWZmZXJHZW9tZXRyeQoKCWZ1bmN0aW9uIENpcmNsZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHsKCgkJQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnQ2lyY2xlQnVmZmVyR2VvbWV0cnknOwoKCQl0aGlzLnBhcmFtZXRlcnMgPSB7CgkJCXJhZGl1czogcmFkaXVzLAoJCQlzZWdtZW50czogc2VnbWVudHMsCgkJCXRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsCgkJCXRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aAoJCX07CgoJCXJhZGl1cyA9IHJhZGl1cyB8fCAxOwoJCXNlZ21lbnRzID0gc2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KCAzLCBzZWdtZW50cyApIDogODsKCgkJdGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwOwoJCXRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7CgoJCS8vIGJ1ZmZlcnMKCgkJdmFyIGluZGljZXMgPSBbXTsKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgbm9ybWFscyA9IFtdOwoJCXZhciB1dnMgPSBbXTsKCgkJLy8gaGVscGVyIHZhcmlhYmxlcwoKCQl2YXIgaSwgczsKCQl2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTsKCQl2YXIgdXYgPSBuZXcgVmVjdG9yMigpOwoKCQkvLyBjZW50ZXIgcG9pbnQKCgkJdmVydGljZXMucHVzaCggMCwgMCwgMCApOwoJCW5vcm1hbHMucHVzaCggMCwgMCwgMSApOwoJCXV2cy5wdXNoKCAwLjUsIDAuNSApOwoKCQlmb3IgKCBzID0gMCwgaSA9IDM7IHMgPD0gc2VnbWVudHM7IHMgKyssIGkgKz0gMyApIHsKCgkJCXZhciBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoOwoKCQkJLy8gdmVydGV4CgoJCQl2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7CgkJCXZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTsKCgkJCXZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTsKCgkJCS8vIG5vcm1hbAoKCQkJbm9ybWFscy5wdXNoKCAwLCAwLCAxICk7CgoJCQkvLyB1dnMKCgkJCXV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyOwoJCQl1di55ID0gKCB2ZXJ0aWNlc1sgaSArIDEgXSAvIHJhZGl1cyArIDEgKSAvIDI7CgoJCQl1dnMucHVzaCggdXYueCwgdXYueSApOwoKCQl9CgoJCS8vIGluZGljZXMKCgkJZm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7CgoJCQlpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7CgoJCX0KCgkJLy8gYnVpbGQgZ2VvbWV0cnkKCgkJdGhpcy5zZXRJbmRleCggaW5kaWNlcyApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApOwoJCXRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTsKCgl9CgoJQ2lyY2xlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7CglDaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVCdWZmZXJHZW9tZXRyeTsKCgoKCXZhciBHZW9tZXRyaWVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewoJCV9fcHJvdG9fXzogbnVsbCwKCQlXaXJlZnJhbWVHZW9tZXRyeTogV2lyZWZyYW1lR2VvbWV0cnksCgkJUGFyYW1ldHJpY0dlb21ldHJ5OiBQYXJhbWV0cmljR2VvbWV0cnksCgkJUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5OiBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnksCgkJVGV0cmFoZWRyb25HZW9tZXRyeTogVGV0cmFoZWRyb25HZW9tZXRyeSwKCQlUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LAoJCU9jdGFoZWRyb25HZW9tZXRyeTogT2N0YWhlZHJvbkdlb21ldHJ5LAoJCU9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTogT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LAoJCUljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksCgkJSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeTogSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSwKCQlEb2RlY2FoZWRyb25HZW9tZXRyeTogRG9kZWNhaGVkcm9uR2VvbWV0cnksCgkJRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LAoJCVBvbHloZWRyb25HZW9tZXRyeTogUG9seWhlZHJvbkdlb21ldHJ5LAoJCVBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTogUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LAoJCVR1YmVHZW9tZXRyeTogVHViZUdlb21ldHJ5LAoJCVR1YmVCdWZmZXJHZW9tZXRyeTogVHViZUJ1ZmZlckdlb21ldHJ5LAoJCVRvcnVzS25vdEdlb21ldHJ5OiBUb3J1c0tub3RHZW9tZXRyeSwKCQlUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTogVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksCgkJVG9ydXNHZW9tZXRyeTogVG9ydXNHZW9tZXRyeSwKCQlUb3J1c0J1ZmZlckdlb21ldHJ5OiBUb3J1c0J1ZmZlckdlb21ldHJ5LAoJCVRleHRHZW9tZXRyeTogVGV4dEdlb21ldHJ5LAoJCVRleHRCdWZmZXJHZW9tZXRyeTogVGV4dEJ1ZmZlckdlb21ldHJ5LAoJCVNwaGVyZUdlb21ldHJ5OiBTcGhlcmVHZW9tZXRyeSwKCQlTcGhlcmVCdWZmZXJHZW9tZXRyeTogU3BoZXJlQnVmZmVyR2VvbWV0cnksCgkJUmluZ0dlb21ldHJ5OiBSaW5nR2VvbWV0cnksCgkJUmluZ0J1ZmZlckdlb21ldHJ5OiBSaW5nQnVmZmVyR2VvbWV0cnksCgkJUGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSwKCQlQbGFuZUJ1ZmZlckdlb21ldHJ5OiBQbGFuZUJ1ZmZlckdlb21ldHJ5LAoJCUxhdGhlR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksCgkJTGF0aGVCdWZmZXJHZW9tZXRyeTogTGF0aGVCdWZmZXJHZW9tZXRyeSwKCQlTaGFwZUdlb21ldHJ5OiBTaGFwZUdlb21ldHJ5LAoJCVNoYXBlQnVmZmVyR2VvbWV0cnk6IFNoYXBlQnVmZmVyR2VvbWV0cnksCgkJRXh0cnVkZUdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksCgkJRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiBFeHRydWRlQnVmZmVyR2VvbWV0cnksCgkJRWRnZXNHZW9tZXRyeTogRWRnZXNHZW9tZXRyeSwKCQlDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSwKCQlDb25lQnVmZmVyR2VvbWV0cnk6IENvbmVCdWZmZXJHZW9tZXRyeSwKCQlDeWxpbmRlckdlb21ldHJ5OiBDeWxpbmRlckdlb21ldHJ5LAoJCUN5bGluZGVyQnVmZmVyR2VvbWV0cnk6IEN5bGluZGVyQnVmZmVyR2VvbWV0cnksCgkJQ2lyY2xlR2VvbWV0cnk6IENpcmNsZUdlb21ldHJ5LAoJCUNpcmNsZUJ1ZmZlckdlb21ldHJ5OiBDaXJjbGVCdWZmZXJHZW9tZXRyeSwKCQlCb3hHZW9tZXRyeTogQm94R2VvbWV0cnksCgkJQm94QnVmZmVyR2VvbWV0cnk6IEJveEJ1ZmZlckdlb21ldHJ5Cgl9KTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBjb2xvcjogPFRIUkVFLkNvbG9yPgoJICogfQoJICovCgoJZnVuY3Rpb24gU2hhZG93TWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCU1hdGVyaWFsLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1NoYWRvd01hdGVyaWFsJzsKCgkJdGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTsKCQl0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTsKCgkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgl9CgoJU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7CglTaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkb3dNYXRlcmlhbDsKCglTaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7CgoJU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gUmF3U2hhZGVyTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCVNoYWRlck1hdGVyaWFsLmNhbGwoIHRoaXMsIHBhcmFtZXRlcnMgKTsKCgkJdGhpcy50eXBlID0gJ1Jhd1NoYWRlck1hdGVyaWFsJzsKCgl9CgoJUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlICk7CglSYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSYXdTaGFkZXJNYXRlcmlhbDsKCglSYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNSYXdTaGFkZXJNYXRlcmlhbCA9IHRydWU7CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGNvbG9yOiA8aGV4PiwKCSAqICByb3VnaG5lc3M6IDxmbG9hdD4sCgkgKiAgbWV0YWxuZXNzOiA8ZmxvYXQ+LAoJICogIG9wYWNpdHk6IDxmbG9hdD4sCgkgKgoJICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgZW1pc3NpdmU6IDxoZXg+LAoJICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+CgkgKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LAoJICoKCSAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLAoJICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sCgkgKgoJICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PiwKCSAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LAoJICoKCSAqICByb3VnaG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIG1ldGFsbmVzc01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSwKCSAqICBlbnZNYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LAoJICoKCSAqICB3aXJlZnJhbWU6IDxib29sZWFuPiwKCSAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hTdGFuZGFyZE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTsKCgkJdGhpcy50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJzsKCgkJdGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZQoJCXRoaXMucm91Z2huZXNzID0gMC41OwoJCXRoaXMubWV0YWxuZXNzID0gMC41OwoKCQl0aGlzLm1hcCA9IG51bGw7CgoJCXRoaXMubGlnaHRNYXAgPSBudWxsOwoJCXRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7CgoJCXRoaXMuYW9NYXAgPSBudWxsOwoJCXRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7CgoJCXRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7CgkJdGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDsKCQl0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDsKCgkJdGhpcy5idW1wTWFwID0gbnVsbDsKCQl0aGlzLmJ1bXBTY2FsZSA9IDE7CgoJCXRoaXMubm9ybWFsTWFwID0gbnVsbDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7CgkJdGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwOwoKCQl0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7CgoJCXRoaXMubWV0YWxuZXNzTWFwID0gbnVsbDsKCgkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgoJCXRoaXMuZW52TWFwID0gbnVsbDsKCQl0aGlzLmVudk1hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4OwoKCQl0aGlzLndpcmVmcmFtZSA9IGZhbHNlOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTsKCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnOwoJCXRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnOwoKCQl0aGlzLnNraW5uaW5nID0gZmFsc2U7CgkJdGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTsKCQl0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOwoKCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKCX0KCglNZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTsKCU1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hTdGFuZGFyZE1hdGVyaWFsOwoKCU1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID0gdHJ1ZTsKCglNZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9OwoKCQl0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApOwoJCXRoaXMucm91Z2huZXNzID0gc291cmNlLnJvdWdobmVzczsKCQl0aGlzLm1ldGFsbmVzcyA9IHNvdXJjZS5tZXRhbG5lc3M7CgoJCXRoaXMubWFwID0gc291cmNlLm1hcDsKCgkJdGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDsKCQl0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5OwoKCQl0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwOwoJCXRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7CgoJCXRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7CgkJdGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDsKCQl0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5OwoKCQl0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDsKCQl0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7CgoJCXRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTsKCQl0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApOwoKCQl0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7CgkJdGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhczsKCgkJdGhpcy5yb3VnaG5lc3NNYXAgPSBzb3VyY2Uucm91Z2huZXNzTWFwOwoKCQl0aGlzLm1ldGFsbmVzc01hcCA9IHNvdXJjZS5tZXRhbG5lc3NNYXA7CgoJCXRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7CgoJCXRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDsKCQl0aGlzLmVudk1hcEludGVuc2l0eSA9IHNvdXJjZS5lbnZNYXBJbnRlbnNpdHk7CgoJCXRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbzsKCgkJdGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDsKCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDsKCQl0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCQl0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIHJlZmxlY3Rpdml0eTogPGZsb2F0PgoJICogIGNsZWFyY29hdDogPGZsb2F0PgoJICogIGNsZWFyY29hdFJvdWdobmVzczogPGZsb2F0PgoJICoKCSAqICBzaGVlbjogPENvbG9yPgoJICoKCSAqICBjbGVhcmNvYXROb3JtYWxTY2FsZTogPFZlY3RvcjI+LAoJICogIGNsZWFyY29hdE5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hQaHlzaWNhbE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMuZGVmaW5lcyA9IHsKCgkJCSdTVEFOREFSRCc6ICcnLAoJCQknUEhZU0lDQUwnOiAnJwoKCQl9OwoKCQl0aGlzLnR5cGUgPSAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnOwoKCQl0aGlzLnJlZmxlY3Rpdml0eSA9IDAuNTsgLy8gbWFwcyB0byBGMCA9IDAuMDQKCgkJdGhpcy5jbGVhcmNvYXQgPSAwLjA7CgkJdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwLjA7CgoJCXRoaXMuc2hlZW4gPSBudWxsOyAvLyBudWxsIHdpbGwgZGlzYWJsZSBzaGVlbiBic2RmCgoJCXRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApOwoJCXRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gbnVsbDsKCgkJdGhpcy50cmFuc3BhcmVuY3kgPSAwLjA7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCU1lc2hQaHlzaWNhbE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaFBoeXNpY2FsTWF0ZXJpYWw7CgoJTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlOwoKCU1lc2hQaHlzaWNhbE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLmRlZmluZXMgPSB7CgoJCQknU1RBTkRBUkQnOiAnJywKCQkJJ1BIWVNJQ0FMJzogJycKCgkJfTsKCgkJdGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5OwoKCQl0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7CgkJdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzOwoKCQlpZiAoIHNvdXJjZS5zaGVlbiApIHsgdGhpcy5zaGVlbiA9ICggdGhpcy5zaGVlbiB8fCBuZXcgQ29sb3IoKSApLmNvcHkoIHNvdXJjZS5zaGVlbiApOyB9CgkJZWxzZSB7IHRoaXMuc2hlZW4gPSBudWxsOyB9CgoJCXRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gc291cmNlLmNsZWFyY29hdE5vcm1hbE1hcDsKCQl0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5jbGVhcmNvYXROb3JtYWxTY2FsZSApOwoKCQl0aGlzLnRyYW5zcGFyZW5jeSA9IHNvdXJjZS50cmFuc3BhcmVuY3k7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGNvbG9yOiA8aGV4PiwKCSAqICBzcGVjdWxhcjogPGhleD4sCgkgKiAgc2hpbmluZXNzOiA8ZmxvYXQ+LAoJICogIG9wYWNpdHk6IDxmbG9hdD4sCgkgKgoJICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD4KCSAqCgkgKiAgZW1pc3NpdmU6IDxoZXg+LAoJICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+CgkgKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LAoJICoKCSAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLAoJICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sCgkgKgoJICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PiwKCSAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LAoJICoKCSAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSwKCSAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbiwKCSAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sCgkgKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LAoJICoKCSAqICB3aXJlZnJhbWU6IDxib29sZWFuPiwKCSAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hQaG9uZ01hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2UKCQl0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKCAweDExMTExMSApOwoJCXRoaXMuc2hpbmluZXNzID0gMzA7CgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5saWdodE1hcCA9IG51bGw7CgkJdGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5hb01hcCA9IG51bGw7CgkJdGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTsKCQl0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wOwoJCXRoaXMuZW1pc3NpdmVNYXAgPSBudWxsOwoKCQl0aGlzLmJ1bXBNYXAgPSBudWxsOwoJCXRoaXMuYnVtcFNjYWxlID0gMTsKCgkJdGhpcy5ub3JtYWxNYXAgPSBudWxsOwoJCXRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDsKCQl0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTsKCgkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsOwoJCXRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxOwoJCXRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7CgoJCXRoaXMuc3BlY3VsYXJNYXAgPSBudWxsOwoKCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCgkJdGhpcy5lbnZNYXAgPSBudWxsOwoJCXRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uOwoJCXRoaXMucmVmbGVjdGl2aXR5ID0gMTsKCQl0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7CgoJCXRoaXMud2lyZWZyYW1lID0gZmFsc2U7CgkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxOwoJCXRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7CgkJdGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7CgoJCXRoaXMuc2tpbm5pbmcgPSBmYWxzZTsKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOwoJCXRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCU1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaFBob25nTWF0ZXJpYWw7CgoJTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBob25nTWF0ZXJpYWwgPSB0cnVlOwoKCU1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApOwoJCXRoaXMuc3BlY3VsYXIuY29weSggc291cmNlLnNwZWN1bGFyICk7CgkJdGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzOwoKCQl0aGlzLm1hcCA9IHNvdXJjZS5tYXA7CgoJCXRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7CgkJdGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTsKCgkJdGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDsKCQl0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5OwoKCQl0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApOwoJCXRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7CgkJdGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTsKCgkJdGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7CgkJdGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlOwoKCQl0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7CgkJdGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7CgkJdGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTsKCgkJdGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwOwoJCXRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7CgkJdGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7CgoJCXRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7CgoJCXRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7CgoJCXRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDsKCQl0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTsKCQl0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7CgkJdGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvOwoKCQl0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7CgkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoOwoJCXRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwOwoJCXRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47CgoJCXRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7CgkJdGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzOwoJCXRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFsczsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94CgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBjb2xvcjogPGhleD4sCgkgKiAgc3BlY3VsYXI6IDxoZXg+LAoJICogIHNoaW5pbmVzczogPGZsb2F0PiwKCSAqCgkgKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGdyYWRpZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PgoJICoKCSAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PgoJICoKCSAqICBlbWlzc2l2ZTogPGhleD4sCgkgKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD4KCSAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBidW1wU2NhbGU6IDxmbG9hdD4sCgkgKgoJICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsCgkgKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPiwKCSAqCgkgKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LAoJICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sCgkgKgoJICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sCgkgKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LAoJICoKCSAqICBza2lubmluZzogPGJvb2w+LAoJICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LAoJICogIG1vcnBoTm9ybWFsczogPGJvb2w+CgkgKiB9CgkgKi8KCglmdW5jdGlvbiBNZXNoVG9vbk1hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQlNYXRlcmlhbC5jYWxsKCB0aGlzICk7CgoJCXRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9OwoKCQl0aGlzLnR5cGUgPSAnTWVzaFRvb25NYXRlcmlhbCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7CgkJdGhpcy5zcGVjdWxhciA9IG5ldyBDb2xvciggMHgxMTExMTEgKTsKCQl0aGlzLnNoaW5pbmVzcyA9IDMwOwoKCQl0aGlzLm1hcCA9IG51bGw7CgkJdGhpcy5ncmFkaWVudE1hcCA9IG51bGw7CgoJCXRoaXMubGlnaHRNYXAgPSBudWxsOwoJCXRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7CgoJCXRoaXMuYW9NYXAgPSBudWxsOwoJCXRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7CgoJCXRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7CgkJdGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDsKCQl0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDsKCgkJdGhpcy5idW1wTWFwID0gbnVsbDsKCQl0aGlzLmJ1bXBTY2FsZSA9IDE7CgoJCXRoaXMubm9ybWFsTWFwID0gbnVsbDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7CgkJdGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwOwoKCQl0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDsKCgkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgoJCXRoaXMud2lyZWZyYW1lID0gZmFsc2U7CgkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxOwoJCXRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7CgkJdGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7CgoJCXRoaXMuc2tpbm5pbmcgPSBmYWxzZTsKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOwoJCXRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7CgoJCXRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7CgoJfQoKCU1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7CglNZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hUb29uTWF0ZXJpYWw7CgoJTWVzaFRvb25NYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoVG9vbk1hdGVyaWFsID0gdHJ1ZTsKCglNZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApOwoJCXRoaXMuc3BlY3VsYXIuY29weSggc291cmNlLnNwZWN1bGFyICk7CgkJdGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzOwoKCQl0aGlzLm1hcCA9IHNvdXJjZS5tYXA7CgkJdGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDsKCgkJdGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDsKCQl0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5OwoKCQl0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwOwoJCXRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7CgoJCXRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7CgkJdGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDsKCQl0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5OwoKCQl0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDsKCQl0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7CgoJCXRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTsKCQl0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApOwoKCQl0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7CgkJdGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhczsKCgkJdGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDsKCgkJdGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDsKCgkJdGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDsKCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDsKCQl0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCQl0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKgoJICogcGFyYW1ldGVycyA9IHsKCSAqICBvcGFjaXR5OiA8ZmxvYXQ+LAoJICoKCSAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGJ1bXBTY2FsZTogPGZsb2F0PiwKCSAqCgkgKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCwKCSAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LAoJICoKCSAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sCgkgKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PiwKCSAqCgkgKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sCgkgKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+CgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHsKCgkJTWF0ZXJpYWwuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnTWVzaE5vcm1hbE1hdGVyaWFsJzsKCgkJdGhpcy5idW1wTWFwID0gbnVsbDsKCQl0aGlzLmJ1bXBTY2FsZSA9IDE7CgoJCXRoaXMubm9ybWFsTWFwID0gbnVsbDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7CgkJdGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwOwoKCQl0aGlzLndpcmVmcmFtZSA9IGZhbHNlOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTsKCgkJdGhpcy5mb2cgPSBmYWxzZTsKCgkJdGhpcy5za2lubmluZyA9IGZhbHNlOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7CgkJdGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTsKCgkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgl9CgoJTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hOb3JtYWxNYXRlcmlhbDsKCglNZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE5vcm1hbE1hdGVyaWFsID0gdHJ1ZTsKCglNZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwOwoJCXRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTsKCgkJdGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwOwoJCXRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlOwoJCXRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlOwoJCXRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzOwoKCQl0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7CgkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoOwoKCQl0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0czsKCQl0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGNvbG9yOiA8aGV4PiwKCSAqICBvcGFjaXR5OiA8ZmxvYXQ+LAoJICoKCSAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+CgkgKgoJICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+CgkgKgoJICogIGVtaXNzaXZlOiA8aGV4PiwKCSAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PgoJICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSwKCSAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSwKCSAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sCgkgKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LAoJICoKCSAqICB3aXJlZnJhbWU6IDxib29sZWFuPiwKCSAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7CgoJCU1hdGVyaWFsLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ01lc2hMYW1iZXJ0TWF0ZXJpYWwnOwoKCQl0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlCgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5saWdodE1hcCA9IG51bGw7CgkJdGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5hb01hcCA9IG51bGw7CgkJdGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDsKCgkJdGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTsKCQl0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wOwoJCXRoaXMuZW1pc3NpdmVNYXAgPSBudWxsOwoKCQl0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDsKCgkJdGhpcy5hbHBoYU1hcCA9IG51bGw7CgoJCXRoaXMuZW52TWFwID0gbnVsbDsKCQl0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjsKCQl0aGlzLnJlZmxlY3Rpdml0eSA9IDE7CgkJdGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4OwoKCQl0aGlzLndpcmVmcmFtZSA9IGZhbHNlOwoJCXRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTsKCQl0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnOwoJCXRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnOwoKCQl0aGlzLnNraW5uaW5nID0gZmFsc2U7CgkJdGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTsKCQl0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOwoKCQl0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApOwoKCX0KCglNZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTGFtYmVydE1hdGVyaWFsOwoKCU1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbCA9IHRydWU7CgoJTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTsKCgkJdGhpcy5tYXAgPSBzb3VyY2UubWFwOwoKCQl0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwOwoJCXRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7CgoJCXRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7CgkJdGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTsKCgkJdGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTsKCQl0aGlzLmVtaXNzaXZlTWFwID0gc291cmNlLmVtaXNzaXZlTWFwOwoJCXRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7CgoJCXRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7CgoJCXRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7CgoJCXRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDsKCQl0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTsKCQl0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7CgkJdGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvOwoKCQl0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7CgkJdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoOwoJCXRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwOwoJCXRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47CgoJCXRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7CgkJdGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzOwoJCXRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFsczsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICoKCSAqIHBhcmFtZXRlcnMgPSB7CgkgKiAgY29sb3I6IDxoZXg+LAoJICogIG9wYWNpdHk6IDxmbG9hdD4sCgkgKgoJICogIG1hdGNhcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSwKCSAqCgkgKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICoKCSAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIGJ1bXBTY2FsZTogPGZsb2F0PiwKCSAqCgkgKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLAoJICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCwKCSAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LAoJICoKCSAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sCgkgKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PiwKCSAqCgkgKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksCgkgKgoJICogIHNraW5uaW5nOiA8Ym9vbD4sCgkgKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sCgkgKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIE1lc2hNYXRjYXBNYXRlcmlhbCggcGFyYW1ldGVycyApIHsKCgkJTWF0ZXJpYWwuY2FsbCggdGhpcyApOwoKCQl0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9OwoKCQl0aGlzLnR5cGUgPSAnTWVzaE1hdGNhcE1hdGVyaWFsJzsKCgkJdGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZQoKCQl0aGlzLm1hdGNhcCA9IG51bGw7CgoJCXRoaXMubWFwID0gbnVsbDsKCgkJdGhpcy5idW1wTWFwID0gbnVsbDsKCQl0aGlzLmJ1bXBTY2FsZSA9IDE7CgoJCXRoaXMubm9ybWFsTWFwID0gbnVsbDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7CgkJdGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7CgoJCXRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDsKCQl0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwOwoKCQl0aGlzLmFscGhhTWFwID0gbnVsbDsKCgkJdGhpcy5za2lubmluZyA9IGZhbHNlOwoJCXRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7CgkJdGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTsKCgkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgl9CgoJTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApOwoJTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hNYXRjYXBNYXRlcmlhbDsKCglNZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTsKCglNZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07CgoJCXRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7CgoJCXRoaXMubWF0Y2FwID0gc291cmNlLm1hdGNhcDsKCgkJdGhpcy5tYXAgPSBzb3VyY2UubWFwOwoKCQl0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDsKCQl0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7CgoJCXRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDsKCQl0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTsKCQl0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApOwoKCQl0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7CgkJdGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTsKCQl0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhczsKCgkJdGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDsKCgkJdGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZzsKCQl0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7CgkJdGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqCgkgKiBwYXJhbWV0ZXJzID0gewoJICogIGNvbG9yOiA8aGV4PiwKCSAqICBvcGFjaXR5OiA8ZmxvYXQ+LAoJICoKCSAqICBsaW5ld2lkdGg6IDxmbG9hdD4sCgkgKgoJICogIHNjYWxlOiA8ZmxvYXQ+LAoJICogIGRhc2hTaXplOiA8ZmxvYXQ+LAoJICogIGdhcFNpemU6IDxmbG9hdD4KCSAqIH0KCSAqLwoKCWZ1bmN0aW9uIExpbmVEYXNoZWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHsKCgkJTGluZUJhc2ljTWF0ZXJpYWwuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJzsKCgkJdGhpcy5zY2FsZSA9IDE7CgkJdGhpcy5kYXNoU2l6ZSA9IDM7CgkJdGhpcy5nYXBTaXplID0gMTsKCgkJdGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTsKCgl9CgoJTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZSApOwoJTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVEYXNoZWRNYXRlcmlhbDsKCglMaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmlzTGluZURhc2hlZE1hdGVyaWFsID0gdHJ1ZTsKCglMaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMuc2NhbGUgPSBzb3VyY2Uuc2NhbGU7CgkJdGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTsKCQl0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCgoKCXZhciBNYXRlcmlhbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CgkJX19wcm90b19fOiBudWxsLAoJCVNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCwKCQlTcHJpdGVNYXRlcmlhbDogU3ByaXRlTWF0ZXJpYWwsCgkJUmF3U2hhZGVyTWF0ZXJpYWw6IFJhd1NoYWRlck1hdGVyaWFsLAoJCVNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCwKCQlQb2ludHNNYXRlcmlhbDogUG9pbnRzTWF0ZXJpYWwsCgkJTWVzaFBoeXNpY2FsTWF0ZXJpYWw6IE1lc2hQaHlzaWNhbE1hdGVyaWFsLAoJCU1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCwKCQlNZXNoUGhvbmdNYXRlcmlhbDogTWVzaFBob25nTWF0ZXJpYWwsCgkJTWVzaFRvb25NYXRlcmlhbDogTWVzaFRvb25NYXRlcmlhbCwKCQlNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCwKCQlNZXNoTGFtYmVydE1hdGVyaWFsOiBNZXNoTGFtYmVydE1hdGVyaWFsLAoJCU1lc2hEZXB0aE1hdGVyaWFsOiBNZXNoRGVwdGhNYXRlcmlhbCwKCQlNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsCgkJTWVzaEJhc2ljTWF0ZXJpYWw6IE1lc2hCYXNpY01hdGVyaWFsLAoJCU1lc2hNYXRjYXBNYXRlcmlhbDogTWVzaE1hdGNhcE1hdGVyaWFsLAoJCUxpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLAoJCUxpbmVCYXNpY01hdGVyaWFsOiBMaW5lQmFzaWNNYXRlcmlhbCwKCQlNYXRlcmlhbDogTWF0ZXJpYWwKCX0pOwoKCS8qKgoJICogQGF1dGhvciB0c2NodwoJICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby8KCSAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzLwoJICovCgoJdmFyIEFuaW1hdGlvblV0aWxzID0gewoKCQkvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzCgkJYXJyYXlTbGljZTogZnVuY3Rpb24gKCBhcnJheSwgZnJvbSwgdG8gKSB7CgoJCQlpZiAoIEFuaW1hdGlvblV0aWxzLmlzVHlwZWRBcnJheSggYXJyYXkgKSApIHsKCgkJCQkvLyBpbiBpb3M5IGFycmF5LnN1YmFycmF5KGZyb20sIHVuZGVmaW5lZCkgd2lsbCByZXR1cm4gZW1wdHkgYXJyYXkKCQkJCS8vIGJ1dCBhcnJheS5zdWJhcnJheShmcm9tKSBvciBhcnJheS5zdWJhcnJheShmcm9tLCBsZW4pIGlzIGNvcnJlY3QKCQkJCXJldHVybiBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGFycmF5LnN1YmFycmF5KCBmcm9tLCB0byAhPT0gdW5kZWZpbmVkID8gdG8gOiBhcnJheS5sZW5ndGggKSApOwoKCQkJfQoKCQkJcmV0dXJuIGFycmF5LnNsaWNlKCBmcm9tLCB0byApOwoKCQl9LAoKCQkvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGUKCQljb252ZXJ0QXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIHR5cGUsIGZvcmNlQ2xvbmUgKSB7CgoJCQlpZiAoICEgYXJyYXkgfHwgLy8gbGV0ICd1bmRlZmluZWQnIGFuZCAnbnVsbCcgcGFzcwoJCQkJISBmb3JjZUNsb25lICYmIGFycmF5LmNvbnN0cnVjdG9yID09PSB0eXBlICkgeyByZXR1cm4gYXJyYXk7IH0KCgkJCWlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkgewoKCQkJCXJldHVybiBuZXcgdHlwZSggYXJyYXkgKTsgLy8gY3JlYXRlIHR5cGVkIGFycmF5CgoJCQl9CgoJCQlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFycmF5ICk7IC8vIGNyZWF0ZSBBcnJheQoKCQl9LAoKCQlpc1R5cGVkQXJyYXk6IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKCQkJcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyggb2JqZWN0ICkgJiYKCQkJCSEgKCBvYmplY3QgaW5zdGFuY2VvZiBEYXRhVmlldyApOwoKCQl9LAoKCQkvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZAoJCWdldEtleWZyYW1lT3JkZXI6IGZ1bmN0aW9uICggdGltZXMgKSB7CgoJCQlmdW5jdGlvbiBjb21wYXJlVGltZSggaSwgaiApIHsKCgkJCQlyZXR1cm4gdGltZXNbIGkgXSAtIHRpbWVzWyBqIF07CgoJCQl9CgoJCQl2YXIgbiA9IHRpbWVzLmxlbmd0aDsKCQkJdmFyIHJlc3VsdCA9IG5ldyBBcnJheSggbiApOwoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7IHJlc3VsdFsgaSBdID0gaTsgfQoKCQkJcmVzdWx0LnNvcnQoIGNvbXBhcmVUaW1lICk7CgoJCQlyZXR1cm4gcmVzdWx0OwoKCQl9LAoKCQkvLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGEKCQlzb3J0ZWRBcnJheTogZnVuY3Rpb24gKCB2YWx1ZXMsIHN0cmlkZSwgb3JkZXIgKSB7CgoJCQl2YXIgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7CgkJCXZhciByZXN1bHQgPSBuZXcgdmFsdWVzLmNvbnN0cnVjdG9yKCBuVmFsdWVzICk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHsKCgkJCQl2YXIgc3JjT2Zmc2V0ID0gb3JkZXJbIGkgXSAqIHN0cmlkZTsKCgkJCQlmb3IgKCB2YXIgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHsKCgkJCQkJcmVzdWx0WyBkc3RPZmZzZXQgKysgXSA9IHZhbHVlc1sgc3JjT2Zmc2V0ICsgaiBdOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiByZXN1bHQ7CgoJCX0sCgoJCS8vIGZ1bmN0aW9uIGZvciBwYXJzaW5nIEFPUyBrZXlmcmFtZSBmb3JtYXRzCgkJZmxhdHRlbkpTT046IGZ1bmN0aW9uICgganNvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHZhbHVlUHJvcGVydHlOYW1lICkgewoKCQkJdmFyIGkgPSAxLCBrZXkgPSBqc29uS2V5c1sgMCBdOwoKCQkJd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCAmJiBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQlrZXkgPSBqc29uS2V5c1sgaSArKyBdOwoKCQkJfQoKCQkJaWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9IC8vIG5vIGRhdGEKCgkJCXZhciB2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTsKCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0gLy8gbm8gZGF0YQoKCQkJaWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkgewoKCQkJCWRvIHsKCgkJCQkJdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07CgoJCQkJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXRpbWVzLnB1c2goIGtleS50aW1lICk7CgkJCQkJCXZhbHVlcy5wdXNoLmFwcGx5KCB2YWx1ZXMsIHZhbHVlICk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzCgoJCQkJCX0KCgkJCQkJa2V5ID0ganNvbktleXNbIGkgKysgXTsKCgkJCQl9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTsKCgkJCX0gZWxzZSBpZiAoIHZhbHVlLnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2gKCgkJCQlkbyB7CgoJCQkJCXZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdOwoKCQkJCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQl0aW1lcy5wdXNoKCBrZXkudGltZSApOwoJCQkJCQl2YWx1ZS50b0FycmF5KCB2YWx1ZXMsIHZhbHVlcy5sZW5ndGggKTsKCgkJCQkJfQoKCQkJCQlrZXkgPSBqc29uS2V5c1sgaSArKyBdOwoKCQkJCX0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApOwoKCQkJfSBlbHNlIHsKCgkJCQkvLyBvdGhlcndpc2UgcHVzaCBhcy1pcwoKCQkJCWRvIHsKCgkJCQkJdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07CgoJCQkJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXRpbWVzLnB1c2goIGtleS50aW1lICk7CgkJCQkJCXZhbHVlcy5wdXNoKCB2YWx1ZSApOwoKCQkJCQl9CgoJCQkJCWtleSA9IGpzb25LZXlzWyBpICsrIF07CgoJCQkJfSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7CgoJCQl9CgoJCX0sCgoJCXN1YmNsaXA6IGZ1bmN0aW9uICggc291cmNlQ2xpcCwgbmFtZSwgc3RhcnRGcmFtZSwgZW5kRnJhbWUsIGZwcyApIHsKCgkJCWZwcyA9IGZwcyB8fCAzMDsKCgkJCXZhciBjbGlwID0gc291cmNlQ2xpcC5jbG9uZSgpOwoKCQkJY2xpcC5uYW1lID0gbmFtZTsKCgkJCXZhciB0cmFja3MgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHsKCgkJCQl2YXIgdHJhY2sgPSBjbGlwLnRyYWNrc1sgaSBdOwoJCQkJdmFyIHZhbHVlU2l6ZSA9IHRyYWNrLmdldFZhbHVlU2l6ZSgpOwoKCQkJCXZhciB0aW1lcyA9IFtdOwoJCQkJdmFyIHZhbHVlcyA9IFtdOwoKCQkJCWZvciAoIHZhciBqID0gMDsgaiA8IHRyYWNrLnRpbWVzLmxlbmd0aDsgKysgaiApIHsKCgkJCQkJdmFyIGZyYW1lID0gdHJhY2sudGltZXNbIGogXSAqIGZwczsKCgkJCQkJaWYgKCBmcmFtZSA8IHN0YXJ0RnJhbWUgfHwgZnJhbWUgPj0gZW5kRnJhbWUgKSB7IGNvbnRpbnVlOyB9CgoJCQkJCXRpbWVzLnB1c2goIHRyYWNrLnRpbWVzWyBqIF0gKTsKCgkJCQkJZm9yICggdmFyIGsgPSAwOyBrIDwgdmFsdWVTaXplOyArKyBrICkgewoKCQkJCQkJdmFsdWVzLnB1c2goIHRyYWNrLnZhbHVlc1sgaiAqIHZhbHVlU2l6ZSArIGsgXSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCWlmICggdGltZXMubGVuZ3RoID09PSAwICkgeyBjb250aW51ZTsgfQoKCQkJCXRyYWNrLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0aW1lcywgdHJhY2sudGltZXMuY29uc3RydWN0b3IgKTsKCQkJCXRyYWNrLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0cmFjay52YWx1ZXMuY29uc3RydWN0b3IgKTsKCgkJCQl0cmFja3MucHVzaCggdHJhY2sgKTsKCgkJCX0KCgkJCWNsaXAudHJhY2tzID0gdHJhY2tzOwoKCQkJLy8gZmluZCBtaW5pbXVtIC50aW1lcyB2YWx1ZSBhY3Jvc3MgYWxsIHRyYWNrcyBpbiB0aGUgdHJpbW1lZCBjbGlwCgoJCQl2YXIgbWluU3RhcnRUaW1lID0gSW5maW5pdHk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7CgoJCQkJaWYgKCBtaW5TdGFydFRpbWUgPiBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF0gKSB7CgoJCQkJCW1pblN0YXJ0VGltZSA9IGNsaXAudHJhY2tzWyBpIF0udGltZXNbIDAgXTsKCgkJCQl9CgoJCQl9CgoJCQkvLyBzaGlmdCBhbGwgdHJhY2tzIHN1Y2ggdGhhdCBjbGlwIGJlZ2lucyBhdCB0PTAKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHsKCgkJCQljbGlwLnRyYWNrc1sgaSBdLnNoaWZ0KCAtIDEgKiBtaW5TdGFydFRpbWUgKTsKCgkJCX0KCgkJCWNsaXAucmVzZXREdXJhdGlvbigpOwoKCQkJcmV0dXJuIGNsaXA7CgoJCX0KCgl9OwoKCS8qKgoJICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuCgkgKgoJICogVGhlIHBhcmFtZXRlciBkb21haW4gaXMgb25lIGRpbWVuc2lvbmFsLCB0eXBpY2FsbHkgdGhlIHRpbWUgb3IgYSBwYXRoCgkgKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuCgkgKgoJICogVGhlIHNhbXBsZSB2YWx1ZXMgY2FuIGhhdmUgYW55IGRpbWVuc2lvbmFsaXR5IGFuZCBkZXJpdmVkIGNsYXNzZXMgbWF5CgkgKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS4KCSAqCgkgKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHRoZSBpbnRlcnZhbCBzZWVrIGluIGEgVGVtcGxhdGUgTWV0aG9kLCBkZWZlcnJpbmcKCSAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuCgkgKgoJICogVGltZSBjb21wbGV4aXR5IGlzIE8oMSkgZm9yIGxpbmVhciBhY2Nlc3MgY3Jvc3NpbmcgYXQgbW9zdCB0d28gcG9pbnRzCgkgKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuCgkgKgoJICogUmVmZXJlbmNlczoKCSAqCgkgKiAJCWh0dHA6Ly93d3cub29kZXNpZ24uY29tL3RlbXBsYXRlLW1ldGhvZC1wYXR0ZXJuLmh0bWwKCSAqCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHsKCgkJdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMgPSBwYXJhbWV0ZXJQb3NpdGlvbnM7CgkJdGhpcy5fY2FjaGVkSW5kZXggPSAwOwoKCQl0aGlzLnJlc3VsdEJ1ZmZlciA9IHJlc3VsdEJ1ZmZlciAhPT0gdW5kZWZpbmVkID8KCQkJcmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApOwoJCXRoaXMuc2FtcGxlVmFsdWVzID0gc2FtcGxlVmFsdWVzOwoJCXRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggSW50ZXJwb2xhbnQucHJvdG90eXBlLCB7CgoJCWV2YWx1YXRlOiBmdW5jdGlvbiAoIHQgKSB7CgoJCQl2YXIgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucywKCQkJCWkxID0gdGhpcy5fY2FjaGVkSW5kZXgsCgoJCQkJdDEgPSBwcFsgaTEgXSwKCQkJCXQwID0gcHBbIGkxIC0gMSBdOwoKCQkJdmFsaWRhdGVfaW50ZXJ2YWw6IHsKCgkJCQlzZWVrOiB7CgoJCQkJCXZhciByaWdodDsKCgkJCQkJbGluZWFyX3NjYW46IHsKCgkJCQkJCS8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvMwoJCQkJCQkvLy0gc2xvd2VyIGNvZGU6CgkJCQkJCS8vLQoJCQkJCQkvLy0gCQkJCWlmICggdCA+PSB0MSB8fCB0MSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQlmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkgewoKCQkJCQkJCWZvciAoIHZhciBnaXZlVXBBdCA9IGkxICsgMjsgOyApIHsKCgkJCQkJCQkJaWYgKCB0MSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCQkJaWYgKCB0IDwgdDAgKSB7IGJyZWFrIGZvcndhcmRfc2NhbjsgfQoKCQkJCQkJCQkJLy8gYWZ0ZXIgZW5kCgoJCQkJCQkJCQlpMSA9IHBwLmxlbmd0aDsKCQkJCQkJCQkJdGhpcy5fY2FjaGVkSW5kZXggPSBpMTsKCQkJCQkJCQkJcmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQsIHQwICk7CgoJCQkJCQkJCX0KCgkJCQkJCQkJaWYgKCBpMSA9PT0gZ2l2ZVVwQXQgKSB7IGJyZWFrOyB9IC8vIHRoaXMgbG9vcAoKCQkJCQkJCQl0MCA9IHQxOwoJCQkJCQkJCXQxID0gcHBbICsrIGkxIF07CgoJCQkJCQkJCWlmICggdCA8IHQxICkgewoKCQkJCQkJCQkJLy8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWwKCQkJCQkJCQkJYnJlYWsgc2VlazsKCgkJCQkJCQkJfQoKCQkJCQkJCX0KCgkJCQkJCQkvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGluZGV4CgkJCQkJCQlyaWdodCA9IHBwLmxlbmd0aDsKCQkJCQkJCWJyZWFrIGxpbmVhcl9zY2FuOwoKCQkJCQkJfQoKCQkJCQkJLy8tIHNsb3dlciBjb2RlOgoJCQkJCQkvLy0JCQkJCWlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7CgkJCQkJCWlmICggISAoIHQgPj0gdDAgKSApIHsKCgkJCQkJCQkvLyBsb29waW5nPwoKCQkJCQkJCXZhciB0MWdsb2JhbCA9IHBwWyAxIF07CgoJCQkJCQkJaWYgKCB0IDwgdDFnbG9iYWwgKSB7CgoJCQkJCQkJCWkxID0gMjsgLy8gKyAxLCB1c2luZyB0aGUgc2NhbiBmb3IgdGhlIGRldGFpbHMKCQkJCQkJCQl0MCA9IHQxZ2xvYmFsOwoKCQkJCQkJCX0KCgkJCQkJCQkvLyBsaW5lYXIgcmV2ZXJzZSBzY2FuCgoJCQkJCQkJZm9yICggdmFyIGdpdmVVcEF0ID0gaTEgLSAyOyA7ICkgewoKCQkJCQkJCQlpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCQkJCQkvLyBiZWZvcmUgc3RhcnQKCgkJCQkJCQkJCXRoaXMuX2NhY2hlZEluZGV4ID0gMDsKCQkJCQkJCQkJcmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApOwoKCQkJCQkJCQl9CgoJCQkJCQkJCWlmICggaTEgPT09IGdpdmVVcEF0ICkgeyBicmVhazsgfSAvLyB0aGlzIGxvb3AKCgkJCQkJCQkJdDEgPSB0MDsKCQkJCQkJCQl0MCA9IHBwWyAtLSBpMSAtIDEgXTsKCgkJCQkJCQkJaWYgKCB0ID49IHQwICkgewoKCQkJCQkJCQkJLy8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWwKCQkJCQkJCQkJYnJlYWsgc2VlazsKCgkJCQkJCQkJfQoKCQkJCQkJCX0KCgkJCQkJCQkvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW5kZXgKCQkJCQkJCXJpZ2h0ID0gaTE7CgkJCQkJCQlpMSA9IDA7CgkJCQkJCQlicmVhayBsaW5lYXJfc2NhbjsKCgkJCQkJCX0KCgkJCQkJCS8vIHRoZSBpbnRlcnZhbCBpcyB2YWxpZAoKCQkJCQkJYnJlYWsgdmFsaWRhdGVfaW50ZXJ2YWw7CgoJCQkJCX0gLy8gbGluZWFyIHNjYW4KCgkJCQkJLy8gYmluYXJ5IHNlYXJjaAoKCQkJCQl3aGlsZSAoIGkxIDwgcmlnaHQgKSB7CgoJCQkJCQl2YXIgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7CgoJCQkJCQlpZiAoIHQgPCBwcFsgbWlkIF0gKSB7CgoJCQkJCQkJcmlnaHQgPSBtaWQ7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCWkxID0gbWlkICsgMTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQl0MSA9IHBwWyBpMSBdOwoJCQkJCXQwID0gcHBbIGkxIC0gMSBdOwoKCQkJCQkvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW4KCgkJCQkJaWYgKCB0MCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJdGhpcy5fY2FjaGVkSW5kZXggPSAwOwoJCQkJCQlyZXR1cm4gdGhpcy5iZWZvcmVTdGFydF8oIDAsIHQsIHQxICk7CgoJCQkJCX0KCgkJCQkJaWYgKCB0MSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJaTEgPSBwcC5sZW5ndGg7CgkJCQkJCXRoaXMuX2NhY2hlZEluZGV4ID0gaTE7CgkJCQkJCXJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0MCwgdCApOwoKCQkJCQl9CgoJCQkJfSAvLyBzZWVrCgoJCQkJdGhpcy5fY2FjaGVkSW5kZXggPSBpMTsKCgkJCQl0aGlzLmludGVydmFsQ2hhbmdlZF8oIGkxLCB0MCwgdDEgKTsKCgkJCX0gLy8gdmFsaWRhdGVfaW50ZXJ2YWwKCgkJCXJldHVybiB0aGlzLmludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApOwoKCQl9LAoKCQlzZXR0aW5nczogbnVsbCwgLy8gb3B0aW9uYWwsIHN1YmNsYXNzLXNwZWNpZmljIHNldHRpbmdzIHN0cnVjdHVyZQoJCS8vIE5vdGU6IFRoZSBpbmRpcmVjdGlvbiBhbGxvd3MgY2VudHJhbCBjb250cm9sIG9mIG1hbnkgaW50ZXJwb2xhbnRzLgoKCQkvLyAtLS0gUHJvdGVjdGVkIGludGVyZmFjZQoKCQlEZWZhdWx0U2V0dGluZ3NfOiB7fSwKCgkJZ2V0U2V0dGluZ3NfOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187CgoJCX0sCgoJCWNvcHlTYW1wbGVWYWx1ZV86IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQkvLyBjb3BpZXMgYSBzYW1wbGUgdmFsdWUgdG8gdGhlIHJlc3VsdCBidWZmZXIKCgkJCXZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlciwKCQkJCXZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLAoJCQkJc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsCgkJCQlvZmZzZXQgPSBpbmRleCAqIHN0cmlkZTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkgewoKCQkJCXJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07CgoJCQl9CgoJCQlyZXR1cm4gcmVzdWx0OwoKCQl9LAoKCQkvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6CgoJCWludGVycG9sYXRlXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQsIHQxICovICkgewoKCQkJdGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7CgkJCS8vIGltcGxlbWVudGF0aW9ucyBzaGFsbCByZXR1cm4gdGhpcy5yZXN1bHRCdWZmZXIKCgkJfSwKCgkJaW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQxICovICkgewoKCQkJLy8gZW1wdHkKCgkJfQoKCX0gKTsKCgkvLyFcIERFQ0xBUkUgQUxJQVMgQUZURVIgYXNzaWduIHByb3RvdHlwZSAhCglPYmplY3QuYXNzaWduKCBJbnRlcnBvbGFudC5wcm90b3R5cGUsIHsKCgkJLy8oIDAsIHQsIHQwICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXIKCQliZWZvcmVTdGFydF86IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfLAoKCQkvLyggTi0xLCB0Ti0xLCB0ICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXIKCQlhZnRlckVuZF86IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfLAoKCX0gKTsKCgkvKioKCSAqIEZhc3QgYW5kIHNpbXBsZSBjdWJpYyBzcGxpbmUgaW50ZXJwb2xhbnQuCgkgKgoJICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZQoJICogYXQgZWFjaCBzYW1wbGUgcG9zaXRpb24gdG8gdGhlIGxpbmVhciBzbG9wZSBiZXR3ZWVuIG5laWdoYm9yaW5nIHBvc2l0aW9ucwoJICogb3ZlciB0aGVpciBwYXJhbWV0ZXIgaW50ZXJ2YWwuCgkgKgoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gQ3ViaWNJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHsKCgkJSW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApOwoKCQl0aGlzLl93ZWlnaHRQcmV2ID0gLSAwOwoJCXRoaXMuX29mZnNldFByZXYgPSAtIDA7CgkJdGhpcy5fd2VpZ2h0TmV4dCA9IC0gMDsKCQl0aGlzLl9vZmZzZXROZXh0ID0gLSAwOwoKCX0KCglDdWJpY0ludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVycG9sYW50LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBDdWJpY0ludGVycG9sYW50LAoKCQlEZWZhdWx0U2V0dGluZ3NfOiB7CgoJCQllbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZywKCQkJZW5kaW5nRW5kOiBaZXJvQ3VydmF0dXJlRW5kaW5nCgoJCX0sCgoJCWludGVydmFsQ2hhbmdlZF86IGZ1bmN0aW9uICggaTEsIHQwLCB0MSApIHsKCgkJCXZhciBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zLAoJCQkJaVByZXYgPSBpMSAtIDIsCgkJCQlpTmV4dCA9IGkxICsgMSwKCgkJCQl0UHJldiA9IHBwWyBpUHJldiBdLAoJCQkJdE5leHQgPSBwcFsgaU5leHQgXTsKCgkJCWlmICggdFByZXYgPT09IHVuZGVmaW5lZCApIHsKCgkJCQlzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ1N0YXJ0ICkgewoKCQkJCQljYXNlIFplcm9TbG9wZUVuZGluZzoKCgkJCQkJCS8vIGYnKHQwKSA9IDAKCQkJCQkJaVByZXYgPSBpMTsKCQkJCQkJdFByZXYgPSAyICogdDAgLSB0MTsKCgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlIFdyYXBBcm91bmRFbmRpbmc6CgoJCQkJCQkvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmUKCQkJCQkJaVByZXYgPSBwcC5sZW5ndGggLSAyOwoJCQkJCQl0UHJldiA9IHQwICsgcHBbIGlQcmV2IF0gLSBwcFsgaVByZXYgKyAxIF07CgoJCQkJCQlicmVhazsKCgkJCQkJZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZwoKCQkJCQkJLy8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lCgkJCQkJCWlQcmV2ID0gaTE7CgkJCQkJCXRQcmV2ID0gdDE7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCXN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kICkgewoKCQkJCQljYXNlIFplcm9TbG9wZUVuZGluZzoKCgkJCQkJCS8vIGYnKHROKSA9IDAKCQkJCQkJaU5leHQgPSBpMTsKCQkJCQkJdE5leHQgPSAyICogdDEgLSB0MDsKCgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlIFdyYXBBcm91bmRFbmRpbmc6CgoJCQkJCQkvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmUKCQkJCQkJaU5leHQgPSAxOwoJCQkJCQl0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07CgoJCQkJCQlicmVhazsKCgkJCQkJZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZwoKCQkJCQkJLy8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZQoJCQkJCQlpTmV4dCA9IGkxIC0gMTsKCQkJCQkJdE5leHQgPSB0MDsKCgkJCQl9CgoJCQl9CgoJCQl2YXIgaGFsZkR0ID0gKCB0MSAtIHQwICkgKiAwLjUsCgkJCQlzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTsKCgkJCXRoaXMuX3dlaWdodFByZXYgPSBoYWxmRHQgLyAoIHQwIC0gdFByZXYgKTsKCQkJdGhpcy5fd2VpZ2h0TmV4dCA9IGhhbGZEdCAvICggdE5leHQgLSB0MSApOwoJCQl0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7CgkJCXRoaXMuX29mZnNldE5leHQgPSBpTmV4dCAqIHN0cmlkZTsKCgkJfSwKCgkJaW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7CgoJCQl2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsCgkJCQl2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcywKCQkJCXN0cmlkZSA9IHRoaXMudmFsdWVTaXplLAoKCQkJCW8xID0gaTEgKiBzdHJpZGUsCQlvMCA9IG8xIC0gc3RyaWRlLAoJCQkJb1AgPSB0aGlzLl9vZmZzZXRQcmV2LCAJb04gPSB0aGlzLl9vZmZzZXROZXh0LAoJCQkJd1AgPSB0aGlzLl93ZWlnaHRQcmV2LAl3TiA9IHRoaXMuX3dlaWdodE5leHQsCgoJCQkJcCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSwKCQkJCXBwID0gcCAqIHAsCgkJCQlwcHAgPSBwcCAqIHA7CgoJCQkvLyBldmFsdWF0ZSBwb2x5bm9taWFscwoKCQkJdmFyIHNQID0gLSB3UCAqIHBwcCArIDIgKiB3UCAqIHBwIC0gd1AgKiBwOwoJCQl2YXIgczAgPSAoIDEgKyB3UCApICogcHBwICsgKCAtIDEuNSAtIDIgKiB3UCApICogcHAgKyAoIC0gMC41ICsgd1AgKSAqIHAgKyAxOwoJCQl2YXIgczEgPSAoIC0gMSAtIHdOICkgKiBwcHAgKyAoIDEuNSArIHdOICkgKiBwcCArIDAuNSAqIHA7CgkJCXZhciBzTiA9IHdOICogcHBwIC0gd04gKiBwcDsKCgkJCS8vIGNvbWJpbmUgZGF0YSBsaW5lYXJseQoKCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7CgoJCQkJcmVzdWx0WyBpIF0gPQoJCQkJCQlzUCAqIHZhbHVlc1sgb1AgKyBpIF0gKwoJCQkJCQlzMCAqIHZhbHVlc1sgbzAgKyBpIF0gKwoJCQkJCQlzMSAqIHZhbHVlc1sgbzEgKyBpIF0gKwoJCQkJCQlzTiAqIHZhbHVlc1sgb04gKyBpIF07CgoJCQl9CgoJCQlyZXR1cm4gcmVzdWx0OwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gTGluZWFySW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7CgoJCUludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTsKCgl9CgoJTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IExpbmVhckludGVycG9sYW50LAoKCQlpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHsKCgkJCXZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlciwKCQkJCXZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLAoJCQkJc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsCgoJCQkJb2Zmc2V0MSA9IGkxICogc3RyaWRlLAoJCQkJb2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUsCgoJCQkJd2VpZ2h0MSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSwKCQkJCXdlaWdodDAgPSAxIC0gd2VpZ2h0MTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkgewoKCQkJCXJlc3VsdFsgaSBdID0KCQkJCQkJdmFsdWVzWyBvZmZzZXQwICsgaSBdICogd2VpZ2h0MCArCgkJCQkJCXZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHdlaWdodDE7CgoJCQl9CgoJCQlyZXR1cm4gcmVzdWx0OwoKCQl9CgoJfSApOwoKCS8qKgoJICoKCSAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZWRpbmcKCSAqIHRoZSBwYXJhbWV0ZXIuCgkgKgoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gRGlzY3JldGVJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHsKCgkJSW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApOwoKCX0KCglEaXNjcmV0ZUludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVycG9sYW50LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBEaXNjcmV0ZUludGVycG9sYW50LAoKCQlpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEgLyosIHQwLCB0LCB0MSAqLyApIHsKCgkJCXJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApOwoKCQl9CgoJfSApOwoKCS8qKgoJICoKCSAqIEEgdGltZWQgc2VxdWVuY2Ugb2Yga2V5ZnJhbWVzIGZvciBhIHNwZWNpZmljIHByb3BlcnR5LgoJICoKCSAqCgkgKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvLwoJICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkgewoKCQlpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHsgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogdHJhY2sgbmFtZSBpcyB1bmRlZmluZWQnICk7IH0KCQlpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgeyB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBubyBrZXlmcmFtZXMgaW4gdHJhY2sgbmFtZWQgJyArIG5hbWUgKTsgfQoKCQl0aGlzLm5hbWUgPSBuYW1lOwoKCQl0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0aW1lcywgdGhpcy5UaW1lQnVmZmVyVHlwZSApOwoJCXRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB2YWx1ZXMsIHRoaXMuVmFsdWVCdWZmZXJUeXBlICk7CgoJCXRoaXMuc2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiB8fCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7CgoJfQoKCS8vIFN0YXRpYyBtZXRob2RzCgoJT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjaywgewoKCQkvLyBTZXJpYWxpemF0aW9uIChpbiBzdGF0aWMgY29udGV4dCwgYmVjYXVzZSBvZiBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uCgkJLy8gYW5kIGF1dG9tYXRpYyBpbnZvY2F0aW9uIG9mIC50b0pTT04pOgoKCQl0b0pTT046IGZ1bmN0aW9uICggdHJhY2sgKSB7CgoJCQl2YXIgdHJhY2tUeXBlID0gdHJhY2suY29uc3RydWN0b3I7CgoJCQl2YXIganNvbjsKCgkJCS8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHRvSlNPTiBtZXRob2QKCQkJaWYgKCB0cmFja1R5cGUudG9KU09OICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJanNvbiA9IHRyYWNrVHlwZS50b0pTT04oIHRyYWNrICk7CgoJCQl9IGVsc2UgewoKCQkJCS8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pcwoJCQkJanNvbiA9IHsKCgkJCQkJJ25hbWUnOiB0cmFjay5uYW1lLAoJCQkJCSd0aW1lcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudGltZXMsIEFycmF5ICksCgkJCQkJJ3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudmFsdWVzLCBBcnJheSApCgoJCQkJfTsKCgkJCQl2YXIgaW50ZXJwb2xhdGlvbiA9IHRyYWNrLmdldEludGVycG9sYXRpb24oKTsKCgkJCQlpZiAoIGludGVycG9sYXRpb24gIT09IHRyYWNrLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkgewoKCQkJCQlqc29uLmludGVycG9sYXRpb24gPSBpbnRlcnBvbGF0aW9uOwoKCQkJCX0KCgkJCX0KCgkJCWpzb24udHlwZSA9IHRyYWNrLlZhbHVlVHlwZU5hbWU7IC8vIG1hbmRhdG9yeQoKCQkJcmV0dXJuIGpzb247CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUsIHsKCgkJY29uc3RydWN0b3I6IEtleWZyYW1lVHJhY2ssCgoJCVRpbWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksCgoJCVZhbHVlQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LAoKCQlEZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVMaW5lYXIsCgoJCUludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOiBmdW5jdGlvbiAoIHJlc3VsdCApIHsKCgkJCXJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApOwoKCQl9LAoKCQlJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IGZ1bmN0aW9uICggcmVzdWx0ICkgewoKCQkJcmV0dXJuIG5ldyBMaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApOwoKCQl9LAoKCQlJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IGZ1bmN0aW9uICggcmVzdWx0ICkgewoKCQkJcmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7CgoJCX0sCgoJCXNldEludGVycG9sYXRpb246IGZ1bmN0aW9uICggaW50ZXJwb2xhdGlvbiApIHsKCgkJCXZhciBmYWN0b3J5TWV0aG9kOwoKCQkJc3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHsKCgkJCQljYXNlIEludGVycG9sYXRlRGlzY3JldGU6CgoJCQkJCWZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOwoKCQkJCQlicmVhazsKCgkJCQljYXNlIEludGVycG9sYXRlTGluZWFyOgoKCQkJCQlmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgSW50ZXJwb2xhdGVTbW9vdGg6CgoJCQkJCWZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDsKCgkJCQkJYnJlYWs7CgoJCQl9CgoJCQlpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgbWVzc2FnZSA9ICJ1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciAiICsKCQkJCQl0aGlzLlZhbHVlVHlwZU5hbWUgKyAiIGtleWZyYW1lIHRyYWNrIG5hbWVkICIgKyB0aGlzLm5hbWU7CgoJCQkJaWYgKCB0aGlzLmNyZWF0ZUludGVycG9sYW50ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCS8vIGZhbGwgYmFjayB0byBkZWZhdWx0LCB1bmxlc3MgdGhlIGRlZmF1bHQgaXRzZWxmIGlzIG1lc3NlZCB1cAoJCQkJCWlmICggaW50ZXJwb2xhdGlvbiAhPT0gdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApIHsKCgkJCQkJCXRoaXMuc2V0SW50ZXJwb2xhdGlvbiggdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJdGhyb3cgbmV3IEVycm9yKCBtZXNzYWdlICk7IC8vIGZhdGFsLCBpbiB0aGlzIGNhc2UKCgkJCQkJfQoKCQkJCX0KCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5LZXlmcmFtZVRyYWNrOicsIG1lc3NhZ2UgKTsKCQkJCXJldHVybiB0aGlzOwoKCQkJfQoKCQkJdGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9IGZhY3RvcnlNZXRob2Q7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0SW50ZXJwb2xhdGlvbjogZnVuY3Rpb24gKCkgewoKCQkJc3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHsKCgkJCQljYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6CgoJCQkJCXJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlOwoKCQkJCWNhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6CgoJCQkJCXJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjsKCgkJCQljYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOgoKCQkJCQlyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7CgoJCQl9CgoJCX0sCgoJCWdldFZhbHVlU2l6ZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoOwoKCQl9LAoKCQkvLyBtb3ZlIGFsbCBrZXlmcmFtZXMgZWl0aGVyIGZvcndhcmRzIG9yIGJhY2t3YXJkcyBpbiB0aW1lCgkJc2hpZnQ6IGZ1bmN0aW9uICggdGltZU9mZnNldCApIHsKCgkJCWlmICggdGltZU9mZnNldCAhPT0gMC4wICkgewoKCQkJCXZhciB0aW1lcyA9IHRoaXMudGltZXM7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gdGltZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCQl0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIHNjYWxlIGFsbCBrZXlmcmFtZSB0aW1lcyBieSBhIGZhY3RvciAodXNlZnVsIGZvciBmcmFtZSA8LT4gc2Vjb25kcyBjb252ZXJzaW9ucykKCQlzY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7CgoJCQlpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkgewoKCQkJCXZhciB0aW1lcyA9IHRoaXMudGltZXM7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gdGltZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCQl0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJLy8gcmVtb3ZlcyBrZXlmcmFtZXMgYmVmb3JlIGFuZCBhZnRlciBhbmltYXRpb24gd2l0aG91dCBjaGFuZ2luZyBhbnkgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW3N0YXJ0VGltZSwgZW5kVGltZV0uCgkJLy8gSU1QT1JUQU5UOiBXZSBkbyBub3Qgc2hpZnQgYXJvdW5kIGtleXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSB0cmFjayB0aW1lLCBiZWNhdXNlIGZvciBpbnRlcnBvbGF0ZWQga2V5cyB0aGlzIHdpbGwgY2hhbmdlIHRoZWlyIHZhbHVlcwoJCXRyaW06IGZ1bmN0aW9uICggc3RhcnRUaW1lLCBlbmRUaW1lICkgewoKCQkJdmFyIHRpbWVzID0gdGhpcy50aW1lcywKCQkJCW5LZXlzID0gdGltZXMubGVuZ3RoLAoJCQkJZnJvbSA9IDAsCgkJCQl0byA9IG5LZXlzIC0gMTsKCgkJCXdoaWxlICggZnJvbSAhPT0gbktleXMgJiYgdGltZXNbIGZyb20gXSA8IHN0YXJ0VGltZSApIHsKCgkJCQkrKyBmcm9tOwoKCQkJfQoKCQkJd2hpbGUgKCB0byAhPT0gLSAxICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHsKCgkJCQktLSB0bzsKCgkJCX0KCgkJCSsrIHRvOyAvLyBpbmNsdXNpdmUgLT4gZXhjbHVzaXZlIGJvdW5kCgoJCQlpZiAoIGZyb20gIT09IDAgfHwgdG8gIT09IG5LZXlzICkgewoKCQkJCS8vIGVtcHR5IHRyYWNrcyBhcmUgZm9yYmlkZGVuLCBzbyBrZWVwIGF0IGxlYXN0IG9uZSBrZXlmcmFtZQoJCQkJaWYgKCBmcm9tID49IHRvICkgeyB0byA9IE1hdGgubWF4KCB0bywgMSApLCBmcm9tID0gdG8gLSAxOyB9CgoJCQkJdmFyIHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7CgkJCQl0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIGZyb20sIHRvICk7CgkJCQl0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGUKCQl2YWxpZGF0ZTogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHZhbGlkID0gdHJ1ZTsKCgkJCXZhciB2YWx1ZVNpemUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpOwoJCQlpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBJbnZhbGlkIHZhbHVlIHNpemUgaW4gdHJhY2suJywgdGhpcyApOwoJCQkJdmFsaWQgPSBmYWxzZTsKCgkJCX0KCgkJCXZhciB0aW1lcyA9IHRoaXMudGltZXMsCgkJCQl2YWx1ZXMgPSB0aGlzLnZhbHVlcywKCgkJCQluS2V5cyA9IHRpbWVzLmxlbmd0aDsKCgkJCWlmICggbktleXMgPT09IDAgKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMgKTsKCQkJCXZhbGlkID0gZmFsc2U7CgoJCQl9CgoJCQl2YXIgcHJldlRpbWUgPSBudWxsOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBuS2V5czsgaSArKyApIHsKCgkJCQl2YXIgY3VyclRpbWUgPSB0aW1lc1sgaSBdOwoKCQkJCWlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHsKCgkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRpbWUgaXMgbm90IGEgdmFsaWQgbnVtYmVyLicsIHRoaXMsIGksIGN1cnJUaW1lICk7CgkJCQkJdmFsaWQgPSBmYWxzZTsKCQkJCQlicmVhazsKCgkJCQl9CgoJCQkJaWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkgewoKCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogT3V0IG9mIG9yZGVyIGtleXMuJywgdGhpcywgaSwgY3VyclRpbWUsIHByZXZUaW1lICk7CgkJCQkJdmFsaWQgPSBmYWxzZTsKCQkJCQlicmVhazsKCgkJCQl9CgoJCQkJcHJldlRpbWUgPSBjdXJyVGltZTsKCgkJCX0KCgkJCWlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJaWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIHZhbHVlcyApICkgewoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCQkJdmFyIHZhbHVlID0gdmFsdWVzWyBpIF07CgoJCQkJCQlpZiAoIGlzTmFOKCB2YWx1ZSApICkgewoKCQkJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTsKCQkJCQkJCXZhbGlkID0gZmFsc2U7CgkJCQkJCQlicmVhazsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB2YWxpZDsKCgkJfSwKCgkJLy8gcmVtb3ZlcyBlcXVpdmFsZW50IHNlcXVlbnRpYWwga2V5cyBhcyBjb21tb24gaW4gbW9ycGggdGFyZ2V0IHNlcXVlbmNlcwoJCS8vICgwLDAsMCwwLDEsMSwxLDAsMCwwLDAsMCwwLDApIC0tPiAoMCwwLDEsMSwwLDApCgkJb3B0aW1pemU6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciB0aW1lcyA9IHRoaXMudGltZXMsCgkJCQl2YWx1ZXMgPSB0aGlzLnZhbHVlcywKCQkJCXN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksCgoJCQkJc21vb3RoSW50ZXJwb2xhdGlvbiA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvbigpID09PSBJbnRlcnBvbGF0ZVNtb290aCwKCgkJCQl3cml0ZUluZGV4ID0gMSwKCQkJCWxhc3RJbmRleCA9IHRpbWVzLmxlbmd0aCAtIDE7CgoJCQlmb3IgKCB2YXIgaSA9IDE7IGkgPCBsYXN0SW5kZXg7ICsrIGkgKSB7CgoJCQkJdmFyIGtlZXAgPSBmYWxzZTsKCgkJCQl2YXIgdGltZSA9IHRpbWVzWyBpIF07CgkJCQl2YXIgdGltZU5leHQgPSB0aW1lc1sgaSArIDEgXTsKCgkJCQkvLyByZW1vdmUgYWRqYWNlbnQga2V5ZnJhbWVzIHNjaGVkdWxlZCBhdCB0aGUgc2FtZSB0aW1lCgoJCQkJaWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZVsgMCBdICkgKSB7CgoJCQkJCWlmICggISBzbW9vdGhJbnRlcnBvbGF0aW9uICkgewoKCQkJCQkJLy8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9ycwoKCQkJCQkJdmFyIG9mZnNldCA9IGkgKiBzdHJpZGUsCgkJCQkJCQlvZmZzZXRQID0gb2Zmc2V0IC0gc3RyaWRlLAoJCQkJCQkJb2Zmc2V0TiA9IG9mZnNldCArIHN0cmlkZTsKCgkJCQkJCWZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkgewoKCQkJCQkJCXZhciB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdOwoKCQkJCQkJCWlmICggdmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0UCArIGogXSB8fAoJCQkJCQkJCXZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldE4gKyBqIF0gKSB7CgoJCQkJCQkJCWtlZXAgPSB0cnVlOwoJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWtlZXAgPSB0cnVlOwoKCQkJCQl9CgoJCQkJfQoKCQkJCS8vIGluLXBsYWNlIGNvbXBhY3Rpb24KCgkJCQlpZiAoIGtlZXAgKSB7CgoJCQkJCWlmICggaSAhPT0gd3JpdGVJbmRleCApIHsKCgkJCQkJCXRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgaSBdOwoKCQkJCQkJdmFyIHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLAoJCQkJCQkJd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlOwoKCQkJCQkJZm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7CgoJCQkJCQkJdmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQkrKyB3cml0ZUluZGV4OwoKCQkJCX0KCgkJCX0KCgkJCS8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpCgoJCQlpZiAoIGxhc3RJbmRleCA+IDAgKSB7CgoJCQkJdGltZXNbIHdyaXRlSW5kZXggXSA9IHRpbWVzWyBsYXN0SW5kZXggXTsKCgkJCQlmb3IgKCB2YXIgcmVhZE9mZnNldCA9IGxhc3RJbmRleCAqIHN0cmlkZSwgd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlLCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkgewoKCQkJCQl2YWx1ZXNbIHdyaXRlT2Zmc2V0ICsgaiBdID0gdmFsdWVzWyByZWFkT2Zmc2V0ICsgaiBdOwoKCQkJCX0KCgkJCQkrKyB3cml0ZUluZGV4OwoKCQkJfQoKCQkJaWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7CgoJCQkJdGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRpbWVzLCAwLCB3cml0ZUluZGV4ICk7CgkJCQl0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHZhbHVlcywgMCwgd3JpdGVJbmRleCAqIHN0cmlkZSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aGlzLnRpbWVzLCAwICk7CgkJCXZhciB2YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aGlzLnZhbHVlcywgMCApOwoKCQkJdmFyIFR5cGVkS2V5ZnJhbWVUcmFjayA9IHRoaXMuY29uc3RydWN0b3I7CgkJCXZhciB0cmFjayA9IG5ldyBUeXBlZEtleWZyYW1lVHJhY2soIHRoaXMubmFtZSwgdGltZXMsIHZhbHVlcyApOwoKCQkJLy8gSW50ZXJwb2xhbnQgYXJndW1lbnQgdG8gY29uc3RydWN0b3IgaXMgbm90IHNhdmVkLCBzbyBjb3B5IHRoZSBmYWN0b3J5IG1ldGhvZCBkaXJlY3RseS4KCQkJdHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSB0aGlzLmNyZWF0ZUludGVycG9sYW50OwoKCQkJcmV0dXJuIHRyYWNrOwoKCQl9CgoJfSApOwoKCS8qKgoJICoKCSAqIEEgVHJhY2sgb2YgQm9vbGVhbiBrZXlmcmFtZSB2YWx1ZXMuCgkgKgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqIEBhdXRob3IgdHNjaHcKCSAqLwoKCWZ1bmN0aW9uIEJvb2xlYW5LZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzICkgewoKCQlLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKTsKCgl9CgoJQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQm9vbGVhbktleWZyYW1lVHJhY2ssCgoJCVZhbHVlVHlwZU5hbWU6ICdib29sJywKCQlWYWx1ZUJ1ZmZlclR5cGU6IEFycmF5LAoKCQlEZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVEaXNjcmV0ZSwKCgkJSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsCgkJSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWQKCgkJLy8gTm90ZTogQWN0dWFsbHkgdGhpcyB0cmFjayBjb3VsZCBoYXZlIGEgb3B0aW1pemVkIC8gY29tcHJlc3NlZAoJCS8vIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIHZhbHVlIGFuZCBhIGN1c3RvbSBpbnRlcnBvbGFudCB0aGF0CgkJLy8gY29tcHV0ZXMgImZpcnN0VmFsdWUgXiBpc09kZCggaW5kZXggKSIuCgoJfSApOwoKCS8qKgoJICoKCSAqIEEgVHJhY2sgb2Yga2V5ZnJhbWUgdmFsdWVzIHRoYXQgcmVwcmVzZW50IGNvbG9yLgoJICoKCSAqCgkgKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvLwoJICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBDb2xvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7CgoJCUtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApOwoKCX0KCglDb2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQ29sb3JLZXlmcmFtZVRyYWNrLAoKCQlWYWx1ZVR5cGVOYW1lOiAnY29sb3InCgoJCS8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWQKCgkJLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkCgoJCS8vIE5vdGU6IFZlcnkgYmFzaWMgaW1wbGVtZW50YXRpb24gYW5kIG5vdGhpbmcgc3BlY2lhbCB5ZXQuCgkJLy8gSG93ZXZlciwgdGhpcyBpcyB0aGUgcGxhY2UgZm9yIGNvbG9yIHNwYWNlIHBhcmFtZXRlcml6YXRpb24uCgoJfSApOwoKCS8qKgoJICoKCSAqIEEgVHJhY2sgb2YgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuCgkgKgoJICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby8KCSAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzLwoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gTnVtYmVyS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHsKCgkJS2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7CgoJfQoKCU51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogTnVtYmVyS2V5ZnJhbWVUcmFjaywKCgkJVmFsdWVUeXBlTmFtZTogJ251bWJlcicKCgkJLy8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZAoKCQkvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWQKCgl9ICk7CgoJLyoqCgkgKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC4KCSAqCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7CgoJCUludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTsKCgl9CgoJUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVycG9sYW50LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsCgoJCWludGVycG9sYXRlXzogZnVuY3Rpb24gKCBpMSwgdDAsIHQsIHQxICkgewoKCQkJdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLAoJCQkJdmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsCgkJCQlzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSwKCgkJCQlvZmZzZXQgPSBpMSAqIHN0cmlkZSwKCgkJCQlhbHBoYSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKTsKCgkJCWZvciAoIHZhciBlbmQgPSBvZmZzZXQgKyBzdHJpZGU7IG9mZnNldCAhPT0gZW5kOyBvZmZzZXQgKz0gNCApIHsKCgkJCQlRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7CgoJCQl9CgoJCQlyZXR1cm4gcmVzdWx0OwoKCQl9CgoJfSApOwoKCS8qKgoJICoKCSAqIEEgVHJhY2sgb2YgcXVhdGVybmlvbiBrZXlmcmFtZSB2YWx1ZXMuCgkgKgoJICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby8KCSAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzLwoJICogQGF1dGhvciB0c2NodwoJICovCgoJZnVuY3Rpb24gUXVhdGVybmlvbktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7CgoJCUtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApOwoKCX0KCglRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywKCgkJVmFsdWVUeXBlTmFtZTogJ3F1YXRlcm5pb24nLAoKCQkvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkCgoJCURlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhciwKCgkJSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiBmdW5jdGlvbiAoIHJlc3VsdCApIHsKCgkJCXJldHVybiBuZXcgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7CgoJCX0sCgoJCUludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkIC8vIG5vdCB5ZXQgaW1wbGVtZW50ZWQKCgl9ICk7CgoJLyoqCgkgKgoJICogQSBUcmFjayB0aGF0IGludGVycG9sYXRlcyBTdHJpbmdzCgkgKgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqIEBhdXRob3IgdHNjaHcKCSAqLwoKCWZ1bmN0aW9uIFN0cmluZ0tleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7CgoJCUtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApOwoKCX0KCglTdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFN0cmluZ0tleWZyYW1lVHJhY2ssCgoJCVZhbHVlVHlwZU5hbWU6ICdzdHJpbmcnLAoJCVZhbHVlQnVmZmVyVHlwZTogQXJyYXksCgoJCURlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZURpc2NyZXRlLAoKCQlJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IHVuZGVmaW5lZCwKCgkJSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWQKCgl9ICk7CgoJLyoqCgkgKgoJICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuCgkgKgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqIEBhdXRob3IgdHNjaHcKCSAqLwoKCWZ1bmN0aW9uIFZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7CgoJCUtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApOwoKCX0KCglWZWN0b3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IFZlY3RvcktleWZyYW1lVHJhY2ssCgoJCVZhbHVlVHlwZU5hbWU6ICd2ZWN0b3InCgoJCS8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWQKCgkJLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkCgoJfSApOwoKCS8qKgoJICoKCSAqIFJldXNhYmxlIHNldCBvZiBUcmFja3MgdGhhdCByZXByZXNlbnQgYW4gYW5pbWF0aW9uLgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqLwoKCWZ1bmN0aW9uIEFuaW1hdGlvbkNsaXAoIG5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKSB7CgoJCXRoaXMubmFtZSA9IG5hbWU7CgkJdGhpcy50cmFja3MgPSB0cmFja3M7CgkJdGhpcy5kdXJhdGlvbiA9ICggZHVyYXRpb24gIT09IHVuZGVmaW5lZCApID8gZHVyYXRpb24gOiAtIDE7CgoJCXRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpOwoKCQkvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzCgkJaWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHsKCgkJCXRoaXMucmVzZXREdXJhdGlvbigpOwoKCQl9CgoJfQoKCWZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIHR5cGVOYW1lICkgewoKCQlzd2l0Y2ggKCB0eXBlTmFtZS50b0xvd2VyQ2FzZSgpICkgewoKCQkJY2FzZSAnc2NhbGFyJzoKCQkJY2FzZSAnZG91YmxlJzoKCQkJY2FzZSAnZmxvYXQnOgoJCQljYXNlICdudW1iZXInOgoJCQljYXNlICdpbnRlZ2VyJzoKCgkJCQlyZXR1cm4gTnVtYmVyS2V5ZnJhbWVUcmFjazsKCgkJCWNhc2UgJ3ZlY3Rvcic6CgkJCWNhc2UgJ3ZlY3RvcjInOgoJCQljYXNlICd2ZWN0b3IzJzoKCQkJY2FzZSAndmVjdG9yNCc6CgoJCQkJcmV0dXJuIFZlY3RvcktleWZyYW1lVHJhY2s7CgoJCQljYXNlICdjb2xvcic6CgoJCQkJcmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjazsKCgkJCWNhc2UgJ3F1YXRlcm5pb24nOgoKCQkJCXJldHVybiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjazsKCgkJCWNhc2UgJ2Jvb2wnOgoJCQljYXNlICdib29sZWFuJzoKCgkJCQlyZXR1cm4gQm9vbGVhbktleWZyYW1lVHJhY2s7CgoJCQljYXNlICdzdHJpbmcnOgoKCQkJCXJldHVybiBTdHJpbmdLZXlmcmFtZVRyYWNrOwoKCQl9CgoJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTsKCgl9CgoJZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uICkgewoKCQlpZiAoIGpzb24udHlwZSA9PT0gdW5kZWZpbmVkICkgewoKCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogdHJhY2sgdHlwZSB1bmRlZmluZWQsIGNhbiBub3QgcGFyc2UnICk7CgoJCX0KCgkJdmFyIHRyYWNrVHlwZSA9IGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIGpzb24udHlwZSApOwoKCQlpZiAoIGpzb24udGltZXMgPT09IHVuZGVmaW5lZCApIHsKCgkJCXZhciB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTsKCgkJCUFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBqc29uLmtleXMsIHRpbWVzLCB2YWx1ZXMsICd2YWx1ZScgKTsKCgkJCWpzb24udGltZXMgPSB0aW1lczsKCQkJanNvbi52YWx1ZXMgPSB2YWx1ZXM7CgoJCX0KCgkJLy8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgcGFyc2UgbWV0aG9kCgkJaWYgKCB0cmFja1R5cGUucGFyc2UgIT09IHVuZGVmaW5lZCApIHsKCgkJCXJldHVybiB0cmFja1R5cGUucGFyc2UoIGpzb24gKTsKCgkJfSBlbHNlIHsKCgkJCS8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZQoJCQlyZXR1cm4gbmV3IHRyYWNrVHlwZSgganNvbi5uYW1lLCBqc29uLnRpbWVzLCBqc29uLnZhbHVlcywganNvbi5pbnRlcnBvbGF0aW9uICk7CgoJCX0KCgl9CgoJT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQ2xpcCwgewoKCQlwYXJzZTogZnVuY3Rpb24gKCBqc29uICkgewoKCQkJdmFyIHRyYWNrcyA9IFtdLAoJCQkJanNvblRyYWNrcyA9IGpzb24udHJhY2tzLAoJCQkJZnJhbWVUaW1lID0gMS4wIC8gKCBqc29uLmZwcyB8fCAxLjAgKTsKCgkJCWZvciAoIHZhciBpID0gMCwgbiA9IGpzb25UcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCXRyYWNrcy5wdXNoKCBwYXJzZUtleWZyYW1lVHJhY2soIGpzb25UcmFja3NbIGkgXSApLnNjYWxlKCBmcmFtZVRpbWUgKSApOwoKCQkJfQoKCQkJcmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBqc29uLm5hbWUsIGpzb24uZHVyYXRpb24sIHRyYWNrcyApOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggY2xpcCApIHsKCgkJCXZhciB0cmFja3MgPSBbXSwKCQkJCWNsaXBUcmFja3MgPSBjbGlwLnRyYWNrczsKCgkJCXZhciBqc29uID0gewoKCQkJCSduYW1lJzogY2xpcC5uYW1lLAoJCQkJJ2R1cmF0aW9uJzogY2xpcC5kdXJhdGlvbiwKCQkJCSd0cmFja3MnOiB0cmFja3MsCgkJCQkndXVpZCc6IGNsaXAudXVpZAoKCQkJfTsKCgkJCWZvciAoIHZhciBpID0gMCwgbiA9IGNsaXBUcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCXRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTsKCgkJCX0KCgkJCXJldHVybiBqc29uOwoKCQl9LAoKCQlDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZTogZnVuY3Rpb24gKCBuYW1lLCBtb3JwaFRhcmdldFNlcXVlbmNlLCBmcHMsIG5vTG9vcCApIHsKCgkJCXZhciBudW1Nb3JwaFRhcmdldHMgPSBtb3JwaFRhcmdldFNlcXVlbmNlLmxlbmd0aDsKCQkJdmFyIHRyYWNrcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbnVtTW9ycGhUYXJnZXRzOyBpICsrICkgewoKCQkJCXZhciB0aW1lcyA9IFtdOwoJCQkJdmFyIHZhbHVlcyA9IFtdOwoKCQkJCXRpbWVzLnB1c2goCgkJCQkJKCBpICsgbnVtTW9ycGhUYXJnZXRzIC0gMSApICUgbnVtTW9ycGhUYXJnZXRzLAoJCQkJCWksCgkJCQkJKCBpICsgMSApICUgbnVtTW9ycGhUYXJnZXRzICk7CgoJCQkJdmFsdWVzLnB1c2goIDAsIDEsIDAgKTsKCgkJCQl2YXIgb3JkZXIgPSBBbmltYXRpb25VdGlscy5nZXRLZXlmcmFtZU9yZGVyKCB0aW1lcyApOwoJCQkJdGltZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSggdGltZXMsIDEsIG9yZGVyICk7CgkJCQl2YWx1ZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSggdmFsdWVzLCAxLCBvcmRlciApOwoKCQkJCS8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZQoJCQkJLy8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuCgkJCQlpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7CgoJCQkJCXRpbWVzLnB1c2goIG51bU1vcnBoVGFyZ2V0cyApOwoJCQkJCXZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApOwoKCQkJCX0KCgkJCQl0cmFja3MucHVzaCgKCQkJCQluZXcgTnVtYmVyS2V5ZnJhbWVUcmFjaygKCQkJCQkJJy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbJyArIG1vcnBoVGFyZ2V0U2VxdWVuY2VbIGkgXS5uYW1lICsgJ10nLAoJCQkJCQl0aW1lcywgdmFsdWVzCgkJCQkJKS5zY2FsZSggMS4wIC8gZnBzICkgKTsKCgkJCX0KCgkJCXJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggbmFtZSwgLSAxLCB0cmFja3MgKTsKCgkJfSwKCgkJZmluZEJ5TmFtZTogZnVuY3Rpb24gKCBvYmplY3RPckNsaXBBcnJheSwgbmFtZSApIHsKCgkJCXZhciBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTsKCgkJCWlmICggISBBcnJheS5pc0FycmF5KCBvYmplY3RPckNsaXBBcnJheSApICkgewoKCQkJCXZhciBvID0gb2JqZWN0T3JDbGlwQXJyYXk7CgkJCQljbGlwQXJyYXkgPSBvLmdlb21ldHJ5ICYmIG8uZ2VvbWV0cnkuYW5pbWF0aW9ucyB8fCBvLmFuaW1hdGlvbnM7CgoJCQl9CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjbGlwQXJyYXkubGVuZ3RoOyBpICsrICkgewoKCQkJCWlmICggY2xpcEFycmF5WyBpIF0ubmFtZSA9PT0gbmFtZSApIHsKCgkJCQkJcmV0dXJuIGNsaXBBcnJheVsgaSBdOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiBudWxsOwoKCQl9LAoKCQlDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlczogZnVuY3Rpb24gKCBtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wICkgewoKCQkJdmFyIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307CgoJCQkvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzCgkJCS8vIHN1Y2ggZmxhbWluZ29fZmx5QV8wMDMsIGZsYW1pbmdvX3J1bjFfMDAzLCBjcmRlYXRoMDA1OQoJCQl2YXIgcGF0dGVybiA9IC9eKFtcdy1dKj8pKFtcZF0rKSQvOwoKCQkJLy8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkCgkJCS8vIHBhdHRlcm5zIGxpa2UgV2Fsa18wMDEsIFdhbGtfMDAyLCBSdW5fMDAxLCBSdW5fMDAyCgkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJdmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07CgkJCQl2YXIgcGFydHMgPSBtb3JwaFRhcmdldC5uYW1lLm1hdGNoKCBwYXR0ZXJuICk7CgoJCQkJaWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkgewoKCQkJCQl2YXIgbmFtZSA9IHBhcnRzWyAxIF07CgoJCQkJCXZhciBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdOwoJCQkJCWlmICggISBhbmltYXRpb25Nb3JwaFRhcmdldHMgKSB7CgoJCQkJCQlhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdID0gYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gW107CgoJCQkJCX0KCgkJCQkJYW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2goIG1vcnBoVGFyZ2V0ICk7CgoJCQkJfQoKCQkJfQoKCQkJdmFyIGNsaXBzID0gW107CgoJCQlmb3IgKCB2YXIgbmFtZSBpbiBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyApIHsKCgkJCQljbGlwcy5wdXNoKCBBbmltYXRpb25DbGlwLkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlKCBuYW1lLCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdLCBmcHMsIG5vTG9vcCApICk7CgoJCQl9CgoJCQlyZXR1cm4gY2xpcHM7CgoJCX0sCgoJCS8vIHBhcnNlIHRoZSBhbmltYXRpb24uaGllcmFyY2h5IGZvcm1hdAoJCXBhcnNlQW5pbWF0aW9uOiBmdW5jdGlvbiAoIGFuaW1hdGlvbiwgYm9uZXMgKSB7CgoJCQlpZiAoICEgYW5pbWF0aW9uICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25DbGlwOiBObyBhbmltYXRpb24gaW4gSlNPTkxvYWRlciBkYXRhLicgKTsKCQkJCXJldHVybiBudWxsOwoKCQkJfQoKCQkJdmFyIGFkZE5vbmVtcHR5VHJhY2sgPSBmdW5jdGlvbiAoIHRyYWNrVHlwZSwgdHJhY2tOYW1lLCBhbmltYXRpb25LZXlzLCBwcm9wZXJ0eU5hbWUsIGRlc3RUcmFja3MgKSB7CgoJCQkJLy8gb25seSByZXR1cm4gdHJhY2sgaWYgdGhlcmUgYXJlIGFjdHVhbGx5IGtleXMuCgkJCQlpZiAoIGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwICkgewoKCQkJCQl2YXIgdGltZXMgPSBbXTsKCQkJCQl2YXIgdmFsdWVzID0gW107CgoJCQkJCUFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBhbmltYXRpb25LZXlzLCB0aW1lcywgdmFsdWVzLCBwcm9wZXJ0eU5hbWUgKTsKCgkJCQkJLy8gZW1wdHkga2V5cyBhcmUgZmlsdGVyZWQgb3V0LCBzbyBjaGVjayBhZ2FpbgoJCQkJCWlmICggdGltZXMubGVuZ3RoICE9PSAwICkgewoKCQkJCQkJZGVzdFRyYWNrcy5wdXNoKCBuZXcgdHJhY2tUeXBlKCB0cmFja05hbWUsIHRpbWVzLCB2YWx1ZXMgKSApOwoKCQkJCQl9CgoJCQkJfQoKCQkJfTsKCgkJCXZhciB0cmFja3MgPSBbXTsKCgkJCXZhciBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0JzsKCQkJLy8gYXV0b21hdGljIGxlbmd0aCBkZXRlcm1pbmF0aW9uIGluIEFuaW1hdGlvbkNsaXAuCgkJCXZhciBkdXJhdGlvbiA9IGFuaW1hdGlvbi5sZW5ndGggfHwgLSAxOwoJCQl2YXIgZnBzID0gYW5pbWF0aW9uLmZwcyB8fCAzMDsKCgkJCXZhciBoaWVyYXJjaHlUcmFja3MgPSBhbmltYXRpb24uaGllcmFyY2h5IHx8IFtdOwoKCQkJZm9yICggdmFyIGggPSAwOyBoIDwgaGllcmFyY2h5VHJhY2tzLmxlbmd0aDsgaCArKyApIHsKCgkJCQl2YXIgYW5pbWF0aW9uS2V5cyA9IGhpZXJhcmNoeVRyYWNrc1sgaCBdLmtleXM7CgoJCQkJLy8gc2tpcCBlbXB0eSB0cmFja3MKCQkJCWlmICggISBhbmltYXRpb25LZXlzIHx8IGFuaW1hdGlvbktleXMubGVuZ3RoID09PSAwICkgeyBjb250aW51ZTsgfQoKCQkJCS8vIHByb2Nlc3MgbW9ycGggdGFyZ2V0cwoJCQkJaWYgKCBhbmltYXRpb25LZXlzWyAwIF0ubW9ycGhUYXJnZXRzICkgewoKCQkJCQkvLyBmaWd1cmUgb3V0IGFsbCBtb3JwaCB0YXJnZXRzIHVzZWQgaW4gdGhpcyB0cmFjawoJCQkJCXZhciBtb3JwaFRhcmdldE5hbWVzID0ge307CgoJCQkJCWZvciAoIHZhciBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkgewoKCQkJCQkJaWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkgewoKCQkJCQkJCWZvciAoIHZhciBtID0gMDsgbSA8IGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMubGVuZ3RoOyBtICsrICkgewoKCQkJCQkJCQltb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJLy8gY3JlYXRlIGEgdHJhY2sgZm9yIGVhY2ggbW9ycGggdGFyZ2V0IHdpdGggYWxsIHplcm8KCQkJCQkvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaAoJCQkJCS8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC4KCQkJCQlmb3IgKCB2YXIgbW9ycGhUYXJnZXROYW1lIGluIG1vcnBoVGFyZ2V0TmFtZXMgKSB7CgoJCQkJCQl2YXIgdGltZXMgPSBbXTsKCQkJCQkJdmFyIHZhbHVlcyA9IFtdOwoKCQkJCQkJZm9yICggdmFyIG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgKysgbSApIHsKCgkJCQkJCQl2YXIgYW5pbWF0aW9uS2V5ID0gYW5pbWF0aW9uS2V5c1sgayBdOwoKCQkJCQkJCXRpbWVzLnB1c2goIGFuaW1hdGlvbktleS50aW1lICk7CgkJCQkJCQl2YWx1ZXMucHVzaCggKCBhbmltYXRpb25LZXkubW9ycGhUYXJnZXQgPT09IG1vcnBoVGFyZ2V0TmFtZSApID8gMSA6IDAgKTsKCgkJCQkJCX0KCgkJCQkJCXRyYWNrcy5wdXNoKCBuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayggJy5tb3JwaFRhcmdldEluZmx1ZW5jZVsnICsgbW9ycGhUYXJnZXROYW1lICsgJ10nLCB0aW1lcywgdmFsdWVzICkgKTsKCgkJCQkJfQoKCQkJCQlkdXJhdGlvbiA9IG1vcnBoVGFyZ2V0TmFtZXMubGVuZ3RoICogKCBmcHMgfHwgMS4wICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gLi4uYXNzdW1lIHNrZWxldGFsIGFuaW1hdGlvbgoKCQkJCQl2YXIgYm9uZU5hbWUgPSAnLmJvbmVzWycgKyBib25lc1sgaCBdLm5hbWUgKyAnXSc7CgoJCQkJCWFkZE5vbmVtcHR5VHJhY2soCgkJCQkJCVZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5wb3NpdGlvbicsCgkJCQkJCWFuaW1hdGlvbktleXMsICdwb3MnLCB0cmFja3MgKTsKCgkJCQkJYWRkTm9uZW1wdHlUcmFjaygKCQkJCQkJUXVhdGVybmlvbktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5xdWF0ZXJuaW9uJywKCQkJCQkJYW5pbWF0aW9uS2V5cywgJ3JvdCcsIHRyYWNrcyApOwoKCQkJCQlhZGROb25lbXB0eVRyYWNrKAoJCQkJCQlWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcuc2NhbGUnLAoJCQkJCQlhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzICk7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCB0cmFja3MubGVuZ3RoID09PSAwICkgewoKCQkJCXJldHVybiBudWxsOwoKCQkJfQoKCQkJdmFyIGNsaXAgPSBuZXcgQW5pbWF0aW9uQ2xpcCggY2xpcE5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKTsKCgkJCXJldHVybiBjbGlwOwoKCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAucHJvdG90eXBlLCB7CgoJCXJlc2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHsKCgkJCXZhciB0cmFja3MgPSB0aGlzLnRyYWNrcywgZHVyYXRpb24gPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwLCBuID0gdHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQl2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdOwoKCQkJCWR1cmF0aW9uID0gTWF0aC5tYXgoIGR1cmF0aW9uLCB0cmFjay50aW1lc1sgdHJhY2sudGltZXMubGVuZ3RoIC0gMSBdICk7CgoJCQl9CgoJCQl0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdHJpbTogZnVuY3Rpb24gKCkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkgewoKCQkJCXRoaXMudHJhY2tzWyBpIF0udHJpbSggMCwgdGhpcy5kdXJhdGlvbiApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdmFsaWQgPSB0cnVlOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkgewoKCQkJCXZhbGlkID0gdmFsaWQgJiYgdGhpcy50cmFja3NbIGkgXS52YWxpZGF0ZSgpOwoKCQkJfQoKCQkJcmV0dXJuIHZhbGlkOwoKCQl9LAoKCQlvcHRpbWl6ZTogZnVuY3Rpb24gKCkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkgewoKCQkJCXRoaXMudHJhY2tzWyBpIF0ub3B0aW1pemUoKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHRyYWNrcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkgewoKCQkJCXRyYWNrcy5wdXNoKCB0aGlzLnRyYWNrc1sgaSBdLmNsb25lKCkgKTsKCgkJCX0KCgkJCXJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggdGhpcy5uYW1lLCB0aGlzLmR1cmF0aW9uLCB0cmFja3MgKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgQ2FjaGUgPSB7CgoJCWVuYWJsZWQ6IGZhbHNlLAoKCQlmaWxlczoge30sCgoJCWFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7CgoJCQlpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQkJLy8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdBZGRpbmcga2V5OicsIGtleSApOwoKCQkJdGhpcy5maWxlc1sga2V5IF0gPSBmaWxlOwoKCQl9LAoKCQlnZXQ6IGZ1bmN0aW9uICgga2V5ICkgewoKCQkJaWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgeyByZXR1cm47IH0KCgkJCS8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQ2hlY2tpbmcga2V5OicsIGtleSApOwoKCQkJcmV0dXJuIHRoaXMuZmlsZXNbIGtleSBdOwoKCQl9LAoKCQlyZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkgewoKCQkJZGVsZXRlIHRoaXMuZmlsZXNbIGtleSBdOwoKCQl9LAoKCQljbGVhcjogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5maWxlcyA9IHt9OwoKCQl9CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBMb2FkaW5nTWFuYWdlciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQl2YXIgaXNMb2FkaW5nID0gZmFsc2U7CgkJdmFyIGl0ZW1zTG9hZGVkID0gMDsKCQl2YXIgaXRlbXNUb3RhbCA9IDA7CgkJdmFyIHVybE1vZGlmaWVyID0gdW5kZWZpbmVkOwoJCXZhciBoYW5kbGVycyA9IFtdOwoKCQkvLyBSZWZlciB0byAjNTY4OSBmb3IgdGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3Qgc2V0IC5vblN0YXJ0CgkJLy8gaW4gdGhlIGNvbnN0cnVjdG9yCgoJCXRoaXMub25TdGFydCA9IHVuZGVmaW5lZDsKCQl0aGlzLm9uTG9hZCA9IG9uTG9hZDsKCQl0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzOwoJCXRoaXMub25FcnJvciA9IG9uRXJyb3I7CgoJCXRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7CgoJCQlpdGVtc1RvdGFsICsrOwoKCQkJaWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkgewoKCQkJCWlmICggc2NvcGUub25TdGFydCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlzY29wZS5vblN0YXJ0KCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7CgoJCQkJfQoKCQkJfQoKCQkJaXNMb2FkaW5nID0gdHJ1ZTsKCgkJfTsKCgkJdGhpcy5pdGVtRW5kID0gZnVuY3Rpb24gKCB1cmwgKSB7CgoJCQlpdGVtc0xvYWRlZCArKzsKCgkJCWlmICggc2NvcGUub25Qcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTsKCgkJCX0KCgkJCWlmICggaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwgKSB7CgoJCQkJaXNMb2FkaW5nID0gZmFsc2U7CgoJCQkJaWYgKCBzY29wZS5vbkxvYWQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJc2NvcGUub25Mb2FkKCk7CgoJCQkJfQoKCQkJfQoKCQl9OwoKCQl0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkgewoKCQkJaWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJc2NvcGUub25FcnJvciggdXJsICk7CgoJCQl9CgoJCX07CgoJCXRoaXMucmVzb2x2ZVVSTCA9IGZ1bmN0aW9uICggdXJsICkgewoKCQkJaWYgKCB1cmxNb2RpZmllciApIHsKCgkJCQlyZXR1cm4gdXJsTW9kaWZpZXIoIHVybCApOwoKCQkJfQoKCQkJcmV0dXJuIHVybDsKCgkJfTsKCgkJdGhpcy5zZXRVUkxNb2RpZmllciA9IGZ1bmN0aW9uICggdHJhbnNmb3JtICkgewoKCQkJdXJsTW9kaWZpZXIgPSB0cmFuc2Zvcm07CgoJCQlyZXR1cm4gdGhpczsKCgkJfTsKCgkJdGhpcy5hZGRIYW5kbGVyID0gZnVuY3Rpb24gKCByZWdleCwgbG9hZGVyICkgewoKCQkJaGFuZGxlcnMucHVzaCggcmVnZXgsIGxvYWRlciApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX07CgoJCXRoaXMucmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uICggcmVnZXggKSB7CgoJCQl2YXIgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKCByZWdleCApOwoKCQkJaWYgKCBpbmRleCAhPT0gLSAxICkgewoKCQkJCWhhbmRsZXJzLnNwbGljZSggaW5kZXgsIDIgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9OwoKCQl0aGlzLmdldEhhbmRsZXIgPSBmdW5jdGlvbiAoIGZpbGUgKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7CgoJCQkJdmFyIHJlZ2V4ID0gaGFuZGxlcnNbIGkgXTsKCQkJCXZhciBsb2FkZXIgPSBoYW5kbGVyc1sgaSArIDEgXTsKCgkJCQlpZiAoIHJlZ2V4Lmdsb2JhbCApIHsgcmVnZXgubGFzdEluZGV4ID0gMDsgfSAvLyBzZWUgIzE3OTIwCgoJCQkJaWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7CgoJCQkJCXJldHVybiBsb2FkZXI7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIG51bGw7CgoJCX07CgoJfQoKCXZhciBEZWZhdWx0TG9hZGluZ01hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoKTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCglmdW5jdGlvbiBMb2FkZXIoIG1hbmFnZXIgKSB7CgoJCXRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyOwoKCQl0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7CgkJdGhpcy5wYXRoID0gJyc7CgkJdGhpcy5yZXNvdXJjZVBhdGggPSAnJzsKCgl9CgoJT2JqZWN0LmFzc2lnbiggTG9hZGVyLnByb3RvdHlwZSwgewoKCQlsb2FkOiBmdW5jdGlvbiAoIC8qIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICovICkge30sCgoJCXBhcnNlOiBmdW5jdGlvbiAoIC8qIGRhdGEgKi8gKSB7fSwKCgkJc2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggY3Jvc3NPcmlnaW4gKSB7CgoJCQl0aGlzLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47CgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRQYXRoOiBmdW5jdGlvbiAoIHBhdGggKSB7CgoJCQl0aGlzLnBhdGggPSBwYXRoOwoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAoIHJlc291cmNlUGF0aCApIHsKCgkJCXRoaXMucmVzb3VyY2VQYXRoID0gcmVzb3VyY2VQYXRoOwoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgbG9hZGluZyA9IHt9OwoKCWZ1bmN0aW9uIEZpbGVMb2FkZXIoIG1hbmFnZXIgKSB7CgoJCUxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJfQoKCUZpbGVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBGaWxlTG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJaWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHsgdXJsID0gJyc7IH0KCgkJCWlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB7IHVybCA9IHRoaXMucGF0aCArIHVybDsgfQoKCQkJdXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApOwoKCQkJdmFyIHNjb3BlID0gdGhpczsKCgkJCXZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApOwoKCQkJaWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7CgoJCQkJc2V0VGltZW91dCggZnVuY3Rpb24gKCkgewoKCQkJCQlpZiAoIG9uTG9hZCApIHsgb25Mb2FkKCBjYWNoZWQgKTsgfQoKCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCX0sIDAgKTsKCgkJCQlyZXR1cm4gY2FjaGVkOwoKCQkJfQoKCQkJLy8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBkdXBsaWNhdGUKCgkJCWlmICggbG9hZGluZ1sgdXJsIF0gIT09IHVuZGVmaW5lZCApIHsKCgkJCQlsb2FkaW5nWyB1cmwgXS5wdXNoKCB7CgoJCQkJCW9uTG9hZDogb25Mb2FkLAoJCQkJCW9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsCgkJCQkJb25FcnJvcjogb25FcnJvcgoKCQkJCX0gKTsKCgkJCQlyZXR1cm47CgoJCQl9CgoJCQkvLyBDaGVjayBmb3IgZGF0YTogVVJJCgkJCXZhciBkYXRhVXJpUmVnZXggPSAvXmRhdGE6KC4qPykoO2Jhc2U2NCk/LCguKikkLzsKCQkJdmFyIGRhdGFVcmlSZWdleFJlc3VsdCA9IHVybC5tYXRjaCggZGF0YVVyaVJlZ2V4ICk7CgoJCQkvLyBTYWZhcmkgY2FuIG5vdCBoYW5kbGUgRGF0YSBVUklzIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Qgc28gcHJvY2VzcyBtYW51YWxseQoJCQlpZiAoIGRhdGFVcmlSZWdleFJlc3VsdCApIHsKCgkJCQl2YXIgbWltZVR5cGUgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDEgXTsKCQkJCXZhciBpc0Jhc2U2NCA9ICEhIGRhdGFVcmlSZWdleFJlc3VsdFsgMiBdOwoJCQkJdmFyIGRhdGEgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDMgXTsKCgkJCQlkYXRhID0gZGVjb2RlVVJJQ29tcG9uZW50KCBkYXRhICk7CgoJCQkJaWYgKCBpc0Jhc2U2NCApIHsgZGF0YSA9IGF0b2IoIGRhdGEgKTsgfQoKCQkJCXRyeSB7CgoJCQkJCXZhciByZXNwb25zZTsKCQkJCQl2YXIgcmVzcG9uc2VUeXBlID0gKCB0aGlzLnJlc3BvbnNlVHlwZSB8fCAnJyApLnRvTG93ZXJDYXNlKCk7CgoJCQkJCXN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHsKCgkJCQkJCWNhc2UgJ2FycmF5YnVmZmVyJzoKCQkJCQkJY2FzZSAnYmxvYic6CgoJCQkJCQkJdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheSggZGF0YS5sZW5ndGggKTsKCgkJCQkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHsKCgkJCQkJCQkJdmlld1sgaSBdID0gZGF0YS5jaGFyQ29kZUF0KCBpICk7CgoJCQkJCQkJfQoKCQkJCQkJCWlmICggcmVzcG9uc2VUeXBlID09PSAnYmxvYicgKSB7CgoJCQkJCQkJCXJlc3BvbnNlID0gbmV3IEJsb2IoIFsgdmlldy5idWZmZXIgXSwgeyB0eXBlOiBtaW1lVHlwZSB9ICk7CgoJCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkJcmVzcG9uc2UgPSB2aWV3LmJ1ZmZlcjsKCgkJCQkJCQl9CgoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICdkb2N1bWVudCc6CgoJCQkJCQkJdmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKCQkJCQkJCXJlc3BvbnNlID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgbWltZVR5cGUgKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ2pzb24nOgoKCQkJCQkJCXJlc3BvbnNlID0gSlNPTi5wYXJzZSggZGF0YSApOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJZGVmYXVsdDogLy8gJ3RleHQnIG9yIG90aGVyCgoJCQkJCQkJcmVzcG9uc2UgPSBkYXRhOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQl9CgoJCQkJCS8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lcwoJCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHsKCgkJCQkJCWlmICggb25Mb2FkICkgeyBvbkxvYWQoIHJlc3BvbnNlICk7IH0KCgkJCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQkJCX0sIDAgKTsKCgkJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJCS8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lcwoJCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHsKCgkJCQkJCWlmICggb25FcnJvciApIHsgb25FcnJvciggZXJyb3IgKTsgfQoKCQkJCQkJc2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApOwoJCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCQl9LCAwICk7CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQkvLyBJbml0aWFsaXNlIGFycmF5IGZvciBkdXBsaWNhdGUgcmVxdWVzdHMKCgkJCQlsb2FkaW5nWyB1cmwgXSA9IFtdOwoKCQkJCWxvYWRpbmdbIHVybCBdLnB1c2goIHsKCgkJCQkJb25Mb2FkOiBvbkxvYWQsCgkJCQkJb25Qcm9ncmVzczogb25Qcm9ncmVzcywKCQkJCQlvbkVycm9yOiBvbkVycm9yCgoJCQkJfSApOwoKCQkJCXZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgoJCQkJcmVxdWVzdC5vcGVuKCAnR0VUJywgdXJsLCB0cnVlICk7CgoJCQkJcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7CgoJCQkJCXZhciByZXNwb25zZSA9IHRoaXMucmVzcG9uc2U7CgoJCQkJCXZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTsKCgkJCQkJZGVsZXRlIGxvYWRpbmdbIHVybCBdOwoKCQkJCQlpZiAoIHRoaXMuc3RhdHVzID09PSAyMDAgfHwgdGhpcy5zdGF0dXMgPT09IDAgKSB7CgoJCQkJCQkvLyBTb21lIGJyb3dzZXJzIHJldHVybiBIVFRQIFN0YXR1cyAwIHdoZW4gdXNpbmcgbm9uLWh0dHAgcHJvdG9jb2wKCQkJCQkJLy8gZS5nLiAnZmlsZTovLycgb3IgJ2RhdGE6Ly8nLiBIYW5kbGUgYXMgc3VjY2Vzcy4KCgkJCQkJCWlmICggdGhpcy5zdGF0dXMgPT09IDAgKSB7IGNvbnNvbGUud2FybiggJ1RIUkVFLkZpbGVMb2FkZXI6IEhUVFAgU3RhdHVzIDAgcmVjZWl2ZWQuJyApOyB9CgoJCQkJCQkvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlCgkJCQkJCS8vIGVycm9yIHJlc3BvbnNlIGJvZGllcyBhcyBwcm9wZXIgcmVzcG9uc2VzIHRvIHJlcXVlc3RzLgoJCQkJCQlDYWNoZS5hZGQoIHVybCwgcmVzcG9uc2UgKTsKCgkJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQkJdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07CgkJCQkJCQlpZiAoIGNhbGxiYWNrLm9uTG9hZCApIHsgY2FsbGJhY2sub25Mb2FkKCByZXNwb25zZSApOyB9CgoJCQkJCQl9CgoJCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCQl2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTsKCQkJCQkJCWlmICggY2FsbGJhY2sub25FcnJvciApIHsgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTsgfQoKCQkJCQkJfQoKCQkJCQkJc2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApOwoJCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCQl9CgoJCQkJfSwgZmFsc2UgKTsKCgkJCQlyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdwcm9ncmVzcycsIGZ1bmN0aW9uICggZXZlbnQgKSB7CgoJCQkJCXZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCXZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdOwoJCQkJCQlpZiAoIGNhbGxiYWNrLm9uUHJvZ3Jlc3MgKSB7IGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7IH0KCgkJCQkJfQoKCQkJCX0sIGZhbHNlICk7CgoJCQkJcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBmdW5jdGlvbiAoIGV2ZW50ICkgewoKCQkJCQl2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07CgoJCQkJCWRlbGV0ZSBsb2FkaW5nWyB1cmwgXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCXZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdOwoJCQkJCQlpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSB7IGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7IH0KCgkJCQkJfQoKCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7CgkJCQkJc2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTsKCgkJCQl9LCBmYWxzZSApOwoKCQkJCXJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Fib3J0JywgZnVuY3Rpb24gKCBldmVudCApIHsKCgkJCQkJdmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdOwoKCQkJCQlkZWxldGUgbG9hZGluZ1sgdXJsIF07CgoJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQl2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTsKCQkJCQkJaWYgKCBjYWxsYmFjay5vbkVycm9yICkgeyBjYWxsYmFjay5vbkVycm9yKCBldmVudCApOyB9CgoJCQkJCX0KCgkJCQkJc2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApOwoJCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQkJfSwgZmFsc2UgKTsKCgkJCQlpZiAoIHRoaXMucmVzcG9uc2VUeXBlICE9PSB1bmRlZmluZWQgKSB7IHJlcXVlc3QucmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGU7IH0KCQkJCWlmICggdGhpcy53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCApIHsgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFsczsgfQoKCQkJCWlmICggcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlICkgeyByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoIHRoaXMubWltZVR5cGUgIT09IHVuZGVmaW5lZCA/IHRoaXMubWltZVR5cGUgOiAndGV4dC9wbGFpbicgKTsgfQoKCQkJCWZvciAoIHZhciBoZWFkZXIgaW4gdGhpcy5yZXF1ZXN0SGVhZGVyICkgewoKCQkJCQlyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIGhlYWRlciwgdGhpcy5yZXF1ZXN0SGVhZGVyWyBoZWFkZXIgXSApOwoKCQkJCX0KCgkJCQlyZXF1ZXN0LnNlbmQoIG51bGwgKTsKCgkJCX0KCgkJCXNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTsKCgkJCXJldHVybiByZXF1ZXN0OwoKCQl9LAoKCQlzZXRSZXNwb25zZVR5cGU6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLnJlc3BvbnNlVHlwZSA9IHZhbHVlOwoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0V2l0aENyZWRlbnRpYWxzOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTsKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldE1pbWVUeXBlOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy5taW1lVHlwZSA9IHZhbHVlOwoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCXRoaXMucmVxdWVzdEhlYWRlciA9IHZhbHVlOwoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKi8KCglmdW5jdGlvbiBBbmltYXRpb25Mb2FkZXIoIG1hbmFnZXIgKSB7CgoJCUxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJfQoKCUFuaW1hdGlvbkxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEFuaW1hdGlvbkxvYWRlciwKCgkJbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJCXZhciBzY29wZSA9IHRoaXM7CgoJCQl2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTsKCQkJbG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTsKCQkJbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkgewoKCQkJCW9uTG9hZCggc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7CgoJCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgoJCX0sCgoJCXBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCQl2YXIgYW5pbWF0aW9ucyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7CgoJCQkJdmFyIGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTsKCgkJCQlhbmltYXRpb25zLnB1c2goIGNsaXAgKTsKCgkJCX0KCgkJCXJldHVybiBhbmltYXRpb25zOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqCgkgKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLikKCSAqCgkgKiBTdWIgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgcGFyc2UoKSBtZXRob2Qgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGxvYWQoKS4KCSAqLwoKCWZ1bmN0aW9uIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkgewoKCQlMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApOwoKCX0KCglDb21wcmVzc2VkVGV4dHVyZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IENvbXByZXNzZWRUZXh0dXJlTG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJdmFyIHNjb3BlID0gdGhpczsKCgkJCXZhciBpbWFnZXMgPSBbXTsKCgkJCXZhciB0ZXh0dXJlID0gbmV3IENvbXByZXNzZWRUZXh0dXJlKCk7CgkJCXRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7CgoJCQl2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApOwoJCQlsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7CgkJCWxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTsKCgkJCWZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBpICkgewoKCQkJCWxvYWRlci5sb2FkKCB1cmxbIGkgXSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7CgoJCQkJCXZhciB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTsKCgkJCQkJaW1hZ2VzWyBpIF0gPSB7CgkJCQkJCXdpZHRoOiB0ZXhEYXRhcy53aWR0aCwKCQkJCQkJaGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsCgkJCQkJCWZvcm1hdDogdGV4RGF0YXMuZm9ybWF0LAoJCQkJCQltaXBtYXBzOiB0ZXhEYXRhcy5taXBtYXBzCgkJCQkJfTsKCgkJCQkJbG9hZGVkICs9IDE7CgoJCQkJCWlmICggbG9hZGVkID09PSA2ICkgewoKCQkJCQkJaWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApCgkJCQkJCQl7IHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyOyB9CgoJCQkJCQl0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDsKCQkJCQkJdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJCQlpZiAoIG9uTG9hZCApIHsgb25Mb2FkKCB0ZXh0dXJlICk7IH0KCgkJCQkJfQoKCQkJCX0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTsKCgkJCX0KCgkJCWlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7CgoJCQkJdmFyIGxvYWRlZCA9IDA7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHVybC5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHsKCgkJCQkJbG9hZFRleHR1cmUoIGkgKTsKCgkJCQl9CgoJCQl9IGVsc2UgewoKCQkJCS8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZQoKCQkJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkgewoKCQkJCQl2YXIgdGV4RGF0YXMgPSBzY29wZS5wYXJzZSggYnVmZmVyLCB0cnVlICk7CgoJCQkJCWlmICggdGV4RGF0YXMuaXNDdWJlbWFwICkgewoKCQkJCQkJdmFyIGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDsKCgkJCQkJCWZvciAoIHZhciBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkgewoKCQkJCQkJCWltYWdlc1sgZiBdID0geyBtaXBtYXBzOiBbXSB9OwoKCQkJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRleERhdGFzLm1pcG1hcENvdW50OyBpICsrICkgewoKCQkJCQkJCQlpbWFnZXNbIGYgXS5taXBtYXBzLnB1c2goIHRleERhdGFzLm1pcG1hcHNbIGYgKiB0ZXhEYXRhcy5taXBtYXBDb3VudCArIGkgXSApOwoJCQkJCQkJCWltYWdlc1sgZiBdLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDsKCQkJCQkJCQlpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoOwoJCQkJCQkJCWltYWdlc1sgZiBdLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YXMud2lkdGg7CgkJCQkJCXRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0OwoJCQkJCQl0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzOwoKCQkJCQl9CgoJCQkJCWlmICggdGV4RGF0YXMubWlwbWFwQ291bnQgPT09IDEgKSB7CgoJCQkJCQl0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjsKCgkJCQkJfQoKCQkJCQl0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDsKCQkJCQl0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQkJaWYgKCBvbkxvYWQgKSB7IG9uTG9hZCggdGV4dHVyZSApOyB9CgoJCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQkJfQoKCQkJcmV0dXJuIHRleHR1cmU7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIE5pa29zIE0uIC8gaHR0cHM6Ly9naXRodWIuY29tL2ZvbzEyMy8KCSAqCgkgKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGxvYWQgZ2VuZXJpYyBiaW5hcnkgdGV4dHVyZXMgZm9ybWF0cyAocmdiZSwgaGRyLCAuLi4pCgkgKgoJICogU3ViIGNsYXNzZXMgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHBhcnNlKCkgbWV0aG9kIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBsb2FkKCkuCgkgKi8KCglmdW5jdGlvbiBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHsKCgkJTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCgl9CgoJRGF0YVRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBEYXRhVGV4dHVyZUxvYWRlciwKCgkJbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJCXZhciBzY29wZSA9IHRoaXM7CgoJCQl2YXIgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpOwoKCQkJdmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTsKCQkJbG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApOwoJCQlsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7CgkJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkgewoKCQkJCXZhciB0ZXhEYXRhID0gc2NvcGUucGFyc2UoIGJ1ZmZlciApOwoKCQkJCWlmICggISB0ZXhEYXRhICkgeyByZXR1cm47IH0KCgkJCQlpZiAoIHRleERhdGEuaW1hZ2UgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJdGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7CgoJCQkJfSBlbHNlIGlmICggdGV4RGF0YS5kYXRhICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhLndpZHRoOwoJCQkJCXRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YS5oZWlnaHQ7CgkJCQkJdGV4dHVyZS5pbWFnZS5kYXRhID0gdGV4RGF0YS5kYXRhOwoKCQkJCX0KCgkJCQl0ZXh0dXJlLndyYXBTID0gdGV4RGF0YS53cmFwUyAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7CgkJCQl0ZXh0dXJlLndyYXBUID0gdGV4RGF0YS53cmFwVCAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwVCA6IENsYW1wVG9FZGdlV3JhcHBpbmc7CgoJCQkJdGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXhEYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5tYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7CgkJCQl0ZXh0dXJlLm1pbkZpbHRlciA9IHRleERhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjsKCgkJCQl0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0ZXhEYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IHRleERhdGEuYW5pc290cm9weSA6IDE7CgoJCQkJaWYgKCB0ZXhEYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQl0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGEuZm9ybWF0OwoKCQkJCX0KCQkJCWlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXRleHR1cmUudHlwZSA9IHRleERhdGEudHlwZTsKCgkJCQl9CgoJCQkJaWYgKCB0ZXhEYXRhLm1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJdGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzOwoJCQkJCXRleHR1cmUubWluRmlsdGVyID0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOyAvLyBwcmVzdW1hYmx5Li4uCgoJCQkJfQoKCQkJCWlmICggdGV4RGF0YS5taXBtYXBDb3VudCA9PT0gMSApIHsKCgkJCQkJdGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7CgoJCQkJfQoKCQkJCXRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCWlmICggb25Mb2FkICkgeyBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTsgfQoKCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCgkJCXJldHVybiB0ZXh0dXJlOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIEltYWdlTG9hZGVyKCBtYW5hZ2VyICkgewoKCQlMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApOwoKCX0KCglJbWFnZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEltYWdlTG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJaWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHsgdXJsID0gdGhpcy5wYXRoICsgdXJsOyB9CgoJCQl1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJdmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7CgoJCQlpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTsKCgkJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7CgoJCQkJCWlmICggb25Mb2FkICkgeyBvbkxvYWQoIGNhY2hlZCApOyB9CgoJCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQkJfSwgMCApOwoKCQkJCXJldHVybiBjYWNoZWQ7CgoJCQl9CgoJCQl2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2ltZycgKTsKCgkJCWZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkgewoKCQkJCWltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7CgkJCQlpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7CgoJCQkJQ2FjaGUuYWRkKCB1cmwsIHRoaXMgKTsKCgkJCQlpZiAoIG9uTG9hZCApIHsgb25Mb2FkKCB0aGlzICk7IH0KCgkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJfQoKCQkJZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHsKCgkJCQlpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApOwoJCQkJaW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApOwoKCQkJCWlmICggb25FcnJvciApIHsgb25FcnJvciggZXZlbnQgKTsgfQoKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTsKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQl9CgoJCQlpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApOwoJCQlpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7CgoJCQlpZiAoIHVybC5zdWJzdHIoIDAsIDUgKSAhPT0gJ2RhdGE6JyApIHsKCgkJCQlpZiAoIHRoaXMuY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCApIHsgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmNyb3NzT3JpZ2luOyB9CgoJCQl9CgoJCQlzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7CgoJCQlpbWFnZS5zcmMgPSB1cmw7CgoJCQlyZXR1cm4gaW1hZ2U7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoKCWZ1bmN0aW9uIEN1YmVUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkgewoKCQlMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApOwoKCX0KCglDdWJlVGV4dHVyZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEN1YmVUZXh0dXJlTG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybHMsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJCXZhciB0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7CgoJCQl2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTsKCQkJbG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7CgkJCWxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTsKCgkJCXZhciBsb2FkZWQgPSAwOwoKCQkJZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7CgoJCQkJbG9hZGVyLmxvYWQoIHVybHNbIGkgXSwgZnVuY3Rpb24gKCBpbWFnZSApIHsKCgkJCQkJdGV4dHVyZS5pbWFnZXNbIGkgXSA9IGltYWdlOwoKCQkJCQlsb2FkZWQgKys7CgoJCQkJCWlmICggbG9hZGVkID09PSA2ICkgewoKCQkJCQkJdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJCQlpZiAoIG9uTG9hZCApIHsgb25Mb2FkKCB0ZXh0dXJlICk7IH0KCgkJCQkJfQoKCQkJCX0sIHVuZGVmaW5lZCwgb25FcnJvciApOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsrIGkgKSB7CgoJCQkJbG9hZFRleHR1cmUoIGkgKTsKCgkJCX0KCgkJCXJldHVybiB0ZXh0dXJlOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7CgoJCUxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJfQoKCVRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBUZXh0dXJlTG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJdmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpOwoKCQkJdmFyIGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7CgkJCWxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApOwoJCQlsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7CgoJCQlsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGltYWdlICkgewoKCQkJCXRleHR1cmUuaW1hZ2UgPSBpbWFnZTsKCgkJCQkvLyBKUEVHcyBjYW4ndCBoYXZlIGFuIGFscGhhIGNoYW5uZWwsIHNvIG1lbW9yeSBjYW4gYmUgc2F2ZWQgYnkgc3RvcmluZyB0aGVtIGFzIFJHQi4KCQkJCXZhciBpc0pQRUcgPSB1cmwuc2VhcmNoKCAvXC5qcGU/ZygkfFw/KS9pICkgPiAwIHx8IHVybC5zZWFyY2goIC9eZGF0YVw6aW1hZ2VcL2pwZWcvICkgPT09IDA7CgoJCQkJdGV4dHVyZS5mb3JtYXQgPSBpc0pQRUcgPyBSR0JGb3JtYXQgOiBSR0JBRm9ybWF0OwoJCQkJdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJaWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJb25Mb2FkKCB0ZXh0dXJlICk7CgoJCQkJfQoKCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQkJcmV0dXJuIHRleHR1cmU7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nCgkgKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdAoJICoKCSAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6CgkgKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0ICkKCSAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1ICkKCSAqIC5nZXRQb2ludHMoKSwgLmdldFNwYWNlZFBvaW50cygpCgkgKiAuZ2V0TGVuZ3RoKCkKCSAqIC51cGRhdGVBcmNMZW5ndGhzKCkKCSAqCgkgKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOgoJICoKCSAqIC0tIDJEIGN1cnZlcyAtLQoJICogVEhSRUUuQXJjQ3VydmUKCSAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUKCSAqIFRIUkVFLkVsbGlwc2VDdXJ2ZQoJICogVEhSRUUuTGluZUN1cnZlCgkgKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZQoJICogVEhSRUUuU3BsaW5lQ3VydmUKCSAqCgkgKiAtLSAzRCBjdXJ2ZXMgLS0KCSAqIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMKCSAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzCgkgKiBUSFJFRS5MaW5lQ3VydmUzCgkgKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMKCSAqCgkgKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLgoJICoKCSAqKi8KCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCSAqCUFic3RyYWN0IEN1cnZlIGJhc2UgY2xhc3MKCSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCglmdW5jdGlvbiBDdXJ2ZSgpIHsKCgkJdGhpcy50eXBlID0gJ0N1cnZlJzsKCgkJdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7CgoJfQoKCU9iamVjdC5hc3NpZ24oIEN1cnZlLnByb3RvdHlwZSwgewoKCQkvLyBWaXJ0dWFsIGJhc2UgY2xhc3MgbWV0aG9kIHRvIG92ZXJ3cml0ZSBhbmQgaW1wbGVtZW50IGluIHN1YmNsYXNzZXMKCQkvLwktIHQgWzAgLi4gMV0KCgkJZ2V0UG9pbnQ6IGZ1bmN0aW9uICggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTsKCQkJcmV0dXJuIG51bGw7CgoJCX0sCgoJCS8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aAoJCS8vIC0gdSBbMCAuLiAxXQoKCQlnZXRQb2ludEF0OiBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkgewoKCQkJdmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7CgkJCXJldHVybiB0aGlzLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApOwoKCQl9LAoKCQkvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50KCB0ICkKCgkJZ2V0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHsKCgkJCWlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSB7IGRpdmlzaW9ucyA9IDU7IH0KCgkJCXZhciBwb2ludHMgPSBbXTsKCgkJCWZvciAoIHZhciBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7CgoJCQkJcG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGQgLyBkaXZpc2lvbnMgKSApOwoKCQkJfQoKCQkJcmV0dXJuIHBvaW50czsKCgkJfSwKCgkJLy8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1ICkKCgkJZ2V0U3BhY2VkUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHsKCgkJCWlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSB7IGRpdmlzaW9ucyA9IDU7IH0KCgkJCXZhciBwb2ludHMgPSBbXTsKCgkJCWZvciAoIHZhciBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7CgoJCQkJcG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnRBdCggZCAvIGRpdmlzaW9ucyApICk7CgoJCQl9CgoJCQlyZXR1cm4gcG9pbnRzOwoKCQl9LAoKCQkvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aAoKCQlnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBsZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7CgkJCXJldHVybiBsZW5ndGhzWyBsZW5ndGhzLmxlbmd0aCAtIDEgXTsKCgkJfSwKCgkJLy8gR2V0IGxpc3Qgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHMKCgkJZ2V0TGVuZ3RoczogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7CgoJCQlpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgeyBkaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9uczsgfQoKCQkJaWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJgoJCQkJKCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJgoJCQkJISB0aGlzLm5lZWRzVXBkYXRlICkgewoKCQkJCXJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RoczsKCgkJCX0KCgkJCXRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTsKCgkJCXZhciBjYWNoZSA9IFtdOwoJCQl2YXIgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTsKCQkJdmFyIHAsIHN1bSA9IDA7CgoJCQljYWNoZS5wdXNoKCAwICk7CgoJCQlmb3IgKCBwID0gMTsgcCA8PSBkaXZpc2lvbnM7IHAgKysgKSB7CgoJCQkJY3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTsKCQkJCXN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTsKCQkJCWNhY2hlLnB1c2goIHN1bSApOwoJCQkJbGFzdCA9IGN1cnJlbnQ7CgoJCQl9CgoJCQl0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlOwoKCQkJcmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC4KCgkJfSwKCgkJdXBkYXRlQXJjTGVuZ3RoczogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7CgkJCXRoaXMuZ2V0TGVuZ3RocygpOwoKCQl9LAoKCQkvLyBHaXZlbiB1ICggMCAuLiAxICksIGdldCBhIHQgdG8gZmluZCBwLiBUaGlzIGdpdmVzIHlvdSBwb2ludHMgd2hpY2ggYXJlIGVxdWlkaXN0YW50CgoJCWdldFV0b1RtYXBwaW5nOiBmdW5jdGlvbiAoIHUsIGRpc3RhbmNlICkgewoKCQkJdmFyIGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTsKCgkJCXZhciBpID0gMCwgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDsKCgkJCXZhciB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldAoKCQkJaWYgKCBkaXN0YW5jZSApIHsKCgkJCQl0YXJnZXRBcmNMZW5ndGggPSBkaXN0YW5jZTsKCgkJCX0gZWxzZSB7CgoJCQkJdGFyZ2V0QXJjTGVuZ3RoID0gdSAqIGFyY0xlbmd0aHNbIGlsIC0gMSBdOwoKCQkJfQoKCQkJLy8gYmluYXJ5IHNlYXJjaCBmb3IgdGhlIGluZGV4IHdpdGggbGFyZ2VzdCB2YWx1ZSBzbWFsbGVyIHRoYW4gdGFyZ2V0IHUgZGlzdGFuY2UKCgkJCXZhciBsb3cgPSAwLCBoaWdoID0gaWwgLSAxLCBjb21wYXJpc29uOwoKCQkJd2hpbGUgKCBsb3cgPD0gaGlnaCApIHsKCgkJCQlpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHMKCgkJCQljb21wYXJpc29uID0gYXJjTGVuZ3Roc1sgaSBdIC0gdGFyZ2V0QXJjTGVuZ3RoOwoKCQkJCWlmICggY29tcGFyaXNvbiA8IDAgKSB7CgoJCQkJCWxvdyA9IGkgKyAxOwoKCQkJCX0gZWxzZSBpZiAoIGNvbXBhcmlzb24gPiAwICkgewoKCQkJCQloaWdoID0gaSAtIDE7CgoJCQkJfSBlbHNlIHsKCgkJCQkJaGlnaCA9IGk7CgkJCQkJYnJlYWs7CgoJCQkJCS8vIERPTkUKCgkJCQl9CgoJCQl9CgoJCQlpID0gaGlnaDsKCgkJCWlmICggYXJjTGVuZ3Roc1sgaSBdID09PSB0YXJnZXRBcmNMZW5ndGggKSB7CgoJCQkJcmV0dXJuIGkgLyAoIGlsIC0gMSApOwoKCQkJfQoKCQkJLy8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHMKCgkJCXZhciBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07CgkJCXZhciBsZW5ndGhBZnRlciA9IGFyY0xlbmd0aHNbIGkgKyAxIF07CgoJCQl2YXIgc2VnbWVudExlbmd0aCA9IGxlbmd0aEFmdGVyIC0gbGVuZ3RoQmVmb3JlOwoKCQkJLy8gZGV0ZXJtaW5lIHdoZXJlIHdlIGFyZSBiZXR3ZWVuIHRoZSAnYmVmb3JlJyBhbmQgJ2FmdGVyJyBwb2ludHMKCgkJCXZhciBzZWdtZW50RnJhY3Rpb24gPSAoIHRhcmdldEFyY0xlbmd0aCAtIGxlbmd0aEJlZm9yZSApIC8gc2VnbWVudExlbmd0aDsKCgkJCS8vIGFkZCB0aGF0IGZyYWN0aW9uYWwgYW1vdW50IHRvIHQKCgkJCXZhciB0ID0gKCBpICsgc2VnbWVudEZyYWN0aW9uICkgLyAoIGlsIC0gMSApOwoKCQkJcmV0dXJuIHQ7CgoJCX0sCgoJCS8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHQKCQkvLyBJbiBjYXNlIGFueSBzdWIgY3VydmUgZG9lcyBub3QgaW1wbGVtZW50IGl0cyB0YW5nZW50IGRlcml2YXRpb24sCgkJLy8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnQKCQkvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uCgoJCWdldFRhbmdlbnQ6IGZ1bmN0aW9uICggdCApIHsKCgkJCXZhciBkZWx0YSA9IDAuMDAwMTsKCQkJdmFyIHQxID0gdCAtIGRlbHRhOwoJCQl2YXIgdDIgPSB0ICsgZGVsdGE7CgoJCQkvLyBDYXBwaW5nIGluIGNhc2Ugb2YgZGFuZ2VyCgoJCQlpZiAoIHQxIDwgMCApIHsgdDEgPSAwOyB9CgkJCWlmICggdDIgPiAxICkgeyB0MiA9IDE7IH0KCgkJCXZhciBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApOwoJCQl2YXIgcHQyID0gdGhpcy5nZXRQb2ludCggdDIgKTsKCgkJCXZhciB2ZWMgPSBwdDIuY2xvbmUoKS5zdWIoIHB0MSApOwoJCQlyZXR1cm4gdmVjLm5vcm1hbGl6ZSgpOwoKCQl9LAoKCQlnZXRUYW5nZW50QXQ6IGZ1bmN0aW9uICggdSApIHsKCgkJCXZhciB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApOwoJCQlyZXR1cm4gdGhpcy5nZXRUYW5nZW50KCB0ICk7CgoJCX0sCgoJCWNvbXB1dGVGcmVuZXRGcmFtZXM6IGZ1bmN0aW9uICggc2VnbWVudHMsIGNsb3NlZCApIHsKCgkJCS8vIHNlZSBodHRwOi8vd3d3LmNzLmluZGlhbmEuZWR1L3B1Yi90ZWNocmVwb3J0cy9UUjQyNS5wZGYKCgkJCXZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpOwoKCQkJdmFyIHRhbmdlbnRzID0gW107CgkJCXZhciBub3JtYWxzID0gW107CgkJCXZhciBiaW5vcm1hbHMgPSBbXTsKCgkJCXZhciB2ZWMgPSBuZXcgVmVjdG9yMygpOwoJCQl2YXIgbWF0ID0gbmV3IE1hdHJpeDQoKTsKCgkJCXZhciBpLCB1LCB0aGV0YTsKCgkJCS8vIGNvbXB1dGUgdGhlIHRhbmdlbnQgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZQoKCQkJZm9yICggaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7CgoJCQkJdSA9IGkgLyBzZWdtZW50czsKCgkJCQl0YW5nZW50c1sgaSBdID0gdGhpcy5nZXRUYW5nZW50QXQoIHUgKTsKCQkJCXRhbmdlbnRzWyBpIF0ubm9ybWFsaXplKCk7CgoJCQl9CgoJCQkvLyBzZWxlY3QgYW4gaW5pdGlhbCBub3JtYWwgdmVjdG9yIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yLAoJCQkvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnQKCgkJCW5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7CgkJCWJpbm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTsKCQkJdmFyIG1pbiA9IE51bWJlci5NQVhfVkFMVUU7CgkJCXZhciB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTsKCQkJdmFyIHR5ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueSApOwoJCQl2YXIgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7CgoJCQlpZiAoIHR4IDw9IG1pbiApIHsKCgkJCQltaW4gPSB0eDsKCQkJCW5vcm1hbC5zZXQoIDEsIDAsIDAgKTsKCgkJCX0KCgkJCWlmICggdHkgPD0gbWluICkgewoKCQkJCW1pbiA9IHR5OwoJCQkJbm9ybWFsLnNldCggMCwgMSwgMCApOwoKCQkJfQoKCQkJaWYgKCB0eiA8PSBtaW4gKSB7CgoJCQkJbm9ybWFsLnNldCggMCwgMCwgMSApOwoKCQkJfQoKCQkJdmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsICkubm9ybWFsaXplKCk7CgoJCQlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTsKCQkJYmlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWxzWyAwIF0gKTsKCgoJCQkvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmUKCgkJCWZvciAoIGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkgewoKCQkJCW5vcm1hbHNbIGkgXSA9IG5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTsKCgkJCQliaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpOwoKCQkJCXZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIC0gMSBdLCB0YW5nZW50c1sgaSBdICk7CgoJCQkJaWYgKCB2ZWMubGVuZ3RoKCkgPiBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCQkJdmVjLm5vcm1hbGl6ZSgpOwoKCQkJCQl0aGV0YSA9IE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzCgoJCQkJCW5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB2ZWMsIHRoZXRhICkgKTsKCgkJCQl9CgoJCQkJYmlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTsKCgkJCX0KCgkJCS8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWUKCgkJCWlmICggY2xvc2VkID09PSB0cnVlICkgewoKCQkJCXRoZXRhID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggbm9ybWFsc1sgMCBdLmRvdCggbm9ybWFsc1sgc2VnbWVudHMgXSApLCAtIDEsIDEgKSApOwoJCQkJdGhldGEgLz0gc2VnbWVudHM7CgoJCQkJaWYgKCB0YW5nZW50c1sgMCBdLmRvdCggdmVjLmNyb3NzVmVjdG9ycyggbm9ybWFsc1sgMCBdLCBub3JtYWxzWyBzZWdtZW50cyBdICkgKSA+IDAgKSB7CgoJCQkJCXRoZXRhID0gLSB0aGV0YTsKCgkJCQl9CgoJCQkJZm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7CgoJCQkJCS8vIHR3aXN0IGEgbGl0dGxlLi4uCgkJCQkJbm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHRhbmdlbnRzWyBpIF0sIHRoZXRhICogaSApICk7CgkJCQkJYmlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gewoJCQkJdGFuZ2VudHM6IHRhbmdlbnRzLAoJCQkJbm9ybWFsczogbm9ybWFscywKCQkJCWJpbm9ybWFsczogYmlub3JtYWxzCgkJCX07CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGRhdGEgPSB7CgkJCQltZXRhZGF0YTogewoJCQkJCXZlcnNpb246IDQuNSwKCQkJCQl0eXBlOiAnQ3VydmUnLAoJCQkJCWdlbmVyYXRvcjogJ0N1cnZlLnRvSlNPTicKCQkJCX0KCQkJfTsKCgkJCWRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7CgkJCWRhdGEudHlwZSA9IHRoaXMudHlwZTsKCgkJCXJldHVybiBkYXRhOwoKCQl9LAoKCQlmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkgewoKCQkJdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9uczsKCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCWZ1bmN0aW9uIEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7CgoJCUN1cnZlLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7CgoJCXRoaXMuYVggPSBhWCB8fCAwOwoJCXRoaXMuYVkgPSBhWSB8fCAwOwoKCQl0aGlzLnhSYWRpdXMgPSB4UmFkaXVzIHx8IDE7CgkJdGhpcy55UmFkaXVzID0geVJhZGl1cyB8fCAxOwoKCQl0aGlzLmFTdGFydEFuZ2xlID0gYVN0YXJ0QW5nbGUgfHwgMDsKCQl0aGlzLmFFbmRBbmdsZSA9IGFFbmRBbmdsZSB8fCAyICogTWF0aC5QSTsKCgkJdGhpcy5hQ2xvY2t3aXNlID0gYUNsb2Nrd2lzZSB8fCBmYWxzZTsKCgkJdGhpcy5hUm90YXRpb24gPSBhUm90YXRpb24gfHwgMDsKCgl9CgoJRWxsaXBzZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApOwoJRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVsbGlwc2VDdXJ2ZTsKCglFbGxpcHNlQ3VydmUucHJvdG90eXBlLmlzRWxsaXBzZUN1cnZlID0gdHJ1ZTsKCglFbGxpcHNlQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHsKCgkJdmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTsKCgkJdmFyIHR3b1BpID0gTWF0aC5QSSAqIDI7CgkJdmFyIGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7CgkJdmFyIHNhbWVQb2ludHMgPSBNYXRoLmFicyggZGVsdGFBbmdsZSApIDwgTnVtYmVyLkVQU0lMT047CgoJCS8vIGVuc3VyZXMgdGhhdCBkZWx0YUFuZ2xlIGlzIDAgLi4gMiBQSQoJCXdoaWxlICggZGVsdGFBbmdsZSA8IDAgKSB7IGRlbHRhQW5nbGUgKz0gdHdvUGk7IH0KCQl3aGlsZSAoIGRlbHRhQW5nbGUgPiB0d29QaSApIHsgZGVsdGFBbmdsZSAtPSB0d29QaTsgfQoKCQlpZiAoIGRlbHRhQW5nbGUgPCBOdW1iZXIuRVBTSUxPTiApIHsKCgkJCWlmICggc2FtZVBvaW50cyApIHsKCgkJCQlkZWx0YUFuZ2xlID0gMDsKCgkJCX0gZWxzZSB7CgoJCQkJZGVsdGFBbmdsZSA9IHR3b1BpOwoKCQkJfQoKCQl9CgoJCWlmICggdGhpcy5hQ2xvY2t3aXNlID09PSB0cnVlICYmICEgc2FtZVBvaW50cyApIHsKCgkJCWlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7CgoJCQkJZGVsdGFBbmdsZSA9IC0gdHdvUGk7CgoJCQl9IGVsc2UgewoKCQkJCWRlbHRhQW5nbGUgPSBkZWx0YUFuZ2xlIC0gdHdvUGk7CgoJCQl9CgoJCX0KCgkJdmFyIGFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlOwoJCXZhciB4ID0gdGhpcy5hWCArIHRoaXMueFJhZGl1cyAqIE1hdGguY29zKCBhbmdsZSApOwoJCXZhciB5ID0gdGhpcy5hWSArIHRoaXMueVJhZGl1cyAqIE1hdGguc2luKCBhbmdsZSApOwoKCQlpZiAoIHRoaXMuYVJvdGF0aW9uICE9PSAwICkgewoKCQkJdmFyIGNvcyA9IE1hdGguY29zKCB0aGlzLmFSb3RhdGlvbiApOwoJCQl2YXIgc2luID0gTWF0aC5zaW4oIHRoaXMuYVJvdGF0aW9uICk7CgoJCQl2YXIgdHggPSB4IC0gdGhpcy5hWDsKCQkJdmFyIHR5ID0geSAtIHRoaXMuYVk7CgoJCQkvLyBSb3RhdGUgdGhlIHBvaW50IGFib3V0IHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuCgkJCXggPSB0eCAqIGNvcyAtIHR5ICogc2luICsgdGhpcy5hWDsKCQkJeSA9IHR4ICogc2luICsgdHkgKiBjb3MgKyB0aGlzLmFZOwoKCQl9CgoJCXJldHVybiBwb2ludC5zZXQoIHgsIHkgKTsKCgl9OwoKCUVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy5hWCA9IHNvdXJjZS5hWDsKCQl0aGlzLmFZID0gc291cmNlLmFZOwoKCQl0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1czsKCQl0aGlzLnlSYWRpdXMgPSBzb3VyY2UueVJhZGl1czsKCgkJdGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTsKCQl0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7CgoJCXRoaXMuYUNsb2Nrd2lzZSA9IHNvdXJjZS5hQ2xvY2t3aXNlOwoKCQl0aGlzLmFSb3RhdGlvbiA9IHNvdXJjZS5hUm90YXRpb247CgoJCXJldHVybiB0aGlzOwoKCX07CgoKCUVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLmFYID0gdGhpcy5hWDsKCQlkYXRhLmFZID0gdGhpcy5hWTsKCgkJZGF0YS54UmFkaXVzID0gdGhpcy54UmFkaXVzOwoJCWRhdGEueVJhZGl1cyA9IHRoaXMueVJhZGl1czsKCgkJZGF0YS5hU3RhcnRBbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGU7CgkJZGF0YS5hRW5kQW5nbGUgPSB0aGlzLmFFbmRBbmdsZTsKCgkJZGF0YS5hQ2xvY2t3aXNlID0gdGhpcy5hQ2xvY2t3aXNlOwoKCQlkYXRhLmFSb3RhdGlvbiA9IHRoaXMuYVJvdGF0aW9uOwoKCQlyZXR1cm4gZGF0YTsKCgl9OwoKCUVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7CgoJCXRoaXMuYVggPSBqc29uLmFYOwoJCXRoaXMuYVkgPSBqc29uLmFZOwoKCQl0aGlzLnhSYWRpdXMgPSBqc29uLnhSYWRpdXM7CgkJdGhpcy55UmFkaXVzID0ganNvbi55UmFkaXVzOwoKCQl0aGlzLmFTdGFydEFuZ2xlID0ganNvbi5hU3RhcnRBbmdsZTsKCQl0aGlzLmFFbmRBbmdsZSA9IGpzb24uYUVuZEFuZ2xlOwoKCQl0aGlzLmFDbG9ja3dpc2UgPSBqc29uLmFDbG9ja3dpc2U7CgoJCXRoaXMuYVJvdGF0aW9uID0ganNvbi5hUm90YXRpb247CgoJCXJldHVybiB0aGlzOwoKCX07CgoJZnVuY3Rpb24gQXJjQ3VydmUoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHsKCgkJRWxsaXBzZUN1cnZlLmNhbGwoIHRoaXMsIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApOwoKCQl0aGlzLnR5cGUgPSAnQXJjQ3VydmUnOwoKCX0KCglBcmNDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFbGxpcHNlQ3VydmUucHJvdG90eXBlICk7CglBcmNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcmNDdXJ2ZTsKCglBcmNDdXJ2ZS5wcm90b3R5cGUuaXNBcmNDdXJ2ZSA9IHRydWU7CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgaHR0cHM6Ly9naXRodWIuY29tL3p6ODUKCSAqCgkgKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZwoJICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuCgkgKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZgoJICoKCSAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbQoJICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNQoJICovCgoKCS8qCglCYXNlZCBvbiBhbiBvcHRpbWl6ZWQgYysrIHNvbHV0aW9uIGluCgkgLSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk0ODk3MzYvY2F0bXVsbC1yb20tY3VydmUtd2l0aC1uby1jdXNwcy1hbmQtbm8tc2VsZi1pbnRlcnNlY3Rpb25zLwoJIC0gaHR0cDovL2lkZW9uZS5jb20vTm9FYlZNCgoJVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLAoJYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsCgl3aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuCgkqLwoKCWZ1bmN0aW9uIEN1YmljUG9seSgpIHsKCgkJdmFyIGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDsKCgkJLyoKCQkgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsCgkJICogICBwKHMpID0gYzAgKyBjMSpzICsgYzIqc14yICsgYzMqc14zCgkJICogc3VjaCB0aGF0CgkJICogICBwKDApID0geDAsIHAoMSkgPSB4MQoJCSAqICBhbmQKCQkgKiAgIHAnKDApID0gdDAsIHAnKDEpID0gdDEuCgkJICovCgkJZnVuY3Rpb24gaW5pdCggeDAsIHgxLCB0MCwgdDEgKSB7CgoJCQljMCA9IHgwOwoJCQljMSA9IHQwOwoJCQljMiA9IC0gMyAqIHgwICsgMyAqIHgxIC0gMiAqIHQwIC0gdDE7CgkJCWMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTsKCgkJfQoKCQlyZXR1cm4gewoKCQkJaW5pdENhdG11bGxSb206IGZ1bmN0aW9uICggeDAsIHgxLCB4MiwgeDMsIHRlbnNpb24gKSB7CgoJCQkJaW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApOwoKCQkJfSwKCgkJCWluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHsKCgkJCQkvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdCgkJCQl2YXIgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxOwoJCQkJdmFyIHQyID0gKCB4MiAtIHgxICkgLyBkdDEgLSAoIHgzIC0geDEgKSAvICggZHQxICsgZHQyICkgKyAoIHgzIC0geDIgKSAvIGR0MjsKCgkJCQkvLyByZXNjYWxlIHRhbmdlbnRzIGZvciBwYXJhbWV0cml6YXRpb24gaW4gWzAsMV0KCQkJCXQxICo9IGR0MTsKCQkJCXQyICo9IGR0MTsKCgkJCQlpbml0KCB4MSwgeDIsIHQxLCB0MiApOwoKCQkJfSwKCgkJCWNhbGM6IGZ1bmN0aW9uICggdCApIHsKCgkJCQl2YXIgdDIgPSB0ICogdDsKCQkJCXZhciB0MyA9IHQyICogdDsKCQkJCXJldHVybiBjMCArIGMxICogdCArIGMyICogdDIgKyBjMyAqIHQzOwoKCQkJfQoKCQl9OwoKCX0KCgkvLwoKCXZhciB0bXAgPSBuZXcgVmVjdG9yMygpOwoJdmFyIHB4ID0gbmV3IEN1YmljUG9seSgpLCBweSA9IG5ldyBDdWJpY1BvbHkoKSwgcHogPSBuZXcgQ3ViaWNQb2x5KCk7CgoJZnVuY3Rpb24gQ2F0bXVsbFJvbUN1cnZlMyggcG9pbnRzLCBjbG9zZWQsIGN1cnZlVHlwZSwgdGVuc2lvbiApIHsKCgkJQ3VydmUuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7CgoJCXRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdOwoJCXRoaXMuY2xvc2VkID0gY2xvc2VkIHx8IGZhbHNlOwoJCXRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlIHx8ICdjZW50cmlwZXRhbCc7CgkJdGhpcy50ZW5zaW9uID0gdGVuc2lvbiB8fCAwLjU7CgoJfQoKCUNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7CglDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhdG11bGxSb21DdXJ2ZTM7CgoJQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTsKCglDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7CgoJCXZhciBwb2ludHMgPSB0aGlzLnBvaW50czsKCQl2YXIgbCA9IHBvaW50cy5sZW5ndGg7CgoJCXZhciBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7CgkJdmFyIGludFBvaW50ID0gTWF0aC5mbG9vciggcCApOwoJCXZhciB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7CgoJCWlmICggdGhpcy5jbG9zZWQgKSB7CgoJCQlpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7CgoJCX0gZWxzZSBpZiAoIHdlaWdodCA9PT0gMCAmJiBpbnRQb2ludCA9PT0gbCAtIDEgKSB7CgoJCQlpbnRQb2ludCA9IGwgLSAyOwoJCQl3ZWlnaHQgPSAxOwoKCQl9CgoJCXZhciBwMCwgcDEsIHAyLCBwMzsgLy8gNCBwb2ludHMKCgkJaWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCA+IDAgKSB7CgoJCQlwMCA9IHBvaW50c1sgKCBpbnRQb2ludCAtIDEgKSAlIGwgXTsKCgkJfSBlbHNlIHsKCgkJCS8vIGV4dHJhcG9sYXRlIGZpcnN0IHBvaW50CgkJCXRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIDAgXSwgcG9pbnRzWyAxIF0gKS5hZGQoIHBvaW50c1sgMCBdICk7CgkJCXAwID0gdG1wOwoKCQl9CgoJCXAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTsKCQlwMiA9IHBvaW50c1sgKCBpbnRQb2ludCArIDEgKSAlIGwgXTsKCgkJaWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkgewoKCQkJcDMgPSBwb2ludHNbICggaW50UG9pbnQgKyAyICkgJSBsIF07CgoJCX0gZWxzZSB7CgoJCQkvLyBleHRyYXBvbGF0ZSBsYXN0IHBvaW50CgkJCXRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7CgkJCXAzID0gdG1wOwoKCQl9CgoJCWlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHsKCgkJCS8vIGluaXQgQ2VudHJpcGV0YWwgLyBDaG9yZGFsIENhdG11bGwtUm9tCgkJCXZhciBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTsKCQkJdmFyIGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7CgkJCXZhciBkdDEgPSBNYXRoLnBvdyggcDEuZGlzdGFuY2VUb1NxdWFyZWQoIHAyICksIHBvdyApOwoJCQl2YXIgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTsKCgkJCS8vIHNhZmV0eSBjaGVjayBmb3IgcmVwZWF0ZWQgcG9pbnRzCgkJCWlmICggZHQxIDwgMWUtNCApIHsgZHQxID0gMS4wOyB9CgkJCWlmICggZHQwIDwgMWUtNCApIHsgZHQwID0gZHQxOyB9CgkJCWlmICggZHQyIDwgMWUtNCApIHsgZHQyID0gZHQxOyB9CgoJCQlweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTsKCQkJcHkuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCBkdDAsIGR0MSwgZHQyICk7CgkJCXB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApOwoKCQl9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkgewoKCQkJcHguaW5pdENhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIHRoaXMudGVuc2lvbiApOwoJCQlweS5pbml0Q2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgdGhpcy50ZW5zaW9uICk7CgkJCXB6LmluaXRDYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCB0aGlzLnRlbnNpb24gKTsKCgkJfQoKCQlwb2ludC5zZXQoCgkJCXB4LmNhbGMoIHdlaWdodCApLAoJCQlweS5jYWxjKCB3ZWlnaHQgKSwKCQkJcHouY2FsYyggd2VpZ2h0ICkKCQkpOwoKCQlyZXR1cm4gcG9pbnQ7CgoJfTsKCglDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLnBvaW50cyA9IFtdOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQl2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07CgoJCQl0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7CgoJCX0KCgkJdGhpcy5jbG9zZWQgPSBzb3VyY2UuY2xvc2VkOwoJCXRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTsKCQl0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7CgoJCWRhdGEucG9pbnRzID0gW107CgoJCWZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQl2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdOwoJCQlkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTsKCgkJfQoKCQlkYXRhLmNsb3NlZCA9IHRoaXMuY2xvc2VkOwoJCWRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7CgkJZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uOwoKCQlyZXR1cm4gZGF0YTsKCgl9OwoKCUNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQl0aGlzLnBvaW50cyA9IFtdOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJdmFyIHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTsKCQkJdGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTsKCgkJfQoKCQl0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkOwoJCXRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7CgkJdGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCS8qKgoJICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZwoJICoKCSAqIEJlemllciBDdXJ2ZXMgZm9ybXVsYXMgb2J0YWluZWQgZnJvbQoJICogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Cw6l6aWVyX2N1cnZlCgkgKi8KCglmdW5jdGlvbiBDYXRtdWxsUm9tKCB0LCBwMCwgcDEsIHAyLCBwMyApIHsKCgkJdmFyIHYwID0gKCBwMiAtIHAwICkgKiAwLjU7CgkJdmFyIHYxID0gKCBwMyAtIHAxICkgKiAwLjU7CgkJdmFyIHQyID0gdCAqIHQ7CgkJdmFyIHQzID0gdCAqIHQyOwoJCXJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxOwoKCX0KCgkvLwoKCWZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkgewoKCQl2YXIgayA9IDEgLSB0OwoJCXJldHVybiBrICogayAqIHA7CgoJfQoKCWZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAxKCB0LCBwICkgewoKCQlyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwOwoKCX0KCglmdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMiggdCwgcCApIHsKCgkJcmV0dXJuIHQgKiB0ICogcDsKCgl9CgoJZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKCB0LCBwMCwgcDEsIHAyICkgewoKCQlyZXR1cm4gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAwICkgKyBRdWFkcmF0aWNCZXppZXJQMSggdCwgcDEgKSArCgkJCVF1YWRyYXRpY0JlemllclAyKCB0LCBwMiApOwoKCX0KCgkvLwoKCWZ1bmN0aW9uIEN1YmljQmV6aWVyUDAoIHQsIHAgKSB7CgoJCXZhciBrID0gMSAtIHQ7CgkJcmV0dXJuIGsgKiBrICogayAqIHA7CgoJfQoKCWZ1bmN0aW9uIEN1YmljQmV6aWVyUDEoIHQsIHAgKSB7CgoJCXZhciBrID0gMSAtIHQ7CgkJcmV0dXJuIDMgKiBrICogayAqIHQgKiBwOwoKCX0KCglmdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkgewoKCQlyZXR1cm4gMyAqICggMSAtIHQgKSAqIHQgKiB0ICogcDsKCgl9CgoJZnVuY3Rpb24gQ3ViaWNCZXppZXJQMyggdCwgcCApIHsKCgkJcmV0dXJuIHQgKiB0ICogdCAqIHA7CgoJfQoKCWZ1bmN0aW9uIEN1YmljQmV6aWVyKCB0LCBwMCwgcDEsIHAyLCBwMyApIHsKCgkJcmV0dXJuIEN1YmljQmV6aWVyUDAoIHQsIHAwICkgKyBDdWJpY0JlemllclAxKCB0LCBwMSApICsgQ3ViaWNCZXppZXJQMiggdCwgcDIgKSArCgkJCUN1YmljQmV6aWVyUDMoIHQsIHAzICk7CgoJfQoKCWZ1bmN0aW9uIEN1YmljQmV6aWVyQ3VydmUoIHYwLCB2MSwgdjIsIHYzICkgewoKCQlDdXJ2ZS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlJzsKCgkJdGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IyKCk7CgkJdGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7CgkJdGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7CgkJdGhpcy52MyA9IHYzIHx8IG5ldyBWZWN0b3IyKCk7CgoJfQoKCUN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7CglDdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmU7CgoJQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlID0gdHJ1ZTsKCglDdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7CgoJCXZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7CgoJCXBvaW50LnNldCgKCQkJQ3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSwKCQkJQ3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKQoJCSk7CgoJCXJldHVybiBwb2ludDsKCgl9OwoKCUN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJQ3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMudjAuY29weSggc291cmNlLnYwICk7CgkJdGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTsKCQl0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApOwoJCXRoaXMudjMuY29weSggc291cmNlLnYzICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7CgkJZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpOwoJCWRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTsKCQlkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7CgoJCXJldHVybiBkYXRhOwoKCX07CgoJQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7CgoJCXRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7CgkJdGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTsKCQl0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApOwoJCXRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJZnVuY3Rpb24gQ3ViaWNCZXppZXJDdXJ2ZTMoIHYwLCB2MSwgdjIsIHYzICkgewoKCQlDdXJ2ZS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7CgoJCXRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMygpOwoJCXRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpOwoJCXRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpOwoJCXRoaXMudjMgPSB2MyB8fCBuZXcgVmVjdG9yMygpOwoKCX0KCglDdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTsKCUN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmUzOwoKCUN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTsKCglDdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkgewoKCQl2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpOwoKCQl2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzOwoKCQlwb2ludC5zZXQoCgkJCUN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksCgkJCUN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55ICksCgkJCUN1YmljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56LCB2My56ICkKCQkpOwoKCQlyZXR1cm4gcG9pbnQ7CgoJfTsKCglDdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJdGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTsKCQl0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApOwoJCXRoaXMudjIuY29weSggc291cmNlLnYyICk7CgkJdGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglDdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7CgkJZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpOwoJCWRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTsKCQlkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7CgoJCXJldHVybiBkYXRhOwoKCX07CgoJQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQl0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApOwoJCXRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7CgkJdGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTsKCQl0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCWZ1bmN0aW9uIExpbmVDdXJ2ZSggdjEsIHYyICkgewoKCQlDdXJ2ZS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdMaW5lQ3VydmUnOwoKCQl0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTsKCQl0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTsKCgl9CgoJTGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApOwoJTGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTsKCglMaW5lQ3VydmUucHJvdG90eXBlLmlzTGluZUN1cnZlID0gdHJ1ZTsKCglMaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHsKCgkJdmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTsKCgkJaWYgKCB0ID09PSAxICkgewoKCQkJcG9pbnQuY29weSggdGhpcy52MiApOwoKCQl9IGVsc2UgewoKCQkJcG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApOwoJCQlwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApOwoKCQl9CgoJCXJldHVybiBwb2ludDsKCgl9OwoKCS8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdAoKCUxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnRBdCA9IGZ1bmN0aW9uICggdSwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApOwoKCX07CgoJTGluZUN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50ID0gZnVuY3Rpb24gKCAvKiB0ICovICkgewoKCQl2YXIgdGFuZ2VudCA9IHRoaXMudjIuY2xvbmUoKS5zdWIoIHRoaXMudjEgKTsKCgkJcmV0dXJuIHRhbmdlbnQubm9ybWFsaXplKCk7CgoJfTsKCglMaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJQ3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMudjEuY29weSggc291cmNlLnYxICk7CgkJdGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglMaW5lQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsKCgkJdmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpOwoJCWRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTsKCgkJcmV0dXJuIGRhdGE7CgoJfTsKCglMaW5lQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQl0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApOwoJCXRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJZnVuY3Rpb24gTGluZUN1cnZlMyggdjEsIHYyICkgewoKCQlDdXJ2ZS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdMaW5lQ3VydmUzJzsKCgkJdGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7CgkJdGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7CgoJfQoKCUxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7CglMaW5lQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTM7CgoJTGluZUN1cnZlMy5wcm90b3R5cGUuaXNMaW5lQ3VydmUzID0gdHJ1ZTsKCglMaW5lQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7CgoJCWlmICggdCA9PT0gMSApIHsKCgkJCXBvaW50LmNvcHkoIHRoaXMudjIgKTsKCgkJfSBlbHNlIHsKCgkJCXBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTsKCQkJcG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTsKCgkJfQoKCQlyZXR1cm4gcG9pbnQ7CgoJfTsKCgkvLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXQKCglMaW5lQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludEF0ID0gZnVuY3Rpb24gKCB1LCBvcHRpb25hbFRhcmdldCApIHsKCgkJcmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7CgoJfTsKCglMaW5lQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApOwoJCXRoaXMudjIuY29weSggc291cmNlLnYyICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJTGluZUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7CgkJZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpOwoKCQlyZXR1cm4gZGF0YTsKCgl9OwoKCUxpbmVDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQl0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApOwoJCXRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUoIHYwLCB2MSwgdjIgKSB7CgoJCUN1cnZlLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlJzsKCgkJdGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IyKCk7CgkJdGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7CgkJdGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7CgoJfQoKCVF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApOwoJUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZHJhdGljQmV6aWVyQ3VydmU7CgoJUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUgPSB0cnVlOwoKCVF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7CgoJCXZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyOwoKCQlwb2ludC5zZXQoCgkJCVF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLAoJCQlRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKQoJCSk7CgoJCXJldHVybiBwb2ludDsKCgl9OwoKCVF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApOwoJCXRoaXMudjEuY29weSggc291cmNlLnYxICk7CgkJdGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglRdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7CgkJZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpOwoJCWRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTsKCgkJcmV0dXJuIGRhdGE7CgoJfTsKCglRdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7CgoJCXRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7CgkJdGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTsKCQl0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCWZ1bmN0aW9uIFF1YWRyYXRpY0JlemllckN1cnZlMyggdjAsIHYxLCB2MiApIHsKCgkJQ3VydmUuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUzJzsKCgkJdGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IzKCk7CgkJdGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7CgkJdGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7CgoJfQoKCVF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTsKCVF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM7CgoJUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlMyA9IHRydWU7CgoJUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7CgoJCXZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyOwoKCQlwb2ludC5zZXQoCgkJCVF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLAoJCQlRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKSwKCQkJUXVhZHJhdGljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56ICkKCQkpOwoKCQlyZXR1cm4gcG9pbnQ7CgoJfTsKCglRdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJQ3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCXRoaXMudjAuY29weSggc291cmNlLnYwICk7CgkJdGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTsKCQl0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApOwoKCQlyZXR1cm4gdGhpczsKCgl9OwoKCVF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7CgkJZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpOwoJCWRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTsKCgkJcmV0dXJuIGRhdGE7CgoJfTsKCglRdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkgewoKCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQl0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApOwoJCXRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7CgkJdGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglmdW5jdGlvbiBTcGxpbmVDdXJ2ZSggcG9pbnRzIC8qIGFycmF5IG9mIFZlY3RvcjIgKi8gKSB7CgoJCUN1cnZlLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1NwbGluZUN1cnZlJzsKCgkJdGhpcy5wb2ludHMgPSBwb2ludHMgfHwgW107CgoJfQoKCVNwbGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApOwoJU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BsaW5lQ3VydmU7CgoJU3BsaW5lQ3VydmUucHJvdG90eXBlLmlzU3BsaW5lQ3VydmUgPSB0cnVlOwoKCVNwbGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7CgoJCXZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7CgoJCXZhciBwb2ludHMgPSB0aGlzLnBvaW50czsKCQl2YXIgcCA9ICggcG9pbnRzLmxlbmd0aCAtIDEgKSAqIHQ7CgoJCXZhciBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTsKCQl2YXIgd2VpZ2h0ID0gcCAtIGludFBvaW50OwoKCQl2YXIgcDAgPSBwb2ludHNbIGludFBvaW50ID09PSAwID8gaW50UG9pbnQgOiBpbnRQb2ludCAtIDEgXTsKCQl2YXIgcDEgPSBwb2ludHNbIGludFBvaW50IF07CgkJdmFyIHAyID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDEgXTsKCQl2YXIgcDMgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDMgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMiBdOwoKCQlwb2ludC5zZXQoCgkJCUNhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLAoJCQlDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLnksIHAxLnksIHAyLnksIHAzLnkgKQoJCSk7CgoJCXJldHVybiBwb2ludDsKCgl9OwoKCVNwbGluZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLnBvaW50cyA9IFtdOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQl2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07CgoJCQl0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7CgoJCX0KCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglTcGxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQlkYXRhLnBvaW50cyA9IFtdOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJdmFyIHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTsKCQkJZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7CgoJCX0KCgkJcmV0dXJuIGRhdGE7CgoJfTsKCglTcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7CgoJCXRoaXMucG9pbnRzID0gW107CgoJCWZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQl2YXIgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdOwoJCQl0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApOwoKCQl9CgoJCXJldHVybiB0aGlzOwoKCX07CgoKCgl2YXIgQ3VydmVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewoJCV9fcHJvdG9fXzogbnVsbCwKCQlBcmNDdXJ2ZTogQXJjQ3VydmUsCgkJQ2F0bXVsbFJvbUN1cnZlMzogQ2F0bXVsbFJvbUN1cnZlMywKCQlDdWJpY0JlemllckN1cnZlOiBDdWJpY0JlemllckN1cnZlLAoJCUN1YmljQmV6aWVyQ3VydmUzOiBDdWJpY0JlemllckN1cnZlMywKCQlFbGxpcHNlQ3VydmU6IEVsbGlwc2VDdXJ2ZSwKCQlMaW5lQ3VydmU6IExpbmVDdXJ2ZSwKCQlMaW5lQ3VydmUzOiBMaW5lQ3VydmUzLAoJCVF1YWRyYXRpY0JlemllckN1cnZlOiBRdWFkcmF0aWNCZXppZXJDdXJ2ZSwKCQlRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMywKCQlTcGxpbmVDdXJ2ZTogU3BsaW5lQ3VydmUKCX0pOwoKCS8qKgoJICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZwoJICoKCSAqKi8KCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCSAqCUN1cnZlZCBQYXRoIC0gYSBjdXJ2ZSBwYXRoIGlzIHNpbXBseSBhIGFycmF5IG9mIGNvbm5lY3RlZAoJICogIGN1cnZlcywgYnV0IHJldGFpbnMgdGhlIGFwaSBvZiBhIGN1cnZlCgkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoJZnVuY3Rpb24gQ3VydmVQYXRoKCkgewoKCQlDdXJ2ZS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnOwoKCQl0aGlzLmN1cnZlcyA9IFtdOwoJCXRoaXMuYXV0b0Nsb3NlID0gZmFsc2U7IC8vIEF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBwYXRoCgoJfQoKCUN1cnZlUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQ3VydmVQYXRoLAoKCQlhZGQ6IGZ1bmN0aW9uICggY3VydmUgKSB7CgoJCQl0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApOwoKCQl9LAoKCQljbG9zZVBhdGg6IGZ1bmN0aW9uICgpIHsKCgkJCS8vIEFkZCBhIGxpbmUgY3VydmUgaWYgc3RhcnQgYW5kIGVuZCBvZiBsaW5lcyBhcmUgbm90IGNvbm5lY3RlZAoJCQl2YXIgc3RhcnRQb2ludCA9IHRoaXMuY3VydmVzWyAwIF0uZ2V0UG9pbnQoIDAgKTsKCQkJdmFyIGVuZFBvaW50ID0gdGhpcy5jdXJ2ZXNbIHRoaXMuY3VydmVzLmxlbmd0aCAtIDEgXS5nZXRQb2ludCggMSApOwoKCQkJaWYgKCAhIHN0YXJ0UG9pbnQuZXF1YWxzKCBlbmRQb2ludCApICkgewoKCQkJCXRoaXMuY3VydmVzLnB1c2goIG5ldyBMaW5lQ3VydmUoIGVuZFBvaW50LCBzdGFydFBvaW50ICkgKTsKCgkJCX0KCgkJfSwKCgkJLy8gVG8gZ2V0IGFjY3VyYXRlIHBvaW50IHdpdGggcmVmZXJlbmNlIHRvCgkJLy8gZW50aXJlIHBhdGggZGlzdGFuY2UgYXQgdGltZSB0LAoJCS8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZToKCgkJLy8gMS4gTGVuZ3RoIG9mIGVhY2ggc3ViIHBhdGggaGF2ZSB0byBiZSBrbm93bgoJCS8vIDIuIExvY2F0ZSBhbmQgaWRlbnRpZnkgdHlwZSBvZiBjdXJ2ZQoJCS8vIDMuIEdldCB0IGZvciB0aGUgY3VydmUKCQkvLyA0LiBSZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCh0JykKCgkJZ2V0UG9pbnQ6IGZ1bmN0aW9uICggdCApIHsKCgkJCXZhciBkID0gdCAqIHRoaXMuZ2V0TGVuZ3RoKCk7CgkJCXZhciBjdXJ2ZUxlbmd0aHMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpOwoJCQl2YXIgaSA9IDA7CgoJCQkvLyBUbyB0aGluayBhYm91dCBib3VuZGFyaWVzIHBvaW50cy4KCgkJCXdoaWxlICggaSA8IGN1cnZlTGVuZ3Rocy5sZW5ndGggKSB7CgoJCQkJaWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkgewoKCQkJCQl2YXIgZGlmZiA9IGN1cnZlTGVuZ3Roc1sgaSBdIC0gZDsKCQkJCQl2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdOwoKCQkJCQl2YXIgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpOwoJCQkJCXZhciB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7CgoJCQkJCXJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KCB1ICk7CgoJCQkJfQoKCQkJCWkgKys7CgoJCQl9CgoJCQlyZXR1cm4gbnVsbDsKCgkJCS8vIGxvb3Agd2hlcmUgc3VtICE9IDAsIHN1bSA+IGQgLCBzdW0rMSA8ZAoKCQl9LAoKCQkvLyBXZSBjYW5ub3QgdXNlIHRoZSBkZWZhdWx0IFRIUkVFLkN1cnZlIGdldFBvaW50KCkgd2l0aCBnZXRMZW5ndGgoKSBiZWNhdXNlIGluCgkJLy8gVEhSRUUuQ3VydmUsIGdldExlbmd0aCgpIGRlcGVuZHMgb24gZ2V0UG9pbnQoKSBidXQgaW4gVEhSRUUuQ3VydmVQYXRoCgkJLy8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aAoKCQlnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBsZW5zID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTsKCQkJcmV0dXJuIGxlbnNbIGxlbnMubGVuZ3RoIC0gMSBdOwoKCQl9LAoKCQkvLyBjYWNoZUxlbmd0aHMgbXVzdCBiZSByZWNhbGN1bGF0ZWQuCgkJdXBkYXRlQXJjTGVuZ3RoczogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7CgkJCXRoaXMuY2FjaGVMZW5ndGhzID0gbnVsbDsKCQkJdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTsKCgkJfSwKCgkJLy8gQ29tcHV0ZSBsZW5ndGhzIGFuZCBjYWNoZSB0aGVtCgkJLy8gV2UgY2Fubm90IG92ZXJ3cml0ZSBnZXRMZW5ndGhzKCkgYmVjYXVzZSBVdG9UIG1hcHBpbmcgdXNlcyBpdC4KCgkJZ2V0Q3VydmVMZW5ndGhzOiBmdW5jdGlvbiAoKSB7CgoJCQkvLyBXZSB1c2UgY2FjaGUgdmFsdWVzIGlmIGN1cnZlcyBhbmQgY2FjaGUgYXJyYXkgYXJlIHNhbWUgbGVuZ3RoCgoJCQlpZiAoIHRoaXMuY2FjaGVMZW5ndGhzICYmIHRoaXMuY2FjaGVMZW5ndGhzLmxlbmd0aCA9PT0gdGhpcy5jdXJ2ZXMubGVuZ3RoICkgewoKCQkJCXJldHVybiB0aGlzLmNhY2hlTGVuZ3RoczsKCgkJCX0KCgkJCS8vIEdldCBsZW5ndGggb2Ygc3ViLWN1cnZlCgkJCS8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheQoKCQkJdmFyIGxlbmd0aHMgPSBbXSwgc3VtcyA9IDA7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXN1bXMgKz0gdGhpcy5jdXJ2ZXNbIGkgXS5nZXRMZW5ndGgoKTsKCQkJCWxlbmd0aHMucHVzaCggc3VtcyApOwoKCQkJfQoKCQkJdGhpcy5jYWNoZUxlbmd0aHMgPSBsZW5ndGhzOwoKCQkJcmV0dXJuIGxlbmd0aHM7CgoJCX0sCgoJCWdldFNwYWNlZFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7CgoJCQlpZiAoIGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkICkgeyBkaXZpc2lvbnMgPSA0MDsgfQoKCQkJdmFyIHBvaW50cyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHsKCgkJCQlwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggaSAvIGRpdmlzaW9ucyApICk7CgoJCQl9CgoJCQlpZiAoIHRoaXMuYXV0b0Nsb3NlICkgewoKCQkJCXBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApOwoKCQkJfQoKCQkJcmV0dXJuIHBvaW50czsKCgkJfSwKCgkJZ2V0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHsKCgkJCWRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMjsKCgkJCXZhciBwb2ludHMgPSBbXSwgbGFzdDsKCgkJCWZvciAoIHZhciBpID0gMCwgY3VydmVzID0gdGhpcy5jdXJ2ZXM7IGkgPCBjdXJ2ZXMubGVuZ3RoOyBpICsrICkgewoKCQkJCXZhciBjdXJ2ZSA9IGN1cnZlc1sgaSBdOwoJCQkJdmFyIHJlc29sdXRpb24gPSAoIGN1cnZlICYmIGN1cnZlLmlzRWxsaXBzZUN1cnZlICkgPyBkaXZpc2lvbnMgKiAyCgkJCQkJOiAoIGN1cnZlICYmICggY3VydmUuaXNMaW5lQ3VydmUgfHwgY3VydmUuaXNMaW5lQ3VydmUzICkgKSA/IDEKCQkJCQkJOiAoIGN1cnZlICYmIGN1cnZlLmlzU3BsaW5lQ3VydmUgKSA/IGRpdmlzaW9ucyAqIGN1cnZlLnBvaW50cy5sZW5ndGgKCQkJCQkJCTogZGl2aXNpb25zOwoKCQkJCXZhciBwdHMgPSBjdXJ2ZS5nZXRQb2ludHMoIHJlc29sdXRpb24gKTsKCgkJCQlmb3IgKCB2YXIgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqICsrICkgewoKCQkJCQl2YXIgcG9pbnQgPSBwdHNbIGogXTsKCgkJCQkJaWYgKCBsYXN0ICYmIGxhc3QuZXF1YWxzKCBwb2ludCApICkgeyBjb250aW51ZTsgfSAvLyBlbnN1cmVzIG5vIGNvbnNlY3V0aXZlIHBvaW50cyBhcmUgZHVwbGljYXRlcwoKCQkJCQlwb2ludHMucHVzaCggcG9pbnQgKTsKCQkJCQlsYXN0ID0gcG9pbnQ7CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCB0aGlzLmF1dG9DbG9zZSAmJiBwb2ludHMubGVuZ3RoID4gMSAmJiAhIHBvaW50c1sgcG9pbnRzLmxlbmd0aCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7CgoJCQkJcG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7CgoJCQl9CgoJCQlyZXR1cm4gcG9pbnRzOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5jdXJ2ZXMgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQl2YXIgY3VydmUgPSBzb3VyY2UuY3VydmVzWyBpIF07CgoJCQkJdGhpcy5jdXJ2ZXMucHVzaCggY3VydmUuY2xvbmUoKSApOwoKCQkJfQoKCQkJdGhpcy5hdXRvQ2xvc2UgPSBzb3VyY2UuYXV0b0Nsb3NlOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCkgewoKCQkJdmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJCWRhdGEuYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2U7CgkJCWRhdGEuY3VydmVzID0gW107CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07CgkJCQlkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApOwoKCQkJfQoKCQkJcmV0dXJuIGRhdGE7CgoJCX0sCgoJCWZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCQlDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQkJdGhpcy5hdXRvQ2xvc2UgPSBqc29uLmF1dG9DbG9zZTsKCQkJdGhpcy5jdXJ2ZXMgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGN1cnZlID0ganNvbi5jdXJ2ZXNbIGkgXTsKCQkJCXRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGN1cnZlLnR5cGUgXSgpLmZyb21KU09OKCBjdXJ2ZSApICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2cKCSAqIENyZWF0ZXMgZnJlZSBmb3JtIDJkIHBhdGggdXNpbmcgc2VyaWVzIG9mIHBvaW50cywgbGluZXMgb3IgY3VydmVzLgoJICoqLwoKCWZ1bmN0aW9uIFBhdGgoIHBvaW50cyApIHsKCgkJQ3VydmVQYXRoLmNhbGwoIHRoaXMgKTsKCgkJdGhpcy50eXBlID0gJ1BhdGgnOwoKCQl0aGlzLmN1cnJlbnRQb2ludCA9IG5ldyBWZWN0b3IyKCk7CgoJCWlmICggcG9pbnRzICkgewoKCQkJdGhpcy5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKTsKCgkJfQoKCX0KCglQYXRoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEN1cnZlUGF0aC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogUGF0aCwKCgkJc2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7CgoJCQl0aGlzLm1vdmVUbyggcG9pbnRzWyAwIF0ueCwgcG9pbnRzWyAwIF0ueSApOwoKCQkJZm9yICggdmFyIGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdGhpcy5saW5lVG8oIHBvaW50c1sgaSBdLngsIHBvaW50c1sgaSBdLnkgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltb3ZlVG86IGZ1bmN0aW9uICggeCwgeSApIHsKCgkJCXRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApOyAvLyBUT0RPIGNvbnNpZGVyIHJlZmVyZW5jaW5nIHZlY3RvcnMgaW5zdGVhZCBvZiBjb3B5aW5nPwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWxpbmVUbzogZnVuY3Rpb24gKCB4LCB5ICkgewoKCQkJdmFyIGN1cnZlID0gbmV3IExpbmVDdXJ2ZSggdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSwgbmV3IFZlY3RvcjIoIHgsIHkgKSApOwoJCQl0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApOwoKCQkJdGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKSB7CgoJCQl2YXIgY3VydmUgPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUoCgkJCQl0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLAoJCQkJbmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSwKCQkJCW5ldyBWZWN0b3IyKCBhWCwgYVkgKQoJCQkpOwoKCQkJdGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTsKCgkJCXRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkgewoKCQkJdmFyIGN1cnZlID0gbmV3IEN1YmljQmV6aWVyQ3VydmUoCgkJCQl0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLAoJCQkJbmV3IFZlY3RvcjIoIGFDUDF4LCBhQ1AxeSApLAoJCQkJbmV3IFZlY3RvcjIoIGFDUDJ4LCBhQ1AyeSApLAoJCQkJbmV3IFZlY3RvcjIoIGFYLCBhWSApCgkJCSk7CgoJCQl0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApOwoKCQkJdGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyAvKkFycmF5IG9mIFZlY3RvciovICkgewoKCQkJdmFyIG5wdHMgPSBbIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCkgXS5jb25jYXQoIHB0cyApOwoKCQkJdmFyIGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7CgkJCXRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7CgoJCQl0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBwdHNbIHB0cy5sZW5ndGggLSAxIF0gKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhcmM6IGZ1bmN0aW9uICggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkgewoKCQkJdmFyIHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDsKCQkJdmFyIHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTsKCgkJCXRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLAoJCQkJYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWFic2FyYzogZnVuY3Rpb24gKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7CgoJCQl0aGlzLmFic2VsbGlwc2UoIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVsbGlwc2U6IGZ1bmN0aW9uICggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7CgoJCQl2YXIgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54OwoJCQl2YXIgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55OwoKCQkJdGhpcy5hYnNlbGxpcHNlKCBhWCArIHgwLCBhWSArIHkwLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlhYnNlbGxpcHNlOiBmdW5jdGlvbiAoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkgewoKCQkJdmFyIGN1cnZlID0gbmV3IEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTsKCgkJCWlmICggdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMCApIHsKCgkJCQkvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pbgoJCQkJdmFyIGZpcnN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMCApOwoKCQkJCWlmICggISBmaXJzdFBvaW50LmVxdWFscyggdGhpcy5jdXJyZW50UG9pbnQgKSApIHsKCgkJCQkJdGhpcy5saW5lVG8oIGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55ICk7CgoJCQkJfQoKCQkJfQoKCQkJdGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTsKCgkJCXZhciBsYXN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMSApOwoJCQl0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBsYXN0UG9pbnQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUN1cnZlUGF0aC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMuY3VycmVudFBvaW50LmNvcHkoIHNvdXJjZS5jdXJyZW50UG9pbnQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBkYXRhID0gQ3VydmVQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQkJZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7CgoJCQlyZXR1cm4gZGF0YTsKCgkJfSwKCgkJZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHsKCgkJCUN1cnZlUGF0aC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApOwoKCQkJdGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nCgkgKiBEZWZpbmVzIGEgMmQgc2hhcGUgcGxhbmUgdXNpbmcgcGF0aHMuCgkgKiovCgoJLy8gU1RFUCAxIENyZWF0ZSBhIHBhdGguCgkvLyBTVEVQIDIgVHVybiBwYXRoIGludG8gc2hhcGUuCgkvLyBTVEVQIDMgRXh0cnVkZUdlb21ldHJ5IHRha2VzIGluIFNoYXBlL1NoYXBlcwoJLy8gU1RFUCAzYSAtIEV4dHJhY3QgcG9pbnRzIGZyb20gZWFjaCBzaGFwZSwgdHVybiB0byB2ZXJ0aWNlcwoJLy8gU1RFUCAzYiAtIFRyaWFuZ3VsYXRlIGVhY2ggc2hhcGUsIGFkZCBmYWNlcy4KCglmdW5jdGlvbiBTaGFwZSggcG9pbnRzICkgewoKCQlQYXRoLmNhbGwoIHRoaXMsIHBvaW50cyApOwoKCQl0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsKCgkJdGhpcy50eXBlID0gJ1NoYXBlJzsKCgkJdGhpcy5ob2xlcyA9IFtdOwoKCX0KCglTaGFwZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQYXRoLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBTaGFwZSwKCgkJZ2V0UG9pbnRzSG9sZXM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkgewoKCQkJdmFyIGhvbGVzUHRzID0gW107CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJaG9sZXNQdHNbIGkgXSA9IHRoaXMuaG9sZXNbIGkgXS5nZXRQb2ludHMoIGRpdmlzaW9ucyApOwoKCQkJfQoKCQkJcmV0dXJuIGhvbGVzUHRzOwoKCQl9LAoKCQkvLyBnZXQgcG9pbnRzIG9mIHNoYXBlIGFuZCBob2xlcyAoa2V5cG9pbnRzIGJhc2VkIG9uIHNlZ21lbnRzIHBhcmFtZXRlcikKCgkJZXh0cmFjdFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7CgoJCQlyZXR1cm4gewoKCQkJCXNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksCgkJCQlob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zICkKCgkJCX07CgoJCX0sCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJUGF0aC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMuaG9sZXMgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBob2xlID0gc291cmNlLmhvbGVzWyBpIF07CgoJCQkJdGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBkYXRhID0gUGF0aC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJCWRhdGEudXVpZCA9IHRoaXMudXVpZDsKCQkJZGF0YS5ob2xlcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBob2xlID0gdGhpcy5ob2xlc1sgaSBdOwoJCQkJZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7CgoJCQl9CgoJCQlyZXR1cm4gZGF0YTsKCgkJfSwKCgkJZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHsKCgkJCVBhdGgucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTsKCgkJCXRoaXMudXVpZCA9IGpzb24udXVpZDsKCQkJdGhpcy5ob2xlcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBob2xlID0ganNvbi5ob2xlc1sgaSBdOwoJCQkJdGhpcy5ob2xlcy5wdXNoKCBuZXcgUGF0aCgpLmZyb21KU09OKCBob2xlICkgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCglmdW5jdGlvbiBMaWdodCggY29sb3IsIGludGVuc2l0eSApIHsKCgkJT2JqZWN0M0QuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnTGlnaHQnOwoKCQl0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApOwoJCXRoaXMuaW50ZW5zaXR5ID0gaW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgPyBpbnRlbnNpdHkgOiAxOwoKCQl0aGlzLnJlY2VpdmVTaGFkb3cgPSB1bmRlZmluZWQ7CgoJfQoKCUxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBMaWdodCwKCgkJaXNMaWdodDogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQlPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7CgkJCXRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHsKCgkJCXZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7CgoJCQlkYXRhLm9iamVjdC5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7CgkJCWRhdGEub2JqZWN0LmludGVuc2l0eSA9IHRoaXMuaW50ZW5zaXR5OwoKCQkJaWYgKCB0aGlzLmdyb3VuZENvbG9yICE9PSB1bmRlZmluZWQgKSB7IGRhdGEub2JqZWN0Lmdyb3VuZENvbG9yID0gdGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTsgfQoKCQkJaWYgKCB0aGlzLmRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSB7IGRhdGEub2JqZWN0LmRpc3RhbmNlID0gdGhpcy5kaXN0YW5jZTsgfQoJCQlpZiAoIHRoaXMuYW5nbGUgIT09IHVuZGVmaW5lZCApIHsgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlOyB9CgkJCWlmICggdGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLm9iamVjdC5kZWNheSA9IHRoaXMuZGVjYXk7IH0KCQkJaWYgKCB0aGlzLnBlbnVtYnJhICE9PSB1bmRlZmluZWQgKSB7IGRhdGEub2JqZWN0LnBlbnVtYnJhID0gdGhpcy5wZW51bWJyYTsgfQoKCQkJaWYgKCB0aGlzLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgeyBkYXRhLm9iamVjdC5zaGFkb3cgPSB0aGlzLnNoYWRvdy50b0pTT04oKTsgfQoKCQkJcmV0dXJuIGRhdGE7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0KCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHsKCgkJTGlnaHQuY2FsbCggdGhpcywgc2t5Q29sb3IsIGludGVuc2l0eSApOwoKCQl0aGlzLnR5cGUgPSAnSGVtaXNwaGVyZUxpZ2h0JzsKCgkJdGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkOwoKCQl0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApOwoJCXRoaXMudXBkYXRlTWF0cml4KCk7CgoJCXRoaXMuZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoIGdyb3VuZENvbG9yICk7CgoJfQoKCUhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogSGVtaXNwaGVyZUxpZ2h0LAoKCQlpc0hlbWlzcGhlcmVMaWdodDogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQlMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMuZ3JvdW5kQ29sb3IuY29weSggc291cmNlLmdyb3VuZENvbG9yICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBMaWdodFNoYWRvdyggY2FtZXJhICkgewoKCQl0aGlzLmNhbWVyYSA9IGNhbWVyYTsKCgkJdGhpcy5iaWFzID0gMDsKCQl0aGlzLnJhZGl1cyA9IDE7CgoJCXRoaXMubWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCA1MTIsIDUxMiApOwoKCQl0aGlzLm1hcCA9IG51bGw7CgkJdGhpcy5tYXBQYXNzID0gbnVsbDsKCQl0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7CgoJCXRoaXMuX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpOwoJCXRoaXMuX2ZyYW1lRXh0ZW50cyA9IG5ldyBWZWN0b3IyKCAxLCAxICk7CgoJCXRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxOwoKCQl0aGlzLl92aWV3cG9ydHMgPSBbCgoJCQluZXcgVmVjdG9yNCggMCwgMCwgMSwgMSApCgoJCV07CgoJfQoKCU9iamVjdC5hc3NpZ24oIExpZ2h0U2hhZG93LnByb3RvdHlwZSwgewoKCQlfcHJvalNjcmVlbk1hdHJpeDogbmV3IE1hdHJpeDQoKSwKCgkJX2xpZ2h0UG9zaXRpb25Xb3JsZDogbmV3IFZlY3RvcjMoKSwKCgkJX2xvb2tUYXJnZXQ6IG5ldyBWZWN0b3IzKCksCgoJCWdldFZpZXdwb3J0Q291bnQ6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLl92aWV3cG9ydENvdW50OwoKCQl9LAoKCQlnZXRGcnVzdHVtOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5fZnJ1c3R1bTsKCgkJfSwKCgkJdXBkYXRlTWF0cmljZXM6IGZ1bmN0aW9uICggbGlnaHQgKSB7CgoJCQl2YXIgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmEsCgkJCQlzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeCwKCQkJCXByb2pTY3JlZW5NYXRyaXggPSB0aGlzLl9wcm9qU2NyZWVuTWF0cml4LAoJCQkJbG9va1RhcmdldCA9IHRoaXMuX2xvb2tUYXJnZXQsCgkJCQlsaWdodFBvc2l0aW9uV29ybGQgPSB0aGlzLl9saWdodFBvc2l0aW9uV29ybGQ7CgoJCQlsaWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwoJCQlzaGFkb3dDYW1lcmEucG9zaXRpb24uY29weSggbGlnaHRQb3NpdGlvbldvcmxkICk7CgoJCQlsb29rVGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7CgkJCXNoYWRvd0NhbWVyYS5sb29rQXQoIGxvb2tUYXJnZXQgKTsKCQkJc2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgoJCQlwcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7CgkJCXRoaXMuX2ZydXN0dW0uc2V0RnJvbU1hdHJpeCggcHJvalNjcmVlbk1hdHJpeCApOwoKCQkJc2hhZG93TWF0cml4LnNldCgKCQkJCTAuNSwgMC4wLCAwLjAsIDAuNSwKCQkJCTAuMCwgMC41LCAwLjAsIDAuNSwKCQkJCTAuMCwgMC4wLCAwLjUsIDAuNSwKCQkJCTAuMCwgMC4wLCAwLjAsIDEuMAoJCQkpOwoKCQkJc2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEucHJvamVjdGlvbk1hdHJpeCApOwoJCQlzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTsKCgkJfSwKCgkJZ2V0Vmlld3BvcnQ6IGZ1bmN0aW9uICggdmlld3BvcnRJbmRleCApIHsKCgkJCXJldHVybiB0aGlzLl92aWV3cG9ydHNbIHZpZXdwb3J0SW5kZXggXTsKCgkJfSwKCgkJZ2V0RnJhbWVFeHRlbnRzOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzOwoKCQl9LAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCXRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpOwoKCQkJdGhpcy5iaWFzID0gc291cmNlLmJpYXM7CgkJCXRoaXMucmFkaXVzID0gc291cmNlLnJhZGl1czsKCgkJCXRoaXMubWFwU2l6ZS5jb3B5KCBzb3VyY2UubWFwU2l6ZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCkgewoKCQkJdmFyIG9iamVjdCA9IHt9OwoKCQkJaWYgKCB0aGlzLmJpYXMgIT09IDAgKSB7IG9iamVjdC5iaWFzID0gdGhpcy5iaWFzOyB9CgkJCWlmICggdGhpcy5yYWRpdXMgIT09IDEgKSB7IG9iamVjdC5yYWRpdXMgPSB0aGlzLnJhZGl1czsgfQoJCQlpZiAoIHRoaXMubWFwU2l6ZS54ICE9PSA1MTIgfHwgdGhpcy5tYXBTaXplLnkgIT09IDUxMiApIHsgb2JqZWN0Lm1hcFNpemUgPSB0aGlzLm1hcFNpemUudG9BcnJheSgpOyB9CgoJCQlvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDsKCQkJZGVsZXRlIG9iamVjdC5jYW1lcmEubWF0cml4OwoKCQkJcmV0dXJuIG9iamVjdDsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBTcG90TGlnaHRTaGFkb3coKSB7CgoJCUxpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggNTAsIDEsIDAuNSwgNTAwICkgKTsKCgl9CgoJU3BvdExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBTcG90TGlnaHRTaGFkb3csCgoJCWlzU3BvdExpZ2h0U2hhZG93OiB0cnVlLAoKCQl1cGRhdGVNYXRyaWNlczogZnVuY3Rpb24gKCBsaWdodCApIHsKCgkJCXZhciBjYW1lcmEgPSB0aGlzLmNhbWVyYTsKCgkJCXZhciBmb3YgPSBfTWF0aC5SQUQyREVHICogMiAqIGxpZ2h0LmFuZ2xlOwoJCQl2YXIgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDsKCQkJdmFyIGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7CgoJCQlpZiAoIGZvdiAhPT0gY2FtZXJhLmZvdiB8fCBhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgfHwgZmFyICE9PSBjYW1lcmEuZmFyICkgewoKCQkJCWNhbWVyYS5mb3YgPSBmb3Y7CgkJCQljYW1lcmEuYXNwZWN0ID0gYXNwZWN0OwoJCQkJY2FtZXJhLmZhciA9IGZhcjsKCQkJCWNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgoJCQl9CgoJCQlMaWdodFNoYWRvdy5wcm90b3R5cGUudXBkYXRlTWF0cmljZXMuY2FsbCggdGhpcywgbGlnaHQgKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKi8KCglmdW5jdGlvbiBTcG90TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlLCBhbmdsZSwgcGVudW1icmEsIGRlY2F5ICkgewoKCQlMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7CgoJCXRoaXMudHlwZSA9ICdTcG90TGlnaHQnOwoKCQl0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApOwoJCXRoaXMudXBkYXRlTWF0cml4KCk7CgoJCXRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7CgoJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3Bvd2VyJywgewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQkvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuCgkJCQkvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmCgkJCQlyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHBvd2VyICkgewoKCQkJCS8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS4KCQkJCS8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGYKCQkJCXRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJOwoKCQkJfQoJCX0gKTsKCgkJdGhpcy5kaXN0YW5jZSA9ICggZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApID8gZGlzdGFuY2UgOiAwOwoJCXRoaXMuYW5nbGUgPSAoIGFuZ2xlICE9PSB1bmRlZmluZWQgKSA/IGFuZ2xlIDogTWF0aC5QSSAvIDM7CgkJdGhpcy5wZW51bWJyYSA9ICggcGVudW1icmEgIT09IHVuZGVmaW5lZCApID8gcGVudW1icmEgOiAwOwoJCXRoaXMuZGVjYXkgPSAoIGRlY2F5ICE9PSB1bmRlZmluZWQgKSA/IGRlY2F5IDogMTsJLy8gZm9yIHBoeXNpY2FsbHkgY29ycmVjdCBsaWdodHMsIHNob3VsZCBiZSAyLgoKCQl0aGlzLnNoYWRvdyA9IG5ldyBTcG90TGlnaHRTaGFkb3coKTsKCgl9CgoJU3BvdExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBTcG90TGlnaHQsCgoJCWlzU3BvdExpZ2h0OiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5kaXN0YW5jZSA9IHNvdXJjZS5kaXN0YW5jZTsKCQkJdGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTsKCQkJdGhpcy5wZW51bWJyYSA9IHNvdXJjZS5wZW51bWJyYTsKCQkJdGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTsKCgkJCXRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpOwoKCQkJdGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCglmdW5jdGlvbiBQb2ludExpZ2h0U2hhZG93KCkgewoKCQlMaWdodFNoYWRvdy5jYWxsKCB0aGlzLCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDkwLCAxLCAwLjUsIDUwMCApICk7CgoJCXRoaXMuX2ZyYW1lRXh0ZW50cyA9IG5ldyBWZWN0b3IyKCA0LCAyICk7CgoJCXRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2OwoKCQl0aGlzLl92aWV3cG9ydHMgPSBbCgkJCS8vIFRoZXNlIHZpZXdwb3J0cyBtYXAgYSBjdWJlLW1hcCBvbnRvIGEgMkQgdGV4dHVyZSB3aXRoIHRoZQoJCQkvLyBmb2xsb3dpbmcgb3JpZW50YXRpb246CgkJCS8vCgkJCS8vICB4elhaCgkJCS8vICAgeSBZCgkJCS8vCgkJCS8vIFggLSBQb3NpdGl2ZSB4IGRpcmVjdGlvbgoJCQkvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb24KCQkJLy8gWSAtIFBvc2l0aXZlIHkgZGlyZWN0aW9uCgkJCS8vIHkgLSBOZWdhdGl2ZSB5IGRpcmVjdGlvbgoJCQkvLyBaIC0gUG9zaXRpdmUgeiBkaXJlY3Rpb24KCQkJLy8geiAtIE5lZ2F0aXZlIHogZGlyZWN0aW9uCgoJCQkvLyBwb3NpdGl2ZSBYCgkJCW5ldyBWZWN0b3I0KCAyLCAxLCAxLCAxICksCgkJCS8vIG5lZ2F0aXZlIFgKCQkJbmV3IFZlY3RvcjQoIDAsIDEsIDEsIDEgKSwKCQkJLy8gcG9zaXRpdmUgWgoJCQluZXcgVmVjdG9yNCggMywgMSwgMSwgMSApLAoJCQkvLyBuZWdhdGl2ZSBaCgkJCW5ldyBWZWN0b3I0KCAxLCAxLCAxLCAxICksCgkJCS8vIHBvc2l0aXZlIFkKCQkJbmV3IFZlY3RvcjQoIDMsIDAsIDEsIDEgKSwKCQkJLy8gbmVnYXRpdmUgWQoJCQluZXcgVmVjdG9yNCggMSwgMCwgMSwgMSApCgkJXTsKCgkJdGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbCgkJCW5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSwKCQkJbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgLSAxLCAwICkKCQldOwoKCQl0aGlzLl9jdWJlVXBzID0gWwoJCQluZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLAoJCQluZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLAluZXcgVmVjdG9yMyggMCwgMCwgLSAxICkKCQldOwoKCX0KCglQb2ludExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBQb2ludExpZ2h0U2hhZG93LAoKCQlpc1BvaW50TGlnaHRTaGFkb3c6IHRydWUsCgoJCXVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAoIGxpZ2h0LCB2aWV3cG9ydEluZGV4ICkgewoKCQkJaWYgKCB2aWV3cG9ydEluZGV4ID09PSB1bmRlZmluZWQgKSB7IHZpZXdwb3J0SW5kZXggPSAwOyB9CgoJCQl2YXIgY2FtZXJhID0gdGhpcy5jYW1lcmEsCgkJCQlzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeCwKCQkJCWxpZ2h0UG9zaXRpb25Xb3JsZCA9IHRoaXMuX2xpZ2h0UG9zaXRpb25Xb3JsZCwKCQkJCWxvb2tUYXJnZXQgPSB0aGlzLl9sb29rVGFyZ2V0LAoJCQkJcHJvalNjcmVlbk1hdHJpeCA9IHRoaXMuX3Byb2pTY3JlZW5NYXRyaXg7CgoJCQlsaWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApOwoJCQljYW1lcmEucG9zaXRpb24uY29weSggbGlnaHRQb3NpdGlvbldvcmxkICk7CgoJCQlsb29rVGFyZ2V0LmNvcHkoIGNhbWVyYS5wb3NpdGlvbiApOwoJCQlsb29rVGFyZ2V0LmFkZCggdGhpcy5fY3ViZURpcmVjdGlvbnNbIHZpZXdwb3J0SW5kZXggXSApOwoJCQljYW1lcmEudXAuY29weSggdGhpcy5fY3ViZVVwc1sgdmlld3BvcnRJbmRleCBdICk7CgkJCWNhbWVyYS5sb29rQXQoIGxvb2tUYXJnZXQgKTsKCQkJY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgoJCQlzaGFkb3dNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC54LCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC56ICk7CgoJCQlwcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7CgkJCXRoaXMuX2ZydXN0dW0uc2V0RnJvbU1hdHJpeCggcHJvalNjcmVlbk1hdHJpeCApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCglmdW5jdGlvbiBQb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKSB7CgoJCUxpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTsKCgkJdGhpcy50eXBlID0gJ1BvaW50TGlnaHQnOwoKCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdwb3dlcicsIHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJLy8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLgoJCQkJLy8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZgoJCQkJcmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggcG93ZXIgKSB7CgoJCQkJLy8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLgoJCQkJLy8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZgoJCQkJdGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTsKCgkJCX0KCQl9ICk7CgoJCXRoaXMuZGlzdGFuY2UgPSAoIGRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSA/IGRpc3RhbmNlIDogMDsKCQl0aGlzLmRlY2F5ID0gKCBkZWNheSAhPT0gdW5kZWZpbmVkICkgPyBkZWNheSA6IDE7CS8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi4KCgkJdGhpcy5zaGFkb3cgPSBuZXcgUG9pbnRMaWdodFNoYWRvdygpOwoKCX0KCglQb2ludExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBQb2ludExpZ2h0LAoKCQlpc1BvaW50TGlnaHQ6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJTGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCQl0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlOwoJCQl0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5OwoKCQkJdGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIGFyb3NlIC8gaHR0cDovL2dpdGh1Yi5jb20vYXJvc2UKCSAqLwoKCWZ1bmN0aW9uIE9ydGhvZ3JhcGhpY0NhbWVyYSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7CgoJCUNhbWVyYS5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdPcnRob2dyYXBoaWNDYW1lcmEnOwoKCQl0aGlzLnpvb20gPSAxOwoJCXRoaXMudmlldyA9IG51bGw7CgoJCXRoaXMubGVmdCA9ICggbGVmdCAhPT0gdW5kZWZpbmVkICkgPyBsZWZ0IDogLSAxOwoJCXRoaXMucmlnaHQgPSAoIHJpZ2h0ICE9PSB1bmRlZmluZWQgKSA/IHJpZ2h0IDogMTsKCQl0aGlzLnRvcCA9ICggdG9wICE9PSB1bmRlZmluZWQgKSA/IHRvcCA6IDE7CgkJdGhpcy5ib3R0b20gPSAoIGJvdHRvbSAhPT0gdW5kZWZpbmVkICkgPyBib3R0b20gOiAtIDE7CgoJCXRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMC4xOwoJCXRoaXMuZmFyID0gKCBmYXIgIT09IHVuZGVmaW5lZCApID8gZmFyIDogMjAwMDsKCgkJdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgoJfQoKCU9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDYW1lcmEucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IE9ydGhvZ3JhcGhpY0NhbWVyYSwKCgkJaXNPcnRob2dyYXBoaWNDYW1lcmE6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7CgoJCQlDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTsKCgkJCXRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0OwoJCQl0aGlzLnJpZ2h0ID0gc291cmNlLnJpZ2h0OwoJCQl0aGlzLnRvcCA9IHNvdXJjZS50b3A7CgkJCXRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTsKCQkJdGhpcy5uZWFyID0gc291cmNlLm5lYXI7CgkJCXRoaXMuZmFyID0gc291cmNlLmZhcjsKCgkJCXRoaXMuem9vbSA9IHNvdXJjZS56b29tOwoJCQl0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHsKCgkJCWlmICggdGhpcy52aWV3ID09PSBudWxsICkgewoKCQkJCXRoaXMudmlldyA9IHsKCQkJCQllbmFibGVkOiB0cnVlLAoJCQkJCWZ1bGxXaWR0aDogMSwKCQkJCQlmdWxsSGVpZ2h0OiAxLAoJCQkJCW9mZnNldFg6IDAsCgkJCQkJb2Zmc2V0WTogMCwKCQkJCQl3aWR0aDogMSwKCQkJCQloZWlnaHQ6IDEKCQkJCX07CgoJCQl9CgoJCQl0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7CgkJCXRoaXMudmlldy5mdWxsV2lkdGggPSBmdWxsV2lkdGg7CgkJCXRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDsKCQkJdGhpcy52aWV3Lm9mZnNldFggPSB4OwoJCQl0aGlzLnZpZXcub2Zmc2V0WSA9IHk7CgkJCXRoaXMudmlldy53aWR0aCA9IHdpZHRoOwoJCQl0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0OwoKCQkJdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgoJCX0sCgoJCWNsZWFyVmlld09mZnNldDogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7CgoJCQkJdGhpcy52aWV3LmVuYWJsZWQgPSBmYWxzZTsKCgkJCX0KCgkJCXRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKCQl9LAoKCQl1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZHggPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvICggMiAqIHRoaXMuem9vbSApOwoJCQl2YXIgZHkgPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvICggMiAqIHRoaXMuem9vbSApOwoJCQl2YXIgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7CgkJCXZhciBjeSA9ICggdGhpcy50b3AgKyB0aGlzLmJvdHRvbSApIC8gMjsKCgkJCXZhciBsZWZ0ID0gY3ggLSBkeDsKCQkJdmFyIHJpZ2h0ID0gY3ggKyBkeDsKCQkJdmFyIHRvcCA9IGN5ICsgZHk7CgkJCXZhciBib3R0b20gPSBjeSAtIGR5OwoKCQkJaWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7CgoJCQkJdmFyIHpvb21XID0gdGhpcy56b29tIC8gKCB0aGlzLnZpZXcud2lkdGggLyB0aGlzLnZpZXcuZnVsbFdpZHRoICk7CgkJCQl2YXIgem9vbUggPSB0aGlzLnpvb20gLyAoIHRoaXMudmlldy5oZWlnaHQgLyB0aGlzLnZpZXcuZnVsbEhlaWdodCApOwoJCQkJdmFyIHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LndpZHRoOwoJCQkJdmFyIHNjYWxlSCA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gdGhpcy52aWV3LmhlaWdodDsKCgkJCQlsZWZ0ICs9IHNjYWxlVyAqICggdGhpcy52aWV3Lm9mZnNldFggLyB6b29tVyApOwoJCQkJcmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogKCB0aGlzLnZpZXcud2lkdGggLyB6b29tVyApOwoJCQkJdG9wIC09IHNjYWxlSCAqICggdGhpcy52aWV3Lm9mZnNldFkgLyB6b29tSCApOwoJCQkJYm90dG9tID0gdG9wIC0gc2NhbGVIICogKCB0aGlzLnZpZXcuaGVpZ2h0IC8gem9vbUggKTsKCgkJCX0KCgkJCXRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIgKTsKCgkJCXRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkgewoKCQkJdmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTsKCgkJCWRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207CgkJCWRhdGEub2JqZWN0LmxlZnQgPSB0aGlzLmxlZnQ7CgkJCWRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDsKCQkJZGF0YS5vYmplY3QudG9wID0gdGhpcy50b3A7CgkJCWRhdGEub2JqZWN0LmJvdHRvbSA9IHRoaXMuYm90dG9tOwoJCQlkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyOwoJCQlkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjsKCgkJCWlmICggdGhpcy52aWV3ICE9PSBudWxsICkgeyBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApOyB9CgoJCQlyZXR1cm4gZGF0YTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCkgewoKCQlMaWdodFNoYWRvdy5jYWxsKCB0aGlzLCBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDUsIDUsIDUsIC0gNSwgMC41LCA1MDAgKSApOwoKCX0KCglEaXJlY3Rpb25hbExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93LAoKCQlpc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3c6IHRydWUsCgoJCXVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAoIGxpZ2h0ICkgewoKCQkJTGlnaHRTaGFkb3cucHJvdG90eXBlLnVwZGF0ZU1hdHJpY2VzLmNhbGwoIHRoaXMsIGxpZ2h0ICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7CgoJCUxpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTsKCgkJdGhpcy50eXBlID0gJ0RpcmVjdGlvbmFsTGlnaHQnOwoKCQl0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApOwoJCXRoaXMudXBkYXRlTWF0cml4KCk7CgoJCXRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7CgoJCXRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTsKCgl9CgoJRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogRGlyZWN0aW9uYWxMaWdodCwKCgkJaXNEaXJlY3Rpb25hbExpZ2h0OiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7CgoJCQl0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIEFtYmllbnRMaWdodCggY29sb3IsIGludGVuc2l0eSApIHsKCgkJTGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApOwoKCQl0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JzsKCgkJdGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkOwoKCX0KCglBbWJpZW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEFtYmllbnRMaWdodCwKCgkJaXNBbWJpZW50TGlnaHQ6IHRydWUKCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGFiZWxuYXRpb24gLyBodHRwOi8vZ2l0aHViLmNvbS9hYmVsbmF0aW9uCgkgKi8KCglmdW5jdGlvbiBSZWN0QXJlYUxpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCB3aWR0aCwgaGVpZ2h0ICkgewoKCQlMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7CgoJCXRoaXMudHlwZSA9ICdSZWN0QXJlYUxpZ2h0JzsKCgkJdGhpcy53aWR0aCA9ICggd2lkdGggIT09IHVuZGVmaW5lZCApID8gd2lkdGggOiAxMDsKCQl0aGlzLmhlaWdodCA9ICggaGVpZ2h0ICE9PSB1bmRlZmluZWQgKSA/IGhlaWdodCA6IDEwOwoKCX0KCglSZWN0QXJlYUxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBSZWN0QXJlYUxpZ2h0LAoKCQlpc1JlY3RBcmVhTGlnaHQ6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJTGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7CgoJCQl0aGlzLndpZHRoID0gc291cmNlLndpZHRoOwoJCQl0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7CgoJCQl2YXIgZGF0YSA9IExpZ2h0LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApOwoKCQkJZGF0YS5vYmplY3Qud2lkdGggPSB0aGlzLndpZHRoOwoJCQlkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDsKCgkJCXJldHVybiBkYXRhOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIE1hdGVyaWFsTG9hZGVyKCBtYW5hZ2VyICkgewoKCQlMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApOwoKCQl0aGlzLnRleHR1cmVzID0ge307CgoJfQoKCU1hdGVyaWFsTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogTWF0ZXJpYWxMb2FkZXIsCgoJCWxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJdmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7CgkJCWxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7CgkJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHsKCgkJCQlvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApOwoKCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQl9LAoKCQlwYXJzZTogZnVuY3Rpb24gKCBqc29uICkgewoKCQkJdmFyIHRleHR1cmVzID0gdGhpcy50ZXh0dXJlczsKCgkJCWZ1bmN0aW9uIGdldFRleHR1cmUoIG5hbWUgKSB7CgoJCQkJaWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsTG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZScsIG5hbWUgKTsKCgkJCQl9CgoJCQkJcmV0dXJuIHRleHR1cmVzWyBuYW1lIF07CgoJCQl9CgoJCQl2YXIgbWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxzWyBqc29uLnR5cGUgXSgpOwoKCQkJaWYgKCBqc29uLnV1aWQgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDsgfQoJCQlpZiAoIGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5uYW1lID0ganNvbi5uYW1lOyB9CgkJCWlmICgganNvbi5jb2xvciAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5jb2xvci5zZXRIZXgoIGpzb24uY29sb3IgKTsgfQoJCQlpZiAoIGpzb24ucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnJvdWdobmVzcyA9IGpzb24ucm91Z2huZXNzOyB9CgkJCWlmICgganNvbi5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwubWV0YWxuZXNzID0ganNvbi5tZXRhbG5lc3M7IH0KCQkJaWYgKCBqc29uLnNoZWVuICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnNoZWVuID0gbmV3IENvbG9yKCkuc2V0SGV4KCBqc29uLnNoZWVuICk7IH0KCQkJaWYgKCBqc29uLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmVtaXNzaXZlLnNldEhleCgganNvbi5lbWlzc2l2ZSApOyB9CgkJCWlmICgganNvbi5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zcGVjdWxhci5zZXRIZXgoIGpzb24uc3BlY3VsYXIgKTsgfQoJCQlpZiAoIGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnNoaW5pbmVzcyA9IGpzb24uc2hpbmluZXNzOyB9CgkJCWlmICgganNvbi5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuY2xlYXJjb2F0ID0ganNvbi5jbGVhcmNvYXQ7IH0KCQkJaWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBqc29uLmNsZWFyY29hdFJvdWdobmVzczsgfQoJCQlpZiAoIGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGpzb24udmVydGV4Q29sb3JzOyB9CgkJCWlmICgganNvbi5mb2cgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZm9nID0ganNvbi5mb2c7IH0KCQkJaWYgKCBqc29uLmZsYXRTaGFkaW5nICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5mbGF0U2hhZGluZzsgfQoJCQlpZiAoIGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuYmxlbmRpbmcgPSBqc29uLmJsZW5kaW5nOyB9CgkJCWlmICgganNvbi5jb21iaW5lICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmNvbWJpbmUgPSBqc29uLmNvbWJpbmU7IH0KCQkJaWYgKCBqc29uLnNpZGUgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuc2lkZSA9IGpzb24uc2lkZTsgfQoJCQlpZiAoIGpzb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5vcGFjaXR5ID0ganNvbi5vcGFjaXR5OyB9CgkJCWlmICgganNvbi50cmFuc3BhcmVudCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGpzb24udHJhbnNwYXJlbnQ7IH0KCQkJaWYgKCBqc29uLmFscGhhVGVzdCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDsgfQoJCQlpZiAoIGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmRlcHRoVGVzdCA9IGpzb24uZGVwdGhUZXN0OyB9CgkJCWlmICgganNvbi5kZXB0aFdyaXRlICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBqc29uLmRlcHRoV3JpdGU7IH0KCQkJaWYgKCBqc29uLmNvbG9yV3JpdGUgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuY29sb3JXcml0ZSA9IGpzb24uY29sb3JXcml0ZTsgfQoKCQkJaWYgKCBqc29uLnN0ZW5jaWxXcml0ZSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPSBqc29uLnN0ZW5jaWxXcml0ZTsgfQoJCQlpZiAoIGpzb24uc3RlbmNpbFdyaXRlTWFzayAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrID0ganNvbi5zdGVuY2lsV3JpdGVNYXNrOyB9CgkJCWlmICgganNvbi5zdGVuY2lsRnVuYyAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zdGVuY2lsRnVuYyA9IGpzb24uc3RlbmNpbEZ1bmM7IH0KCQkJaWYgKCBqc29uLnN0ZW5jaWxSZWYgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuc3RlbmNpbFJlZiA9IGpzb24uc3RlbmNpbFJlZjsgfQoJCQlpZiAoIGpzb24uc3RlbmNpbEZ1bmNNYXNrICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnN0ZW5jaWxGdW5jTWFzayA9IGpzb24uc3RlbmNpbEZ1bmNNYXNrOyB9CgkJCWlmICgganNvbi5zdGVuY2lsRmFpbCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zdGVuY2lsRmFpbCA9IGpzb24uc3RlbmNpbEZhaWw7IH0KCQkJaWYgKCBqc29uLnN0ZW5jaWxaRmFpbCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zdGVuY2lsWkZhaWwgPSBqc29uLnN0ZW5jaWxaRmFpbDsgfQoJCQlpZiAoIGpzb24uc3RlbmNpbFpQYXNzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyA9IGpzb24uc3RlbmNpbFpQYXNzOyB9CgoJCQlpZiAoIGpzb24ud2lyZWZyYW1lICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lOyB9CgkJCWlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoID0ganNvbi53aXJlZnJhbWVMaW5ld2lkdGg7IH0KCQkJaWYgKCBqc29uLndpcmVmcmFtZUxpbmVjYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWNhcCA9IGpzb24ud2lyZWZyYW1lTGluZWNhcDsgfQoJCQlpZiAoIGpzb24ud2lyZWZyYW1lTGluZWpvaW4gIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luOyB9CgoJCQlpZiAoIGpzb24ucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwucm90YXRpb24gPSBqc29uLnJvdGF0aW9uOyB9CgoJCQlpZiAoIGpzb24ubGluZXdpZHRoICE9PSAxICkgeyBtYXRlcmlhbC5saW5ld2lkdGggPSBqc29uLmxpbmV3aWR0aDsgfQoJCQlpZiAoIGpzb24uZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplOyB9CgkJCWlmICgganNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmdhcFNpemUgPSBqc29uLmdhcFNpemU7IH0KCQkJaWYgKCBqc29uLnNjYWxlICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnNjYWxlID0ganNvbi5zY2FsZTsgfQoKCQkJaWYgKCBqc29uLnBvbHlnb25PZmZzZXQgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDsgfQoJCQlpZiAoIGpzb24ucG9seWdvbk9mZnNldEZhY3RvciAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yID0ganNvbi5wb2x5Z29uT2Zmc2V0RmFjdG9yOyB9CgkJCWlmICgganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7IH0KCgkJCWlmICgganNvbi5za2lubmluZyAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5za2lubmluZyA9IGpzb24uc2tpbm5pbmc7IH0KCQkJaWYgKCBqc29uLm1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPSBqc29uLm1vcnBoVGFyZ2V0czsgfQoJCQlpZiAoIGpzb24ubW9ycGhOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLm1vcnBoTm9ybWFscyA9IGpzb24ubW9ycGhOb3JtYWxzOyB9CgkJCWlmICgganNvbi5kaXRoZXJpbmcgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZGl0aGVyaW5nID0ganNvbi5kaXRoZXJpbmc7IH0KCgkJCWlmICgganNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnZpc2libGUgPSBqc29uLnZpc2libGU7IH0KCgkJCWlmICgganNvbi50b25lTWFwcGVkICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnRvbmVNYXBwZWQgPSBqc29uLnRvbmVNYXBwZWQ7IH0KCgkJCWlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7IH0KCgkJCS8vIFNoYWRlciBNYXRlcmlhbAoKCQkJaWYgKCBqc29uLnVuaWZvcm1zICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJZm9yICggdmFyIG5hbWUgaW4ganNvbi51bmlmb3JtcyApIHsKCgkJCQkJdmFyIHVuaWZvcm0gPSBqc29uLnVuaWZvcm1zWyBuYW1lIF07CgoJCQkJCW1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0gPSB7fTsKCgkJCQkJc3dpdGNoICggdW5pZm9ybS50eXBlICkgewoKCQkJCQkJY2FzZSAndCc6CgkJCQkJCQltYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gZ2V0VGV4dHVyZSggdW5pZm9ybS52YWx1ZSApOwoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICdjJzoKCQkJCQkJCW1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIHVuaWZvcm0udmFsdWUgKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAndjInOgoJCQkJCQkJbWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7CgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ3YzJzoKCQkJCQkJCW1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApOwoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICd2NCc6CgkJCQkJCQltYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnbTMnOgoJCQkJCQkJbWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7CgoJCQkJCQljYXNlICdtNCc6CgkJCQkJCQltYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJZGVmYXVsdDoKCQkJCQkJCW1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSB1bmlmb3JtLnZhbHVlOwoKCQkJCQl9CgoJCQkJfQoKCQkJfQoKCQkJaWYgKCBqc29uLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZGVmaW5lcyA9IGpzb24uZGVmaW5lczsgfQoJCQlpZiAoIGpzb24udmVydGV4U2hhZGVyICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnZlcnRleFNoYWRlciA9IGpzb24udmVydGV4U2hhZGVyOyB9CgkJCWlmICgganNvbi5mcmFnbWVudFNoYWRlciAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IGpzb24uZnJhZ21lbnRTaGFkZXI7IH0KCgkJCWlmICgganNvbi5leHRlbnNpb25zICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJZm9yICggdmFyIGtleSBpbiBqc29uLmV4dGVuc2lvbnMgKSB7CgoJCQkJCW1hdGVyaWFsLmV4dGVuc2lvbnNbIGtleSBdID0ganNvbi5leHRlbnNpb25zWyBrZXkgXTsKCgkJCQl9CgoJCQl9CgoJCQkvLyBEZXByZWNhdGVkCgoJCQlpZiAoIGpzb24uc2hhZGluZyAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uc2hhZGluZyA9PT0gMTsgfSAvLyBUSFJFRS5GbGF0U2hhZGluZwoKCQkJLy8gZm9yIFBvaW50c01hdGVyaWFsCgoJCQlpZiAoIGpzb24uc2l6ZSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplOyB9CgkJCWlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID0ganNvbi5zaXplQXR0ZW51YXRpb247IH0KCgkJCS8vIG1hcHMKCgkJCWlmICgganNvbi5tYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTsgfQoJCQlpZiAoIGpzb24ubWF0Y2FwICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLm1hdGNhcCA9IGdldFRleHR1cmUoIGpzb24ubWF0Y2FwICk7IH0KCgkJCWlmICgganNvbi5hbHBoYU1hcCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCW1hdGVyaWFsLmFscGhhTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hbHBoYU1hcCApOwoJCQkJbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlOwoKCQkJfQoKCQkJaWYgKCBqc29uLmJ1bXBNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuYnVtcE1hcCA9IGdldFRleHR1cmUoIGpzb24uYnVtcE1hcCApOyB9CgkJCWlmICgganNvbi5idW1wU2NhbGUgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7IH0KCgkJCWlmICgganNvbi5ub3JtYWxNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5ub3JtYWxNYXAgKTsgfQoJCQlpZiAoIGpzb24ubm9ybWFsTWFwVHlwZSAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlOyB9CgkJCWlmICgganNvbi5ub3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXZhciBub3JtYWxTY2FsZSA9IGpzb24ubm9ybWFsU2NhbGU7CgoJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBub3JtYWxTY2FsZSApID09PSBmYWxzZSApIHsKCgkJCQkJLy8gQmxlbmRlciBleHBvcnRlciB1c2VkIHRvIGV4cG9ydCBhIHNjYWxhci4gU2VlICM3NDU5CgoJCQkJCW5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTsKCgkJCQl9CgoJCQkJbWF0ZXJpYWwubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggbm9ybWFsU2NhbGUgKTsKCgkJCX0KCgkJCWlmICgganNvbi5kaXNwbGFjZW1lbnRNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5kaXNwbGFjZW1lbnRNYXAgKTsgfQoJCQlpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgPSBqc29uLmRpc3BsYWNlbWVudFNjYWxlOyB9CgkJCWlmICgganNvbi5kaXNwbGFjZW1lbnRCaWFzICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSBqc29uLmRpc3BsYWNlbWVudEJpYXM7IH0KCgkJCWlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwucm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5yb3VnaG5lc3NNYXAgKTsgfQoJCQlpZiAoIGpzb24ubWV0YWxuZXNzTWFwICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLm1ldGFsbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ubWV0YWxuZXNzTWFwICk7IH0KCgkJCWlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IGdldFRleHR1cmUoIGpzb24uZW1pc3NpdmVNYXAgKTsgfQoJCQlpZiAoIGpzb24uZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgPSBqc29uLmVtaXNzaXZlSW50ZW5zaXR5OyB9CgoJCQlpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyTWFwICk7IH0KCgkJCWlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuZW52TWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbnZNYXAgKTsgfQoJCQlpZiAoIGpzb24uZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IGpzb24uZW52TWFwSW50ZW5zaXR5OyB9CgoJCQlpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IGpzb24ucmVmbGVjdGl2aXR5OyB9CgkJCWlmICgganNvbi5yZWZyYWN0aW9uUmF0aW8gIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0ganNvbi5yZWZyYWN0aW9uUmF0aW87IH0KCgkJCWlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbC5saWdodE1hcCA9IGdldFRleHR1cmUoIGpzb24ubGlnaHRNYXAgKTsgfQoJCQlpZiAoIGpzb24ubGlnaHRNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5OyB9CgoJCQlpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIHsgbWF0ZXJpYWwuYW9NYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFvTWFwICk7IH0KCQkJaWYgKCBqc29uLmFvTWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0ganNvbi5hb01hcEludGVuc2l0eTsgfQoKCQkJaWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmdyYWRpZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5ncmFkaWVudE1hcCApOyB9CgoJCQlpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICk7IH0KCQkJaWYgKCBqc29uLmNsZWFyY29hdE5vcm1hbFNjYWxlICE9PSB1bmRlZmluZWQgKSB7IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTsgfQoKCQkJcmV0dXJuIG1hdGVyaWFsOwoKCQl9LAoKCQlzZXRUZXh0dXJlczogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCXRoaXMudGV4dHVyZXMgPSB2YWx1ZTsKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIERvbiBNY0N1cmR5IC8gaHR0cHM6Ly93d3cuZG9ubWNjdXJkeS5jb20KCSAqLwoKCXZhciBMb2FkZXJVdGlscyA9IHsKCgkJZGVjb2RlVGV4dDogZnVuY3Rpb24gKCBhcnJheSApIHsKCgkJCWlmICggdHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyApIHsKCgkJCQlyZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKCBhcnJheSApOwoKCQkJfQoKCQkJLy8gQXZvaWQgdGhlIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkpIHNob3J0Y3V0LCB3aGljaAoJCQkvLyB0aHJvd3MgYSAibWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWQiIGVycm9yIGZvciBsYXJnZSBhcnJheXMuCgoJCQl2YXIgcyA9ICcnOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCS8vIEltcGxpY2l0bHkgYXNzdW1lcyBsaXR0bGUtZW5kaWFuLgoJCQkJcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBhcnJheVsgaSBdICk7CgoJCQl9CgoJCQl0cnkgewoKCQkJCS8vIG1lcmdlcyBtdWx0aS1ieXRlIHV0Zi04IGNoYXJhY3RlcnMuCgoJCQkJcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTsKCgkJCX0gY2F0Y2ggKCBlICkgeyAvLyBzZWUgIzE2MzU4CgoJCQkJcmV0dXJuIHM7CgoJCQl9CgoJCX0sCgoJCWV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAoIHVybCApIHsKCgkJCXZhciBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7CgoJCQlpZiAoIGluZGV4ID09PSAtIDEgKSB7IHJldHVybiAnLi8nOyB9CgoJCQlyZXR1cm4gdXJsLnN1YnN0ciggMCwgaW5kZXggKyAxICk7CgoJCX0KCgl9OwoKCS8qKgoJICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zCgkgKi8KCglmdW5jdGlvbiBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSgpIHsKCgkJQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknOwoJCXRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSB1bmRlZmluZWQ7CgoJfQoKCUluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSwKCgkJaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCQlCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSBzb3VyY2UubWF4SW5zdGFuY2VkQ291bnQ7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApOwoKCQkJZGF0YS5tYXhJbnN0YW5jZWRDb3VudCA9IHRoaXMubWF4SW5zdGFuY2VkQ291bnQ7CgoJCQlkYXRhLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPSB0cnVlOwoKCQkJcmV0dXJuIGRhdGE7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXMKCSAqLwoKCWZ1bmN0aW9uIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkLCBtZXNoUGVyQXR0cmlidXRlICkgewoKCQlpZiAoIHR5cGVvZiAoIG5vcm1hbGl6ZWQgKSA9PT0gJ251bWJlcicgKSB7CgoJCQltZXNoUGVyQXR0cmlidXRlID0gbm9ybWFsaXplZDsKCgkJCW5vcm1hbGl6ZWQgPSBmYWxzZTsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IFRoZSBjb25zdHJ1Y3RvciBub3cgZXhwZWN0cyBub3JtYWxpemVkIGFzIHRoZSB0aGlyZCBhcmd1bWVudC4nICk7CgoJCX0KCgkJQnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApOwoKCQl0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7CgoJfQoKCUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwKCgkJaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdG9KU09OOiBmdW5jdGlvbiAoKQl7CgoJCQl2YXIgZGF0YSA9IEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTsKCgkJCWRhdGEubWVzaFBlckF0dHJpYnV0ZSA9IHRoaXMubWVzaFBlckF0dHJpYnV0ZTsKCgkJCWRhdGEuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlOwoKCQkJcmV0dXJuIGRhdGE7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gQnVmZmVyR2VvbWV0cnlMb2FkZXIoIG1hbmFnZXIgKSB7CgoJCUxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJfQoKCUJ1ZmZlckdlb21ldHJ5TG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQnVmZmVyR2VvbWV0cnlMb2FkZXIsCgoJCWxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJdmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7CgkJCWxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7CgkJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHsKCgkJCQlvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApOwoKCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQl9LAoKCQlwYXJzZTogZnVuY3Rpb24gKCBqc29uICkgewoKCQkJdmFyIGdlb21ldHJ5ID0ganNvbi5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID8gbmV3IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KCkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCgkJCXZhciBpbmRleCA9IGpzb24uZGF0YS5pbmRleDsKCgkJCWlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgdHlwZWRBcnJheSA9IG5ldyBUWVBFRF9BUlJBWVNbIGluZGV4LnR5cGUgXSggaW5kZXguYXJyYXkgKTsKCQkJCWdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCAxICkgKTsKCgkJCX0KCgkJCXZhciBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7CgoJCQlmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7CgoJCQkJdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdOwoJCQkJdmFyIHR5cGVkQXJyYXkgPSBuZXcgVFlQRURfQVJSQVlTWyBhdHRyaWJ1dGUudHlwZSBdKCBhdHRyaWJ1dGUuYXJyYXkgKTsKCQkJCXZhciBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7CgkJCQl2YXIgYnVmZmVyQXR0cmlidXRlID0gbmV3IGJ1ZmZlckF0dHJpYnV0ZUNvbnN0ciggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApOwoJCQkJaWYgKCBhdHRyaWJ1dGUubmFtZSAhPT0gdW5kZWZpbmVkICkgeyBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lOyB9CgkJCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGtleSwgYnVmZmVyQXR0cmlidXRlICk7CgoJCQl9CgoJCQl2YXIgbW9ycGhBdHRyaWJ1dGVzID0ganNvbi5kYXRhLm1vcnBoQXR0cmlidXRlczsKCgkJCWlmICggbW9ycGhBdHRyaWJ1dGVzICkgewoKCQkJCWZvciAoIHZhciBrZXkgaW4gbW9ycGhBdHRyaWJ1dGVzICkgewoKCQkJCQl2YXIgYXR0cmlidXRlQXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleSBdOwoKCQkJCQl2YXIgYXJyYXkgPSBbXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQkJdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5WyBpIF07CgkJCQkJCXZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgYXR0cmlidXRlLnR5cGUgXSggYXR0cmlidXRlLmFycmF5ICk7CgoJCQkJCQl2YXIgYnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApOwoJCQkJCQlpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSB7IGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7IH0KCQkJCQkJYXJyYXkucHVzaCggYnVmZmVyQXR0cmlidXRlICk7CgoJCQkJCX0KCgkJCQkJZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXSA9IGFycmF5OwoKCQkJCX0KCgkJCX0KCgkJCXZhciBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGpzb24uZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZTsKCgkJCWlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7CgoJCQkJZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0cnVlOwoKCQkJfQoKCQkJdmFyIGdyb3VwcyA9IGpzb24uZGF0YS5ncm91cHMgfHwganNvbi5kYXRhLmRyYXdjYWxscyB8fCBqc29uLmRhdGEub2Zmc2V0czsKCgkJCWlmICggZ3JvdXBzICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gZ3JvdXBzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQkJdmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07CgoJCQkJCWdlb21ldHJ5LmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTsKCgkJCQl9CgoJCQl9CgoJCQl2YXIgYm91bmRpbmdTcGhlcmUgPSBqc29uLmRhdGEuYm91bmRpbmdTcGhlcmU7CgoJCQlpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIGNlbnRlciA9IG5ldyBWZWN0b3IzKCk7CgoJCQkJaWYgKCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJY2VudGVyLmZyb21BcnJheSggYm91bmRpbmdTcGhlcmUuY2VudGVyICk7CgoJCQkJfQoKCQkJCWdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSggY2VudGVyLCBib3VuZGluZ1NwaGVyZS5yYWRpdXMgKTsKCgkJCX0KCgkJCWlmICgganNvbi5uYW1lICkgeyBnZW9tZXRyeS5uYW1lID0ganNvbi5uYW1lOyB9CgkJCWlmICgganNvbi51c2VyRGF0YSApIHsgZ2VvbWV0cnkudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhOyB9CgoJCQlyZXR1cm4gZ2VvbWV0cnk7CgoJCX0KCgl9ICk7CgoJdmFyIFRZUEVEX0FSUkFZUyA9IHsKCQlJbnQ4QXJyYXk6IEludDhBcnJheSwKCQlVaW50OEFycmF5OiBVaW50OEFycmF5LAoJCS8vIFdvcmthcm91bmQgZm9yIElFMTEgcHJlIEtCMjkyOTQzNy4gU2VlICMxMTQ0MAoJCVVpbnQ4Q2xhbXBlZEFycmF5OiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhDbGFtcGVkQXJyYXkgOiBVaW50OEFycmF5LAoJCUludDE2QXJyYXk6IEludDE2QXJyYXksCgkJVWludDE2QXJyYXk6IFVpbnQxNkFycmF5LAoJCUludDMyQXJyYXk6IEludDMyQXJyYXksCgkJVWludDMyQXJyYXk6IFVpbnQzMkFycmF5LAoJCUZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LAoJCUZsb2F0NjRBcnJheTogRmxvYXQ2NEFycmF5Cgl9OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIE9iamVjdExvYWRlciggbWFuYWdlciApIHsKCgkJTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCgl9CgoJT2JqZWN0TG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogT2JqZWN0TG9hZGVyLAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJdmFyIHNjb3BlID0gdGhpczsKCgkJCXZhciBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7CgkJCXRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDsKCgkJCXZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApOwoJCQlsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7CgkJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHsKCgkJCQl2YXIganNvbiA9IG51bGw7CgoJCQkJdHJ5IHsKCgkJCQkJanNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTsKCgkJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJCWlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgeyBvbkVycm9yKCBlcnJvciApOyB9CgoJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblwndCBwYXJzZSAnICsgdXJsICsgJy4nLCBlcnJvci5tZXNzYWdlICk7CgoJCQkJCXJldHVybjsKCgkJCQl9CgoJCQkJdmFyIG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTsKCgkJCQlpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHsKCgkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXCd0IGxvYWQgJyArIHVybCApOwoJCQkJCXJldHVybjsKCgkJCQl9CgoJCQkJc2NvcGUucGFyc2UoIGpzb24sIG9uTG9hZCApOwoKCQkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQl9LAoKCQlwYXJzZTogZnVuY3Rpb24gKCBqc29uLCBvbkxvYWQgKSB7CgoJCQl2YXIgc2hhcGVzID0gdGhpcy5wYXJzZVNoYXBlKCBqc29uLnNoYXBlcyApOwoJCQl2YXIgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApOwoKCQkJdmFyIGltYWdlcyA9IHRoaXMucGFyc2VJbWFnZXMoIGpzb24uaW1hZ2VzLCBmdW5jdGlvbiAoKSB7CgoJCQkJaWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHsgb25Mb2FkKCBvYmplY3QgKTsgfQoKCQkJfSApOwoKCQkJdmFyIHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTsKCQkJdmFyIG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIGpzb24ubWF0ZXJpYWxzLCB0ZXh0dXJlcyApOwoKCQkJdmFyIG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKTsKCgkJCWlmICgganNvbi5hbmltYXRpb25zICkgewoKCQkJCW9iamVjdC5hbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApOwoKCQkJfQoKCQkJaWYgKCBqc29uLmltYWdlcyA9PT0gdW5kZWZpbmVkIHx8IGpzb24uaW1hZ2VzLmxlbmd0aCA9PT0gMCApIHsKCgkJCQlpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgeyBvbkxvYWQoIG9iamVjdCApOyB9CgoJCQl9CgoJCQlyZXR1cm4gb2JqZWN0OwoKCQl9LAoKCQlwYXJzZVNoYXBlOiBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCQl2YXIgc2hhcGVzID0ge307CgoJCQlpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCXZhciBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTsKCgkJCQkJc2hhcGVzWyBzaGFwZS51dWlkIF0gPSBzaGFwZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gc2hhcGVzOwoKCQl9LAoKCQlwYXJzZUdlb21ldHJpZXM6IGZ1bmN0aW9uICgganNvbiwgc2hhcGVzICkgewoKCQkJdmFyIGdlb21ldHJpZXMgPSB7fTsKCgkJCWlmICgganNvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXZhciBidWZmZXJHZW9tZXRyeUxvYWRlciA9IG5ldyBCdWZmZXJHZW9tZXRyeUxvYWRlcigpOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJdmFyIGdlb21ldHJ5OwoJCQkJCXZhciBkYXRhID0ganNvblsgaSBdOwoKCQkJCQlzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7CgoJCQkJCQljYXNlICdQbGFuZUdlb21ldHJ5JzoKCQkJCQkJY2FzZSAnUGxhbmVCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS53aWR0aCwKCQkJCQkJCQlkYXRhLmhlaWdodCwKCQkJCQkJCQlkYXRhLndpZHRoU2VnbWVudHMsCgkJCQkJCQkJZGF0YS5oZWlnaHRTZWdtZW50cwoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ0JveEdlb21ldHJ5JzoKCQkJCQkJY2FzZSAnQm94QnVmZmVyR2VvbWV0cnknOgoJCQkJCQljYXNlICdDdWJlR2VvbWV0cnknOiAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZQoKCQkJCQkJCWdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKAoJCQkJCQkJCWRhdGEud2lkdGgsCgkJCQkJCQkJZGF0YS5oZWlnaHQsCgkJCQkJCQkJZGF0YS5kZXB0aCwKCQkJCQkJCQlkYXRhLndpZHRoU2VnbWVudHMsCgkJCQkJCQkJZGF0YS5oZWlnaHRTZWdtZW50cywKCQkJCQkJCQlkYXRhLmRlcHRoU2VnbWVudHMKCQkJCQkJCSk7CgoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICdDaXJjbGVHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ0NpcmNsZUJ1ZmZlckdlb21ldHJ5JzoKCgkJCQkJCQlnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXSgKCQkJCQkJCQlkYXRhLnJhZGl1cywKCQkJCQkJCQlkYXRhLnNlZ21lbnRzLAoJCQkJCQkJCWRhdGEudGhldGFTdGFydCwKCQkJCQkJCQlkYXRhLnRoZXRhTGVuZ3RoCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnQ3lsaW5kZXJHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknOgoKCQkJCQkJCWdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKAoJCQkJCQkJCWRhdGEucmFkaXVzVG9wLAoJCQkJCQkJCWRhdGEucmFkaXVzQm90dG9tLAoJCQkJCQkJCWRhdGEuaGVpZ2h0LAoJCQkJCQkJCWRhdGEucmFkaWFsU2VnbWVudHMsCgkJCQkJCQkJZGF0YS5oZWlnaHRTZWdtZW50cywKCQkJCQkJCQlkYXRhLm9wZW5FbmRlZCwKCQkJCQkJCQlkYXRhLnRoZXRhU3RhcnQsCgkJCQkJCQkJZGF0YS50aGV0YUxlbmd0aAoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ0NvbmVHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ0NvbmVCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS5yYWRpdXMsCgkJCQkJCQkJZGF0YS5oZWlnaHQsCgkJCQkJCQkJZGF0YS5yYWRpYWxTZWdtZW50cywKCQkJCQkJCQlkYXRhLmhlaWdodFNlZ21lbnRzLAoJCQkJCQkJCWRhdGEub3BlbkVuZGVkLAoJCQkJCQkJCWRhdGEudGhldGFTdGFydCwKCQkJCQkJCQlkYXRhLnRoZXRhTGVuZ3RoCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnU3BoZXJlR2VvbWV0cnknOgoJCQkJCQljYXNlICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS5yYWRpdXMsCgkJCQkJCQkJZGF0YS53aWR0aFNlZ21lbnRzLAoJCQkJCQkJCWRhdGEuaGVpZ2h0U2VnbWVudHMsCgkJCQkJCQkJZGF0YS5waGlTdGFydCwKCQkJCQkJCQlkYXRhLnBoaUxlbmd0aCwKCQkJCQkJCQlkYXRhLnRoZXRhU3RhcnQsCgkJCQkJCQkJZGF0YS50aGV0YUxlbmd0aAoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ0RvZGVjYWhlZHJvbkdlb21ldHJ5JzoKCQkJCQkJY2FzZSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknOgoJCQkJCQljYXNlICdJY29zYWhlZHJvbkdlb21ldHJ5JzoKCQkJCQkJY2FzZSAnSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ09jdGFoZWRyb25HZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1RldHJhaGVkcm9uR2VvbWV0cnknOgoJCQkJCQljYXNlICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzoKCgkJCQkJCQlnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXSgKCQkJCQkJCQlkYXRhLnJhZGl1cywKCQkJCQkJCQlkYXRhLmRldGFpbAoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ1JpbmdHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1JpbmdCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS5pbm5lclJhZGl1cywKCQkJCQkJCQlkYXRhLm91dGVyUmFkaXVzLAoJCQkJCQkJCWRhdGEudGhldGFTZWdtZW50cywKCQkJCQkJCQlkYXRhLnBoaVNlZ21lbnRzLAoJCQkJCQkJCWRhdGEudGhldGFTdGFydCwKCQkJCQkJCQlkYXRhLnRoZXRhTGVuZ3RoCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnVG9ydXNHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1RvcnVzQnVmZmVyR2VvbWV0cnknOgoKCQkJCQkJCWdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKAoJCQkJCQkJCWRhdGEucmFkaXVzLAoJCQkJCQkJCWRhdGEudHViZSwKCQkJCQkJCQlkYXRhLnJhZGlhbFNlZ21lbnRzLAoJCQkJCQkJCWRhdGEudHVidWxhclNlZ21lbnRzLAoJCQkJCQkJCWRhdGEuYXJjCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnVG9ydXNLbm90R2VvbWV0cnknOgoJCQkJCQljYXNlICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS5yYWRpdXMsCgkJCQkJCQkJZGF0YS50dWJlLAoJCQkJCQkJCWRhdGEudHVidWxhclNlZ21lbnRzLAoJCQkJCQkJCWRhdGEucmFkaWFsU2VnbWVudHMsCgkJCQkJCQkJZGF0YS5wLAoJCQkJCQkJCWRhdGEucQoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ1R1YmVHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1R1YmVCdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJLy8gVGhpcyBvbmx5IHdvcmtzIGZvciBidWlsdC1pbiBjdXJ2ZXMgKGUuZy4gQ2F0bXVsbFJvbUN1cnZlMykuCgkJCQkJCQkvLyBVc2VyIGRlZmluZWQgY3VydmVzIG9yIGluc3RhbmNlcyBvZiBDdXJ2ZVBhdGggd2lsbCBub3QgYmUgZGVzZXJpYWxpemVkLgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJbmV3IEN1cnZlc1sgZGF0YS5wYXRoLnR5cGUgXSgpLmZyb21KU09OKCBkYXRhLnBhdGggKSwKCQkJCQkJCQlkYXRhLnR1YnVsYXJTZWdtZW50cywKCQkJCQkJCQlkYXRhLnJhZGl1cywKCQkJCQkJCQlkYXRhLnJhZGlhbFNlZ21lbnRzLAoJCQkJCQkJCWRhdGEuY2xvc2VkCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnTGF0aGVHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ0xhdGhlQnVmZmVyR2VvbWV0cnknOgoKCQkJCQkJCWdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKAoJCQkJCQkJCWRhdGEucG9pbnRzLAoJCQkJCQkJCWRhdGEuc2VnbWVudHMsCgkJCQkJCQkJZGF0YS5waGlTdGFydCwKCQkJCQkJCQlkYXRhLnBoaUxlbmd0aAoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ1BvbHloZWRyb25HZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc6CgoJCQkJCQkJZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oCgkJCQkJCQkJZGF0YS52ZXJ0aWNlcywKCQkJCQkJCQlkYXRhLmluZGljZXMsCgkJCQkJCQkJZGF0YS5yYWRpdXMsCgkJCQkJCQkJZGF0YS5kZXRhaWxzCgkJCQkJCQkpOwoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSAnU2hhcGVHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ1NoYXBlQnVmZmVyR2VvbWV0cnknOgoKCQkJCQkJCXZhciBnZW9tZXRyeVNoYXBlcyA9IFtdOwoKCQkJCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJCQkJdmFyIHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07CgoJCQkJCQkJCWdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7CgoJCQkJCQkJfQoKCQkJCQkJCWdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKAoJCQkJCQkJCWdlb21ldHJ5U2hhcGVzLAoJCQkJCQkJCWRhdGEuY3VydmVTZWdtZW50cwoJCQkJCQkJKTsKCgkJCQkJCQlicmVhazsKCgoJCQkJCQljYXNlICdFeHRydWRlR2VvbWV0cnknOgoJCQkJCQljYXNlICdFeHRydWRlQnVmZmVyR2VvbWV0cnknOgoKCQkJCQkJCXZhciBnZW9tZXRyeVNoYXBlcyA9IFtdOwoKCQkJCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJCQkJdmFyIHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07CgoJCQkJCQkJCWdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7CgoJCQkJCQkJfQoKCQkJCQkJCXZhciBleHRydWRlUGF0aCA9IGRhdGEub3B0aW9ucy5leHRydWRlUGF0aDsKCgkJCQkJCQlpZiAoIGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQkJCWRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApOwoKCQkJCQkJCX0KCgkJCQkJCQlnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXSgKCQkJCQkJCQlnZW9tZXRyeVNoYXBlcywKCQkJCQkJCQlkYXRhLm9wdGlvbnMKCQkJCQkJCSk7CgoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICdCdWZmZXJHZW9tZXRyeSc6CgkJCQkJCWNhc2UgJ0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5JzoKCgkJCQkJCQlnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7CgoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlICdHZW9tZXRyeSc6CgoJCQkJCQkJaWYgKCAnVEhSRUUnIGluIHdpbmRvdyAmJiAnTGVnYWN5SlNPTkxvYWRlcicgaW4gVEhSRUUgKSB7CgoJCQkJCQkJCXZhciBnZW9tZXRyeUxvYWRlciA9IG5ldyBUSFJFRS5MZWdhY3lKU09OTG9hZGVyKCk7CgkJCQkJCQkJZ2VvbWV0cnkgPSBnZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSwgdGhpcy5yZXNvdXJjZVBhdGggKS5nZW9tZXRyeTsKCgoJCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogWW91IGhhdmUgdG8gaW1wb3J0IExlZ2FjeUpTT05Mb2FkZXIgaW4gb3JkZXIgbG9hZCBnZW9tZXRyeSBkYXRhIG9mIHR5cGUgIkdlb21ldHJ5Ii4nICk7CgoJCQkJCQkJfQoKCQkJCQkJCWJyZWFrOwoKCQkJCQkJZGVmYXVsdDoKCgkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgIicgKyBkYXRhLnR5cGUgKyAnIicgKTsKCgkJCQkJCQljb250aW51ZTsKCgkJCQkJfQoKCQkJCQlnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkOwoKCQkJCQlpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgeyBnZW9tZXRyeS5uYW1lID0gZGF0YS5uYW1lOyB9CgkJCQkJaWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ID09PSB0cnVlICYmIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIHsgZ2VvbWV0cnkudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhOyB9CgoJCQkJCWdlb21ldHJpZXNbIGRhdGEudXVpZCBdID0gZ2VvbWV0cnk7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIGdlb21ldHJpZXM7CgoJCX0sCgoJCXBhcnNlTWF0ZXJpYWxzOiBmdW5jdGlvbiAoIGpzb24sIHRleHR1cmVzICkgewoKCQkJdmFyIGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWwKCQkJdmFyIG1hdGVyaWFscyA9IHt9OwoKCQkJaWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpOwoJCQkJbG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApOwoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJdmFyIGRhdGEgPSBqc29uWyBpIF07CgoJCQkJCWlmICggZGF0YS50eXBlID09PSAnTXVsdGlNYXRlcmlhbCcgKSB7CgoJCQkJCQkvLyBEZXByZWNhdGVkCgoJCQkJCQl2YXIgYXJyYXkgPSBbXTsKCgkJCQkJCWZvciAoIHZhciBqID0gMDsgaiA8IGRhdGEubWF0ZXJpYWxzLmxlbmd0aDsgaiArKyApIHsKCgkJCQkJCQl2YXIgbWF0ZXJpYWwgPSBkYXRhLm1hdGVyaWFsc1sgaiBdOwoKCQkJCQkJCWlmICggY2FjaGVbIG1hdGVyaWFsLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCQljYWNoZVsgbWF0ZXJpYWwudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBtYXRlcmlhbCApOwoKCQkJCQkJCX0KCgkJCQkJCQlhcnJheS5wdXNoKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdICk7CgoJCQkJCQl9CgoJCQkJCQltYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gYXJyYXk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlpZiAoIGNhY2hlWyBkYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCWNhY2hlWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApOwoKCQkJCQkJfQoKCQkJCQkJbWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGNhY2hlWyBkYXRhLnV1aWQgXTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiBtYXRlcmlhbHM7CgoJCX0sCgoJCXBhcnNlQW5pbWF0aW9uczogZnVuY3Rpb24gKCBqc29uICkgewoKCQkJdmFyIGFuaW1hdGlvbnMgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpICsrICkgewoKCQkJCXZhciBkYXRhID0ganNvblsgaSBdOwoKCQkJCXZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSggZGF0YSApOwoKCQkJCWlmICggZGF0YS51dWlkICE9PSB1bmRlZmluZWQgKSB7IGNsaXAudXVpZCA9IGRhdGEudXVpZDsgfQoKCQkJCWFuaW1hdGlvbnMucHVzaCggY2xpcCApOwoKCQkJfQoKCQkJcmV0dXJuIGFuaW1hdGlvbnM7CgoJCX0sCgoJCXBhcnNlSW1hZ2VzOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHsKCgkJCXZhciBzY29wZSA9IHRoaXM7CgkJCXZhciBpbWFnZXMgPSB7fTsKCgkJCWZ1bmN0aW9uIGxvYWRJbWFnZSggdXJsICkgewoKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTsKCgkJCQlyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkgewoKCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCX0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkgewoKCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7CgkJCQkJc2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTsKCgkJCQl9ICk7CgoJCQl9CgoJCQlpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7CgoJCQkJdmFyIG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApOwoKCQkJCXZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTsKCQkJCWxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApOwoKCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQl2YXIgaW1hZ2UgPSBqc29uWyBpIF07CgkJCQkJdmFyIHVybCA9IGltYWdlLnVybDsKCgkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHsKCgkJCQkJCS8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZQoKCQkJCQkJaW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBbXTsKCgkJCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCQkJdmFyIGN1cnJlbnRVcmwgPSB1cmxbIGogXTsKCgkJCQkJCQl2YXIgcGF0aCA9IC9eKFwvXC8pfChbYS16XSs6KFwvXC8pPykvaS50ZXN0KCBjdXJyZW50VXJsICkgPyBjdXJyZW50VXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgY3VycmVudFVybDsKCgkJCQkJCQlpbWFnZXNbIGltYWdlLnV1aWQgXS5wdXNoKCBsb2FkSW1hZ2UoIHBhdGggKSApOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gbG9hZCBzaW5nbGUgaW1hZ2UKCgkJCQkJCXZhciBwYXRoID0gL14oXC9cLyl8KFthLXpdKzooXC9cLyk/KS9pLnRlc3QoIGltYWdlLnVybCApID8gaW1hZ2UudXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgaW1hZ2UudXJsOwoKCQkJCQkJaW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBsb2FkSW1hZ2UoIHBhdGggKTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiBpbWFnZXM7CgoJCX0sCgoJCXBhcnNlVGV4dHVyZXM6IGZ1bmN0aW9uICgganNvbiwgaW1hZ2VzICkgewoKCQkJZnVuY3Rpb24gcGFyc2VDb25zdGFudCggdmFsdWUsIHR5cGUgKSB7CgoJCQkJaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkgeyByZXR1cm4gdmFsdWU7IH0KCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLicsIHZhbHVlICk7CgoJCQkJcmV0dXJuIHR5cGVbIHZhbHVlIF07CgoJCQl9CgoJCQl2YXIgdGV4dHVyZXMgPSB7fTsKCgkJCWlmICgganNvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQkJdmFyIGRhdGEgPSBqc29uWyBpIF07CgoJCQkJCWlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyAiaW1hZ2UiIHNwZWNpZmllZCBmb3InLCBkYXRhLnV1aWQgKTsKCgkJCQkJfQoKCQkJCQlpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTsKCgkJCQkJfQoKCQkJCQl2YXIgdGV4dHVyZTsKCgkJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApICkgewoKCQkJCQkJdGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKTsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCXRleHR1cmUgPSBuZXcgVGV4dHVyZSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKTsKCgkJCQkJfQoKCQkJCQl0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQkJdGV4dHVyZS51dWlkID0gZGF0YS51dWlkOwoKCQkJCQlpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7IH0KCgkJCQkJaWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHsgdGV4dHVyZS5tYXBwaW5nID0gcGFyc2VDb25zdGFudCggZGF0YS5tYXBwaW5nLCBURVhUVVJFX01BUFBJTkcgKTsgfQoKCQkJCQlpZiAoIGRhdGEub2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7IHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggZGF0YS5vZmZzZXQgKTsgfQoJCQkJCWlmICggZGF0YS5yZXBlYXQgIT09IHVuZGVmaW5lZCApIHsgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCBkYXRhLnJlcGVhdCApOyB9CgkJCQkJaWYgKCBkYXRhLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLmNlbnRlci5mcm9tQXJyYXkoIGRhdGEuY2VudGVyICk7IH0KCQkJCQlpZiAoIGRhdGEucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHsgdGV4dHVyZS5yb3RhdGlvbiA9IGRhdGEucm90YXRpb247IH0KCgkJCQkJaWYgKCBkYXRhLndyYXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCXRleHR1cmUud3JhcFMgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDAgXSwgVEVYVFVSRV9XUkFQUElORyApOwoJCQkJCQl0ZXh0dXJlLndyYXBUID0gcGFyc2VDb25zdGFudCggZGF0YS53cmFwWyAxIF0sIFRFWFRVUkVfV1JBUFBJTkcgKTsKCgkJCQkJfQoKCQkJCQlpZiAoIGRhdGEuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB7IHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7IH0KCQkJCQlpZiAoIGRhdGEudHlwZSAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7IH0KCQkJCQlpZiAoIGRhdGEuZW5jb2RpbmcgIT09IHVuZGVmaW5lZCApIHsgdGV4dHVyZS5lbmNvZGluZyA9IGRhdGEuZW5jb2Rpbmc7IH0KCgkJCQkJaWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLm1pbkZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWluRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApOyB9CgkJCQkJaWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLm1hZ0ZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFnRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApOyB9CgkJCQkJaWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHsgdGV4dHVyZS5hbmlzb3Ryb3B5ID0gZGF0YS5hbmlzb3Ryb3B5OyB9CgoJCQkJCWlmICggZGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLmZsaXBZID0gZGF0YS5mbGlwWTsgfQoKCQkJCQlpZiAoIGRhdGEucHJlbXVsdGlwbHlBbHBoYSAhPT0gdW5kZWZpbmVkICkgeyB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7IH0KCQkJCQlpZiAoIGRhdGEudW5wYWNrQWxpZ25tZW50ICE9PSB1bmRlZmluZWQgKSB7IHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gZGF0YS51bnBhY2tBbGlnbm1lbnQ7IH0KCgkJCQkJdGV4dHVyZXNbIGRhdGEudXVpZCBdID0gdGV4dHVyZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gdGV4dHVyZXM7CgoJCX0sCgoJCXBhcnNlT2JqZWN0OiBmdW5jdGlvbiAoIGRhdGEsIGdlb21ldHJpZXMsIG1hdGVyaWFscyApIHsKCgkJCXZhciBvYmplY3Q7CgoJCQlmdW5jdGlvbiBnZXRHZW9tZXRyeSggbmFtZSApIHsKCgkJCQlpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBnZW9tZXRyeScsIG5hbWUgKTsKCgkJCQl9CgoJCQkJcmV0dXJuIGdlb21ldHJpZXNbIG5hbWUgXTsKCgkJCX0KCgkJCWZ1bmN0aW9uIGdldE1hdGVyaWFsKCBuYW1lICkgewoKCQkJCWlmICggbmFtZSA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm4gdW5kZWZpbmVkOyB9CgoJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7CgoJCQkJCXZhciBhcnJheSA9IFtdOwoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBuYW1lLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCQl2YXIgdXVpZCA9IG5hbWVbIGkgXTsKCgkJCQkJCWlmICggbWF0ZXJpYWxzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIHV1aWQgKTsKCgkJCQkJCX0KCgkJCQkJCWFycmF5LnB1c2goIG1hdGVyaWFsc1sgdXVpZCBdICk7CgoJCQkJCX0KCgkJCQkJcmV0dXJuIGFycmF5OwoKCQkJCX0KCgkJCQlpZiAoIG1hdGVyaWFsc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgbmFtZSApOwoKCQkJCX0KCgkJCQlyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07CgoJCQl9CgoJCQlzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7CgoJCQkJY2FzZSAnU2NlbmUnOgoKCQkJCQlvYmplY3QgPSBuZXcgU2NlbmUoKTsKCgkJCQkJaWYgKCBkYXRhLmJhY2tncm91bmQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCWlmICggTnVtYmVyLmlzSW50ZWdlciggZGF0YS5iYWNrZ3JvdW5kICkgKSB7CgoJCQkJCQkJb2JqZWN0LmJhY2tncm91bmQgPSBuZXcgQ29sb3IoIGRhdGEuYmFja2dyb3VuZCApOwoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJCWlmICggZGF0YS5mb2cgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCWlmICggZGF0YS5mb2cudHlwZSA9PT0gJ0ZvZycgKSB7CgoJCQkJCQkJb2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTsKCgkJCQkJCX0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHsKCgkJCQkJCQlvYmplY3QuZm9nID0gbmV3IEZvZ0V4cDIoIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5kZW5zaXR5ICk7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOgoKCQkJCQlvYmplY3QgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGRhdGEuZm92LCBkYXRhLmFzcGVjdCwgZGF0YS5uZWFyLCBkYXRhLmZhciApOwoKCQkJCQlpZiAoIGRhdGEuZm9jdXMgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LmZvY3VzID0gZGF0YS5mb2N1czsgfQoJCQkJCWlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC56b29tID0gZGF0YS56b29tOyB9CgkJCQkJaWYgKCBkYXRhLmZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3QuZmlsbUdhdWdlID0gZGF0YS5maWxtR2F1Z2U7IH0KCQkJCQlpZiAoIGRhdGEuZmlsbU9mZnNldCAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3QuZmlsbU9mZnNldCA9IGRhdGEuZmlsbU9mZnNldDsgfQoJCQkJCWlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApOyB9CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6CgoJCQkJCW9iamVjdCA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIGRhdGEubGVmdCwgZGF0YS5yaWdodCwgZGF0YS50b3AsIGRhdGEuYm90dG9tLCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7CgoJCQkJCWlmICggZGF0YS56b29tICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC56b29tID0gZGF0YS56b29tOyB9CgkJCQkJaWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7IH0KCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnQW1iaWVudExpZ2h0JzoKCgkJCQkJb2JqZWN0ID0gbmV3IEFtYmllbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTsKCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6CgoJCQkJCW9iamVjdCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdQb2ludExpZ2h0JzoKCgkJCQkJb2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ1JlY3RBcmVhTGlnaHQnOgoKCQkJCQlvYmplY3QgPSBuZXcgUmVjdEFyZWFMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0ICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ1Nwb3RMaWdodCc6CgoJCQkJCW9iamVjdCA9IG5ldyBTcG90TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmFuZ2xlLCBkYXRhLnBlbnVtYnJhLCBkYXRhLmRlY2F5ICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6CgoJCQkJCW9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuZ3JvdW5kQ29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ1NraW5uZWRNZXNoJzoKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyLnBhcnNlT2JqZWN0KCkgZG9lcyBub3Qgc3VwcG9ydCBTa2lubmVkTWVzaCB5ZXQuJyApOwoKCQkJCWNhc2UgJ01lc2gnOgoKCQkJCQl2YXIgZ2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApOwoJCQkJCXZhciBtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7CgoJCQkJCWlmICggZ2VvbWV0cnkuYm9uZXMgJiYgZ2VvbWV0cnkuYm9uZXMubGVuZ3RoID4gMCApIHsKCgkJCQkJCW9iamVjdCA9IG5ldyBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlvYmplY3QgPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCQkJCX0KCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnSW5zdGFuY2VkTWVzaCc6CgoJCQkJCXZhciBnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7CgkJCQkJdmFyIG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTsKCQkJCQl2YXIgY291bnQgPSBkYXRhLmNvdW50OwoJCQkJCXZhciBpbnN0YW5jZU1hdHJpeCA9IGRhdGEuaW5zdGFuY2VNYXRyaXg7CgoJCQkJCW9iamVjdCA9IG5ldyBJbnN0YW5jZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50ICk7CgkJCQkJb2JqZWN0Lmluc3RhbmNlTWF0cml4ID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggaW5zdGFuY2VNYXRyaXguYXJyYXkgKSwgMTYgKTsKCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnTE9EJzoKCgkJCQkJb2JqZWN0ID0gbmV3IExPRCgpOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdMaW5lJzoKCgkJCQkJb2JqZWN0ID0gbmV3IExpbmUoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICksIGRhdGEubW9kZSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdMaW5lTG9vcCc6CgoJCQkJCW9iamVjdCA9IG5ldyBMaW5lTG9vcCggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdMaW5lU2VnbWVudHMnOgoKCQkJCQlvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ1BvaW50Q2xvdWQnOgoJCQkJY2FzZSAnUG9pbnRzJzoKCgkJCQkJb2JqZWN0ID0gbmV3IFBvaW50cyggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdTcHJpdGUnOgoKCQkJCQlvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ0dyb3VwJzoKCgkJCQkJb2JqZWN0ID0gbmV3IEdyb3VwKCk7CgoJCQkJCWJyZWFrOwoKCQkJCWRlZmF1bHQ6CgoJCQkJCW9iamVjdCA9IG5ldyBPYmplY3QzRCgpOwoKCQkJfQoKCQkJb2JqZWN0LnV1aWQgPSBkYXRhLnV1aWQ7CgoJCQlpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3QubmFtZSA9IGRhdGEubmFtZTsgfQoKCQkJaWYgKCBkYXRhLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCW9iamVjdC5tYXRyaXguZnJvbUFycmF5KCBkYXRhLm1hdHJpeCApOwoKCQkJCWlmICggZGF0YS5tYXRyaXhBdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlOyB9CgkJCQlpZiAoIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlICkgeyBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7IH0KCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBkYXRhLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTsgfQoJCQkJaWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5yb3RhdGlvbi5mcm9tQXJyYXkoIGRhdGEucm90YXRpb24gKTsgfQoJCQkJaWYgKCBkYXRhLnF1YXRlcm5pb24gIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnF1YXRlcm5pb24uZnJvbUFycmF5KCBkYXRhLnF1YXRlcm5pb24gKTsgfQoJCQkJaWYgKCBkYXRhLnNjYWxlICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTsgfQoKCQkJfQoKCQkJaWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LmNhc3RTaGFkb3cgPSBkYXRhLmNhc3RTaGFkb3c7IH0KCQkJaWYgKCBkYXRhLnJlY2VpdmVTaGFkb3cgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSBkYXRhLnJlY2VpdmVTaGFkb3c7IH0KCgkJCWlmICggZGF0YS5zaGFkb3cgKSB7CgoJCQkJaWYgKCBkYXRhLnNoYWRvdy5iaWFzICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5zaGFkb3cuYmlhcyA9IGRhdGEuc2hhZG93LmJpYXM7IH0KCQkJCWlmICggZGF0YS5zaGFkb3cucmFkaXVzICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5zaGFkb3cucmFkaXVzID0gZGF0YS5zaGFkb3cucmFkaXVzOyB9CgkJCQlpZiAoIGRhdGEuc2hhZG93Lm1hcFNpemUgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApOyB9CgkJCQlpZiAoIGRhdGEuc2hhZG93LmNhbWVyYSAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3Quc2hhZG93LmNhbWVyYSA9IHRoaXMucGFyc2VPYmplY3QoIGRhdGEuc2hhZG93LmNhbWVyYSApOyB9CgoJCQl9CgoJCQlpZiAoIGRhdGEudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3QudmlzaWJsZSA9IGRhdGEudmlzaWJsZTsgfQoJCQlpZiAoIGRhdGEuZnJ1c3R1bUN1bGxlZCAhPT0gdW5kZWZpbmVkICkgeyBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGRhdGEuZnJ1c3R1bUN1bGxlZDsgfQoJCQlpZiAoIGRhdGEucmVuZGVyT3JkZXIgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnJlbmRlck9yZGVyID0gZGF0YS5yZW5kZXJPcmRlcjsgfQoJCQlpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTsgfQoJCQlpZiAoIGRhdGEubGF5ZXJzICE9PSB1bmRlZmluZWQgKSB7IG9iamVjdC5sYXllcnMubWFzayA9IGRhdGEubGF5ZXJzOyB9CgoJCQlpZiAoIGRhdGEuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuOwoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHsKCgkJCQkJb2JqZWN0LmFkZCggdGhpcy5wYXJzZU9iamVjdCggY2hpbGRyZW5bIGkgXSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzICkgKTsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIGRhdGEudHlwZSA9PT0gJ0xPRCcgKSB7CgoJCQkJaWYgKCBkYXRhLmF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgb2JqZWN0LmF1dG9VcGRhdGUgPSBkYXRhLmF1dG9VcGRhdGU7IH0KCgkJCQl2YXIgbGV2ZWxzID0gZGF0YS5sZXZlbHM7CgoJCQkJZm9yICggdmFyIGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHsKCgkJCQkJdmFyIGxldmVsID0gbGV2ZWxzWyBsIF07CgkJCQkJdmFyIGNoaWxkID0gb2JqZWN0LmdldE9iamVjdEJ5UHJvcGVydHkoICd1dWlkJywgbGV2ZWwub2JqZWN0ICk7CgoJCQkJCWlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCW9iamVjdC5hZGRMZXZlbCggY2hpbGQsIGxldmVsLmRpc3RhbmNlICk7CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gb2JqZWN0OwoKCQl9CgoJfSApOwoKCXZhciBURVhUVVJFX01BUFBJTkcgPSB7CgkJVVZNYXBwaW5nOiBVVk1hcHBpbmcsCgkJQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsCgkJQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsCgkJRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLAoJCUVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywKCQlTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzogU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsCgkJQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLAoJCUN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZwoJfTsKCgl2YXIgVEVYVFVSRV9XUkFQUElORyA9IHsKCQlSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsCgkJQ2xhbXBUb0VkZ2VXcmFwcGluZzogQ2xhbXBUb0VkZ2VXcmFwcGluZywKCQlNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nCgl9OwoKCXZhciBURVhUVVJFX0ZJTFRFUiA9IHsKCQlOZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLAoJCU5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyOiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwKCQlOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyOiBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLAoJCUxpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLAoJCUxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXI6IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsCgkJTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIKCX07CgoJLyoqCgkgKiBAYXV0aG9yIHRoZXNwaXRlIC8gaHR0cDovL2NsaWNrdG9yZWxlYXNlLmNvbS8KCSAqLwoKCglmdW5jdGlvbiBJbWFnZUJpdG1hcExvYWRlciggbWFuYWdlciApIHsKCgkJaWYgKCB0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGNyZWF0ZUltYWdlQml0bWFwKCkgbm90IHN1cHBvcnRlZC4nICk7CgoJCX0KCgkJaWYgKCB0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7CgoJCX0KCgkJTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCgkJdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkOwoKCX0KCglJbWFnZUJpdG1hcExvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEltYWdlQml0bWFwTG9hZGVyLAoKCQlzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKCBvcHRpb25zICkgewoKCQkJdGhpcy5vcHRpb25zID0gb3B0aW9uczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQkJaWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHsgdXJsID0gJyc7IH0KCgkJCWlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB7IHVybCA9IHRoaXMucGF0aCArIHVybDsgfQoKCQkJdXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApOwoKCQkJdmFyIHNjb3BlID0gdGhpczsKCgkJCXZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApOwoKCQkJaWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7CgoJCQkJc2V0VGltZW91dCggZnVuY3Rpb24gKCkgewoKCQkJCQlpZiAoIG9uTG9hZCApIHsgb25Mb2FkKCBjYWNoZWQgKTsgfQoKCQkJCQlzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApOwoKCQkJCX0sIDAgKTsKCgkJCQlyZXR1cm4gY2FjaGVkOwoKCQkJfQoKCQkJZmV0Y2goIHVybCApLnRoZW4oIGZ1bmN0aW9uICggcmVzICkgewoKCQkJCXJldHVybiByZXMuYmxvYigpOwoKCQkJfSApLnRoZW4oIGZ1bmN0aW9uICggYmxvYiApIHsKCgkJCQlpZiAoIHNjb3BlLm9wdGlvbnMgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJLy8gV29ya2Fyb3VuZCBmb3IgRmlyZUZveC4gSXQgY2F1c2VzIGFuIGVycm9yIGlmIHlvdSBwYXNzIG9wdGlvbnMuCgkJCQkJcmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKCBibG9iICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJcmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKCBibG9iLCBzY29wZS5vcHRpb25zICk7CgoJCQkJfQoKCQkJfSApLnRoZW4oIGZ1bmN0aW9uICggaW1hZ2VCaXRtYXAgKSB7CgoJCQkJQ2FjaGUuYWRkKCB1cmwsIGltYWdlQml0bWFwICk7CgoJCQkJaWYgKCBvbkxvYWQgKSB7IG9uTG9hZCggaW1hZ2VCaXRtYXAgKTsgfQoKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQl9ICkuY2F0Y2goIGZ1bmN0aW9uICggZSApIHsKCgkJCQlpZiAoIG9uRXJyb3IgKSB7IG9uRXJyb3IoIGUgKTsgfQoKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTsKCQkJCXNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7CgoJCQl9ICk7CgoJCQlzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nCgkgKiBtaW5pbWFsIGNsYXNzIGZvciBwcm94aW5nIGZ1bmN0aW9ucyB0byBQYXRoLiBSZXBsYWNlcyBvbGQgImV4dHJhY3RTdWJwYXRocygpIgoJICoqLwoKCWZ1bmN0aW9uIFNoYXBlUGF0aCgpIHsKCgkJdGhpcy50eXBlID0gJ1NoYXBlUGF0aCc7CgoJCXRoaXMuY29sb3IgPSBuZXcgQ29sb3IoKTsKCgkJdGhpcy5zdWJQYXRocyA9IFtdOwoJCXRoaXMuY3VycmVudFBhdGggPSBudWxsOwoKCX0KCglPYmplY3QuYXNzaWduKCBTaGFwZVBhdGgucHJvdG90eXBlLCB7CgoJCW1vdmVUbzogZnVuY3Rpb24gKCB4LCB5ICkgewoKCQkJdGhpcy5jdXJyZW50UGF0aCA9IG5ldyBQYXRoKCk7CgkJCXRoaXMuc3ViUGF0aHMucHVzaCggdGhpcy5jdXJyZW50UGF0aCApOwoJCQl0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyggeCwgeSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWxpbmVUbzogZnVuY3Rpb24gKCB4LCB5ICkgewoKCQkJdGhpcy5jdXJyZW50UGF0aC5saW5lVG8oIHgsIHkgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUHgsIGFDUHksIGFYLCBhWSApIHsKCgkJCXRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkgewoKCQkJdGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3BsaW5lVGhydTogZnVuY3Rpb24gKCBwdHMgKSB7CgoJCQl0aGlzLmN1cnJlbnRQYXRoLnNwbGluZVRocnUoIHB0cyApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvU2hhcGVzOiBmdW5jdGlvbiAoIGlzQ0NXLCBub0hvbGVzICkgewoKCQkJZnVuY3Rpb24gdG9TaGFwZXNOb0hvbGVzKCBpblN1YnBhdGhzICkgewoKCQkJCXZhciBzaGFwZXMgPSBbXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCXZhciB0bXBQYXRoID0gaW5TdWJwYXRoc1sgaSBdOwoKCQkJCQl2YXIgdG1wU2hhcGUgPSBuZXcgU2hhcGUoKTsKCQkJCQl0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlczsKCgkJCQkJc2hhcGVzLnB1c2goIHRtcFNoYXBlICk7CgoJCQkJfQoKCQkJCXJldHVybiBzaGFwZXM7CgoJCQl9CgoJCQlmdW5jdGlvbiBpc1BvaW50SW5zaWRlUG9seWdvbiggaW5QdCwgaW5Qb2x5Z29uICkgewoKCQkJCXZhciBwb2x5TGVuID0gaW5Qb2x5Z29uLmxlbmd0aDsKCgkJCQkvLyBpblB0IG9uIHBvbHlnb24gY29udG91ciA9PiBpbW1lZGlhdGUgc3VjY2VzcyAgICBvcgoJCQkJLy8gdG9nZ2xpbmcgb2YgaW5zaWRlL291dHNpZGUgYXQgZXZlcnkgc2luZ2xlISBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgYW4gZWRnZQoJCQkJLy8gIHdpdGggdGhlIGhvcml6b250YWwgbGluZSB0aHJvdWdoIGluUHQsIGxlZnQgb2YgaW5QdAoJCQkJLy8gIG5vdCBjb3VudGluZyBsb3dlclkgZW5kcG9pbnRzIG9mIGVkZ2VzIGFuZCB3aG9sZSBlZGdlcyBvbiB0aGF0IGxpbmUKCQkJCXZhciBpbnNpZGUgPSBmYWxzZTsKCQkJCWZvciAoIHZhciBwID0gcG9seUxlbiAtIDEsIHEgPSAwOyBxIDwgcG9seUxlbjsgcCA9IHEgKysgKSB7CgoJCQkJCXZhciBlZGdlTG93UHQgPSBpblBvbHlnb25bIHAgXTsKCQkJCQl2YXIgZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcSBdOwoKCQkJCQl2YXIgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7CgkJCQkJdmFyIGVkZ2VEeSA9IGVkZ2VIaWdoUHQueSAtIGVkZ2VMb3dQdC55OwoKCQkJCQlpZiAoIE1hdGguYWJzKCBlZGdlRHkgKSA+IE51bWJlci5FUFNJTE9OICkgewoKCQkJCQkJLy8gbm90IHBhcmFsbGVsCgkJCQkJCWlmICggZWRnZUR5IDwgMCApIHsKCgkJCQkJCQllZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7CgkJCQkJCQllZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBwIF07IGVkZ2VEeSA9IC0gZWRnZUR5OwoKCQkJCQkJfQoJCQkJCQlpZiAoICggaW5QdC55IDwgZWRnZUxvd1B0LnkgKSB8fCAoIGluUHQueSA+IGVkZ2VIaWdoUHQueSApICkgCQl7IGNvbnRpbnVlOyB9CgoJCQkJCQlpZiAoIGluUHQueSA9PT0gZWRnZUxvd1B0LnkgKSB7CgoJCQkJCQkJaWYgKCBpblB0LnggPT09IGVkZ2VMb3dQdC54ICkJCXsgcmV0dXJuCXRydWU7IH0JCS8vIGluUHQgaXMgb24gY29udG91ciA/CgkJCQkJCQkvLyBjb250aW51ZTsJCQkJLy8gbm8gaW50ZXJzZWN0aW9uIG9yIGVkZ2VMb3dQdCA9PiBkb2Vzbid0IGNvdW50ICEhIQoKCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQl2YXIgcGVycEVkZ2UgPSBlZGdlRHkgKiAoIGluUHQueCAtIGVkZ2VMb3dQdC54ICkgLSBlZGdlRHggKiAoIGluUHQueSAtIGVkZ2VMb3dQdC55ICk7CgkJCQkJCQlpZiAoIHBlcnBFZGdlID09PSAwICkJCQkJeyByZXR1cm4JdHJ1ZTsgfQkJLy8gaW5QdCBpcyBvbiBjb250b3VyID8KCQkJCQkJCWlmICggcGVycEVkZ2UgPCAwICkgCQkJCXsgY29udGludWU7IH0KCQkJCQkJCWluc2lkZSA9ICEgaW5zaWRlOwkJLy8gdHJ1ZSBpbnRlcnNlY3Rpb24gbGVmdCBvZiBpblB0CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBwYXJhbGxlbCBvciBjb2xsaW5lYXIKCQkJCQkJaWYgKCBpblB0LnkgIT09IGVkZ2VMb3dQdC55ICkgCQl7IGNvbnRpbnVlOyB9CQkJLy8gcGFyYWxsZWwKCQkJCQkJLy8gZWRnZSBsaWVzIG9uIHRoZSBzYW1lIGhvcml6b250YWwgbGluZSBhcyBpblB0CgkJCQkJCWlmICggKCAoIGVkZ2VIaWdoUHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlTG93UHQueCApICkgfHwKCQkJCQkJCSAoICggZWRnZUxvd1B0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUhpZ2hQdC54ICkgKSApCQl7IHJldHVybgl0cnVlOyB9CS8vIGluUHQ6IFBvaW50IG9uIGNvbnRvdXIgIQoJCQkJCQkvLyBjb250aW51ZTsKCgkJCQkJfQoKCQkJCX0KCgkJCQlyZXR1cm4JaW5zaWRlOwoKCQkJfQoKCQkJdmFyIGlzQ2xvY2tXaXNlID0gU2hhcGVVdGlscy5pc0Nsb2NrV2lzZTsKCgkJCXZhciBzdWJQYXRocyA9IHRoaXMuc3ViUGF0aHM7CgkJCWlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgeyByZXR1cm4gW107IH0KCgkJCWlmICggbm9Ib2xlcyA9PT0gdHJ1ZSApCXsgcmV0dXJuCXRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTsgfQoKCgkJCXZhciBzb2xpZCwgdG1wUGF0aCwgdG1wU2hhcGUsIHNoYXBlcyA9IFtdOwoKCQkJaWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDEgKSB7CgoJCQkJdG1wUGF0aCA9IHN1YlBhdGhzWyAwIF07CgkJCQl0bXBTaGFwZSA9IG5ldyBTaGFwZSgpOwoJCQkJdG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7CgkJCQlzaGFwZXMucHVzaCggdG1wU2hhcGUgKTsKCQkJCXJldHVybiBzaGFwZXM7CgoJCQl9CgoJCQl2YXIgaG9sZXNGaXJzdCA9ICEgaXNDbG9ja1dpc2UoIHN1YlBhdGhzWyAwIF0uZ2V0UG9pbnRzKCkgKTsKCQkJaG9sZXNGaXJzdCA9IGlzQ0NXID8gISBob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDsKCgkJCS8vIGNvbnNvbGUubG9nKCJIb2xlcyBmaXJzdCIsIGhvbGVzRmlyc3QpOwoKCQkJdmFyIGJldHRlclNoYXBlSG9sZXMgPSBbXTsKCQkJdmFyIG5ld1NoYXBlcyA9IFtdOwoJCQl2YXIgbmV3U2hhcGVIb2xlcyA9IFtdOwoJCQl2YXIgbWFpbklkeCA9IDA7CgkJCXZhciB0bXBQb2ludHM7CgoJCQluZXdTaGFwZXNbIG1haW5JZHggXSA9IHVuZGVmaW5lZDsKCQkJbmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBzdWJQYXRocy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXRtcFBhdGggPSBzdWJQYXRoc1sgaSBdOwoJCQkJdG1wUG9pbnRzID0gdG1wUGF0aC5nZXRQb2ludHMoKTsKCQkJCXNvbGlkID0gaXNDbG9ja1dpc2UoIHRtcFBvaW50cyApOwoJCQkJc29saWQgPSBpc0NDVyA/ICEgc29saWQgOiBzb2xpZDsKCgkJCQlpZiAoIHNvbGlkICkgewoKCQkJCQlpZiAoICggISBob2xlc0ZpcnN0ICkgJiYgKCBuZXdTaGFwZXNbIG1haW5JZHggXSApICkJeyBtYWluSWR4ICsrOyB9CgoJCQkJCW5ld1NoYXBlc1sgbWFpbklkeCBdID0geyBzOiBuZXcgU2hhcGUoKSwgcDogdG1wUG9pbnRzIH07CgkJCQkJbmV3U2hhcGVzWyBtYWluSWR4IF0ucy5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlczsKCgkJCQkJaWYgKCBob2xlc0ZpcnN0ICkJeyBtYWluSWR4ICsrOyB9CgkJCQkJbmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107CgoJCQkJCS8vY29uc29sZS5sb2coJ2N3JywgaSk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJbmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdLnB1c2goIHsgaDogdG1wUGF0aCwgcDogdG1wUG9pbnRzWyAwIF0gfSApOwoKCQkJCQkvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTsKCgkJCQl9CgoJCQl9CgoJCQkvLyBvbmx5IEhvbGVzPyAtPiBwcm9iYWJseSBhbGwgU2hhcGVzIHdpdGggd3Jvbmcgb3JpZW50YXRpb24KCQkJaWYgKCAhIG5ld1NoYXBlc1sgMCBdICkJeyByZXR1cm4JdG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApOyB9CgoKCQkJaWYgKCBuZXdTaGFwZXMubGVuZ3RoID4gMSApIHsKCgkJCQl2YXIgYW1iaWd1b3VzID0gZmFsc2U7CgkJCQl2YXIgdG9DaGFuZ2UgPSBbXTsKCgkJCQlmb3IgKCB2YXIgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHsKCgkJCQkJYmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdID0gW107CgoJCQkJfQoKCQkJCWZvciAoIHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkgewoKCQkJCQl2YXIgc2hvID0gbmV3U2hhcGVIb2xlc1sgc0lkeCBdOwoKCQkJCQlmb3IgKCB2YXIgaElkeCA9IDA7IGhJZHggPCBzaG8ubGVuZ3RoOyBoSWR4ICsrICkgewoKCQkJCQkJdmFyIGhvID0gc2hvWyBoSWR4IF07CgkJCQkJCXZhciBob2xlX3VuYXNzaWduZWQgPSB0cnVlOwoKCQkJCQkJZm9yICggdmFyIHMySWR4ID0gMDsgczJJZHggPCBuZXdTaGFwZXMubGVuZ3RoOyBzMklkeCArKyApIHsKCgkJCQkJCQlpZiAoIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBoby5wLCBuZXdTaGFwZXNbIHMySWR4IF0ucCApICkgewoKCQkJCQkJCQlpZiAoIHNJZHggIT09IHMySWR4ICkJeyB0b0NoYW5nZS5wdXNoKCB7IGZyb21zOiBzSWR4LCB0b3M6IHMySWR4LCBob2xlOiBoSWR4IH0gKTsgfQoJCQkJCQkJCWlmICggaG9sZV91bmFzc2lnbmVkICkgewoKCQkJCQkJCQkJaG9sZV91bmFzc2lnbmVkID0gZmFsc2U7CgkJCQkJCQkJCWJldHRlclNoYXBlSG9sZXNbIHMySWR4IF0ucHVzaCggaG8gKTsKCgkJCQkJCQkJfSBlbHNlIHsKCgkJCQkJCQkJCWFtYmlndW91cyA9IHRydWU7CgoJCQkJCQkJCX0KCgkJCQkJCQl9CgoJCQkJCQl9CgkJCQkJCWlmICggaG9sZV91bmFzc2lnbmVkICkgewoKCQkJCQkJCWJldHRlclNoYXBlSG9sZXNbIHNJZHggXS5wdXNoKCBobyApOwoKCQkJCQkJfQoKCQkJCQl9CgoJCQkJfQoJCQkJLy8gY29uc29sZS5sb2coImFtYmlndW91czogIiwgYW1iaWd1b3VzKTsKCQkJCWlmICggdG9DaGFuZ2UubGVuZ3RoID4gMCApIHsKCgkJCQkJLy8gY29uc29sZS5sb2coInRvIGNoYW5nZTogIiwgdG9DaGFuZ2UpOwoJCQkJCWlmICggISBhbWJpZ3VvdXMgKQl7IG5ld1NoYXBlSG9sZXMgPSBiZXR0ZXJTaGFwZUhvbGVzOyB9CgoJCQkJfQoKCQkJfQoKCQkJdmFyIHRtcEhvbGVzOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG5ld1NoYXBlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl0bXBTaGFwZSA9IG5ld1NoYXBlc1sgaSBdLnM7CgkJCQlzaGFwZXMucHVzaCggdG1wU2hhcGUgKTsKCQkJCXRtcEhvbGVzID0gbmV3U2hhcGVIb2xlc1sgaSBdOwoKCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSB0bXBIb2xlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJdG1wU2hhcGUuaG9sZXMucHVzaCggdG1wSG9sZXNbIGogXS5oICk7CgoJCQkJfQoKCQkJfQoKCQkJLy9jb25zb2xlLmxvZygic2hhcGUiLCBzaGFwZXMpOwoKCQkJcmV0dXJuIHNoYXBlczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2cKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgoJZnVuY3Rpb24gRm9udCggZGF0YSApIHsKCgkJdGhpcy50eXBlID0gJ0ZvbnQnOwoKCQl0aGlzLmRhdGEgPSBkYXRhOwoKCX0KCglPYmplY3QuYXNzaWduKCBGb250LnByb3RvdHlwZSwgewoKCQlpc0ZvbnQ6IHRydWUsCgoJCWdlbmVyYXRlU2hhcGVzOiBmdW5jdGlvbiAoIHRleHQsIHNpemUgKSB7CgoJCQlpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHsgc2l6ZSA9IDEwMDsgfQoKCQkJdmFyIHNoYXBlcyA9IFtdOwoJCQl2YXIgcGF0aHMgPSBjcmVhdGVQYXRocyggdGV4dCwgc2l6ZSwgdGhpcy5kYXRhICk7CgoJCQlmb3IgKCB2YXIgcCA9IDAsIHBsID0gcGF0aHMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7CgoJCQkJQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoIHNoYXBlcywgcGF0aHNbIHAgXS50b1NoYXBlcygpICk7CgoJCQl9CgoJCQlyZXR1cm4gc2hhcGVzOwoKCQl9CgoJfSApOwoKCWZ1bmN0aW9uIGNyZWF0ZVBhdGhzKCB0ZXh0LCBzaXplLCBkYXRhICkgewoKCQl2YXIgY2hhcnMgPSBBcnJheS5mcm9tID8gQXJyYXkuZnJvbSggdGV4dCApIDogU3RyaW5nKCB0ZXh0ICkuc3BsaXQoICcnICk7IC8vIHNlZSAjMTM5ODgKCQl2YXIgc2NhbGUgPSBzaXplIC8gZGF0YS5yZXNvbHV0aW9uOwoJCXZhciBsaW5lX2hlaWdodCA9ICggZGF0YS5ib3VuZGluZ0JveC55TWF4IC0gZGF0YS5ib3VuZGluZ0JveC55TWluICsgZGF0YS51bmRlcmxpbmVUaGlja25lc3MgKSAqIHNjYWxlOwoKCQl2YXIgcGF0aHMgPSBbXTsKCgkJdmFyIG9mZnNldFggPSAwLCBvZmZzZXRZID0gMDsKCgkJZm9yICggdmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpICsrICkgewoKCQkJdmFyIGNoYXIgPSBjaGFyc1sgaSBdOwoKCQkJaWYgKCBjaGFyID09PSAnXG4nICkgewoKCQkJCW9mZnNldFggPSAwOwoJCQkJb2Zmc2V0WSAtPSBsaW5lX2hlaWdodDsKCgkJCX0gZWxzZSB7CgoJCQkJdmFyIHJldCA9IGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICk7CgkJCQlvZmZzZXRYICs9IHJldC5vZmZzZXRYOwoJCQkJcGF0aHMucHVzaCggcmV0LnBhdGggKTsKCgkJCX0KCgkJfQoKCQlyZXR1cm4gcGF0aHM7CgoJfQoKCWZ1bmN0aW9uIGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICkgewoKCQl2YXIgZ2x5cGggPSBkYXRhLmdseXBoc1sgY2hhciBdIHx8IGRhdGEuZ2x5cGhzWyAnPycgXTsKCgkJaWYgKCAhIGdseXBoICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkZvbnQ6IGNoYXJhY3RlciAiJyArIGNoYXIgKyAnIiBkb2VzIG5vdCBleGlzdHMgaW4gZm9udCBmYW1pbHkgJyArIGRhdGEuZmFtaWx5TmFtZSArICcuJyApOwoKCQkJcmV0dXJuOwoKCQl9CgoJCXZhciBwYXRoID0gbmV3IFNoYXBlUGF0aCgpOwoKCQl2YXIgeCwgeSwgY3B4LCBjcHksIGNweDEsIGNweTEsIGNweDIsIGNweTI7CgoJCWlmICggZ2x5cGgubyApIHsKCgkJCXZhciBvdXRsaW5lID0gZ2x5cGguX2NhY2hlZE91dGxpbmUgfHwgKCBnbHlwaC5fY2FjaGVkT3V0bGluZSA9IGdseXBoLm8uc3BsaXQoICcgJyApICk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBvdXRsaW5lLmxlbmd0aDsgaSA8IGw7ICkgewoKCQkJCXZhciBhY3Rpb24gPSBvdXRsaW5lWyBpICsrIF07CgoJCQkJc3dpdGNoICggYWN0aW9uICkgewoKCQkJCQljYXNlICdtJzogLy8gbW92ZVRvCgoJCQkJCQl4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYOwoJCQkJCQl5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZOwoKCQkJCQkJcGF0aC5tb3ZlVG8oIHgsIHkgKTsKCgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdsJzogLy8gbGluZVRvCgoJCQkJCQl4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYOwoJCQkJCQl5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZOwoKCQkJCQkJcGF0aC5saW5lVG8oIHgsIHkgKTsKCgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlICdxJzogLy8gcXVhZHJhdGljQ3VydmVUbwoKCQkJCQkJY3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYOwoJCQkJCQljcHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7CgkJCQkJCWNweDEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7CgkJCQkJCWNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7CgoJCQkJCQlwYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGNweDEsIGNweTEsIGNweCwgY3B5ICk7CgoJCQkJCQlicmVhazsKCgkJCQkJY2FzZSAnYic6IC8vIGJlemllckN1cnZlVG8KCgkJCQkJCWNweCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDsKCQkJCQkJY3B5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZOwoJCQkJCQljcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYOwoJCQkJCQljcHkxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZOwoJCQkJCQljcHgyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYOwoJCQkJCQljcHkyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZOwoKCQkJCQkJcGF0aC5iZXppZXJDdXJ2ZVRvKCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyLCBjcHgsIGNweSApOwoKCQkJCQkJYnJlYWs7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCXJldHVybiB7IG9mZnNldFg6IGdseXBoLmhhICogc2NhbGUsIHBhdGg6IHBhdGggfTsKCgl9CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gRm9udExvYWRlciggbWFuYWdlciApIHsKCgkJTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCgl9CgoJRm9udExvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEZvbnRMb2FkZXIsCgoJCWxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJdmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTsKCQkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoJCQlsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7CgoJCQkJdmFyIGpzb247CgoJCQkJdHJ5IHsKCgkJCQkJanNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTsKCgkJCQl9IGNhdGNoICggZSApIHsKCgkJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuRm9udExvYWRlcjogdHlwZWZhY2UuanMgc3VwcG9ydCBpcyBiZWluZyBkZXByZWNhdGVkLiBVc2UgdHlwZWZhY2UuanNvbiBpbnN0ZWFkLicgKTsKCQkJCQlqc29uID0gSlNPTi5wYXJzZSggdGV4dC5zdWJzdHJpbmcoIDY1LCB0ZXh0Lmxlbmd0aCAtIDIgKSApOwoKCQkJCX0KCgkJCQl2YXIgZm9udCA9IHNjb3BlLnBhcnNlKCBqc29uICk7CgoJCQkJaWYgKCBvbkxvYWQgKSB7IG9uTG9hZCggZm9udCApOyB9CgoJCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgoJCX0sCgoJCXBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7CgoJCQlyZXR1cm4gbmV3IEZvbnQoIGpzb24gKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCgl2YXIgX2NvbnRleHQ7CgoJdmFyIEF1ZGlvQ29udGV4dCA9IHsKCgkJZ2V0Q29udGV4dDogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCBfY29udGV4dCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCV9jb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTsKCgkJCX0KCgkJCXJldHVybiBfY29udGV4dDsKCgkJfSwKCgkJc2V0Q29udGV4dDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCV9jb250ZXh0ID0gdmFsdWU7CgoJCX0KCgl9OwoKCS8qKgoJICogQGF1dGhvciBSZWVjZSBBYXJvbiBMZWNyaXZhaW4gLyBodHRwOi8vcmVlY2Vub3Rlcy5jb20vCgkgKi8KCglmdW5jdGlvbiBBdWRpb0xvYWRlciggbWFuYWdlciApIHsKCgkJTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCgl9CgoJQXVkaW9Mb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBBdWRpb0xvYWRlciwKCgkJbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJCXZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7CgkJCWxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTsKCQkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoJCQlsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHsKCgkJCQkvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2QKCQkJCS8vIGRldGFjaGVzIHRoZSBidWZmZXIgd2hlbiBjb21wbGV0ZSwgcHJldmVudGluZyByZXVzZS4KCQkJCXZhciBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7CgoJCQkJdmFyIGNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpOwoJCQkJY29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIGJ1ZmZlckNvcHksIGZ1bmN0aW9uICggYXVkaW9CdWZmZXIgKSB7CgoJCQkJCW9uTG9hZCggYXVkaW9CdWZmZXIgKTsKCgkJCQl9ICk7CgoJCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqCgkgKiBQcmltYXJ5IHJlZmVyZW5jZToKCSAqICAgaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmCgkgKgoJICogU2Vjb25kYXJ5IHJlZmVyZW5jZToKCSAqICAgaHR0cHM6Ly93d3cucHBzbG9hbi5vcmcvcHVibGljYXRpb25zL1N0dXBpZFNIMzYucGRmCgkgKi8KCgkvLyAzLWJhbmQgU0ggZGVmaW5lZCBieSA5IGNvZWZmaWNpZW50cwoKCWZ1bmN0aW9uIFNwaGVyaWNhbEhhcm1vbmljczMoKSB7CgoJCXRoaXMuY29lZmZpY2llbnRzID0gW107CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7CgoJCQl0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7CgoJCX0KCgl9CgoJT2JqZWN0LmFzc2lnbiggU3BoZXJpY2FsSGFybW9uaWNzMy5wcm90b3R5cGUsIHsKCgkJaXNTcGhlcmljYWxIYXJtb25pY3MzOiB0cnVlLAoKCQlzZXQ6IGZ1bmN0aW9uICggY29lZmZpY2llbnRzICkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQl0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmNvcHkoIGNvZWZmaWNpZW50c1sgaSBdICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJemVybzogZnVuY3Rpb24gKCkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQl0aGlzLmNvZWZmaWNpZW50c1sgaSBdLnNldCggMCwgMCwgMCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsCgkJLy8gdGFyZ2V0IGlzIGEgVmVjdG9yMwoJCWdldEF0OiBmdW5jdGlvbiAoIG5vcm1hbCwgdGFyZ2V0ICkgewoKCQkJLy8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGgKCgkJCXZhciB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56OwoKCQkJdmFyIGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7CgoJCQkvLyBiYW5kIDAKCQkJdGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC4yODIwOTUgKTsKCgkJCS8vIGJhbmQgMQoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAxIF0sIDAuNDg4NjAzICogeSApOwoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAyIF0sIDAuNDg4NjAzICogeiApOwoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyAzIF0sIDAuNDg4NjAzICogeCApOwoKCQkJLy8gYmFuZCAyCgkJCXRhcmdldC5hZGRTY2FsZSggY29lZmZbIDQgXSwgMS4wOTI1NDggKiAoIHggKiB5ICkgKTsKCQkJdGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgNSBdLCAxLjA5MjU0OCAqICggeSAqIHogKSApOwoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA2IF0sIDAuMzE1MzkyICogKCAzLjAgKiB6ICogeiAtIDEuMCApICk7CgkJCXRhcmdldC5hZGRTY2FsZSggY29lZmZbIDcgXSwgMS4wOTI1NDggKiAoIHggKiB6ICkgKTsKCQkJdGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgOCBdLCAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApICk7CgoJCQlyZXR1cm4gdGFyZ2V0OwoKCQl9LAoKCQkvLyBnZXQgdGhlIGlycmFkaWFuY2UgKHJhZGlhbmNlIGNvbnZvbHZlZCB3aXRoIGNvc2luZSBsb2JlKSBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBub3JtYWwKCQkvLyB0YXJnZXQgaXMgYSBWZWN0b3IzCgkJLy8gaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmCgkJZ2V0SXJyYWRpYW5jZUF0OiBmdW5jdGlvbiAoIG5vcm1hbCwgdGFyZ2V0ICkgewoKCQkJLy8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGgKCgkJCXZhciB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56OwoKCQkJdmFyIGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7CgoJCQkvLyBiYW5kIDAKCQkJdGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC44ODYyMjcgKTsgLy8gz4AgKiAwLjI4MjA5NQoKCQkJLy8gYmFuZCAxCgkJCXRhcmdldC5hZGRTY2FsZSggY29lZmZbIDEgXSwgMi4wICogMC41MTE2NjQgKiB5ICk7IC8vICggMiAqIM+AIC8gMyApICogMC40ODg2MDMKCQkJdGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgMiBdLCAyLjAgKiAwLjUxMTY2NCAqIHogKTsKCQkJdGFyZ2V0LmFkZFNjYWxlKCBjb2VmZlsgMyBdLCAyLjAgKiAwLjUxMTY2NCAqIHggKTsKCgkJCS8vIGJhbmQgMgoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA0IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHkgKTsgLy8gKCDPgCAvIDQgKSAqIDEuMDkyNTQ4CgkJCXRhcmdldC5hZGRTY2FsZSggY29lZmZbIDUgXSwgMi4wICogMC40MjkwNDMgKiB5ICogeiApOwoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA2IF0sIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApOyAvLyAoIM+AIC8gNCApICogMC4zMTUzOTIgKiAzCgkJCXRhcmdldC5hZGRTY2FsZSggY29lZmZbIDcgXSwgMi4wICogMC40MjkwNDMgKiB4ICogeiApOwoJCQl0YXJnZXQuYWRkU2NhbGUoIGNvZWZmWyA4IF0sIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICkgKTsgLy8gKCDPgCAvIDQgKSAqIDAuNTQ2Mjc0CgoJCQlyZXR1cm4gdGFyZ2V0OwoKCQl9LAoKCQlhZGQ6IGZ1bmN0aW9uICggc2ggKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkgewoKCQkJCXRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkKCBzaC5jb2VmZmljaWVudHNbIGkgXSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoKCQlzY2FsZTogZnVuY3Rpb24gKCBzICkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQl0aGlzLmNvZWZmaWNpZW50c1sgaSBdLm11bHRpcGx5U2NhbGFyKCBzICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJbGVycDogZnVuY3Rpb24gKCBzaCwgYWxwaGEgKSB7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkgewoKCQkJCXRoaXMuY29lZmZpY2llbnRzWyBpIF0ubGVycCggc2guY29lZmZpY2llbnRzWyBpIF0sIGFscGhhICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZXF1YWxzOiBmdW5jdGlvbiAoIHNoICkgewoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQlpZiAoICEgdGhpcy5jb2VmZmljaWVudHNbIGkgXS5lcXVhbHMoIHNoLmNvZWZmaWNpZW50c1sgaSBdICkgKSB7CgoJCQkJCXJldHVybiBmYWxzZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gdHJ1ZTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBzaCApIHsKCgkJCXJldHVybiB0aGlzLnNldCggc2guY29lZmZpY2llbnRzICk7CgoJCX0sCgoJCWNsb25lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJCX0sCgoJCWZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdmFyIGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQljb2VmZmljaWVudHNbIGkgXS5mcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgKyAoIGkgKiAzICkgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7CgoJCQlpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSB7IGFycmF5ID0gW107IH0KCQkJaWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHsgb2Zmc2V0ID0gMDsgfQoKCQkJdmFyIGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHsKCgkJCQljb2VmZmljaWVudHNbIGkgXS50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7CgoJCQl9CgoJCQlyZXR1cm4gYXJyYXk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggU3BoZXJpY2FsSGFybW9uaWNzMywgewoKCQkvLyBldmFsdWF0ZSB0aGUgYmFzaXMgZnVuY3Rpb25zCgkJLy8gc2hCYXNpcyBpcyBhbiBBcnJheVsgOSBdCgkJZ2V0QmFzaXNBdDogZnVuY3Rpb24gKCBub3JtYWwsIHNoQmFzaXMgKSB7CgoJCQkvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aAoKCQkJdmFyIHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7CgoJCQkvLyBiYW5kIDAKCQkJc2hCYXNpc1sgMCBdID0gMC4yODIwOTU7CgoJCQkvLyBiYW5kIDEKCQkJc2hCYXNpc1sgMSBdID0gMC40ODg2MDMgKiB5OwoJCQlzaEJhc2lzWyAyIF0gPSAwLjQ4ODYwMyAqIHo7CgkJCXNoQmFzaXNbIDMgXSA9IDAuNDg4NjAzICogeDsKCgkJCS8vIGJhbmQgMgoJCQlzaEJhc2lzWyA0IF0gPSAxLjA5MjU0OCAqIHggKiB5OwoJCQlzaEJhc2lzWyA1IF0gPSAxLjA5MjU0OCAqIHkgKiB6OwoJCQlzaEJhc2lzWyA2IF0gPSAwLjMxNTM5MiAqICggMyAqIHogKiB6IC0gMSApOwoJCQlzaEJhc2lzWyA3IF0gPSAxLjA5MjU0OCAqIHggKiB6OwoJCQlzaEJhc2lzWyA4IF0gPSAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKgoJICogQSBMaWdodFByb2JlIGlzIGEgc291cmNlIG9mIGluZGlyZWN0LWRpZmZ1c2UgbGlnaHQKCSAqLwoKCWZ1bmN0aW9uIExpZ2h0UHJvYmUoIHNoLCBpbnRlbnNpdHkgKSB7CgoJCUxpZ2h0LmNhbGwoIHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7CgoJCXRoaXMuc2ggPSAoIHNoICE9PSB1bmRlZmluZWQgKSA/IHNoIDogbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKTsKCgl9CgoJTGlnaHRQcm9iZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogTGlnaHRQcm9iZSwKCgkJaXNMaWdodFByb2JlOiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUxpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5zaC5jb3B5KCBzb3VyY2Uuc2ggKTsKCQkJdGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkgewoKCQkJdmFyIGRhdGEgPSBMaWdodC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTsKCgkJCS8vIGRhdGEuc2ggPSB0aGlzLnNoLnRvQXJyYXkoKTsgLy8gdG9kbwoKCQkJcmV0dXJuIGRhdGE7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodFByb2JlKCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHsKCgkJTGlnaHRQcm9iZS5jYWxsKCB0aGlzLCB1bmRlZmluZWQsIGludGVuc2l0eSApOwoKCQl2YXIgY29sb3IxID0gbmV3IENvbG9yKCkuc2V0KCBza3lDb2xvciApOwoJCXZhciBjb2xvcjIgPSBuZXcgQ29sb3IoKS5zZXQoIGdyb3VuZENvbG9yICk7CgoJCXZhciBza3kgPSBuZXcgVmVjdG9yMyggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApOwoJCXZhciBncm91bmQgPSBuZXcgVmVjdG9yMyggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApOwoKCQkvLyB3aXRob3V0IGV4dHJhIGZhY3RvciBvZiBQSSBpbiB0aGUgc2hhZGVyLCBzaG91bGQgPSAxIC8gTWF0aC5zcXJ0KCBNYXRoLlBJICk7CgkJdmFyIGMwID0gTWF0aC5zcXJ0KCBNYXRoLlBJICk7CgkJdmFyIGMxID0gYzAgKiBNYXRoLnNxcnQoIDAuNzUgKTsKCgkJdGhpcy5zaC5jb2VmZmljaWVudHNbIDAgXS5jb3B5KCBza3kgKS5hZGQoIGdyb3VuZCApLm11bHRpcGx5U2NhbGFyKCBjMCApOwoJCXRoaXMuc2guY29lZmZpY2llbnRzWyAxIF0uY29weSggc2t5ICkuc3ViKCBncm91bmQgKS5tdWx0aXBseVNjYWxhciggYzEgKTsKCgl9CgoJSGVtaXNwaGVyZUxpZ2h0UHJvYmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHRQcm9iZS5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogSGVtaXNwaGVyZUxpZ2h0UHJvYmUsCgoJCWlzSGVtaXNwaGVyZUxpZ2h0UHJvYmU6IHRydWUsCgoJCWNvcHk6IGZ1bmN0aW9uICggc291cmNlICkgeyAvLyBtb2RpZnlpbmcgY29sb3JzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkCgoJCQlMaWdodFByb2JlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkgewoKCQkJdmFyIGRhdGEgPSBMaWdodFByb2JlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApOwoKCQkJLy8gZGF0YS5zaCA9IHRoaXMuc2gudG9BcnJheSgpOyAvLyB0b2RvCgoJCQlyZXR1cm4gZGF0YTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICovCgoJZnVuY3Rpb24gQW1iaWVudExpZ2h0UHJvYmUoIGNvbG9yLCBpbnRlbnNpdHkgKSB7CgoJCUxpZ2h0UHJvYmUuY2FsbCggdGhpcywgdW5kZWZpbmVkLCBpbnRlbnNpdHkgKTsKCgkJdmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldCggY29sb3IgKTsKCgkJLy8gd2l0aG91dCBleHRyYSBmYWN0b3Igb2YgUEkgaW4gdGhlIHNoYWRlciwgd291bGQgYmUgMiAvIE1hdGguc3FydCggTWF0aC5QSSApOwoJCXRoaXMuc2guY29lZmZpY2llbnRzWyAwIF0uc2V0KCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICkubXVsdGlwbHlTY2FsYXIoIDIgKiBNYXRoLnNxcnQoIE1hdGguUEkgKSApOwoKCX0KCglBbWJpZW50TGlnaHRQcm9iZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFByb2JlLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBBbWJpZW50TGlnaHRQcm9iZSwKCgkJaXNBbWJpZW50TGlnaHRQcm9iZTogdHJ1ZSwKCgkJY29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7IC8vIG1vZGlmeWluZyBjb2xvciBub3QgY3VycmVudGx5IHN1cHBvcnRlZAoKCQkJTGlnaHRQcm9iZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHsKCgkJCXZhciBkYXRhID0gTGlnaHRQcm9iZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTsKCgkJCS8vIGRhdGEuc2ggPSB0aGlzLnNoLnRvQXJyYXkoKTsgLy8gdG9kbwoKCQkJcmV0dXJuIGRhdGE7CgoJCX0KCgl9ICk7CgoJdmFyIF9leWVSaWdodCA9IG5ldyBNYXRyaXg0KCk7Cgl2YXIgX2V5ZUxlZnQgPSBuZXcgTWF0cml4NCgpOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIFN0ZXJlb0NhbWVyYSgpIHsKCgkJdGhpcy50eXBlID0gJ1N0ZXJlb0NhbWVyYSc7CgoJCXRoaXMuYXNwZWN0ID0gMTsKCgkJdGhpcy5leWVTZXAgPSAwLjA2NDsKCgkJdGhpcy5jYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7CgkJdGhpcy5jYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTsKCQl0aGlzLmNhbWVyYUwubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwoKCQl0aGlzLmNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTsKCQl0aGlzLmNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApOwoJCXRoaXMuY2FtZXJhUi5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMuX2NhY2hlID0gewoJCQlmb2N1czogbnVsbCwKCQkJZm92OiBudWxsLAoJCQlhc3BlY3Q6IG51bGwsCgkJCW5lYXI6IG51bGwsCgkJCWZhcjogbnVsbCwKCQkJem9vbTogbnVsbCwKCQkJZXllU2VwOiBudWxsCgkJfTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggU3RlcmVvQ2FtZXJhLnByb3RvdHlwZSwgewoKCQl1cGRhdGU6IGZ1bmN0aW9uICggY2FtZXJhICkgewoKCQkJdmFyIGNhY2hlID0gdGhpcy5fY2FjaGU7CgoJCQl2YXIgbmVlZHNVcGRhdGUgPSBjYWNoZS5mb2N1cyAhPT0gY2FtZXJhLmZvY3VzIHx8IGNhY2hlLmZvdiAhPT0gY2FtZXJhLmZvdiB8fAoJCQkJY2FjaGUuYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3QgfHwgY2FjaGUubmVhciAhPT0gY2FtZXJhLm5lYXIgfHwKCQkJCWNhY2hlLmZhciAhPT0gY2FtZXJhLmZhciB8fCBjYWNoZS56b29tICE9PSBjYW1lcmEuem9vbSB8fCBjYWNoZS5leWVTZXAgIT09IHRoaXMuZXllU2VwOwoKCQkJaWYgKCBuZWVkc1VwZGF0ZSApIHsKCgkJCQljYWNoZS5mb2N1cyA9IGNhbWVyYS5mb2N1czsKCQkJCWNhY2hlLmZvdiA9IGNhbWVyYS5mb3Y7CgkJCQljYWNoZS5hc3BlY3QgPSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3Q7CgkJCQljYWNoZS5uZWFyID0gY2FtZXJhLm5lYXI7CgkJCQljYWNoZS5mYXIgPSBjYW1lcmEuZmFyOwoJCQkJY2FjaGUuem9vbSA9IGNhbWVyYS56b29tOwoJCQkJY2FjaGUuZXllU2VwID0gdGhpcy5leWVTZXA7CgoJCQkJLy8gT2ZmLWF4aXMgc3RlcmVvc2NvcGljIGVmZmVjdCBiYXNlZCBvbgoJCQkJLy8gaHR0cDovL3BhdWxib3Vya2UubmV0L3N0ZXJlb2dyYXBoaWNzL3N0ZXJlb3JlbmRlci8KCgkJCQl2YXIgcHJvamVjdGlvbk1hdHJpeCA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNsb25lKCk7CgkJCQl2YXIgZXllU2VwSGFsZiA9IGNhY2hlLmV5ZVNlcCAvIDI7CgkJCQl2YXIgZXllU2VwT25Qcm9qZWN0aW9uID0gZXllU2VwSGFsZiAqIGNhY2hlLm5lYXIgLyBjYWNoZS5mb2N1czsKCQkJCXZhciB5bWF4ID0gKCBjYWNoZS5uZWFyICogTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiBjYWNoZS5mb3YgKiAwLjUgKSApIC8gY2FjaGUuem9vbTsKCQkJCXZhciB4bWluLCB4bWF4OwoKCQkJCS8vIHRyYW5zbGF0ZSB4T2Zmc2V0CgoJCQkJX2V5ZUxlZnQuZWxlbWVudHNbIDEyIF0gPSAtIGV5ZVNlcEhhbGY7CgkJCQlfZXllUmlnaHQuZWxlbWVudHNbIDEyIF0gPSBleWVTZXBIYWxmOwoKCQkJCS8vIGZvciBsZWZ0IGV5ZQoKCQkJCXhtaW4gPSAtIHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247CgkJCQl4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjsKCgkJCQlwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTsKCQkJCXByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTsKCgkJCQl0aGlzLmNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBwcm9qZWN0aW9uTWF0cml4ICk7CgoJCQkJLy8gZm9yIHJpZ2h0IGV5ZQoKCQkJCXhtaW4gPSAtIHltYXggKiBjYWNoZS5hc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247CgkJCQl4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjsKCgkJCQlwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTsKCQkJCXByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTsKCgkJCQl0aGlzLmNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBwcm9qZWN0aW9uTWF0cml4ICk7CgoJCQl9CgoJCQl0aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIF9leWVMZWZ0ICk7CgkJCXRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggX2V5ZVJpZ2h0ICk7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICovCgoJZnVuY3Rpb24gQ2xvY2soIGF1dG9TdGFydCApIHsKCgkJdGhpcy5hdXRvU3RhcnQgPSAoIGF1dG9TdGFydCAhPT0gdW5kZWZpbmVkICkgPyBhdXRvU3RhcnQgOiB0cnVlOwoKCQl0aGlzLnN0YXJ0VGltZSA9IDA7CgkJdGhpcy5vbGRUaW1lID0gMDsKCQl0aGlzLmVsYXBzZWRUaW1lID0gMDsKCgkJdGhpcy5ydW5uaW5nID0gZmFsc2U7CgoJfQoKCU9iamVjdC5hc3NpZ24oIENsb2NrLnByb3RvdHlwZSwgewoKCQlzdGFydDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5zdGFydFRpbWUgPSAoIHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgPyBEYXRlIDogcGVyZm9ybWFuY2UgKS5ub3coKTsgLy8gc2VlICMxMDczMgoKCQkJdGhpcy5vbGRUaW1lID0gdGhpcy5zdGFydFRpbWU7CgkJCXRoaXMuZWxhcHNlZFRpbWUgPSAwOwoJCQl0aGlzLnJ1bm5pbmcgPSB0cnVlOwoKCQl9LAoKCQlzdG9wOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmdldEVsYXBzZWRUaW1lKCk7CgkJCXRoaXMucnVubmluZyA9IGZhbHNlOwoJCQl0aGlzLmF1dG9TdGFydCA9IGZhbHNlOwoKCQl9LAoKCQlnZXRFbGFwc2VkVGltZTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5nZXREZWx0YSgpOwoJCQlyZXR1cm4gdGhpcy5lbGFwc2VkVGltZTsKCgkJfSwKCgkJZ2V0RGVsdGE6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBkaWZmID0gMDsKCgkJCWlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7CgoJCQkJdGhpcy5zdGFydCgpOwoJCQkJcmV0dXJuIDA7CgoJCQl9CgoJCQlpZiAoIHRoaXMucnVubmluZyApIHsKCgkJCQl2YXIgbmV3VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOwoKCQkJCWRpZmYgPSAoIG5ld1RpbWUgLSB0aGlzLm9sZFRpbWUgKSAvIDEwMDA7CgkJCQl0aGlzLm9sZFRpbWUgPSBuZXdUaW1lOwoKCQkJCXRoaXMuZWxhcHNlZFRpbWUgKz0gZGlmZjsKCgkJCX0KCgkJCXJldHVybiBkaWZmOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqLwoKCXZhciBfcG9zaXRpb24kMiA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX3F1YXRlcm5pb24kMyA9IG5ldyBRdWF0ZXJuaW9uKCk7Cgl2YXIgX3NjYWxlJDEgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9vcmllbnRhdGlvbiA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gQXVkaW9MaXN0ZW5lcigpIHsKCgkJT2JqZWN0M0QuY2FsbCggdGhpcyApOwoKCQl0aGlzLnR5cGUgPSAnQXVkaW9MaXN0ZW5lcic7CgoJCXRoaXMuY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7CgoJCXRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7CgkJdGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApOwoKCQl0aGlzLmZpbHRlciA9IG51bGw7CgoJCXRoaXMudGltZURlbHRhID0gMDsKCgkJLy8gcHJpdmF0ZQoKCQl0aGlzLl9jbG9jayA9IG5ldyBDbG9jaygpOwoKCX0KCglBdWRpb0xpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBBdWRpb0xpc3RlbmVyLAoKCQlnZXRJbnB1dDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZ2FpbjsKCgkJfSwKCgkJcmVtb3ZlRmlsdGVyOiBmdW5jdGlvbiAoICkgewoKCQkJaWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHsKCgkJCQl0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTsKCQkJCXRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApOwoJCQkJdGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApOwoJCQkJdGhpcy5maWx0ZXIgPSBudWxsOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldEZpbHRlcjogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZmlsdGVyOwoKCQl9LAoKCQlzZXRGaWx0ZXI6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkgewoKCQkJCXRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApOwoJCQkJdGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTsKCgkJCX0KCgkJCXRoaXMuZmlsdGVyID0gdmFsdWU7CgkJCXRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmZpbHRlciApOwoJCQl0aGlzLmZpbHRlci5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlnZXRNYXN0ZXJWb2x1bWU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTsKCgkJfSwKCgkJc2V0TWFzdGVyVm9sdW1lOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJdXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7CgoJCQlPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTsKCgkJCXZhciBsaXN0ZW5lciA9IHRoaXMuY29udGV4dC5saXN0ZW5lcjsKCQkJdmFyIHVwID0gdGhpcy51cDsKCgkJCXRoaXMudGltZURlbHRhID0gdGhpcy5fY2xvY2suZ2V0RGVsdGEoKTsKCgkJCXRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMiwgX3F1YXRlcm5pb24kMywgX3NjYWxlJDEgKTsKCgkJCV9vcmllbnRhdGlvbi5zZXQoIDAsIDAsIC0gMSApLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24kMyApOwoKCQkJaWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7CgoJCQkJLy8gY29kZSBwYXRoIGZvciBDaHJvbWUgKHNlZSAjMTQzOTMpCgoJCQkJdmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLnRpbWVEZWx0YTsKCgkJCQlsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbiQyLngsIGVuZFRpbWUgKTsKCQkJCWxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uJDIueSwgZW5kVGltZSApOwoJCQkJbGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMi56LCBlbmRUaW1lICk7CgkJCQlsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLngsIGVuZFRpbWUgKTsKCQkJCWxpc3RlbmVyLmZvcndhcmRZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueSwgZW5kVGltZSApOwoJCQkJbGlzdGVuZXIuZm9yd2FyZFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi56LCBlbmRUaW1lICk7CgkJCQlsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTsKCQkJCWxpc3RlbmVyLnVwWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueSwgZW5kVGltZSApOwoJCQkJbGlzdGVuZXIudXBaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC56LCBlbmRUaW1lICk7CgoJCQl9IGVsc2UgewoKCQkJCWxpc3RlbmVyLnNldFBvc2l0aW9uKCBfcG9zaXRpb24kMi54LCBfcG9zaXRpb24kMi55LCBfcG9zaXRpb24kMi56ICk7CgkJCQlsaXN0ZW5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiwgdXAueCwgdXAueSwgdXAueiApOwoKCQkJfQoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tLwoJICovCgoJZnVuY3Rpb24gQXVkaW8oIGxpc3RlbmVyICkgewoKCQlPYmplY3QzRC5jYWxsKCB0aGlzICk7CgoJCXRoaXMudHlwZSA9ICdBdWRpbyc7CgoJCXRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjsKCQl0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0OwoKCQl0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpOwoJCXRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7CgoJCXRoaXMuYXV0b3BsYXkgPSBmYWxzZTsKCgkJdGhpcy5idWZmZXIgPSBudWxsOwoJCXRoaXMuZGV0dW5lID0gMDsKCQl0aGlzLmxvb3AgPSBmYWxzZTsKCQl0aGlzLmxvb3BTdGFydCA9IDA7CgkJdGhpcy5sb29wRW5kID0gMDsKCQl0aGlzLm9mZnNldCA9IDA7CgkJdGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDsKCQl0aGlzLnBsYXliYWNrUmF0ZSA9IDE7CgkJdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTsKCQl0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7CgkJdGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JzsKCgkJdGhpcy5fc3RhcnRlZEF0ID0gMDsKCQl0aGlzLl9wYXVzZWRBdCA9IDA7CgoJCXRoaXMuZmlsdGVycyA9IFtdOwoKCX0KCglBdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwgewoKCQljb25zdHJ1Y3RvcjogQXVkaW8sCgoJCWdldE91dHB1dDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZ2FpbjsKCgkJfSwKCgkJc2V0Tm9kZVNvdXJjZTogZnVuY3Rpb24gKCBhdWRpb05vZGUgKSB7CgoJCQl0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlOwoJCQl0aGlzLnNvdXJjZVR5cGUgPSAnYXVkaW9Ob2RlJzsKCQkJdGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7CgkJCXRoaXMuY29ubmVjdCgpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldE1lZGlhRWxlbWVudFNvdXJjZTogZnVuY3Rpb24gKCBtZWRpYUVsZW1lbnQgKSB7CgoJCQl0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlOwoJCQl0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJzsKCQkJdGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKCBtZWRpYUVsZW1lbnQgKTsKCQkJdGhpcy5jb25uZWN0KCk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0TWVkaWFTdHJlYW1Tb3VyY2U6IGZ1bmN0aW9uICggbWVkaWFTdHJlYW0gKSB7CgoJCQl0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlOwoJCQl0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFTdHJlYW1Ob2RlJzsKCQkJdGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICk7CgkJCXRoaXMuY29ubmVjdCgpOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEJ1ZmZlcjogZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHsKCgkJCXRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7CgkJCXRoaXMuc291cmNlVHlwZSA9ICdidWZmZXInOwoKCQkJaWYgKCB0aGlzLmF1dG9wbGF5ICkgeyB0aGlzLnBsYXkoKTsgfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXBsYXk6IGZ1bmN0aW9uICggZGVsYXkgKSB7CgoJCQlpZiAoIGRlbGF5ID09PSB1bmRlZmluZWQgKSB7IGRlbGF5ID0gMDsgfQoKCQkJaWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLicgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCWlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCXRoaXMuX3N0YXJ0ZWRBdCA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGRlbGF5OwoKCQkJdmFyIHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTsKCQkJc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyOwoJCQlzb3VyY2UubG9vcCA9IHRoaXMubG9vcDsKCQkJc291cmNlLmxvb3BTdGFydCA9IHRoaXMubG9vcFN0YXJ0OwoJCQlzb3VyY2UubG9vcEVuZCA9IHRoaXMubG9vcEVuZDsKCQkJc291cmNlLm9uZW5kZWQgPSB0aGlzLm9uRW5kZWQuYmluZCggdGhpcyApOwoJCQlzb3VyY2Uuc3RhcnQoIHRoaXMuX3N0YXJ0ZWRBdCwgdGhpcy5fcGF1c2VkQXQgKyB0aGlzLm9mZnNldCwgdGhpcy5kdXJhdGlvbiApOwoKCQkJdGhpcy5pc1BsYXlpbmcgPSB0cnVlOwoKCQkJdGhpcy5zb3VyY2UgPSBzb3VyY2U7CgoJCQl0aGlzLnNldERldHVuZSggdGhpcy5kZXR1bmUgKTsKCQkJdGhpcy5zZXRQbGF5YmFja1JhdGUoIHRoaXMucGxheWJhY2tSYXRlICk7CgoJCQlyZXR1cm4gdGhpcy5jb25uZWN0KCk7CgoJCX0sCgoJCXBhdXNlOiBmdW5jdGlvbiAoKSB7CgoJCQlpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7CgkJCQlyZXR1cm47CgoJCQl9CgoJCQlpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkgewoKCQkJCXRoaXMuX3BhdXNlZEF0ID0gKCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgLSB0aGlzLl9zdGFydGVkQXQgKSAqIHRoaXMucGxheWJhY2tSYXRlOwoKCQkJCXRoaXMuc291cmNlLnN0b3AoKTsKCQkJCXRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsOwoKCQkJCXRoaXMuaXNQbGF5aW5nID0gZmFsc2U7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3RvcDogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJdGhpcy5fcGF1c2VkQXQgPSAwOwoKCQkJdGhpcy5zb3VyY2Uuc3RvcCgpOwoJCQl0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDsKCQkJdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb25uZWN0OiBmdW5jdGlvbiAoKSB7CgoJCQlpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkgewoKCQkJCXRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7CgoJCQkJZm9yICggdmFyIGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJCXRoaXMuZmlsdGVyc1sgaSAtIDEgXS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApOwoKCQkJCX0KCgkJCQl0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApOwoKCQkJfSBlbHNlIHsKCgkJCQl0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZGlzY29ubmVjdDogZnVuY3Rpb24gKCkgewoKCQkJaWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHsKCgkJCQl0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApOwoKCQkJCWZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCQl0aGlzLmZpbHRlcnNbIGkgLSAxIF0uZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTsKCgkJCQl9CgoJCQkJdGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTsKCgkJCX0gZWxzZSB7CgoJCQkJdGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldEZpbHRlcnM6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLmZpbHRlcnM7CgoJCX0sCgoJCXNldEZpbHRlcnM6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQlpZiAoICEgdmFsdWUgKSB7IHZhbHVlID0gW107IH0KCgkJCWlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7CgoJCQkJdGhpcy5kaXNjb25uZWN0KCk7CgkJCQl0aGlzLmZpbHRlcnMgPSB2YWx1ZTsKCQkJCXRoaXMuY29ubmVjdCgpOwoKCQkJfSBlbHNlIHsKCgkJCQl0aGlzLmZpbHRlcnMgPSB2YWx1ZTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXREZXR1bmU6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLmRldHVuZSA9IHZhbHVlOwoKCQkJaWYgKCB0aGlzLnNvdXJjZS5kZXR1bmUgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9IC8vIG9ubHkgc2V0IGRldHVuZSB3aGVuIGF2YWlsYWJsZQoKCQkJaWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHsKCgkJCQl0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0RGV0dW5lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5kZXR1bmU7CgoJCX0sCgoJCWdldEZpbHRlcjogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZ2V0RmlsdGVycygpWyAwIF07CgoJCX0sCgoJCXNldEZpbHRlcjogZnVuY3Rpb24gKCBmaWx0ZXIgKSB7CgoJCQlyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKCBmaWx0ZXIgPyBbIGZpbHRlciBdIDogW10gKTsKCgkJfSwKCgkJc2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJaWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJdGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTsKCgkJCWlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7CgoJCQkJdGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFRhcmdldEF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWdldFBsYXliYWNrUmF0ZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMucGxheWJhY2tSYXRlOwoKCQl9LAoKCQlvbkVuZGVkOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLmlzUGxheWluZyA9IGZhbHNlOwoKCQl9LAoKCQlnZXRMb29wOiBmdW5jdGlvbiAoKSB7CgoJCQlpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7CgkJCQlyZXR1cm4gZmFsc2U7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5sb29wOwoKCQl9LAoKCQlzZXRMb29wOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJaWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJdGhpcy5sb29wID0gdmFsdWU7CgoJCQlpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkgewoKCQkJCXRoaXMuc291cmNlLmxvb3AgPSB0aGlzLmxvb3A7CgoJCQl9CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0TG9vcFN0YXJ0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy5sb29wU3RhcnQgPSB2YWx1ZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRMb29wRW5kOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJdGhpcy5sb29wRW5kID0gdmFsdWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0Vm9sdW1lOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7CgoJCX0sCgoJCXNldFZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCXRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJdmFyIF9wb3NpdGlvbiQzID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfcXVhdGVybmlvbiQ0ID0gbmV3IFF1YXRlcm5pb24oKTsKCXZhciBfc2NhbGUkMiA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX29yaWVudGF0aW9uJDEgPSBuZXcgVmVjdG9yMygpOwoKCWZ1bmN0aW9uIFBvc2l0aW9uYWxBdWRpbyggbGlzdGVuZXIgKSB7CgoJCUF1ZGlvLmNhbGwoIHRoaXMsIGxpc3RlbmVyICk7CgoJCXRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpOwoJCXRoaXMucGFubmVyLnBhbm5pbmdNb2RlbCA9ICdIUlRGJzsKCQl0aGlzLnBhbm5lci5jb25uZWN0KCB0aGlzLmdhaW4gKTsKCgl9CgoJUG9zaXRpb25hbEF1ZGlvLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEF1ZGlvLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBQb3NpdGlvbmFsQXVkaW8sCgoJCWdldE91dHB1dDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMucGFubmVyOwoKCQl9LAoKCQlnZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlOwoKCQl9LAoKCQlzZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCXRoaXMucGFubmVyLnJlZkRpc3RhbmNlID0gdmFsdWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0Um9sbG9mZkZhY3RvcjogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3I7CgoJCX0sCgoJCXNldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWw7CgoJCX0sCgoJCXNldERpc3RhbmNlTW9kZWw6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsID0gdmFsdWU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZTsKCgkJfSwKCgkJc2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQl0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldERpcmVjdGlvbmFsQ29uZTogZnVuY3Rpb24gKCBjb25lSW5uZXJBbmdsZSwgY29uZU91dGVyQW5nbGUsIGNvbmVPdXRlckdhaW4gKSB7CgoJCQl0aGlzLnBhbm5lci5jb25lSW5uZXJBbmdsZSA9IGNvbmVJbm5lckFuZ2xlOwoJCQl0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlOwoJCQl0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHsKCgkJCU9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApOwoKCQkJaWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gdHJ1ZSAmJiB0aGlzLmlzUGxheWluZyA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQkJdGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiQzLCBfcXVhdGVybmlvbiQ0LCBfc2NhbGUkMiApOwoKCQkJX29yaWVudGF0aW9uJDEuc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQ0ICk7CgoJCQl2YXIgcGFubmVyID0gdGhpcy5wYW5uZXI7CgoJCQlpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7CgoJCQkJLy8gY29kZSBwYXRoIGZvciBDaHJvbWUgYW5kIEZpcmVmb3ggKHNlZSAjMTQzOTMpCgoJCQkJdmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLmxpc3RlbmVyLnRpbWVEZWx0YTsKCgkJCQlwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy54LCBlbmRUaW1lICk7CgkJCQlwYW5uZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy55LCBlbmRUaW1lICk7CgkJCQlwYW5uZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy56LCBlbmRUaW1lICk7CgkJCQlwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS54LCBlbmRUaW1lICk7CgkJCQlwYW5uZXIub3JpZW50YXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS55LCBlbmRUaW1lICk7CgkJCQlwYW5uZXIub3JpZW50YXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS56LCBlbmRUaW1lICk7CgoJCQl9IGVsc2UgewoKCQkJCXBhbm5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uJDMueCwgX3Bvc2l0aW9uJDMueSwgX3Bvc2l0aW9uJDMueiApOwoJCQkJcGFubmVyLnNldE9yaWVudGF0aW9uKCBfb3JpZW50YXRpb24kMS54LCBfb3JpZW50YXRpb24kMS55LCBfb3JpZW50YXRpb24kMS56ICk7CgoJCQl9CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gQXVkaW9BbmFseXNlciggYXVkaW8sIGZmdFNpemUgKSB7CgoJCXRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7CgkJdGhpcy5hbmFseXNlci5mZnRTaXplID0gZmZ0U2l6ZSAhPT0gdW5kZWZpbmVkID8gZmZ0U2l6ZSA6IDIwNDg7CgoJCXRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KCB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50ICk7CgoJCWF1ZGlvLmdldE91dHB1dCgpLmNvbm5lY3QoIHRoaXMuYW5hbHlzZXIgKTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggQXVkaW9BbmFseXNlci5wcm90b3R5cGUsIHsKCgkJZ2V0RnJlcXVlbmN5RGF0YTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSggdGhpcy5kYXRhICk7CgoJCQlyZXR1cm4gdGhpcy5kYXRhOwoKCQl9LAoKCQlnZXRBdmVyYWdlRnJlcXVlbmN5OiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdmFsdWUgPSAwLCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHsKCgkJCQl2YWx1ZSArPSBkYXRhWyBpIF07CgoJCQl9CgoJCQlyZXR1cm4gdmFsdWUgLyBkYXRhLmxlbmd0aDsKCgkJfQoKCX0gKTsKCgkvKioKCSAqCgkgKiBCdWZmZXJlZCBzY2VuZSBncmFwaCBwcm9wZXJ0eSB0aGF0IGFsbG93cyB3ZWlnaHRlZCBhY2N1bXVsYXRpb24uCgkgKgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqIEBhdXRob3IgdHNjaHcKCSAqLwoKCWZ1bmN0aW9uIFByb3BlcnR5TWl4ZXIoIGJpbmRpbmcsIHR5cGVOYW1lLCB2YWx1ZVNpemUgKSB7CgoJCXRoaXMuYmluZGluZyA9IGJpbmRpbmc7CgkJdGhpcy52YWx1ZVNpemUgPSB2YWx1ZVNpemU7CgoJCXZhciBidWZmZXJUeXBlID0gRmxvYXQ2NEFycmF5LAoJCQltaXhGdW5jdGlvbjsKCgkJc3dpdGNoICggdHlwZU5hbWUgKSB7CgoJCQljYXNlICdxdWF0ZXJuaW9uJzoKCQkJCW1peEZ1bmN0aW9uID0gdGhpcy5fc2xlcnA7CgkJCQlicmVhazsKCgkJCWNhc2UgJ3N0cmluZyc6CgkJCWNhc2UgJ2Jvb2wnOgoJCQkJYnVmZmVyVHlwZSA9IEFycmF5OwoJCQkJbWl4RnVuY3Rpb24gPSB0aGlzLl9zZWxlY3Q7CgkJCQlicmVhazsKCgkJCWRlZmF1bHQ6CgkJCQltaXhGdW5jdGlvbiA9IHRoaXMuX2xlcnA7CgoJCX0KCgkJdGhpcy5idWZmZXIgPSBuZXcgYnVmZmVyVHlwZSggdmFsdWVTaXplICogNCApOwoJCS8vIGxheW91dDogWyBpbmNvbWluZyB8IGFjY3UwIHwgYWNjdTEgfCBvcmlnIF0KCQkvLwoJCS8vIGludGVycG9sYXRvcnMgY2FuIHVzZSAuYnVmZmVyIGFzIHRoZWlyIC5yZXN1bHQKCQkvLyB0aGUgZGF0YSB0aGVuIGdvZXMgdG8gJ2luY29taW5nJwoJCS8vCgkJLy8gJ2FjY3UwJyBhbmQgJ2FjY3UxJyBhcmUgdXNlZCBmcmFtZS1pbnRlcmxlYXZlZCBmb3IKCQkvLyB0aGUgY3VtdWxhdGl2ZSByZXN1bHQgYW5kIGFyZSBjb21wYXJlZCB0byBkZXRlY3QKCQkvLyBjaGFuZ2VzCgkJLy8KCQkvLyAnb3JpZycgc3RvcmVzIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgcHJvcGVydHkKCgkJdGhpcy5fbWl4QnVmZmVyUmVnaW9uID0gbWl4RnVuY3Rpb247CgoJCXRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7CgoJCXRoaXMudXNlQ291bnQgPSAwOwoJCXRoaXMucmVmZXJlbmNlQ291bnQgPSAwOwoKCX0KCglPYmplY3QuYXNzaWduKCBQcm9wZXJ0eU1peGVyLnByb3RvdHlwZSwgewoKCQkvLyBhY2N1bXVsYXRlIGRhdGEgaW4gdGhlICdpbmNvbWluZycgcmVnaW9uIGludG8gJ2FjY3U8aT4nCgkJYWNjdW11bGF0ZTogZnVuY3Rpb24gKCBhY2N1SW5kZXgsIHdlaWdodCApIHsKCgkJCS8vIG5vdGU6IGhhcHBpbHkgYWNjdW11bGF0aW5nIG5vdGhpbmcgd2hlbiB3ZWlnaHQgPSAwLCB0aGUgY2FsbGVyIGtub3dzCgkJCS8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlCgoJCQl2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsCgkJCQlzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSwKCQkJCW9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSwKCgkJCQljdXJyZW50V2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0OwoKCQkJaWYgKCBjdXJyZW50V2VpZ2h0ID09PSAwICkgewoKCQkJCS8vIGFjY3VOIDo9IGluY29taW5nICogd2VpZ2h0CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7CgoJCQkJCWJ1ZmZlclsgb2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBpIF07CgoJCQkJfQoKCQkJCWN1cnJlbnRXZWlnaHQgPSB3ZWlnaHQ7CgoJCQl9IGVsc2UgewoKCQkJCS8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHQKCgkJCQljdXJyZW50V2VpZ2h0ICs9IHdlaWdodDsKCQkJCXZhciBtaXggPSB3ZWlnaHQgLyBjdXJyZW50V2VpZ2h0OwoJCQkJdGhpcy5fbWl4QnVmZmVyUmVnaW9uKCBidWZmZXIsIG9mZnNldCwgMCwgbWl4LCBzdHJpZGUgKTsKCgkJCX0KCgkJCXRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7CgoJCX0sCgoJCS8vIGFwcGx5IHRoZSBzdGF0ZSBvZiAnYWNjdTxpPicgdG8gdGhlIGJpbmRpbmcgd2hlbiBhY2N1cyBkaWZmZXIKCQlhcHBseTogZnVuY3Rpb24gKCBhY2N1SW5kZXggKSB7CgoJCQl2YXIgc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsCgkJCQlidWZmZXIgPSB0aGlzLmJ1ZmZlciwKCQkJCW9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSwKCgkJCQl3ZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQsCgoJCQkJYmluZGluZyA9IHRoaXMuYmluZGluZzsKCgkJCXRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7CgoJCQlpZiAoIHdlaWdodCA8IDEgKSB7CgoJCQkJLy8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKQoKCQkJCXZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogMzsKCgkJCQl0aGlzLl9taXhCdWZmZXJSZWdpb24oCgkJCQkJYnVmZmVyLCBvZmZzZXQsIG9yaWdpbmFsVmFsdWVPZmZzZXQsIDEgLSB3ZWlnaHQsIHN0cmlkZSApOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7CgoJCQkJaWYgKCBidWZmZXJbIGkgXSAhPT0gYnVmZmVyWyBpICsgc3RyaWRlIF0gKSB7CgoJCQkJCS8vIHZhbHVlIGhhcyBjaGFuZ2VkIC0+IHVwZGF0ZSBzY2VuZSBncmFwaAoKCQkJCQliaW5kaW5nLnNldFZhbHVlKCBidWZmZXIsIG9mZnNldCApOwoJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJLy8gcmVtZW1iZXIgdGhlIHN0YXRlIG9mIHRoZSBib3VuZCBwcm9wZXJ0eSBhbmQgY29weSBpdCB0byBib3RoIGFjY3VzCgkJc2F2ZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBiaW5kaW5nID0gdGhpcy5iaW5kaW5nOwoKCQkJdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyLAoJCQkJc3RyaWRlID0gdGhpcy52YWx1ZVNpemUsCgoJCQkJb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIDM7CgoJCQliaW5kaW5nLmdldFZhbHVlKCBidWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTsKCgkJCS8vIGFjY3VbMC4uMV0gOj0gb3JpZyAtLSBpbml0aWFsbHkgZGV0ZWN0IGNoYW5nZXMgYWdhaW5zdCB0aGUgb3JpZ2luYWwKCQkJZm9yICggdmFyIGkgPSBzdHJpZGUsIGUgPSBvcmlnaW5hbFZhbHVlT2Zmc2V0OyBpICE9PSBlOyArKyBpICkgewoKCQkJCWJ1ZmZlclsgaSBdID0gYnVmZmVyWyBvcmlnaW5hbFZhbHVlT2Zmc2V0ICsgKCBpICUgc3RyaWRlICkgXTsKCgkJCX0KCgkJCXRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7CgoJCX0sCgoJCS8vIGFwcGx5IHRoZSBzdGF0ZSBwcmV2aW91c2x5IHRha2VuIHZpYSAnc2F2ZU9yaWdpbmFsU3RhdGUnIHRvIHRoZSBiaW5kaW5nCgkJcmVzdG9yZU9yaWdpbmFsU3RhdGU6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gdGhpcy52YWx1ZVNpemUgKiAzOwoJCQl0aGlzLmJpbmRpbmcuc2V0VmFsdWUoIHRoaXMuYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7CgoJCX0sCgoKCQkvLyBtaXggZnVuY3Rpb25zCgoJCV9zZWxlY3Q6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkgewoKCQkJaWYgKCB0ID49IDAuNSApIHsKCgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHsKCgkJCQkJYnVmZmVyWyBkc3RPZmZzZXQgKyBpIF0gPSBidWZmZXJbIHNyY09mZnNldCArIGkgXTsKCgkJCQl9CgoJCQl9CgoJCX0sCgoJCV9zbGVycDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0ICkgewoKCQkJUXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQsIHQgKTsKCgkJfSwKCgkJX2xlcnA6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlICkgewoKCQkJdmFyIHMgPSAxIC0gdDsKCgkJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkgewoKCQkJCXZhciBqID0gZHN0T2Zmc2V0ICsgaTsKCgkJCQlidWZmZXJbIGogXSA9IGJ1ZmZlclsgaiBdICogcyArIGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdICogdDsKCgkJCX0KCgkJfQoKCX0gKTsKCgkvKioKCSAqCgkgKiBBIHJlZmVyZW5jZSB0byBhIHJlYWwgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoLgoJICoKCSAqCgkgKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvLwoJICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCgkvLyBDaGFyYWN0ZXJzIFtdLjovIGFyZSByZXNlcnZlZCBmb3IgdHJhY2sgYmluZGluZyBzeW50YXguCgl2YXIgX1JFU0VSVkVEX0NIQVJTX1JFID0gJ1xcW1xcXVxcLjpcXC8nOwoJdmFyIF9yZXNlcnZlZFJlID0gbmV3IFJlZ0V4cCggJ1snICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nLCAnZycgKTsKCgkvLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXHdgIHJlZ2V4cCBtYXRjaGVzCgkvLyBvbmx5IGxhdGluIGNoYXJhY3RlcnMsIGFuZCB0aGUgdW5pY29kZSBccHtMfSBpcyBub3QgeWV0IHN1cHBvcnRlZC4gU28KCS8vIGluc3RlYWQsIHdlIGV4Y2x1ZGUgcmVzZXJ2ZWQgY2hhcmFjdGVycyBhbmQgbWF0Y2ggZXZlcnl0aGluZyBlbHNlLgoJdmFyIF93b3JkQ2hhciA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXSc7Cgl2YXIgX3dvcmRDaGFyT3JEb3QgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFLnJlcGxhY2UoICdcXC4nLCAnJyApICsgJ10nOwoKCS8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0CgkvLyBiZSBtYXRjaGVkIHRvIHBhcnNlIHRoZSByZXN0IG9mIHRoZSB0cmFjayBuYW1lLgoJdmFyIF9kaXJlY3RvcnlSZSA9IC8oKD86V0MrW1wvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTsKCgkvLyBUYXJnZXQgbm9kZS4gTWF5IGNvbnRhaW4gd29yZCBjaGFyYWN0ZXJzIChhLXpBLVowLTlfKSBhbmQgJy4nIG9yICctJy4KCXZhciBfbm9kZVJlID0gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCBfd29yZENoYXJPckRvdCApOwoKCS8vIE9iamVjdCBvbiB0YXJnZXQgbm9kZSwgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWQKCS8vIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heSBjb250YWluIGFueSBjaGFyYWN0ZXIgZXhjZXB0IGNsb3NpbmcgYnJhY2tldC4KCXZhciBfb2JqZWN0UmUgPSAvKD86XC4oV0MrKSg/OlxbKC4rKVxdKT8pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApOwoKCS8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heQoJLy8gY29udGFpbiBhbnkgbm9uLWJyYWNrZXQgY2hhcmFjdGVycy4KCXZhciBfcHJvcGVydHlSZSA9IC9cLihXQyspKD86XFsoLispXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApOwoKCXZhciBfdHJhY2tSZSA9IG5ldyBSZWdFeHAoICcnCgkJKyAnXicKCQkrIF9kaXJlY3RvcnlSZQoJCSsgX25vZGVSZQoJCSsgX29iamVjdFJlCgkJKyBfcHJvcGVydHlSZQoJCSsgJyQnCgkpOwoKCXZhciBfc3VwcG9ydGVkT2JqZWN0TmFtZXMgPSBbICdtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnIF07CgoJZnVuY3Rpb24gQ29tcG9zaXRlKCB0YXJnZXRHcm91cCwgcGF0aCwgb3B0aW9uYWxQYXJzZWRQYXRoICkgewoKCQl2YXIgcGFyc2VkUGF0aCA9IG9wdGlvbmFsUGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTsKCgkJdGhpcy5fdGFyZ2V0R3JvdXAgPSB0YXJnZXRHcm91cDsKCQl0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggQ29tcG9zaXRlLnByb3RvdHlwZSwgewoKCQlnZXRWYWx1ZTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJdGhpcy5iaW5kKCk7IC8vIGJpbmQgYWxsIGJpbmRpbmcKCgkJCXZhciBmaXJzdFZhbGlkSW5kZXggPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sCgkJCQliaW5kaW5nID0gdGhpcy5fYmluZGluZ3NbIGZpcnN0VmFsaWRJbmRleCBdOwoKCQkJLy8gYW5kIG9ubHkgY2FsbCAuZ2V0VmFsdWUgb24gdGhlIGZpcnN0CgkJCWlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgeyBiaW5kaW5nLmdldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7IH0KCgkJfSwKCgkJc2V0VmFsdWU6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHsKCgkJCXZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzOwoKCQkJZm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJYmluZGluZ3NbIGkgXS5zZXRWYWx1ZSggYXJyYXksIG9mZnNldCApOwoKCQkJfQoKCQl9LAoKCQliaW5kOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5nczsKCgkJCWZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCWJpbmRpbmdzWyBpIF0uYmluZCgpOwoKCQkJfQoKCQl9LAoKCQl1bmJpbmQ6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzOwoKCQkJZm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJYmluZGluZ3NbIGkgXS51bmJpbmQoKTsKCgkJCX0KCgkJfQoKCX0gKTsKCgoJZnVuY3Rpb24gUHJvcGVydHlCaW5kaW5nKCByb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCApIHsKCgkJdGhpcy5wYXRoID0gcGF0aDsKCQl0aGlzLnBhcnNlZFBhdGggPSBwYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApOwoKCQl0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCByb290Tm9kZTsKCgkJdGhpcy5yb290Tm9kZSA9IHJvb3ROb2RlOwoKCX0KCglPYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcsIHsKCgkJQ29tcG9zaXRlOiBDb21wb3NpdGUsCgoJCWNyZWF0ZTogZnVuY3Rpb24gKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICkgewoKCQkJaWYgKCAhICggcm9vdCAmJiByb290LmlzQW5pbWF0aW9uT2JqZWN0R3JvdXAgKSApIHsKCgkJCQlyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApOwoKCQkJfSBlbHNlIHsKCgkJCQlyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTsKCgkJCX0KCgkJfSwKCgkJLyoqCgkJICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tCgkJICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLgoJCSAqCgkJICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC4KCQkgKiBAcmV0dXJuIHtzdHJpbmd9CgkJICovCgkJc2FuaXRpemVOb2RlTmFtZTogZnVuY3Rpb24gKCBuYW1lICkgewoKCQkJcmV0dXJuIG5hbWUucmVwbGFjZSggL1xzL2csICdfJyApLnJlcGxhY2UoIF9yZXNlcnZlZFJlLCAnJyApOwoKCQl9LAoKCQlwYXJzZVRyYWNrTmFtZTogZnVuY3Rpb24gKCB0cmFja05hbWUgKSB7CgoJCQl2YXIgbWF0Y2hlcyA9IF90cmFja1JlLmV4ZWMoIHRyYWNrTmFtZSApOwoKCQkJaWYgKCAhIG1hdGNoZXMgKSB7CgoJCQkJdGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7CgoJCQl9CgoJCQl2YXIgcmVzdWx0cyA9IHsKCQkJCS8vIGRpcmVjdG9yeU5hbWU6IG1hdGNoZXNbIDEgXSwgLy8gKHRzY2h3KSBjdXJyZW50bHkgdW51c2VkCgkJCQlub2RlTmFtZTogbWF0Y2hlc1sgMiBdLAoJCQkJb2JqZWN0TmFtZTogbWF0Y2hlc1sgMyBdLAoJCQkJb2JqZWN0SW5kZXg6IG1hdGNoZXNbIDQgXSwKCQkJCXByb3BlcnR5TmFtZTogbWF0Y2hlc1sgNSBdLCAvLyByZXF1aXJlZAoJCQkJcHJvcGVydHlJbmRleDogbWF0Y2hlc1sgNiBdCgkJCX07CgoJCQl2YXIgbGFzdERvdCA9IHJlc3VsdHMubm9kZU5hbWUgJiYgcmVzdWx0cy5ub2RlTmFtZS5sYXN0SW5kZXhPZiggJy4nICk7CgoJCQlpZiAoIGxhc3REb3QgIT09IHVuZGVmaW5lZCAmJiBsYXN0RG90ICE9PSAtIDEgKSB7CgoJCQkJdmFyIG9iamVjdE5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggbGFzdERvdCArIDEgKTsKCgkJCQkvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYSB3aGl0ZWxpc3QuIE90aGVyd2lzZSwgdGhlcmUKCQkJCS8vIGlzIG5vIHdheSB0byBwYXJzZSAnZm9vLmJhci5iYXonOiAnYmF6JyBtdXN0IGJlIGEgcHJvcGVydHksIGJ1dAoJCQkJLy8gJ2JhcicgY291bGQgYmUgdGhlIG9iamVjdE5hbWUsIG9yIHBhcnQgb2YgYSBub2RlTmFtZSAod2hpY2ggY2FuCgkJCQkvLyBpbmNsdWRlICcuJyBjaGFyYWN0ZXJzKS4KCQkJCWlmICggX3N1cHBvcnRlZE9iamVjdE5hbWVzLmluZGV4T2YoIG9iamVjdE5hbWUgKSAhPT0gLSAxICkgewoKCQkJCQlyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTsKCQkJCQlyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lOwoKCQkJCX0KCgkJCX0KCgkJCWlmICggcmVzdWx0cy5wcm9wZXJ0eU5hbWUgPT09IG51bGwgfHwgcmVzdWx0cy5wcm9wZXJ0eU5hbWUubGVuZ3RoID09PSAwICkgewoKCQkJCXRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogY2FuIG5vdCBwYXJzZSBwcm9wZXJ0eU5hbWUgZnJvbSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTsKCgkJCX0KCgkJCXJldHVybiByZXN1bHRzOwoKCQl9LAoKCQlmaW5kTm9kZTogZnVuY3Rpb24gKCByb290LCBub2RlTmFtZSApIHsKCgkJCWlmICggISBub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gIiIgfHwgbm9kZU5hbWUgPT09ICJyb290IiB8fCBub2RlTmFtZSA9PT0gIi4iIHx8IG5vZGVOYW1lID09PSAtIDEgfHwgbm9kZU5hbWUgPT09IHJvb3QubmFtZSB8fCBub2RlTmFtZSA9PT0gcm9vdC51dWlkICkgewoKCQkJCXJldHVybiByb290OwoKCQkJfQoKCQkJLy8gc2VhcmNoIGludG8gc2tlbGV0b24gYm9uZXMuCgkJCWlmICggcm9vdC5za2VsZXRvbiApIHsKCgkJCQl2YXIgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZSggbm9kZU5hbWUgKTsKCgkJCQlpZiAoIGJvbmUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJcmV0dXJuIGJvbmU7CgoJCQkJfQoKCQkJfQoKCQkJLy8gc2VhcmNoIGludG8gbm9kZSBzdWJ0cmVlLgoJCQlpZiAoIHJvb3QuY2hpbGRyZW4gKSB7CgoJCQkJdmFyIHNlYXJjaE5vZGVTdWJ0cmVlID0gZnVuY3Rpb24gKCBjaGlsZHJlbiApIHsKCgkJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkgewoKCQkJCQkJdmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuWyBpIF07CgoJCQkJCQlpZiAoIGNoaWxkTm9kZS5uYW1lID09PSBub2RlTmFtZSB8fCBjaGlsZE5vZGUudXVpZCA9PT0gbm9kZU5hbWUgKSB7CgoJCQkJCQkJcmV0dXJuIGNoaWxkTm9kZTsKCgkJCQkJCX0KCgkJCQkJCXZhciByZXN1bHQgPSBzZWFyY2hOb2RlU3VidHJlZSggY2hpbGROb2RlLmNoaWxkcmVuICk7CgoJCQkJCQlpZiAoIHJlc3VsdCApIHsgcmV0dXJuIHJlc3VsdDsgfQoKCQkJCQl9CgoJCQkJCXJldHVybiBudWxsOwoKCQkJCX07CgoJCQkJdmFyIHN1YlRyZWVOb2RlID0gc2VhcmNoTm9kZVN1YnRyZWUoIHJvb3QuY2hpbGRyZW4gKTsKCgkJCQlpZiAoIHN1YlRyZWVOb2RlICkgewoKCQkJCQlyZXR1cm4gc3ViVHJlZU5vZGU7CgoJCQkJfQoKCQkJfQoKCQkJcmV0dXJuIG51bGw7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZSwgeyAvLyBwcm90b3R5cGUsIGNvbnRpbnVlZAoKCQkvLyB0aGVzZSBhcmUgdXNlZCB0byAiYmluZCIgYSBub25leGlzdGVudCBwcm9wZXJ0eQoJCV9nZXRWYWx1ZV91bmF2YWlsYWJsZTogZnVuY3Rpb24gKCkge30sCgkJX3NldFZhbHVlX3VuYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7fSwKCgkJQmluZGluZ1R5cGU6IHsKCQkJRGlyZWN0OiAwLAoJCQlFbnRpcmVBcnJheTogMSwKCQkJQXJyYXlFbGVtZW50OiAyLAoJCQlIYXNGcm9tVG9BcnJheTogMwoJCX0sCgoJCVZlcnNpb25pbmc6IHsKCQkJTm9uZTogMCwKCQkJTmVlZHNVcGRhdGU6IDEsCgkJCU1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDIKCQl9LAoKCQlHZXR0ZXJCeUJpbmRpbmdUeXBlOiBbCgoJCQlmdW5jdGlvbiBnZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCWJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLm5vZGVbIHRoaXMucHJvcGVydHlOYW1lIF07CgoJCQl9LAoKCQkJZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCXZhciBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gc291cmNlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQkJYnVmZmVyWyBvZmZzZXQgKysgXSA9IHNvdXJjZVsgaSBdOwoKCQkJCX0KCgkJCX0sCgoJCQlmdW5jdGlvbiBnZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCWJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdOwoKCQkJfSwKCgkJCWZ1bmN0aW9uIGdldFZhbHVlX3RvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCXRoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KCBidWZmZXIsIG9mZnNldCApOwoKCQkJfQoKCQldLAoKCQlTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZzogWwoKCQkJWwoJCQkJLy8gRGlyZWN0CgoJCQkJZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdOwoKCQkJCX0sCgoJCQkJZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdOwoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9LAoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdOwoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCV0sIFsKCgkJCQkvLyBFbnRpcmVBcnJheQoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7CgoJCQkJCWZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCQkJZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTsKCgkJCQkJfQoKCQkJCX0sCgoJCQkJZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCQl2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJCQlkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdOwoKCQkJCQl9CgoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9LAoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCQl2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJCQlkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdOwoKCQkJCQl9CgoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCV0sIFsKCgkJCQkvLyBBcnJheUVsZW1lbnQKCgkJCQlmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCQl0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTsKCgkJCQl9LAoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7CgoJCQkJCXRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdOwoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJCQl9LAoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07CgkJCQkJdGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7CgoJCQkJfQoKCQkJXSwgWwoKCQkJCS8vIEhhc1RvRnJvbUFycmF5CgoJCQkJZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApIHsKCgkJCQkJdGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTsKCgkJCQl9LAoKCQkJCWZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7CgoJCQkJCXRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7CgkJCQkJdGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0sCgoJCQkJZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkgewoKCQkJCQl0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApOwoJCQkJCXRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlOwoKCQkJCX0KCgkJCV0KCgkJXSwKCgkJZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlX3VuYm91bmQoIHRhcmdldEFycmF5LCBvZmZzZXQgKSB7CgoJCQl0aGlzLmJpbmQoKTsKCQkJdGhpcy5nZXRWYWx1ZSggdGFyZ2V0QXJyYXksIG9mZnNldCApOwoKCQkJLy8gTm90ZTogVGhpcyBjbGFzcyB1c2VzIGEgU3RhdGUgcGF0dGVybiBvbiBhIHBlci1tZXRob2QgYmFzaXM6CgkJCS8vICdiaW5kJyBzZXRzICd0aGlzLmdldFZhbHVlJyAvICdzZXRWYWx1ZScgYW5kIHNoYWRvd3MgdGhlCgkJCS8vIHByb3RvdHlwZSB2ZXJzaW9uIG9mIHRoZXNlIG1ldGhvZHMgd2l0aCBvbmUgdGhhdCByZXByZXNlbnRzCgkJCS8vIHRoZSBib3VuZCBzdGF0ZS4gV2hlbiB0aGUgcHJvcGVydHkgaXMgbm90IGZvdW5kLCB0aGUgbWV0aG9kcwoJCQkvLyBiZWNvbWUgbm8tb3BzLgoKCQl9LAoKCQlzZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVfdW5ib3VuZCggc291cmNlQXJyYXksIG9mZnNldCApIHsKCgkJCXRoaXMuYmluZCgpOwoJCQl0aGlzLnNldFZhbHVlKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICk7CgoJCX0sCgoJCS8vIGNyZWF0ZSBnZXR0ZXIgLyBzZXR0ZXIgcGFpciBmb3IgYSBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGgKCQliaW5kOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgdGFyZ2V0T2JqZWN0ID0gdGhpcy5ub2RlLAoJCQkJcGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aCwKCgkJCQlvYmplY3ROYW1lID0gcGFyc2VkUGF0aC5vYmplY3ROYW1lLAoJCQkJcHJvcGVydHlOYW1lID0gcGFyc2VkUGF0aC5wcm9wZXJ0eU5hbWUsCgkJCQlwcm9wZXJ0eUluZGV4ID0gcGFyc2VkUGF0aC5wcm9wZXJ0eUluZGV4OwoKCQkJaWYgKCAhIHRhcmdldE9iamVjdCApIHsKCgkJCQl0YXJnZXRPYmplY3QgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHRoaXMucm9vdE5vZGUsIHBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCB0aGlzLnJvb3ROb2RlOwoKCQkJCXRoaXMubm9kZSA9IHRhcmdldE9iamVjdDsKCgkJCX0KCgkJCS8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yCgkJCXRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmF2YWlsYWJsZTsKCQkJdGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYXZhaWxhYmxlOwoKCQkJLy8gZW5zdXJlIHRoZXJlIGlzIGEgdmFsdWUgbm9kZQoJCQlpZiAoICEgdGFyZ2V0T2JqZWN0ICkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgbm9kZSBmb3IgdHJhY2s6ICcgKyB0aGlzLnBhdGggKyAnIGJ1dCBpdCB3YXNuXCd0IGZvdW5kLicgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCWlmICggb2JqZWN0TmFtZSApIHsKCgkJCQl2YXIgb2JqZWN0SW5kZXggPSBwYXJzZWRQYXRoLm9iamVjdEluZGV4OwoKCQkJCS8vIHNwZWNpYWwgY2FzZXMgd2VyZSB3ZSBuZWVkIHRvIHJlYWNoIGRlZXBlciBpbnRvIHRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSBmYWNlIG1hdGVyaWFscy4uLi4KCQkJCXN3aXRjaCAoIG9iamVjdE5hbWUgKSB7CgoJCQkJCWNhc2UgJ21hdGVyaWFscyc6CgoJCQkJCQlpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkgewoKCQkJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzICk7CgkJCQkJCQlyZXR1cm47CgoJCQkJCQl9CgoJCQkJCQlpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscyApIHsKCgkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwubWF0ZXJpYWxzIGFzIG5vZGUubWF0ZXJpYWwgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFscyBhcnJheS4nLCB0aGlzICk7CgkJCQkJCQlyZXR1cm47CgoJCQkJCQl9CgoJCQkJCQl0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzOwoKCQkJCQkJYnJlYWs7CgoJCQkJCWNhc2UgJ2JvbmVzJzoKCgkJCQkJCWlmICggISB0YXJnZXRPYmplY3Quc2tlbGV0b24gKSB7CgoJCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIGJvbmVzIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIHNrZWxldG9uLicsIHRoaXMgKTsKCQkJCQkJCXJldHVybjsKCgkJCQkJCX0KCgkJCQkJCS8vIHBvdGVudGlhbCBmdXR1cmUgb3B0aW1pemF0aW9uOiBza2lwIHRoaXMgaWYgcHJvcGVydHlJbmRleCBpcyBhbHJlYWR5IGFuIGludGVnZXIKCQkJCQkJLy8gYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLgoKCQkJCQkJdGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0LnNrZWxldG9uLmJvbmVzOwoKCQkJCQkJLy8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLgoJCQkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkgewoKCQkJCQkJCWlmICggdGFyZ2V0T2JqZWN0WyBpIF0ubmFtZSA9PT0gb2JqZWN0SW5kZXggKSB7CgoJCQkJCQkJCW9iamVjdEluZGV4ID0gaTsKCQkJCQkJCQlicmVhazsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCQlicmVhazsKCgkJCQkJZGVmYXVsdDoKCgkJCQkJCWlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gb2JqZWN0TmFtZSBvZiBub2RlIHVuZGVmaW5lZC4nLCB0aGlzICk7CgkJCQkJCQlyZXR1cm47CgoJCQkJCQl9CgoJCQkJCQl0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXTsKCgkJCQl9CgoKCQkJCWlmICggb2JqZWN0SW5kZXggIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJaWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQuJywgdGhpcywgdGFyZ2V0T2JqZWN0ICk7CgkJCQkJCXJldHVybjsKCgkJCQkJfQoKCQkJCQl0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF07CgoJCQkJfQoKCQkJfQoKCQkJLy8gcmVzb2x2ZSBwcm9wZXJ0eQoJCQl2YXIgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTsKCgkJCWlmICggbm9kZVByb3BlcnR5ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIG5vZGVOYW1lID0gcGFyc2VkUGF0aC5ub2RlTmFtZTsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIHByb3BlcnR5IGZvciB0cmFjazogJyArIG5vZGVOYW1lICsKCQkJCQknLicgKyBwcm9wZXJ0eU5hbWUgKyAnIGJ1dCBpdCB3YXNuXCd0IGZvdW5kLicsIHRhcmdldE9iamVjdCApOwoJCQkJcmV0dXJuOwoKCQkJfQoKCQkJLy8gZGV0ZXJtaW5lIHZlcnNpb25pbmcgc2NoZW1lCgkJCXZhciB2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5vbmU7CgoJCQl0aGlzLnRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdDsKCgkJCWlmICggdGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG1hdGVyaWFsCgoJCQkJdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5OZWVkc1VwZGF0ZTsKCgkJCX0gZWxzZSBpZiAoIHRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG5vZGUgdHJhbnNmb3JtCgoJCQkJdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlOwoKCQkJfQoKCQkJLy8gZGV0ZXJtaW5lIGhvdyB0aGUgcHJvcGVydHkgZ2V0cyBib3VuZAoJCQl2YXIgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDsKCgkJCWlmICggcHJvcGVydHlJbmRleCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCS8vIGFjY2VzcyBhIHN1YiBlbGVtZW50IG9mIHRoZSBwcm9wZXJ0eSBhcnJheSAob25seSBwcmltaXRpdmVzIGFyZSBzdXBwb3J0ZWQgcmlnaHQgbm93KQoKCQkJCWlmICggcHJvcGVydHlOYW1lID09PSAibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiApIHsKCgkJCQkJLy8gcG90ZW50aWFsIG9wdGltaXphdGlvbiwgc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyLCBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuCgoJCQkJCS8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy4KCQkJCQlpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5ICkgewoKCQkJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMgKTsKCQkJCQkJcmV0dXJuOwoKCQkJCQl9CgoJCQkJCWlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7CgoJCQkJCQlpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyApIHsKCgkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLicsIHRoaXMgKTsKCQkJCQkJCXJldHVybjsKCgkJCQkJCX0KCgkJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoOyBpICsrICkgewoKCQkJCQkJCWlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvblsgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7CgoJCQkJCQkJCXByb3BlcnR5SW5kZXggPSBpOwoJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgoJCQkJCX0gZWxzZSB7CgoJCQkJCQlpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyApIHsKCgkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhUYXJnZXRzLicsIHRoaXMgKTsKCQkJCQkJCXJldHVybjsKCgkJCQkJCX0KCgkJCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMubm9kZS5nZW9tZXRyeS5tb3JwaFRhcmdldHMubGVuZ3RoOyBpICsrICkgewoKCQkJCQkJCWlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7CgoJCQkJCQkJCXByb3BlcnR5SW5kZXggPSBpOwoJCQkJCQkJCWJyZWFrOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJfQoKCQkJCX0KCgkJCQliaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuQXJyYXlFbGVtZW50OwoKCQkJCXRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTsKCQkJCXRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7CgoJCQl9IGVsc2UgaWYgKCBub2RlUHJvcGVydHkuZnJvbUFycmF5ICE9PSB1bmRlZmluZWQgJiYgbm9kZVByb3BlcnR5LnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkvLyBtdXN0IHVzZSBjb3B5IGZvciBPYmplY3QzRC5FdWxlci9RdWF0ZXJuaW9uCgoJCQkJYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkhhc0Zyb21Ub0FycmF5OwoKCQkJCXRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTsKCgkJCX0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIG5vZGVQcm9wZXJ0eSApICkgewoKCQkJCWJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5FbnRpcmVBcnJheTsKCgkJCQl0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7CgoJCQl9IGVsc2UgewoKCQkJCXRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lOwoKCQkJfQoKCQkJLy8gc2VsZWN0IGdldHRlciAvIHNldHRlcgoJCQl0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlWyBiaW5kaW5nVHlwZSBdOwoJCQl0aGlzLnNldFZhbHVlID0gdGhpcy5TZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZ1sgYmluZGluZ1R5cGUgXVsgdmVyc2lvbmluZyBdOwoKCQl9LAoKCQl1bmJpbmQ6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMubm9kZSA9IG51bGw7CgoJCQkvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlCgkJCS8vIG5vdGU6IGF2b2lkaW5nIHRvIG11dGF0ZSB0aGUgc2hhcGUgb2YgJ3RoaXMnIHZpYSAnZGVsZXRlJwoJCQl0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDsKCQkJdGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7CgoJCX0KCgl9ICk7CgoJLy8hXCBERUNMQVJFIEFMSUFTIEFGVEVSIGFzc2lnbiBwcm90b3R5cGUgIQoJT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZSwgewoKCQkvLyBpbml0aWFsIHN0YXRlIG9mIHRoZXNlIG1ldGhvZHMgdGhhdCBjYWxscyAnYmluZCcKCQlfZ2V0VmFsdWVfdW5ib3VuZDogUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5nZXRWYWx1ZSwKCQlfc2V0VmFsdWVfdW5ib3VuZDogUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5zZXRWYWx1ZSwKCgl9ICk7CgoJLyoqCgkgKgoJICogQSBncm91cCBvZiBvYmplY3RzIHRoYXQgcmVjZWl2ZXMgYSBzaGFyZWQgYW5pbWF0aW9uIHN0YXRlLgoJICoKCSAqIFVzYWdlOgoJICoKCSAqICAtIEFkZCBvYmplY3RzIHlvdSB3b3VsZCBvdGhlcndpc2UgcGFzcyBhcyAncm9vdCcgdG8gdGhlCgkgKiAgICBjb25zdHJ1Y3RvciBvciB0aGUgLmNsaXBBY3Rpb24gbWV0aG9kIG9mIEFuaW1hdGlvbk1peGVyLgoJICoKCSAqICAtIEluc3RlYWQgcGFzcyB0aGlzIG9iamVjdCBhcyAncm9vdCcuCgkgKgoJICogIC0gWW91IGNhbiBhbHNvIGFkZCBhbmQgcmVtb3ZlIG9iamVjdHMgbGF0ZXIgd2hlbiB0aGUgbWl4ZXIKCSAqICAgIGlzIHJ1bm5pbmcuCgkgKgoJICogTm90ZToKCSAqCgkgKiAgICBPYmplY3RzIG9mIHRoaXMgY2xhc3MgYXBwZWFyIGFzIG9uZSBvYmplY3QgdG8gdGhlIG1peGVyLAoJICogICAgc28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZQoJICogICAgb24gdGhlIGdyb3VwLgoJICoKCSAqIExpbWl0YXRpb246CgkgKgoJICogIC0gVGhlIGFuaW1hdGVkIHByb3BlcnRpZXMgbXVzdCBiZSBjb21wYXRpYmxlIGFtb25nIHRoZQoJICogICAgYWxsIG9iamVjdHMgaW4gdGhlIGdyb3VwLgoJICoKCSAqICAtIEEgc2luZ2xlIHByb3BlcnR5IGNhbiBlaXRoZXIgYmUgY29udHJvbGxlZCB0aHJvdWdoIGEKCSAqICAgIHRhcmdldCBncm91cCBvciBkaXJlY3RseSwgYnV0IG5vdCBib3RoLgoJICoKCSAqIEBhdXRob3IgdHNjaHcKCSAqLwoKCWZ1bmN0aW9uIEFuaW1hdGlvbk9iamVjdEdyb3VwKCkgewoKCQl0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsKCgkJLy8gY2FjaGVkIG9iamVjdHMgZm9sbG93ZWQgYnkgdGhlIGFjdGl2ZSBvbmVzCgkJdGhpcy5fb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcmd1bWVudHMgKTsKCgkJdGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGQKCQkvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGUKCgkJdmFyIGluZGljZXMgPSB7fTsKCQl0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nCgoJCWZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQlpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpOwoKCQl9CgoJCXRoaXMuX3BhdGhzID0gW107IC8vIGluc2lkZTogc3RyaW5nCgkJdGhpcy5fcGFyc2VkUGF0aHMgPSBbXTsgLy8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfQoJCXRoaXMuX2JpbmRpbmdzID0gW107IC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+CgkJdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoID0ge307IC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXMKCgkJdmFyIHNjb3BlID0gdGhpczsKCgkJdGhpcy5zdGF0cyA9IHsKCgkJCW9iamVjdHM6IHsKCQkJCWdldCB0b3RhbCgpIHsKCgkJCQkJcmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDsKCgkJCQl9LAoJCQkJZ2V0IGluVXNlKCkgewoKCQkJCQlyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXzsKCgkJCQl9CgkJCX0sCgkJCWdldCBiaW5kaW5nc1Blck9iamVjdCgpIHsKCgkJCQlyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDsKCgkJCX0KCgkJfTsKCgl9CgoJT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uT2JqZWN0R3JvdXAucHJvdG90eXBlLCB7CgoJCWlzQW5pbWF0aW9uT2JqZWN0R3JvdXA6IHRydWUsCgoJCWFkZDogZnVuY3Rpb24gKCkgewoKCQkJdmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLAoJCQkJbk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCwKCQkJCW5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sCgkJCQlpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCwKCQkJCXBhdGhzID0gdGhpcy5fcGF0aHMsCgkJCQlwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLAoJCQkJYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncywKCQkJCW5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aCwKCQkJCWtub3duT2JqZWN0ID0gdW5kZWZpbmVkOwoKCQkJZm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQl2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sCgkJCQkJdXVpZCA9IG9iamVjdC51dWlkLAoJCQkJCWluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdOwoKCQkJCWlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJLy8gdW5rbm93biBvYmplY3QgLT4gYWRkIGl0IHRvIHRoZSBBQ1RJVkUgcmVnaW9uCgoJCQkJCWluZGV4ID0gbk9iamVjdHMgKys7CgkJCQkJaW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gaW5kZXg7CgkJCQkJb2JqZWN0cy5wdXNoKCBvYmplY3QgKTsKCgkJCQkJLy8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5ncwoKCQkJCQlmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7CgoJCQkJCQliaW5kaW5nc1sgaiBdLnB1c2goIG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgaWYgKCBpbmRleCA8IG5DYWNoZWRPYmplY3RzICkgewoKCQkJCQlrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07CgoJCQkJCS8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IHRvIHRoZSBBQ1RJVkUgcmVnaW9uCgoJCQkJCXZhciBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsCgkJCQkJCWxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07CgoJCQkJCWluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7CgkJCQkJb2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7CgoJCQkJCWluZGljZXNCeVVVSURbIHV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7CgkJCQkJb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0OwoKCQkJCQkvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzCgoJCQkJCWZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHsKCgkJCQkJCXZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLAoJCQkJCQkJbGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdLAoJCQkJCQkJYmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTsKCgkJCQkJCWJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7CgoJCQkJCQlpZiAoIGJpbmRpbmcgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCQkvLyBzaW5jZSB3ZSBkbyBub3QgYm90aGVyIHRvIGNyZWF0ZSBuZXcgYmluZGluZ3MKCQkJCQkJCS8vIGZvciBvYmplY3RzIHRoYXQgYXJlIGNhY2hlZCwgdGhlIGJpbmRpbmcgbWF5CgkJCQkJCQkvLyBvciBtYXkgbm90IGV4aXN0CgoJCQkJCQkJYmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApOwoKCQkJCQkJfQoKCQkJCQkJYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nOwoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7CgoJCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25PYmplY3RHcm91cDogRGlmZmVyZW50IG9iamVjdHMgd2l0aCB0aGUgc2FtZSBVVUlEICcgKwoJCQkJCQknZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApOwoKCQkJCX0gLy8gZWxzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgd2hlcmUgd2Ugd2FudCBpdCB0byBiZQoKCQkJfSAvLyBmb3IgYXJndW1lbnRzCgoJCQl0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzOwoKCQl9LAoKCQlyZW1vdmU6IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cywKCQkJCW5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sCgkJCQlpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCwKCQkJCWJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsCgkJCQluQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCXZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSwKCQkJCQl1dWlkID0gb2JqZWN0LnV1aWQsCgkJCQkJaW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07CgoJCQkJaWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkgewoKCQkJCQkvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCBpbnRvIHRoZSBDQUNIRUQgcmVnaW9uCgoJCQkJCXZhciBsYXN0Q2FjaGVkSW5kZXggPSBuQ2FjaGVkT2JqZWN0cyArKywKCQkJCQkJZmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXTsKCgkJCQkJaW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7CgkJCQkJb2JqZWN0c1sgaW5kZXggXSA9IGZpcnN0QWN0aXZlT2JqZWN0OwoKCQkJCQlpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7CgkJCQkJb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF0gPSBvYmplY3Q7CgoJCQkJCS8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3MKCgkJCQkJZm9yICggdmFyIGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkgewoKCQkJCQkJdmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sCgkJCQkJCQlmaXJzdEFjdGl2ZSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0sCgkJCQkJCQliaW5kaW5nID0gYmluZGluZ3NGb3JQYXRoWyBpbmRleCBdOwoKCQkJCQkJYmluZGluZ3NGb3JQYXRoWyBpbmRleCBdID0gZmlyc3RBY3RpdmU7CgkJCQkJCWJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nOwoKCQkJCQl9CgoJCQkJfQoKCQkJfSAvLyBmb3IgYXJndW1lbnRzCgoJCQl0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzOwoKCQl9LAoKCQkvLyByZW1vdmUgJiBmb3JnZXQKCQl1bmNhY2hlOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsCgkJCQluT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLAoJCQkJbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXywKCQkJCWluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELAoJCQkJYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncywKCQkJCW5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDsKCgkJCWZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJdmFyIG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLAoJCQkJCXV1aWQgPSBvYmplY3QudXVpZCwKCQkJCQlpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTsKCgkJCQlpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCWRlbGV0ZSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07CgoJCQkJCWlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHsKCgkJCQkJCS8vIG9iamVjdCBpcyBjYWNoZWQsIHNocmluayB0aGUgQ0FDSEVEIHJlZ2lvbgoKCQkJCQkJdmFyIGZpcnN0QWN0aXZlSW5kZXggPSAtLSBuQ2FjaGVkT2JqZWN0cywKCQkJCQkJCWxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0sCgkJCQkJCQlsYXN0SW5kZXggPSAtLSBuT2JqZWN0cywKCQkJCQkJCWxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTsKCgkJCQkJCS8vIGxhc3QgY2FjaGVkIG9iamVjdCB0YWtlcyB0aGlzIG9iamVjdCdzIHBsYWNlCgkJCQkJCWluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7CgkJCQkJCW9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0OwoKCQkJCQkJLy8gbGFzdCBvYmplY3QgZ29lcyB0byB0aGUgYWN0aXZhdGVkIHNsb3QgYW5kIHBvcAoJCQkJCQlpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7CgkJCQkJCW9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3RPYmplY3Q7CgkJCQkJCW9iamVjdHMucG9wKCk7CgoJCQkJCQkvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzCgoJCQkJCQlmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7CgoJCQkJCQkJdmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sCgkJCQkJCQkJbGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdLAoJCQkJCQkJCWxhc3QgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdOwoKCQkJCQkJCWJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7CgkJCQkJCQliaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7CgkJCQkJCQliaW5kaW5nc0ZvclBhdGgucG9wKCk7CgoJCQkJCQl9CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wCgoJCQkJCQl2YXIgbGFzdEluZGV4ID0gLS0gbk9iamVjdHMsCgkJCQkJCQlsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07CgoJCQkJCQlpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGluZGV4OwoJCQkJCQlvYmplY3RzWyBpbmRleCBdID0gbGFzdE9iamVjdDsKCQkJCQkJb2JqZWN0cy5wb3AoKTsKCgkJCQkJCS8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3MKCgkJCQkJCWZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHsKCgkJCQkJCQl2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXTsKCgkJCQkJCQliaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdOwoJCQkJCQkJYmluZGluZ3NGb3JQYXRoLnBvcCgpOwoKCQkJCQkJfQoKCQkJCQl9IC8vIGNhY2hlZCBvciBhY3RpdmUKCgkJCQl9IC8vIGlmIG9iamVjdCBpcyBrbm93bgoKCQkJfSAvLyBmb3IgYXJndW1lbnRzCgoJCQl0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzOwoKCQl9LAoKCQkvLyBJbnRlcm5hbCBpbnRlcmZhY2UgdXNlZCBieSBiZWZyaWVuZGVkIFByb3BlcnR5QmluZGluZy5Db21wb3NpdGU6CgoJCXN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCwgcGFyc2VkUGF0aCApIHsKCgkJCS8vIHJldHVybnMgYW4gYXJyYXkgb2YgYmluZGluZ3MgZm9yIHRoZSBnaXZlbiBwYXRoIHRoYXQgaXMgY2hhbmdlZAoJCQkvLyBhY2NvcmRpbmcgdG8gdGhlIGNvbnRhaW5lZCBvYmplY3RzIGluIHRoZSBncm91cAoKCQkJdmFyIGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGgsCgkJCQlpbmRleCA9IGluZGljZXNCeVBhdGhbIHBhdGggXSwKCQkJCWJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7CgoJCQlpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7IHJldHVybiBiaW5kaW5nc1sgaW5kZXggXTsgfQoKCQkJdmFyIHBhdGhzID0gdGhpcy5fcGF0aHMsCgkJCQlwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLAoJCQkJb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsCgkJCQluT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLAoJCQkJbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXywKCQkJCWJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTsKCgkJCWluZGV4ID0gYmluZGluZ3MubGVuZ3RoOwoKCQkJaW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7CgoJCQlwYXRocy5wdXNoKCBwYXRoICk7CgkJCXBhcnNlZFBhdGhzLnB1c2goIHBhcnNlZFBhdGggKTsKCQkJYmluZGluZ3MucHVzaCggYmluZGluZ3NGb3JQYXRoICk7CgoJCQlmb3IgKCB2YXIgaSA9IG5DYWNoZWRPYmplY3RzLCBuID0gb2JqZWN0cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJdmFyIG9iamVjdCA9IG9iamVjdHNbIGkgXTsKCQkJCWJpbmRpbmdzRm9yUGF0aFsgaSBdID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoLCBwYXJzZWRQYXRoICk7CgoJCQl9CgoJCQlyZXR1cm4gYmluZGluZ3NGb3JQYXRoOwoKCQl9LAoKCQl1bnN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCApIHsKCgkJCS8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXIKCQkJLy8gdXBkYXRlIHRoZSBhcnJheSBwcmV2aW91c2x5IG9idGFpbmVkIHdpdGggJ3N1YnNjcmliZV8nCgoJCQl2YXIgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCwKCQkJCWluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdOwoKCQkJaWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXZhciBwYXRocyA9IHRoaXMuX3BhdGhzLAoJCQkJCXBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsCgkJCQkJYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncywKCQkJCQlsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsCgkJCQkJbGFzdEJpbmRpbmdzID0gYmluZGluZ3NbIGxhc3RCaW5kaW5nc0luZGV4IF0sCgkJCQkJbGFzdEJpbmRpbmdzUGF0aCA9IHBhdGhbIGxhc3RCaW5kaW5nc0luZGV4IF07CgoJCQkJaW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7CgoJCQkJYmluZGluZ3NbIGluZGV4IF0gPSBsYXN0QmluZGluZ3M7CgkJCQliaW5kaW5ncy5wb3AoKTsKCgkJCQlwYXJzZWRQYXRoc1sgaW5kZXggXSA9IHBhcnNlZFBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdOwoJCQkJcGFyc2VkUGF0aHMucG9wKCk7CgoJCQkJcGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTsKCQkJCXBhdGhzLnBvcCgpOwoKCQkJfQoKCQl9CgoJfSApOwoKCS8qKgoJICoKCSAqIEFjdGlvbiBwcm92aWRlZCBieSBBbmltYXRpb25NaXhlciBmb3Igc2NoZWR1bGluZyBjbGlwIHBsYXliYWNrIG9uIHNwZWNpZmljCgkgKiBvYmplY3RzLgoJICoKCSAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vCgkgKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy8KCSAqIEBhdXRob3IgdHNjaHcKCSAqCgkgKi8KCglmdW5jdGlvbiBBbmltYXRpb25BY3Rpb24oIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgKSB7CgoJCXRoaXMuX21peGVyID0gbWl4ZXI7CgkJdGhpcy5fY2xpcCA9IGNsaXA7CgkJdGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290IHx8IG51bGw7CgoJCXZhciB0cmFja3MgPSBjbGlwLnRyYWNrcywKCQkJblRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsCgkJCWludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApOwoKCQl2YXIgaW50ZXJwb2xhbnRTZXR0aW5ncyA9IHsKCQkJZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsCgkJCWVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZwoJCX07CgoJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHsKCgkJCXZhciBpbnRlcnBvbGFudCA9IHRyYWNrc1sgaSBdLmNyZWF0ZUludGVycG9sYW50KCBudWxsICk7CgkJCWludGVycG9sYW50c1sgaSBdID0gaW50ZXJwb2xhbnQ7CgkJCWludGVycG9sYW50LnNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5nczsKCgkJfQoKCQl0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5nczsKCgkJdGhpcy5faW50ZXJwb2xhbnRzID0gaW50ZXJwb2xhbnRzOyAvLyBib3VuZCBieSB0aGUgbWl4ZXIKCgkJLy8gaW5zaWRlOiBQcm9wZXJ0eU1peGVyIChtYW5hZ2VkIGJ5IHRoZSBtaXhlcikKCQl0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzID0gbmV3IEFycmF5KCBuVHJhY2tzICk7CgoJCXRoaXMuX2NhY2hlSW5kZXggPSBudWxsOyAvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyCgkJdGhpcy5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXIKCgkJdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsOwoJCXRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDsKCgkJdGhpcy5sb29wID0gTG9vcFJlcGVhdDsKCQl0aGlzLl9sb29wQ291bnQgPSAtIDE7CgoJCS8vIGdsb2JhbCBtaXhlciB0aW1lIHdoZW4gdGhlIGFjdGlvbiBpcyB0byBiZSBzdGFydGVkCgkJLy8gaXQncyBzZXQgYmFjayB0byAnbnVsbCcgdXBvbiBzdGFydCBvZiB0aGUgYWN0aW9uCgkJdGhpcy5fc3RhcnRUaW1lID0gbnVsbDsKCgkJLy8gc2NhbGVkIGxvY2FsIHRpbWUgb2YgdGhlIGFjdGlvbgoJCS8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3AKCQl0aGlzLnRpbWUgPSAwOwoKCQl0aGlzLnRpbWVTY2FsZSA9IDE7CgkJdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTsKCgkJdGhpcy53ZWlnaHQgPSAxOwoJCXRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IDE7CgoJCXRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZwoKCQl0aGlzLnBhdXNlZCA9IGZhbHNlOyAvLyB0cnVlIC0+IHplcm8gZWZmZWN0aXZlIHRpbWUgc2NhbGUKCQl0aGlzLmVuYWJsZWQgPSB0cnVlOyAvLyBmYWxzZSAtPiB6ZXJvIGVmZmVjdGl2ZSB3ZWlnaHQKCgkJdGhpcy5jbGFtcFdoZW5GaW5pc2hlZCA9IGZhbHNlOy8vIGtlZXAgZmVlZGluZyB0aGUgbGFzdCBmcmFtZT8KCgkJdGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID0gdHJ1ZTsvLyBmb3Igc21vb3RoIGludGVycG9sYXRpb24gdy9vIHNlcGFyYXRlCgkJdGhpcy56ZXJvU2xvcGVBdEVuZCA9IHRydWU7Ly8gY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmQKCgl9CgoJT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQWN0aW9uLnByb3RvdHlwZSwgewoKCQkvLyBTdGF0ZSAmIFNjaGVkdWxpbmcKCgkJcGxheTogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKCB0aGlzICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc3RvcDogZnVuY3Rpb24gKCkgewoKCQkJdGhpcy5fbWl4ZXIuX2RlYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTsKCgkJCXJldHVybiB0aGlzLnJlc2V0KCk7CgoJCX0sCgoJCXJlc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLnBhdXNlZCA9IGZhbHNlOwoJCQl0aGlzLmVuYWJsZWQgPSB0cnVlOwoKCQkJdGhpcy50aW1lID0gMDsgLy8gcmVzdGFydCBjbGlwCgkJCXRoaXMuX2xvb3BDb3VudCA9IC0gMTsvLyBmb3JnZXQgcHJldmlvdXMgbG9vcHMKCQkJdGhpcy5fc3RhcnRUaW1lID0gbnVsbDsvLyBmb3JnZXQgc2NoZWR1bGluZwoKCQkJcmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCk7CgoJCX0sCgoJCWlzUnVubmluZzogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhIHRoaXMucGF1c2VkICYmIHRoaXMudGltZVNjYWxlICE9PSAwICYmCgkJCQl0aGlzLl9zdGFydFRpbWUgPT09IG51bGwgJiYgdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKCB0aGlzICk7CgoJCX0sCgoJCS8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWQKCQlpc1NjaGVkdWxlZDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApOwoKCQl9LAoKCQlzdGFydEF0OiBmdW5jdGlvbiAoIHRpbWUgKSB7CgoJCQl0aGlzLl9zdGFydFRpbWUgPSB0aW1lOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldExvb3A6IGZ1bmN0aW9uICggbW9kZSwgcmVwZXRpdGlvbnMgKSB7CgoJCQl0aGlzLmxvb3AgPSBtb2RlOwoJCQl0aGlzLnJlcGV0aXRpb25zID0gcmVwZXRpdGlvbnM7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJLy8gV2VpZ2h0CgoJCS8vIHNldCB0aGUgd2VpZ2h0IHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgZmFkaW5nCgkJLy8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzCgkJLy8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5lbmFibGVkLCBiZWNhdXNlIGl0IHdvdWxkIGJlIGNvbmZ1c2luZwoJCXNldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCB3ZWlnaHQgKSB7CgoJCQl0aGlzLndlaWdodCA9IHdlaWdodDsKCgkJCS8vIG5vdGU6IHNhbWUgbG9naWMgYXMgd2hlbiB1cGRhdGVkIGF0IHJ1bnRpbWUKCQkJdGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDsKCgkJCXJldHVybiB0aGlzLnN0b3BGYWRpbmcoKTsKCgkJfSwKCgkJLy8gcmV0dXJuIHRoZSB3ZWlnaHQgY29uc2lkZXJpbmcgZmFkaW5nIGFuZCAuZW5hYmxlZAoJCWdldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDsKCgkJfSwKCgkJZmFkZUluOiBmdW5jdGlvbiAoIGR1cmF0aW9uICkgewoKCQkJcmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApOwoKCQl9LAoKCQlmYWRlT3V0OiBmdW5jdGlvbiAoIGR1cmF0aW9uICkgewoKCQkJcmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMSwgMCApOwoKCQl9LAoKCQljcm9zc0ZhZGVGcm9tOiBmdW5jdGlvbiAoIGZhZGVPdXRBY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkgewoKCQkJZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApOwoJCQl0aGlzLmZhZGVJbiggZHVyYXRpb24gKTsKCgkJCWlmICggd2FycCApIHsKCgkJCQl2YXIgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLAoJCQkJCWZhZGVPdXREdXJhdGlvbiA9IGZhZGVPdXRBY3Rpb24uX2NsaXAuZHVyYXRpb24sCgoJCQkJCXN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbiwKCQkJCQllbmRTdGFydFJhdGlvID0gZmFkZUluRHVyYXRpb24gLyBmYWRlT3V0RHVyYXRpb247CgoJCQkJZmFkZU91dEFjdGlvbi53YXJwKCAxLjAsIHN0YXJ0RW5kUmF0aW8sIGR1cmF0aW9uICk7CgkJCQl0aGlzLndhcnAoIGVuZFN0YXJ0UmF0aW8sIDEuMCwgZHVyYXRpb24gKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljcm9zc0ZhZGVUbzogZnVuY3Rpb24gKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkgewoKCQkJcmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApOwoKCQl9LAoKCQlzdG9wRmFkaW5nOiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgd2VpZ2h0SW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDsKCgkJCWlmICggd2VpZ2h0SW50ZXJwb2xhbnQgIT09IG51bGwgKSB7CgoJCQkJdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsOwoJCQkJdGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB3ZWlnaHRJbnRlcnBvbGFudCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIFRpbWUgU2NhbGUgQ29udHJvbAoKCQkvLyBzZXQgdGhlIHRpbWUgc2NhbGUgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCB3YXJwaW5nCgkJLy8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXMKCQkvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLnBhdXNlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmcKCQlzZXRFZmZlY3RpdmVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZVNjYWxlICkgewoKCQkJdGhpcy50aW1lU2NhbGUgPSB0aW1lU2NhbGU7CgkJCXRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRoaXMucGF1c2VkID8gMCA6IHRpbWVTY2FsZTsKCgkJCXJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7CgoJCX0sCgoJCS8vIHJldHVybiB0aGUgdGltZSBzY2FsZSBjb25zaWRlcmluZyB3YXJwaW5nIGFuZCAucGF1c2VkCgkJZ2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlOwoKCQl9LAoKCQlzZXREdXJhdGlvbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHsKCgkJCXRoaXMudGltZVNjYWxlID0gdGhpcy5fY2xpcC5kdXJhdGlvbiAvIGR1cmF0aW9uOwoKCQkJcmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKTsKCgkJfSwKCgkJc3luY1dpdGg6IGZ1bmN0aW9uICggYWN0aW9uICkgewoKCQkJdGhpcy50aW1lID0gYWN0aW9uLnRpbWU7CgkJCXRoaXMudGltZVNjYWxlID0gYWN0aW9uLnRpbWVTY2FsZTsKCgkJCXJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7CgoJCX0sCgoJCWhhbHQ6IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7CgoJCQlyZXR1cm4gdGhpcy53YXJwKCB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUsIDAsIGR1cmF0aW9uICk7CgoJCX0sCgoJCXdhcnA6IGZ1bmN0aW9uICggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7CgoJCQl2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSwKCQkJCWludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsCgoJCQkJdGltZVNjYWxlID0gdGhpcy50aW1lU2NhbGU7CgoJCQlpZiAoIGludGVycG9sYW50ID09PSBudWxsICkgewoKCQkJCWludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTsKCQkJCXRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7CgoJCQl9CgoJCQl2YXIgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsCgkJCQl2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7CgoJCQl0aW1lc1sgMCBdID0gbm93OwoJCQl0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247CgoJCQl2YWx1ZXNbIDAgXSA9IHN0YXJ0VGltZVNjYWxlIC8gdGltZVNjYWxlOwoJCQl2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzdG9wV2FycGluZzogZnVuY3Rpb24gKCkgewoKCQkJdmFyIHRpbWVTY2FsZUludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7CgoJCQlpZiAoIHRpbWVTY2FsZUludGVycG9sYW50ICE9PSBudWxsICkgewoKCQkJCXRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDsKCQkJCXRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggdGltZVNjYWxlSW50ZXJwb2xhbnQgKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQkvLyBPYmplY3QgQWNjZXNzb3JzCgoJCWdldE1peGVyOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5fbWl4ZXI7CgoJCX0sCgoJCWdldENsaXA6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLl9jbGlwOwoKCQl9LAoKCQlnZXRSb290OiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5fbG9jYWxSb290IHx8IHRoaXMuX21peGVyLl9yb290OwoKCQl9LAoKCQkvLyBJbnRlcm5hCgoJCV91cGRhdGU6IGZ1bmN0aW9uICggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKSB7CgoJCQkvLyBjYWxsZWQgYnkgdGhlIG1peGVyCgoJCQlpZiAoICEgdGhpcy5lbmFibGVkICkgewoKCQkJCS8vIGNhbGwgLl91cGRhdGVXZWlnaHQoKSB0byB1cGRhdGUgLl9lZmZlY3RpdmVXZWlnaHQKCgkJCQl0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTsKCQkJCXJldHVybjsKCgkJCX0KCgkJCXZhciBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7CgoJCQlpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHsKCgkJCQkvLyBjaGVjayBmb3Igc2NoZWR1bGVkIHN0YXJ0IG9mIGFjdGlvbgoKCQkJCXZhciB0aW1lUnVubmluZyA9ICggdGltZSAtIHN0YXJ0VGltZSApICogdGltZURpcmVjdGlvbjsKCQkJCWlmICggdGltZVJ1bm5pbmcgPCAwIHx8IHRpbWVEaXJlY3Rpb24gPT09IDAgKSB7CgoJCQkJCXJldHVybjsgLy8geWV0IHRvIGNvbWUgLyBkb24ndCBkZWNpZGUgd2hlbiBkZWx0YSA9IDAKCgkJCQl9CgoJCQkJLy8gc3RhcnQKCgkJCQl0aGlzLl9zdGFydFRpbWUgPSBudWxsOyAvLyB1bnNjaGVkdWxlCgkJCQlkZWx0YVRpbWUgPSB0aW1lRGlyZWN0aW9uICogdGltZVJ1bm5pbmc7CgoJCQl9CgoJCQkvLyBhcHBseSB0aW1lIHNjYWxlIGFuZCBhZHZhbmNlIHRpbWUKCgkJCWRlbHRhVGltZSAqPSB0aGlzLl91cGRhdGVUaW1lU2NhbGUoIHRpbWUgKTsKCQkJdmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7CgoJCQkvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpbgoJCQkvLyBhbiBlZmZlY3RpdmUgd2VpZ2h0IG9mIDAKCgkJCXZhciB3ZWlnaHQgPSB0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTsKCgkJCWlmICggd2VpZ2h0ID4gMCApIHsKCgkJCQl2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzOwoJCQkJdmFyIHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5nczsKCgkJCQlmb3IgKCB2YXIgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArKyBqICkgewoKCQkJCQlpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTsKCQkJCQlwcm9wZXJ0eU1peGVyc1sgaiBdLmFjY3VtdWxhdGUoIGFjY3VJbmRleCwgd2VpZ2h0ICk7CgoJCQkJfQoKCQkJfQoKCQl9LAoKCQlfdXBkYXRlV2VpZ2h0OiBmdW5jdGlvbiAoIHRpbWUgKSB7CgoJCQl2YXIgd2VpZ2h0ID0gMDsKCgkJCWlmICggdGhpcy5lbmFibGVkICkgewoKCQkJCXdlaWdodCA9IHRoaXMud2VpZ2h0OwoJCQkJdmFyIGludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7CgoJCQkJaWYgKCBpbnRlcnBvbGFudCAhPT0gbnVsbCApIHsKCgkJCQkJdmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07CgoJCQkJCXdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlOwoKCQkJCQlpZiAoIHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbIDEgXSApIHsKCgkJCQkJCXRoaXMuc3RvcEZhZGluZygpOwoKCQkJCQkJaWYgKCBpbnRlcnBvbGFudFZhbHVlID09PSAwICkgewoKCQkJCQkJCS8vIGZhZGVkIG91dCwgZGlzYWJsZQoJCQkJCQkJdGhpcy5lbmFibGVkID0gZmFsc2U7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQl0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB3ZWlnaHQ7CgkJCXJldHVybiB3ZWlnaHQ7CgoJCX0sCgoJCV91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZSApIHsKCgkJCXZhciB0aW1lU2NhbGUgPSAwOwoKCQkJaWYgKCAhIHRoaXMucGF1c2VkICkgewoKCQkJCXRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlOwoKCQkJCXZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50OwoKCQkJCWlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7CgoJCQkJCXZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUoIHRpbWUgKVsgMCBdOwoKCQkJCQl0aW1lU2NhbGUgKj0gaW50ZXJwb2xhbnRWYWx1ZTsKCgkJCQkJaWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7CgoJCQkJCQl0aGlzLnN0b3BXYXJwaW5nKCk7CgoJCQkJCQlpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHsKCgkJCQkJCQkvLyBtb3Rpb24gaGFzIGhhbHRlZCwgcGF1c2UKCQkJCQkJCXRoaXMucGF1c2VkID0gdHJ1ZTsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJLy8gd2FycCBkb25lIC0gYXBwbHkgZmluYWwgdGltZSBzY2FsZQoJCQkJCQkJdGhpcy50aW1lU2NhbGUgPSB0aW1lU2NhbGU7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQl0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aW1lU2NhbGU7CgkJCXJldHVybiB0aW1lU2NhbGU7CgoJCX0sCgoJCV91cGRhdGVUaW1lOiBmdW5jdGlvbiAoIGRlbHRhVGltZSApIHsKCgkJCXZhciB0aW1lID0gdGhpcy50aW1lICsgZGVsdGFUaW1lOwoJCQl2YXIgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uOwoJCQl2YXIgbG9vcCA9IHRoaXMubG9vcDsKCQkJdmFyIGxvb3BDb3VudCA9IHRoaXMuX2xvb3BDb3VudDsKCgkJCXZhciBwaW5nUG9uZyA9ICggbG9vcCA9PT0gTG9vcFBpbmdQb25nICk7CgoJCQlpZiAoIGRlbHRhVGltZSA9PT0gMCApIHsKCgkJCQlpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgeyByZXR1cm4gdGltZTsgfQoKCQkJCXJldHVybiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lOwoKCQkJfQoKCQkJaWYgKCBsb29wID09PSBMb29wT25jZSApIHsKCgkJCQlpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgewoKCQkJCQkvLyBqdXN0IHN0YXJ0ZWQKCgkJCQkJdGhpcy5fbG9vcENvdW50ID0gMDsKCQkJCQl0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0cnVlLCBmYWxzZSApOwoKCQkJCX0KCgkJCQloYW5kbGVfc3RvcDogewoKCQkJCQlpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7CgoJCQkJCQl0aW1lID0gZHVyYXRpb247CgoJCQkJCX0gZWxzZSBpZiAoIHRpbWUgPCAwICkgewoKCQkJCQkJdGltZSA9IDA7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl0aGlzLnRpbWUgPSB0aW1lOwoKCQkJCQkJYnJlYWsgaGFuZGxlX3N0b3A7CgoJCQkJCX0KCgkJCQkJaWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgeyB0aGlzLnBhdXNlZCA9IHRydWU7IH0KCQkJCQllbHNlIHsgdGhpcy5lbmFibGVkID0gZmFsc2U7IH0KCgkJCQkJdGhpcy50aW1lID0gdGltZTsKCgkJCQkJdGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCggewoJCQkJCQl0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsCgkJCQkJCWRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDEKCQkJCQl9ICk7CgoJCQkJfQoKCQkJfSBlbHNlIHsgLy8gcmVwZXRpdGl2ZSBSZXBlYXQgb3IgUGluZ1BvbmcKCgkJCQlpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgewoKCQkJCQkvLyBqdXN0IHN0YXJ0ZWQKCgkJCQkJaWYgKCBkZWx0YVRpbWUgPj0gMCApIHsKCgkJCQkJCWxvb3BDb3VudCA9IDA7CgoJCQkJCQl0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCBwaW5nUG9uZyApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbAoJCQkJCQkvLyB0cmFuc2l0aW9uIHRocm91Z2ggemVybyBjb3VudHMgYXMgYSByZXBldGl0aW9uLAoJCQkJCQkvLyBzbyBsZWF2ZSBsb29wQ291bnQgYXQgLTEKCgkJCQkJCXRoaXMuX3NldEVuZGluZ3MoIHRoaXMucmVwZXRpdGlvbnMgPT09IDAsIHRydWUsIHBpbmdQb25nICk7CgoJCQkJCX0KCgkJCQl9CgoJCQkJaWYgKCB0aW1lID49IGR1cmF0aW9uIHx8IHRpbWUgPCAwICkgewoKCQkJCQkvLyB3cmFwIGFyb3VuZAoKCQkJCQl2YXIgbG9vcERlbHRhID0gTWF0aC5mbG9vciggdGltZSAvIGR1cmF0aW9uICk7IC8vIHNpZ25lZAoJCQkJCXRpbWUgLT0gZHVyYXRpb24gKiBsb29wRGVsdGE7CgoJCQkJCWxvb3BDb3VudCArPSBNYXRoLmFicyggbG9vcERlbHRhICk7CgoJCQkJCXZhciBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDsKCgkJCQkJaWYgKCBwZW5kaW5nIDw9IDAgKSB7CgoJCQkJCQkvLyBoYXZlIHRvIHN0b3AgKHN3aXRjaCBzdGF0ZSwgY2xhbXAgdGltZSwgZmlyZSBldmVudCkKCgkJCQkJCWlmICggdGhpcy5jbGFtcFdoZW5GaW5pc2hlZCApIHsgdGhpcy5wYXVzZWQgPSB0cnVlOyB9CgkJCQkJCWVsc2UgeyB0aGlzLmVuYWJsZWQgPSBmYWxzZTsgfQoKCQkJCQkJdGltZSA9IGRlbHRhVGltZSA+IDAgPyBkdXJhdGlvbiA6IDA7CgoJCQkJCQl0aGlzLnRpbWUgPSB0aW1lOwoKCQkJCQkJdGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCggewoJCQkJCQkJdHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLAoJCQkJCQkJZGlyZWN0aW9uOiBkZWx0YVRpbWUgPiAwID8gMSA6IC0gMQoJCQkJCQl9ICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBrZWVwIHJ1bm5pbmcKCgkJCQkJCWlmICggcGVuZGluZyA9PT0gMSApIHsKCgkJCQkJCQkvLyBlbnRlcmluZyB0aGUgbGFzdCByb3VuZAoKCQkJCQkJCXZhciBhdFN0YXJ0ID0gZGVsdGFUaW1lIDwgMDsKCQkJCQkJCXRoaXMuX3NldEVuZGluZ3MoIGF0U3RhcnQsICEgYXRTdGFydCwgcGluZ1BvbmcgKTsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJdGhpcy5fc2V0RW5kaW5ncyggZmFsc2UsIGZhbHNlLCBwaW5nUG9uZyApOwoKCQkJCQkJfQoKCQkJCQkJdGhpcy5fbG9vcENvdW50ID0gbG9vcENvdW50OwoKCQkJCQkJdGhpcy50aW1lID0gdGltZTsKCgkJCQkJCXRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHsKCQkJCQkJCXR5cGU6ICdsb29wJywgYWN0aW9uOiB0aGlzLCBsb29wRGVsdGE6IGxvb3BEZWx0YQoJCQkJCQl9ICk7CgoJCQkJCX0KCgkJCQl9IGVsc2UgewoKCQkJCQl0aGlzLnRpbWUgPSB0aW1lOwoKCQkJCX0KCgkJCQlpZiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgewoKCQkJCQkvLyBpbnZlcnQgdGltZSBmb3IgdGhlICJwb25nIHJvdW5kIgoKCQkJCQlyZXR1cm4gZHVyYXRpb24gLSB0aW1lOwoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiB0aW1lOwoKCQl9LAoKCQlfc2V0RW5kaW5nczogZnVuY3Rpb24gKCBhdFN0YXJ0LCBhdEVuZCwgcGluZ1BvbmcgKSB7CgoJCQl2YXIgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzOwoKCQkJaWYgKCBwaW5nUG9uZyApIHsKCgkJCQlzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFplcm9TbG9wZUVuZGluZzsKCQkJCXNldHRpbmdzLmVuZGluZ0VuZCA9IFplcm9TbG9wZUVuZGluZzsKCgkJCX0gZWxzZSB7CgoJCQkJLy8gYXNzdW1pbmcgZm9yIExvb3BPbmNlIGF0U3RhcnQgPT0gYXRFbmQgPT0gdHJ1ZQoKCQkJCWlmICggYXRTdGFydCApIHsKCgkJCQkJc2V0dGluZ3MuZW5kaW5nU3RhcnQgPSB0aGlzLnplcm9TbG9wZUF0U3RhcnQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gV3JhcEFyb3VuZEVuZGluZzsKCgkJCQl9CgoJCQkJaWYgKCBhdEVuZCApIHsKCgkJCQkJc2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7CgoJCQkJfSBlbHNlIHsKCgkJCQkJc2V0dGluZ3MuZW5kaW5nRW5kIAkgPSBXcmFwQXJvdW5kRW5kaW5nOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJX3NjaGVkdWxlRmFkaW5nOiBmdW5jdGlvbiAoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7CgoJCQl2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSwKCQkJCWludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7CgoJCQlpZiAoIGludGVycG9sYW50ID09PSBudWxsICkgewoKCQkJCWludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTsKCQkJCXRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7CgoJCQl9CgoJCQl2YXIgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsCgkJCQl2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7CgoJCQl0aW1lc1sgMCBdID0gbm93OwoJCQl2YWx1ZXNbIDAgXSA9IHdlaWdodE5vdzsKCQkJdGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uOwoJCQl2YWx1ZXNbIDEgXSA9IHdlaWdodFRoZW47CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqCgkgKiBQbGF5ZXIgZm9yIEFuaW1hdGlvbkNsaXBzLgoJICoKCSAqCgkgKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvLwoJICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvCgkgKiBAYXV0aG9yIHRzY2h3CgkgKi8KCglmdW5jdGlvbiBBbmltYXRpb25NaXhlciggcm9vdCApIHsKCgkJdGhpcy5fcm9vdCA9IHJvb3Q7CgkJdGhpcy5faW5pdE1lbW9yeU1hbmFnZXIoKTsKCQl0aGlzLl9hY2N1SW5kZXggPSAwOwoKCQl0aGlzLnRpbWUgPSAwOwoKCQl0aGlzLnRpbWVTY2FsZSA9IDEuMDsKCgl9CgoJQW5pbWF0aW9uTWl4ZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBBbmltYXRpb25NaXhlciwKCgkJX2JpbmRBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKSB7CgoJCQl2YXIgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsCgkJCQl0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLAoJCQkJblRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsCgkJCQliaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncywKCQkJCWludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLAoJCQkJcm9vdFV1aWQgPSByb290LnV1aWQsCgkJCQliaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSwKCQkJCWJpbmRpbmdzQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07CgoJCQlpZiAoIGJpbmRpbmdzQnlOYW1lID09PSB1bmRlZmluZWQgKSB7CgoJCQkJYmluZGluZ3NCeU5hbWUgPSB7fTsKCQkJCWJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ3NCeU5hbWU7CgoJCQl9CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7CgoJCQkJdmFyIHRyYWNrID0gdHJhY2tzWyBpIF0sCgkJCQkJdHJhY2tOYW1lID0gdHJhY2submFtZSwKCQkJCQliaW5kaW5nID0gYmluZGluZ3NCeU5hbWVbIHRyYWNrTmFtZSBdOwoKCQkJCWlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQliaW5kaW5nc1sgaSBdID0gYmluZGluZzsKCgkJCQl9IGVsc2UgewoKCQkJCQliaW5kaW5nID0gYmluZGluZ3NbIGkgXTsKCgkJCQkJaWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCQkvLyBleGlzdGluZyBiaW5kaW5nLCBtYWtlIHN1cmUgdGhlIGNhY2hlIGtub3dzCgoJCQkJCQlpZiAoIGJpbmRpbmcuX2NhY2hlSW5kZXggPT09IG51bGwgKSB7CgoJCQkJCQkJKysgYmluZGluZy5yZWZlcmVuY2VDb3VudDsKCQkJCQkJCXRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApOwoKCQkJCQkJfQoKCQkJCQkJY29udGludWU7CgoJCQkJCX0KCgkJCQkJdmFyIHBhdGggPSBwcm90b3R5cGVBY3Rpb24gJiYgcHJvdG90eXBlQWN0aW9uLgoJCQkJCQlfcHJvcGVydHlCaW5kaW5nc1sgaSBdLmJpbmRpbmcucGFyc2VkUGF0aDsKCgkJCQkJYmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKAoJCQkJCQlQcm9wZXJ0eUJpbmRpbmcuY3JlYXRlKCByb290LCB0cmFja05hbWUsIHBhdGggKSwKCQkJCQkJdHJhY2suVmFsdWVUeXBlTmFtZSwgdHJhY2suZ2V0VmFsdWVTaXplKCkgKTsKCgkJCQkJKysgYmluZGluZy5yZWZlcmVuY2VDb3VudDsKCQkJCQl0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKTsKCgkJCQkJYmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7CgoJCQkJfQoKCQkJCWludGVycG9sYW50c1sgaSBdLnJlc3VsdEJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyOwoKCQkJfQoKCQl9LAoKCQlfYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkgewoKCQkJaWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHsKCgkJCQlpZiAoIGFjdGlvbi5fY2FjaGVJbmRleCA9PT0gbnVsbCApIHsKCgkJCQkJLy8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyCgkJCQkJLy8gYXBwZWFycyB0byBiZSBzdGlsbCB1c2luZyBpdCAtPiByZWJpbmQKCgkJCQkJdmFyIHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZCwKCQkJCQkJY2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCwKCQkJCQkJYWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdOwoKCQkJCQl0aGlzLl9iaW5kQWN0aW9uKCBhY3Rpb24sCgkJCQkJCWFjdGlvbnNGb3JDbGlwICYmIGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdICk7CgoJCQkJCXRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApOwoKCQkJCX0KCgkJCQl2YXIgYmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3M7CgoJCQkJLy8gaW5jcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZQoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkgewoKCQkJCQl2YXIgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07CgoJCQkJCWlmICggYmluZGluZy51c2VDb3VudCArKyA9PT0gMCApIHsKCgkJCQkJCXRoaXMuX2xlbmRCaW5kaW5nKCBiaW5kaW5nICk7CgkJCQkJCWJpbmRpbmcuc2F2ZU9yaWdpbmFsU3RhdGUoKTsKCgkJCQkJfQoKCQkJCX0KCgkJCQl0aGlzLl9sZW5kQWN0aW9uKCBhY3Rpb24gKTsKCgkJCX0KCgkJfSwKCgkJX2RlYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkgewoKCQkJaWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7CgoJCQkJdmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzOwoKCQkJCS8vIGRlY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGUKCQkJCWZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQkJdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdOwoKCQkJCQlpZiAoIC0tIGJpbmRpbmcudXNlQ291bnQgPT09IDAgKSB7CgoJCQkJCQliaW5kaW5nLnJlc3RvcmVPcmlnaW5hbFN0YXRlKCk7CgkJCQkJCXRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApOwoKCQkJCQl9CgoJCQkJfQoKCQkJCXRoaXMuX3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKTsKCgkJCX0KCgkJfSwKCgkJLy8gTWVtb3J5IG1hbmFnZXIKCgkJX2luaXRNZW1vcnlNYW5hZ2VyOiBmdW5jdGlvbiAoKSB7CgoJCQl0aGlzLl9hY3Rpb25zID0gW107IC8vICduQWN0aXZlQWN0aW9ucycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lcwoJCQl0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7CgoJCQl0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307CgkJCS8vIGluc2lkZToKCQkJLy8gewoJCQkvLyAJa25vd25BY3Rpb25zOiBBcnJheTwgQW5pbWF0aW9uQWN0aW9uID4gLSB1c2VkIGFzIHByb3RvdHlwZXMKCQkJLy8gCWFjdGlvbkJ5Um9vdDogQW5pbWF0aW9uQWN0aW9uIC0gbG9va3VwCgkJCS8vIH0KCgoJCQl0aGlzLl9iaW5kaW5ncyA9IFtdOyAvLyAnbkFjdGl2ZUJpbmRpbmdzJyBmb2xsb3dlZCBieSBpbmFjdGl2ZSBvbmVzCgkJCXRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7CgoJCQl0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPgoKCgkJCXRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMgPSBbXTsgLy8gc2FtZSBnYW1lIGFzIGFib3ZlCgkJCXRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDsKCgkJCXZhciBzY29wZSA9IHRoaXM7CgoJCQl0aGlzLnN0YXRzID0gewoKCQkJCWFjdGlvbnM6IHsKCQkJCQlnZXQgdG90YWwoKSB7CgoJCQkJCQlyZXR1cm4gc2NvcGUuX2FjdGlvbnMubGVuZ3RoOwoKCQkJCQl9LAoJCQkJCWdldCBpblVzZSgpIHsKCgkJCQkJCXJldHVybiBzY29wZS5fbkFjdGl2ZUFjdGlvbnM7CgoJCQkJCX0KCQkJCX0sCgkJCQliaW5kaW5nczogewoJCQkJCWdldCB0b3RhbCgpIHsKCgkJCQkJCXJldHVybiBzY29wZS5fYmluZGluZ3MubGVuZ3RoOwoKCQkJCQl9LAoJCQkJCWdldCBpblVzZSgpIHsKCgkJCQkJCXJldHVybiBzY29wZS5fbkFjdGl2ZUJpbmRpbmdzOwoKCQkJCQl9CgkJCQl9LAoJCQkJY29udHJvbEludGVycG9sYW50czogewoJCQkJCWdldCB0b3RhbCgpIHsKCgkJCQkJCXJldHVybiBzY29wZS5fY29udHJvbEludGVycG9sYW50cy5sZW5ndGg7CgoJCQkJCX0sCgkJCQkJZ2V0IGluVXNlKCkgewoKCQkJCQkJcmV0dXJuIHNjb3BlLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50czsKCgkJCQkJfQoJCQkJfQoKCQkJfTsKCgkJfSwKCgkJLy8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzCgoJCV9pc0FjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7CgoJCQl2YXIgaW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7CgkJCXJldHVybiBpbmRleCAhPT0gbnVsbCAmJiBpbmRleCA8IHRoaXMuX25BY3RpdmVBY3Rpb25zOwoKCQl9LAoKCQlfYWRkSW5hY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKSB7CgoJCQl2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsCgkJCQlhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCwKCQkJCWFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTsKCgkJCWlmICggYWN0aW9uc0ZvckNsaXAgPT09IHVuZGVmaW5lZCApIHsKCgkJCQlhY3Rpb25zRm9yQ2xpcCA9IHsKCgkJCQkJa25vd25BY3Rpb25zOiBbIGFjdGlvbiBdLAoJCQkJCWFjdGlvbkJ5Um9vdDoge30KCgkJCQl9OwoKCQkJCWFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IDA7CgoJCQkJYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSA9IGFjdGlvbnNGb3JDbGlwOwoKCQkJfSBlbHNlIHsKCgkJCQl2YXIga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zOwoKCQkJCWFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGtub3duQWN0aW9ucy5sZW5ndGg7CgkJCQlrbm93bkFjdGlvbnMucHVzaCggYWN0aW9uICk7CgoJCQl9CgoJCQlhY3Rpb24uX2NhY2hlSW5kZXggPSBhY3Rpb25zLmxlbmd0aDsKCQkJYWN0aW9ucy5wdXNoKCBhY3Rpb24gKTsKCgkJCWFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjsKCgkJfSwKCgkJX3JlbW92ZUluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHsKCgkJCXZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucywKCQkJCWxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLAoJCQkJY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDsKCgkJCWxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7CgkJCWFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjsKCQkJYWN0aW9ucy5wb3AoKTsKCgkJCWFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7CgoKCQkJdmFyIGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsCgkJCQlhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCwKCQkJCWFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSwKCQkJCWtub3duQWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnMsCgoJCQkJbGFzdEtub3duQWN0aW9uID0KCQkJCQlrbm93bkFjdGlvbnNGb3JDbGlwWyBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCAtIDEgXSwKCgkJCQlieUNsaXBDYWNoZUluZGV4ID0gYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4OwoKCQkJbGFzdEtub3duQWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gYnlDbGlwQ2FjaGVJbmRleDsKCQkJa25vd25BY3Rpb25zRm9yQ2xpcFsgYnlDbGlwQ2FjaGVJbmRleCBdID0gbGFzdEtub3duQWN0aW9uOwoJCQlrbm93bkFjdGlvbnNGb3JDbGlwLnBvcCgpOwoKCQkJYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsKCgoJCQl2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290LAoJCQkJcm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkOwoKCQkJZGVsZXRlIGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTsKCgkJCWlmICgga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggPT09IDAgKSB7CgoJCQkJZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07CgoJCQl9CgoJCQl0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTsKCgkJfSwKCgkJX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkgewoKCQkJdmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzOwoJCQlmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7CgoJCQkJdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdOwoKCQkJCWlmICggLS0gYmluZGluZy5yZWZlcmVuY2VDb3VudCA9PT0gMCApIHsKCgkJCQkJdGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7CgoJCQkJfQoKCQkJfQoKCQl9LAoKCQlfbGVuZEFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7CgoJCQkvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF0KCQkJLy8gWyAgYWN0aXZlIGFjdGlvbnMgPnwgaW5hY3RpdmUgYWN0aW9ucyBdCgkJCS8vICAgICAgICAgICAgICAgICBzICAgICAgICBhCgkJCS8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT4KCQkJLy8gICAgICAgICAgICAgICAgIGEgICAgICAgIHMKCgkJCXZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucywKCQkJCXByZXZJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCwKCgkJCQlsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKywKCgkJCQlmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07CgoJCQlhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7CgkJCWFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdID0gYWN0aW9uOwoKCQkJZmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDsKCQkJYWN0aW9uc1sgcHJldkluZGV4IF0gPSBmaXJzdEluYWN0aXZlQWN0aW9uOwoKCQl9LAoKCQlfdGFrZUJhY2tBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkgewoKCQkJLy8gWyAgYWN0aXZlIGFjdGlvbnMgIHwgaW5hY3RpdmUgYWN0aW9ucyBdCgkJCS8vIFsgYWN0aXZlIGFjdGlvbnMgfDwgaW5hY3RpdmUgYWN0aW9ucyAgXQoJCQkvLyAgICAgICAgYSAgICAgICAgcwoJCQkvLyAgICAgICAgIDwtc3dhcC0+CgkJCS8vICAgICAgICBzICAgICAgICBhCgoJCQl2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsCgkJCQlwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsCgoJCQkJZmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsCgoJCQkJbGFzdEFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdOwoKCQkJYWN0aW9uLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4OwoJCQlhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGFjdGlvbjsKCgkJCWxhc3RBY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7CgkJCWFjdGlvbnNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUFjdGlvbjsKCgkJfSwKCgkJLy8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0cwoKCQlfYWRkSW5hY3RpdmVCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKSB7CgoJCQl2YXIgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsCgkJCQliaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0sCgoJCQkJYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5nczsKCgkJCWlmICggYmluZGluZ0J5TmFtZSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWJpbmRpbmdCeU5hbWUgPSB7fTsKCQkJCWJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTsKCgkJCX0KCgkJCWJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZzsKCgkJCWJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7CgkJCWJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTsKCgkJfSwKCgkJX3JlbW92ZUluYWN0aXZlQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nICkgewoKCQkJdmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsCgkJCQlwcm9wQmluZGluZyA9IGJpbmRpbmcuYmluZGluZywKCQkJCXJvb3RVdWlkID0gcHJvcEJpbmRpbmcucm9vdE5vZGUudXVpZCwKCQkJCXRyYWNrTmFtZSA9IHByb3BCaW5kaW5nLnBhdGgsCgkJCQliaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSwKCQkJCWJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSwKCgkJCQlsYXN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGJpbmRpbmdzLmxlbmd0aCAtIDEgXSwKCQkJCWNhY2hlSW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4OwoKCQkJbGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7CgkJCWJpbmRpbmdzWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVCaW5kaW5nOwoJCQliaW5kaW5ncy5wb3AoKTsKCgkJCWRlbGV0ZSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTsKCgkJCWlmICggT2JqZWN0LmtleXMoIGJpbmRpbmdCeU5hbWUgKS5sZW5ndGggPT09IDAgKSB7CgoJCQkJZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdOwoKCQkJfQoKCQl9LAoKCQlfbGVuZEJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHsKCgkJCXZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLAoJCQkJcHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCwKCgkJCQlsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MgKyssCgoJCQkJZmlyc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF07CgoJCQliaW5kaW5nLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4OwoJCQliaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nOwoKCQkJZmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7CgkJCWJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVCaW5kaW5nOwoKCQl9LAoKCQlfdGFrZUJhY2tCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcgKSB7CgoJCQl2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncywKCQkJCXByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsCgoJCQkJZmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLAoKCQkJCWxhc3RBY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdOwoKCQkJYmluZGluZy5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDsKCQkJYmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZzsKCgkJCWxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4OwoJCQliaW5kaW5nc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQmluZGluZzsKCgkJfSwKCgoJCS8vIE1lbW9yeSBtYW5hZ2VtZW50IG9mIEludGVycG9sYW50cyBmb3Igd2VpZ2h0IGFuZCB0aW1lIHNjYWxlCgoJCV9sZW5kQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoKSB7CgoJCQl2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cywKCQkJCWxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzICsrLAoJCQkJaW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdOwoKCQkJaWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWludGVycG9sYW50ID0gbmV3IExpbmVhckludGVycG9sYW50KAoJCQkJCW5ldyBGbG9hdDMyQXJyYXkoIDIgKSwgbmV3IEZsb2F0MzJBcnJheSggMiApLAoJCQkJCTEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTsKCgkJCQlpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7CgkJCQlpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7CgoJCQl9CgoJCQlyZXR1cm4gaW50ZXJwb2xhbnQ7CgoJCX0sCgoJCV90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudDogZnVuY3Rpb24gKCBpbnRlcnBvbGFudCApIHsKCgkJCXZhciBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLAoJCQkJcHJldkluZGV4ID0gaW50ZXJwb2xhbnQuX19jYWNoZUluZGV4LAoKCQkJCWZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLAoKCQkJCWxhc3RBY3RpdmVJbnRlcnBvbGFudCA9IGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07CgoJCQlpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7CgkJCWludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDsKCgkJCWxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7CgkJCWludGVycG9sYW50c1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlSW50ZXJwb2xhbnQ7CgoJCX0sCgoJCV9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyOiBuZXcgRmxvYXQzMkFycmF5KCAxICksCgoJCS8vIHJldHVybiBhbiBhY3Rpb24gZm9yIGEgY2xpcCBvcHRpb25hbGx5IHVzaW5nIGEgY3VzdG9tIHJvb3QgdGFyZ2V0CgkJLy8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhCgkJLy8gcHJldmlvdXNseSB1bmtub3duIGNsaXAvcm9vdCBjb21iaW5hdGlvbiBpcyBzcGVjaWZpZWQpCgkJY2xpcEFjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7CgoJCQl2YXIgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LAoJCQkJcm9vdFV1aWQgPSByb290LnV1aWQsCgoJCQkJY2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/CgkJCQkJQW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLAoKCQkJCWNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsCgoJCQkJYWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLAoJCQkJcHJvdG90eXBlQWN0aW9uID0gbnVsbDsKCgkJCWlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQl2YXIgZXhpc3RpbmdBY3Rpb24gPQoJCQkJCQlhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07CgoJCQkJaWYgKCBleGlzdGluZ0FjdGlvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlyZXR1cm4gZXhpc3RpbmdBY3Rpb247CgoJCQkJfQoKCQkJCS8vIHdlIGtub3cgdGhlIGNsaXAsIHNvIHdlIGRvbid0IGhhdmUgdG8gcGFyc2UgYWxsCgkJCQkvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHkKCQkJCXByb3RvdHlwZUFjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdOwoKCQkJCS8vIGFsc28sIHRha2UgdGhlIGNsaXAgZnJvbSB0aGUgcHJvdG90eXBlIGFjdGlvbgoJCQkJaWYgKCBjbGlwT2JqZWN0ID09PSBudWxsICkKCQkJCQl7IGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7IH0KCgkJCX0KCgkJCS8vIGNsaXAgbXVzdCBiZSBrbm93biB3aGVuIHNwZWNpZmllZCB2aWEgc3RyaW5nCgkJCWlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApIHsgcmV0dXJuIG51bGw7IH0KCgkJCS8vIGFsbG9jYXRlIGFsbCByZXNvdXJjZXMgcmVxdWlyZWQgdG8gcnVuIGl0CgkJCXZhciBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QgKTsKCgkJCXRoaXMuX2JpbmRBY3Rpb24oIG5ld0FjdGlvbiwgcHJvdG90eXBlQWN0aW9uICk7CgoJCQkvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlcgoJCQl0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggbmV3QWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTsKCgkJCXJldHVybiBuZXdBY3Rpb247CgoJCX0sCgoJCS8vIGdldCBhbiBleGlzdGluZyBhY3Rpb24KCQlleGlzdGluZ0FjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7CgoJCQl2YXIgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LAoJCQkJcm9vdFV1aWQgPSByb290LnV1aWQsCgoJCQkJY2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/CgkJCQkJQW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLAoKCQkJCWNsaXBVdWlkID0gY2xpcE9iamVjdCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsCgoJCQkJYWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdOwoKCQkJaWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXJldHVybiBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gfHwgbnVsbDsKCgkJCX0KCgkJCXJldHVybiBudWxsOwoKCQl9LAoKCQkvLyBkZWFjdGl2YXRlcyBhbGwgcHJldmlvdXNseSBzY2hlZHVsZWQgYWN0aW9ucwoJCXN0b3BBbGxBY3Rpb246IGZ1bmN0aW9uICgpIHsKCgkJCXZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucywKCQkJCW5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsCgkJCQliaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLAoJCQkJbkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzOwoKCQkJdGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwOwoJCQl0aGlzLl9uQWN0aXZlQmluZGluZ3MgPSAwOwoKCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHsKCgkJCQlhY3Rpb25zWyBpIF0ucmVzZXQoKTsKCgkJCX0KCgkJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkgewoKCQkJCWJpbmRpbmdzWyBpIF0udXNlQ291bnQgPSAwOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIGFkdmFuY2UgdGhlIHRpbWUgYW5kIHVwZGF0ZSBhcHBseSB0aGUgYW5pbWF0aW9uCgkJdXBkYXRlOiBmdW5jdGlvbiAoIGRlbHRhVGltZSApIHsKCgkJCWRlbHRhVGltZSAqPSB0aGlzLnRpbWVTY2FsZTsKCgkJCXZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucywKCQkJCW5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsCgoJCQkJdGltZSA9IHRoaXMudGltZSArPSBkZWx0YVRpbWUsCgkJCQl0aW1lRGlyZWN0aW9uID0gTWF0aC5zaWduKCBkZWx0YVRpbWUgKSwKCgkJCQlhY2N1SW5kZXggPSB0aGlzLl9hY2N1SW5kZXggXj0gMTsKCgkJCS8vIHJ1biBhY3RpdmUgYWN0aW9ucwoKCQkJZm9yICggdmFyIGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHsKCgkJCQl2YXIgYWN0aW9uID0gYWN0aW9uc1sgaSBdOwoKCQkJCWFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApOwoKCQkJfQoKCQkJLy8gdXBkYXRlIHNjZW5lIGdyYXBoCgoJCQl2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncywKCQkJCW5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5nczsKCgkJCWZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkgewoKCQkJCWJpbmRpbmdzWyBpIF0uYXBwbHkoIGFjY3VJbmRleCApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIEFsbG93cyB5b3UgdG8gc2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gYW4gYW5pbWF0aW9uLgoJCXNldFRpbWU6IGZ1bmN0aW9uICggdGltZUluU2Vjb25kcyApIHsKCgkJCXRoaXMudGltZSA9IDA7IC8vIFplcm8gb3V0IHRpbWUgYXR0cmlidXRlIGZvciBBbmltYXRpb25NaXhlciBvYmplY3Q7CgkJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuX2FjdGlvbnMubGVuZ3RoOyBpICsrICkgewoKCQkJCXRoaXMuX2FjdGlvbnNbIGkgXS50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIGFsbCBhc3NvY2lhdGVkIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzLgoKCQkJfQoKCQkJcmV0dXJuIHRoaXMudXBkYXRlKCB0aW1lSW5TZWNvbmRzICk7IC8vIFVwZGF0ZSB1c2VkIHRvIHNldCBleGFjdCB0aW1lLiBSZXR1cm5zICJ0aGlzIiBBbmltYXRpb25NaXhlciBvYmplY3QuCgoJCX0sCgoJCS8vIHJldHVybiB0aGlzIG1peGVyJ3Mgcm9vdCB0YXJnZXQgb2JqZWN0CgkJZ2V0Um9vdDogZnVuY3Rpb24gKCkgewoKCQkJcmV0dXJuIHRoaXMuX3Jvb3Q7CgoJCX0sCgoJCS8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcAoJCXVuY2FjaGVDbGlwOiBmdW5jdGlvbiAoIGNsaXAgKSB7CgoJCQl2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsCgkJCQljbGlwVXVpZCA9IGNsaXAudXVpZCwKCQkJCWFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLAoJCQkJYWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdOwoKCQkJaWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCS8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGUKCQkJCS8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW4KCQkJCS8vIGp1c3QgdGhyb3cgYXdheQoKCQkJCXZhciBhY3Rpb25zVG9SZW1vdmUgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBuID0gYWN0aW9uc1RvUmVtb3ZlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHsKCgkJCQkJdmFyIGFjdGlvbiA9IGFjdGlvbnNUb1JlbW92ZVsgaSBdOwoKCQkJCQl0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTsKCgkJCQkJdmFyIGNhY2hlSW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsCgkJCQkJCWxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdOwoKCQkJCQlhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsOwoJCQkJCWFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7CgoJCQkJCWxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7CgkJCQkJYWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uOwoJCQkJCWFjdGlvbnMucG9wKCk7CgoJCQkJCXRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApOwoKCQkJCX0KCgkJCQlkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTsKCgkJCX0KCgkJfSwKCgkJLy8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3QKCQl1bmNhY2hlUm9vdDogZnVuY3Rpb24gKCByb290ICkgewoKCQkJdmFyIHJvb3RVdWlkID0gcm9vdC51dWlkLAoJCQkJYWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7CgoJCQlmb3IgKCB2YXIgY2xpcFV1aWQgaW4gYWN0aW9uc0J5Q2xpcCApIHsKCgkJCQl2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXS5hY3Rpb25CeVJvb3QsCgkJCQkJYWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdOwoKCQkJCWlmICggYWN0aW9uICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApOwoJCQkJCXRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTsKCgkJCQl9CgoJCQl9CgoJCQl2YXIgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsCgkJCQliaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07CgoJCQlpZiAoIGJpbmRpbmdCeU5hbWUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlmb3IgKCB2YXIgdHJhY2tOYW1lIGluIGJpbmRpbmdCeU5hbWUgKSB7CgoJCQkJCXZhciBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07CgkJCQkJYmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpOwoJCQkJCXRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApOwoKCQkJCX0KCgkJCX0KCgkJfSwKCgkJLy8gcmVtb3ZlIGEgdGFyZ2V0ZWQgY2xpcCBmcm9tIHRoZSBjYWNoZQoJCXVuY2FjaGVBY3Rpb246IGZ1bmN0aW9uICggY2xpcCwgb3B0aW9uYWxSb290ICkgewoKCQkJdmFyIGFjdGlvbiA9IHRoaXMuZXhpc3RpbmdBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApOwoKCQkJaWYgKCBhY3Rpb24gIT09IG51bGwgKSB7CgoJCQkJdGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7CgkJCQl0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7CgoJCQl9CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gVW5pZm9ybSggdmFsdWUgKSB7CgoJCWlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlVuaWZvcm06IFR5cGUgcGFyYW1ldGVyIGlzIG5vIGxvbmdlciBuZWVkZWQuJyApOwoJCQl2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdOwoKCQl9CgoJCXRoaXMudmFsdWUgPSB2YWx1ZTsKCgl9CgoJVW5pZm9ybS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7CgoJCXJldHVybiBuZXcgVW5pZm9ybSggdGhpcy52YWx1ZS5jbG9uZSA9PT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZSA6IHRoaXMudmFsdWUuY2xvbmUoKSApOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXMKCSAqLwoKCWZ1bmN0aW9uIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlLCBtZXNoUGVyQXR0cmlidXRlICkgewoKCQlJbnRlcmxlYXZlZEJ1ZmZlci5jYWxsKCB0aGlzLCBhcnJheSwgc3RyaWRlICk7CgoJCXRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGUgfHwgMTsKCgl9CgoJSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLAoKCQlpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyOiB0cnVlLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQkJdGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7CgoJCQlyZXR1cm4gdGhpczsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvLwoJICogQGF1dGhvciBzdGVwaG9taSAvIGh0dHA6Ly9zdGVwaGFuZWdpbmllci5jb20vCgkgKi8KCglmdW5jdGlvbiBSYXljYXN0ZXIoIG9yaWdpbiwgZGlyZWN0aW9uLCBuZWFyLCBmYXIgKSB7CgoJCXRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTsKCQkvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKQoKCQl0aGlzLm5lYXIgPSBuZWFyIHx8IDA7CgkJdGhpcy5mYXIgPSBmYXIgfHwgSW5maW5pdHk7CgkJdGhpcy5jYW1lcmEgPSBudWxsOwoKCQl0aGlzLnBhcmFtcyA9IHsKCQkJTWVzaDoge30sCgkJCUxpbmU6IHt9LAoJCQlMT0Q6IHt9LAoJCQlQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sCgkJCVNwcml0ZToge30KCQl9OwoKCQlPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcy5wYXJhbXMsIHsKCQkJUG9pbnRDbG91ZDogewoJCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlJheWNhc3RlcjogcGFyYW1zLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBwYXJhbXMuUG9pbnRzLicgKTsKCQkJCQlyZXR1cm4gdGhpcy5Qb2ludHM7CgoJCQkJfQoJCQl9CgkJfSApOwoKCX0KCglmdW5jdGlvbiBhc2NTb3J0KCBhLCBiICkgewoKCQlyZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7CgoJfQoKCWZ1bmN0aW9uIGludGVyc2VjdE9iamVjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHsKCgkJaWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQoKCQlvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7CgoJCWlmICggcmVjdXJzaXZlID09PSB0cnVlICkgewoKCQkJdmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQlpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApOwoKCQkJfQoKCQl9CgoJfQoKCU9iamVjdC5hc3NpZ24oIFJheWNhc3Rlci5wcm90b3R5cGUsIHsKCgkJbGluZVByZWNpc2lvbjogMSwKCgkJc2V0OiBmdW5jdGlvbiAoIG9yaWdpbiwgZGlyZWN0aW9uICkgewoKCQkJLy8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucykKCgkJCXRoaXMucmF5LnNldCggb3JpZ2luLCBkaXJlY3Rpb24gKTsKCgkJfSwKCgkJc2V0RnJvbUNhbWVyYTogZnVuY3Rpb24gKCBjb29yZHMsIGNhbWVyYSApIHsKCgkJCWlmICggKCBjYW1lcmEgJiYgY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSApIHsKCgkJCQl0aGlzLnJheS5vcmlnaW4uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTsKCQkJCXRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIGNvb3Jkcy54LCBjb29yZHMueSwgMC41ICkudW5wcm9qZWN0KCBjYW1lcmEgKS5zdWIoIHRoaXMucmF5Lm9yaWdpbiApLm5vcm1hbGl6ZSgpOwoJCQkJdGhpcy5jYW1lcmEgPSBjYW1lcmE7CgoJCQl9IGVsc2UgaWYgKCAoIGNhbWVyYSAmJiBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSApIHsKCgkJCQl0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmEKCQkJCXRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7CgkJCQl0aGlzLmNhbWVyYSA9IGNhbWVyYTsKCgkJCX0gZWxzZSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuJyApOwoKCQkJfQoKCQl9LAoKCQlpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0LCByZWN1cnNpdmUsIG9wdGlvbmFsVGFyZ2V0ICkgewoKCQkJdmFyIGludGVyc2VjdHMgPSBvcHRpb25hbFRhcmdldCB8fCBbXTsKCgkJCWludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTsKCgkJCWludGVyc2VjdHMuc29ydCggYXNjU29ydCApOwoKCQkJcmV0dXJuIGludGVyc2VjdHM7CgoJCX0sCgoJCWludGVyc2VjdE9iamVjdHM6IGZ1bmN0aW9uICggb2JqZWN0cywgcmVjdXJzaXZlLCBvcHRpb25hbFRhcmdldCApIHsKCgkJCXZhciBpbnRlcnNlY3RzID0gb3B0aW9uYWxUYXJnZXQgfHwgW107CgoJCQlpZiAoIEFycmF5LmlzQXJyYXkoIG9iamVjdHMgKSA9PT0gZmFsc2UgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHM6IG9iamVjdHMgaXMgbm90IGFuIEFycmF5LicgKTsKCQkJCXJldHVybiBpbnRlcnNlY3RzOwoKCQkJfQoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCWludGVyc2VjdE9iamVjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTsKCgkJCX0KCgkJCWludGVyc2VjdHMuc29ydCggYXNjU29ydCApOwoKCQkJcmV0dXJuIGludGVyc2VjdHM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqCgkgKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbQoJICoKCSAqIFRoZSBwb2xhciBhbmdsZSAocGhpKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB5LWF4aXMuIFRoZSBwb3NpdGl2ZSB5LWF4aXMgaXMgdXAuCgkgKiBUaGUgYXppbXV0aGFsIGFuZ2xlICh0aGV0YSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzLgoJICovCgoJZnVuY3Rpb24gU3BoZXJpY2FsKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7CgoJCXRoaXMucmFkaXVzID0gKCByYWRpdXMgIT09IHVuZGVmaW5lZCApID8gcmFkaXVzIDogMS4wOwoJCXRoaXMucGhpID0gKCBwaGkgIT09IHVuZGVmaW5lZCApID8gcGhpIDogMDsgLy8gcG9sYXIgYW5nbGUKCQl0aGlzLnRoZXRhID0gKCB0aGV0YSAhPT0gdW5kZWZpbmVkICkgPyB0aGV0YSA6IDA7IC8vIGF6aW11dGhhbCBhbmdsZQoKCQlyZXR1cm4gdGhpczsKCgl9CgoJT2JqZWN0LmFzc2lnbiggU3BoZXJpY2FsLnByb3RvdHlwZSwgewoKCQlzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCBwaGksIHRoZXRhICkgewoKCQkJdGhpcy5yYWRpdXMgPSByYWRpdXM7CgkJCXRoaXMucGhpID0gcGhpOwoJCQl0aGlzLnRoZXRhID0gdGhldGE7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBvdGhlciApIHsKCgkJCXRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzOwoJCQl0aGlzLnBoaSA9IG90aGVyLnBoaTsKCQkJdGhpcy50aGV0YSA9IG90aGVyLnRoZXRhOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCS8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWUgRVBTIGFuZCBQSS1FUFMKCQltYWtlU2FmZTogZnVuY3Rpb24gKCkgewoKCQkJdmFyIEVQUyA9IDAuMDAwMDAxOwoJCQl0aGlzLnBoaSA9IE1hdGgubWF4KCBFUFMsIE1hdGgubWluKCBNYXRoLlBJIC0gRVBTLCB0aGlzLnBoaSApICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTsKCgkJfSwKCgkJc2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJdGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeSAqIHkgKyB6ICogeiApOwoKCQkJaWYgKCB0aGlzLnJhZGl1cyA9PT0gMCApIHsKCgkJCQl0aGlzLnRoZXRhID0gMDsKCQkJCXRoaXMucGhpID0gMDsKCgkJCX0gZWxzZSB7CgoJCQkJdGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTsKCQkJCXRoaXMucGhpID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXM7CgoJCX0KCgl9ICk7CgoJLyoqCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICoKCSAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3lsaW5kcmljYWxfY29vcmRpbmF0ZV9zeXN0ZW0KCSAqCgkgKi8KCglmdW5jdGlvbiBDeWxpbmRyaWNhbCggcmFkaXVzLCB0aGV0YSwgeSApIHsKCgkJdGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAxLjA7IC8vIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byBhIHBvaW50IGluIHRoZSB4LXogcGxhbmUKCQl0aGlzLnRoZXRhID0gKCB0aGV0YSAhPT0gdW5kZWZpbmVkICkgPyB0aGV0YSA6IDA7IC8vIGNvdW50ZXJjbG9ja3dpc2UgYW5nbGUgaW4gdGhlIHgteiBwbGFuZSBtZWFzdXJlZCBpbiByYWRpYW5zIGZyb20gdGhlIHBvc2l0aXZlIHotYXhpcwoJCXRoaXMueSA9ICggeSAhPT0gdW5kZWZpbmVkICkgPyB5IDogMDsgLy8gaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmUKCgkJcmV0dXJuIHRoaXM7CgoJfQoKCU9iamVjdC5hc3NpZ24oIEN5bGluZHJpY2FsLnByb3RvdHlwZSwgewoKCQlzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHsKCgkJCXRoaXMucmFkaXVzID0gcmFkaXVzOwoJCQl0aGlzLnRoZXRhID0gdGhldGE7CgkJCXRoaXMueSA9IHk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBvdGhlciApIHsKCgkJCXRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzOwoJCQl0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7CgkJCXRoaXMueSA9IG90aGVyLnk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJc2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiApIHsKCgkJCXJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTsKCgkJfSwKCgkJc2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkgewoKCQkJdGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeiAqIHogKTsKCQkJdGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTsKCQkJdGhpcy55ID0geTsKCgkJCXJldHVybiB0aGlzOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICovCgoJdmFyIF92ZWN0b3IkNyA9IG5ldyBWZWN0b3IyKCk7CgoJZnVuY3Rpb24gQm94MiggbWluLCBtYXggKSB7CgoJCXRoaXMubWluID0gKCBtaW4gIT09IHVuZGVmaW5lZCApID8gbWluIDogbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKTsKCQl0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IyKCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7CgoJfQoKCU9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7CgoJCXNldDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHsKCgkJCXRoaXMubWluLmNvcHkoIG1pbiApOwoJCQl0aGlzLm1heC5jb3B5KCBtYXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHsKCgkJCXRoaXMubWFrZUVtcHR5KCk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlzZXRGcm9tQ2VudGVyQW5kU2l6ZTogZnVuY3Rpb24gKCBjZW50ZXIsIHNpemUgKSB7CgoJCQl2YXIgaGFsZlNpemUgPSBfdmVjdG9yJDcuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTsKCQkJdGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApOwoJCQl0aGlzLm1heC5jb3B5KCBjZW50ZXIgKS5hZGQoIGhhbGZTaXplICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBib3ggKSB7CgoJCQl0aGlzLm1pbi5jb3B5KCBib3gubWluICk7CgkJCXRoaXMubWF4LmNvcHkoIGJveC5tYXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQltYWtlRW1wdHk6IGZ1bmN0aW9uICgpIHsKCgkJCXRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gKyBJbmZpbml0eTsKCQkJdGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSAtIEluZmluaXR5OwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWlzRW1wdHk6IGZ1bmN0aW9uICgpIHsKCgkJCS8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzCgoJCQlyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKTsKCgkJfSwKCgkJZ2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMigpOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTsKCgkJfSwKCgkJZ2V0U2l6ZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQlpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTsKCQkJCXRhcmdldCA9IG5ldyBWZWN0b3IyKCk7CgoJCQl9CgoJCQlyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7CgoJCX0sCgoJCWV4cGFuZEJ5UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7CgoJCQl0aGlzLm1pbi5taW4oIHBvaW50ICk7CgkJCXRoaXMubWF4Lm1heCggcG9pbnQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlleHBhbmRCeVZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7CgoJCQl0aGlzLm1pbi5zdWIoIHZlY3RvciApOwoJCQl0aGlzLm1heC5hZGQoIHZlY3RvciApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWV4cGFuZEJ5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHsKCgkJCXRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTsKCQkJdGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQljb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkgewoKCQkJcmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8CgkJCQlwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSA/IGZhbHNlIDogdHJ1ZTsKCgkJfSwKCgkJY29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJcmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmCgkJCQl0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTsKCgkJfSwKCgkJZ2V0UGFyYW1ldGVyOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7CgoJCQkvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveAoJCQkvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLgoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0UGFyYW1ldGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTsKCQkJCXRhcmdldCA9IG5ldyBWZWN0b3IyKCk7CgoJCQl9CgoJCQlyZXR1cm4gdGFyZ2V0LnNldCgKCQkJCSggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSwKCQkJCSggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKQoJCQkpOwoKCQl9LAoKCQlpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHsKCgkJCS8vIHVzaW5nIDQgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zCgoJCQlyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8CgkJCQlib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7CgoJCX0sCgoJCWNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7CgoJCX0sCgoJCWRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHsKCgkJCXZhciBjbGFtcGVkUG9pbnQgPSBfdmVjdG9yJDcuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7CgkJCXJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpOwoKCQl9LAoKCQlpbnRlcnNlY3Q6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJdGhpcy5taW4ubWF4KCBib3gubWluICk7CgkJCXRoaXMubWF4Lm1pbiggYm94Lm1heCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXVuaW9uOiBmdW5jdGlvbiAoIGJveCApIHsKCgkJCXRoaXMubWluLm1pbiggYm94Lm1pbiApOwoJCQl0aGlzLm1heC5tYXgoIGJveC5tYXggKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQl0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkgewoKCQkJdGhpcy5taW4uYWRkKCBvZmZzZXQgKTsKCQkJdGhpcy5tYXguYWRkKCBvZmZzZXQgKTsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQllcXVhbHM6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJcmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pbwoJICovCgoJdmFyIF9zdGFydFAgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF9zdGFydEVuZCA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gTGluZTMoIHN0YXJ0LCBlbmQgKSB7CgoJCXRoaXMuc3RhcnQgPSAoIHN0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IHN0YXJ0IDogbmV3IFZlY3RvcjMoKTsKCQl0aGlzLmVuZCA9ICggZW5kICE9PSB1bmRlZmluZWQgKSA/IGVuZCA6IG5ldyBWZWN0b3IzKCk7CgoJfQoKCU9iamVjdC5hc3NpZ24oIExpbmUzLnByb3RvdHlwZSwgewoKCQlzZXQ6IGZ1bmN0aW9uICggc3RhcnQsIGVuZCApIHsKCgkJCXRoaXMuc3RhcnQuY29weSggc3RhcnQgKTsKCQkJdGhpcy5lbmQuY29weSggZW5kICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfSwKCgkJY29weTogZnVuY3Rpb24gKCBsaW5lICkgewoKCQkJdGhpcy5zdGFydC5jb3B5KCBsaW5lLnN0YXJ0ICk7CgkJCXRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJZ2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5zdGFydCwgdGhpcy5lbmQgKS5tdWx0aXBseVNjYWxhciggMC41ICk7CgoJCX0sCgoJCWRlbHRhOiBmdW5jdGlvbiAoIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5kZWx0YSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJcmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApOwoKCQl9LAoKCQlkaXN0YW5jZVNxOiBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5lbmQgKTsKCgkJfSwKCgkJZGlzdGFuY2U6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8oIHRoaXMuZW5kICk7CgoJCX0sCgoJCWF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHsKCgkJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5hdCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7CgkJCQl0YXJnZXQgPSBuZXcgVmVjdG9yMygpOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMuZGVsdGEoIHRhcmdldCApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnN0YXJ0ICk7CgoJCX0sCgoJCWNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIGNsYW1wVG9MaW5lICkgewoKCQkJX3N0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApOwoJCQlfc3RhcnRFbmQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTsKCgkJCXZhciBzdGFydEVuZDIgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRFbmQgKTsKCQkJdmFyIHN0YXJ0RW5kX3N0YXJ0UCA9IF9zdGFydEVuZC5kb3QoIF9zdGFydFAgKTsKCgkJCXZhciB0ID0gc3RhcnRFbmRfc3RhcnRQIC8gc3RhcnRFbmQyOwoKCQkJaWYgKCBjbGFtcFRvTGluZSApIHsKCgkJCQl0ID0gX01hdGguY2xhbXAoIHQsIDAsIDEgKTsKCgkJCX0KCgkJCXJldHVybiB0OwoKCQl9LAoKCQljbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBjbGFtcFRvTGluZSwgdGFyZ2V0ICkgewoKCQkJdmFyIHQgPSB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApOwoKCQkJaWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApOwoJCQkJdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTsKCgkJCX0KCgkJCXJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApOwoKCQl9LAoKCQlhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkgewoKCQkJdGhpcy5zdGFydC5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoJCQl0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApOwoKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCWVxdWFsczogZnVuY3Rpb24gKCBsaW5lICkgewoKCQkJcmV0dXJuIGxpbmUuc3RhcnQuZXF1YWxzKCB0aGlzLnN0YXJ0ICkgJiYgbGluZS5lbmQuZXF1YWxzKCB0aGlzLmVuZCApOwoKCQl9CgoJfSApOwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqLwoKCWZ1bmN0aW9uIEltbWVkaWF0ZVJlbmRlck9iamVjdCggbWF0ZXJpYWwgKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsOwoJCXRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCAvKiByZW5kZXJDYWxsYmFjayAqLyApIHt9OwoKCX0KCglJbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7CglJbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW1tZWRpYXRlUmVuZGVyT2JqZWN0OwoKCUltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgPSB0cnVlOwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICovCgoJdmFyIF92MSQ1ID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdjIkMyA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX25vcm1hbE1hdHJpeCQxID0gbmV3IE1hdHJpeDMoKTsKCXZhciBfa2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdOwoKCWZ1bmN0aW9uIFZlcnRleE5vcm1hbHNIZWxwZXIoIG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGggKSB7CgoJCXRoaXMub2JqZWN0ID0gb2JqZWN0OwoKCQl0aGlzLnNpemUgPSAoIHNpemUgIT09IHVuZGVmaW5lZCApID8gc2l6ZSA6IDE7CgoJCXZhciBjb2xvciA9ICggaGV4ICE9PSB1bmRlZmluZWQgKSA/IGhleCA6IDB4ZmYwMDAwOwoKCQl2YXIgd2lkdGggPSAoIGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyBsaW5ld2lkdGggOiAxOwoKCQkvLwoKCQl2YXIgbk5vcm1hbHMgPSAwOwoKCQl2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTsKCgkJaWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5ICkgewoKCQkJbk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzOwoKCQl9IGVsc2UgaWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJbk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC5jb3VudDsKCgkJfQoKCQkvLwoKCQl2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCgkJdmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBuTm9ybWFscyAqIDIgKiAzLCAzICk7CgoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zICk7CgoJCUxpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgbGluZXdpZHRoOiB3aWR0aCB9ICkgKTsKCgkJLy8KCgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCVZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApOwoJVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyOwoKCVZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCgkJdGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTsKCgkJX25vcm1hbE1hdHJpeCQxLmdldE5vcm1hbE1hdHJpeCggdGhpcy5vYmplY3QubWF0cml4V29ybGQgKTsKCgkJdmFyIG1hdHJpeFdvcmxkID0gdGhpcy5vYmplY3QubWF0cml4V29ybGQ7CgoJCXZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCgkJLy8KCgkJdmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7CgoJCWlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCXZhciB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzOwoKCQkJdmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7CgoJCQl2YXIgaWR4ID0gMDsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGZhY2UgPSBmYWNlc1sgaSBdOwoKCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCXZhciB2ZXJ0ZXggPSB2ZXJ0aWNlc1sgZmFjZVsgX2tleXNbIGogXSBdIF07CgoJCQkJCXZhciBub3JtYWwgPSBmYWNlLnZlcnRleE5vcm1hbHNbIGogXTsKCgkJCQkJX3YxJDUuY29weSggdmVydGV4ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoKCQkJCQlfdjIkMy5jb3B5KCBub3JtYWwgKS5hcHBseU1hdHJpeDMoIF9ub3JtYWxNYXRyaXgkMSApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIF92MSQ1ICk7CgoJCQkJCXBvc2l0aW9uLnNldFhZWiggaWR4LCBfdjEkNS54LCBfdjEkNS55LCBfdjEkNS56ICk7CgoJCQkJCWlkeCA9IGlkeCArIDE7CgoJCQkJCXBvc2l0aW9uLnNldFhZWiggaWR4LCBfdjIkMy54LCBfdjIkMy55LCBfdjIkMy56ICk7CgoJCQkJCWlkeCA9IGlkeCArIDE7CgoJCQkJfQoKCQkJfQoKCQl9IGVsc2UgaWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgewoKCQkJdmFyIG9ialBvcyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgoJCQl2YXIgb2JqTm9ybSA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsOwoKCQkJdmFyIGlkeCA9IDA7CgoJCQkvLyBmb3Igc2ltcGxpY2l0eSwgaWdub3JlIGluZGV4IGFuZCBkcmF3Y2FsbHMsIGFuZCByZW5kZXIgZXZlcnkgbm9ybWFsCgoJCQlmb3IgKCB2YXIgaiA9IDAsIGpsID0gb2JqUG9zLmNvdW50OyBqIDwgamw7IGogKysgKSB7CgoJCQkJX3YxJDUuc2V0KCBvYmpQb3MuZ2V0WCggaiApLCBvYmpQb3MuZ2V0WSggaiApLCBvYmpQb3MuZ2V0WiggaiApICkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoKCQkJCV92MiQzLnNldCggb2JqTm9ybS5nZXRYKCBqICksIG9iak5vcm0uZ2V0WSggaiApLCBvYmpOb3JtLmdldFooIGogKSApOwoKCQkJCV92MiQzLmFwcGx5TWF0cml4MyggX25vcm1hbE1hdHJpeCQxICkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApLmFkZCggX3YxJDUgKTsKCgkJCQlwb3NpdGlvbi5zZXRYWVooIGlkeCwgX3YxJDUueCwgX3YxJDUueSwgX3YxJDUueiApOwoKCQkJCWlkeCA9IGlkeCArIDE7CgoJCQkJcG9zaXRpb24uc2V0WFlaKCBpZHgsIF92MiQzLngsIF92MiQzLnksIF92MiQzLnogKTsKCgkJCQlpZHggPSBpZHggKyAxOwoKCQkJfQoKCQl9CgoJCXBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKi8KCgl2YXIgX3YxJDYgPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92MiQ0ID0gbmV3IFZlY3RvcjMoKTsKCglmdW5jdGlvbiBWZXJ0ZXhUYW5nZW50c0hlbHBlciggb2JqZWN0LCBzaXplLCBoZXgsIGxpbmV3aWR0aCApIHsKCgkJdGhpcy5vYmplY3QgPSBvYmplY3Q7CgoJCXRoaXMuc2l6ZSA9ICggc2l6ZSAhPT0gdW5kZWZpbmVkICkgPyBzaXplIDogMTsKCgkJdmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHgwMGZmZmY7CgoJCXZhciB3aWR0aCA9ICggbGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSA/IGxpbmV3aWR0aCA6IDE7CgoJCS8vCgoJCXZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5OwoKCQlpZiAoICEgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuVmVydGV4VGFuZ2VudHNIZWxwZXI6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBvYmpHZW9tZXRyeSApOwoJCQlyZXR1cm47CgoJCX0KCgkJdmFyIG5UYW5nZW50cyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudC5jb3VudDsKCgkJLy8KCgkJdmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgoJCXZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggblRhbmdlbnRzICogMiAqIDMsIDMgKTsKCgkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMgKTsKCgkJTGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBsaW5ld2lkdGg6IHdpZHRoIH0gKSApOwoKCQkvLwoKCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKCgkJdGhpcy51cGRhdGUoKTsKCgl9CgoJVmVydGV4VGFuZ2VudHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApOwoJVmVydGV4VGFuZ2VudHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmVydGV4VGFuZ2VudHNIZWxwZXI7CgoJVmVydGV4VGFuZ2VudHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCgkJdGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTsKCgkJdmFyIG1hdHJpeFdvcmxkID0gdGhpcy5vYmplY3QubWF0cml4V29ybGQ7CgoJCXZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCgkJLy8KCgkJdmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7CgoJCXZhciBvYmpQb3MgPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uOwoKCQl2YXIgb2JqVGFuID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50OwoKCQl2YXIgaWR4ID0gMDsKCgkJLy8gZm9yIHNpbXBsaWNpdHksIGlnbm9yZSBpbmRleCBhbmQgZHJhd2NhbGxzLCBhbmQgcmVuZGVyIGV2ZXJ5IHRhbmdlbnQKCgkJZm9yICggdmFyIGogPSAwLCBqbCA9IG9ialBvcy5jb3VudDsgaiA8IGpsOyBqICsrICkgewoKCQkJX3YxJDYuc2V0KCBvYmpQb3MuZ2V0WCggaiApLCBvYmpQb3MuZ2V0WSggaiApLCBvYmpQb3MuZ2V0WiggaiApICkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoKCQkJX3YyJDQuc2V0KCBvYmpUYW4uZ2V0WCggaiApLCBvYmpUYW4uZ2V0WSggaiApLCBvYmpUYW4uZ2V0WiggaiApICk7CgoJCQlfdjIkNC50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeFdvcmxkICkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApLmFkZCggX3YxJDYgKTsKCgkJCXBvc2l0aW9uLnNldFhZWiggaWR4LCBfdjEkNi54LCBfdjEkNi55LCBfdjEkNi56ICk7CgoJCQlpZHggPSBpZHggKyAxOwoKCQkJcG9zaXRpb24uc2V0WFlaKCBpZHgsIF92MiQ0LngsIF92MiQ0LnksIF92MiQ0LnogKTsKCgkJCWlkeCA9IGlkeCArIDE7CgoJCX0KCgkJcG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tLwoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICovCgoJdmFyIF92ZWN0b3IkOCA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gU3BvdExpZ2h0SGVscGVyKCBsaWdodCwgY29sb3IgKSB7CgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJdGhpcy5saWdodCA9IGxpZ2h0OwoJCXRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTsKCgkJdGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDsKCQl0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTsKCgkJdGhpcy5jb2xvciA9IGNvbG9yOwoKCQl2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCgkJdmFyIHBvc2l0aW9ucyA9IFsKCQkJMCwgMCwgMCwgCTAsIDAsIDEsCgkJCTAsIDAsIDAsIAkxLCAwLCAxLAoJCQkwLCAwLCAwLAktIDEsIDAsIDEsCgkJCTAsIDAsIDAsIAkwLCAxLCAxLAoJCQkwLCAwLCAwLCAJMCwgLSAxLCAxCgkJXTsKCgkJZm9yICggdmFyIGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHsKCgkJCXZhciBwMSA9ICggaSAvIGwgKSAqIE1hdGguUEkgKiAyOwoJCQl2YXIgcDIgPSAoIGogLyBsICkgKiBNYXRoLlBJICogMjsKCgkJCXBvc2l0aW9ucy5wdXNoKAoJCQkJTWF0aC5jb3MoIHAxICksIE1hdGguc2luKCBwMSApLCAxLAoJCQkJTWF0aC5jb3MoIHAyICksIE1hdGguc2luKCBwMiApLCAxCgkJCSk7CgoJCX0KCgkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTsKCgkJdmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApOwoKCQl0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCQl0aGlzLmFkZCggdGhpcy5jb25lICk7CgoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCVNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTsKCVNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcG90TGlnaHRIZWxwZXI7CgoJU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgewoKCQl0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpOwoJCXRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7CgoJfTsKCglTcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCgkJdGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpOwoKCQl2YXIgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDsKCQl2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7CgoJCXRoaXMuY29uZS5zY2FsZS5zZXQoIGNvbmVXaWR0aCwgY29uZVdpZHRoLCBjb25lTGVuZ3RoICk7CgoJCV92ZWN0b3IkOC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7CgoJCXRoaXMuY29uZS5sb29rQXQoIF92ZWN0b3IkOCApOwoKCQlpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHsKCgkJCXRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTsKCgkJfSBlbHNlIHsKCgkJCXRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7CgoJCX0KCgl9OwoKCS8qKgoJICogQGF1dGhvciBTZWFuIEdyaWZmaW4gLyBodHRwOi8vdHdpdHRlci5jb20vc2dyaWYKCSAqIEBhdXRob3IgTWljaGFlbCBHdWVycmVybyAvIGh0dHA6Ly9yZWFsaXR5bWVsdGRvd24uY29tCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICovCgoJdmFyIF92ZWN0b3IkOSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2JvbmVNYXRyaXggPSBuZXcgTWF0cml4NCgpOwoJdmFyIF9tYXRyaXhXb3JsZEludiA9IG5ldyBNYXRyaXg0KCk7CgoJZnVuY3Rpb24gZ2V0Qm9uZUxpc3QoIG9iamVjdCApIHsKCgkJdmFyIGJvbmVMaXN0ID0gW107CgoJCWlmICggb2JqZWN0ICYmIG9iamVjdC5pc0JvbmUgKSB7CgoJCQlib25lTGlzdC5wdXNoKCBvYmplY3QgKTsKCgkJfQoKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkgewoKCQkJYm9uZUxpc3QucHVzaC5hcHBseSggYm9uZUxpc3QsIGdldEJvbmVMaXN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSApICk7CgoJCX0KCgkJcmV0dXJuIGJvbmVMaXN0OwoKCX0KCglmdW5jdGlvbiBTa2VsZXRvbkhlbHBlciggb2JqZWN0ICkgewoKCQl2YXIgYm9uZXMgPSBnZXRCb25lTGlzdCggb2JqZWN0ICk7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoKCQl2YXIgdmVydGljZXMgPSBbXTsKCQl2YXIgY29sb3JzID0gW107CgoJCXZhciBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTsKCQl2YXIgY29sb3IyID0gbmV3IENvbG9yKCAwLCAxLCAwICk7CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHsKCgkJCXZhciBib25lID0gYm9uZXNbIGkgXTsKCgkJCWlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkgewoKCQkJCXZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTsKCQkJCXZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTsKCQkJCWNvbG9ycy5wdXNoKCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICk7CgkJCQljb2xvcnMucHVzaCggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApOwoKCQkJfQoKCQl9CgoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApOwoKCQl2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7CgoJCUxpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJdGhpcy5yb290ID0gb2JqZWN0OwoJCXRoaXMuYm9uZXMgPSBib25lczsKCgkJdGhpcy5tYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7CgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJfQoKCVNrZWxldG9uSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTsKCVNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNrZWxldG9uSGVscGVyOwoKCVNrZWxldG9uSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7CgoJCXZhciBib25lcyA9IHRoaXMuYm9uZXM7CgoJCXZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CgkJdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7CgoJCV9tYXRyaXhXb3JsZEludi5nZXRJbnZlcnNlKCB0aGlzLnJvb3QubWF0cml4V29ybGQgKTsKCgkJZm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHsKCgkJCXZhciBib25lID0gYm9uZXNbIGkgXTsKCgkJCWlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkgewoKCQkJCV9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIF9tYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApOwoJCQkJX3ZlY3RvciQ5LnNldEZyb21NYXRyaXhQb3NpdGlvbiggX2JvbmVNYXRyaXggKTsKCQkJCXBvc2l0aW9uLnNldFhZWiggaiwgX3ZlY3RvciQ5LngsIF92ZWN0b3IkOS55LCBfdmVjdG9yJDkueiApOwoKCQkJCV9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIF9tYXRyaXhXb3JsZEludiwgYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTsKCQkJCV92ZWN0b3IkOS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIF9ib25lTWF0cml4ICk7CgkJCQlwb3NpdGlvbi5zZXRYWVooIGogKyAxLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7CgoJCQkJaiArPSAyOwoKCQkJfQoKCQl9CgoJCWdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJT2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gUG9pbnRMaWdodEhlbHBlciggbGlnaHQsIHNwaGVyZVNpemUsIGNvbG9yICkgewoKCQl0aGlzLmxpZ2h0ID0gbGlnaHQ7CgkJdGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpOwoKCQl0aGlzLmNvbG9yID0gY29sb3I7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggc3BoZXJlU2l6ZSwgNCwgMiApOwoJCXZhciBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApOwoKCQlNZXNoLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApOwoKCQl0aGlzLm1hdHJpeCA9IHRoaXMubGlnaHQubWF0cml4V29ybGQ7CgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMudXBkYXRlKCk7CgoKCQkvKgoJCXZhciBkaXN0YW5jZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIDEsIDIgKTsKCQl2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7CgoJCXRoaXMubGlnaHRTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggYnVsYkdlb21ldHJ5LCBidWxiTWF0ZXJpYWwgKTsKCQl0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApOwoKCQl2YXIgZCA9IGxpZ2h0LmRpc3RhbmNlOwoKCQlpZiAoIGQgPT09IDAuMCApIHsKCgkJCXRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7CgoJCX0gZWxzZSB7CgoJCQl0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7CgoJCX0KCgkJdGhpcy5hZGQoIHRoaXMubGlnaHREaXN0YW5jZSApOwoJCSovCgoJfQoKCVBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaC5wcm90b3R5cGUgKTsKCVBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9pbnRMaWdodEhlbHBlcjsKCglQb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgewoKCQl0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTsKCQl0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTsKCgl9OwoKCVBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCgkJaWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7CgoJCQl0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApOwoKCQl9IGVsc2UgewoKCQkJdGhpcy5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7CgoJCX0KCgkJLyoKCQl2YXIgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7CgoJCWlmICggZCA9PT0gMC4wICkgewoKCQkJdGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTsKCgkJfSBlbHNlIHsKCgkJCXRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gdHJ1ZTsKCQkJdGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApOwoKCQl9CgkJKi8KCgl9OwoKCS8qKgoJICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvbgoJICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44NwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKgoJICogIFRoaXMgaGVscGVyIG11c3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiB0aGUgbGlnaHQKCSAqLwoKCWZ1bmN0aW9uIFJlY3RBcmVhTGlnaHRIZWxwZXIoIGxpZ2h0LCBjb2xvciApIHsKCgkJdGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHRIZWxwZXInOwoKCQl0aGlzLmxpZ2h0ID0gbGlnaHQ7CgoJCXRoaXMuY29sb3IgPSBjb2xvcjsgLy8gb3B0aW9uYWwgaGFyZHdpcmVkIGNvbG9yIGZvciB0aGUgaGVscGVyCgoJCXZhciBwb3NpdGlvbnMgPSBbIDEsIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIC0gMSwgMCwgMSwgMSwgMCBdOwoKCQl2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApOwoJCWdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOwoKCQl2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7CgoJCUxpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCS8vCgoJCXZhciBwb3NpdGlvbnMyID0gWyAxLCAxLCAwLCAtIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAxLCAwLCAtIDEsIC0gMSwgMCwgMSwgLSAxLCAwIF07CgoJCXZhciBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCQlnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7CgkJZ2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOwoKCQl0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHNpZGU6IEJhY2tTaWRlLCBmb2c6IGZhbHNlIH0gKSApICk7CgoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCVJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKTsKCVJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVjdEFyZWFMaWdodEhlbHBlcjsKCglSZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLmxpZ2h0LndpZHRoLCAwLjUgKiB0aGlzLmxpZ2h0LmhlaWdodCwgMSApOwoKCQlpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHsKCgkJCXRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7CgkJCXRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTsKCgkJfSBlbHNlIHsKCgkJCXRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCB0aGlzLmxpZ2h0LmludGVuc2l0eSApOwoKCQkJLy8gcHJldmVudCBodWUgc2hpZnQKCQkJdmFyIGMgPSB0aGlzLm1hdGVyaWFsLmNvbG9yOwoJCQl2YXIgbWF4ID0gTWF0aC5tYXgoIGMuciwgYy5nLCBjLmIgKTsKCQkJaWYgKCBtYXggPiAxICkgeyBjLm11bHRpcGx5U2NhbGFyKCAxIC8gbWF4ICk7IH0KCgkJCXRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLm1hdGVyaWFsLmNvbG9yICk7CgoJCX0KCgl9OwoKCVJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpOwoJCXRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpOwoJCXRoaXMuY2hpbGRyZW5bIDAgXS5nZW9tZXRyeS5kaXNwb3NlKCk7CgkJdGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44NwoJICovCgoJdmFyIF92ZWN0b3IkYSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2NvbG9yMSA9IG5ldyBDb2xvcigpOwoJdmFyIF9jb2xvcjIgPSBuZXcgQ29sb3IoKTsKCglmdW5jdGlvbiBIZW1pc3BoZXJlTGlnaHRIZWxwZXIoIGxpZ2h0LCBzaXplLCBjb2xvciApIHsKCgkJT2JqZWN0M0QuY2FsbCggdGhpcyApOwoKCQl0aGlzLmxpZ2h0ID0gbGlnaHQ7CgkJdGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpOwoKCQl0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkOwoJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwoKCQl0aGlzLmNvbG9yID0gY29sb3I7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHNpemUgKTsKCQlnZW9tZXRyeS5yb3RhdGVZKCBNYXRoLlBJICogMC41ICk7CgoJCXRoaXMubWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlIH0gKTsKCQlpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHsgdGhpcy5tYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7IH0KCgkJdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7CgkJdmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uLmNvdW50ICogMyApOwoKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7CgoJCXRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKSApOwoKCQl0aGlzLnVwZGF0ZSgpOwoKCX0KCglIZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7CglIZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGVtaXNwaGVyZUxpZ2h0SGVscGVyOwoKCUhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHsKCgkJdGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTsKCQl0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpOwoKCX07CgoJSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBtZXNoID0gdGhpcy5jaGlsZHJlblsgMCBdOwoKCQlpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHsKCgkJCXRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7CgoJCX0gZWxzZSB7CgoJCQl2YXIgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdjb2xvcicgKTsKCgkJCV9jb2xvcjEuY29weSggdGhpcy5saWdodC5jb2xvciApOwoJCQlfY29sb3IyLmNvcHkoIHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IgKTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IGNvbG9ycy5jb3VudDsgaSA8IGw7IGkgKysgKSB7CgoJCQkJdmFyIGNvbG9yID0gKCBpIDwgKCBsIC8gMiApICkgPyBfY29sb3IxIDogX2NvbG9yMjsKCgkJCQljb2xvcnMuc2V0WFlaKCBpLCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7CgoJCQl9CgoJCQljb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlOwoKCQl9CgoJCW1lc2gubG9va0F0KCBfdmVjdG9yJGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICkubmVnYXRlKCkgKTsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKi8KCglmdW5jdGlvbiBMaWdodFByb2JlSGVscGVyKCBsaWdodFByb2JlLCBzaXplICkgewoKCQl0aGlzLmxpZ2h0UHJvYmUgPSBsaWdodFByb2JlOwoKCQl0aGlzLnNpemUgPSBzaXplOwoKCQl2YXIgZGVmaW5lcyA9IHt9OwoJCWRlZmluZXNbICdHQU1NQV9PVVRQVVQnIF0gPSAiIjsKCgkJLy8gbWF0ZXJpYWwKCQl2YXIgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHsKCgkJCWRlZmluZXM6IGRlZmluZXMsCgoJCQl1bmlmb3JtczogewoKCQkJCXNoOiB7IHZhbHVlOiB0aGlzLmxpZ2h0UHJvYmUuc2guY29lZmZpY2llbnRzIH0sIC8vIGJ5IHJlZmVyZW5jZQoKCQkJCWludGVuc2l0eTogeyB2YWx1ZTogdGhpcy5saWdodFByb2JlLmludGVuc2l0eSB9CgoJCQl9LAoKCQkJdmVydGV4U2hhZGVyOiBbCgoJCQkJJ3ZhcnlpbmcgdmVjMyB2Tm9ybWFsOycsCgoJCQkJJ3ZvaWQgbWFpbigpIHsnLAoKCQkJCScJdk5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7JywKCgkJCQknCWdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsnLAoKCQkJCSd9JyBdLmpvaW4oICdcbicgKSwKCgkJCWZyYWdtZW50U2hhZGVyOiBbCgoJCQkJJyNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NicsCgoJCQkJJ3ZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkgeycsCgoJCQkJJwkvLyBtYXRyaXggaXMgYXNzdW1lZCB0byBiZSBvcnRob2dvbmFsJywKCgkJCQknCXJldHVybiBub3JtYWxpemUoICggdmVjNCggbm9ybWFsLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApOycsCgoJCQkJJ30nLAoKCQkJCSd2ZWMzIGxpbmVhclRvT3V0cHV0KCBpbiB2ZWMzIGEgKSB7JywKCgkJCQknCSNpZmRlZiBHQU1NQV9PVVRQVVQnLAoKCQkJCScJCXJldHVybiBwb3coIGEsIHZlYzMoIDEuMCAvIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApICk7JywKCgkJCQknCSNlbHNlJywKCgkJCQknCQlyZXR1cm4gYTsnLAoKCQkJCScJI2VuZGlmJywKCgkJCQknfScsCgoJCQkJJy8vIHNvdXJjZTogaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmJywKCQkJCSd2ZWMzIHNoR2V0SXJyYWRpYW5jZUF0KCBpbiB2ZWMzIG5vcm1hbCwgaW4gdmVjMyBzaENvZWZmaWNpZW50c1sgOSBdICkgeycsCgoJCQkJJwkvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoJywKCgkJCQknCWZsb2F0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7JywKCgkJCQknCS8vIGJhbmQgMCcsCgkJCQknCXZlYzMgcmVzdWx0ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3OycsCgoJCQkJJwkvLyBiYW5kIDEnLAoJCQkJJwlyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTsnLAoJCQkJJwlyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDIgXSAqIDIuMCAqIDAuNTExNjY0ICogejsnLAoJCQkJJwlyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDsnLAoKCQkJCScJLy8gYmFuZCAyJywKCQkJCScJcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA0IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB5OycsCgkJCQknCXJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNSBdICogMi4wICogMC40MjkwNDMgKiB5ICogejsnLAoJCQkJJwlyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDYgXSAqICggMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7JywKCQkJCScJcmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA3IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHggKiB6OycsCgkJCQknCXJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgOCBdICogMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKTsnLAoKCQkJCScJcmV0dXJuIHJlc3VsdDsnLAoKCQkJCSd9JywKCgkJCQkndW5pZm9ybSB2ZWMzIHNoWyA5IF07IC8vIHNoIGNvZWZmaWNpZW50cycsCgoJCQkJJ3VuaWZvcm0gZmxvYXQgaW50ZW5zaXR5OyAvLyBsaWdodCBwcm9iZSBpbnRlbnNpdHknLAoKCQkJCSd2YXJ5aW5nIHZlYzMgdk5vcm1hbDsnLAoKCQkJCSd2b2lkIG1haW4oKSB7JywKCgkJCQknCXZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7JywKCgkJCQknCXZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTsnLAoKCQkJCScJdmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBzaCApOycsCgoJCQkJJwl2ZWMzIG91dGdvaW5nTGlnaHQgPSBSRUNJUFJPQ0FMX1BJICogaXJyYWRpYW5jZSAqIGludGVuc2l0eTsnLAoKCQkJCScJb3V0Z29pbmdMaWdodCA9IGxpbmVhclRvT3V0cHV0KCBvdXRnb2luZ0xpZ2h0ICk7JywKCgkJCQknCWdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIDEuMCApOycsCgoJCQkJJ30nCgoJCQldLmpvaW4oICdcbicgKQoKCQl9ICk7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggMSwgMzIsIDE2ICk7CgoJCU1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCXRoaXMub25CZWZvcmVSZW5kZXIoKTsKCgl9CgoJTGlnaHRQcm9iZUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNZXNoLnByb3RvdHlwZSApOwoJTGlnaHRQcm9iZUhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaWdodFByb2JlSGVscGVyOwoKCUxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpOwoJCXRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpOwoKCX07CgoJTGlnaHRQcm9iZUhlbHBlci5wcm90b3R5cGUub25CZWZvcmVSZW5kZXIgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMucG9zaXRpb24uY29weSggdGhpcy5saWdodFByb2JlLnBvc2l0aW9uICk7CgoJCXRoaXMuc2NhbGUuc2V0KCAxLCAxLCAxICkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApOwoKCQl0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLmludGVuc2l0eS52YWx1ZSA9IHRoaXMubGlnaHRQcm9iZS5pbnRlbnNpdHk7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBHcmlkSGVscGVyKCBzaXplLCBkaXZpc2lvbnMsIGNvbG9yMSwgY29sb3IyICkgewoKCQlzaXplID0gc2l6ZSB8fCAxMDsKCQlkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTA7CgkJY29sb3IxID0gbmV3IENvbG9yKCBjb2xvcjEgIT09IHVuZGVmaW5lZCA/IGNvbG9yMSA6IDB4NDQ0NDQ0ICk7CgkJY29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4ICk7CgoJCXZhciBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyOwoJCXZhciBzdGVwID0gc2l6ZSAvIGRpdmlzaW9uczsKCQl2YXIgaGFsZlNpemUgPSBzaXplIC8gMjsKCgkJdmFyIHZlcnRpY2VzID0gW10sIGNvbG9ycyA9IFtdOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGogPSAwLCBrID0gLSBoYWxmU2l6ZTsgaSA8PSBkaXZpc2lvbnM7IGkgKyssIGsgKz0gc3RlcCApIHsKCgkJCXZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7CgkJCXZlcnRpY2VzLnB1c2goIGssIDAsIC0gaGFsZlNpemUsIGssIDAsIGhhbGZTaXplICk7CgoJCQl2YXIgY29sb3IgPSBpID09PSBjZW50ZXIgPyBjb2xvcjEgOiBjb2xvcjI7CgoJCQljb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzOwoJCQljb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzOwoJCQljb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzOwoJCQljb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzOwoKCQl9CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApOwoKCQl2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApOwoKCQlMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJfQoKCUdyaWRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApLCB7CgoJCWNvbnN0cnVjdG9yOiBHcmlkSGVscGVyLAoKCQljb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJCUxpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTsKCgkJCXRoaXMuZ2VvbWV0cnkuY29weSggc291cmNlLmdlb21ldHJ5ICk7CgkJCXRoaXMubWF0ZXJpYWwuY29weSggc291cmNlLm1hdGVyaWFsICk7CgoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCgkJY2xvbmU6IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTsKCgkJfQoKCX0gKTsKCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKiBAYXV0aG9yIEhlY3RhdGUgLyBodHRwOi8vd3d3LmdpdGh1Yi5jb20vSGVjdGF0ZQoJICovCgoJZnVuY3Rpb24gUG9sYXJHcmlkSGVscGVyKCByYWRpdXMsIHJhZGlhbHMsIGNpcmNsZXMsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7CgoJCXJhZGl1cyA9IHJhZGl1cyB8fCAxMDsKCQlyYWRpYWxzID0gcmFkaWFscyB8fCAxNjsKCQljaXJjbGVzID0gY2lyY2xlcyB8fCA4OwoJCWRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCA2NDsKCQljb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQgKTsKCQljb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gY29sb3IyIDogMHg4ODg4ODggKTsKCgkJdmFyIHZlcnRpY2VzID0gW107CgkJdmFyIGNvbG9ycyA9IFtdOwoKCQl2YXIgeCwgejsKCQl2YXIgdiwgaSwgaiwgciwgY29sb3I7CgoJCS8vIGNyZWF0ZSB0aGUgcmFkaWFscwoKCQlmb3IgKCBpID0gMDsgaSA8PSByYWRpYWxzOyBpICsrICkgewoKCQkJdiA9ICggaSAvIHJhZGlhbHMgKSAqICggTWF0aC5QSSAqIDIgKTsKCgkJCXggPSBNYXRoLnNpbiggdiApICogcmFkaXVzOwoJCQl6ID0gTWF0aC5jb3MoIHYgKSAqIHJhZGl1czsKCgkJCXZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTsKCQkJdmVydGljZXMucHVzaCggeCwgMCwgeiApOwoKCQkJY29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7CgoJCQljb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApOwoJCQljb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApOwoKCQl9CgoJCS8vIGNyZWF0ZSB0aGUgY2lyY2xlcwoKCQlmb3IgKCBpID0gMDsgaSA8PSBjaXJjbGVzOyBpICsrICkgewoKCQkJY29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7CgoJCQlyID0gcmFkaXVzIC0gKCByYWRpdXMgLyBjaXJjbGVzICogaSApOwoKCQkJZm9yICggaiA9IDA7IGogPCBkaXZpc2lvbnM7IGogKysgKSB7CgoJCQkJLy8gZmlyc3QgdmVydGV4CgoJCQkJdiA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApOwoKCQkJCXggPSBNYXRoLnNpbiggdiApICogcjsKCQkJCXogPSBNYXRoLmNvcyggdiApICogcjsKCgkJCQl2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7CgkJCQljb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApOwoKCQkJCS8vIHNlY29uZCB2ZXJ0ZXgKCgkJCQl2ID0gKCAoIGogKyAxICkgLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTsKCgkJCQl4ID0gTWF0aC5zaW4oIHYgKSAqIHI7CgkJCQl6ID0gTWF0aC5jb3MoIHYgKSAqIHI7CgoJCQkJdmVydGljZXMucHVzaCggeCwgMCwgeiApOwoJCQkJY29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTsKCgkJCX0KCgkJfQoKCQl2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7CgkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTsKCgkJdmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTsKCgkJTGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApOwoKCX0KCglQb2xhckdyaWRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApOwoJUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbGFyR3JpZEhlbHBlcjsKCgkvKioKCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHA6Ly9naXRodWIuY29tL011Z2VuODcKCSAqLwoKCWZ1bmN0aW9uIFBvc2l0aW9uYWxBdWRpb0hlbHBlciggYXVkaW8sIHJhbmdlLCBkaXZpc2lvbnNJbm5lckFuZ2xlLCBkaXZpc2lvbnNPdXRlckFuZ2xlICkgewoKCQl0aGlzLmF1ZGlvID0gYXVkaW87CgkJdGhpcy5yYW5nZSA9IHJhbmdlIHx8IDE7CgkJdGhpcy5kaXZpc2lvbnNJbm5lckFuZ2xlID0gZGl2aXNpb25zSW5uZXJBbmdsZSB8fCAxNjsKCQl0aGlzLmRpdmlzaW9uc091dGVyQW5nbGUgPSBkaXZpc2lvbnNPdXRlckFuZ2xlIHx8IDI7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCXZhciBkaXZpc2lvbnMgPSB0aGlzLmRpdmlzaW9uc0lubmVyQW5nbGUgKyB0aGlzLmRpdmlzaW9uc091dGVyQW5nbGUgKiAyOwoJCXZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCAoIGRpdmlzaW9ucyAqIDMgKyAzICkgKiAzICk7CgkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApOwoKCQl2YXIgbWF0ZXJpYWxJbm5lckFuZ2xlID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwZmYwMCB9ICk7CgkJdmFyIG1hdGVyaWFsT3V0ZXJBbmdsZSA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApOwoKCQlMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBbIG1hdGVyaWFsT3V0ZXJBbmdsZSwgbWF0ZXJpYWxJbm5lckFuZ2xlIF0gKTsKCgkJdGhpcy51cGRhdGUoKTsKCgl9CgoJUG9zaXRpb25hbEF1ZGlvSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICk7CglQb3NpdGlvbmFsQXVkaW9IZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9zaXRpb25hbEF1ZGlvSGVscGVyOwoKCVBvc2l0aW9uYWxBdWRpb0hlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgYXVkaW8gPSB0aGlzLmF1ZGlvOwoJCXZhciByYW5nZSA9IHRoaXMucmFuZ2U7CgkJdmFyIGRpdmlzaW9uc0lubmVyQW5nbGUgPSB0aGlzLmRpdmlzaW9uc0lubmVyQW5nbGU7CgkJdmFyIGRpdmlzaW9uc091dGVyQW5nbGUgPSB0aGlzLmRpdmlzaW9uc091dGVyQW5nbGU7CgoJCXZhciBjb25lSW5uZXJBbmdsZSA9IF9NYXRoLmRlZ1RvUmFkKCBhdWRpby5wYW5uZXIuY29uZUlubmVyQW5nbGUgKTsKCQl2YXIgY29uZU91dGVyQW5nbGUgPSBfTWF0aC5kZWdUb1JhZCggYXVkaW8ucGFubmVyLmNvbmVPdXRlckFuZ2xlICk7CgoJCXZhciBoYWxmQ29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZSAvIDI7CgkJdmFyIGhhbGZDb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlIC8gMjsKCgkJdmFyIHN0YXJ0ID0gMDsKCQl2YXIgY291bnQgPSAwOwoJCXZhciBpLCBzdHJpZGU7CgoJCXZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7CgkJdmFyIHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCgkJZ2VvbWV0cnkuY2xlYXJHcm91cHMoKTsKCgkJLy8KCgkJZnVuY3Rpb24gZ2VuZXJhdGVTZWdtZW50KCBmcm9tLCB0bywgZGl2aXNpb25zLCBtYXRlcmlhbEluZGV4ICkgewoKCQkJdmFyIHN0ZXAgPSAoIHRvIC0gZnJvbSApIC8gZGl2aXNpb25zOwoKCQkJcG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKCBzdGFydCwgMCwgMCwgMCApOwoJCQljb3VudCArKzsKCgkJCWZvciAoIGkgPSBmcm9tOyBpIDwgdG87IGkgKz0gc3RlcCApIHsKCgkJCQlzdHJpZGUgPSBzdGFydCArIGNvdW50OwoKCQkJCXBvc2l0aW9uQXR0cmlidXRlLnNldFhZWiggc3RyaWRlLCBNYXRoLnNpbiggaSApICogcmFuZ2UsIDAsIE1hdGguY29zKCBpICkgKiByYW5nZSApOwoJCQkJcG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKCBzdHJpZGUgKyAxLCBNYXRoLnNpbiggTWF0aC5taW4oIGkgKyBzdGVwLCB0byApICkgKiByYW5nZSwgMCwgTWF0aC5jb3MoIE1hdGgubWluKCBpICsgc3RlcCwgdG8gKSApICogcmFuZ2UgKTsKCQkJCXBvc2l0aW9uQXR0cmlidXRlLnNldFhZWiggc3RyaWRlICsgMiwgMCwgMCwgMCApOwoKCQkJCWNvdW50ICs9IDM7CgoJCQl9CgoJCQlnZW9tZXRyeS5hZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ICk7CgoJCQlzdGFydCArPSBjb3VudDsKCQkJY291bnQgPSAwOwoKCQl9CgoJCS8vCgoJCWdlbmVyYXRlU2VnbWVudCggLSBoYWxmQ29uZU91dGVyQW5nbGUsIC0gaGFsZkNvbmVJbm5lckFuZ2xlLCBkaXZpc2lvbnNPdXRlckFuZ2xlLCAwICk7CgkJZ2VuZXJhdGVTZWdtZW50KCAtIGhhbGZDb25lSW5uZXJBbmdsZSwgaGFsZkNvbmVJbm5lckFuZ2xlLCBkaXZpc2lvbnNJbm5lckFuZ2xlLCAxICk7CgkJZ2VuZXJhdGVTZWdtZW50KCBoYWxmQ29uZUlubmVyQW5nbGUsIGhhbGZDb25lT3V0ZXJBbmdsZSwgZGl2aXNpb25zT3V0ZXJBbmdsZSwgMCApOwoKCQkvLwoKCQlwb3NpdGlvbkF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCWlmICggY29uZUlubmVyQW5nbGUgPT09IGNvbmVPdXRlckFuZ2xlICkgeyB0aGlzLm1hdGVyaWFsWyAwIF0udmlzaWJsZSA9IGZhbHNlOyB9CgoJfTsKCglQb3NpdGlvbmFsQXVkaW9IZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpOwoJCXRoaXMubWF0ZXJpYWxbIDAgXS5kaXNwb3NlKCk7CgkJdGhpcy5tYXRlcmlhbFsgMSBdLmRpc3Bvc2UoKTsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8KCSAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQoJICovCgoJdmFyIF92MSQ3ID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdjIkNSA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX25vcm1hbE1hdHJpeCQyID0gbmV3IE1hdHJpeDMoKTsKCglmdW5jdGlvbiBGYWNlTm9ybWFsc0hlbHBlciggb2JqZWN0LCBzaXplLCBoZXgsIGxpbmV3aWR0aCApIHsKCgkJLy8gRmFjZU5vcm1hbHNIZWxwZXIgb25seSBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeQoKCQl0aGlzLm9iamVjdCA9IG9iamVjdDsKCgkJdGhpcy5zaXplID0gKCBzaXplICE9PSB1bmRlZmluZWQgKSA/IHNpemUgOiAxOwoKCQl2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDsKCgkJdmFyIHdpZHRoID0gKCBsaW5ld2lkdGggIT09IHVuZGVmaW5lZCApID8gbGluZXdpZHRoIDogMTsKCgkJLy8KCgkJdmFyIG5Ob3JtYWxzID0gMDsKCgkJdmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7CgoJCWlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNHZW9tZXRyeSApIHsKCgkJCW5Ob3JtYWxzID0gb2JqR2VvbWV0cnkuZmFjZXMubGVuZ3RoOwoKCQl9IGVsc2UgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXI6IG9ubHkgVEhSRUUuR2VvbWV0cnkgaXMgc3VwcG9ydGVkLiBVc2UgVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlciwgaW5zdGVhZC4nICk7CgoJCX0KCgkJLy8KCgkJdmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgoJCXZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbk5vcm1hbHMgKiAyICogMywgMyApOwoKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIHBvc2l0aW9ucyApOwoKCQlMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIGxpbmV3aWR0aDogd2lkdGggfSApICk7CgoJCS8vCgoJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCUZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTsKCUZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZhY2VOb3JtYWxzSGVscGVyOwoKCUZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7CgoJCXRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7CgoJCV9ub3JtYWxNYXRyaXgkMi5nZXROb3JtYWxNYXRyaXgoIHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkICk7CgoJCXZhciBtYXRyaXhXb3JsZCA9IHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkOwoKCQl2YXIgcG9zaXRpb24gPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247CgoJCS8vCgoJCXZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5OwoKCQl2YXIgdmVydGljZXMgPSBvYmpHZW9tZXRyeS52ZXJ0aWNlczsKCgkJdmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7CgoJCXZhciBpZHggPSAwOwoKCQlmb3IgKCB2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJdmFyIGZhY2UgPSBmYWNlc1sgaSBdOwoKCQkJdmFyIG5vcm1hbCA9IGZhY2Uubm9ybWFsOwoKCQkJX3YxJDcuY29weSggdmVydGljZXNbIGZhY2UuYSBdICkKCQkJCS5hZGQoIHZlcnRpY2VzWyBmYWNlLmIgXSApCgkJCQkuYWRkKCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKQoJCQkJLmRpdmlkZVNjYWxhciggMyApCgkJCQkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApOwoKCQkJX3YyJDUuY29weSggbm9ybWFsICkuYXBwbHlNYXRyaXgzKCBfbm9ybWFsTWF0cml4JDIgKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCBfdjEkNyApOwoKCQkJcG9zaXRpb24uc2V0WFlaKCBpZHgsIF92MSQ3LngsIF92MSQ3LnksIF92MSQ3LnogKTsKCgkJCWlkeCA9IGlkeCArIDE7CgoJCQlwb3NpdGlvbi5zZXRYWVooIGlkeCwgX3YyJDUueCwgX3YyJDUueSwgX3YyJDUueiApOwoKCQkJaWR4ID0gaWR4ICsgMTsKCgkJfQoKCQlwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJfTsKCgkvKioKCSAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5CgkgKi8KCgl2YXIgX3YxJDggPSBuZXcgVmVjdG9yMygpOwoJdmFyIF92MiQ2ID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfdjMkMSA9IG5ldyBWZWN0b3IzKCk7CgoJZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodEhlbHBlciggbGlnaHQsIHNpemUsIGNvbG9yICkgewoKCQlPYmplY3QzRC5jYWxsKCB0aGlzICk7CgoJCXRoaXMubGlnaHQgPSBsaWdodDsKCQl0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgoJCXRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7CgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMuY29sb3IgPSBjb2xvcjsKCgkJaWYgKCBzaXplID09PSB1bmRlZmluZWQgKSB7IHNpemUgPSAxOyB9CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsKCQkJLSBzaXplLCBzaXplLCAwLAoJCQlzaXplLCBzaXplLCAwLAoJCQlzaXplLCAtIHNpemUsIDAsCgkJCS0gc2l6ZSwgLSBzaXplLCAwLAoJCQktIHNpemUsIHNpemUsIDAKCQldLCAzICkgKTsKCgkJdmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApOwoKCQl0aGlzLmxpZ2h0UGxhbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgkJdGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApOwoKCQlnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMCwgMSBdLCAzICkgKTsKCgkJdGhpcy50YXJnZXRMaW5lID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApOwoJCXRoaXMuYWRkKCB0aGlzLnRhcmdldExpbmUgKTsKCgkJdGhpcy51cGRhdGUoKTsKCgl9CgoJRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTsKCURpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlyZWN0aW9uYWxMaWdodEhlbHBlcjsKCglEaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgewoKCQl0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpOwoJCXRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5kaXNwb3NlKCk7CgkJdGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTsKCQl0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpOwoKCX07CgoJRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkgewoKCQlfdjEkOC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTsKCQlfdjIkNi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7CgkJX3YzJDEuc3ViVmVjdG9ycyggX3YyJDYsIF92MSQ4ICk7CgoJCXRoaXMubGlnaHRQbGFuZS5sb29rQXQoIF92MiQ2ICk7CgoJCWlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkgewoKCQkJdGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApOwoJCQl0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7CgoJCX0gZWxzZSB7CgoJCQl0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApOwoJCQl0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApOwoKCQl9CgoJCXRoaXMudGFyZ2V0TGluZS5sb29rQXQoIF92MiQ2ICk7CgkJdGhpcy50YXJnZXRMaW5lLnNjYWxlLnogPSBfdjMkMS5sZW5ndGgoKTsKCgl9OwoKCS8qKgoJICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS8KCSAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKgoJICoJLSBzaG93cyBmcnVzdHVtLCBsaW5lIG9mIHNpZ2h0IGFuZCB1cCBvZiB0aGUgY2FtZXJhCgkgKgktIHN1aXRhYmxlIGZvciBmYXN0IHVwZGF0ZXMKCSAqIAktIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlCgkgKgkJaHR0cDovL2V2YW53LmdpdGh1Yi5jb20vbGlnaHRnbC5qcy90ZXN0cy9zaGFkb3dtYXAuaHRtbAoJICovCgoJdmFyIF92ZWN0b3IkYiA9IG5ldyBWZWN0b3IzKCk7Cgl2YXIgX2NhbWVyYSA9IG5ldyBDYW1lcmEoKTsKCglmdW5jdGlvbiBDYW1lcmFIZWxwZXIoIGNhbWVyYSApIHsKCgkJdmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgkJdmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiwgdmVydGV4Q29sb3JzOiBGYWNlQ29sb3JzIH0gKTsKCgkJdmFyIHZlcnRpY2VzID0gW107CgkJdmFyIGNvbG9ycyA9IFtdOwoKCQl2YXIgcG9pbnRNYXAgPSB7fTsKCgkJLy8gY29sb3JzCgoJCXZhciBjb2xvckZydXN0dW0gPSBuZXcgQ29sb3IoIDB4ZmZhYTAwICk7CgkJdmFyIGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTsKCQl2YXIgY29sb3JVcCA9IG5ldyBDb2xvciggMHgwMGFhZmYgKTsKCQl2YXIgY29sb3JUYXJnZXQgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7CgkJdmFyIGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7CgoJCS8vIG5lYXIKCgkJYWRkTGluZSggJ24xJywgJ24yJywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ24yJywgJ240JywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ240JywgJ24zJywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ24zJywgJ24xJywgY29sb3JGcnVzdHVtICk7CgoJCS8vIGZhcgoKCQlhZGRMaW5lKCAnZjEnLCAnZjInLCBjb2xvckZydXN0dW0gKTsKCQlhZGRMaW5lKCAnZjInLCAnZjQnLCBjb2xvckZydXN0dW0gKTsKCQlhZGRMaW5lKCAnZjQnLCAnZjMnLCBjb2xvckZydXN0dW0gKTsKCQlhZGRMaW5lKCAnZjMnLCAnZjEnLCBjb2xvckZydXN0dW0gKTsKCgkJLy8gc2lkZXMKCgkJYWRkTGluZSggJ24xJywgJ2YxJywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ24yJywgJ2YyJywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ24zJywgJ2YzJywgY29sb3JGcnVzdHVtICk7CgkJYWRkTGluZSggJ240JywgJ2Y0JywgY29sb3JGcnVzdHVtICk7CgoJCS8vIGNvbmUKCgkJYWRkTGluZSggJ3AnLCAnbjEnLCBjb2xvckNvbmUgKTsKCQlhZGRMaW5lKCAncCcsICduMicsIGNvbG9yQ29uZSApOwoJCWFkZExpbmUoICdwJywgJ24zJywgY29sb3JDb25lICk7CgkJYWRkTGluZSggJ3AnLCAnbjQnLCBjb2xvckNvbmUgKTsKCgkJLy8gdXAKCgkJYWRkTGluZSggJ3UxJywgJ3UyJywgY29sb3JVcCApOwoJCWFkZExpbmUoICd1MicsICd1MycsIGNvbG9yVXAgKTsKCQlhZGRMaW5lKCAndTMnLCAndTEnLCBjb2xvclVwICk7CgoJCS8vIHRhcmdldAoKCQlhZGRMaW5lKCAnYycsICd0JywgY29sb3JUYXJnZXQgKTsKCQlhZGRMaW5lKCAncCcsICdjJywgY29sb3JDcm9zcyApOwoKCQkvLyBjcm9zcwoKCQlhZGRMaW5lKCAnY24xJywgJ2NuMicsIGNvbG9yQ3Jvc3MgKTsKCQlhZGRMaW5lKCAnY24zJywgJ2NuNCcsIGNvbG9yQ3Jvc3MgKTsKCgkJYWRkTGluZSggJ2NmMScsICdjZjInLCBjb2xvckNyb3NzICk7CgkJYWRkTGluZSggJ2NmMycsICdjZjQnLCBjb2xvckNyb3NzICk7CgoJCWZ1bmN0aW9uIGFkZExpbmUoIGEsIGIsIGNvbG9yICkgewoKCQkJYWRkUG9pbnQoIGEsIGNvbG9yICk7CgkJCWFkZFBvaW50KCBiLCBjb2xvciApOwoKCQl9CgoJCWZ1bmN0aW9uIGFkZFBvaW50KCBpZCwgY29sb3IgKSB7CgoJCQl2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7CgkJCWNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7CgoJCQlpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJcG9pbnRNYXBbIGlkIF0gPSBbXTsKCgkJCX0KCgkJCXBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApOwoKCQl9CgoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApOwoKCQlMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCXRoaXMuY2FtZXJhID0gY2FtZXJhOwoJCWlmICggdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCApIHsgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOyB9CgoJCXRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkOwoJCXRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwoKCQl0aGlzLnBvaW50TWFwID0gcG9pbnRNYXA7CgoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCUNhbWVyYUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7CglDYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FtZXJhSGVscGVyOwoKCUNhbWVyYUhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkgewoKCQl2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwoJCXZhciBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7CgoJCXZhciB3ID0gMSwgaCA9IDE7CgoJCS8vIHdlIG5lZWQganVzdCBjYW1lcmEgcHJvamVjdGlvbiBtYXRyaXggaW52ZXJzZQoJCS8vIHdvcmxkIG1hdHJpeCBtdXN0IGJlIGlkZW50aXR5CgoJCV9jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTsKCgkJLy8gY2VudGVyIC8gdGFyZ2V0CgoJCXNldFBvaW50KCAnYycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgMCwgLSAxICk7CgkJc2V0UG9pbnQoICd0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAwLCAxICk7CgoJCS8vIG5lYXIKCgkJc2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIC0gMSApOwoJCXNldFBvaW50KCAnbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0gaCwgLSAxICk7CgkJc2V0UG9pbnQoICduMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAtIDEgKTsKCQlzZXRQb2ludCggJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAtIDEgKTsKCgkJLy8gZmFyCgoJCXNldFBvaW50KCAnZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgLSBoLCAxICk7CgkJc2V0UG9pbnQoICdmMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgLSBoLCAxICk7CgkJc2V0UG9pbnQoICdmMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAxICk7CgkJc2V0UG9pbnQoICdmNCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgaCwgMSApOwoKCQkvLyB1cAoKCQlzZXRQb2ludCggJ3UxJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3ICogMC43LCBoICogMS4xLCAtIDEgKTsKCQlzZXRQb2ludCggJ3UyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApOwoJCXNldFBvaW50KCAndTMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGggKiAyLCAtIDEgKTsKCgkJLy8gY3Jvc3MKCgkJc2V0UG9pbnQoICdjZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgMCwgMSApOwoJCXNldFBvaW50KCAnY2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAxICk7CgkJc2V0UG9pbnQoICdjZjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgMSApOwoJCXNldFBvaW50KCAnY2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCAxICk7CgoJCXNldFBvaW50KCAnY24xJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIDAsIC0gMSApOwoJCXNldFBvaW50KCAnY24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAtIDEgKTsKCQlzZXRQb2ludCggJ2NuMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgLSBoLCAtIDEgKTsKCQlzZXRQb2ludCggJ2NuNCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgaCwgLSAxICk7CgoJCWdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgl9OwoKCWZ1bmN0aW9uIHNldFBvaW50KCBwb2ludCwgcG9pbnRNYXAsIGdlb21ldHJ5LCBjYW1lcmEsIHgsIHksIHogKSB7CgoJCV92ZWN0b3IkYi5zZXQoIHgsIHksIHogKS51bnByb2plY3QoIGNhbWVyYSApOwoKCQl2YXIgcG9pbnRzID0gcG9pbnRNYXBbIHBvaW50IF07CgoJCWlmICggcG9pbnRzICE9PSB1bmRlZmluZWQgKSB7CgoJCQl2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXBvc2l0aW9uLnNldFhZWiggcG9pbnRzWyBpIF0sIF92ZWN0b3IkYi54LCBfdmVjdG9yJGIueSwgX3ZlY3RvciRiLnogKTsKCgkJCX0KCgkJfQoKCX0KCgkvKioKCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3CgkgKi8KCgl2YXIgX2JveCQzID0gbmV3IEJveDMoKTsKCglmdW5jdGlvbiBCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7CgoJCXRoaXMub2JqZWN0ID0gb2JqZWN0OwoKCQlpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSB7IGNvbG9yID0gMHhmZmZmMDA7IH0KCgkJdmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7CgkJdmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKiAzICk7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCWdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTsKCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7CgoJCUxpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTsKCgkJdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgoJCXRoaXMudXBkYXRlKCk7CgoJfQoKCUJveEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7CglCb3hIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94SGVscGVyOwoKCUJveEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCWlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7CgoJCX0KCgkJaWYgKCB0aGlzLm9iamVjdCAhPT0gdW5kZWZpbmVkICkgewoKCQkJX2JveCQzLnNldEZyb21PYmplY3QoIHRoaXMub2JqZWN0ICk7CgoJCX0KCgkJaWYgKCBfYm94JDMuaXNFbXB0eSgpICkgeyByZXR1cm47IH0KCgkJdmFyIG1pbiA9IF9ib3gkMy5taW47CgkJdmFyIG1heCA9IF9ib3gkMy5tYXg7CgoJCS8qCgkJICA1X19fXzQKCQkxL19fXzAvfAoJCXwgNl9ffF83CgkJMi9fX18zLwoKCQkwOiBtYXgueCwgbWF4LnksIG1heC56CgkJMTogbWluLngsIG1heC55LCBtYXguegoJCTI6IG1pbi54LCBtaW4ueSwgbWF4LnoKCQkzOiBtYXgueCwgbWluLnksIG1heC56CgkJNDogbWF4LngsIG1heC55LCBtaW4uegoJCTU6IG1pbi54LCBtYXgueSwgbWluLnoKCQk2OiBtaW4ueCwgbWluLnksIG1pbi56CgkJNzogbWF4LngsIG1pbi55LCBtaW4uegoJCSovCgoJCXZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCQl2YXIgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTsKCgkJYXJyYXlbIDAgXSA9IG1heC54OyBhcnJheVsgMSBdID0gbWF4Lnk7IGFycmF5WyAyIF0gPSBtYXguejsKCQlhcnJheVsgMyBdID0gbWluLng7IGFycmF5WyA0IF0gPSBtYXgueTsgYXJyYXlbIDUgXSA9IG1heC56OwoJCWFycmF5WyA2IF0gPSBtaW4ueDsgYXJyYXlbIDcgXSA9IG1pbi55OyBhcnJheVsgOCBdID0gbWF4Lno7CgkJYXJyYXlbIDkgXSA9IG1heC54OyBhcnJheVsgMTAgXSA9IG1pbi55OyBhcnJheVsgMTEgXSA9IG1heC56OwoJCWFycmF5WyAxMiBdID0gbWF4Lng7IGFycmF5WyAxMyBdID0gbWF4Lnk7IGFycmF5WyAxNCBdID0gbWluLno7CgkJYXJyYXlbIDE1IF0gPSBtaW4ueDsgYXJyYXlbIDE2IF0gPSBtYXgueTsgYXJyYXlbIDE3IF0gPSBtaW4uejsKCQlhcnJheVsgMTggXSA9IG1pbi54OyBhcnJheVsgMTkgXSA9IG1pbi55OyBhcnJheVsgMjAgXSA9IG1pbi56OwoJCWFycmF5WyAyMSBdID0gbWF4Lng7IGFycmF5WyAyMiBdID0gbWluLnk7IGFycmF5WyAyMyBdID0gbWluLno7CgoJCXBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsKCgkJdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCgoJfTsKCglCb3hIZWxwZXIucHJvdG90eXBlLnNldEZyb21PYmplY3QgPSBmdW5jdGlvbiAoIG9iamVjdCApIHsKCgkJdGhpcy5vYmplY3QgPSBvYmplY3Q7CgkJdGhpcy51cGRhdGUoKTsKCgkJcmV0dXJuIHRoaXM7CgoJfTsKCglCb3hIZWxwZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHsKCgkJTGluZVNlZ21lbnRzLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApOwoKCQl0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJQm94SGVscGVyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHsKCgkJcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIEJveDNIZWxwZXIoIGJveCwgY29sb3IgKSB7CgoJCXRoaXMudHlwZSA9ICdCb3gzSGVscGVyJzsKCgkJdGhpcy5ib3ggPSBib3g7CgoJCWNvbG9yID0gY29sb3IgfHwgMHhmZmZmMDA7CgoJCXZhciBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KCBbIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDcgXSApOwoKCQl2YXIgcG9zaXRpb25zID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxIF07CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoKCQlnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7CgoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7CgoJCUxpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTsKCgkJdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTsKCgl9CgoJQm94M0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7CglCb3gzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveDNIZWxwZXI7CgoJQm94M0hlbHBlci5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQgPSBmdW5jdGlvbiAoIGZvcmNlICkgewoKCQl2YXIgYm94ID0gdGhpcy5ib3g7CgoJCWlmICggYm94LmlzRW1wdHkoKSApIHsgcmV0dXJuOyB9CgoJCWJveC5nZXRDZW50ZXIoIHRoaXMucG9zaXRpb24gKTsKCgkJYm94LmdldFNpemUoIHRoaXMuc2NhbGUgKTsKCgkJdGhpcy5zY2FsZS5tdWx0aXBseVNjYWxhciggMC41ICk7CgoJCU9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqLwoKCWZ1bmN0aW9uIFBsYW5lSGVscGVyKCBwbGFuZSwgc2l6ZSwgaGV4ICkgewoKCQl0aGlzLnR5cGUgPSAnUGxhbmVIZWxwZXInOwoKCQl0aGlzLnBsYW5lID0gcGxhbmU7CgoJCXRoaXMuc2l6ZSA9ICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgPyAxIDogc2l6ZTsKCgkJdmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7CgoJCXZhciBwb3NpdGlvbnMgPSBbIDEsIC0gMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAwLCAwLCAwIF07CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7CgkJZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7CgoJCUxpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7CgoJCS8vCgoJCXZhciBwb3NpdGlvbnMyID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxIF07CgoJCXZhciBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTsKCQlnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7CgkJZ2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOwoKCQl0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgb3BhY2l0eTogMC4yLCB0cmFuc3BhcmVudDogdHJ1ZSwgZGVwdGhXcml0ZTogZmFsc2UgfSApICkgKTsKCgl9CgoJUGxhbmVIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKTsKCVBsYW5lSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lSGVscGVyOwoKCVBsYW5lSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7CgoJCXZhciBzY2FsZSA9IC0gdGhpcy5wbGFuZS5jb25zdGFudDsKCgkJaWYgKCBNYXRoLmFicyggc2NhbGUgKSA8IDFlLTggKSB7IHNjYWxlID0gMWUtODsgfSAvLyBzaWduIGRvZXMgbm90IG1hdHRlcgoKCQl0aGlzLnNjYWxlLnNldCggMC41ICogdGhpcy5zaXplLCAwLjUgKiB0aGlzLnNpemUsIHNjYWxlICk7CgoJCXRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5zaWRlID0gKCBzY2FsZSA8IDAgKSA/IEJhY2tTaWRlIDogRnJvbnRTaWRlOyAvLyByZW5kZXJlciBmbGlwcyBzaWRlIHdoZW4gZGV0ZXJtaW5hbnQgPCAwOyBmbGlwcGluZyBub3Qgd2FudGVkIGhlcmUKCgkJdGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7CgoJCU9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApOwoKCX07CgoJLyoqCgkgKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXkKCSAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly9naXRodWIuY29tL3p6ODUKCSAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8KCSAqCgkgKiBDcmVhdGVzIGFuIGFycm93IGZvciB2aXN1YWxpemluZyBkaXJlY3Rpb25zCgkgKgoJICogUGFyYW1ldGVyczoKCSAqICBkaXIgLSBWZWN0b3IzCgkgKiAgb3JpZ2luIC0gVmVjdG9yMwoJICogIGxlbmd0aCAtIE51bWJlcgoJICogIGNvbG9yIC0gY29sb3IgaW4gaGV4IHZhbHVlCgkgKiAgaGVhZExlbmd0aCAtIE51bWJlcgoJICogIGhlYWRXaWR0aCAtIE51bWJlcgoJICovCgoJdmFyIF9heGlzID0gbmV3IFZlY3RvcjMoKTsKCXZhciBfbGluZUdlb21ldHJ5LCBfY29uZUdlb21ldHJ5OwoKCWZ1bmN0aW9uIEFycm93SGVscGVyKCBkaXIsIG9yaWdpbiwgbGVuZ3RoLCBjb2xvciwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkgewoKCQkvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkCgoJCU9iamVjdDNELmNhbGwoIHRoaXMgKTsKCgkJaWYgKCBkaXIgPT09IHVuZGVmaW5lZCApIHsgZGlyID0gbmV3IFZlY3RvcjMoIDAsIDAsIDEgKTsgfQoJCWlmICggb3JpZ2luID09PSB1bmRlZmluZWQgKSB7IG9yaWdpbiA9IG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7IH0KCQlpZiAoIGxlbmd0aCA9PT0gdW5kZWZpbmVkICkgeyBsZW5ndGggPSAxOyB9CgkJaWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgeyBjb2xvciA9IDB4ZmZmZjAwOyB9CgkJaWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSB7IGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7IH0KCQlpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgeyBoZWFkV2lkdGggPSAwLjIgKiBoZWFkTGVuZ3RoOyB9CgoJCWlmICggX2xpbmVHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkgewoKCQkJX2xpbmVHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpOwoJCQlfbGluZUdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMSwgMCBdLCAzICkgKTsKCgkJCV9jb25lR2VvbWV0cnkgPSBuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggMCwgMC41LCAxLCA1LCAxICk7CgkJCV9jb25lR2VvbWV0cnkudHJhbnNsYXRlKCAwLCAtIDAuNSwgMCApOwoKCQl9CgoJCXRoaXMucG9zaXRpb24uY29weSggb3JpZ2luICk7CgoJCXRoaXMubGluZSA9IG5ldyBMaW5lKCBfbGluZUdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApOwoJCXRoaXMubGluZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7CgkJdGhpcy5hZGQoIHRoaXMubGluZSApOwoKCQl0aGlzLmNvbmUgPSBuZXcgTWVzaCggX2NvbmVHZW9tZXRyeSwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTsKCQl0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwoJCXRoaXMuYWRkKCB0aGlzLmNvbmUgKTsKCgkJdGhpcy5zZXREaXJlY3Rpb24oIGRpciApOwoJCXRoaXMuc2V0TGVuZ3RoKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApOwoKCX0KCglBcnJvd0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTsKCUFycm93SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFycm93SGVscGVyOwoKCUFycm93SGVscGVyLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSBmdW5jdGlvbiAoIGRpciApIHsKCgkJLy8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZAoKCQlpZiAoIGRpci55ID4gMC45OTk5OSApIHsKCgkJCXRoaXMucXVhdGVybmlvbi5zZXQoIDAsIDAsIDAsIDEgKTsKCgkJfSBlbHNlIGlmICggZGlyLnkgPCAtIDAuOTk5OTkgKSB7CgoJCQl0aGlzLnF1YXRlcm5pb24uc2V0KCAxLCAwLCAwLCAwICk7CgoJCX0gZWxzZSB7CgoJCQlfYXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7CgoJCQl2YXIgcmFkaWFucyA9IE1hdGguYWNvcyggZGlyLnkgKTsKCgkJCXRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBfYXhpcywgcmFkaWFucyApOwoKCQl9CgoJfTsKCglBcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24gKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApIHsKCgkJaWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSB7IGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7IH0KCQlpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgeyBoZWFkV2lkdGggPSAwLjIgKiBoZWFkTGVuZ3RoOyB9CgoJCXRoaXMubGluZS5zY2FsZS5zZXQoIDEsIE1hdGgubWF4KCAwLjAwMDEsIGxlbmd0aCAtIGhlYWRMZW5ndGggKSwgMSApOyAvLyBzZWUgIzE3NDU4CgkJdGhpcy5saW5lLnVwZGF0ZU1hdHJpeCgpOwoKCQl0aGlzLmNvbmUuc2NhbGUuc2V0KCBoZWFkV2lkdGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApOwoJCXRoaXMuY29uZS5wb3NpdGlvbi55ID0gbGVuZ3RoOwoJCXRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTsKCgl9OwoKCUFycm93SGVscGVyLnByb3RvdHlwZS5zZXRDb2xvciA9IGZ1bmN0aW9uICggY29sb3IgKSB7CgoJCXRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoIGNvbG9yICk7CgkJdGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTsKCgl9OwoKCUFycm93SGVscGVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7CgoJCU9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgZmFsc2UgKTsKCgkJdGhpcy5saW5lLmNvcHkoIHNvdXJjZS5saW5lICk7CgkJdGhpcy5jb25lLmNvcHkoIHNvdXJjZS5jb25lICk7CgoJCXJldHVybiB0aGlzOwoKCX07CgoJQXJyb3dIZWxwZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkgewoKCQlyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7CgoJfTsKCgkvKioKCSAqIEBhdXRob3Igc3JvdWNoZXJheSAvIGh0dHA6Ly9zcm91Y2hlcmF5Lm9yZy8KCSAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vCgkgKi8KCglmdW5jdGlvbiBBeGVzSGVscGVyKCBzaXplICkgewoKCQlzaXplID0gc2l6ZSB8fCAxOwoKCQl2YXIgdmVydGljZXMgPSBbCgkJCTAsIDAsIDAsCXNpemUsIDAsIDAsCgkJCTAsIDAsIDAsCTAsIHNpemUsIDAsCgkJCTAsIDAsIDAsCTAsIDAsIHNpemUKCQldOwoKCQl2YXIgY29sb3JzID0gWwoJCQkxLCAwLCAwLAkxLCAwLjYsIDAsCgkJCTAsIDEsIDAsCTAuNiwgMSwgMCwKCQkJMCwgMCwgMSwJMCwgMC42LCAxCgkJXTsKCgkJdmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7CgkJZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApOwoJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7CgoJCXZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IFZlcnRleENvbG9ycyB9ICk7CgoJCUxpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgl9CgoJQXhlc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7CglBeGVzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEF4ZXNIZWxwZXI7CgoJLyoqCgkgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwoJICovCgoJZnVuY3Rpb24gRmFjZTQoIGEsIGIsIGMsIGQsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2U0IGhhcyBiZWVuIHJlbW92ZWQuIEEgVEhSRUUuRmFjZTMgd2lsbCBiZSBjcmVhdGVkIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKTsKCgl9CgoJdmFyIExpbmVTdHJpcCA9IDA7CgoJdmFyIExpbmVQaWVjZXMgPSAxOwoKCWZ1bmN0aW9uIE1lc2hGYWNlTWF0ZXJpYWwoIG1hdGVyaWFscyApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuTWVzaEZhY2VNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG1hdGVyaWFsczsKCgl9CgoJZnVuY3Rpb24gTXVsdGlNYXRlcmlhbCggbWF0ZXJpYWxzICkgewoKCQlpZiAoIG1hdGVyaWFscyA9PT0gdW5kZWZpbmVkICkgeyBtYXRlcmlhbHMgPSBbXTsgfQoKCQljb25zb2xlLndhcm4oICdUSFJFRS5NdWx0aU1hdGVyaWFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhbiBBcnJheSBpbnN0ZWFkLicgKTsKCQltYXRlcmlhbHMuaXNNdWx0aU1hdGVyaWFsID0gdHJ1ZTsKCQltYXRlcmlhbHMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzOwoJCW1hdGVyaWFscy5jbG9uZSA9IGZ1bmN0aW9uICgpIHsKCgkJCXJldHVybiBtYXRlcmlhbHMuc2xpY2UoKTsKCgkJfTsKCQlyZXR1cm4gbWF0ZXJpYWxzOwoKCX0KCglmdW5jdGlvbiBQb2ludENsb3VkKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHMuJyApOwoJCXJldHVybiBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgl9CgoJZnVuY3Rpb24gUGFydGljbGUoIG1hdGVyaWFsICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlNwcml0ZS4nICk7CgkJcmV0dXJuIG5ldyBTcHJpdGUoIG1hdGVyaWFsICk7CgoJfQoKCWZ1bmN0aW9uIFBhcnRpY2xlU3lzdGVtKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTsKCQlyZXR1cm4gbmV3IFBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJfQoKCWZ1bmN0aW9uIFBvaW50Q2xvdWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApOwoJCXJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTsKCgl9CgoJZnVuY3Rpb24gUGFydGljbGVCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7CgkJcmV0dXJuIG5ldyBQb2ludHNNYXRlcmlhbCggcGFyYW1ldGVycyApOwoKCX0KCglmdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApOwoJCXJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTsKCgl9CgoJZnVuY3Rpb24gVmVydGV4KCB4LCB5LCB6ICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5WZXJ0ZXggaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLlZlY3RvcjMgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBWZWN0b3IzKCB4LCB5LCB6ICk7CgoJfQoKCS8vCgoJZnVuY3Rpb24gRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCkuc2V0RHluYW1pYyggdHJ1ZSApIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKS5zZXREeW5hbWljKCB0cnVlICk7CgoJfQoKCWZ1bmN0aW9uIEludDhBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuSW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTsKCQlyZXR1cm4gbmV3IEludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApOwoKCX0KCglmdW5jdGlvbiBVaW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5VaW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBVaW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7CgoJfQoKCWZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5VaW50OENsYW1wZWRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTsKCQlyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7CgoJfQoKCWZ1bmN0aW9uIEludDE2QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MTZCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTsKCQlyZXR1cm4gbmV3IEludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTsKCgl9CgoJZnVuY3Rpb24gVWludDE2QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTsKCgl9CgoJZnVuY3Rpb24gSW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgSW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApOwoKCX0KCglmdW5jdGlvbiBVaW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApOwoKCX0KCglmdW5jdGlvbiBGbG9hdDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTsKCgl9CgoJZnVuY3Rpb24gRmxvYXQ2NEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5GbG9hdDY0QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7CgoJfQoKCS8vCgoJQ3VydmUuY3JlYXRlID0gZnVuY3Rpb24gKCBjb25zdHJ1Y3QsIGdldFBvaW50ICkgewoKCQljb25zb2xlLmxvZyggJ1RIUkVFLkN1cnZlLmNyZWF0ZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQnICk7CgoJCWNvbnN0cnVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTsKCQljb25zdHJ1Y3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0OwoJCWNvbnN0cnVjdC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBnZXRQb2ludDsKCgkJcmV0dXJuIGNvbnN0cnVjdDsKCgl9OwoKCS8vCgoJT2JqZWN0LmFzc2lnbiggQ3VydmVQYXRoLnByb3RvdHlwZSwgewoKCQljcmVhdGVQb2ludHNHZW9tZXRyeTogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicgKTsKCgkJCS8vIGdlbmVyYXRlIGdlb21ldHJ5IGZyb20gcGF0aCBwb2ludHMgKGZvciBMaW5lIG9yIFBvaW50cyBvYmplY3RzKQoKCQkJdmFyIHB0cyA9IHRoaXMuZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKTsKCQkJcmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoIHB0cyApOwoKCQl9LAoKCQljcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeTogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicgKTsKCgkJCS8vIGdlbmVyYXRlIGdlb21ldHJ5IGZyb20gZXF1aWRpc3RhbnQgc2FtcGxpbmcgYWxvbmcgdGhlIHBhdGgKCgkJCXZhciBwdHMgPSB0aGlzLmdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zICk7CgkJCXJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KCBwdHMgKTsKCgkJfSwKCgkJY3JlYXRlR2VvbWV0cnk6IGZ1bmN0aW9uICggcG9pbnRzICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7CgoJCQl2YXIgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoKTsKCgkJCWZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBwb2ludCA9IHBvaW50c1sgaSBdOwoJCQkJZ2VvbWV0cnkudmVydGljZXMucHVzaCggbmV3IFZlY3RvcjMoIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApICk7CgoJCQl9CgoJCQlyZXR1cm4gZ2VvbWV0cnk7CgoJCX0KCgl9ICk7CgoJLy8KCglPYmplY3QuYXNzaWduKCBQYXRoLnByb3RvdHlwZSwgewoKCQlmcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlBhdGg6IC5mcm9tUG9pbnRzKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVBvaW50cygpLicgKTsKCQkJcmV0dXJuIHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7CgoJCX0KCgl9ICk7CgoJLy8KCglmdW5jdGlvbiBDbG9zZWRTcGxpbmVDdXJ2ZTMoIHBvaW50cyApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuQ2xvc2VkU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyApOwoKCQlDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApOwoJCXRoaXMudHlwZSA9ICdjYXRtdWxscm9tJzsKCQl0aGlzLmNsb3NlZCA9IHRydWU7CgoJfQoKCUNsb3NlZFNwbGluZUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSApOwoKCS8vCgoJZnVuY3Rpb24gU3BsaW5lQ3VydmUzKCBwb2ludHMgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTsKCgkJQ2F0bXVsbFJvbUN1cnZlMy5jYWxsKCB0aGlzLCBwb2ludHMgKTsKCQl0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7CgoJfQoKCVNwbGluZUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSApOwoKCS8vCgoJZnVuY3Rpb24gU3BsaW5lKCBwb2ludHMgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTsKCgkJQ2F0bXVsbFJvbUN1cnZlMy5jYWxsKCB0aGlzLCBwb2ludHMgKTsKCQl0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7CgoJfQoKCVNwbGluZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSApOwoKCU9iamVjdC5hc3NpZ24oIFNwbGluZS5wcm90b3R5cGUsIHsKCgkJaW5pdEZyb21BcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLmluaXRGcm9tQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQlnZXRDb250cm9sUG9pbnRzQXJyYXk6IGZ1bmN0aW9uICggLyogb3B0aW9uYWxUYXJnZXQgKi8gKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAuZ2V0Q29udHJvbFBvaW50c0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJcmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoOiBmdW5jdGlvbiAoIC8qIHNhbXBsaW5nQ29lZiAqLyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5yZXBhcmFtZXRyaXplQnlBcmNMZW5ndGgoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfQoKCX0gKTsKCgkvLwoKCWZ1bmN0aW9uIEF4aXNIZWxwZXIoIHNpemUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLicgKTsKCQlyZXR1cm4gbmV3IEF4ZXNIZWxwZXIoIHNpemUgKTsKCgl9CgoJZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJvdW5kaW5nQm94SGVscGVyIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIENyZWF0aW5nIGEgVEhSRUUuQm94SGVscGVyIGluc3RlYWQuJyApOwoJCXJldHVybiBuZXcgQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICk7CgoJfQoKCWZ1bmN0aW9uIEVkZ2VzSGVscGVyKCBvYmplY3QsIGhleCApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuRWRnZXNIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkVkZ2VzR2VvbWV0cnkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBFZGdlc0dlb21ldHJ5KCBvYmplY3QuZ2VvbWV0cnkgKSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmZmZmZmIH0gKSApOwoKCX0KCglHcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoKSB7CgoJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApOwoKCX07CgoJU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCgkJY29uc29sZS5lcnJvciggJ1RIUkVFLlNrZWxldG9uSGVscGVyOiB1cGRhdGUoKSBubyBsb25nZXIgbmVlZHMgdG8gYmUgY2FsbGVkLicgKTsKCgl9OwoKCWZ1bmN0aW9uIFdpcmVmcmFtZUhlbHBlciggb2JqZWN0LCBoZXggKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLldpcmVmcmFtZUhlbHBlciBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBXaXJlZnJhbWVHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTsKCgl9CgoJLy8KCglPYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7CgoJCWV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAoIHVybCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxvYWRlcjogLmV4dHJhY3RVcmxCYXNlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCkgaW5zdGVhZC4nICk7CgkJCXJldHVybiBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7CgoJCX0KCgl9ICk7CgoJTG9hZGVyLkhhbmRsZXJzID0gewoKCQlhZGQ6IGZ1bmN0aW9uICggLyogcmVnZXgsIGxvYWRlciAqLyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5Mb2FkZXI6IEhhbmRsZXJzLmFkZCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBMb2FkaW5nTWFuYWdlci5hZGRIYW5kbGVyKCkgaW5zdGVhZC4nICk7CgoJCX0sCgoJCWdldDogZnVuY3Rpb24gKCAvKiBmaWxlICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlcjogSGFuZGxlcnMuZ2V0KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIExvYWRpbmdNYW5hZ2VyLmdldEhhbmRsZXIoKSBpbnN0ZWFkLicgKTsKCgkJfQoKCX07CgoJZnVuY3Rpb24gWEhSTG9hZGVyKCBtYW5hZ2VyICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5YSFJMb2FkZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5GaWxlTG9hZGVyLicgKTsKCQlyZXR1cm4gbmV3IEZpbGVMb2FkZXIoIG1hbmFnZXIgKTsKCgl9CgoJZnVuY3Rpb24gQmluYXJ5VGV4dHVyZUxvYWRlciggbWFuYWdlciApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicgKTsKCQlyZXR1cm4gbmV3IERhdGFUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICk7CgoJfQoKCU9iamVjdC5hc3NpZ24oIE9iamVjdExvYWRlci5wcm90b3R5cGUsIHsKCgkJc2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IC5zZXRUZXh0dXJlUGF0aCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldFJlc291cmNlUGF0aCgpLicgKTsKCQkJcmV0dXJuIHRoaXMuc2V0UmVzb3VyY2VQYXRoKCB2YWx1ZSApOwoKCQl9CgoJfSApOwoKCS8vCgoJT2JqZWN0LmFzc2lnbiggQm94Mi5wcm90b3R5cGUsIHsKCgkJY2VudGVyOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTsKCQkJcmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApOwoKCQl9LAoJCWVtcHR5OiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZW1wdHkoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pc0VtcHR5KCkuJyApOwoJCQlyZXR1cm4gdGhpcy5pc0VtcHR5KCk7CgoJCX0sCgkJaXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTsKCQkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7CgoJCX0sCgkJc2l6ZTogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLicgKTsKCQkJcmV0dXJuIHRoaXMuZ2V0U2l6ZSggb3B0aW9uYWxUYXJnZXQgKTsKCgkJfQoJfSApOwoKCU9iamVjdC5hc3NpZ24oIEJveDMucHJvdG90eXBlLCB7CgoJCWNlbnRlcjogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTsKCgkJfSwKCQllbXB0eTogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTsKCQkJcmV0dXJuIHRoaXMuaXNFbXB0eSgpOwoKCQl9LAoJCWlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7CgkJCXJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApOwoKCQl9LAoJCWlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7CgkJCXJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApOwoKCQl9LAoJCXNpemU6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7CgoJCX0KCX0gKTsKCglMaW5lMy5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7CgkJcmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApOwoKCX07CgoJT2JqZWN0LmFzc2lnbiggX01hdGgsIHsKCgkJcmFuZG9tMTY6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5yYW5kb20xNigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBNYXRoLnJhbmRvbSgpIGluc3RlYWQuJyApOwoJCQlyZXR1cm4gTWF0aC5yYW5kb20oKTsKCgkJfSwKCgkJbmVhcmVzdFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRoOiAubmVhcmVzdFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mbG9vclBvd2VyT2ZUd28oKS4nICk7CgkJCXJldHVybiBfTWF0aC5mbG9vclBvd2VyT2ZUd28oIHZhbHVlICk7CgoJCX0sCgoJCW5leHRQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLm5leHRQb3dlck9mVHdvKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY2VpbFBvd2VyT2ZUd28oKS4nICk7CgkJCXJldHVybiBfTWF0aC5jZWlsUG93ZXJPZlR3byggdmFsdWUgKTsKCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBNYXRyaXgzLnByb3RvdHlwZSwgewoKCQlmbGF0dGVuVG9BcnJheU9mZnNldDogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAiVEhSRUUuTWF0cml4MzogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC4iICk7CgkJCXJldHVybiB0aGlzLnRvQXJyYXkoIGFycmF5LCBvZmZzZXQgKTsKCgkJfSwKCQltdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDMoIHRoaXMgKTsKCgkJfSwKCQltdWx0aXBseVZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCWFwcGx5VG9CdWZmZXI6IGZ1bmN0aW9uICggYnVmZmVyIC8qLCBvZmZzZXQsIGxlbmd0aCAqLyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvQnVmZmVyKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYnVmZmVyICk7CgoJCX0sCgkJYXBwbHlUb1ZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBNYXRyaXg0LnByb3RvdHlwZSwgewoKCQlleHRyYWN0UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5leHRyYWN0UG9zaXRpb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jb3B5UG9zaXRpb24oKS4nICk7CgkJCXJldHVybiB0aGlzLmNvcHlQb3NpdGlvbiggbSApOwoKCQl9LAoJCWZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICJUSFJFRS5NYXRyaXg0OiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLiIgKTsKCQkJcmV0dXJuIHRoaXMudG9BcnJheSggYXJyYXksIG9mZnNldCApOwoKCQl9LAoJCWdldFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuJyApOwoJCQlyZXR1cm4gbmV3IFZlY3RvcjMoKS5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAzICk7CgoJCX0sCgkJc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLicgKTsKCQkJcmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTsKCgkJfSwKCQltdWx0aXBseVRvQXJyYXk6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQltdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTsKCgkJfSwKCQltdWx0aXBseVZlY3RvcjQ6IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTsKCgkJfSwKCQltdWx0aXBseVZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXJvdGF0ZUF4aXM6IGZ1bmN0aW9uICggdiApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicgKTsKCQkJdi50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMgKTsKCgkJfSwKCQljcm9zc1ZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7CgkJCXJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7CgoJCX0sCgkJdHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXJvdGF0ZVg6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXJvdGF0ZVk6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXJvdGF0ZVo6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXJvdGF0ZUJ5QXhpczogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQlhcHBseVRvQnVmZmVyOiBmdW5jdGlvbiAoIGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC4nICk7CgkJCXJldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGJ1ZmZlciApOwoKCQl9LAoJCWFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJbWFrZUZydXN0dW06IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZUZydXN0dW0oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApOwoKCQl9CgoJfSApOwoKCVBsYW5lLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkxpbmUgPSBmdW5jdGlvbiAoIGxpbmUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLlBsYW5lOiAuaXNJbnRlcnNlY3Rpb25MaW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0xpbmUoKS4nICk7CgkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c0xpbmUoIGxpbmUgKTsKCgl9OwoKCVF1YXRlcm5pb24ucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yMyA9IGZ1bmN0aW9uICggdmVjdG9yICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC4nICk7CgkJcmV0dXJuIHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHRoaXMgKTsKCgl9OwoKCU9iamVjdC5hc3NpZ24oIFJheS5wcm90b3R5cGUsIHsKCgkJaXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApOwoJCQlyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTsKCgkJfSwKCQlpc0ludGVyc2VjdGlvblBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25QbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNQbGFuZSgpLicgKTsKCQkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApOwoKCQl9LAoJCWlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLicgKTsKCQkJcmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7CgoJCWFyZWE6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYXJlYSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEFyZWEoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldEFyZWEoKTsKCgkJfSwKCQliYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApOwoJCQlyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKTsKCgkJfSwKCQltaWRwb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm1pZHBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0TWlkcG9pbnQoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldE1pZHBvaW50KCB0YXJnZXQgKTsKCgkJfSwKCQlub3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5ub3JtYWwoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXROb3JtYWwoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldE5vcm1hbCggdGFyZ2V0ICk7CgoJCX0sCgkJcGxhbmU6IGZ1bmN0aW9uICggdGFyZ2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5wbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFBsYW5lKCkuJyApOwoJCQlyZXR1cm4gdGhpcy5nZXRQbGFuZSggdGFyZ2V0ICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHsKCgkJYmFyeWNvb3JkRnJvbVBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicgKTsKCQkJcmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApOwoKCQl9LAoJCW5vcm1hbDogZnVuY3Rpb24gKCBhLCBiLCBjLCB0YXJnZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm5vcm1hbCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE5vcm1hbCgpLicgKTsKCQkJcmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggU2hhcGUucHJvdG90eXBlLCB7CgoJCWV4dHJhY3RBbGxQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5leHRyYWN0QWxsUG9pbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5leHRyYWN0UG9pbnRzKCkgaW5zdGVhZC4nICk7CgkJCXJldHVybiB0aGlzLmV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApOwoKCQl9LAoJCWV4dHJ1ZGU6IGZ1bmN0aW9uICggb3B0aW9ucyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIHRoaXMsIG9wdGlvbnMgKTsKCgkJfSwKCQltYWtlR2VvbWV0cnk6IGZ1bmN0aW9uICggb3B0aW9ucyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAubWFrZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFNoYXBlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTsKCQkJcmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KCB0aGlzLCBvcHRpb25zICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggVmVjdG9yMi5wcm90b3R5cGUsIHsKCgkJZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7CgkJCXJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApOwoKCQl9LAoJCWRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICggdiApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicgKTsKCQkJcmV0dXJuIHRoaXMubWFuaGF0dGFuRGlzdGFuY2VUbyggdiApOwoKCQl9LAoJCWxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicgKTsKCQkJcmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggVmVjdG9yMy5wcm90b3R5cGUsIHsKCgkJc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC4nICk7CgoJCX0sCgkJc2V0RXVsZXJGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC4nICk7CgoJCX0sCgkJZ2V0UG9zaXRpb25Gcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0UG9zaXRpb25Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCkuJyApOwoJCQlyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKTsKCgkJfSwKCQlnZXRTY2FsZUZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRTY2FsZUZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4U2NhbGUoKS4nICk7CgkJCXJldHVybiB0aGlzLnNldEZyb21NYXRyaXhTY2FsZSggbSApOwoKCQl9LAoJCWdldENvbHVtbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRDb2x1bW5Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeENvbHVtbigpLicgKTsKCQkJcmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbWF0cml4LCBpbmRleCApOwoKCQl9LAoJCWFwcGx5UHJvamVjdGlvbjogZnVuY3Rpb24gKCBtICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5UHJvamVjdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuYXBwbHlNYXRyaXg0KCBtICkgaW5zdGVhZC4nICk7CgkJCXJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbSApOwoKCQl9LAoJCWZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApOwoJCQlyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTsKCgkJfSwKCQlkaXN0YW5jZVRvTWFuaGF0dGFuOiBmdW5jdGlvbiAoIHYgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nICk7CgkJCXJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTsKCgkJfSwKCQlsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7CgkJCXJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpOwoKCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIFZlY3RvcjQucHJvdG90eXBlLCB7CgoJCWZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApOwoJCQlyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTsKCgkJfSwKCQlsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7CgkJCXJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpOwoKCQl9CgoJfSApOwoKCS8vCgoJT2JqZWN0LmFzc2lnbiggR2VvbWV0cnkucHJvdG90eXBlLCB7CgoJCWNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJY29tcHV0ZUxpbmVEaXN0YW5jZXM6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5HZW9tZXRyeTogLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkxpbmUuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBpbnN0ZWFkLicgKTsKCgkJfQoKCX0gKTsKCglPYmplY3QuYXNzaWduKCBPYmplY3QzRC5wcm90b3R5cGUsIHsKCgkJZ2V0Q2hpbGRCeU5hbWU6IGZ1bmN0aW9uICggbmFtZSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0Q2hpbGRCeU5hbWUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRPYmplY3RCeU5hbWUoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZSggbmFtZSApOwoKCQl9LAoJCXJlbmRlckRlcHRoOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnJlbmRlckRlcHRoIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAucmVuZGVyT3JkZXIsIGluc3RlYWQuJyApOwoKCQl9LAoJCXRyYW5zbGF0ZTogZnVuY3Rpb24gKCBkaXN0YW5jZSwgYXhpcyApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC50cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkgaW5zdGVhZC4nICk7CgkJCXJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKTsKCgkJfSwKCQlnZXRXb3JsZFJvdGF0aW9uOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7CgoJCX0KCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE9iamVjdDNELnByb3RvdHlwZSwgewoKCQlldWxlck9yZGVyOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTsKCQkJCXJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTsKCQkJCXRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXVzZVF1YXRlcm5pb246IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApOwoKCQkJfQoJCX0KCgl9ICk7CgoJT2JqZWN0LmFzc2lnbiggTWVzaC5wcm90b3R5cGUsIHsKCgkJc2V0RHJhd01vZGU6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoOiAuc2V0RHJhd01vZGUoKSBoYXMgYmVlbiByZW1vdmVkLiBUaGUgcmVuZGVyZXIgbm93IGFsd2F5cyBhc3N1bWVzIFRIUkVFLlRyaWFuZ2xlc0RyYXdNb2RlLiBUcmFuc2Zvcm0geW91ciBnZW9tZXRyeSB2aWEgQnVmZmVyR2VvbWV0cnlVdGlscy50b1RyaWFuZ2xlc0RyYXdNb2RlKCkgaWYgbmVjZXNzYXJ5LicgKTsKCgkJfSwKCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1lc2gucHJvdG90eXBlLCB7CgoJCWRyYXdNb2RlOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoOiAuZHJhd01vZGUgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4nICk7CgkJCQlyZXR1cm4gVHJpYW5nbGVzRHJhd01vZGU7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaDogLmRyYXdNb2RlIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSByZW5kZXJlciBub3cgYWx3YXlzIGFzc3VtZXMgVEhSRUUuVHJpYW5nbGVzRHJhd01vZGUuIFRyYW5zZm9ybSB5b3VyIGdlb21ldHJ5IHZpYSBCdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKSBpZiBuZWNlc3NhcnkuJyApOwoKCQkJfQoJCX0KCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIExPRC5wcm90b3R5cGUsIHsKCgkJb2JqZWN0czogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5MT0Q6IC5vYmplY3RzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmxldmVscy4nICk7CgkJCQlyZXR1cm4gdGhpcy5sZXZlbHM7CgoJCQl9CgkJfQoKCX0gKTsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoIFNrZWxldG9uLnByb3RvdHlwZSwgJ3VzZVZlcnRleFRleHR1cmUnLCB7CgoJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfQoKCX0gKTsKCglTa2lubmVkTWVzaC5wcm90b3R5cGUuaW5pdEJvbmVzID0gZnVuY3Rpb24gKCkgewoKCQljb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2g6IGluaXRCb25lcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCX07CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdXJ2ZS5wcm90b3R5cGUsICdfX2FyY0xlbmd0aERpdmlzaW9ucycsIHsKCgkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicgKTsKCQkJcmV0dXJuIHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zOwoKCQl9LAoJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuJyApOwoJCQl0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHZhbHVlOwoKCQl9CgoJfSApOwoKCS8vCgoJUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnNldExlbnMgPSBmdW5jdGlvbiAoIGZvY2FsTGVuZ3RoLCBmaWxtR2F1Z2UgKSB7CgoJCWNvbnNvbGUud2FybiggIlRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnNldExlbnMgaXMgZGVwcmVjYXRlZC4gIiArCgkJCQkiVXNlIC5zZXRGb2NhbExlbmd0aCBhbmQgLmZpbG1HYXVnZSBmb3IgYSBwaG90b2dyYXBoaWMgc2V0dXAuIiApOwoKCQlpZiAoIGZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgeyB0aGlzLmZpbG1HYXVnZSA9IGZpbG1HYXVnZTsgfQoJCXRoaXMuc2V0Rm9jYWxMZW5ndGgoIGZvY2FsTGVuZ3RoICk7CgoJfTsKCgkvLwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMaWdodC5wcm90b3R5cGUsIHsKCQlvbmx5U2hhZG93OiB7CgkJCXNldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAub25seVNoYWRvdyBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCX0KCQl9LAoJCXNoYWRvd0NhbWVyYUZvdjogewoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi4nICk7CgkJCQl0aGlzLnNoYWRvdy5jYW1lcmEuZm92ID0gdmFsdWU7CgoJCQl9CgkJfSwKCQlzaGFkb3dDYW1lcmFMZWZ0OiB7CgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUxlZnQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmxlZnQuJyApOwoJCQkJdGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXNoYWRvd0NhbWVyYVJpZ2h0OiB7CgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVJpZ2h0IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5yaWdodC4nICk7CgkJCQl0aGlzLnNoYWRvdy5jYW1lcmEucmlnaHQgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXNoYWRvd0NhbWVyYVRvcDogewoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC4nICk7CgkJCQl0aGlzLnNoYWRvdy5jYW1lcmEudG9wID0gdmFsdWU7CgoJCQl9CgkJfSwKCQlzaGFkb3dDYW1lcmFCb3R0b206IHsKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhQm90dG9tIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5ib3R0b20uJyApOwoJCQkJdGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJc2hhZG93Q2FtZXJhTmVhcjogewoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFOZWFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5uZWFyLicgKTsKCQkJCXRoaXMuc2hhZG93LmNhbWVyYS5uZWFyID0gdmFsdWU7CgoJCQl9CgkJfSwKCQlzaGFkb3dDYW1lcmFGYXI6IHsKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuJyApOwoJCQkJdGhpcy5zaGFkb3cuY2FtZXJhLmZhciA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJc2hhZG93Q2FtZXJhVmlzaWJsZTogewoJCQlzZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVZpc2libGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoIGxpZ2h0LnNoYWRvdy5jYW1lcmEgKSBpbnN0ZWFkLicgKTsKCgkJCX0KCQl9LAoJCXNoYWRvd0JpYXM6IHsKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93QmlhcyBpcyBub3cgLnNoYWRvdy5iaWFzLicgKTsKCQkJCXRoaXMuc2hhZG93LmJpYXMgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXNoYWRvd0RhcmtuZXNzOiB7CgkJCXNldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93RGFya25lc3MgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCQl9CgkJfSwKCQlzaGFkb3dNYXBXaWR0aDogewoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBXaWR0aCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLndpZHRoLicgKTsKCQkJCXRoaXMuc2hhZG93Lm1hcFNpemUud2lkdGggPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXNoYWRvd01hcEhlaWdodDogewoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBIZWlnaHQgaXMgbm93IC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQuJyApOwoJCQkJdGhpcy5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSB2YWx1ZTsKCgkJCX0KCQl9Cgl9ICk7CgoJLy8KCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwgewoKCQlsZW5ndGg6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7CgoJCQl9CgkJfSwKCQlkeW5hbWljOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmR5bmFtaWMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC51c2FnZSBpbnN0ZWFkLicgKTsKCQkJCXJldHVybiB0aGlzLnVzYWdlID09PSBEeW5hbWljRHJhd1VzYWdlOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmR5bmFtaWMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC51c2FnZSBpbnN0ZWFkLicgKTsKCQkJCXRoaXMuc2V0VXNhZ2UoIER5bmFtaWNEcmF3VXNhZ2UgKTsKCgkJCX0KCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHsKCQlzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuc2V0RHluYW1pYygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0VXNhZ2UoKSBpbnN0ZWFkLicgKTsKCQkJdGhpcy5zZXRVc2FnZSggdmFsdWUgPT09IHRydWUgPyBEeW5hbWljRHJhd1VzYWdlIDogU3RhdGljRHJhd1VzYWdlICk7CgkJCXJldHVybiB0aGlzOwoKCQl9LAoJCWNvcHlJbmRpY2VzQXJyYXk6IGZ1bmN0aW9uICggLyogaW5kaWNlcyAqLyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5jb3B5SW5kaWNlc0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJc2V0QXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXkgKi8gKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuc2V0QXJyYXkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEJ1ZmZlckdlb21ldHJ5IC5zZXRBdHRyaWJ1dGUgdG8gcmVwbGFjZS9yZXNpemUgYXR0cmlidXRlIGJ1ZmZlcnMnICk7CgoJCX0KCX0gKTsKCglPYmplY3QuYXNzaWduKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHsKCgkJYWRkSW5kZXg6IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEluZGV4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0SW5kZXgoKS4nICk7CgkJCXRoaXMuc2V0SW5kZXgoIGluZGV4ICk7CgoJCX0sCgkJYWRkQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUsIGF0dHJpYnV0ZSApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0QXR0cmlidXRlKCkuJyApOwoKCQkJaWYgKCAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0J1ZmZlckF0dHJpYnV0ZSApICYmICEgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEF0dHJpYnV0ZSgpIG5vdyBleHBlY3RzICggbmFtZSwgYXR0cmlidXRlICkuJyApOwoKCQkJCXJldHVybiB0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJndW1lbnRzWyAxIF0sIGFyZ3VtZW50c1sgMiBdICkgKTsKCgkJCX0KCgkJCWlmICggbmFtZSA9PT0gJ2luZGV4JyApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5hZGRBdHRyaWJ1dGU6IFVzZSAuc2V0SW5kZXgoKSBmb3IgaW5kZXggYXR0cmlidXRlLicgKTsKCQkJCXRoaXMuc2V0SW5kZXgoIGF0dHJpYnV0ZSApOwoKCQkJCXJldHVybiB0aGlzOwoKCQkJfQoKCQkJcmV0dXJuIHRoaXMuc2V0QXR0cmlidXRlKCBuYW1lLCBhdHRyaWJ1dGUgKTsKCgkJfSwKCQlhZGREcmF3Q2FsbDogZnVuY3Rpb24gKCBzdGFydCwgY291bnQsIGluZGV4T2Zmc2V0ICkgewoKCQkJaWYgKCBpbmRleE9mZnNldCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBubyBsb25nZXIgc3VwcG9ydHMgaW5kZXhPZmZzZXQuJyApOwoKCQkJfQoJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgaXMgbm93IC5hZGRHcm91cCgpLicgKTsKCQkJdGhpcy5hZGRHcm91cCggc3RhcnQsIGNvdW50ICk7CgoJCX0sCgkJY2xlYXJEcmF3Q2FsbHM6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY2xlYXJEcmF3Q2FsbHMoKSBpcyBub3cgLmNsZWFyR3JvdXBzKCkuJyApOwoJCQl0aGlzLmNsZWFyR3JvdXBzKCk7CgoJCX0sCgkJY29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCWNvbXB1dGVPZmZzZXRzOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJcmVtb3ZlQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLnJlbW92ZUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmRlbGV0ZUF0dHJpYnV0ZSgpLicgKTsKCgkJCXJldHVybiB0aGlzLmRlbGV0ZUF0dHJpYnV0ZSggbmFtZSApOwoKCQl9Cgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSwgewoKCQlkcmF3Y2FsbHM6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7CgkJCQlyZXR1cm4gdGhpcy5ncm91cHM7CgoJCQl9CgkJfSwKCQlvZmZzZXRzOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAub2Zmc2V0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuJyApOwoJCQkJcmV0dXJuIHRoaXMuZ3JvdXBzOwoKCQkJfQoJCX0KCgl9ICk7CgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwgewoKCQlkeW5hbWljOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkludGVybGVhdmVkQnVmZmVyOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudXNhZ2UgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpcy51c2FnZSA9PT0gRHluYW1pY0RyYXdVc2FnZTsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApOwoJCQkJdGhpcy5zZXRVc2FnZSggdmFsdWUgKTsKCgkJCX0KCQl9CgoJfSApOwoKCU9iamVjdC5hc3NpZ24oIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwgewoJCXNldER5bmFtaWM6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLnNldER5bmFtaWMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNldFVzYWdlKCkgaW5zdGVhZC4nICk7CgkJCXRoaXMuc2V0VXNhZ2UoIHZhbHVlID09PSB0cnVlID8gRHluYW1pY0RyYXdVc2FnZSA6IFN0YXRpY0RyYXdVc2FnZSApOwoJCQlyZXR1cm4gdGhpczsKCgkJfSwKCQlzZXRBcnJheTogZnVuY3Rpb24gKCAvKiBhcnJheSAqLyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLnNldEFycmF5IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBCdWZmZXJHZW9tZXRyeSAuc2V0QXR0cmlidXRlIHRvIHJlcGxhY2UvcmVzaXplIGF0dHJpYnV0ZSBidWZmZXJzJyApOwoKCQl9Cgl9ICk7CgoJLy8KCglPYmplY3QuYXNzaWduKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7CgoJCWdldEFycmF5czogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogLmdldEFycmF5cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoKCQlhZGRTaGFwZUxpc3Q6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZUxpc3QoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCgkJYWRkU2hhcGU6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9CgoJfSApOwoKCS8vCgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFVuaWZvcm0ucHJvdG90eXBlLCB7CgoJCWR5bmFtaWM6IHsKCQkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLmR5bmFtaWMgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApOwoKCQkJfQoJCX0sCgkJb25VcGRhdGU6IHsKCQkJdmFsdWU6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiAub25VcGRhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCQl9CgoJfSApOwoKCS8vCgoJT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1hdGVyaWFsLnByb3RvdHlwZSwgewoKCQl3cmFwQXJvdW5kOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAud3JhcEFyb3VuZCBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAud3JhcEFyb3VuZCBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCX0KCQl9LAoKCQlvdmVyZHJhdzogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLm92ZXJkcmF3IGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC5vdmVyZHJhdyBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCX0KCQl9LAoKCQl3cmFwUkdCOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAud3JhcFJHQiBoYXMgYmVlbiByZW1vdmVkLicgKTsKCQkJCXJldHVybiBuZXcgQ29sb3IoKTsKCgkJCX0KCQl9LAoKCQlzaGFkaW5nOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnNoYWRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHRoZSBib29sZWFuIC5mbGF0U2hhZGluZyBpbnN0ZWFkLicgKTsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnNoYWRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHRoZSBib29sZWFuIC5mbGF0U2hhZGluZyBpbnN0ZWFkLicgKTsKCQkJCXRoaXMuZmxhdFNoYWRpbmcgPSAoIHZhbHVlID09PSBGbGF0U2hhZGluZyApOwoKCQkJfQoJCX0sCgoJCXN0ZW5jaWxNYXNrOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc3RlbmNpbE1hc2sgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5zdGVuY2lsRnVuY01hc2sgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpcy5zdGVuY2lsRnVuY01hc2s7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zdGVuY2lsTWFzayBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnN0ZW5jaWxGdW5jTWFzayBpbnN0ZWFkLicgKTsKCQkJCXRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gdmFsdWU7CgoJCQl9CgkJfQoKCX0gKTsKCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLCB7CgoJCW1ldGFsOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIGZhbHNlOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZCcgKTsKCgkJCX0KCQl9CgoJfSApOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUsIHsKCgkJZGVyaXZhdGl2ZXM6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7CgkJCQlyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTsKCQkJCXRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHZhbHVlOwoKCQkJfQoJCX0KCgl9ICk7CgoJLy8KCglPYmplY3QuYXNzaWduKCBXZWJHTFJlbmRlcmVyLnByb3RvdHlwZSwgewoKCQljbGVhclRhcmdldDogZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5jbGVhclRhcmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgYW5kIC5jbGVhcigpIGluc3RlYWQuJyApOwoJCQl0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7CgkJCXRoaXMuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApOwoKCQl9LAoJCWFuaW1hdGU6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYW5pbWF0ZSgpIGlzIG5vdyAuc2V0QW5pbWF0aW9uTG9vcCgpLicgKTsKCQkJdGhpcy5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApOwoKCQl9LAoJCWdldEN1cnJlbnRSZW5kZXJUYXJnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nICk7CgkJCXJldHVybiB0aGlzLmdldFJlbmRlclRhcmdldCgpOwoKCQl9LAoJCWdldE1heEFuaXNvdHJvcHk6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLicgKTsKCQkJcmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTsKCgkJfSwKCQlnZXRQcmVjaXNpb246IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyApOwoJCQlyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uOwoKCQl9LAoJCXJlc2V0R0xTdGF0ZTogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nICk7CgkJCXJldHVybiB0aGlzLnN0YXRlLnJlc2V0KCk7CgoJCX0sCgkJc3VwcG9ydHNGbG9hdFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXCdPRVNfdGV4dHVyZV9mbG9hdFwnICkuJyApOwoJCQlyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApOwoKCQl9LAoJCXN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCcgKS4nICk7CgkJCXJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTsKCgkJfSwKCQlzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wnICkuJyApOwoJCQlyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKTsKCgkJfSwKCQlzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQzogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wnICkuJyApOwoJCQlyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApOwoKCQl9LAoJCXN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQzogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCcgKS4nICk7CgkJCXJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApOwoKCQl9LAoJCXN1cHBvcnRzQmxlbmRNaW5NYXg6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0JsZW5kTWluTWF4KCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXCdFWFRfYmxlbmRfbWlubWF4XCcgKS4nICk7CgkJCXJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTsKCgkJfSwKCQlzdXBwb3J0c1ZlcnRleFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLicgKTsKCQkJcmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzOwoKCQl9LAoJCXN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcJ0FOR0xFX2luc3RhbmNlZF9hcnJheXNcJyApLicgKTsKCQkJcmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApOwoKCQl9LAoJCWVuYWJsZVNjaXNzb3JUZXN0OiBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZW5hYmxlU2Npc3NvclRlc3QoKSBpcyBub3cgLnNldFNjaXNzb3JUZXN0KCkuJyApOwoJCQl0aGlzLnNldFNjaXNzb3JUZXN0KCBib29sZWFuICk7CgoJCX0sCgkJaW5pdE1hdGVyaWFsOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuaW5pdE1hdGVyaWFsKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJYWRkUHJlUGx1Z2luOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUHJlUGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJYWRkUG9zdFBsdWdpbjogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQl1cGRhdGVTaGFkb3dNYXA6IGZ1bmN0aW9uICgpIHsKCgkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC51cGRhdGVTaGFkb3dNYXAoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQlzZXRGYWNlQ3VsbGluZzogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldEZhY2VDdWxsaW5nKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCX0sCgkJYWxsb2NUZXh0dXJlVW5pdDogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFsbG9jVGV4dHVyZVVuaXQoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQlzZXRUZXh0dXJlOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCQl9LAoJCXNldFRleHR1cmVDdWJlOiBmdW5jdGlvbiAoKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZUN1YmUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJfSwKCQlnZXRBY3RpdmVNaXBNYXBMZXZlbDogZnVuY3Rpb24gKCkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldEFjdGl2ZU1pcE1hcExldmVsKCkgaXMgbm93IC5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpLicgKTsKCQkJcmV0dXJuIHRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTsKCgkJfQoKCX0gKTsKCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHsKCgkJc2hhZG93TWFwRW5hYmxlZDogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQlyZXR1cm4gdGhpcy5zaGFkb3dNYXAuZW5hYmxlZDsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwRW5hYmxlZCBpcyBub3cgLnNoYWRvd01hcC5lbmFibGVkLicgKTsKCQkJCXRoaXMuc2hhZG93TWFwLmVuYWJsZWQgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXNoYWRvd01hcFR5cGU6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHRoaXMuc2hhZG93TWFwLnR5cGU7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcFR5cGUgaXMgbm93IC5zaGFkb3dNYXAudHlwZS4nICk7CgkJCQl0aGlzLnNoYWRvd01hcC50eXBlID0gdmFsdWU7CgoJCQl9CgkJfSwKCQlzaGFkb3dNYXBDdWxsRmFjZTogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdW5kZWZpbmVkOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTsKCgkJCX0KCQl9LAoJCWNvbnRleHQ6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmNvbnRleHQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5nZXRDb250ZXh0KCkgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdGhpcy5nZXRDb250ZXh0KCk7CgoJCQl9CgkJfSwKCQl2cjogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAudnIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC54ciBpbnN0ZWFkLicgKTsKCQkJCXJldHVybiB0aGlzLnhyOwoKCQkJfQoJCX0sCgkJZ2FtbWFJbnB1dDogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFJbnB1dCBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgZGVmaW5lIHRoZSBjb3JyZWN0IGNvbG9yIHNwYWNlcyBmb3IgdGV4dHVyZXMgdmlhIFRleHR1cmUuZW5jb2RpbmcgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gZmFsc2U7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFJbnB1dCBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgZGVmaW5lIHRoZSBjb3JyZWN0IGNvbG9yIHNwYWNlcyBmb3IgdGV4dHVyZXMgdmlhIFRleHR1cmUuZW5jb2RpbmcgaW5zdGVhZC4nICk7CgoJCQl9CgkJfQoKCX0gKTsKCglPYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xTaGFkb3dNYXAucHJvdG90eXBlLCB7CgoJCWN1bGxGYWNlOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdW5kZWZpbmVkOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIC8qIGN1bGxGYWNlICovICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgoJCQl9CgkJfSwKCQlyZW5kZXJSZXZlcnNlU2lkZWQ6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgkJCQlyZXR1cm4gdW5kZWZpbmVkOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgoJCQl9CgkJfSwKCQlyZW5kZXJTaW5nbGVTaWRlZDogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApOwoJCQkJcmV0dXJuIHVuZGVmaW5lZDsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyU2luZ2xlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7CgoJCQl9CgkJfQoKCX0gKTsKCgkvLwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLCB7CgoJCWFjdGl2ZUN1YmVGYWNlOiB7CgkJCXNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU6IC5hY3RpdmVDdWJlRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBJdCBpcyBub3cgdGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgV2ViR0xSZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoKS4nICk7CgoJCQl9CgkJfSwKCQlhY3RpdmVNaXBNYXBMZXZlbDogewoJCQlzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlOiAuYWN0aXZlTWlwTWFwTGV2ZWwgaGFzIGJlZW4gcmVtb3ZlZC4gSXQgaXMgbm93IHRoZSB0aGlyZCBwYXJhbWV0ZXIgb2YgV2ViR0xSZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoKS4nICk7CgoJCQl9CgkJfQoKCX0gKTsKCgkvLwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHsKCgkJd3JhcFM6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuJyApOwoJCQkJcmV0dXJuIHRoaXMudGV4dHVyZS53cmFwUzsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7CgkJCQl0aGlzLnRleHR1cmUud3JhcFMgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCXdyYXBUOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTsKCQkJCXJldHVybiB0aGlzLnRleHR1cmUud3JhcFQ7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuJyApOwoJCQkJdGhpcy50ZXh0dXJlLndyYXBUID0gdmFsdWU7CgoJCQl9CgkJfSwKCQltYWdGaWx0ZXI6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7CgkJCQlyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTsKCQkJCXRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCW1pbkZpbHRlcjogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLicgKTsKCQkJCXJldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApOwoJCQkJdGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJYW5pc290cm9weTogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApOwoJCQkJcmV0dXJuIHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5OwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS4nICk7CgkJCQl0aGlzLnRleHR1cmUuYW5pc290cm9weSA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJb2Zmc2V0OiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApOwoJCQkJcmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7CgkJCQl0aGlzLnRleHR1cmUub2Zmc2V0ID0gdmFsdWU7CgoJCQl9CgkJfSwKCQlyZXBlYXQ6IHsKCQkJZ2V0OiBmdW5jdGlvbiAoKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC4nICk7CgkJCQlyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdDsKCgkJCX0sCgkJCXNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTsKCQkJCXRoaXMudGV4dHVyZS5yZXBlYXQgPSB2YWx1ZTsKCgkJCX0KCQl9LAoJCWZvcm1hdDogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTsKCQkJCXJldHVybiB0aGlzLnRleHR1cmUuZm9ybWF0OwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuJyApOwoJCQkJdGhpcy50ZXh0dXJlLmZvcm1hdCA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJdHlwZTogewoJCQlnZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApOwoJCQkJcmV0dXJuIHRoaXMudGV4dHVyZS50eXBlOwoKCQkJfSwKCQkJc2V0OiBmdW5jdGlvbiAoIHZhbHVlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7CgkJCQl0aGlzLnRleHR1cmUudHlwZSA9IHZhbHVlOwoKCQkJfQoJCX0sCgkJZ2VuZXJhdGVNaXBtYXBzOiB7CgkJCWdldDogZnVuY3Rpb24gKCkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuJyApOwoJCQkJcmV0dXJuIHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7CgoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7CgkJCQl0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdmFsdWU7CgoJCQl9CgkJfQoKCX0gKTsKCgkvLwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJWUk1hbmFnZXIucHJvdG90eXBlLCB7CgoJCXN0YW5kaW5nOiB7CgkJCXNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5XZWJWUk1hbmFnZXI6IC5zdGFuZGluZyBoYXMgYmVlbiByZW1vdmVkLicgKTsKCgkJCX0KCQl9LAoJCXVzZXJIZWlnaHQ6IHsKCQkJc2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLldlYlZSTWFuYWdlcjogLnVzZXJIZWlnaHQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJCQl9CgkJfQoKCX0gKTsKCgkvLwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBBdWRpby5wcm90b3R5cGUsIHsKCgkJbG9hZDogewoJCQl2YWx1ZTogZnVuY3Rpb24gKCBmaWxlICkgewoKCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nICk7CgkJCQl2YXIgc2NvcGUgPSB0aGlzOwoJCQkJdmFyIGF1ZGlvTG9hZGVyID0gbmV3IEF1ZGlvTG9hZGVyKCk7CgkJCQlhdWRpb0xvYWRlci5sb2FkKCBmaWxlLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHsKCgkJCQkJc2NvcGUuc2V0QnVmZmVyKCBidWZmZXIgKTsKCgkJCQl9ICk7CgkJCQlyZXR1cm4gdGhpczsKCgkJCX0KCQl9LAoJCXN0YXJ0VGltZTogewoJCQlzZXQ6IGZ1bmN0aW9uICgpIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogLnN0YXJ0VGltZSBpcyBub3cgLnBsYXkoIGRlbGF5ICkuJyApOwoKCQkJfQoJCX0KCgl9ICk7CgoJQXVkaW9BbmFseXNlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW9BbmFseXNlcjogLmdldERhdGEoKSBpcyBub3cgLmdldEZyZXF1ZW5jeURhdGEoKS4nICk7CgkJcmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpOwoKCX07CgoJLy8KCglDdWJlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUgKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkN1YmVDYW1lcmE6IC51cGRhdGVDdWJlTWFwKCkgaXMgbm93IC51cGRhdGUoKS4nICk7CgkJcmV0dXJuIHRoaXMudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTsKCgl9OwoKCS8vCgoJdmFyIEdlb21ldHJ5VXRpbHMgPSB7CgoJCW1lcmdlOiBmdW5jdGlvbiAoIGdlb21ldHJ5MSwgZ2VvbWV0cnkyLCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLm1lcmdlKCkgaGFzIGJlZW4gbW92ZWQgdG8gR2VvbWV0cnkuIFVzZSBnZW9tZXRyeS5tZXJnZSggZ2VvbWV0cnkyLCBtYXRyaXgsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKSBpbnN0ZWFkLicgKTsKCQkJdmFyIG1hdHJpeDsKCgkJCWlmICggZ2VvbWV0cnkyLmlzTWVzaCApIHsKCgkJCQlnZW9tZXRyeTIubWF0cml4QXV0b1VwZGF0ZSAmJiBnZW9tZXRyeTIudXBkYXRlTWF0cml4KCk7CgoJCQkJbWF0cml4ID0gZ2VvbWV0cnkyLm1hdHJpeDsKCQkJCWdlb21ldHJ5MiA9IGdlb21ldHJ5Mi5nZW9tZXRyeTsKCgkJCX0KCgkJCWdlb21ldHJ5MS5tZXJnZSggZ2VvbWV0cnkyLCBtYXRyaXgsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKTsKCgkJfSwKCgkJY2VudGVyOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLmNlbnRlcigpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkuY2VudGVyKCkgaW5zdGVhZC4nICk7CgkJCXJldHVybiBnZW9tZXRyeS5jZW50ZXIoKTsKCgkJfQoKCX07CgoJSW1hZ2VVdGlscy5jcm9zc09yaWdpbiA9IHVuZGVmaW5lZDsKCglJbWFnZVV0aWxzLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuJyApOwoKCQl2YXIgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTsKCQlsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTsKCgkJdmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggdXJsLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApOwoKCQlpZiAoIG1hcHBpbmcgKSB7IHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7IH0KCgkJcmV0dXJuIHRleHR1cmU7CgoJfTsKCglJbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSA9IGZ1bmN0aW9uICggdXJscywgbWFwcGluZywgb25Mb2FkLCBvbkVycm9yICkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTsKCgkJdmFyIGxvYWRlciA9IG5ldyBDdWJlVGV4dHVyZUxvYWRlcigpOwoJCWxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApOwoKCQl2YXIgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmxzLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApOwoKCQlpZiAoIG1hcHBpbmcgKSB7IHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7IH0KCgkJcmV0dXJuIHRleHR1cmU7CgoJfTsKCglJbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSA9IGZ1bmN0aW9uICgpIHsKCgkJY29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7CgoJfTsKCglJbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoKSB7CgoJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLicgKTsKCgl9OwoKCS8vCgoJZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXIoKSB7CgoJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiByZW1vdmVkJyApOwoKCX0KCgkvLwoKCWZ1bmN0aW9uIEpTT05Mb2FkZXIoKSB7CgoJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5KU09OTG9hZGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCX0KCgkvLwoKCXZhciBTY2VuZVV0aWxzID0gewoKCQljcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0OiBmdW5jdGlvbiAoIC8qIGdlb21ldHJ5LCBtYXRlcmlhbHMgKi8gKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycgKTsKCgkJfSwKCgkJZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkgewoKCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnICk7CgoJCX0sCgoJCWF0dGFjaDogZnVuY3Rpb24gKCAvKiBjaGlsZCwgc2NlbmUsIHBhcmVudCAqLyApIHsKCgkJCWNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyApOwoKCQl9CgoJfTsKCgkvLwoKCWZ1bmN0aW9uIExlbnNGbGFyZSgpIHsKCgkJY29uc29sZS5lcnJvciggJ1RIUkVFLkxlbnNGbGFyZSBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvb2JqZWN0cy9MZW5zZmxhcmUuanMnICk7CgoJfQoKCWlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7CgoJCS8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovCgkJX19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ3JlZ2lzdGVyJywgeyBkZXRhaWw6IHsKCQkJcmV2aXNpb246IFJFVklTSU9OLAoJCX0gfSApICk7CgkJLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiAqLwoKCX0KCglleHBvcnRzLkFDRVNGaWxtaWNUb25lTWFwcGluZyA9IEFDRVNGaWxtaWNUb25lTWFwcGluZzsKCWV4cG9ydHMuQWRkRXF1YXRpb24gPSBBZGRFcXVhdGlvbjsKCWV4cG9ydHMuQWRkT3BlcmF0aW9uID0gQWRkT3BlcmF0aW9uOwoJZXhwb3J0cy5BZGRpdGl2ZUJsZW5kaW5nID0gQWRkaXRpdmVCbGVuZGluZzsKCWV4cG9ydHMuQWxwaGFGb3JtYXQgPSBBbHBoYUZvcm1hdDsKCWV4cG9ydHMuQWx3YXlzRGVwdGggPSBBbHdheXNEZXB0aDsKCWV4cG9ydHMuQWx3YXlzU3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYzsKCWV4cG9ydHMuQW1iaWVudExpZ2h0ID0gQW1iaWVudExpZ2h0OwoJZXhwb3J0cy5BbWJpZW50TGlnaHRQcm9iZSA9IEFtYmllbnRMaWdodFByb2JlOwoJZXhwb3J0cy5BbmltYXRpb25DbGlwID0gQW5pbWF0aW9uQ2xpcDsKCWV4cG9ydHMuQW5pbWF0aW9uTG9hZGVyID0gQW5pbWF0aW9uTG9hZGVyOwoJZXhwb3J0cy5BbmltYXRpb25NaXhlciA9IEFuaW1hdGlvbk1peGVyOwoJZXhwb3J0cy5BbmltYXRpb25PYmplY3RHcm91cCA9IEFuaW1hdGlvbk9iamVjdEdyb3VwOwoJZXhwb3J0cy5BbmltYXRpb25VdGlscyA9IEFuaW1hdGlvblV0aWxzOwoJZXhwb3J0cy5BcmNDdXJ2ZSA9IEFyY0N1cnZlOwoJZXhwb3J0cy5BcnJheUNhbWVyYSA9IEFycmF5Q2FtZXJhOwoJZXhwb3J0cy5BcnJvd0hlbHBlciA9IEFycm93SGVscGVyOwoJZXhwb3J0cy5BdWRpbyA9IEF1ZGlvOwoJZXhwb3J0cy5BdWRpb0FuYWx5c2VyID0gQXVkaW9BbmFseXNlcjsKCWV4cG9ydHMuQXVkaW9Db250ZXh0ID0gQXVkaW9Db250ZXh0OwoJZXhwb3J0cy5BdWRpb0xpc3RlbmVyID0gQXVkaW9MaXN0ZW5lcjsKCWV4cG9ydHMuQXVkaW9Mb2FkZXIgPSBBdWRpb0xvYWRlcjsKCWV4cG9ydHMuQXhlc0hlbHBlciA9IEF4ZXNIZWxwZXI7CglleHBvcnRzLkF4aXNIZWxwZXIgPSBBeGlzSGVscGVyOwoJZXhwb3J0cy5CYWNrU2lkZSA9IEJhY2tTaWRlOwoJZXhwb3J0cy5CYXNpY0RlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nOwoJZXhwb3J0cy5CYXNpY1NoYWRvd01hcCA9IEJhc2ljU2hhZG93TWFwOwoJZXhwb3J0cy5CaW5hcnlUZXh0dXJlTG9hZGVyID0gQmluYXJ5VGV4dHVyZUxvYWRlcjsKCWV4cG9ydHMuQm9uZSA9IEJvbmU7CglleHBvcnRzLkJvb2xlYW5LZXlmcmFtZVRyYWNrID0gQm9vbGVhbktleWZyYW1lVHJhY2s7CglleHBvcnRzLkJvdW5kaW5nQm94SGVscGVyID0gQm91bmRpbmdCb3hIZWxwZXI7CglleHBvcnRzLkJveDIgPSBCb3gyOwoJZXhwb3J0cy5Cb3gzID0gQm94MzsKCWV4cG9ydHMuQm94M0hlbHBlciA9IEJveDNIZWxwZXI7CglleHBvcnRzLkJveEJ1ZmZlckdlb21ldHJ5ID0gQm94QnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLkJveEdlb21ldHJ5ID0gQm94R2VvbWV0cnk7CglleHBvcnRzLkJveEhlbHBlciA9IEJveEhlbHBlcjsKCWV4cG9ydHMuQnVmZmVyQXR0cmlidXRlID0gQnVmZmVyQXR0cmlidXRlOwoJZXhwb3J0cy5CdWZmZXJHZW9tZXRyeSA9IEJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5CdWZmZXJHZW9tZXRyeUxvYWRlciA9IEJ1ZmZlckdlb21ldHJ5TG9hZGVyOwoJZXhwb3J0cy5CeXRlVHlwZSA9IEJ5dGVUeXBlOwoJZXhwb3J0cy5DYWNoZSA9IENhY2hlOwoJZXhwb3J0cy5DYW1lcmEgPSBDYW1lcmE7CglleHBvcnRzLkNhbWVyYUhlbHBlciA9IENhbWVyYUhlbHBlcjsKCWV4cG9ydHMuQ2FudmFzUmVuZGVyZXIgPSBDYW52YXNSZW5kZXJlcjsKCWV4cG9ydHMuQ2FudmFzVGV4dHVyZSA9IENhbnZhc1RleHR1cmU7CglleHBvcnRzLkNhdG11bGxSb21DdXJ2ZTMgPSBDYXRtdWxsUm9tQ3VydmUzOwoJZXhwb3J0cy5DaW5lb25Ub25lTWFwcGluZyA9IENpbmVvblRvbmVNYXBwaW5nOwoJZXhwb3J0cy5DaXJjbGVCdWZmZXJHZW9tZXRyeSA9IENpcmNsZUJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5DaXJjbGVHZW9tZXRyeSA9IENpcmNsZUdlb21ldHJ5OwoJZXhwb3J0cy5DbGFtcFRvRWRnZVdyYXBwaW5nID0gQ2xhbXBUb0VkZ2VXcmFwcGluZzsKCWV4cG9ydHMuQ2xvY2sgPSBDbG9jazsKCWV4cG9ydHMuQ2xvc2VkU3BsaW5lQ3VydmUzID0gQ2xvc2VkU3BsaW5lQ3VydmUzOwoJZXhwb3J0cy5Db2xvciA9IENvbG9yOwoJZXhwb3J0cy5Db2xvcktleWZyYW1lVHJhY2sgPSBDb2xvcktleWZyYW1lVHJhY2s7CglleHBvcnRzLkNvbXByZXNzZWRUZXh0dXJlID0gQ29tcHJlc3NlZFRleHR1cmU7CglleHBvcnRzLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyID0gQ29tcHJlc3NlZFRleHR1cmVMb2FkZXI7CglleHBvcnRzLkNvbmVCdWZmZXJHZW9tZXRyeSA9IENvbmVCdWZmZXJHZW9tZXRyeTsKCWV4cG9ydHMuQ29uZUdlb21ldHJ5ID0gQ29uZUdlb21ldHJ5OwoJZXhwb3J0cy5DdWJlQ2FtZXJhID0gQ3ViZUNhbWVyYTsKCWV4cG9ydHMuQ3ViZUdlb21ldHJ5ID0gQm94R2VvbWV0cnk7CglleHBvcnRzLkN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IEN1YmVSZWZsZWN0aW9uTWFwcGluZzsKCWV4cG9ydHMuQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOwoJZXhwb3J0cy5DdWJlVGV4dHVyZSA9IEN1YmVUZXh0dXJlOwoJZXhwb3J0cy5DdWJlVGV4dHVyZUxvYWRlciA9IEN1YmVUZXh0dXJlTG9hZGVyOwoJZXhwb3J0cy5DdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOwoJZXhwb3J0cy5DdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOwoJZXhwb3J0cy5DdWJpY0JlemllckN1cnZlID0gQ3ViaWNCZXppZXJDdXJ2ZTsKCWV4cG9ydHMuQ3ViaWNCZXppZXJDdXJ2ZTMgPSBDdWJpY0JlemllckN1cnZlMzsKCWV4cG9ydHMuQ3ViaWNJbnRlcnBvbGFudCA9IEN1YmljSW50ZXJwb2xhbnQ7CglleHBvcnRzLkN1bGxGYWNlQmFjayA9IEN1bGxGYWNlQmFjazsKCWV4cG9ydHMuQ3VsbEZhY2VGcm9udCA9IEN1bGxGYWNlRnJvbnQ7CglleHBvcnRzLkN1bGxGYWNlRnJvbnRCYWNrID0gQ3VsbEZhY2VGcm9udEJhY2s7CglleHBvcnRzLkN1bGxGYWNlTm9uZSA9IEN1bGxGYWNlTm9uZTsKCWV4cG9ydHMuQ3VydmUgPSBDdXJ2ZTsKCWV4cG9ydHMuQ3VydmVQYXRoID0gQ3VydmVQYXRoOwoJZXhwb3J0cy5DdXN0b21CbGVuZGluZyA9IEN1c3RvbUJsZW5kaW5nOwoJZXhwb3J0cy5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5ID0gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeTsKCWV4cG9ydHMuQ3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnk7CglleHBvcnRzLkN5bGluZHJpY2FsID0gQ3lsaW5kcmljYWw7CglleHBvcnRzLkRhdGFUZXh0dXJlID0gRGF0YVRleHR1cmU7CglleHBvcnRzLkRhdGFUZXh0dXJlMkRBcnJheSA9IERhdGFUZXh0dXJlMkRBcnJheTsKCWV4cG9ydHMuRGF0YVRleHR1cmUzRCA9IERhdGFUZXh0dXJlM0Q7CglleHBvcnRzLkRhdGFUZXh0dXJlTG9hZGVyID0gRGF0YVRleHR1cmVMb2FkZXI7CglleHBvcnRzLkRlY3JlbWVudFN0ZW5jaWxPcCA9IERlY3JlbWVudFN0ZW5jaWxPcDsKCWV4cG9ydHMuRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IERlY3JlbWVudFdyYXBTdGVuY2lsT3A7CglleHBvcnRzLkRlZmF1bHRMb2FkaW5nTWFuYWdlciA9IERlZmF1bHRMb2FkaW5nTWFuYWdlcjsKCWV4cG9ydHMuRGVwdGhGb3JtYXQgPSBEZXB0aEZvcm1hdDsKCWV4cG9ydHMuRGVwdGhTdGVuY2lsRm9ybWF0ID0gRGVwdGhTdGVuY2lsRm9ybWF0OwoJZXhwb3J0cy5EZXB0aFRleHR1cmUgPSBEZXB0aFRleHR1cmU7CglleHBvcnRzLkRpcmVjdGlvbmFsTGlnaHQgPSBEaXJlY3Rpb25hbExpZ2h0OwoJZXhwb3J0cy5EaXJlY3Rpb25hbExpZ2h0SGVscGVyID0gRGlyZWN0aW9uYWxMaWdodEhlbHBlcjsKCWV4cG9ydHMuRGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IERpcmVjdGlvbmFsTGlnaHRTaGFkb3c7CglleHBvcnRzLkRpc2NyZXRlSW50ZXJwb2xhbnQgPSBEaXNjcmV0ZUludGVycG9sYW50OwoJZXhwb3J0cy5Eb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSA9IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5Eb2RlY2FoZWRyb25HZW9tZXRyeSA9IERvZGVjYWhlZHJvbkdlb21ldHJ5OwoJZXhwb3J0cy5Eb3VibGVTaWRlID0gRG91YmxlU2lkZTsKCWV4cG9ydHMuRHN0QWxwaGFGYWN0b3IgPSBEc3RBbHBoYUZhY3RvcjsKCWV4cG9ydHMuRHN0Q29sb3JGYWN0b3IgPSBEc3RDb2xvckZhY3RvcjsKCWV4cG9ydHMuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSA9IER5bmFtaWNCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLkR5bmFtaWNDb3B5VXNhZ2UgPSBEeW5hbWljQ29weVVzYWdlOwoJZXhwb3J0cy5EeW5hbWljRHJhd1VzYWdlID0gRHluYW1pY0RyYXdVc2FnZTsKCWV4cG9ydHMuRHluYW1pY1JlYWRVc2FnZSA9IER5bmFtaWNSZWFkVXNhZ2U7CglleHBvcnRzLkVkZ2VzR2VvbWV0cnkgPSBFZGdlc0dlb21ldHJ5OwoJZXhwb3J0cy5FZGdlc0hlbHBlciA9IEVkZ2VzSGVscGVyOwoJZXhwb3J0cy5FbGxpcHNlQ3VydmUgPSBFbGxpcHNlQ3VydmU7CglleHBvcnRzLkVxdWFsRGVwdGggPSBFcXVhbERlcHRoOwoJZXhwb3J0cy5FcXVhbFN0ZW5jaWxGdW5jID0gRXF1YWxTdGVuY2lsRnVuYzsKCWV4cG9ydHMuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzsKCWV4cG9ydHMuRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzsKCWV4cG9ydHMuRXVsZXIgPSBFdWxlcjsKCWV4cG9ydHMuRXZlbnREaXNwYXRjaGVyID0gRXZlbnREaXNwYXRjaGVyOwoJZXhwb3J0cy5FeHRydWRlQnVmZmVyR2VvbWV0cnkgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLkV4dHJ1ZGVHZW9tZXRyeSA9IEV4dHJ1ZGVHZW9tZXRyeTsKCWV4cG9ydHMuRmFjZTMgPSBGYWNlMzsKCWV4cG9ydHMuRmFjZTQgPSBGYWNlNDsKCWV4cG9ydHMuRmFjZUNvbG9ycyA9IEZhY2VDb2xvcnM7CglleHBvcnRzLkZhY2VOb3JtYWxzSGVscGVyID0gRmFjZU5vcm1hbHNIZWxwZXI7CglleHBvcnRzLkZpbGVMb2FkZXIgPSBGaWxlTG9hZGVyOwoJZXhwb3J0cy5GbGF0U2hhZGluZyA9IEZsYXRTaGFkaW5nOwoJZXhwb3J0cy5GbG9hdDMyQXR0cmlidXRlID0gRmxvYXQzMkF0dHJpYnV0ZTsKCWV4cG9ydHMuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSA9IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLkZsb2F0NjRBdHRyaWJ1dGUgPSBGbG9hdDY0QXR0cmlidXRlOwoJZXhwb3J0cy5GbG9hdDY0QnVmZmVyQXR0cmlidXRlID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTsKCWV4cG9ydHMuRmxvYXRUeXBlID0gRmxvYXRUeXBlOwoJZXhwb3J0cy5Gb2cgPSBGb2c7CglleHBvcnRzLkZvZ0V4cDIgPSBGb2dFeHAyOwoJZXhwb3J0cy5Gb250ID0gRm9udDsKCWV4cG9ydHMuRm9udExvYWRlciA9IEZvbnRMb2FkZXI7CglleHBvcnRzLkZyb250RmFjZURpcmVjdGlvbkNDVyA9IEZyb250RmFjZURpcmVjdGlvbkNDVzsKCWV4cG9ydHMuRnJvbnRGYWNlRGlyZWN0aW9uQ1cgPSBGcm9udEZhY2VEaXJlY3Rpb25DVzsKCWV4cG9ydHMuRnJvbnRTaWRlID0gRnJvbnRTaWRlOwoJZXhwb3J0cy5GcnVzdHVtID0gRnJ1c3R1bTsKCWV4cG9ydHMuR2FtbWFFbmNvZGluZyA9IEdhbW1hRW5jb2Rpbmc7CglleHBvcnRzLkdlb21ldHJ5ID0gR2VvbWV0cnk7CglleHBvcnRzLkdlb21ldHJ5VXRpbHMgPSBHZW9tZXRyeVV0aWxzOwoJZXhwb3J0cy5HcmVhdGVyRGVwdGggPSBHcmVhdGVyRGVwdGg7CglleHBvcnRzLkdyZWF0ZXJFcXVhbERlcHRoID0gR3JlYXRlckVxdWFsRGVwdGg7CglleHBvcnRzLkdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmM7CglleHBvcnRzLkdyZWF0ZXJTdGVuY2lsRnVuYyA9IEdyZWF0ZXJTdGVuY2lsRnVuYzsKCWV4cG9ydHMuR3JpZEhlbHBlciA9IEdyaWRIZWxwZXI7CglleHBvcnRzLkdyb3VwID0gR3JvdXA7CglleHBvcnRzLkhhbGZGbG9hdFR5cGUgPSBIYWxmRmxvYXRUeXBlOwoJZXhwb3J0cy5IZW1pc3BoZXJlTGlnaHQgPSBIZW1pc3BoZXJlTGlnaHQ7CglleHBvcnRzLkhlbWlzcGhlcmVMaWdodEhlbHBlciA9IEhlbWlzcGhlcmVMaWdodEhlbHBlcjsKCWV4cG9ydHMuSGVtaXNwaGVyZUxpZ2h0UHJvYmUgPSBIZW1pc3BoZXJlTGlnaHRQcm9iZTsKCWV4cG9ydHMuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSA9IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLkljb3NhaGVkcm9uR2VvbWV0cnkgPSBJY29zYWhlZHJvbkdlb21ldHJ5OwoJZXhwb3J0cy5JbWFnZUJpdG1hcExvYWRlciA9IEltYWdlQml0bWFwTG9hZGVyOwoJZXhwb3J0cy5JbWFnZUxvYWRlciA9IEltYWdlTG9hZGVyOwoJZXhwb3J0cy5JbWFnZVV0aWxzID0gSW1hZ2VVdGlsczsKCWV4cG9ydHMuSW1tZWRpYXRlUmVuZGVyT2JqZWN0ID0gSW1tZWRpYXRlUmVuZGVyT2JqZWN0OwoJZXhwb3J0cy5JbmNyZW1lbnRTdGVuY2lsT3AgPSBJbmNyZW1lbnRTdGVuY2lsT3A7CglleHBvcnRzLkluY3JlbWVudFdyYXBTdGVuY2lsT3AgPSBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wOwoJZXhwb3J0cy5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID0gSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI7CglleHBvcnRzLkluc3RhbmNlZE1lc2ggPSBJbnN0YW5jZWRNZXNoOwoJZXhwb3J0cy5JbnQxNkF0dHJpYnV0ZSA9IEludDE2QXR0cmlidXRlOwoJZXhwb3J0cy5JbnQxNkJ1ZmZlckF0dHJpYnV0ZSA9IEludDE2QnVmZmVyQXR0cmlidXRlOwoJZXhwb3J0cy5JbnQzMkF0dHJpYnV0ZSA9IEludDMyQXR0cmlidXRlOwoJZXhwb3J0cy5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSA9IEludDMyQnVmZmVyQXR0cmlidXRlOwoJZXhwb3J0cy5JbnQ4QXR0cmlidXRlID0gSW50OEF0dHJpYnV0ZTsKCWV4cG9ydHMuSW50OEJ1ZmZlckF0dHJpYnV0ZSA9IEludDhCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLkludFR5cGUgPSBJbnRUeXBlOwoJZXhwb3J0cy5JbnRlcmxlYXZlZEJ1ZmZlciA9IEludGVybGVhdmVkQnVmZmVyOwoJZXhwb3J0cy5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSA9IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOwoJZXhwb3J0cy5JbnRlcnBvbGFudCA9IEludGVycG9sYW50OwoJZXhwb3J0cy5JbnRlcnBvbGF0ZURpc2NyZXRlID0gSW50ZXJwb2xhdGVEaXNjcmV0ZTsKCWV4cG9ydHMuSW50ZXJwb2xhdGVMaW5lYXIgPSBJbnRlcnBvbGF0ZUxpbmVhcjsKCWV4cG9ydHMuSW50ZXJwb2xhdGVTbW9vdGggPSBJbnRlcnBvbGF0ZVNtb290aDsKCWV4cG9ydHMuSW52ZXJ0U3RlbmNpbE9wID0gSW52ZXJ0U3RlbmNpbE9wOwoJZXhwb3J0cy5KU09OTG9hZGVyID0gSlNPTkxvYWRlcjsKCWV4cG9ydHMuS2VlcFN0ZW5jaWxPcCA9IEtlZXBTdGVuY2lsT3A7CglleHBvcnRzLktleWZyYW1lVHJhY2sgPSBLZXlmcmFtZVRyYWNrOwoJZXhwb3J0cy5MT0QgPSBMT0Q7CglleHBvcnRzLkxhdGhlQnVmZmVyR2VvbWV0cnkgPSBMYXRoZUJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5MYXRoZUdlb21ldHJ5ID0gTGF0aGVHZW9tZXRyeTsKCWV4cG9ydHMuTGF5ZXJzID0gTGF5ZXJzOwoJZXhwb3J0cy5MZW5zRmxhcmUgPSBMZW5zRmxhcmU7CglleHBvcnRzLkxlc3NEZXB0aCA9IExlc3NEZXB0aDsKCWV4cG9ydHMuTGVzc0VxdWFsRGVwdGggPSBMZXNzRXF1YWxEZXB0aDsKCWV4cG9ydHMuTGVzc0VxdWFsU3RlbmNpbEZ1bmMgPSBMZXNzRXF1YWxTdGVuY2lsRnVuYzsKCWV4cG9ydHMuTGVzc1N0ZW5jaWxGdW5jID0gTGVzc1N0ZW5jaWxGdW5jOwoJZXhwb3J0cy5MaWdodCA9IExpZ2h0OwoJZXhwb3J0cy5MaWdodFByb2JlID0gTGlnaHRQcm9iZTsKCWV4cG9ydHMuTGlnaHRQcm9iZUhlbHBlciA9IExpZ2h0UHJvYmVIZWxwZXI7CglleHBvcnRzLkxpZ2h0U2hhZG93ID0gTGlnaHRTaGFkb3c7CglleHBvcnRzLkxpbmUgPSBMaW5lOwoJZXhwb3J0cy5MaW5lMyA9IExpbmUzOwoJZXhwb3J0cy5MaW5lQmFzaWNNYXRlcmlhbCA9IExpbmVCYXNpY01hdGVyaWFsOwoJZXhwb3J0cy5MaW5lQ3VydmUgPSBMaW5lQ3VydmU7CglleHBvcnRzLkxpbmVDdXJ2ZTMgPSBMaW5lQ3VydmUzOwoJZXhwb3J0cy5MaW5lRGFzaGVkTWF0ZXJpYWwgPSBMaW5lRGFzaGVkTWF0ZXJpYWw7CglleHBvcnRzLkxpbmVMb29wID0gTGluZUxvb3A7CglleHBvcnRzLkxpbmVQaWVjZXMgPSBMaW5lUGllY2VzOwoJZXhwb3J0cy5MaW5lU2VnbWVudHMgPSBMaW5lU2VnbWVudHM7CglleHBvcnRzLkxpbmVTdHJpcCA9IExpbmVTdHJpcDsKCWV4cG9ydHMuTGluZWFyRW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZzsKCWV4cG9ydHMuTGluZWFyRmlsdGVyID0gTGluZWFyRmlsdGVyOwoJZXhwb3J0cy5MaW5lYXJJbnRlcnBvbGFudCA9IExpbmVhckludGVycG9sYW50OwoJZXhwb3J0cy5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI7CglleHBvcnRzLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyOwoJZXhwb3J0cy5MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgPSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7CglleHBvcnRzLkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyOwoJZXhwb3J0cy5MaW5lYXJUb25lTWFwcGluZyA9IExpbmVhclRvbmVNYXBwaW5nOwoJZXhwb3J0cy5Mb2FkZXIgPSBMb2FkZXI7CglleHBvcnRzLkxvYWRlclV0aWxzID0gTG9hZGVyVXRpbHM7CglleHBvcnRzLkxvYWRpbmdNYW5hZ2VyID0gTG9hZGluZ01hbmFnZXI7CglleHBvcnRzLkxvZ0x1dkVuY29kaW5nID0gTG9nTHV2RW5jb2Rpbmc7CglleHBvcnRzLkxvb3BPbmNlID0gTG9vcE9uY2U7CglleHBvcnRzLkxvb3BQaW5nUG9uZyA9IExvb3BQaW5nUG9uZzsKCWV4cG9ydHMuTG9vcFJlcGVhdCA9IExvb3BSZXBlYXQ7CglleHBvcnRzLkx1bWluYW5jZUFscGhhRm9ybWF0ID0gTHVtaW5hbmNlQWxwaGFGb3JtYXQ7CglleHBvcnRzLkx1bWluYW5jZUZvcm1hdCA9IEx1bWluYW5jZUZvcm1hdDsKCWV4cG9ydHMuTU9VU0UgPSBNT1VTRTsKCWV4cG9ydHMuTWF0ZXJpYWwgPSBNYXRlcmlhbDsKCWV4cG9ydHMuTWF0ZXJpYWxMb2FkZXIgPSBNYXRlcmlhbExvYWRlcjsKCWV4cG9ydHMuTWF0aCA9IF9NYXRoOwoJZXhwb3J0cy5NYXRyaXgzID0gTWF0cml4MzsKCWV4cG9ydHMuTWF0cml4NCA9IE1hdHJpeDQ7CglleHBvcnRzLk1heEVxdWF0aW9uID0gTWF4RXF1YXRpb247CglleHBvcnRzLk1lc2ggPSBNZXNoOwoJZXhwb3J0cy5NZXNoQmFzaWNNYXRlcmlhbCA9IE1lc2hCYXNpY01hdGVyaWFsOwoJZXhwb3J0cy5NZXNoRGVwdGhNYXRlcmlhbCA9IE1lc2hEZXB0aE1hdGVyaWFsOwoJZXhwb3J0cy5NZXNoRGlzdGFuY2VNYXRlcmlhbCA9IE1lc2hEaXN0YW5jZU1hdGVyaWFsOwoJZXhwb3J0cy5NZXNoRmFjZU1hdGVyaWFsID0gTWVzaEZhY2VNYXRlcmlhbDsKCWV4cG9ydHMuTWVzaExhbWJlcnRNYXRlcmlhbCA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7CglleHBvcnRzLk1lc2hNYXRjYXBNYXRlcmlhbCA9IE1lc2hNYXRjYXBNYXRlcmlhbDsKCWV4cG9ydHMuTWVzaE5vcm1hbE1hdGVyaWFsID0gTWVzaE5vcm1hbE1hdGVyaWFsOwoJZXhwb3J0cy5NZXNoUGhvbmdNYXRlcmlhbCA9IE1lc2hQaG9uZ01hdGVyaWFsOwoJZXhwb3J0cy5NZXNoUGh5c2ljYWxNYXRlcmlhbCA9IE1lc2hQaHlzaWNhbE1hdGVyaWFsOwoJZXhwb3J0cy5NZXNoU3RhbmRhcmRNYXRlcmlhbCA9IE1lc2hTdGFuZGFyZE1hdGVyaWFsOwoJZXhwb3J0cy5NZXNoVG9vbk1hdGVyaWFsID0gTWVzaFRvb25NYXRlcmlhbDsKCWV4cG9ydHMuTWluRXF1YXRpb24gPSBNaW5FcXVhdGlvbjsKCWV4cG9ydHMuTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7CglleHBvcnRzLk1peE9wZXJhdGlvbiA9IE1peE9wZXJhdGlvbjsKCWV4cG9ydHMuTXVsdGlNYXRlcmlhbCA9IE11bHRpTWF0ZXJpYWw7CglleHBvcnRzLk11bHRpcGx5QmxlbmRpbmcgPSBNdWx0aXBseUJsZW5kaW5nOwoJZXhwb3J0cy5NdWx0aXBseU9wZXJhdGlvbiA9IE11bHRpcGx5T3BlcmF0aW9uOwoJZXhwb3J0cy5OZWFyZXN0RmlsdGVyID0gTmVhcmVzdEZpbHRlcjsKCWV4cG9ydHMuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI7CglleHBvcnRzLk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXI7CglleHBvcnRzLk5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyOwoJZXhwb3J0cy5OZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciA9IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyOwoJZXhwb3J0cy5OZXZlckRlcHRoID0gTmV2ZXJEZXB0aDsKCWV4cG9ydHMuTmV2ZXJTdGVuY2lsRnVuYyA9IE5ldmVyU3RlbmNpbEZ1bmM7CglleHBvcnRzLk5vQmxlbmRpbmcgPSBOb0JsZW5kaW5nOwoJZXhwb3J0cy5Ob0NvbG9ycyA9IE5vQ29sb3JzOwoJZXhwb3J0cy5Ob1RvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZzsKCWV4cG9ydHMuTm9ybWFsQmxlbmRpbmcgPSBOb3JtYWxCbGVuZGluZzsKCWV4cG9ydHMuTm90RXF1YWxEZXB0aCA9IE5vdEVxdWFsRGVwdGg7CglleHBvcnRzLk5vdEVxdWFsU3RlbmNpbEZ1bmMgPSBOb3RFcXVhbFN0ZW5jaWxGdW5jOwoJZXhwb3J0cy5OdW1iZXJLZXlmcmFtZVRyYWNrID0gTnVtYmVyS2V5ZnJhbWVUcmFjazsKCWV4cG9ydHMuT2JqZWN0M0QgPSBPYmplY3QzRDsKCWV4cG9ydHMuT2JqZWN0TG9hZGVyID0gT2JqZWN0TG9hZGVyOwoJZXhwb3J0cy5PYmplY3RTcGFjZU5vcm1hbE1hcCA9IE9iamVjdFNwYWNlTm9ybWFsTWFwOwoJZXhwb3J0cy5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkgPSBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLk9jdGFoZWRyb25HZW9tZXRyeSA9IE9jdGFoZWRyb25HZW9tZXRyeTsKCWV4cG9ydHMuT25lRmFjdG9yID0gT25lRmFjdG9yOwoJZXhwb3J0cy5PbmVNaW51c0RzdEFscGhhRmFjdG9yID0gT25lTWludXNEc3RBbHBoYUZhY3RvcjsKCWV4cG9ydHMuT25lTWludXNEc3RDb2xvckZhY3RvciA9IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3I7CglleHBvcnRzLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yOwoJZXhwb3J0cy5PbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gT25lTWludXNTcmNDb2xvckZhY3RvcjsKCWV4cG9ydHMuT3J0aG9ncmFwaGljQ2FtZXJhID0gT3J0aG9ncmFwaGljQ2FtZXJhOwoJZXhwb3J0cy5QQ0ZTaGFkb3dNYXAgPSBQQ0ZTaGFkb3dNYXA7CglleHBvcnRzLlBDRlNvZnRTaGFkb3dNYXAgPSBQQ0ZTb2Z0U2hhZG93TWFwOwoJZXhwb3J0cy5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkgPSBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLlBhcmFtZXRyaWNHZW9tZXRyeSA9IFBhcmFtZXRyaWNHZW9tZXRyeTsKCWV4cG9ydHMuUGFydGljbGUgPSBQYXJ0aWNsZTsKCWV4cG9ydHMuUGFydGljbGVCYXNpY01hdGVyaWFsID0gUGFydGljbGVCYXNpY01hdGVyaWFsOwoJZXhwb3J0cy5QYXJ0aWNsZVN5c3RlbSA9IFBhcnRpY2xlU3lzdGVtOwoJZXhwb3J0cy5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsID0gUGFydGljbGVTeXN0ZW1NYXRlcmlhbDsKCWV4cG9ydHMuUGF0aCA9IFBhdGg7CglleHBvcnRzLlBlcnNwZWN0aXZlQ2FtZXJhID0gUGVyc3BlY3RpdmVDYW1lcmE7CglleHBvcnRzLlBsYW5lID0gUGxhbmU7CglleHBvcnRzLlBsYW5lQnVmZmVyR2VvbWV0cnkgPSBQbGFuZUJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5QbGFuZUdlb21ldHJ5ID0gUGxhbmVHZW9tZXRyeTsKCWV4cG9ydHMuUGxhbmVIZWxwZXIgPSBQbGFuZUhlbHBlcjsKCWV4cG9ydHMuUG9pbnRDbG91ZCA9IFBvaW50Q2xvdWQ7CglleHBvcnRzLlBvaW50Q2xvdWRNYXRlcmlhbCA9IFBvaW50Q2xvdWRNYXRlcmlhbDsKCWV4cG9ydHMuUG9pbnRMaWdodCA9IFBvaW50TGlnaHQ7CglleHBvcnRzLlBvaW50TGlnaHRIZWxwZXIgPSBQb2ludExpZ2h0SGVscGVyOwoJZXhwb3J0cy5Qb2ludHMgPSBQb2ludHM7CglleHBvcnRzLlBvaW50c01hdGVyaWFsID0gUG9pbnRzTWF0ZXJpYWw7CglleHBvcnRzLlBvbGFyR3JpZEhlbHBlciA9IFBvbGFyR3JpZEhlbHBlcjsKCWV4cG9ydHMuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5ID0gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5Qb2x5aGVkcm9uR2VvbWV0cnkgPSBQb2x5aGVkcm9uR2VvbWV0cnk7CglleHBvcnRzLlBvc2l0aW9uYWxBdWRpbyA9IFBvc2l0aW9uYWxBdWRpbzsKCWV4cG9ydHMuUG9zaXRpb25hbEF1ZGlvSGVscGVyID0gUG9zaXRpb25hbEF1ZGlvSGVscGVyOwoJZXhwb3J0cy5Qcm9wZXJ0eUJpbmRpbmcgPSBQcm9wZXJ0eUJpbmRpbmc7CglleHBvcnRzLlByb3BlcnR5TWl4ZXIgPSBQcm9wZXJ0eU1peGVyOwoJZXhwb3J0cy5RdWFkcmF0aWNCZXppZXJDdXJ2ZSA9IFF1YWRyYXRpY0JlemllckN1cnZlOwoJZXhwb3J0cy5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM7CglleHBvcnRzLlF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uOwoJZXhwb3J0cy5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayA9IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrOwoJZXhwb3J0cy5RdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQgPSBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQ7CglleHBvcnRzLlJFVklTSU9OID0gUkVWSVNJT047CglleHBvcnRzLlJHQkFEZXB0aFBhY2tpbmcgPSBSR0JBRGVwdGhQYWNraW5nOwoJZXhwb3J0cy5SR0JBRm9ybWF0ID0gUkdCQUZvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQ7CglleHBvcnRzLlJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gUkdCQV9BU1RDXzEweDZfRm9ybWF0OwoJZXhwb3J0cy5SR0JBX0FTVENfMTB4OF9Gb3JtYXQgPSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQ7CglleHBvcnRzLlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0OwoJZXhwb3J0cy5SR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSBSR0JBX0FTVENfNHg0X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzV4NF9Gb3JtYXQgPSBSR0JBX0FTVENfNXg0X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSBSR0JBX0FTVENfNXg1X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSBSR0JBX0FTVENfNng1X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgPSBSR0JBX0FTVENfNng2X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSBSR0JBX0FTVENfOHg1X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSBSR0JBX0FTVENfOHg2X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9BU1RDXzh4OF9Gb3JtYXQgPSBSR0JBX0FTVENfOHg4X0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0OwoJZXhwb3J0cy5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ7CglleHBvcnRzLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdDsKCWV4cG9ydHMuUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0OwoJZXhwb3J0cy5SR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQ7CglleHBvcnRzLlJHQkRFbmNvZGluZyA9IFJHQkRFbmNvZGluZzsKCWV4cG9ydHMuUkdCRUVuY29kaW5nID0gUkdCRUVuY29kaW5nOwoJZXhwb3J0cy5SR0JFRm9ybWF0ID0gUkdCRUZvcm1hdDsKCWV4cG9ydHMuUkdCRm9ybWF0ID0gUkdCRm9ybWF0OwoJZXhwb3J0cy5SR0JNMTZFbmNvZGluZyA9IFJHQk0xNkVuY29kaW5nOwoJZXhwb3J0cy5SR0JNN0VuY29kaW5nID0gUkdCTTdFbmNvZGluZzsKCWV4cG9ydHMuUkdCX0VUQzFfRm9ybWF0ID0gUkdCX0VUQzFfRm9ybWF0OwoJZXhwb3J0cy5SR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0OwoJZXhwb3J0cy5SR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0OwoJZXhwb3J0cy5SR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IFJHQl9TM1RDX0RYVDFfRm9ybWF0OwoJZXhwb3J0cy5SYXdTaGFkZXJNYXRlcmlhbCA9IFJhd1NoYWRlck1hdGVyaWFsOwoJZXhwb3J0cy5SYXkgPSBSYXk7CglleHBvcnRzLlJheWNhc3RlciA9IFJheWNhc3RlcjsKCWV4cG9ydHMuUmVjdEFyZWFMaWdodCA9IFJlY3RBcmVhTGlnaHQ7CglleHBvcnRzLlJlY3RBcmVhTGlnaHRIZWxwZXIgPSBSZWN0QXJlYUxpZ2h0SGVscGVyOwoJZXhwb3J0cy5SZWRGb3JtYXQgPSBSZWRGb3JtYXQ7CglleHBvcnRzLlJlaW5oYXJkVG9uZU1hcHBpbmcgPSBSZWluaGFyZFRvbmVNYXBwaW5nOwoJZXhwb3J0cy5SZXBlYXRXcmFwcGluZyA9IFJlcGVhdFdyYXBwaW5nOwoJZXhwb3J0cy5SZXBsYWNlU3RlbmNpbE9wID0gUmVwbGFjZVN0ZW5jaWxPcDsKCWV4cG9ydHMuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbjsKCWV4cG9ydHMuUmluZ0J1ZmZlckdlb21ldHJ5ID0gUmluZ0J1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5SaW5nR2VvbWV0cnkgPSBSaW5nR2VvbWV0cnk7CglleHBvcnRzLlNjZW5lID0gU2NlbmU7CglleHBvcnRzLlNjZW5lVXRpbHMgPSBTY2VuZVV0aWxzOwoJZXhwb3J0cy5TaGFkZXJDaHVuayA9IFNoYWRlckNodW5rOwoJZXhwb3J0cy5TaGFkZXJMaWIgPSBTaGFkZXJMaWI7CglleHBvcnRzLlNoYWRlck1hdGVyaWFsID0gU2hhZGVyTWF0ZXJpYWw7CglleHBvcnRzLlNoYWRvd01hdGVyaWFsID0gU2hhZG93TWF0ZXJpYWw7CglleHBvcnRzLlNoYXBlID0gU2hhcGU7CglleHBvcnRzLlNoYXBlQnVmZmVyR2VvbWV0cnkgPSBTaGFwZUJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5TaGFwZUdlb21ldHJ5ID0gU2hhcGVHZW9tZXRyeTsKCWV4cG9ydHMuU2hhcGVQYXRoID0gU2hhcGVQYXRoOwoJZXhwb3J0cy5TaGFwZVV0aWxzID0gU2hhcGVVdGlsczsKCWV4cG9ydHMuU2hvcnRUeXBlID0gU2hvcnRUeXBlOwoJZXhwb3J0cy5Ta2VsZXRvbiA9IFNrZWxldG9uOwoJZXhwb3J0cy5Ta2VsZXRvbkhlbHBlciA9IFNrZWxldG9uSGVscGVyOwoJZXhwb3J0cy5Ta2lubmVkTWVzaCA9IFNraW5uZWRNZXNoOwoJZXhwb3J0cy5TbW9vdGhTaGFkaW5nID0gU21vb3RoU2hhZGluZzsKCWV4cG9ydHMuU3BoZXJlID0gU3BoZXJlOwoJZXhwb3J0cy5TcGhlcmVCdWZmZXJHZW9tZXRyeSA9IFNwaGVyZUJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5TcGhlcmVHZW9tZXRyeSA9IFNwaGVyZUdlb21ldHJ5OwoJZXhwb3J0cy5TcGhlcmljYWwgPSBTcGhlcmljYWw7CglleHBvcnRzLlNwaGVyaWNhbEhhcm1vbmljczMgPSBTcGhlcmljYWxIYXJtb25pY3MzOwoJZXhwb3J0cy5TcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyA9IFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOwoJZXhwb3J0cy5TcGxpbmUgPSBTcGxpbmU7CglleHBvcnRzLlNwbGluZUN1cnZlID0gU3BsaW5lQ3VydmU7CglleHBvcnRzLlNwbGluZUN1cnZlMyA9IFNwbGluZUN1cnZlMzsKCWV4cG9ydHMuU3BvdExpZ2h0ID0gU3BvdExpZ2h0OwoJZXhwb3J0cy5TcG90TGlnaHRIZWxwZXIgPSBTcG90TGlnaHRIZWxwZXI7CglleHBvcnRzLlNwb3RMaWdodFNoYWRvdyA9IFNwb3RMaWdodFNoYWRvdzsKCWV4cG9ydHMuU3ByaXRlID0gU3ByaXRlOwoJZXhwb3J0cy5TcHJpdGVNYXRlcmlhbCA9IFNwcml0ZU1hdGVyaWFsOwoJZXhwb3J0cy5TcmNBbHBoYUZhY3RvciA9IFNyY0FscGhhRmFjdG9yOwoJZXhwb3J0cy5TcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gU3JjQWxwaGFTYXR1cmF0ZUZhY3RvcjsKCWV4cG9ydHMuU3JjQ29sb3JGYWN0b3IgPSBTcmNDb2xvckZhY3RvcjsKCWV4cG9ydHMuU3RhdGljQ29weVVzYWdlID0gU3RhdGljQ29weVVzYWdlOwoJZXhwb3J0cy5TdGF0aWNEcmF3VXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7CglleHBvcnRzLlN0YXRpY1JlYWRVc2FnZSA9IFN0YXRpY1JlYWRVc2FnZTsKCWV4cG9ydHMuU3RlcmVvQ2FtZXJhID0gU3RlcmVvQ2FtZXJhOwoJZXhwb3J0cy5TdHJlYW1Db3B5VXNhZ2UgPSBTdHJlYW1Db3B5VXNhZ2U7CglleHBvcnRzLlN0cmVhbURyYXdVc2FnZSA9IFN0cmVhbURyYXdVc2FnZTsKCWV4cG9ydHMuU3RyZWFtUmVhZFVzYWdlID0gU3RyZWFtUmVhZFVzYWdlOwoJZXhwb3J0cy5TdHJpbmdLZXlmcmFtZVRyYWNrID0gU3RyaW5nS2V5ZnJhbWVUcmFjazsKCWV4cG9ydHMuU3VidHJhY3RFcXVhdGlvbiA9IFN1YnRyYWN0RXF1YXRpb247CglleHBvcnRzLlN1YnRyYWN0aXZlQmxlbmRpbmcgPSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOwoJZXhwb3J0cy5UT1VDSCA9IFRPVUNIOwoJZXhwb3J0cy5UYW5nZW50U3BhY2VOb3JtYWxNYXAgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7CglleHBvcnRzLlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkgPSBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5UZXRyYWhlZHJvbkdlb21ldHJ5ID0gVGV0cmFoZWRyb25HZW9tZXRyeTsKCWV4cG9ydHMuVGV4dEJ1ZmZlckdlb21ldHJ5ID0gVGV4dEJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5UZXh0R2VvbWV0cnkgPSBUZXh0R2VvbWV0cnk7CglleHBvcnRzLlRleHR1cmUgPSBUZXh0dXJlOwoJZXhwb3J0cy5UZXh0dXJlTG9hZGVyID0gVGV4dHVyZUxvYWRlcjsKCWV4cG9ydHMuVG9ydXNCdWZmZXJHZW9tZXRyeSA9IFRvcnVzQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLlRvcnVzR2VvbWV0cnkgPSBUb3J1c0dlb21ldHJ5OwoJZXhwb3J0cy5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeSA9IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5OwoJZXhwb3J0cy5Ub3J1c0tub3RHZW9tZXRyeSA9IFRvcnVzS25vdEdlb21ldHJ5OwoJZXhwb3J0cy5UcmlhbmdsZSA9IFRyaWFuZ2xlOwoJZXhwb3J0cy5UcmlhbmdsZUZhbkRyYXdNb2RlID0gVHJpYW5nbGVGYW5EcmF3TW9kZTsKCWV4cG9ydHMuVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gVHJpYW5nbGVTdHJpcERyYXdNb2RlOwoJZXhwb3J0cy5UcmlhbmdsZXNEcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlOwoJZXhwb3J0cy5UdWJlQnVmZmVyR2VvbWV0cnkgPSBUdWJlQnVmZmVyR2VvbWV0cnk7CglleHBvcnRzLlR1YmVHZW9tZXRyeSA9IFR1YmVHZW9tZXRyeTsKCWV4cG9ydHMuVVZNYXBwaW5nID0gVVZNYXBwaW5nOwoJZXhwb3J0cy5VaW50MTZBdHRyaWJ1dGUgPSBVaW50MTZBdHRyaWJ1dGU7CglleHBvcnRzLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSA9IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZTsKCWV4cG9ydHMuVWludDMyQXR0cmlidXRlID0gVWludDMyQXR0cmlidXRlOwoJZXhwb3J0cy5VaW50MzJCdWZmZXJBdHRyaWJ1dGUgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLlVpbnQ4QXR0cmlidXRlID0gVWludDhBdHRyaWJ1dGU7CglleHBvcnRzLlVpbnQ4QnVmZmVyQXR0cmlidXRlID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7CglleHBvcnRzLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSA9IFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZTsKCWV4cG9ydHMuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlID0gVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlOwoJZXhwb3J0cy5VbmNoYXJ0ZWQyVG9uZU1hcHBpbmcgPSBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmc7CglleHBvcnRzLlVuaWZvcm0gPSBVbmlmb3JtOwoJZXhwb3J0cy5Vbmlmb3Jtc0xpYiA9IFVuaWZvcm1zTGliOwoJZXhwb3J0cy5Vbmlmb3Jtc1V0aWxzID0gVW5pZm9ybXNVdGlsczsKCWV4cG9ydHMuVW5zaWduZWRCeXRlVHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGU7CglleHBvcnRzLlVuc2lnbmVkSW50MjQ4VHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTsKCWV4cG9ydHMuVW5zaWduZWRJbnRUeXBlID0gVW5zaWduZWRJbnRUeXBlOwoJZXhwb3J0cy5VbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSBVbnNpZ25lZFNob3J0NDQ0NFR5cGU7CglleHBvcnRzLlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZTsKCWV4cG9ydHMuVW5zaWduZWRTaG9ydDU2NVR5cGUgPSBVbnNpZ25lZFNob3J0NTY1VHlwZTsKCWV4cG9ydHMuVW5zaWduZWRTaG9ydFR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTsKCWV4cG9ydHMuVlNNU2hhZG93TWFwID0gVlNNU2hhZG93TWFwOwoJZXhwb3J0cy5WZWN0b3IyID0gVmVjdG9yMjsKCWV4cG9ydHMuVmVjdG9yMyA9IFZlY3RvcjM7CglleHBvcnRzLlZlY3RvcjQgPSBWZWN0b3I0OwoJZXhwb3J0cy5WZWN0b3JLZXlmcmFtZVRyYWNrID0gVmVjdG9yS2V5ZnJhbWVUcmFjazsKCWV4cG9ydHMuVmVydGV4ID0gVmVydGV4OwoJZXhwb3J0cy5WZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7CglleHBvcnRzLlZlcnRleE5vcm1hbHNIZWxwZXIgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyOwoJZXhwb3J0cy5WZXJ0ZXhUYW5nZW50c0hlbHBlciA9IFZlcnRleFRhbmdlbnRzSGVscGVyOwoJZXhwb3J0cy5WaWRlb1RleHR1cmUgPSBWaWRlb1RleHR1cmU7CglleHBvcnRzLldlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPSBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0OwoJZXhwb3J0cy5XZWJHTFJlbmRlclRhcmdldCA9IFdlYkdMUmVuZGVyVGFyZ2V0OwoJZXhwb3J0cy5XZWJHTFJlbmRlclRhcmdldEN1YmUgPSBXZWJHTFJlbmRlclRhcmdldEN1YmU7CglleHBvcnRzLldlYkdMUmVuZGVyZXIgPSBXZWJHTFJlbmRlcmVyOwoJZXhwb3J0cy5XZWJHTFV0aWxzID0gV2ViR0xVdGlsczsKCWV4cG9ydHMuV2lyZWZyYW1lR2VvbWV0cnkgPSBXaXJlZnJhbWVHZW9tZXRyeTsKCWV4cG9ydHMuV2lyZWZyYW1lSGVscGVyID0gV2lyZWZyYW1lSGVscGVyOwoJZXhwb3J0cy5XcmFwQXJvdW5kRW5kaW5nID0gV3JhcEFyb3VuZEVuZGluZzsKCWV4cG9ydHMuWEhSTG9hZGVyID0gWEhSTG9hZGVyOwoJZXhwb3J0cy5aZXJvQ3VydmF0dXJlRW5kaW5nID0gWmVyb0N1cnZhdHVyZUVuZGluZzsKCWV4cG9ydHMuWmVyb0ZhY3RvciA9IFplcm9GYWN0b3I7CglleHBvcnRzLlplcm9TbG9wZUVuZGluZyA9IFplcm9TbG9wZUVuZGluZzsKCWV4cG9ydHMuWmVyb1N0ZW5jaWxPcCA9IFplcm9TdGVuY2lsT3A7CglleHBvcnRzLnNSR0JFbmNvZGluZyA9IHNSR0JFbmNvZGluZzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOwoKfSkpKTsKCn0se31dLDM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbQogKi8KClRIUkVFLkRSQUNPTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkgewoKCVRIUkVFLkxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJdGhpcy5kZWNvZGVyUGF0aCA9ICcnOwoJdGhpcy5kZWNvZGVyQ29uZmlnID0ge307Cgl0aGlzLmRlY29kZXJCaW5hcnkgPSBudWxsOwoJdGhpcy5kZWNvZGVyUGVuZGluZyA9IG51bGw7CgoJdGhpcy53b3JrZXJMaW1pdCA9IDQ7Cgl0aGlzLndvcmtlclBvb2wgPSBbXTsKCXRoaXMud29ya2VyTmV4dFRhc2tJRCA9IDE7Cgl0aGlzLndvcmtlclNvdXJjZVVSTCA9ICcnOwoKCXRoaXMuZGVmYXVsdEF0dHJpYnV0ZUlEcyA9IHsKCQlwb3NpdGlvbjogJ1BPU0lUSU9OJywKCQlub3JtYWw6ICdOT1JNQUwnLAoJCWNvbG9yOiAnQ09MT1InLAoJCXV2OiAnVEVYX0NPT1JEJwoJfTsKCXRoaXMuZGVmYXVsdEF0dHJpYnV0ZVR5cGVzID0gewoJCXBvc2l0aW9uOiAnRmxvYXQzMkFycmF5JywKCQlub3JtYWw6ICdGbG9hdDMyQXJyYXknLAoJCWNvbG9yOiAnRmxvYXQzMkFycmF5JywKCQl1djogJ0Zsb2F0MzJBcnJheScKCX07Cgp9OwoKVEhSRUUuRFJBQ09Mb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggVEhSRUUuTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJY29uc3RydWN0b3I6IFRIUkVFLkRSQUNPTG9hZGVyLAoKCXNldERlY29kZXJQYXRoOiBmdW5jdGlvbiAoIHBhdGggKSB7CgoJCXRoaXMuZGVjb2RlclBhdGggPSBwYXRoOwoKCQlyZXR1cm4gdGhpczsKCgl9LAoKCXNldERlY29kZXJDb25maWc6IGZ1bmN0aW9uICggY29uZmlnICkgewoKCQl0aGlzLmRlY29kZXJDb25maWcgPSBjb25maWc7CgoJCXJldHVybiB0aGlzOwoKCX0sCgoJc2V0V29ya2VyTGltaXQ6IGZ1bmN0aW9uICggd29ya2VyTGltaXQgKSB7CgoJCXRoaXMud29ya2VyTGltaXQgPSB3b3JrZXJMaW1pdDsKCgkJcmV0dXJuIHRoaXM7CgoJfSwKCgkvKiogQGRlcHJlY2F0ZWQgKi8KCXNldFZlcmJvc2l0eTogZnVuY3Rpb24gKCkgewoKCQljb25zb2xlLndhcm4oICdUSFJFRS5EUkFDT0xvYWRlcjogVGhlIC5zZXRWZXJib3NpdHkoKSBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZC4nICk7CgoJfSwKCgkvKiogQGRlcHJlY2F0ZWQgKi8KCXNldERyYXdNb2RlOiBmdW5jdGlvbiAoKSB7CgoJCWNvbnNvbGUud2FybiggJ1RIUkVFLkRSQUNPTG9hZGVyOiBUaGUgLnNldERyYXdNb2RlKCkgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCX0sCgoJLyoqIEBkZXByZWNhdGVkICovCglzZXRTa2lwRGVxdWFudGl6YXRpb246IGZ1bmN0aW9uICgpIHsKCgkJY29uc29sZS53YXJuKCAnVEhSRUUuRFJBQ09Mb2FkZXI6IFRoZSAuc2V0U2tpcERlcXVhbnRpemF0aW9uKCkgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQuJyApOwoKCX0sCgoJbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTsKCgkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoJCWxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTsKCgkJaWYgKCB0aGlzLmNyb3NzT3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJyApIHsKCgkJCWxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRydWUgKTsKCgkJfQoKCQlsb2FkZXIubG9hZCggdXJsLCAoIGJ1ZmZlciApID0+IHsKCgkJCXZhciB0YXNrQ29uZmlnID0gewoJCQkJYXR0cmlidXRlSURzOiB0aGlzLmRlZmF1bHRBdHRyaWJ1dGVJRHMsCgkJCQlhdHRyaWJ1dGVUeXBlczogdGhpcy5kZWZhdWx0QXR0cmlidXRlVHlwZXMsCgkJCQl1c2VVbmlxdWVJRHM6IGZhbHNlCgkJCX07CgoJCQl0aGlzLmRlY29kZUdlb21ldHJ5KCBidWZmZXIsIHRhc2tDb25maWcgKQoJCQkJLnRoZW4oIG9uTG9hZCApCgkJCQkuY2F0Y2goIG9uRXJyb3IgKTsKCgkJfSwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCX0sCgoJLyoqIEBkZXByZWNhdGVkIEtlcHQgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgd2l0aCBwcmV2aW91cyBEUkFDT0xvYWRlciB2ZXJzaW9ucy4gKi8KCWRlY29kZURyYWNvRmlsZTogZnVuY3Rpb24gKCBidWZmZXIsIGNhbGxiYWNrLCBhdHRyaWJ1dGVJRHMsIGF0dHJpYnV0ZVR5cGVzICkgewoKCQl2YXIgdGFza0NvbmZpZyA9IHsKCQkJYXR0cmlidXRlSURzOiBhdHRyaWJ1dGVJRHMgfHwgdGhpcy5kZWZhdWx0QXR0cmlidXRlSURzLAoJCQlhdHRyaWJ1dGVUeXBlczogYXR0cmlidXRlVHlwZXMgfHwgdGhpcy5kZWZhdWx0QXR0cmlidXRlVHlwZXMsCgkJCXVzZVVuaXF1ZUlEczogISEgYXR0cmlidXRlSURzCgkJfTsKCgkJdGhpcy5kZWNvZGVHZW9tZXRyeSggYnVmZmVyLCB0YXNrQ29uZmlnICkudGhlbiggY2FsbGJhY2sgKTsKCgl9LAoKCWRlY29kZUdlb21ldHJ5OiBmdW5jdGlvbiAoIGJ1ZmZlciwgdGFza0NvbmZpZyApIHsKCgkJdmFyIHdvcmtlcjsKCQl2YXIgdGFza0lEID0gdGhpcy53b3JrZXJOZXh0VGFza0lEICsrOwoJCXZhciB0YXNrQ29zdCA9IGJ1ZmZlci5ieXRlTGVuZ3RoOwoKCQkvLyBUT0RPOiBGb3IgYmFja3dhcmQtY29tcGF0aWJpbGl0eSwgc3VwcG9ydCAnYXR0cmlidXRlVHlwZXMnIG9iamVjdHMgY29udGFpbmluZwoJCS8vIHJlZmVyZW5jZXMgKHJhdGhlciB0aGFuIG5hbWVzKSB0byB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcnMuIFRoZXNlIG11c3QgYmUKCQkvLyBzZXJpYWxpemVkIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gdGhlIHdvcmtlci4KCQlmb3IgKCB2YXIgYXR0cmlidXRlIGluIHRhc2tDb25maWcuYXR0cmlidXRlVHlwZXMgKSB7CgoJCQl2YXIgdHlwZSA9IHRhc2tDb25maWcuYXR0cmlidXRlVHlwZXNbIGF0dHJpYnV0ZSBdOwoKCQkJaWYgKCB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdGFza0NvbmZpZy5hdHRyaWJ1dGVUeXBlc1sgYXR0cmlidXRlIF0gPSB0eXBlLm5hbWU7CgoJCQl9CgoJCX0KCgkJLy8gT2J0YWluIGEgd29ya2VyIGFuZCBhc3NpZ24gYSB0YXNrLCBhbmQgY29uc3RydWN0IGEgZ2VvbWV0cnkgaW5zdGFuY2UKCQkvLyB3aGVuIHRoZSB0YXNrIGNvbXBsZXRlcy4KCQl2YXIgZ2VvbWV0cnlQZW5kaW5nID0gdGhpcy5fZ2V0V29ya2VyKCB0YXNrSUQsIHRhc2tDb3N0ICkKCQkJLnRoZW4oICggX3dvcmtlciApID0+IHsKCgkJCQl3b3JrZXIgPSBfd29ya2VyOwoKCQkJCXJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7CgoJCQkJCXdvcmtlci5fY2FsbGJhY2tzWyB0YXNrSUQgXSA9IHsgcmVzb2x2ZSwgcmVqZWN0IH07CgoJCQkJCXdvcmtlci5wb3N0TWVzc2FnZSggeyB0eXBlOiAnZGVjb2RlJywgaWQ6IHRhc2tJRCwgdGFza0NvbmZpZywgYnVmZmVyIH0sIFsgYnVmZmVyIF0gKTsKCgkJCQkJLy8gdGhpcy5kZWJ1ZygpOwoKCQkJCX0gKTsKCgkJCX0gKQoJCQkudGhlbiggKCBtZXNzYWdlICkgPT4gdGhpcy5fY3JlYXRlR2VvbWV0cnkoIG1lc3NhZ2UuZ2VvbWV0cnkgKSApOwoKCQkvLyBSZW1vdmUgdGFzayBmcm9tIHRoZSB0YXNrIGxpc3QuCgkJZ2VvbWV0cnlQZW5kaW5nCgkJCS5maW5hbGx5KCAoKSA9PiB7CgoJCQkJaWYgKCB3b3JrZXIgJiYgdGFza0lEICkgewoKCQkJCQl0aGlzLl9yZWxlYXNlVGFzayggd29ya2VyLCB0YXNrSUQgKTsKCgkJCQkJLy8gdGhpcy5kZWJ1ZygpOwoKCQkJCX0KCgkJCX0gKTsKCgkJcmV0dXJuIGdlb21ldHJ5UGVuZGluZzsKCgl9LAoKCV9jcmVhdGVHZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeURhdGEgKSB7CgoJCXZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpOwoKCQlpZiAoIGdlb21ldHJ5RGF0YS5pbmRleCApIHsKCgkJCWdlb21ldHJ5LnNldEluZGV4KCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeURhdGEuaW5kZXguYXJyYXksIDEgKSApOwoKCQl9CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IGdlb21ldHJ5RGF0YS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArKyApIHsKCgkJCXZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeURhdGEuYXR0cmlidXRlc1sgaSBdOwoJCQl2YXIgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lOwoJCQl2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7CgkJCXZhciBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTsKCgkJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggbmFtZSwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgKTsKCgkJfQoKCQlyZXR1cm4gZ2VvbWV0cnk7CgoJfSwKCglfbG9hZExpYnJhcnk6IGZ1bmN0aW9uICggdXJsLCByZXNwb25zZVR5cGUgKSB7CgoJCXZhciBsb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7CgkJbG9hZGVyLnNldFBhdGgoIHRoaXMuZGVjb2RlclBhdGggKTsKCQlsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCByZXNwb25zZVR5cGUgKTsKCgkJcmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IHsKCgkJCWxvYWRlci5sb2FkKCB1cmwsIHJlc29sdmUsIHVuZGVmaW5lZCwgcmVqZWN0ICk7CgoJCX0gKTsKCgl9LAoKCXByZWxvYWQ6IGZ1bmN0aW9uICgpIHsKCgkJdGhpcy5faW5pdERlY29kZXIoKTsKCgkJcmV0dXJuIHRoaXM7CgoJfSwKCglfaW5pdERlY29kZXI6IGZ1bmN0aW9uICgpIHsKCgkJaWYgKCB0aGlzLmRlY29kZXJQZW5kaW5nICkgcmV0dXJuIHRoaXMuZGVjb2RlclBlbmRpbmc7CgoJCXZhciB1c2VKUyA9IHR5cGVvZiBXZWJBc3NlbWJseSAhPT0gJ29iamVjdCcgfHwgdGhpcy5kZWNvZGVyQ29uZmlnLnR5cGUgPT09ICdqcyc7CgkJdmFyIGxpYnJhcmllc1BlbmRpbmcgPSBbXTsKCgkJaWYgKCB1c2VKUyApIHsKCgkJCWxpYnJhcmllc1BlbmRpbmcucHVzaCggdGhpcy5fbG9hZExpYnJhcnkoICdkcmFjb19kZWNvZGVyLmpzJywgJ3RleHQnICkgKTsKCgkJfSBlbHNlIHsKCgkJCWxpYnJhcmllc1BlbmRpbmcucHVzaCggdGhpcy5fbG9hZExpYnJhcnkoICdkcmFjb193YXNtX3dyYXBwZXIuanMnLCAndGV4dCcgKSApOwoJCQlsaWJyYXJpZXNQZW5kaW5nLnB1c2goIHRoaXMuX2xvYWRMaWJyYXJ5KCAnZHJhY29fZGVjb2Rlci53YXNtJywgJ2FycmF5YnVmZmVyJyApICk7CgoJCX0KCgkJdGhpcy5kZWNvZGVyUGVuZGluZyA9IFByb21pc2UuYWxsKCBsaWJyYXJpZXNQZW5kaW5nICkKCQkJLnRoZW4oICggbGlicmFyaWVzICkgPT4gewoKCQkJCXZhciBqc0NvbnRlbnQgPSBsaWJyYXJpZXNbIDAgXTsKCgkJCQlpZiAoICEgdXNlSlMgKSB7CgoJCQkJCXRoaXMuZGVjb2RlckNvbmZpZy53YXNtQmluYXJ5ID0gbGlicmFyaWVzWyAxIF07CgoJCQkJfQoKCQkJCXZhciBmbiA9IFRIUkVFLkRSQUNPTG9hZGVyLkRSQUNPV29ya2VyLnRvU3RyaW5nKCk7CgoJCQkJdmFyIGJvZHkgPSBbCgkJCQkJJy8qIGRyYWNvIGRlY29kZXIgKi8nLAoJCQkJCWpzQ29udGVudCwKCQkJCQknJywKCQkJCQknLyogd29ya2VyICovJywKCQkJCQlmbi5zdWJzdHJpbmcoIGZuLmluZGV4T2YoICd7JyApICsgMSwgZm4ubGFzdEluZGV4T2YoICd9JyApICkKCQkJCV0uam9pbiggJ1xuJyApOwoKCQkJCXRoaXMud29ya2VyU291cmNlVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggbmV3IEJsb2IoIFsgYm9keSBdICkgKTsKCgkJCX0gKTsKCgkJcmV0dXJuIHRoaXMuZGVjb2RlclBlbmRpbmc7CgoJfSwKCglfZ2V0V29ya2VyOiBmdW5jdGlvbiAoIHRhc2tJRCwgdGFza0Nvc3QgKSB7CgoJCXJldHVybiB0aGlzLl9pbml0RGVjb2RlcigpLnRoZW4oICgpID0+IHsKCgkJCWlmICggdGhpcy53b3JrZXJQb29sLmxlbmd0aCA8IHRoaXMud29ya2VyTGltaXQgKSB7CgoJCQkJdmFyIHdvcmtlciA9IG5ldyBXb3JrZXIoIHRoaXMud29ya2VyU291cmNlVVJMICk7CgoJCQkJd29ya2VyLl9jYWxsYmFja3MgPSB7fTsKCQkJCXdvcmtlci5fdGFza0Nvc3RzID0ge307CgkJCQl3b3JrZXIuX3Rhc2tMb2FkID0gMDsKCgkJCQl3b3JrZXIucG9zdE1lc3NhZ2UoIHsgdHlwZTogJ2luaXQnLCBkZWNvZGVyQ29uZmlnOiB0aGlzLmRlY29kZXJDb25maWcgfSApOwoKCQkJCXdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoIGUgKSB7CgoJCQkJCXZhciBtZXNzYWdlID0gZS5kYXRhOwoKCQkJCQlzd2l0Y2ggKCBtZXNzYWdlLnR5cGUgKSB7CgoJCQkJCQljYXNlICdkZWNvZGUnOgoJCQkJCQkJd29ya2VyLl9jYWxsYmFja3NbIG1lc3NhZ2UuaWQgXS5yZXNvbHZlKCBtZXNzYWdlICk7CgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgJ2Vycm9yJzoKCQkJCQkJCXdvcmtlci5fY2FsbGJhY2tzWyBtZXNzYWdlLmlkIF0ucmVqZWN0KCBtZXNzYWdlICk7CgkJCQkJCQlicmVhazsKCgkJCQkJCWRlZmF1bHQ6CgkJCQkJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuRFJBQ09Mb2FkZXI6IFVuZXhwZWN0ZWQgbWVzc2FnZSwgIicgKyBtZXNzYWdlLnR5cGUgKyAnIicgKTsKCgkJCQkJfQoKCQkJCX07CgoJCQkJdGhpcy53b3JrZXJQb29sLnB1c2goIHdvcmtlciApOwoKCQkJfSBlbHNlIHsKCgkJCQl0aGlzLndvcmtlclBvb2wuc29ydCggZnVuY3Rpb24gKCBhLCBiICkgewoKCQkJCQlyZXR1cm4gYS5fdGFza0xvYWQgPiBiLl90YXNrTG9hZCA/IC0gMSA6IDE7CgoJCQkJfSApOwoKCQkJfQoKCQkJdmFyIHdvcmtlciA9IHRoaXMud29ya2VyUG9vbFsgdGhpcy53b3JrZXJQb29sLmxlbmd0aCAtIDEgXTsKCQkJd29ya2VyLl90YXNrQ29zdHNbIHRhc2tJRCBdID0gdGFza0Nvc3Q7CgkJCXdvcmtlci5fdGFza0xvYWQgKz0gdGFza0Nvc3Q7CgkJCXJldHVybiB3b3JrZXI7CgoJCX0gKTsKCgl9LAoKCV9yZWxlYXNlVGFzazogZnVuY3Rpb24gKCB3b3JrZXIsIHRhc2tJRCApIHsKCgkJd29ya2VyLl90YXNrTG9hZCAtPSB3b3JrZXIuX3Rhc2tDb3N0c1sgdGFza0lEIF07CgkJZGVsZXRlIHdvcmtlci5fY2FsbGJhY2tzWyB0YXNrSUQgXTsKCQlkZWxldGUgd29ya2VyLl90YXNrQ29zdHNbIHRhc2tJRCBdOwoKCX0sCgoJZGVidWc6IGZ1bmN0aW9uICgpIHsKCgkJY29uc29sZS5sb2coICdUYXNrIGxvYWQ6ICcsIHRoaXMud29ya2VyUG9vbC5tYXAoICggd29ya2VyICkgPT4gd29ya2VyLl90YXNrTG9hZCApICk7CgoJfSwKCglkaXNwb3NlOiBmdW5jdGlvbiAoKSB7CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMud29ya2VyUG9vbC5sZW5ndGg7ICsrIGkgKSB7CgoJCQl0aGlzLndvcmtlclBvb2xbIGkgXS50ZXJtaW5hdGUoKTsKCgkJfQoKCQl0aGlzLndvcmtlclBvb2wubGVuZ3RoID0gMDsKCgkJcmV0dXJuIHRoaXM7CgoJfQoKfSApOwoKLyogV0VCIFdPUktFUiAqLwoKVEhSRUUuRFJBQ09Mb2FkZXIuRFJBQ09Xb3JrZXIgPSBmdW5jdGlvbiAoKSB7CgoJdmFyIGRlY29kZXJDb25maWc7Cgl2YXIgZGVjb2RlclBlbmRpbmc7CgoJb25tZXNzYWdlID0gZnVuY3Rpb24gKCBlICkgewoKCQl2YXIgbWVzc2FnZSA9IGUuZGF0YTsKCgkJc3dpdGNoICggbWVzc2FnZS50eXBlICkgewoKCQkJY2FzZSAnaW5pdCc6CgkJCQlkZWNvZGVyQ29uZmlnID0gbWVzc2FnZS5kZWNvZGVyQ29uZmlnOwoJCQkJZGVjb2RlclBlbmRpbmcgPSBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLyosIHJlamVjdCovICkgewoKCQkJCQlkZWNvZGVyQ29uZmlnLm9uTW9kdWxlTG9hZGVkID0gZnVuY3Rpb24gKCBkcmFjbyApIHsKCgkJCQkJCS8vIE1vZHVsZSBpcyBQcm9taXNlLWxpa2UuIFdyYXAgYmVmb3JlIHJlc29sdmluZyB0byBhdm9pZCBsb29wLgoJCQkJCQlyZXNvbHZlKCB7IGRyYWNvOiBkcmFjbyB9ICk7CgoJCQkJCX07CgoJCQkJCURyYWNvRGVjb2Rlck1vZHVsZSggZGVjb2RlckNvbmZpZyApOwoKCQkJCX0gKTsKCQkJCWJyZWFrOwoKCQkJY2FzZSAnZGVjb2RlJzoKCQkJCXZhciBidWZmZXIgPSBtZXNzYWdlLmJ1ZmZlcjsKCQkJCXZhciB0YXNrQ29uZmlnID0gbWVzc2FnZS50YXNrQ29uZmlnOwoJCQkJZGVjb2RlclBlbmRpbmcudGhlbiggKCBtb2R1bGUgKSA9PiB7CgoJCQkJCXZhciBkcmFjbyA9IG1vZHVsZS5kcmFjbzsKCQkJCQl2YXIgZGVjb2RlciA9IG5ldyBkcmFjby5EZWNvZGVyKCk7CgkJCQkJdmFyIGRlY29kZXJCdWZmZXIgPSBuZXcgZHJhY28uRGVjb2RlckJ1ZmZlcigpOwoJCQkJCWRlY29kZXJCdWZmZXIuSW5pdCggbmV3IEludDhBcnJheSggYnVmZmVyICksIGJ1ZmZlci5ieXRlTGVuZ3RoICk7CgoJCQkJCXRyeSB7CgoJCQkJCQl2YXIgZ2VvbWV0cnkgPSBkZWNvZGVHZW9tZXRyeSggZHJhY28sIGRlY29kZXIsIGRlY29kZXJCdWZmZXIsIHRhc2tDb25maWcgKTsKCgkJCQkJCXZhciBidWZmZXJzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5tYXAoICggYXR0ciApID0+IGF0dHIuYXJyYXkuYnVmZmVyICk7CgoJCQkJCQlpZiAoIGdlb21ldHJ5LmluZGV4ICkgYnVmZmVycy5wdXNoKCBnZW9tZXRyeS5pbmRleC5hcnJheS5idWZmZXIgKTsKCgkJCQkJCXNlbGYucG9zdE1lc3NhZ2UoIHsgdHlwZTogJ2RlY29kZScsIGlkOiBtZXNzYWdlLmlkLCBnZW9tZXRyeSB9LCBidWZmZXJzICk7CgoJCQkJCX0gY2F0Y2ggKCBlcnJvciApIHsKCgkJCQkJCWNvbnNvbGUuZXJyb3IoIGVycm9yICk7CgoJCQkJCQlzZWxmLnBvc3RNZXNzYWdlKCB7IHR5cGU6ICdlcnJvcicsIGlkOiBtZXNzYWdlLmlkLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9ICk7CgoJCQkJCX0gZmluYWxseSB7CgoJCQkJCQlkcmFjby5kZXN0cm95KCBkZWNvZGVyQnVmZmVyICk7CgkJCQkJCWRyYWNvLmRlc3Ryb3koIGRlY29kZXIgKTsKCgkJCQkJfQoKCQkJCX0gKTsKCQkJCWJyZWFrOwoKCQl9CgoJfTsKCglmdW5jdGlvbiBkZWNvZGVHZW9tZXRyeSggZHJhY28sIGRlY29kZXIsIGRlY29kZXJCdWZmZXIsIHRhc2tDb25maWcgKSB7CgoJCXZhciBhdHRyaWJ1dGVJRHMgPSB0YXNrQ29uZmlnLmF0dHJpYnV0ZUlEczsKCQl2YXIgYXR0cmlidXRlVHlwZXMgPSB0YXNrQ29uZmlnLmF0dHJpYnV0ZVR5cGVzOwoKCQl2YXIgZHJhY29HZW9tZXRyeTsKCQl2YXIgZGVjb2RpbmdTdGF0dXM7CgoJCXZhciBnZW9tZXRyeVR5cGUgPSBkZWNvZGVyLkdldEVuY29kZWRHZW9tZXRyeVR5cGUoIGRlY29kZXJCdWZmZXIgKTsKCgkJaWYgKCBnZW9tZXRyeVR5cGUgPT09IGRyYWNvLlRSSUFOR1VMQVJfTUVTSCApIHsKCgkJCWRyYWNvR2VvbWV0cnkgPSBuZXcgZHJhY28uTWVzaCgpOwoJCQlkZWNvZGluZ1N0YXR1cyA9IGRlY29kZXIuRGVjb2RlQnVmZmVyVG9NZXNoKCBkZWNvZGVyQnVmZmVyLCBkcmFjb0dlb21ldHJ5ICk7CgoJCX0gZWxzZSBpZiAoIGdlb21ldHJ5VHlwZSA9PT0gZHJhY28uUE9JTlRfQ0xPVUQgKSB7CgoJCQlkcmFjb0dlb21ldHJ5ID0gbmV3IGRyYWNvLlBvaW50Q2xvdWQoKTsKCQkJZGVjb2RpbmdTdGF0dXMgPSBkZWNvZGVyLkRlY29kZUJ1ZmZlclRvUG9pbnRDbG91ZCggZGVjb2RlckJ1ZmZlciwgZHJhY29HZW9tZXRyeSApOwoKCQl9IGVsc2UgewoKCQkJdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRFJBQ09Mb2FkZXI6IFVuZXhwZWN0ZWQgZ2VvbWV0cnkgdHlwZS4nICk7CgoJCX0KCgkJaWYgKCAhIGRlY29kaW5nU3RhdHVzLm9rKCkgfHwgZHJhY29HZW9tZXRyeS5wdHIgPT09IDAgKSB7CgoJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5EUkFDT0xvYWRlcjogRGVjb2RpbmcgZmFpbGVkOiAnICsgZGVjb2RpbmdTdGF0dXMuZXJyb3JfbXNnKCkgKTsKCgkJfQoKCQl2YXIgZ2VvbWV0cnkgPSB7IGluZGV4OiBudWxsLCBhdHRyaWJ1dGVzOiBbXSB9OwoKCQkvLyBHYXRoZXIgYWxsIHZlcnRleCBhdHRyaWJ1dGVzLgoJCWZvciAoIHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZUlEcyApIHsKCgkJCXZhciBhdHRyaWJ1dGVUeXBlID0gc2VsZlsgYXR0cmlidXRlVHlwZXNbIGF0dHJpYnV0ZU5hbWUgXSBdOwoKCQkJdmFyIGF0dHJpYnV0ZTsKCQkJdmFyIGF0dHJpYnV0ZUlEOwoKCQkJLy8gQSBEcmFjbyBmaWxlIG1heSBiZSBjcmVhdGVkIHdpdGggZGVmYXVsdCB2ZXJ0ZXggYXR0cmlidXRlcywgd2hvc2UgYXR0cmlidXRlIElEcwoJCQkvLyBhcmUgbWFwcGVkIDE6MSBmcm9tIHRoZWlyIHNlbWFudGljIG5hbWUgKFBPU0lUSU9OLCBOT1JNQUwsIC4uLikuIEFsdGVybmF0aXZlbHksCgkJCS8vIGEgRHJhY28gZmlsZSBtYXkgY29udGFpbiBhIGN1c3RvbSBzZXQgb2YgYXR0cmlidXRlcywgaWRlbnRpZmllZCBieSBrbm93biB1bmlxdWUKCQkJLy8gSURzLiBnbFRGIGZpbGVzIGFsd2F5cyBkbyB0aGUgbGF0dGVyLCBhbmQgYC5kcmNgIGZpbGVzIHR5cGljYWxseSBkbyB0aGUgZm9ybWVyLgoJCQlpZiAoIHRhc2tDb25maWcudXNlVW5pcXVlSURzICkgewoKCQkJCWF0dHJpYnV0ZUlEID0gYXR0cmlidXRlSURzWyBhdHRyaWJ1dGVOYW1lIF07CgkJCQlhdHRyaWJ1dGUgPSBkZWNvZGVyLkdldEF0dHJpYnV0ZUJ5VW5pcXVlSWQoIGRyYWNvR2VvbWV0cnksIGF0dHJpYnV0ZUlEICk7CgoJCQl9IGVsc2UgewoKCQkJCWF0dHJpYnV0ZUlEID0gZGVjb2Rlci5HZXRBdHRyaWJ1dGVJZCggZHJhY29HZW9tZXRyeSwgZHJhY29bIGF0dHJpYnV0ZUlEc1sgYXR0cmlidXRlTmFtZSBdIF0gKTsKCgkJCQlpZiAoIGF0dHJpYnV0ZUlEID09PSAtIDEgKSBjb250aW51ZTsKCgkJCQlhdHRyaWJ1dGUgPSBkZWNvZGVyLkdldEF0dHJpYnV0ZSggZHJhY29HZW9tZXRyeSwgYXR0cmlidXRlSUQgKTsKCgkJCX0KCgkJCWdlb21ldHJ5LmF0dHJpYnV0ZXMucHVzaCggZGVjb2RlQXR0cmlidXRlKCBkcmFjbywgZGVjb2RlciwgZHJhY29HZW9tZXRyeSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgYXR0cmlidXRlICkgKTsKCgkJfQoKCQkvLyBBZGQgaW5kZXguCgkJaWYgKCBnZW9tZXRyeVR5cGUgPT09IGRyYWNvLlRSSUFOR1VMQVJfTUVTSCApIHsKCgkJCS8vIEdlbmVyYXRlIG1lc2ggZmFjZXMuCgkJCXZhciBudW1GYWNlcyA9IGRyYWNvR2VvbWV0cnkubnVtX2ZhY2VzKCk7CgkJCXZhciBudW1JbmRpY2VzID0gbnVtRmFjZXMgKiAzOwoJCQl2YXIgaW5kZXggPSBuZXcgVWludDMyQXJyYXkoIG51bUluZGljZXMgKTsKCQkJdmFyIGluZGV4QXJyYXkgPSBuZXcgZHJhY28uRHJhY29JbnQzMkFycmF5KCk7CgoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1GYWNlczsgKysgaSApIHsKCgkJCQlkZWNvZGVyLkdldEZhY2VGcm9tTWVzaCggZHJhY29HZW9tZXRyeSwgaSwgaW5kZXhBcnJheSApOwoKCQkJCWZvciAoIHZhciBqID0gMDsgaiA8IDM7ICsrIGogKSB7CgoJCQkJCWluZGV4WyBpICogMyArIGogXSA9IGluZGV4QXJyYXkuR2V0VmFsdWUoIGogKTsKCgkJCQl9CgoJCQl9CgoJCQlnZW9tZXRyeS5pbmRleCA9IHsgYXJyYXk6IGluZGV4LCBpdGVtU2l6ZTogMSB9OwoKCQkJZHJhY28uZGVzdHJveSggaW5kZXhBcnJheSApOwoKCQl9CgoJCWRyYWNvLmRlc3Ryb3koIGRyYWNvR2VvbWV0cnkgKTsKCgkJcmV0dXJuIGdlb21ldHJ5OwoKCX0KCglmdW5jdGlvbiBkZWNvZGVBdHRyaWJ1dGUoIGRyYWNvLCBkZWNvZGVyLCBkcmFjb0dlb21ldHJ5LCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBhdHRyaWJ1dGUgKSB7CgoJCXZhciBudW1Db21wb25lbnRzID0gYXR0cmlidXRlLm51bV9jb21wb25lbnRzKCk7CgkJdmFyIG51bVBvaW50cyA9IGRyYWNvR2VvbWV0cnkubnVtX3BvaW50cygpOwoJCXZhciBudW1WYWx1ZXMgPSBudW1Qb2ludHMgKiBudW1Db21wb25lbnRzOwoJCXZhciBkcmFjb0FycmF5OwoKCQl2YXIgYXJyYXk7CgoJCXN3aXRjaCAoIGF0dHJpYnV0ZVR5cGUgKSB7CgoJCQljYXNlIEZsb2F0MzJBcnJheToKCQkJCWRyYWNvQXJyYXkgPSBuZXcgZHJhY28uRHJhY29GbG9hdDMyQXJyYXkoKTsKCQkJCWRlY29kZXIuR2V0QXR0cmlidXRlRmxvYXRGb3JBbGxQb2ludHMoIGRyYWNvR2VvbWV0cnksIGF0dHJpYnV0ZSwgZHJhY29BcnJheSApOwoJCQkJYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBudW1WYWx1ZXMgKTsKCQkJCWJyZWFrOwoKCQkJY2FzZSBJbnQ4QXJyYXk6CgkJCQlkcmFjb0FycmF5ID0gbmV3IGRyYWNvLkRyYWNvSW50OEFycmF5KCk7CgkJCQlkZWNvZGVyLkdldEF0dHJpYnV0ZUludDhGb3JBbGxQb2ludHMoIGRyYWNvR2VvbWV0cnksIGF0dHJpYnV0ZSwgZHJhY29BcnJheSApOwoJCQkJYXJyYXkgPSBuZXcgSW50OEFycmF5KCBudW1WYWx1ZXMgKTsKCQkJCWJyZWFrOwoKCQkJY2FzZSBJbnQxNkFycmF5OgoJCQkJZHJhY29BcnJheSA9IG5ldyBkcmFjby5EcmFjb0ludDE2QXJyYXkoKTsKCQkJCWRlY29kZXIuR2V0QXR0cmlidXRlSW50MTZGb3JBbGxQb2ludHMoIGRyYWNvR2VvbWV0cnksIGF0dHJpYnV0ZSwgZHJhY29BcnJheSApOwoJCQkJYXJyYXkgPSBuZXcgSW50MTZBcnJheSggbnVtVmFsdWVzICk7CgkJCQlicmVhazsKCgkJCWNhc2UgSW50MzJBcnJheToKCQkJCWRyYWNvQXJyYXkgPSBuZXcgZHJhY28uRHJhY29JbnQzMkFycmF5KCk7CgkJCQlkZWNvZGVyLkdldEF0dHJpYnV0ZUludDMyRm9yQWxsUG9pbnRzKCBkcmFjb0dlb21ldHJ5LCBhdHRyaWJ1dGUsIGRyYWNvQXJyYXkgKTsKCQkJCWFycmF5ID0gbmV3IEludDMyQXJyYXkoIG51bVZhbHVlcyApOwoJCQkJYnJlYWs7CgoJCQljYXNlIFVpbnQ4QXJyYXk6CgkJCQlkcmFjb0FycmF5ID0gbmV3IGRyYWNvLkRyYWNvVUludDhBcnJheSgpOwoJCQkJZGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50OEZvckFsbFBvaW50cyggZHJhY29HZW9tZXRyeSwgYXR0cmlidXRlLCBkcmFjb0FycmF5ICk7CgkJCQlhcnJheSA9IG5ldyBVaW50OEFycmF5KCBudW1WYWx1ZXMgKTsKCQkJCWJyZWFrOwoKCQkJY2FzZSBVaW50MTZBcnJheToKCQkJCWRyYWNvQXJyYXkgPSBuZXcgZHJhY28uRHJhY29VSW50MTZBcnJheSgpOwoJCQkJZGVjb2Rlci5HZXRBdHRyaWJ1dGVVSW50MTZGb3JBbGxQb2ludHMoIGRyYWNvR2VvbWV0cnksIGF0dHJpYnV0ZSwgZHJhY29BcnJheSApOwoJCQkJYXJyYXkgPSBuZXcgVWludDE2QXJyYXkoIG51bVZhbHVlcyApOwoJCQkJYnJlYWs7CgoJCQljYXNlIFVpbnQzMkFycmF5OgoJCQkJZHJhY29BcnJheSA9IG5ldyBkcmFjby5EcmFjb1VJbnQzMkFycmF5KCk7CgkJCQlkZWNvZGVyLkdldEF0dHJpYnV0ZVVJbnQzMkZvckFsbFBvaW50cyggZHJhY29HZW9tZXRyeSwgYXR0cmlidXRlLCBkcmFjb0FycmF5ICk7CgkJCQlhcnJheSA9IG5ldyBVaW50MzJBcnJheSggbnVtVmFsdWVzICk7CgkJCQlicmVhazsKCgkJCWRlZmF1bHQ6CgkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5EUkFDT0xvYWRlcjogVW5leHBlY3RlZCBhdHRyaWJ1dGUgdHlwZS4nICk7CgoJCX0KCgkJZm9yICggdmFyIGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpICsrICkgewoKCQkJYXJyYXlbIGkgXSA9IGRyYWNvQXJyYXkuR2V0VmFsdWUoIGkgKTsKCgkJfQoKCQlkcmFjby5kZXN0cm95KCBkcmFjb0FycmF5ICk7CgoJCXJldHVybiB7CgkJCW5hbWU6IGF0dHJpYnV0ZU5hbWUsCgkJCWFycmF5OiBhcnJheSwKCQkJaXRlbVNpemU6IG51bUNvbXBvbmVudHMKCQl9OwoKCX0KCn07CgovKiogRGVwcmVjYXRlZCBzdGF0aWMgbWV0aG9kcyAqLwoKLyoqIEBkZXByZWNhdGVkICovClRIUkVFLkRSQUNPTG9hZGVyLnNldERlY29kZXJQYXRoID0gZnVuY3Rpb24gKCkgewoKCWNvbnNvbGUud2FybiggJ1RIUkVFLkRSQUNPTG9hZGVyOiBUaGUgLnNldERlY29kZXJQYXRoKCkgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpbnN0YW5jZSBtZXRob2RzLicgKTsKCn07CgovKiogQGRlcHJlY2F0ZWQgKi8KVEhSRUUuRFJBQ09Mb2FkZXIuc2V0RGVjb2RlckNvbmZpZyA9IGZ1bmN0aW9uICgpIHsKCgljb25zb2xlLndhcm4oICdUSFJFRS5EUkFDT0xvYWRlcjogVGhlIC5zZXREZWNvZGVyQ29uZmlnKCkgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpbnN0YW5jZSBtZXRob2RzLicgKTsKCn07CgovKiogQGRlcHJlY2F0ZWQgKi8KVEhSRUUuRFJBQ09Mb2FkZXIucmVsZWFzZURlY29kZXJNb2R1bGUgPSBmdW5jdGlvbiAoKSB7CgoJY29uc29sZS53YXJuKCAnVEhSRUUuRFJBQ09Mb2FkZXI6IFRoZSAucmVsZWFzZURlY29kZXJNb2R1bGUoKSBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGluc3RhbmNlIG1ldGhvZHMuJyApOwoKfTsKCi8qKiBAZGVwcmVjYXRlZCAqLwpUSFJFRS5EUkFDT0xvYWRlci5nZXREZWNvZGVyTW9kdWxlID0gZnVuY3Rpb24gKCkgewoKCWNvbnNvbGUud2FybiggJ1RIUkVFLkRSQUNPTG9hZGVyOiBUaGUgLmdldERlY29kZXJNb2R1bGUoKSBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGluc3RhbmNlIG1ldGhvZHMuJyApOwoKfTsKCn0se31dLDM5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEBhdXRob3IgUmljaCBUaWJiZXR0IC8gaHR0cHM6Ly9naXRodWIuY29tL3JpY2h0cgogKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwogKiBAYXV0aG9yIFRvbnkgUGFyaXNpIC8gaHR0cDovL3d3dy50b255cGFyaXNpLmNvbS8KICogQGF1dGhvciBUYWthaGlybyAvIGh0dHBzOi8vZ2l0aHViLmNvbS90YWthaGlyb3gKICogQGF1dGhvciBEb24gTWNDdXJkeSAvIGh0dHBzOi8vd3d3LmRvbm1jY3VyZHkuY29tCiAqLwoKVEhSRUUuR0xURkxvYWRlciA9ICggZnVuY3Rpb24gKCkgewoKCWZ1bmN0aW9uIEdMVEZMb2FkZXIoIG1hbmFnZXIgKSB7CgoJCVRIUkVFLkxvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7CgoJCXRoaXMuZHJhY29Mb2FkZXIgPSBudWxsOwoJCXRoaXMuZGRzTG9hZGVyID0gbnVsbDsKCgl9CgoJR0xURkxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBUSFJFRS5Mb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IEdMVEZMb2FkZXIsCgoJCWxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgoJCQl2YXIgc2NvcGUgPSB0aGlzOwoKCQkJdmFyIHJlc291cmNlUGF0aDsKCgkJCWlmICggdGhpcy5yZXNvdXJjZVBhdGggIT09ICcnICkgewoKCQkJCXJlc291cmNlUGF0aCA9IHRoaXMucmVzb3VyY2VQYXRoOwoKCQkJfSBlbHNlIGlmICggdGhpcy5wYXRoICE9PSAnJyApIHsKCgkJCQlyZXNvdXJjZVBhdGggPSB0aGlzLnBhdGg7CgoJCQl9IGVsc2UgewoKCQkJCXJlc291cmNlUGF0aCA9IFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKTsKCgkJCX0KCgkJCS8vIFRlbGxzIHRoZSBMb2FkaW5nTWFuYWdlciB0byB0cmFjayBhbiBleHRyYSBpdGVtLCB3aGljaCByZXNvbHZlcyBhZnRlcgoJCQkvLyB0aGUgbW9kZWwgaXMgZnVsbHkgbG9hZGVkLiBUaGlzIG1lYW5zIHRoZSBjb3VudCBvZiBpdGVtcyBsb2FkZWQgd2lsbAoJCQkvLyBiZSBpbmNvcnJlY3QsIGJ1dCBlbnN1cmVzIG1hbmFnZXIub25Mb2FkKCkgZG9lcyBub3QgZmlyZSBlYXJseS4KCQkJc2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApOwoKCQkJdmFyIF9vbkVycm9yID0gZnVuY3Rpb24gKCBlICkgewoKCQkJCWlmICggb25FcnJvciApIHsKCgkJCQkJb25FcnJvciggZSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCWNvbnNvbGUuZXJyb3IoIGUgKTsKCgkJCQl9CgoJCQkJc2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApOwoJCQkJc2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTsKCgkJCX07CgoJCQl2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTsKCgkJCWxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTsKCQkJbG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApOwoKCQkJaWYgKCBzY29wZS5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycgKSB7CgoJCQkJbG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdHJ1ZSApOwoKCQkJfQoKCQkJbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBkYXRhICkgewoKCQkJCXRyeSB7CgoJCQkJCXNjb3BlLnBhcnNlKCBkYXRhLCByZXNvdXJjZVBhdGgsIGZ1bmN0aW9uICggZ2x0ZiApIHsKCgkJCQkJCW9uTG9hZCggZ2x0ZiApOwoKCQkJCQkJc2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTsKCgkJCQkJfSwgX29uRXJyb3IgKTsKCgkJCQl9IGNhdGNoICggZSApIHsKCgkJCQkJX29uRXJyb3IoIGUgKTsKCgkJCQl9CgoJCQl9LCBvblByb2dyZXNzLCBfb25FcnJvciApOwoKCQl9LAoKCQlzZXREUkFDT0xvYWRlcjogZnVuY3Rpb24gKCBkcmFjb0xvYWRlciApIHsKCgkJCXRoaXMuZHJhY29Mb2FkZXIgPSBkcmFjb0xvYWRlcjsKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXNldEREU0xvYWRlcjogZnVuY3Rpb24gKCBkZHNMb2FkZXIgKSB7CgoJCQl0aGlzLmRkc0xvYWRlciA9IGRkc0xvYWRlcjsKCQkJcmV0dXJuIHRoaXM7CgoJCX0sCgoJCXBhcnNlOiBmdW5jdGlvbiAoIGRhdGEsIHBhdGgsIG9uTG9hZCwgb25FcnJvciApIHsKCgkJCXZhciBjb250ZW50OwoJCQl2YXIgZXh0ZW5zaW9ucyA9IHt9OwoKCQkJaWYgKCB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgKSB7CgoJCQkJY29udGVudCA9IGRhdGE7CgoJCQl9IGVsc2UgewoKCQkJCXZhciBtYWdpYyA9IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhLCAwLCA0ICkgKTsKCgkJCQlpZiAoIG1hZ2ljID09PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyApIHsKCgkJCQkJdHJ5IHsKCgkJCQkJCWV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0gPSBuZXcgR0xURkJpbmFyeUV4dGVuc2lvbiggZGF0YSApOwoKCQkJCQl9IGNhdGNoICggZXJyb3IgKSB7CgoJCQkJCQlpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlcnJvciApOwoJCQkJCQlyZXR1cm47CgoJCQkJCX0KCgkJCQkJY29udGVudCA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0uY29udGVudDsKCgkJCQl9IGVsc2UgewoKCQkJCQljb250ZW50ID0gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEgKSApOwoKCQkJCX0KCgkJCX0KCgkJCXZhciBqc29uID0gSlNPTi5wYXJzZSggY29udGVudCApOwoKCQkJaWYgKCBqc29uLmFzc2V0ID09PSB1bmRlZmluZWQgfHwganNvbi5hc3NldC52ZXJzaW9uWyAwIF0gPCAyICkgewoKCQkJCWlmICggb25FcnJvciApIG9uRXJyb3IoIG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGFzc2V0LiBnbFRGIHZlcnNpb25zID49Mi4wIGFyZSBzdXBwb3J0ZWQuJyApICk7CgkJCQlyZXR1cm47CgoJCQl9CgoJCQlpZiAoIGpzb24uZXh0ZW5zaW9uc1VzZWQgKSB7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5leHRlbnNpb25zVXNlZC5sZW5ndGg7ICsrIGkgKSB7CgoJCQkJCXZhciBleHRlbnNpb25OYW1lID0ganNvbi5leHRlbnNpb25zVXNlZFsgaSBdOwoJCQkJCXZhciBleHRlbnNpb25zUmVxdWlyZWQgPSBqc29uLmV4dGVuc2lvbnNSZXF1aXJlZCB8fCBbXTsKCgkJCQkJc3dpdGNoICggZXh0ZW5zaW9uTmFtZSApIHsKCgkJCQkJCWNhc2UgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMOgoJCQkJCQkJZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQ6CgkJCQkJCQlleHRlbnNpb25zWyBleHRlbnNpb25OYW1lIF0gPSBuZXcgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uKCk7CgkJCQkJCQlicmVhazsKCgkJCQkJCWNhc2UgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOgoJCQkJCQkJZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOgoJCQkJCQkJZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbigganNvbiwgdGhpcy5kcmFjb0xvYWRlciApOwoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUzoKCQkJCQkJCWV4dGVuc2lvbnNbIGV4dGVuc2lvbk5hbWUgXSA9IG5ldyBHTFRGVGV4dHVyZUREU0V4dGVuc2lvbiggdGhpcy5kZHNMb2FkZXIgKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQkJY2FzZSBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STToKCQkJCQkJCWV4dGVuc2lvbnNbIGV4dGVuc2lvbk5hbWUgXSA9IG5ldyBHTFRGVGV4dHVyZVRyYW5zZm9ybUV4dGVuc2lvbigpOwoJCQkJCQkJYnJlYWs7CgoJCQkJCQljYXNlIEVYVEVOU0lPTlMuS0hSX01FU0hfUVVBTlRJWkFUSU9OOgoJCQkJCQkJZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZNZXNoUXVhbnRpemF0aW9uRXh0ZW5zaW9uKCk7CgkJCQkJCQlicmVhazsKCgkJCQkJCWRlZmF1bHQ6CgoJCQkJCQkJaWYgKCBleHRlbnNpb25zUmVxdWlyZWQuaW5kZXhPZiggZXh0ZW5zaW9uTmFtZSApID49IDAgKSB7CgoJCQkJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IFVua25vd24gZXh0ZW5zaW9uICInICsgZXh0ZW5zaW9uTmFtZSArICciLicgKTsKCgkJCQkJCQl9CgoJCQkJCX0KCgkJCQl9CgoJCQl9CgoJCQl2YXIgcGFyc2VyID0gbmV3IEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIHsKCgkJCQlwYXRoOiBwYXRoIHx8IHRoaXMucmVzb3VyY2VQYXRoIHx8ICcnLAoJCQkJY3Jvc3NPcmlnaW46IHRoaXMuY3Jvc3NPcmlnaW4sCgkJCQltYW5hZ2VyOiB0aGlzLm1hbmFnZXIKCgkJCX0gKTsKCgkJCXBhcnNlci5wYXJzZSggb25Mb2FkLCBvbkVycm9yICk7CgoJCX0KCgl9ICk7CgoJLyogR0xURlJFR0lTVFJZICovCgoJZnVuY3Rpb24gR0xURlJlZ2lzdHJ5KCkgewoKCQl2YXIgb2JqZWN0cyA9IHt9OwoKCQlyZXR1cm4JewoKCQkJZ2V0OiBmdW5jdGlvbiAoIGtleSApIHsKCgkJCQlyZXR1cm4gb2JqZWN0c1sga2V5IF07CgoJCQl9LAoKCQkJYWRkOiBmdW5jdGlvbiAoIGtleSwgb2JqZWN0ICkgewoKCQkJCW9iamVjdHNbIGtleSBdID0gb2JqZWN0OwoKCQkJfSwKCgkJCXJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7CgoJCQkJZGVsZXRlIG9iamVjdHNbIGtleSBdOwoKCQkJfSwKCgkJCXJlbW92ZUFsbDogZnVuY3Rpb24gKCkgewoKCQkJCW9iamVjdHMgPSB7fTsKCgkJCX0KCgkJfTsKCgl9CgoJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCS8qKioqKioqKioqIEVYVEVOU0lPTlMgKioqKioqKioqKiovCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCXZhciBFWFRFTlNJT05TID0gewoJCUtIUl9CSU5BUllfR0xURjogJ0tIUl9iaW5hcnlfZ2xURicsCgkJS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT046ICdLSFJfZHJhY29fbWVzaF9jb21wcmVzc2lvbicsCgkJS0hSX0xJR0hUU19QVU5DVFVBTDogJ0tIUl9saWdodHNfcHVuY3R1YWwnLAoJCUtIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1M6ICdLSFJfbWF0ZXJpYWxzX3BiclNwZWN1bGFyR2xvc3NpbmVzcycsCgkJS0hSX01BVEVSSUFMU19VTkxJVDogJ0tIUl9tYXRlcmlhbHNfdW5saXQnLAoJCUtIUl9URVhUVVJFX1RSQU5TRk9STTogJ0tIUl90ZXh0dXJlX3RyYW5zZm9ybScsCgkJS0hSX01FU0hfUVVBTlRJWkFUSU9OOiAnS0hSX21lc2hfcXVhbnRpemF0aW9uJywKCQlNU0ZUX1RFWFRVUkVfRERTOiAnTVNGVF90ZXh0dXJlX2RkcycKCX07CgoJLyoqCgkgKiBERFMgVGV4dHVyZSBFeHRlbnNpb24KCSAqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvVmVuZG9yL01TRlRfdGV4dHVyZV9kZHMKCSAqCgkgKi8KCWZ1bmN0aW9uIEdMVEZUZXh0dXJlRERTRXh0ZW5zaW9uKCBkZHNMb2FkZXIgKSB7CgoJCWlmICggISBkZHNMb2FkZXIgKSB7CgoJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBBdHRlbXB0aW5nIHRvIGxvYWQgLmRkcyB0ZXh0dXJlIHdpdGhvdXQgaW1wb3J0aW5nIFRIUkVFLkREU0xvYWRlcicgKTsKCgkJfQoKCQl0aGlzLm5hbWUgPSBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFM7CgkJdGhpcy5kZHNMb2FkZXIgPSBkZHNMb2FkZXI7CgoJfQoKCS8qKgoJICogUHVuY3R1YWwgTGlnaHRzIEV4dGVuc2lvbgoJICoKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9saWdodHNfcHVuY3R1YWwKCSAqLwoJZnVuY3Rpb24gR0xURkxpZ2h0c0V4dGVuc2lvbigganNvbiApIHsKCgkJdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMOwoKCQl2YXIgZXh0ZW5zaW9uID0gKCBqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXSApIHx8IHt9OwoJCXRoaXMubGlnaHREZWZzID0gZXh0ZW5zaW9uLmxpZ2h0cyB8fCBbXTsKCgl9CgoJR0xURkxpZ2h0c0V4dGVuc2lvbi5wcm90b3R5cGUubG9hZExpZ2h0ID0gZnVuY3Rpb24gKCBsaWdodEluZGV4ICkgewoKCQl2YXIgbGlnaHREZWYgPSB0aGlzLmxpZ2h0RGVmc1sgbGlnaHRJbmRleCBdOwoJCXZhciBsaWdodE5vZGU7CgoJCXZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvciggMHhmZmZmZmYgKTsKCQlpZiAoIGxpZ2h0RGVmLmNvbG9yICE9PSB1bmRlZmluZWQgKSBjb2xvci5mcm9tQXJyYXkoIGxpZ2h0RGVmLmNvbG9yICk7CgoJCXZhciByYW5nZSA9IGxpZ2h0RGVmLnJhbmdlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5yYW5nZSA6IDA7CgoJCXN3aXRjaCAoIGxpZ2h0RGVmLnR5cGUgKSB7CgoJCQljYXNlICdkaXJlY3Rpb25hbCc6CgkJCQlsaWdodE5vZGUgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggY29sb3IgKTsKCQkJCWxpZ2h0Tm9kZS50YXJnZXQucG9zaXRpb24uc2V0KCAwLCAwLCAtIDEgKTsKCQkJCWxpZ2h0Tm9kZS5hZGQoIGxpZ2h0Tm9kZS50YXJnZXQgKTsKCQkJCWJyZWFrOwoKCQkJY2FzZSAncG9pbnQnOgoJCQkJbGlnaHROb2RlID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoIGNvbG9yICk7CgkJCQlsaWdodE5vZGUuZGlzdGFuY2UgPSByYW5nZTsKCQkJCWJyZWFrOwoKCQkJY2FzZSAnc3BvdCc6CgkJCQlsaWdodE5vZGUgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KCBjb2xvciApOwoJCQkJbGlnaHROb2RlLmRpc3RhbmNlID0gcmFuZ2U7CgkJCQkvLyBIYW5kbGUgc3BvdGxpZ2h0IHByb3BlcnRpZXMuCgkJCQlsaWdodERlZi5zcG90ID0gbGlnaHREZWYuc3BvdCB8fCB7fTsKCQkJCWxpZ2h0RGVmLnNwb3QuaW5uZXJDb25lQW5nbGUgPSBsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlIDogMDsKCQkJCWxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgPSBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlIDogTWF0aC5QSSAvIDQuMDsKCQkJCWxpZ2h0Tm9kZS5hbmdsZSA9IGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGU7CgkJCQlsaWdodE5vZGUucGVudW1icmEgPSAxLjAgLSBsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlIC8gbGlnaHREZWYuc3BvdC5vdXRlckNvbmVBbmdsZTsKCQkJCWxpZ2h0Tm9kZS50YXJnZXQucG9zaXRpb24uc2V0KCAwLCAwLCAtIDEgKTsKCQkJCWxpZ2h0Tm9kZS5hZGQoIGxpZ2h0Tm9kZS50YXJnZXQgKTsKCQkJCWJyZWFrOwoKCQkJZGVmYXVsdDoKCQkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFVuZXhwZWN0ZWQgbGlnaHQgdHlwZSwgIicgKyBsaWdodERlZi50eXBlICsgJyIuJyApOwoKCQl9CgoJCS8vIFNvbWUgbGlnaHRzIChlLmcuIHNwb3QpIGRlZmF1bHQgdG8gYSBwb3NpdGlvbiBvdGhlciB0aGFuIHRoZSBvcmlnaW4uIFJlc2V0IHRoZSBwb3NpdGlvbgoJCS8vIGhlcmUsIGJlY2F1c2Ugbm9kZS1sZXZlbCBwYXJzaW5nIHdpbGwgb25seSBvdmVycmlkZSBwb3NpdGlvbiBpZiBleHBsaWNpdGx5IHNwZWNpZmllZC4KCQlsaWdodE5vZGUucG9zaXRpb24uc2V0KCAwLCAwLCAwICk7CgoJCWxpZ2h0Tm9kZS5kZWNheSA9IDI7CgoJCWlmICggbGlnaHREZWYuaW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBsaWdodE5vZGUuaW50ZW5zaXR5ID0gbGlnaHREZWYuaW50ZW5zaXR5OwoKCQlsaWdodE5vZGUubmFtZSA9IGxpZ2h0RGVmLm5hbWUgfHwgKCAnbGlnaHRfJyArIGxpZ2h0SW5kZXggKTsKCgkJcmV0dXJuIFByb21pc2UucmVzb2x2ZSggbGlnaHROb2RlICk7CgoJfTsKCgkvKioKCSAqIFVubGl0IE1hdGVyaWFscyBFeHRlbnNpb24KCSAqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfbWF0ZXJpYWxzX3VubGl0CgkgKi8KCWZ1bmN0aW9uIEdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbigpIHsKCgkJdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUOwoKCX0KCglHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24ucHJvdG90eXBlLmdldE1hdGVyaWFsVHlwZSA9IGZ1bmN0aW9uICgpIHsKCgkJcmV0dXJuIFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsOwoKCX07CgoJR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uLnByb3RvdHlwZS5leHRlbmRQYXJhbXMgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyICkgewoKCQl2YXIgcGVuZGluZyA9IFtdOwoKCQltYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvciggMS4wLCAxLjAsIDEuMCApOwoJCW1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSAxLjA7CgoJCXZhciBtZXRhbGxpY1JvdWdobmVzcyA9IG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzOwoKCQlpZiAoIG1ldGFsbGljUm91Z2huZXNzICkgewoKCQkJaWYgKCBBcnJheS5pc0FycmF5KCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3IgKSApIHsKCgkJCQl2YXIgYXJyYXkgPSBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7CgoJCQkJbWF0ZXJpYWxQYXJhbXMuY29sb3IuZnJvbUFycmF5KCBhcnJheSApOwoJCQkJbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07CgoJCQl9CgoJCQlpZiAoIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21hcCcsIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgKSApOwoKCQkJfQoKCQl9CgoJCXJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApOwoKCX07CgoJLyogQklOQVJZIEVYVEVOU0lPTiAqLwoJdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDID0gJ2dsVEYnOwoJdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCA9IDEyOwoJdmFyIEJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMgPSB7IEpTT046IDB4NEU0RjUzNEEsIEJJTjogMHgwMDRFNDk0MiB9OwoKCWZ1bmN0aW9uIEdMVEZCaW5hcnlFeHRlbnNpb24oIGRhdGEgKSB7CgoJCXRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGOwoJCXRoaXMuY29udGVudCA9IG51bGw7CgkJdGhpcy5ib2R5ID0gbnVsbDsKCgkJdmFyIGhlYWRlclZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIDAsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApOwoKCQl0aGlzLmhlYWRlciA9IHsKCQkJbWFnaWM6IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhLnNsaWNlKCAwLCA0ICkgKSApLAoJCQl2ZXJzaW9uOiBoZWFkZXJWaWV3LmdldFVpbnQzMiggNCwgdHJ1ZSApLAoJCQlsZW5ndGg6IGhlYWRlclZpZXcuZ2V0VWludDMyKCA4LCB0cnVlICkKCQl9OwoKCQlpZiAoIHRoaXMuaGVhZGVyLm1hZ2ljICE9PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyApIHsKCgkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGdsVEYtQmluYXJ5IGhlYWRlci4nICk7CgoJCX0gZWxzZSBpZiAoIHRoaXMuaGVhZGVyLnZlcnNpb24gPCAyLjAgKSB7CgoJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBMZWdhY3kgYmluYXJ5IGZpbGUgZGV0ZWN0ZWQuJyApOwoKCQl9CgoJCXZhciBjaHVua1ZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApOwoJCXZhciBjaHVua0luZGV4ID0gMDsKCgkJd2hpbGUgKCBjaHVua0luZGV4IDwgY2h1bmtWaWV3LmJ5dGVMZW5ndGggKSB7CgoJCQl2YXIgY2h1bmtMZW5ndGggPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7CgkJCWNodW5rSW5kZXggKz0gNDsKCgkJCXZhciBjaHVua1R5cGUgPSBjaHVua1ZpZXcuZ2V0VWludDMyKCBjaHVua0luZGV4LCB0cnVlICk7CgkJCWNodW5rSW5kZXggKz0gNDsKCgkJCWlmICggY2h1bmtUeXBlID09PSBCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTLkpTT04gKSB7CgoJCQkJdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KCBkYXRhLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4LCBjaHVua0xlbmd0aCApOwoJCQkJdGhpcy5jb250ZW50ID0gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggY29udGVudEFycmF5ICk7CgoJCQl9IGVsc2UgaWYgKCBjaHVua1R5cGUgPT09IEJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMuQklOICkgewoKCQkJCXZhciBieXRlT2Zmc2V0ID0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICsgY2h1bmtJbmRleDsKCQkJCXRoaXMuYm9keSA9IGRhdGEuc2xpY2UoIGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBjaHVua0xlbmd0aCApOwoKCQkJfQoKCQkJLy8gQ2xpZW50cyBtdXN0IGlnbm9yZSBjaHVua3Mgd2l0aCB1bmtub3duIHR5cGVzLgoKCQkJY2h1bmtJbmRleCArPSBjaHVua0xlbmd0aDsKCgkJfQoKCQlpZiAoIHRoaXMuY29udGVudCA9PT0gbnVsbCApIHsKCgkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IEpTT04gY29udGVudCBub3QgZm91bmQuJyApOwoKCQl9CgoJfQoKCS8qKgoJICogRFJBQ08gTWVzaCBDb21wcmVzc2lvbiBFeHRlbnNpb24KCSAqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfZHJhY29fbWVzaF9jb21wcmVzc2lvbgoJICovCglmdW5jdGlvbiBHTFRGRHJhY29NZXNoQ29tcHJlc3Npb25FeHRlbnNpb24oIGpzb24sIGRyYWNvTG9hZGVyICkgewoKCQlpZiAoICEgZHJhY29Mb2FkZXIgKSB7CgoJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBObyBEUkFDT0xvYWRlciBpbnN0YW5jZSBwcm92aWRlZC4nICk7CgoJCX0KCgkJdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTjsKCQl0aGlzLmpzb24gPSBqc29uOwoJCXRoaXMuZHJhY29Mb2FkZXIgPSBkcmFjb0xvYWRlcjsKCQl0aGlzLmRyYWNvTG9hZGVyLnByZWxvYWQoKTsKCgl9CgoJR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uLnByb3RvdHlwZS5kZWNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiAoIHByaW1pdGl2ZSwgcGFyc2VyICkgewoKCQl2YXIganNvbiA9IHRoaXMuanNvbjsKCQl2YXIgZHJhY29Mb2FkZXIgPSB0aGlzLmRyYWNvTG9hZGVyOwoJCXZhciBidWZmZXJWaWV3SW5kZXggPSBwcmltaXRpdmUuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF0uYnVmZmVyVmlldzsKCQl2YXIgZ2x0ZkF0dHJpYnV0ZU1hcCA9IHByaW1pdGl2ZS5leHRlbnNpb25zWyB0aGlzLm5hbWUgXS5hdHRyaWJ1dGVzOwoJCXZhciB0aHJlZUF0dHJpYnV0ZU1hcCA9IHt9OwoJCXZhciBhdHRyaWJ1dGVOb3JtYWxpemVkTWFwID0ge307CgkJdmFyIGF0dHJpYnV0ZVR5cGVNYXAgPSB7fTsKCgkJZm9yICggdmFyIGF0dHJpYnV0ZU5hbWUgaW4gZ2x0ZkF0dHJpYnV0ZU1hcCApIHsKCgkJCXZhciB0aHJlZUF0dHJpYnV0ZU5hbWUgPSBBVFRSSUJVVEVTWyBhdHRyaWJ1dGVOYW1lIF0gfHwgYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpOwoKCQkJdGhyZWVBdHRyaWJ1dGVNYXBbIHRocmVlQXR0cmlidXRlTmFtZSBdID0gZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdOwoKCQl9CgoJCWZvciAoIGF0dHJpYnV0ZU5hbWUgaW4gcHJpbWl0aXZlLmF0dHJpYnV0ZXMgKSB7CgoJCQl2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1sgYXR0cmlidXRlTmFtZSBdIHx8IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTsKCgkJCWlmICggZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIGFjY2Vzc29yRGVmID0ganNvbi5hY2Nlc3NvcnNbIHByaW1pdGl2ZS5hdHRyaWJ1dGVzWyBhdHRyaWJ1dGVOYW1lIF0gXTsKCQkJCXZhciBjb21wb25lbnRUeXBlID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTWyBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlIF07CgoJCQkJYXR0cmlidXRlVHlwZU1hcFsgdGhyZWVBdHRyaWJ1dGVOYW1lIF0gPSBjb21wb25lbnRUeXBlOwoJCQkJYXR0cmlidXRlTm9ybWFsaXplZE1hcFsgdGhyZWVBdHRyaWJ1dGVOYW1lIF0gPSBhY2Nlc3NvckRlZi5ub3JtYWxpemVkID09PSB0cnVlOwoKCQkJfQoKCQl9CgoJCXJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBidWZmZXJWaWV3SW5kZXggKS50aGVuKCBmdW5jdGlvbiAoIGJ1ZmZlclZpZXcgKSB7CgoJCQlyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSApIHsKCgkJCQlkcmFjb0xvYWRlci5kZWNvZGVEcmFjb0ZpbGUoIGJ1ZmZlclZpZXcsIGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7CgoJCQkJCWZvciAoIHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7CgoJCQkJCQl2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sgYXR0cmlidXRlTmFtZSBdOwoJCQkJCQl2YXIgbm9ybWFsaXplZCA9IGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbIGF0dHJpYnV0ZU5hbWUgXTsKCgkJCQkJCWlmICggbm9ybWFsaXplZCAhPT0gdW5kZWZpbmVkICkgYXR0cmlidXRlLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkOwoKCQkJCQl9CgoJCQkJCXJlc29sdmUoIGdlb21ldHJ5ICk7CgoJCQkJfSwgdGhyZWVBdHRyaWJ1dGVNYXAsIGF0dHJpYnV0ZVR5cGVNYXAgKTsKCgkJCX0gKTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBUZXh0dXJlIFRyYW5zZm9ybSBFeHRlbnNpb24KCSAqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfdGV4dHVyZV90cmFuc2Zvcm0KCSAqLwoJZnVuY3Rpb24gR0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24oKSB7CgoJCXRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNOwoKCX0KCglHTFRGVGV4dHVyZVRyYW5zZm9ybUV4dGVuc2lvbi5wcm90b3R5cGUuZXh0ZW5kVGV4dHVyZSA9IGZ1bmN0aW9uICggdGV4dHVyZSwgdHJhbnNmb3JtICkgewoKCQl0ZXh0dXJlID0gdGV4dHVyZS5jbG9uZSgpOwoKCQlpZiAoIHRyYW5zZm9ybS5vZmZzZXQgIT09IHVuZGVmaW5lZCApIHsKCgkJCXRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggdHJhbnNmb3JtLm9mZnNldCApOwoKCQl9CgoJCWlmICggdHJhbnNmb3JtLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB7CgoJCQl0ZXh0dXJlLnJvdGF0aW9uID0gdHJhbnNmb3JtLnJvdGF0aW9uOwoKCQl9CgoJCWlmICggdHJhbnNmb3JtLnNjYWxlICE9PSB1bmRlZmluZWQgKSB7CgoJCQl0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIHRyYW5zZm9ybS5zY2FsZSApOwoKCQl9CgoJCWlmICggdHJhbnNmb3JtLnRleENvb3JkICE9PSB1bmRlZmluZWQgKSB7CgoJCQljb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBDdXN0b20gVVYgc2V0cyBpbiAiJyArIHRoaXMubmFtZSArICciIGV4dGVuc2lvbiBub3QgeWV0IHN1cHBvcnRlZC4nICk7CgoJCX0KCgkJdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7CgoJCXJldHVybiB0ZXh0dXJlOwoKCX07CgoJLyoqCgkgKiBTcGVjdWxhci1HbG9zc2luZXNzIEV4dGVuc2lvbgoJICoKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzCgkgKi8KCWZ1bmN0aW9uIEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKSB7CgoJCXJldHVybiB7CgoJCQluYW1lOiBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MsCgoJCQlzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXM6IFsKCQkJCSdjb2xvcicsCgkJCQknbWFwJywKCQkJCSdsaWdodE1hcCcsCgkJCQknbGlnaHRNYXBJbnRlbnNpdHknLAoJCQkJJ2FvTWFwJywKCQkJCSdhb01hcEludGVuc2l0eScsCgkJCQknZW1pc3NpdmUnLAoJCQkJJ2VtaXNzaXZlSW50ZW5zaXR5JywKCQkJCSdlbWlzc2l2ZU1hcCcsCgkJCQknYnVtcE1hcCcsCgkJCQknYnVtcFNjYWxlJywKCQkJCSdub3JtYWxNYXAnLAoJCQkJJ2Rpc3BsYWNlbWVudE1hcCcsCgkJCQknZGlzcGxhY2VtZW50U2NhbGUnLAoJCQkJJ2Rpc3BsYWNlbWVudEJpYXMnLAoJCQkJJ3NwZWN1bGFyTWFwJywKCQkJCSdzcGVjdWxhcicsCgkJCQknZ2xvc3NpbmVzc01hcCcsCgkJCQknZ2xvc3NpbmVzcycsCgkJCQknYWxwaGFNYXAnLAoJCQkJJ2Vudk1hcCcsCgkJCQknZW52TWFwSW50ZW5zaXR5JywKCQkJCSdyZWZyYWN0aW9uUmF0aW8nLAoJCQldLAoKCQkJZ2V0TWF0ZXJpYWxUeXBlOiBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIFRIUkVFLlNoYWRlck1hdGVyaWFsOwoKCQkJfSwKCgkJCWV4dGVuZFBhcmFtczogZnVuY3Rpb24gKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApIHsKCgkJCQl2YXIgcGJyU3BlY3VsYXJHbG9zc2luZXNzID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF07CgoJCQkJdmFyIHNoYWRlciA9IFRIUkVFLlNoYWRlckxpYlsgJ3N0YW5kYXJkJyBdOwoKCQkJCXZhciB1bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoIHNoYWRlci51bmlmb3JtcyApOwoKCQkJCXZhciBzcGVjdWxhck1hcFBhcnNGcmFnbWVudENodW5rID0gWwoJCQkJCScjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJywKCQkJCQknCXVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwOycsCgkJCQkJJyNlbmRpZicKCQkJCV0uam9pbiggJ1xuJyApOwoKCQkJCXZhciBnbG9zc2luZXNzTWFwUGFyc0ZyYWdtZW50Q2h1bmsgPSBbCgkJCQkJJyNpZmRlZiBVU0VfR0xPU1NJTkVTU01BUCcsCgkJCQkJJwl1bmlmb3JtIHNhbXBsZXIyRCBnbG9zc2luZXNzTWFwOycsCgkJCQkJJyNlbmRpZicKCQkJCV0uam9pbiggJ1xuJyApOwoKCQkJCXZhciBzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsgPSBbCgkJCQkJJ3ZlYzMgc3BlY3VsYXJGYWN0b3IgPSBzcGVjdWxhcjsnLAoJCQkJCScjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJywKCQkJCQknCXZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApOycsCgkJCQkJJwl0ZXhlbFNwZWN1bGFyID0gc1JHQlRvTGluZWFyKCB0ZXhlbFNwZWN1bGFyICk7JywKCQkJCQknCS8vIHJlYWRzIGNoYW5uZWwgUkdCLCBjb21wYXRpYmxlIHdpdGggYSBnbFRGIFNwZWN1bGFyLUdsb3NzaW5lc3MgKFJHQkEpIHRleHR1cmUnLAoJCQkJCScJc3BlY3VsYXJGYWN0b3IgKj0gdGV4ZWxTcGVjdWxhci5yZ2I7JywKCQkJCQknI2VuZGlmJwoJCQkJXS5qb2luKCAnXG4nICk7CgoJCQkJdmFyIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rID0gWwoJCQkJCSdmbG9hdCBnbG9zc2luZXNzRmFjdG9yID0gZ2xvc3NpbmVzczsnLAoJCQkJCScjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLAoJCQkJCScJdmVjNCB0ZXhlbEdsb3NzaW5lc3MgPSB0ZXh0dXJlMkQoIGdsb3NzaW5lc3NNYXAsIHZVdiApOycsCgkJCQkJJwkvLyByZWFkcyBjaGFubmVsIEEsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsCgkJCQkJJwlnbG9zc2luZXNzRmFjdG9yICo9IHRleGVsR2xvc3NpbmVzcy5hOycsCgkJCQkJJyNlbmRpZicKCQkJCV0uam9pbiggJ1xuJyApOwoKCQkJCXZhciBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayA9IFsKCQkJCQknUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDsnLAoJCQkJCSdtYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiOycsCgkJCQkJJ21hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAoIDEuMCAtIGdsb3NzaW5lc3NGYWN0b3IsIDAuMDQsIDEuMCApOycsCgkJCQkJJ21hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhckZhY3Rvci5yZ2I7JywKCQkJCV0uam9pbiggJ1xuJyApOwoKCQkJCXZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcgoJCQkJCS5yZXBsYWNlKCAndW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7JywgJ3VuaWZvcm0gdmVjMyBzcGVjdWxhcjsnICkKCQkJCQkucmVwbGFjZSggJ3VuaWZvcm0gZmxvYXQgbWV0YWxuZXNzOycsICd1bmlmb3JtIGZsb2F0IGdsb3NzaW5lc3M7JyApCgkJCQkJLnJlcGxhY2UoICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+Jywgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayApCgkJCQkJLnJlcGxhY2UoICcjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcFBhcnNGcmFnbWVudENodW5rICkKCQkJCQkucmVwbGFjZSggJyNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfZnJhZ21lbnQ+Jywgc3BlY3VsYXJNYXBGcmFnbWVudENodW5rICkKCQkJCQkucmVwbGFjZSggJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsgKQoJCQkJCS5yZXBsYWNlKCAnI2luY2x1ZGUgPGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudD4nLCBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayApOwoKCQkJCWRlbGV0ZSB1bmlmb3Jtcy5yb3VnaG5lc3M7CgkJCQlkZWxldGUgdW5pZm9ybXMubWV0YWxuZXNzOwoJCQkJZGVsZXRlIHVuaWZvcm1zLnJvdWdobmVzc01hcDsKCQkJCWRlbGV0ZSB1bmlmb3Jtcy5tZXRhbG5lc3NNYXA7CgoJCQkJdW5pZm9ybXMuc3BlY3VsYXIgPSB7IHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoKS5zZXRIZXgoIDB4MTExMTExICkgfTsKCQkJCXVuaWZvcm1zLmdsb3NzaW5lc3MgPSB7IHZhbHVlOiAwLjUgfTsKCQkJCXVuaWZvcm1zLnNwZWN1bGFyTWFwID0geyB2YWx1ZTogbnVsbCB9OwoJCQkJdW5pZm9ybXMuZ2xvc3NpbmVzc01hcCA9IHsgdmFsdWU6IG51bGwgfTsKCgkJCQltYXRlcmlhbFBhcmFtcy52ZXJ0ZXhTaGFkZXIgPSBzaGFkZXIudmVydGV4U2hhZGVyOwoJCQkJbWF0ZXJpYWxQYXJhbXMuZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjsKCQkJCW1hdGVyaWFsUGFyYW1zLnVuaWZvcm1zID0gdW5pZm9ybXM7CgkJCQltYXRlcmlhbFBhcmFtcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9OwoKCQkJCW1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCAxLjAsIDEuMCwgMS4wICk7CgkJCQltYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gMS4wOwoKCQkJCXZhciBwZW5kaW5nID0gW107CgoJCQkJaWYgKCBBcnJheS5pc0FycmF5KCBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvciApICkgewoKCQkJCQl2YXIgYXJyYXkgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjsKCgkJCQkJbWF0ZXJpYWxQYXJhbXMuY29sb3IuZnJvbUFycmF5KCBhcnJheSApOwoJCQkJCW1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSBhcnJheVsgMyBdOwoKCQkJCX0KCgkJCQlpZiAoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21hcCcsIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSApICk7CgoJCQkJfQoKCQkJCW1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IFRIUkVFLkNvbG9yKCAwLjAsIDAuMCwgMC4wICk7CgkJCQltYXRlcmlhbFBhcmFtcy5nbG9zc2luZXNzID0gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmdsb3NzaW5lc3NGYWN0b3IgIT09IHVuZGVmaW5lZCA/IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5nbG9zc2luZXNzRmFjdG9yIDogMS4wOwoJCQkJbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXIgPSBuZXcgVEhSRUUuQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTsKCgkJCQlpZiAoIEFycmF5LmlzQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckZhY3RvciApICkgewoKCQkJCQltYXRlcmlhbFBhcmFtcy5zcGVjdWxhci5mcm9tQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckZhY3RvciApOwoKCQkJCX0KCgkJCQlpZiAoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXZhciBzcGVjR2xvc3NNYXBEZWYgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZTsKCQkJCQlwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2dsb3NzaW5lc3NNYXAnLCBzcGVjR2xvc3NNYXBEZWYgKSApOwoJCQkJCXBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnc3BlY3VsYXJNYXAnLCBzcGVjR2xvc3NNYXBEZWYgKSApOwoKCQkJCX0KCgkJCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTsKCgkJCX0sCgoJCQljcmVhdGVNYXRlcmlhbDogZnVuY3Rpb24gKCBwYXJhbXMgKSB7CgoJCQkJLy8gc2V0dXAgbWF0ZXJpYWwgcHJvcGVydGllcyBiYXNlZCBvbiBNZXNoU3RhbmRhcmRNYXRlcmlhbCBmb3IgU3BlY3VsYXItR2xvc3NpbmVzcwoKCQkJCXZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCggewoJCQkJCWRlZmluZXM6IHBhcmFtcy5kZWZpbmVzLAoJCQkJCXZlcnRleFNoYWRlcjogcGFyYW1zLnZlcnRleFNoYWRlciwKCQkJCQlmcmFnbWVudFNoYWRlcjogcGFyYW1zLmZyYWdtZW50U2hhZGVyLAoJCQkJCXVuaWZvcm1zOiBwYXJhbXMudW5pZm9ybXMsCgkJCQkJZm9nOiB0cnVlLAoJCQkJCWxpZ2h0czogdHJ1ZSwKCQkJCQlvcGFjaXR5OiBwYXJhbXMub3BhY2l0eSwKCQkJCQl0cmFuc3BhcmVudDogcGFyYW1zLnRyYW5zcGFyZW50CgkJCQl9ICk7CgoJCQkJbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPSB0cnVlOwoKCQkJCW1hdGVyaWFsLmNvbG9yID0gcGFyYW1zLmNvbG9yOwoKCQkJCW1hdGVyaWFsLm1hcCA9IHBhcmFtcy5tYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMubWFwOwoKCQkJCW1hdGVyaWFsLmxpZ2h0TWFwID0gbnVsbDsKCQkJCW1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wOwoKCQkJCW1hdGVyaWFsLmFvTWFwID0gcGFyYW1zLmFvTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmFvTWFwOwoJCQkJbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSAxLjA7CgoJCQkJbWF0ZXJpYWwuZW1pc3NpdmUgPSBwYXJhbXMuZW1pc3NpdmU7CgkJCQltYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDsKCQkJCW1hdGVyaWFsLmVtaXNzaXZlTWFwID0gcGFyYW1zLmVtaXNzaXZlTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmVtaXNzaXZlTWFwOwoKCQkJCW1hdGVyaWFsLmJ1bXBNYXAgPSBwYXJhbXMuYnVtcE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5idW1wTWFwOwoJCQkJbWF0ZXJpYWwuYnVtcFNjYWxlID0gMTsKCgkJCQltYXRlcmlhbC5ub3JtYWxNYXAgPSBwYXJhbXMubm9ybWFsTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLm5vcm1hbE1hcDsKCgkJCQlpZiAoIHBhcmFtcy5ub3JtYWxTY2FsZSApIG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gcGFyYW1zLm5vcm1hbFNjYWxlOwoKCQkJCW1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7CgkJCQltYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7CgkJCQltYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzID0gMDsKCgkJCQltYXRlcmlhbC5zcGVjdWxhck1hcCA9IHBhcmFtcy5zcGVjdWxhck1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5zcGVjdWxhck1hcDsKCQkJCW1hdGVyaWFsLnNwZWN1bGFyID0gcGFyYW1zLnNwZWN1bGFyOwoKCQkJCW1hdGVyaWFsLmdsb3NzaW5lc3NNYXAgPSBwYXJhbXMuZ2xvc3NpbmVzc01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5nbG9zc2luZXNzTWFwOwoJCQkJbWF0ZXJpYWwuZ2xvc3NpbmVzcyA9IHBhcmFtcy5nbG9zc2luZXNzOwoKCQkJCW1hdGVyaWFsLmFscGhhTWFwID0gbnVsbDsKCgkJCQltYXRlcmlhbC5lbnZNYXAgPSBwYXJhbXMuZW52TWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmVudk1hcDsKCQkJCW1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IDEuMDsKCgkJCQltYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4OwoKCQkJCW1hdGVyaWFsLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgPSB0cnVlOwoKCQkJCXJldHVybiBtYXRlcmlhbDsKCgkJCX0sCgoJCQkvKioKCQkJICogQ2xvbmVzIGEgR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsIGluc3RhbmNlLiBUaGUgU2hhZGVyTWF0ZXJpYWwuY29weSgpIG1ldGhvZCBjYW4KCQkJICogY29weSBvbmx5IHByb3BlcnRpZXMgaXQga25vd3MgYWJvdXQgb3IgaW5oZXJpdHMsIGFuZCBtaXNzZXMgbWFueSBwcm9wZXJ0aWVzIHRoYXQgd291bGQKCQkJICogbm9ybWFsbHkgYmUgZGVmaW5lZCBieSBNZXNoU3RhbmRhcmRNYXRlcmlhbC4KCQkJICoKCQkJICogVGhpcyBtZXRob2QgYWxsb3dzIEdMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbHMgdG8gYmUgY2xvbmVkIGluIHRoZSBwcm9jZXNzIG9mCgkJCSAqIGxvYWRpbmcgYSBnbFRGIG1vZGVsLCBidXQgY2xvbmluZyBsYXRlciAoZS5nLiBieSB0aGUgdXNlcikgd291bGQgcmVxdWlyZSB0aGVzZSBjaGFuZ2VzCgkJCSAqIEFORCBhbHNvIHVwZGF0aW5nIGAub25CZWZvcmVSZW5kZXJgIG9uIHRoZSBwYXJlbnQgbWVzaC4KCQkJICoKCQkJICogQHBhcmFtICB7VEhSRUUuU2hhZGVyTWF0ZXJpYWx9IHNvdXJjZQoJCQkgKiBAcmV0dXJuIHtUSFJFRS5TaGFkZXJNYXRlcmlhbH0KCQkJICovCgkJCWNsb25lTWF0ZXJpYWw6IGZ1bmN0aW9uICggc291cmNlICkgewoKCQkJCXZhciB0YXJnZXQgPSBzb3VyY2UuY2xvbmUoKTsKCgkJCQl0YXJnZXQuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPSB0cnVlOwoKCQkJCXZhciBwYXJhbXMgPSB0aGlzLnNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtczsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQl2YXIgdmFsdWUgPSBzb3VyY2VbIHBhcmFtc1sgaSBdIF07CgkJCQkJdGFyZ2V0WyBwYXJhbXNbIGkgXSBdID0gKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkgPyB2YWx1ZS5jbG9uZSgpIDogdmFsdWU7CgoJCQkJfQoKCQkJCXJldHVybiB0YXJnZXQ7CgoJCQl9LAoKCQkJLy8gSGVyZSdzIGJhc2VkIG9uIHJlZnJlc2hVbmlmb3Jtc0NvbW1vbigpIGFuZCByZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCgpIGluIFdlYkdMUmVuZGVyZXIuCgkJCXJlZnJlc2hVbmlmb3JtczogZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsICkgewoKCQkJCWlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgIT09IHRydWUgKSB7CgoJCQkJCXJldHVybjsKCgkJCQl9CgoJCQkJdmFyIHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7CgkJCQl2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7CgoJCQkJdW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7CgoJCQkJdW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwoJCQkJdW5pZm9ybXMuZW1pc3NpdmUudmFsdWUuY29weSggbWF0ZXJpYWwuZW1pc3NpdmUgKS5tdWx0aXBseVNjYWxhciggbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgKTsKCgkJCQl1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7CgkJCQl1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwOwoJCQkJdW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDsKCgkJCQl1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwOwoJCQkJdW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTsKCgkJCQl1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwOwoJCQkJdW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTsKCgkJCQkvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXMKCQkJCS8vIDEuIGNvbG9yIG1hcAoJCQkJLy8gMi4gc3BlY3VsYXIgbWFwCgkJCQkvLyAzLiBub3JtYWwgbWFwCgkJCQkvLyA0LiBidW1wIG1hcAoJCQkJLy8gNS4gYWxwaGEgbWFwCgkJCQkvLyA2LiBlbWlzc2l2ZSBtYXAKCgkJCQl2YXIgdXZTY2FsZU1hcDsKCgkJCQlpZiAoIG1hdGVyaWFsLm1hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwOwoKCQkJCX0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7CgoJCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5ub3JtYWxNYXA7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmJ1bXBNYXA7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmdsb3NzaW5lc3NNYXA7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7CgoJCQkJCXV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDsKCgkJCQl9IGVsc2UgaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHsKCgkJCQkJdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwOwoKCQkJCX0KCgkJCQlpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKCQkJCQlpZiAoIHV2U2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHsKCgkJCQkJCXV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7CgoJCQkJCX0KCgkJCQkJaWYgKCB1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7CgoJCQkJCQl1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpOwoKCQkJCQl9CgoJCQkJCXVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7CgoJCQkJfQoKCQkJCWlmICggbWF0ZXJpYWwuZW52TWFwICkgewoKCQkJCQl1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7CgkJCQkJdW5pZm9ybXMuZW52TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5OwoKCQkJCQkvLyBkb24ndCBmbGlwIEN1YmVUZXh0dXJlIGVudk1hcHMsIGZsaXAgZXZlcnl0aGluZyBlbHNlOgoJCQkJCS8vICBXZWJHTFJlbmRlclRhcmdldEN1YmUgd2lsbCBiZSBmbGlwcGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCQkJCS8vICBXZWJHTFJlbmRlclRhcmdldEN1YmUudGV4dHVyZSB3aWxsIGJlIGZsaXBwZWQgYmVjYXVzZSBpdCdzIGEgVGV4dHVyZSBhbmQgTk9UIGEgQ3ViZVRleHR1cmUKCQkJCQkvLyB0aGlzIGNoZWNrIG11c3QgYmUgaGFuZGxlZCBkaWZmZXJlbnRseSwgb3IgcmVtb3ZlZCBlbnRpcmVseSwgaWYgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHVzZXMgYSBDdWJlVGV4dHVyZSBpbiB0aGUgZnV0dXJlCgkJCQkJdW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlID8gLSAxIDogMTsKCgkJCQkJdW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OwoJCQkJCXVuaWZvcm1zLnJlZnJhY3Rpb25SYXRpby52YWx1ZSA9IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbzsKCgkJCQkJdW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwuZW52TWFwICkuX19tYXhNaXBMZXZlbDsKCgkJCQl9CgoJCQkJdW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTsKCQkJCXVuaWZvcm1zLmdsb3NzaW5lc3MudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzOwoKCQkJCXVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzTWFwOwoKCQkJCXVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7CgkJCQl1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDsKCQkJCXVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDsKCgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7CgkJCQl1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlOwoJCQkJdW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7CgoJCQkJaWYgKCB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlICE9PSBudWxsICYmIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9ICcnOwoJCQkJCS8vIHNldCBVU0VfUk9VR0hORVNTTUFQIHRvIGVuYWJsZSB2VXYKCQkJCQlkZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVAgPSAnJzsKCgkJCQl9CgoJCQkJaWYgKCB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlID09PSBudWxsICYmIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJZGVsZXRlIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVA7CgkJCQkJZGVsZXRlIGRlZmluZXMuVVNFX1JPVUdITkVTU01BUDsKCgkJCQl9CgoJCQl9CgoJCX07CgoJfQoKCS8qKgoJICogTWVzaCBRdWFudGl6YXRpb24gRXh0ZW5zaW9uCgkgKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21lc2hfcXVhbnRpemF0aW9uCgkgKi8KCWZ1bmN0aW9uIEdMVEZNZXNoUXVhbnRpemF0aW9uRXh0ZW5zaW9uKCkgewoKCQl0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9NRVNIX1FVQU5USVpBVElPTjsKCgl9CgoJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCS8qKioqKioqKioqIElOVEVSUE9MQVRJT04gKioqKioqKiovCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCS8vIFNwbGluZSBJbnRlcnBvbGF0aW9uCgkvLyBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2FwcGVuZGl4LWMtc3BsaW5lLWludGVycG9sYXRpb24KCWZ1bmN0aW9uIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkgewoKCQlUSFJFRS5JbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7CgoJfQoKCUdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRIUkVFLkludGVycG9sYW50LnByb3RvdHlwZSApOwoJR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQ7CgoJR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8gPSBmdW5jdGlvbiAoIGluZGV4ICkgewoKCQkvLyBDb3BpZXMgYSBzYW1wbGUgdmFsdWUgdG8gdGhlIHJlc3VsdCBidWZmZXIuIFNlZSBkZXNjcmlwdGlvbiBvZiBnbFRGCgkJLy8gQ1VCSUNTUExJTkUgdmFsdWVzIGxheW91dCBpbiBpbnRlcnBvbGF0ZV8oKSBmdW5jdGlvbiBiZWxvdy4KCgkJdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLAoJCQl2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcywKCQkJdmFsdWVTaXplID0gdGhpcy52YWx1ZVNpemUsCgkJCW9mZnNldCA9IGluZGV4ICogdmFsdWVTaXplICogMyArIHZhbHVlU2l6ZTsKCgkJZm9yICggdmFyIGkgPSAwOyBpICE9PSB2YWx1ZVNpemU7IGkgKysgKSB7CgoJCQlyZXN1bHRbIGkgXSA9IHZhbHVlc1sgb2Zmc2V0ICsgaSBdOwoKCQl9CgoJCXJldHVybiByZXN1bHQ7CgoJfTsKCglHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuYmVmb3JlU3RhcnRfID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87CgoJR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmFmdGVyRW5kXyA9IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfOwoKCUdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5pbnRlcnBvbGF0ZV8gPSBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7CgoJCXZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcjsKCQl2YXIgdmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXM7CgkJdmFyIHN0cmlkZSA9IHRoaXMudmFsdWVTaXplOwoKCQl2YXIgc3RyaWRlMiA9IHN0cmlkZSAqIDI7CgkJdmFyIHN0cmlkZTMgPSBzdHJpZGUgKiAzOwoKCQl2YXIgdGQgPSB0MSAtIHQwOwoKCQl2YXIgcCA9ICggdCAtIHQwICkgLyB0ZDsKCQl2YXIgcHAgPSBwICogcDsKCQl2YXIgcHBwID0gcHAgKiBwOwoKCQl2YXIgb2Zmc2V0MSA9IGkxICogc3RyaWRlMzsKCQl2YXIgb2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUzOwoKCQl2YXIgczIgPSAtIDIgKiBwcHAgKyAzICogcHA7CgkJdmFyIHMzID0gcHBwIC0gcHA7CgkJdmFyIHMwID0gMSAtIHMyOwoJCXZhciBzMSA9IHMzIC0gcHAgKyBwOwoKCQkvLyBMYXlvdXQgb2Yga2V5ZnJhbWUgb3V0cHV0IHZhbHVlcyBmb3IgQ1VCSUNTUExJTkUgYW5pbWF0aW9uczoKCQkvLyAgIFsgaW5UYW5nZW50XzEsIHNwbGluZVZlcnRleF8xLCBvdXRUYW5nZW50XzEsIGluVGFuZ2VudF8yLCBzcGxpbmVWZXJ0ZXhfMiwgLi4uIF0KCQlmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgaSArKyApIHsKCgkJCXZhciBwMCA9IHZhbHVlc1sgb2Zmc2V0MCArIGkgKyBzdHJpZGUgXTsgLy8gc3BsaW5lVmVydGV4X2sKCQkJdmFyIG0wID0gdmFsdWVzWyBvZmZzZXQwICsgaSArIHN0cmlkZTIgXSAqIHRkOyAvLyBvdXRUYW5nZW50X2sgKiAodF9rKzEgLSB0X2spCgkJCXZhciBwMSA9IHZhbHVlc1sgb2Zmc2V0MSArIGkgKyBzdHJpZGUgXTsgLy8gc3BsaW5lVmVydGV4X2srMQoJCQl2YXIgbTEgPSB2YWx1ZXNbIG9mZnNldDEgKyBpIF0gKiB0ZDsgLy8gaW5UYW5nZW50X2srMSAqICh0X2srMSAtIHRfaykKCgkJCXJlc3VsdFsgaSBdID0gczAgKiBwMCArIHMxICogbTAgKyBzMiAqIHAxICsgczMgKiBtMTsKCgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoKCX07CgoJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCS8qKioqKioqKioqIElOVEVSTkFMUyAqKioqKioqKioqKiovCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCS8qIENPTlNUQU5UUyAqLwoKCXZhciBXRUJHTF9DT05TVEFOVFMgPSB7CgkJRkxPQVQ6IDUxMjYsCgkJLy9GTE9BVF9NQVQyOiAzNTY3NCwKCQlGTE9BVF9NQVQzOiAzNTY3NSwKCQlGTE9BVF9NQVQ0OiAzNTY3NiwKCQlGTE9BVF9WRUMyOiAzNTY2NCwKCQlGTE9BVF9WRUMzOiAzNTY2NSwKCQlGTE9BVF9WRUM0OiAzNTY2NiwKCQlMSU5FQVI6IDk3MjksCgkJUkVQRUFUOiAxMDQ5NywKCQlTQU1QTEVSXzJEOiAzNTY3OCwKCQlQT0lOVFM6IDAsCgkJTElORVM6IDEsCgkJTElORV9MT09QOiAyLAoJCUxJTkVfU1RSSVA6IDMsCgkJVFJJQU5HTEVTOiA0LAoJCVRSSUFOR0xFX1NUUklQOiA1LAoJCVRSSUFOR0xFX0ZBTjogNiwKCQlVTlNJR05FRF9CWVRFOiA1MTIxLAoJCVVOU0lHTkVEX1NIT1JUOiA1MTIzCgl9OwoKCXZhciBXRUJHTF9DT01QT05FTlRfVFlQRVMgPSB7CgkJNTEyMDogSW50OEFycmF5LAoJCTUxMjE6IFVpbnQ4QXJyYXksCgkJNTEyMjogSW50MTZBcnJheSwKCQk1MTIzOiBVaW50MTZBcnJheSwKCQk1MTI1OiBVaW50MzJBcnJheSwKCQk1MTI2OiBGbG9hdDMyQXJyYXkKCX07CgoJdmFyIFdFQkdMX0ZJTFRFUlMgPSB7CgkJOTcyODogVEhSRUUuTmVhcmVzdEZpbHRlciwKCQk5NzI5OiBUSFJFRS5MaW5lYXJGaWx0ZXIsCgkJOTk4NDogVEhSRUUuTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsCgkJOTk4NTogVEhSRUUuTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciwKCQk5OTg2OiBUSFJFRS5OZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLAoJCTk5ODc6IFRIUkVFLkxpbmVhck1pcG1hcExpbmVhckZpbHRlcgoJfTsKCgl2YXIgV0VCR0xfV1JBUFBJTkdTID0gewoJCTMzMDcxOiBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLAoJCTMzNjQ4OiBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nLAoJCTEwNDk3OiBUSFJFRS5SZXBlYXRXcmFwcGluZwoJfTsKCgl2YXIgV0VCR0xfVFlQRV9TSVpFUyA9IHsKCQknU0NBTEFSJzogMSwKCQknVkVDMic6IDIsCgkJJ1ZFQzMnOiAzLAoJCSdWRUM0JzogNCwKCQknTUFUMic6IDQsCgkJJ01BVDMnOiA5LAoJCSdNQVQ0JzogMTYKCX07CgoJdmFyIEFUVFJJQlVURVMgPSB7CgkJUE9TSVRJT046ICdwb3NpdGlvbicsCgkJTk9STUFMOiAnbm9ybWFsJywKCQlUQU5HRU5UOiAndGFuZ2VudCcsCgkJVEVYQ09PUkRfMDogJ3V2JywKCQlURVhDT09SRF8xOiAndXYyJywKCQlDT0xPUl8wOiAnY29sb3InLAoJCVdFSUdIVFNfMDogJ3NraW5XZWlnaHQnLAoJCUpPSU5UU18wOiAnc2tpbkluZGV4JywKCX07CgoJdmFyIFBBVEhfUFJPUEVSVElFUyA9IHsKCQlzY2FsZTogJ3NjYWxlJywKCQl0cmFuc2xhdGlvbjogJ3Bvc2l0aW9uJywKCQlyb3RhdGlvbjogJ3F1YXRlcm5pb24nLAoJCXdlaWdodHM6ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnCgl9OwoKCXZhciBJTlRFUlBPTEFUSU9OID0gewoJCUNVQklDU1BMSU5FOiB1bmRlZmluZWQsIC8vIFdlIHVzZSBhIGN1c3RvbSBpbnRlcnBvbGFudCAoR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhdGlvbikgZm9yIENVQklDU1BMSU5FIHRyYWNrcy4gRWFjaAoJCSAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtleWZyYW1lIHRyYWNrIHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIGRlZmF1bHQgaW50ZXJwb2xhdGlvbiB0eXBlLCB0aGVuIG1vZGlmaWVkLgoJCUxJTkVBUjogVEhSRUUuSW50ZXJwb2xhdGVMaW5lYXIsCgkJU1RFUDogVEhSRUUuSW50ZXJwb2xhdGVEaXNjcmV0ZQoJfTsKCgl2YXIgQUxQSEFfTU9ERVMgPSB7CgkJT1BBUVVFOiAnT1BBUVVFJywKCQlNQVNLOiAnTUFTSycsCgkJQkxFTkQ6ICdCTEVORCcKCX07CgoJdmFyIE1JTUVfVFlQRV9GT1JNQVRTID0gewoJCSdpbWFnZS9wbmcnOiBUSFJFRS5SR0JBRm9ybWF0LAoJCSdpbWFnZS9qcGVnJzogVEhSRUUuUkdCRm9ybWF0Cgl9OwoKCS8qIFVUSUxJVFkgRlVOQ1RJT05TICovCgoJZnVuY3Rpb24gcmVzb2x2ZVVSTCggdXJsLCBwYXRoICkgewoKCQkvLyBJbnZhbGlkIFVSTAoJCWlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApIHJldHVybiAnJzsKCgkJLy8gSG9zdCBSZWxhdGl2ZSBVUkwKCQlpZiAoIC9eaHR0cHM/OlwvXC8vaS50ZXN0KCBwYXRoICkgJiYgL15cLy8udGVzdCggdXJsICkgKSB7CgoJCQlwYXRoID0gcGF0aC5yZXBsYWNlKCAvKF5odHRwcz86XC9cL1teXC9dKykuKi9pLCAnJDEnICk7CgoJCX0KCgkJLy8gQWJzb2x1dGUgVVJMIGh0dHA6Ly8saHR0cHM6Ly8sLy8KCQlpZiAoIC9eKGh0dHBzPzopP1wvXC8vaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7CgoJCS8vIERhdGEgVVJJCgkJaWYgKCAvXmRhdGE6LiosLiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsOwoKCQkvLyBCbG9iIFVSTAoJCWlmICggL15ibG9iOi4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDsKCgkJLy8gUmVsYXRpdmUgVVJMCgkJcmV0dXJuIHBhdGggKyB1cmw7CgoJfQoKCS8qKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNkZWZhdWx0LW1hdGVyaWFsCgkgKi8KCWZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRNYXRlcmlhbCggY2FjaGUgKSB7CgoJCWlmICggY2FjaGVbICdEZWZhdWx0TWF0ZXJpYWwnIF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCWNhY2hlWyAnRGVmYXVsdE1hdGVyaWFsJyBdID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKCB7CgkJCQljb2xvcjogMHhGRkZGRkYsCgkJCQllbWlzc2l2ZTogMHgwMDAwMDAsCgkJCQltZXRhbG5lc3M6IDEsCgkJCQlyb3VnaG5lc3M6IDEsCgkJCQl0cmFuc3BhcmVudDogZmFsc2UsCgkJCQlkZXB0aFRlc3Q6IHRydWUsCgkJCQlzaWRlOiBUSFJFRS5Gcm9udFNpZGUKCQkJfSApOwoKCQl9CgoJCXJldHVybiBjYWNoZVsgJ0RlZmF1bHRNYXRlcmlhbCcgXTsKCgl9CgoJZnVuY3Rpb24gYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBrbm93bkV4dGVuc2lvbnMsIG9iamVjdCwgb2JqZWN0RGVmICkgewoKCQkvLyBBZGQgdW5rbm93biBnbFRGIGV4dGVuc2lvbnMgdG8gYW4gb2JqZWN0J3MgdXNlckRhdGEuCgoJCWZvciAoIHZhciBuYW1lIGluIG9iamVjdERlZi5leHRlbnNpb25zICkgewoKCQkJaWYgKCBrbm93bkV4dGVuc2lvbnNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkgewoKCQkJCW9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9ucyA9IG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9ucyB8fCB7fTsKCQkJCW9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9uc1sgbmFtZSBdID0gb2JqZWN0RGVmLmV4dGVuc2lvbnNbIG5hbWUgXTsKCgkJCX0KCgkJfQoKCX0KCgkvKioKCSAqIEBwYXJhbSB7VEhSRUUuT2JqZWN0M0R8VEhSRUUuTWF0ZXJpYWx8VEhSRUUuQnVmZmVyR2VvbWV0cnl9IG9iamVjdAoJICogQHBhcmFtIHtHTFRGLmRlZmluaXRpb259IGdsdGZEZWYKCSAqLwoJZnVuY3Rpb24gYXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggb2JqZWN0LCBnbHRmRGVmICkgewoKCQlpZiAoIGdsdGZEZWYuZXh0cmFzICE9PSB1bmRlZmluZWQgKSB7CgoJCQlpZiAoIHR5cGVvZiBnbHRmRGVmLmV4dHJhcyA9PT0gJ29iamVjdCcgKSB7CgoJCQkJT2JqZWN0LmFzc2lnbiggb2JqZWN0LnVzZXJEYXRhLCBnbHRmRGVmLmV4dHJhcyApOwoKCQkJfSBlbHNlIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBJZ25vcmluZyBwcmltaXRpdmUgdHlwZSAuZXh0cmFzLCAnICsgZ2x0ZkRlZi5leHRyYXMgKTsKCgkJCX0KCgkJfQoKCX0KCgkvKioKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbW9ycGgtdGFyZ2V0cwoJICoKCSAqIEBwYXJhbSB7VEhSRUUuQnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5CgkgKiBAcGFyYW0ge0FycmF5PEdMVEYuVGFyZ2V0Pn0gdGFyZ2V0cwoJICogQHBhcmFtIHtHTFRGUGFyc2VyfSBwYXJzZXIKCSAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQnVmZmVyR2VvbWV0cnk+fQoJICovCglmdW5jdGlvbiBhZGRNb3JwaFRhcmdldHMoIGdlb21ldHJ5LCB0YXJnZXRzLCBwYXJzZXIgKSB7CgoJCXZhciBoYXNNb3JwaFBvc2l0aW9uID0gZmFsc2U7CgkJdmFyIGhhc01vcnBoTm9ybWFsID0gZmFsc2U7CgoJCWZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJdmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTsKCgkJCWlmICggdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQgKSBoYXNNb3JwaFBvc2l0aW9uID0gdHJ1ZTsKCQkJaWYgKCB0YXJnZXQuTk9STUFMICE9PSB1bmRlZmluZWQgKSBoYXNNb3JwaE5vcm1hbCA9IHRydWU7CgoJCQlpZiAoIGhhc01vcnBoUG9zaXRpb24gJiYgaGFzTW9ycGhOb3JtYWwgKSBicmVhazsKCgkJfQoKCQlpZiAoICEgaGFzTW9ycGhQb3NpdGlvbiAmJiAhIGhhc01vcnBoTm9ybWFsICkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggZ2VvbWV0cnkgKTsKCgkJdmFyIHBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyA9IFtdOwoJCXZhciBwZW5kaW5nTm9ybWFsQWNjZXNzb3JzID0gW107CgoJCWZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJdmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTsKCgkJCWlmICggaGFzTW9ycGhQb3NpdGlvbiApIHsKCgkJCQl2YXIgcGVuZGluZ0FjY2Vzc29yID0gdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQKCQkJCQk/IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCB0YXJnZXQuUE9TSVRJT04gKQoJCQkJCTogZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjsKCgkJCQlwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMucHVzaCggcGVuZGluZ0FjY2Vzc29yICk7CgoJCQl9CgoJCQlpZiAoIGhhc01vcnBoTm9ybWFsICkgewoKCQkJCXZhciBwZW5kaW5nQWNjZXNzb3IgPSB0YXJnZXQuTk9STUFMICE9PSB1bmRlZmluZWQKCQkJCQk/IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCB0YXJnZXQuTk9STUFMICkKCQkJCQk6IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsOwoKCQkJCXBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMucHVzaCggcGVuZGluZ0FjY2Vzc29yICk7CgoJCQl9CgoJCX0KCgkJcmV0dXJuIFByb21pc2UuYWxsKCBbCgkJCVByb21pc2UuYWxsKCBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMgKSwKCQkJUHJvbWlzZS5hbGwoIHBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMgKQoJCV0gKS50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29ycyApIHsKCgkJCXZhciBtb3JwaFBvc2l0aW9ucyA9IGFjY2Vzc29yc1sgMCBdOwoJCQl2YXIgbW9ycGhOb3JtYWxzID0gYWNjZXNzb3JzWyAxIF07CgoJCQlpZiAoIGhhc01vcnBoUG9zaXRpb24gKSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gPSBtb3JwaFBvc2l0aW9uczsKCQkJaWYgKCBoYXNNb3JwaE5vcm1hbCApIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgPSBtb3JwaE5vcm1hbHM7CgkJCWdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdHJ1ZTsKCgkJCXJldHVybiBnZW9tZXRyeTsKCgkJfSApOwoKCX0KCgkvKioKCSAqIEBwYXJhbSB7VEhSRUUuTWVzaH0gbWVzaAoJICogQHBhcmFtIHtHTFRGLk1lc2h9IG1lc2hEZWYKCSAqLwoJZnVuY3Rpb24gdXBkYXRlTW9ycGhUYXJnZXRzKCBtZXNoLCBtZXNoRGVmICkgewoKCQltZXNoLnVwZGF0ZU1vcnBoVGFyZ2V0cygpOwoKCQlpZiAoIG1lc2hEZWYud2VpZ2h0cyAhPT0gdW5kZWZpbmVkICkgewoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG1lc2hEZWYud2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQltZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdID0gbWVzaERlZi53ZWlnaHRzWyBpIF07CgoJCQl9CgoJCX0KCgkJLy8gLmV4dHJhcyBoYXMgdXNlci1kZWZpbmVkIGRhdGEsIHNvIGNoZWNrIHRoYXQgLmV4dHJhcy50YXJnZXROYW1lcyBpcyBhbiBhcnJheS4KCQlpZiAoIG1lc2hEZWYuZXh0cmFzICYmIEFycmF5LmlzQXJyYXkoIG1lc2hEZWYuZXh0cmFzLnRhcmdldE5hbWVzICkgKSB7CgoJCQl2YXIgdGFyZ2V0TmFtZXMgPSBtZXNoRGVmLmV4dHJhcy50YXJnZXROYW1lczsKCgkJCWlmICggbWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXMubGVuZ3RoID09PSB0YXJnZXROYW1lcy5sZW5ndGggKSB7CgoJCQkJbWVzaC5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGFyZ2V0TmFtZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCW1lc2gubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyB0YXJnZXROYW1lc1sgaSBdIF0gPSBpOwoKCQkJCX0KCgkJCX0gZWxzZSB7CgoJCQkJY29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogSW52YWxpZCBleHRyYXMudGFyZ2V0TmFtZXMgbGVuZ3RoLiBJZ25vcmluZyBuYW1lcy4nICk7CgoJCQl9CgoJCX0KCgl9CgoJZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlS2V5KCBwcmltaXRpdmVEZWYgKSB7CgoJCXZhciBkcmFjb0V4dGVuc2lvbiA9IHByaW1pdGl2ZURlZi5leHRlbnNpb25zICYmIHByaW1pdGl2ZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OIF07CgkJdmFyIGdlb21ldHJ5S2V5OwoKCQlpZiAoIGRyYWNvRXh0ZW5zaW9uICkgewoKCQkJZ2VvbWV0cnlLZXkgPSAnZHJhY286JyArIGRyYWNvRXh0ZW5zaW9uLmJ1ZmZlclZpZXcKCQkJCSsgJzonICsgZHJhY29FeHRlbnNpb24uaW5kaWNlcwoJCQkJKyAnOicgKyBjcmVhdGVBdHRyaWJ1dGVzS2V5KCBkcmFjb0V4dGVuc2lvbi5hdHRyaWJ1dGVzICk7CgoJCX0gZWxzZSB7CgoJCQlnZW9tZXRyeUtleSA9IHByaW1pdGl2ZURlZi5pbmRpY2VzICsgJzonICsgY3JlYXRlQXR0cmlidXRlc0tleSggcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXMgKSArICc6JyArIHByaW1pdGl2ZURlZi5tb2RlOwoKCQl9CgoJCXJldHVybiBnZW9tZXRyeUtleTsKCgl9CgoJZnVuY3Rpb24gY3JlYXRlQXR0cmlidXRlc0tleSggYXR0cmlidXRlcyApIHsKCgkJdmFyIGF0dHJpYnV0ZXNLZXkgPSAnJzsKCgkJdmFyIGtleXMgPSBPYmplY3Qua2V5cyggYXR0cmlidXRlcyApLnNvcnQoKTsKCgkJZm9yICggdmFyIGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQlhdHRyaWJ1dGVzS2V5ICs9IGtleXNbIGkgXSArICc6JyArIGF0dHJpYnV0ZXNbIGtleXNbIGkgXSBdICsgJzsnOwoKCQl9CgoJCXJldHVybiBhdHRyaWJ1dGVzS2V5OwoKCX0KCgkvKiBHTFRGIFBBUlNFUiAqLwoKCWZ1bmN0aW9uIEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIG9wdGlvbnMgKSB7CgoJCXRoaXMuanNvbiA9IGpzb24gfHwge307CgkJdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTsKCQl0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCQkvLyBsb2FkZXIgb2JqZWN0IGNhY2hlCgkJdGhpcy5jYWNoZSA9IG5ldyBHTFRGUmVnaXN0cnkoKTsKCgkJLy8gQnVmZmVyR2VvbWV0cnkgY2FjaGluZwoJCXRoaXMucHJpbWl0aXZlQ2FjaGUgPSB7fTsKCgkJdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoIHRoaXMub3B0aW9ucy5tYW5hZ2VyICk7CgkJdGhpcy50ZXh0dXJlTG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gKTsKCgkJdGhpcy5maWxlTG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHRoaXMub3B0aW9ucy5tYW5hZ2VyICk7CgkJdGhpcy5maWxlTG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApOwoKCQlpZiAoIHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycgKSB7CgoJCQl0aGlzLmZpbGVMb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0cnVlICk7CgoJCX0KCgl9CgoJR0xURlBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoIG9uTG9hZCwgb25FcnJvciApIHsKCgkJdmFyIHBhcnNlciA9IHRoaXM7CgkJdmFyIGpzb24gPSB0aGlzLmpzb247CgkJdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7CgoJCS8vIENsZWFyIHRoZSBsb2FkZXIgY2FjaGUKCQl0aGlzLmNhY2hlLnJlbW92ZUFsbCgpOwoKCQkvLyBNYXJrIHRoZSBzcGVjaWFsIG5vZGVzL21lc2hlcyBpbiBqc29uIGZvciBlZmZpY2llbnQgcGFyc2UKCQl0aGlzLm1hcmtEZWZzKCk7CgoJCVByb21pc2UuYWxsKCBbCgoJCQl0aGlzLmdldERlcGVuZGVuY2llcyggJ3NjZW5lJyApLAoJCQl0aGlzLmdldERlcGVuZGVuY2llcyggJ2FuaW1hdGlvbicgKSwKCQkJdGhpcy5nZXREZXBlbmRlbmNpZXMoICdjYW1lcmEnICksCgoJCV0gKS50aGVuKCBmdW5jdGlvbiAoIGRlcGVuZGVuY2llcyApIHsKCgkJCXZhciByZXN1bHQgPSB7CgkJCQlzY2VuZTogZGVwZW5kZW5jaWVzWyAwIF1bIGpzb24uc2NlbmUgfHwgMCBdLAoJCQkJc2NlbmVzOiBkZXBlbmRlbmNpZXNbIDAgXSwKCQkJCWFuaW1hdGlvbnM6IGRlcGVuZGVuY2llc1sgMSBdLAoJCQkJY2FtZXJhczogZGVwZW5kZW5jaWVzWyAyIF0sCgkJCQlhc3NldDoganNvbi5hc3NldCwKCQkJCXBhcnNlcjogcGFyc2VyLAoJCQkJdXNlckRhdGE6IHt9CgkJCX07CgoJCQlhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoIGV4dGVuc2lvbnMsIHJlc3VsdCwganNvbiApOwoKCQkJYXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggcmVzdWx0LCBqc29uICk7CgoJCQlvbkxvYWQoIHJlc3VsdCApOwoKCQl9ICkuY2F0Y2goIG9uRXJyb3IgKTsKCgl9OwoKCS8qKgoJICogTWFya3MgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZS4KCSAqLwoJR0xURlBhcnNlci5wcm90b3R5cGUubWFya0RlZnMgPSBmdW5jdGlvbiAoKSB7CgoJCXZhciBub2RlRGVmcyA9IHRoaXMuanNvbi5ub2RlcyB8fCBbXTsKCQl2YXIgc2tpbkRlZnMgPSB0aGlzLmpzb24uc2tpbnMgfHwgW107CgkJdmFyIG1lc2hEZWZzID0gdGhpcy5qc29uLm1lc2hlcyB8fCBbXTsKCgkJdmFyIG1lc2hSZWZlcmVuY2VzID0ge307CgkJdmFyIG1lc2hVc2VzID0ge307CgoJCS8vIE5vdGhpbmcgaW4gdGhlIG5vZGUgZGVmaW5pdGlvbiBpbmRpY2F0ZXMgd2hldGhlciBpdCBpcyBhIEJvbmUgb3IgYW4KCQkvLyBPYmplY3QzRC4gVXNlIHRoZSBza2lucycgam9pbnQgcmVmZXJlbmNlcyB0byBtYXJrIGJvbmVzLgoJCWZvciAoIHZhciBza2luSW5kZXggPSAwLCBza2luTGVuZ3RoID0gc2tpbkRlZnMubGVuZ3RoOyBza2luSW5kZXggPCBza2luTGVuZ3RoOyBza2luSW5kZXggKysgKSB7CgoJCQl2YXIgam9pbnRzID0gc2tpbkRlZnNbIHNraW5JbmRleCBdLmpvaW50czsKCgkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBqb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJbm9kZURlZnNbIGpvaW50c1sgaSBdIF0uaXNCb25lID0gdHJ1ZTsKCgkJCX0KCgkJfQoKCQkvLyBNZXNoZXMgY2FuIChhbmQgc2hvdWxkKSBiZSByZXVzZWQgYnkgbXVsdGlwbGUgbm9kZXMgaW4gYSBnbFRGIGFzc2V0LiBUbwoJCS8vIGF2b2lkIGhhdmluZyBtb3JlIHRoYW4gb25lIFRIUkVFLk1lc2ggd2l0aCB0aGUgc2FtZSBuYW1lLCBjb3VudAoJCS8vIHJlZmVyZW5jZXMgYW5kIHJlbmFtZSBpbnN0YW5jZXMgYmVsb3cuCgkJLy8KCQkvLyBFeGFtcGxlOiBDZXNpdW1NaWxrVHJ1Y2sgc2FtcGxlIG1vZGVsIHJldXNlcyAiV2hlZWwiIG1lc2hlcy4KCQlmb3IgKCB2YXIgbm9kZUluZGV4ID0gMCwgbm9kZUxlbmd0aCA9IG5vZGVEZWZzLmxlbmd0aDsgbm9kZUluZGV4IDwgbm9kZUxlbmd0aDsgbm9kZUluZGV4ICsrICkgewoKCQkJdmFyIG5vZGVEZWYgPSBub2RlRGVmc1sgbm9kZUluZGV4IF07CgoJCQlpZiAoIG5vZGVEZWYubWVzaCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWlmICggbWVzaFJlZmVyZW5jZXNbIG5vZGVEZWYubWVzaCBdID09PSB1bmRlZmluZWQgKSB7CgoJCQkJCW1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA9IG1lc2hVc2VzWyBub2RlRGVmLm1lc2ggXSA9IDA7CgoJCQkJfQoKCQkJCW1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSArKzsKCgkJCQkvLyBOb3RoaW5nIGluIHRoZSBtZXNoIGRlZmluaXRpb24gaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXMKCQkJCS8vIGEgU2tpbm5lZE1lc2ggb3IgTWVzaC4gVXNlIHRoZSBub2RlJ3MgbWVzaCByZWZlcmVuY2UKCQkJCS8vIHRvIG1hcmsgU2tpbm5lZE1lc2ggaWYgbm9kZSBoYXMgc2tpbi4KCQkJCWlmICggbm9kZURlZi5za2luICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCW1lc2hEZWZzWyBub2RlRGVmLm1lc2ggXS5pc1NraW5uZWRNZXNoID0gdHJ1ZTsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJdGhpcy5qc29uLm1lc2hSZWZlcmVuY2VzID0gbWVzaFJlZmVyZW5jZXM7CgkJdGhpcy5qc29uLm1lc2hVc2VzID0gbWVzaFVzZXM7CgoJfTsKCgkvKioKCSAqIFJlcXVlc3RzIHRoZSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLgoJICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKCSAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5PYmplY3QzRHxUSFJFRS5NYXRlcmlhbHxUSFJFRS5UZXh0dXJlfFRIUkVFLkFuaW1hdGlvbkNsaXB8QXJyYXlCdWZmZXJ8T2JqZWN0Pn0KCSAqLwoJR0xURlBhcnNlci5wcm90b3R5cGUuZ2V0RGVwZW5kZW5jeSA9IGZ1bmN0aW9uICggdHlwZSwgaW5kZXggKSB7CgoJCXZhciBjYWNoZUtleSA9IHR5cGUgKyAnOicgKyBpbmRleDsKCQl2YXIgZGVwZW5kZW5jeSA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApOwoKCQlpZiAoICEgZGVwZW5kZW5jeSApIHsKCgkJCXN3aXRjaCAoIHR5cGUgKSB7CgoJCQkJY2FzZSAnc2NlbmUnOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmxvYWRTY2VuZSggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQljYXNlICdub2RlJzoKCQkJCQlkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTm9kZSggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQljYXNlICdtZXNoJzoKCQkJCQlkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWVzaCggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQljYXNlICdhY2Nlc3Nvcic6CgkJCQkJZGVwZW5kZW5jeSA9IHRoaXMubG9hZEFjY2Vzc29yKCBpbmRleCApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ2J1ZmZlclZpZXcnOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmxvYWRCdWZmZXJWaWV3KCBpbmRleCApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ2J1ZmZlcic6CgkJCQkJZGVwZW5kZW5jeSA9IHRoaXMubG9hZEJ1ZmZlciggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQljYXNlICdtYXRlcmlhbCc6CgkJCQkJZGVwZW5kZW5jeSA9IHRoaXMubG9hZE1hdGVyaWFsKCBpbmRleCApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ3RleHR1cmUnOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmxvYWRUZXh0dXJlKCBpbmRleCApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ3NraW4nOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmxvYWRTa2luKCBpbmRleCApOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ2FuaW1hdGlvbic6CgkJCQkJZGVwZW5kZW5jeSA9IHRoaXMubG9hZEFuaW1hdGlvbiggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQljYXNlICdjYW1lcmEnOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmxvYWRDYW1lcmEoIGluZGV4ICk7CgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnbGlnaHQnOgoJCQkJCWRlcGVuZGVuY3kgPSB0aGlzLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTCBdLmxvYWRMaWdodCggaW5kZXggKTsKCQkJCQlicmVhazsKCgkJCQlkZWZhdWx0OgoJCQkJCXRocm93IG5ldyBFcnJvciggJ1Vua25vd24gdHlwZTogJyArIHR5cGUgKTsKCgkJCX0KCgkJCXRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgZGVwZW5kZW5jeSApOwoKCQl9CgoJCXJldHVybiBkZXBlbmRlbmN5OwoKCX07CgoJLyoqCgkgKiBSZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLgoJICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKCSAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8T2JqZWN0Pj59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uICggdHlwZSApIHsKCgkJdmFyIGRlcGVuZGVuY2llcyA9IHRoaXMuY2FjaGUuZ2V0KCB0eXBlICk7CgoJCWlmICggISBkZXBlbmRlbmNpZXMgKSB7CgoJCQl2YXIgcGFyc2VyID0gdGhpczsKCQkJdmFyIGRlZnMgPSB0aGlzLmpzb25bIHR5cGUgKyAoIHR5cGUgPT09ICdtZXNoJyA/ICdlcycgOiAncycgKSBdIHx8IFtdOwoKCQkJZGVwZW5kZW5jaWVzID0gUHJvbWlzZS5hbGwoIGRlZnMubWFwKCBmdW5jdGlvbiAoIGRlZiwgaW5kZXggKSB7CgoJCQkJcmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCB0eXBlLCBpbmRleCApOwoKCQkJfSApICk7CgoJCQl0aGlzLmNhY2hlLmFkZCggdHlwZSwgZGVwZW5kZW5jaWVzICk7CgoJCX0KCgkJcmV0dXJuIGRlcGVuZGVuY2llczsKCgl9OwoKCS8qKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNidWZmZXJzLWFuZC1idWZmZXItdmlld3MKCSAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJJbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbiAoIGJ1ZmZlckluZGV4ICkgewoKCQl2YXIgYnVmZmVyRGVmID0gdGhpcy5qc29uLmJ1ZmZlcnNbIGJ1ZmZlckluZGV4IF07CgkJdmFyIGxvYWRlciA9IHRoaXMuZmlsZUxvYWRlcjsKCgkJaWYgKCBidWZmZXJEZWYudHlwZSAmJiBidWZmZXJEZWYudHlwZSAhPT0gJ2FycmF5YnVmZmVyJyApIHsKCgkJCXRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6ICcgKyBidWZmZXJEZWYudHlwZSArICcgYnVmZmVyIHR5cGUgaXMgbm90IHN1cHBvcnRlZC4nICk7CgoJCX0KCgkJLy8gSWYgcHJlc2VudCwgR0xCIGNvbnRhaW5lciBpcyByZXF1aXJlZCB0byBiZSB0aGUgZmlyc3QgYnVmZmVyLgoJCWlmICggYnVmZmVyRGVmLnVyaSA9PT0gdW5kZWZpbmVkICYmIGJ1ZmZlckluZGV4ID09PSAwICkgewoKCQkJcmV0dXJuIFByb21pc2UucmVzb2x2ZSggdGhpcy5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURiBdLmJvZHkgKTsKCgkJfQoKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCgkJcmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHsKCgkJCWxvYWRlci5sb2FkKCByZXNvbHZlVVJMKCBidWZmZXJEZWYudXJpLCBvcHRpb25zLnBhdGggKSwgcmVzb2x2ZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7CgoJCQkJcmVqZWN0KCBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBGYWlsZWQgdG8gbG9hZCBidWZmZXIgIicgKyBidWZmZXJEZWYudXJpICsgJyIuJyApICk7CgoJCQl9ICk7CgoJCX0gKTsKCgl9OwoKCS8qKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNidWZmZXJzLWFuZC1idWZmZXItdmlld3MKCSAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJWaWV3SW5kZXgKCSAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fQoJICovCglHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQnVmZmVyVmlldyA9IGZ1bmN0aW9uICggYnVmZmVyVmlld0luZGV4ICkgewoKCQl2YXIgYnVmZmVyVmlld0RlZiA9IHRoaXMuanNvbi5idWZmZXJWaWV3c1sgYnVmZmVyVmlld0luZGV4IF07CgoJCXJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXInLCBidWZmZXJWaWV3RGVmLmJ1ZmZlciApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyICkgewoKCQkJdmFyIGJ5dGVMZW5ndGggPSBidWZmZXJWaWV3RGVmLmJ5dGVMZW5ndGggfHwgMDsKCQkJdmFyIGJ5dGVPZmZzZXQgPSBidWZmZXJWaWV3RGVmLmJ5dGVPZmZzZXQgfHwgMDsKCQkJcmV0dXJuIGJ1ZmZlci5zbGljZSggYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGggKTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2FjY2Vzc29ycwoJICogQHBhcmFtIHtudW1iZXJ9IGFjY2Vzc29ySW5kZXgKCSAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQnVmZmVyQXR0cmlidXRlfFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlPn0KCSAqLwoJR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEFjY2Vzc29yID0gZnVuY3Rpb24gKCBhY2Nlc3NvckluZGV4ICkgewoKCQl2YXIgcGFyc2VyID0gdGhpczsKCQl2YXIganNvbiA9IHRoaXMuanNvbjsKCgkJdmFyIGFjY2Vzc29yRGVmID0gdGhpcy5qc29uLmFjY2Vzc29yc1sgYWNjZXNzb3JJbmRleCBdOwoKCQlpZiAoIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgPT09IHVuZGVmaW5lZCAmJiBhY2Nlc3NvckRlZi5zcGFyc2UgPT09IHVuZGVmaW5lZCApIHsKCgkJCS8vIElnbm9yZSBlbXB0eSBhY2Nlc3NvcnMsIHdoaWNoIG1heSBiZSB1c2VkIHRvIGRlY2xhcmUgcnVudGltZQoJCQkvLyBpbmZvcm1hdGlvbiBhYm91dCBhdHRyaWJ1dGVzIGNvbWluZyBmcm9tIGFub3RoZXIgc291cmNlIChlLmcuIERyYWNvCgkJCS8vIGNvbXByZXNzaW9uIGV4dGVuc2lvbikuCgkJCXJldHVybiBQcm9taXNlLnJlc29sdmUoIG51bGwgKTsKCgkJfQoKCQl2YXIgcGVuZGluZ0J1ZmZlclZpZXdzID0gW107CgoJCWlmICggYWNjZXNzb3JEZWYuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkICkgewoKCQkJcGVuZGluZ0J1ZmZlclZpZXdzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICkgKTsKCgkJfSBlbHNlIHsKCgkJCXBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCBudWxsICk7CgoJCX0KCgkJaWYgKCBhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCApIHsKCgkJCXBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuYnVmZmVyVmlldyApICk7CgkJCXBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5idWZmZXJWaWV3ICkgKTsKCgkJfQoKCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmdCdWZmZXJWaWV3cyApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyVmlld3MgKSB7CgoJCQl2YXIgYnVmZmVyVmlldyA9IGJ1ZmZlclZpZXdzWyAwIF07CgoJCQl2YXIgaXRlbVNpemUgPSBXRUJHTF9UWVBFX1NJWkVTWyBhY2Nlc3NvckRlZi50eXBlIF07CgkJCXZhciBUeXBlZEFycmF5ID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTWyBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlIF07CgoJCQkvLyBGb3IgVkVDMzogaXRlbVNpemUgaXMgMywgZWxlbWVudEJ5dGVzIGlzIDQsIGl0ZW1CeXRlcyBpcyAxMi4KCQkJdmFyIGVsZW1lbnRCeXRlcyA9IFR5cGVkQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7CgkJCXZhciBpdGVtQnl0ZXMgPSBlbGVtZW50Qnl0ZXMgKiBpdGVtU2l6ZTsKCQkJdmFyIGJ5dGVPZmZzZXQgPSBhY2Nlc3NvckRlZi5ieXRlT2Zmc2V0IHx8IDA7CgkJCXZhciBieXRlU3RyaWRlID0gYWNjZXNzb3JEZWYuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkID8ganNvbi5idWZmZXJWaWV3c1sgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyBdLmJ5dGVTdHJpZGUgOiB1bmRlZmluZWQ7CgkJCXZhciBub3JtYWxpemVkID0gYWNjZXNzb3JEZWYubm9ybWFsaXplZCA9PT0gdHJ1ZTsKCQkJdmFyIGFycmF5LCBidWZmZXJBdHRyaWJ1dGU7CgoJCQkvLyBUaGUgYnVmZmVyIGlzIG5vdCBpbnRlcmxlYXZlZCBpZiB0aGUgc3RyaWRlIGlzIHRoZSBpdGVtIHNpemUgaW4gYnl0ZXMuCgkJCWlmICggYnl0ZVN0cmlkZSAmJiBieXRlU3RyaWRlICE9PSBpdGVtQnl0ZXMgKSB7CgoJCQkJLy8gRWFjaCAic2xpY2UiIG9mIHRoZSBidWZmZXIsIGFzIGRlZmluZWQgYnkgJ2NvdW50JyBlbGVtZW50cyBvZiAnYnl0ZVN0cmlkZScgYnl0ZXMsIGdldHMgaXRzIG93biBJbnRlcmxlYXZlZEJ1ZmZlcgoJCQkJLy8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgSUJBLmNvdW50IHJlZmxlY3RzIGFjY2Vzc29yLmNvdW50IHByb3Blcmx5CgkJCQl2YXIgaWJTbGljZSA9IE1hdGguZmxvb3IoIGJ5dGVPZmZzZXQgLyBieXRlU3RyaWRlICk7CgkJCQl2YXIgaWJDYWNoZUtleSA9ICdJbnRlcmxlYXZlZEJ1ZmZlcjonICsgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyArICc6JyArIGFjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGUgKyAnOicgKyBpYlNsaWNlICsgJzonICsgYWNjZXNzb3JEZWYuY291bnQ7CgkJCQl2YXIgaWIgPSBwYXJzZXIuY2FjaGUuZ2V0KCBpYkNhY2hlS2V5ICk7CgoJCQkJaWYgKCAhIGliICkgewoKCQkJCQlhcnJheSA9IG5ldyBUeXBlZEFycmF5KCBidWZmZXJWaWV3LCBpYlNsaWNlICogYnl0ZVN0cmlkZSwgYWNjZXNzb3JEZWYuY291bnQgKiBieXRlU3RyaWRlIC8gZWxlbWVudEJ5dGVzICk7CgoJCQkJCS8vIEludGVnZXIgcGFyYW1ldGVycyB0byBJQi9JQkEgYXJlIGluIGFycmF5IGVsZW1lbnRzLCBub3QgYnl0ZXMuCgkJCQkJaWIgPSBuZXcgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBieXRlU3RyaWRlIC8gZWxlbWVudEJ5dGVzICk7CgoJCQkJCXBhcnNlci5jYWNoZS5hZGQoIGliQ2FjaGVLZXksIGliICk7CgoJCQkJfQoKCQkJCWJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaWIsIGl0ZW1TaXplLCAoIGJ5dGVPZmZzZXQgJSBieXRlU3RyaWRlICkgLyBlbGVtZW50Qnl0ZXMsIG5vcm1hbGl6ZWQgKTsKCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBidWZmZXJWaWV3ID09PSBudWxsICkgewoKCQkJCQlhcnJheSA9IG5ldyBUeXBlZEFycmF5KCBhY2Nlc3NvckRlZi5jb3VudCAqIGl0ZW1TaXplICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJYXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlldywgYnl0ZU9mZnNldCwgYWNjZXNzb3JEZWYuY291bnQgKiBpdGVtU2l6ZSApOwoKCQkJCX0KCgkJCQlidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTsKCgkJCX0KCgkJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjc3BhcnNlLWFjY2Vzc29ycwoJCQlpZiAoIGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXZhciBpdGVtU2l6ZUluZGljZXMgPSBXRUJHTF9UWVBFX1NJWkVTLlNDQUxBUjsKCQkJCXZhciBUeXBlZEFycmF5SW5kaWNlcyA9IFdFQkdMX0NPTVBPTkVOVF9UWVBFU1sgYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuY29tcG9uZW50VHlwZSBdOwoKCQkJCXZhciBieXRlT2Zmc2V0SW5kaWNlcyA9IGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmJ5dGVPZmZzZXQgfHwgMDsKCQkJCXZhciBieXRlT2Zmc2V0VmFsdWVzID0gYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5ieXRlT2Zmc2V0IHx8IDA7CgoJCQkJdmFyIHNwYXJzZUluZGljZXMgPSBuZXcgVHlwZWRBcnJheUluZGljZXMoIGJ1ZmZlclZpZXdzWyAxIF0sIGJ5dGVPZmZzZXRJbmRpY2VzLCBhY2Nlc3NvckRlZi5zcGFyc2UuY291bnQgKiBpdGVtU2l6ZUluZGljZXMgKTsKCQkJCXZhciBzcGFyc2VWYWx1ZXMgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlld3NbIDIgXSwgYnl0ZU9mZnNldFZhbHVlcywgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemUgKTsKCgkJCQlpZiAoIGJ1ZmZlclZpZXcgIT09IG51bGwgKSB7CgoJCQkJCS8vIEF2b2lkIG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgQXJyYXlCdWZmZXIsIGlmIHRoZSBidWZmZXJWaWV3IHdhc24ndCBpbml0aWFsaXplZCB3aXRoIHplcm9lcy4KCQkJCQlidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBidWZmZXJBdHRyaWJ1dGUuYXJyYXkuc2xpY2UoKSwgYnVmZmVyQXR0cmlidXRlLml0ZW1TaXplLCBidWZmZXJBdHRyaWJ1dGUubm9ybWFsaXplZCApOwoKCQkJCX0KCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gc3BhcnNlSW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJdmFyIGluZGV4ID0gc3BhcnNlSW5kaWNlc1sgaSBdOwoKCQkJCQlidWZmZXJBdHRyaWJ1dGUuc2V0WCggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplIF0gKTsKCQkJCQlpZiAoIGl0ZW1TaXplID49IDIgKSBidWZmZXJBdHRyaWJ1dGUuc2V0WSggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMSBdICk7CgkJCQkJaWYgKCBpdGVtU2l6ZSA+PSAzICkgYnVmZmVyQXR0cmlidXRlLnNldFooIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDIgXSApOwoJCQkJCWlmICggaXRlbVNpemUgPj0gNCApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRXKCBpbmRleCwgc3BhcnNlVmFsdWVzWyBpICogaXRlbVNpemUgKyAzIF0gKTsKCQkJCQlpZiAoIGl0ZW1TaXplID49IDUgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBpdGVtU2l6ZSBpbiBzcGFyc2UgQnVmZmVyQXR0cmlidXRlLicgKTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gYnVmZmVyQXR0cmlidXRlOwoKCQl9ICk7CgoJfTsKCgkvKioKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCN0ZXh0dXJlcwoJICogQHBhcmFtIHtudW1iZXJ9IHRleHR1cmVJbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5UZXh0dXJlPn0KCSAqLwoJR0xURlBhcnNlci5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmVJbmRleCApIHsKCgkJdmFyIHBhcnNlciA9IHRoaXM7CgkJdmFyIGpzb24gPSB0aGlzLmpzb247CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgkJdmFyIHRleHR1cmVMb2FkZXIgPSB0aGlzLnRleHR1cmVMb2FkZXI7CgoJCXZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7CgoJCXZhciB0ZXh0dXJlRGVmID0ganNvbi50ZXh0dXJlc1sgdGV4dHVyZUluZGV4IF07CgoJCXZhciB0ZXh0dXJlRXh0ZW5zaW9ucyA9IHRleHR1cmVEZWYuZXh0ZW5zaW9ucyB8fCB7fTsKCgkJdmFyIHNvdXJjZTsKCgkJaWYgKCB0ZXh0dXJlRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTIF0gKSB7CgoJCQlzb3VyY2UgPSBqc29uLmltYWdlc1sgdGV4dHVyZUV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdLnNvdXJjZSBdOwoKCQl9IGVsc2UgewoKCQkJc291cmNlID0ganNvbi5pbWFnZXNbIHRleHR1cmVEZWYuc291cmNlIF07CgoJCX0KCgkJdmFyIHNvdXJjZVVSSSA9IHNvdXJjZS51cmk7CgkJdmFyIGlzT2JqZWN0VVJMID0gZmFsc2U7CgoJCWlmICggc291cmNlLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCApIHsKCgkJCS8vIExvYWQgYmluYXJ5IGltYWdlIGRhdGEgZnJvbSBidWZmZXJWaWV3LCBpZiBwcm92aWRlZC4KCgkJCXNvdXJjZVVSSSA9IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIHNvdXJjZS5idWZmZXJWaWV3ICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXJWaWV3ICkgewoKCQkJCWlzT2JqZWN0VVJMID0gdHJ1ZTsKCQkJCXZhciBibG9iID0gbmV3IEJsb2IoIFsgYnVmZmVyVmlldyBdLCB7IHR5cGU6IHNvdXJjZS5taW1lVHlwZSB9ICk7CgkJCQlzb3VyY2VVUkkgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKCBibG9iICk7CgkJCQlyZXR1cm4gc291cmNlVVJJOwoKCQkJfSApOwoKCQl9CgoJCXJldHVybiBQcm9taXNlLnJlc29sdmUoIHNvdXJjZVVSSSApLnRoZW4oIGZ1bmN0aW9uICggc291cmNlVVJJICkgewoKCQkJLy8gTG9hZCBUZXh0dXJlIHJlc291cmNlLgoKCQkJdmFyIGxvYWRlciA9IG9wdGlvbnMubWFuYWdlci5nZXRIYW5kbGVyKCBzb3VyY2VVUkkgKTsKCgkJCWlmICggISBsb2FkZXIgKSB7CgoJCQkJbG9hZGVyID0gdGV4dHVyZUV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdCgkJCQkJPyBwYXJzZXIuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTIF0uZGRzTG9hZGVyCgkJCQkJOiB0ZXh0dXJlTG9hZGVyOwoKCQkJfQoKCQkJcmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHsKCgkJCQlsb2FkZXIubG9hZCggcmVzb2x2ZVVSTCggc291cmNlVVJJLCBvcHRpb25zLnBhdGggKSwgcmVzb2x2ZSwgdW5kZWZpbmVkLCByZWplY3QgKTsKCgkJCX0gKTsKCgkJfSApLnRoZW4oIGZ1bmN0aW9uICggdGV4dHVyZSApIHsKCgkJCS8vIENsZWFuIHVwIHJlc291cmNlcyBhbmQgY29uZmlndXJlIFRleHR1cmUuCgoJCQlpZiAoIGlzT2JqZWN0VVJMID09PSB0cnVlICkgewoKCQkJCVVSTC5yZXZva2VPYmplY3RVUkwoIHNvdXJjZVVSSSApOwoKCQkJfQoKCQkJdGV4dHVyZS5mbGlwWSA9IGZhbHNlOwoKCQkJaWYgKCB0ZXh0dXJlRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IHRleHR1cmVEZWYubmFtZTsKCgkJCS8vIElnbm9yZSB1bmtub3duIG1pbWUgdHlwZXMsIGxpa2UgRERTIGZpbGVzLgoJCQlpZiAoIHNvdXJjZS5taW1lVHlwZSBpbiBNSU1FX1RZUEVfRk9STUFUUyApIHsKCgkJCQl0ZXh0dXJlLmZvcm1hdCA9IE1JTUVfVFlQRV9GT1JNQVRTWyBzb3VyY2UubWltZVR5cGUgXTsKCgkJCX0KCgkJCXZhciBzYW1wbGVycyA9IGpzb24uc2FtcGxlcnMgfHwge307CgkJCXZhciBzYW1wbGVyID0gc2FtcGxlcnNbIHRleHR1cmVEZWYuc2FtcGxlciBdIHx8IHt9OwoKCQkJdGV4dHVyZS5tYWdGaWx0ZXIgPSBXRUJHTF9GSUxURVJTWyBzYW1wbGVyLm1hZ0ZpbHRlciBdIHx8IFRIUkVFLkxpbmVhckZpbHRlcjsKCQkJdGV4dHVyZS5taW5GaWx0ZXIgPSBXRUJHTF9GSUxURVJTWyBzYW1wbGVyLm1pbkZpbHRlciBdIHx8IFRIUkVFLkxpbmVhck1pcG1hcExpbmVhckZpbHRlcjsKCQkJdGV4dHVyZS53cmFwUyA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwUyBdIHx8IFRIUkVFLlJlcGVhdFdyYXBwaW5nOwoJCQl0ZXh0dXJlLndyYXBUID0gV0VCR0xfV1JBUFBJTkdTWyBzYW1wbGVyLndyYXBUIF0gfHwgVEhSRUUuUmVwZWF0V3JhcHBpbmc7CgoJCQlyZXR1cm4gdGV4dHVyZTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBBc3luY2hyb25vdXNseSBhc3NpZ25zIGEgdGV4dHVyZSB0byB0aGUgZ2l2ZW4gbWF0ZXJpYWwgcGFyYW1ldGVycy4KCSAqIEBwYXJhbSB7T2JqZWN0fSBtYXRlcmlhbFBhcmFtcwoJICogQHBhcmFtIHtzdHJpbmd9IG1hcE5hbWUKCSAqIEBwYXJhbSB7T2JqZWN0fSBtYXBEZWYKCSAqIEByZXR1cm4ge1Byb21pc2V9CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnblRleHR1cmUgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCBtYXBOYW1lLCBtYXBEZWYgKSB7CgoJCXZhciBwYXJzZXIgPSB0aGlzOwoKCQlyZXR1cm4gdGhpcy5nZXREZXBlbmRlbmN5KCAndGV4dHVyZScsIG1hcERlZi5pbmRleCApLnRoZW4oIGZ1bmN0aW9uICggdGV4dHVyZSApIHsKCgkJCWlmICggISB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7CgoJCQkJc3dpdGNoICggbWFwTmFtZSApIHsKCgkJCQkJY2FzZSAnYW9NYXAnOgoJCQkJCWNhc2UgJ2VtaXNzaXZlTWFwJzoKCQkJCQljYXNlICdtZXRhbG5lc3NNYXAnOgoJCQkJCWNhc2UgJ25vcm1hbE1hcCc6CgkJCQkJY2FzZSAncm91Z2huZXNzTWFwJzoKCQkJCQkJdGV4dHVyZS5mb3JtYXQgPSBUSFJFRS5SR0JGb3JtYXQ7CgkJCQkJCWJyZWFrOwoKCQkJCX0KCgkJCX0KCgkJCS8vIE1hdGVyaWFscyBzYW1wbGUgYW9NYXAgZnJvbSBVViBzZXQgMSBhbmQgb3RoZXIgbWFwcyBmcm9tIFVWIHNldCAwIC0gdGhpcyBjYW4ndCBiZSBjb25maWd1cmVkCgkJCS8vIEhvd2V2ZXIsIHdlIHdpbGwgY29weSBVViBzZXQgMCB0byBVViBzZXQgMSBvbiBkZW1hbmQgZm9yIGFvTWFwCgkJCWlmICggbWFwRGVmLnRleENvb3JkICE9PSB1bmRlZmluZWQgJiYgbWFwRGVmLnRleENvb3JkICE9IDAgJiYgISAoIG1hcE5hbWUgPT09ICdhb01hcCcgJiYgbWFwRGVmLnRleENvb3JkID09IDEgKSApIHsKCgkJCQljb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBDdXN0b20gVVYgc2V0ICcgKyBtYXBEZWYudGV4Q29vcmQgKyAnIGZvciB0ZXh0dXJlICcgKyBtYXBOYW1lICsgJyBub3QgeWV0IHN1cHBvcnRlZC4nICk7CgoJCQl9CgoJCQlpZiAoIHBhcnNlci5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdICkgewoKCQkJCXZhciB0cmFuc2Zvcm0gPSBtYXBEZWYuZXh0ZW5zaW9ucyAhPT0gdW5kZWZpbmVkID8gbWFwRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNIF0gOiB1bmRlZmluZWQ7CgoJCQkJaWYgKCB0cmFuc2Zvcm0gKSB7CgoJCQkJCXRleHR1cmUgPSBwYXJzZXIuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk0gXS5leHRlbmRUZXh0dXJlKCB0ZXh0dXJlLCB0cmFuc2Zvcm0gKTsKCgkJCQl9CgoJCQl9CgoJCQltYXRlcmlhbFBhcmFtc1sgbWFwTmFtZSBdID0gdGV4dHVyZTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBBc3NpZ25zIGZpbmFsIG1hdGVyaWFsIHRvIGEgTWVzaCwgTGluZSwgb3IgUG9pbnRzIGluc3RhbmNlLiBUaGUgaW5zdGFuY2UKCSAqIGFscmVhZHkgaGFzIGEgbWF0ZXJpYWwgKGdlbmVyYXRlZCBmcm9tIHRoZSBnbFRGIG1hdGVyaWFsIG9wdGlvbnMgYWxvbmUpCgkgKiBidXQgcmV1c2Ugb2YgdGhlIHNhbWUgZ2xURiBtYXRlcmlhbCBtYXkgcmVxdWlyZSBtdWx0aXBsZSB0aHJlZWpzIG1hdGVyaWFscwoJICogdG8gYWNjb21vZGF0ZSBkaWZmZXJlbnQgcHJpbWl0aXZlIHR5cGVzLCBkZWZpbmVzLCBldGMuIE5ldyBtYXRlcmlhbHMgd2lsbAoJICogYmUgY3JlYXRlZCBpZiBuZWNlc3NhcnksIGFuZCByZXVzZWQgZnJvbSBhIGNhY2hlLgoJICogQHBhcmFtICB7VEhSRUUuT2JqZWN0M0R9IG1lc2ggTWVzaCwgTGluZSwgb3IgUG9pbnRzIGluc3RhbmNlLgoJICovCglHTFRGUGFyc2VyLnByb3RvdHlwZS5hc3NpZ25GaW5hbE1hdGVyaWFsID0gZnVuY3Rpb24gKCBtZXNoICkgewoKCQl2YXIgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5OwoJCXZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7CgkJdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7CgoJCXZhciB1c2VWZXJ0ZXhUYW5nZW50cyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudCAhPT0gdW5kZWZpbmVkOwoJCXZhciB1c2VWZXJ0ZXhDb2xvcnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQ7CgkJdmFyIHVzZUZsYXRTaGFkaW5nID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZDsKCQl2YXIgdXNlU2tpbm5pbmcgPSBtZXNoLmlzU2tpbm5lZE1lc2ggPT09IHRydWU7CgkJdmFyIHVzZU1vcnBoVGFyZ2V0cyA9IE9iamVjdC5rZXlzKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKS5sZW5ndGggPiAwOwoJCXZhciB1c2VNb3JwaE5vcm1hbHMgPSB1c2VNb3JwaFRhcmdldHMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkOwoKCQlpZiAoIG1lc2guaXNQb2ludHMgKSB7CgoJCQl2YXIgY2FjaGVLZXkgPSAnUG9pbnRzTWF0ZXJpYWw6JyArIG1hdGVyaWFsLnV1aWQ7CgoJCQl2YXIgcG9pbnRzTWF0ZXJpYWwgPSB0aGlzLmNhY2hlLmdldCggY2FjaGVLZXkgKTsKCgkJCWlmICggISBwb2ludHNNYXRlcmlhbCApIHsKCgkJCQlwb2ludHNNYXRlcmlhbCA9IG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCgpOwoJCQkJVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggcG9pbnRzTWF0ZXJpYWwsIG1hdGVyaWFsICk7CgkJCQlwb2ludHNNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwoJCQkJcG9pbnRzTWF0ZXJpYWwubWFwID0gbWF0ZXJpYWwubWFwOwoJCQkJcG9pbnRzTWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID0gZmFsc2U7IC8vIGdsVEYgc3BlYyBzYXlzIHBvaW50cyBzaG91bGQgYmUgMXB4CgoJCQkJdGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBwb2ludHNNYXRlcmlhbCApOwoKCQkJfQoKCQkJbWF0ZXJpYWwgPSBwb2ludHNNYXRlcmlhbDsKCgkJfSBlbHNlIGlmICggbWVzaC5pc0xpbmUgKSB7CgoJCQl2YXIgY2FjaGVLZXkgPSAnTGluZUJhc2ljTWF0ZXJpYWw6JyArIG1hdGVyaWFsLnV1aWQ7CgoJCQl2YXIgbGluZU1hdGVyaWFsID0gdGhpcy5jYWNoZS5nZXQoIGNhY2hlS2V5ICk7CgoJCQlpZiAoICEgbGluZU1hdGVyaWFsICkgewoKCQkJCWxpbmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpOwoJCQkJVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggbGluZU1hdGVyaWFsLCBtYXRlcmlhbCApOwoJCQkJbGluZU1hdGVyaWFsLmNvbG9yLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7CgoJCQkJdGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBsaW5lTWF0ZXJpYWwgKTsKCgkJCX0KCgkJCW1hdGVyaWFsID0gbGluZU1hdGVyaWFsOwoKCQl9CgoJCS8vIENsb25lIHRoZSBtYXRlcmlhbCBpZiBpdCB3aWxsIGJlIG1vZGlmaWVkCgkJaWYgKCB1c2VWZXJ0ZXhUYW5nZW50cyB8fCB1c2VWZXJ0ZXhDb2xvcnMgfHwgdXNlRmxhdFNoYWRpbmcgfHwgdXNlU2tpbm5pbmcgfHwgdXNlTW9ycGhUYXJnZXRzICkgewoKCQkJdmFyIGNhY2hlS2V5ID0gJ0Nsb25lZE1hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkICsgJzonOwoKCQkJaWYgKCBtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCApIGNhY2hlS2V5ICs9ICdzcGVjdWxhci1nbG9zc2luZXNzOic7CgkJCWlmICggdXNlU2tpbm5pbmcgKSBjYWNoZUtleSArPSAnc2tpbm5pbmc6JzsKCQkJaWYgKCB1c2VWZXJ0ZXhUYW5nZW50cyApIGNhY2hlS2V5ICs9ICd2ZXJ0ZXgtdGFuZ2VudHM6JzsKCQkJaWYgKCB1c2VWZXJ0ZXhDb2xvcnMgKSBjYWNoZUtleSArPSAndmVydGV4LWNvbG9yczonOwoJCQlpZiAoIHVzZUZsYXRTaGFkaW5nICkgY2FjaGVLZXkgKz0gJ2ZsYXQtc2hhZGluZzonOwoJCQlpZiAoIHVzZU1vcnBoVGFyZ2V0cyApIGNhY2hlS2V5ICs9ICdtb3JwaC10YXJnZXRzOic7CgkJCWlmICggdXNlTW9ycGhOb3JtYWxzICkgY2FjaGVLZXkgKz0gJ21vcnBoLW5vcm1hbHM6JzsKCgkJCXZhciBjYWNoZWRNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApOwoKCQkJaWYgKCAhIGNhY2hlZE1hdGVyaWFsICkgewoKCQkJCWNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwKCQkJCQk/IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdLmNsb25lTWF0ZXJpYWwoIG1hdGVyaWFsICkKCQkJCQk6IG1hdGVyaWFsLmNsb25lKCk7CgoJCQkJaWYgKCB1c2VTa2lubmluZyApIGNhY2hlZE1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTsKCQkJCWlmICggdXNlVmVydGV4VGFuZ2VudHMgKSBjYWNoZWRNYXRlcmlhbC52ZXJ0ZXhUYW5nZW50cyA9IHRydWU7CgkJCQlpZiAoIHVzZVZlcnRleENvbG9ycyApIGNhY2hlZE1hdGVyaWFsLnZlcnRleENvbG9ycyA9IFRIUkVFLlZlcnRleENvbG9yczsKCQkJCWlmICggdXNlRmxhdFNoYWRpbmcgKSBjYWNoZWRNYXRlcmlhbC5mbGF0U2hhZGluZyA9IHRydWU7CgkJCQlpZiAoIHVzZU1vcnBoVGFyZ2V0cyApIGNhY2hlZE1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9IHRydWU7CgkJCQlpZiAoIHVzZU1vcnBoTm9ybWFscyApIGNhY2hlZE1hdGVyaWFsLm1vcnBoTm9ybWFscyA9IHRydWU7CgoJCQkJdGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBjYWNoZWRNYXRlcmlhbCApOwoKCQkJfQoKCQkJbWF0ZXJpYWwgPSBjYWNoZWRNYXRlcmlhbDsKCgkJfQoKCQkvLyB3b3JrYXJvdW5kcyBmb3IgbWVzaCBhbmQgZ2VvbWV0cnkKCgkJaWYgKCBtYXRlcmlhbC5hb01hcCAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2MiA9PT0gdW5kZWZpbmVkICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCApIHsKCgkJCWdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2MicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYuYXJyYXksIDIgKSApOwoKCQl9CgoJCWlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgKSB7CgoJCQkvLyBmb3IgR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsKFNoYWRlck1hdGVyaWFsKSB1bmlmb3JtcyBydW50aW1lIHVwZGF0ZQoJCQltZXNoLm9uQmVmb3JlUmVuZGVyID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0ucmVmcmVzaFVuaWZvcm1zOwoKCQl9CgoJCW1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDsKCgl9OwoKCS8qKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtYXRlcmlhbHMKCSAqIEBwYXJhbSB7bnVtYmVyfSBtYXRlcmlhbEluZGV4CgkgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLk1hdGVyaWFsPn0KCSAqLwoJR0xURlBhcnNlci5wcm90b3R5cGUubG9hZE1hdGVyaWFsID0gZnVuY3Rpb24gKCBtYXRlcmlhbEluZGV4ICkgewoKCQl2YXIgcGFyc2VyID0gdGhpczsKCQl2YXIganNvbiA9IHRoaXMuanNvbjsKCQl2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9uczsKCQl2YXIgbWF0ZXJpYWxEZWYgPSBqc29uLm1hdGVyaWFsc1sgbWF0ZXJpYWxJbmRleCBdOwoKCQl2YXIgbWF0ZXJpYWxUeXBlOwoJCXZhciBtYXRlcmlhbFBhcmFtcyA9IHt9OwoJCXZhciBtYXRlcmlhbEV4dGVuc2lvbnMgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zIHx8IHt9OwoKCQl2YXIgcGVuZGluZyA9IFtdOwoKCQlpZiAoIG1hdGVyaWFsRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0gKSB7CgoJCQl2YXIgc2dFeHRlbnNpb24gPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXTsKCQkJbWF0ZXJpYWxUeXBlID0gc2dFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7CgkJCXBlbmRpbmcucHVzaCggc2dFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApICk7CgoJCX0gZWxzZSBpZiAoIG1hdGVyaWFsRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUIF0gKSB7CgoJCQl2YXIga211RXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUIF07CgkJCW1hdGVyaWFsVHlwZSA9IGttdUV4dGVuc2lvbi5nZXRNYXRlcmlhbFR5cGUoKTsKCQkJcGVuZGluZy5wdXNoKCBrbXVFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApICk7CgoJCX0gZWxzZSB7CgoJCQkvLyBTcGVjaWZpY2F0aW9uOgoJCQkvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbWV0YWxsaWMtcm91Z2huZXNzLW1hdGVyaWFsCgoJCQltYXRlcmlhbFR5cGUgPSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbDsKCgkJCXZhciBtZXRhbGxpY1JvdWdobmVzcyA9IG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzIHx8IHt9OwoKCQkJbWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTsKCQkJbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDsKCgkJCWlmICggQXJyYXkuaXNBcnJheSggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yICkgKSB7CgoJCQkJdmFyIGFycmF5ID0gbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yOwoKCQkJCW1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTsKCQkJCW1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSBhcnJheVsgMyBdOwoKCQkJfQoKCQkJaWYgKCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtYXAnLCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICkgKTsKCgkJCX0KCgkJCW1hdGVyaWFsUGFyYW1zLm1ldGFsbmVzcyA9IG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA6IDEuMDsKCQkJbWF0ZXJpYWxQYXJhbXMucm91Z2huZXNzID0gbWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgOiAxLjA7CgoJCQlpZiAoIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbWV0YWxuZXNzTWFwJywgbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlICkgKTsKCQkJCXBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAncm91Z2huZXNzTWFwJywgbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlICkgKTsKCgkJCX0KCgkJfQoKCQlpZiAoIG1hdGVyaWFsRGVmLmRvdWJsZVNpZGVkID09PSB0cnVlICkgewoKCQkJbWF0ZXJpYWxQYXJhbXMuc2lkZSA9IFRIUkVFLkRvdWJsZVNpZGU7CgoJCX0KCgkJdmFyIGFscGhhTW9kZSA9IG1hdGVyaWFsRGVmLmFscGhhTW9kZSB8fCBBTFBIQV9NT0RFUy5PUEFRVUU7CgoJCWlmICggYWxwaGFNb2RlID09PSBBTFBIQV9NT0RFUy5CTEVORCApIHsKCgkJCW1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTsKCgkJfSBlbHNlIHsKCgkJCW1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gZmFsc2U7CgoJCQlpZiAoIGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuTUFTSyApIHsKCgkJCQltYXRlcmlhbFBhcmFtcy5hbHBoYVRlc3QgPSBtYXRlcmlhbERlZi5hbHBoYUN1dG9mZiAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWxEZWYuYWxwaGFDdXRvZmYgOiAwLjU7CgoJCQl9CgoJCX0KCgkJaWYgKCBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCApIHsKCgkJCXBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbm9ybWFsTWFwJywgbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZSApICk7CgoJCQltYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCAxLCAxICk7CgoJCQlpZiAoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQltYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZS5zZXQoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgKTsKCgkJCX0KCgkJfQoKCQlpZiAoIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsICkgewoKCQkJcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdhb01hcCcsIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgKSApOwoKCQkJaWYgKCBtYXRlcmlhbERlZi5vY2NsdXNpb25UZXh0dXJlLnN0cmVuZ3RoICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJbWF0ZXJpYWxQYXJhbXMuYW9NYXBJbnRlbnNpdHkgPSBtYXRlcmlhbERlZi5vY2NsdXNpb25UZXh0dXJlLnN0cmVuZ3RoOwoKCQkJfQoKCQl9CgoJCWlmICggbWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsICkgewoKCQkJbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmUgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIG1hdGVyaWFsRGVmLmVtaXNzaXZlRmFjdG9yICk7CgoJCX0KCgkJaWYgKCBtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsICkgewoKCQkJcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdlbWlzc2l2ZU1hcCcsIG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSApICk7CgoJCX0KCgkJcmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICkudGhlbiggZnVuY3Rpb24gKCkgewoKCQkJdmFyIG1hdGVyaWFsOwoKCQkJaWYgKCBtYXRlcmlhbFR5cGUgPT09IFRIUkVFLlNoYWRlck1hdGVyaWFsICkgewoKCQkJCW1hdGVyaWFsID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0uY3JlYXRlTWF0ZXJpYWwoIG1hdGVyaWFsUGFyYW1zICk7CgoJCQl9IGVsc2UgewoKCQkJCW1hdGVyaWFsID0gbmV3IG1hdGVyaWFsVHlwZSggbWF0ZXJpYWxQYXJhbXMgKTsKCgkJCX0KCgkJCWlmICggbWF0ZXJpYWxEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IG1hdGVyaWFsRGVmLm5hbWU7CgoJCQkvLyBiYXNlQ29sb3JUZXh0dXJlLCBlbWlzc2l2ZVRleHR1cmUsIGFuZCBzcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlIHVzZSBzUkdCIGVuY29kaW5nLgoJCQlpZiAoIG1hdGVyaWFsLm1hcCApIG1hdGVyaWFsLm1hcC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZzsKCQkJaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nOwoJCQlpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkgbWF0ZXJpYWwuc3BlY3VsYXJNYXAuZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7CgoJCQlhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBtYXRlcmlhbCwgbWF0ZXJpYWxEZWYgKTsKCgkJCWlmICggbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucyApIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YSggZXh0ZW5zaW9ucywgbWF0ZXJpYWwsIG1hdGVyaWFsRGVmICk7CgoJCQlyZXR1cm4gbWF0ZXJpYWw7CgoJCX0gKTsKCgl9OwoKCS8qKgoJICogQHBhcmFtIHtUSFJFRS5CdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkKCSAqIEBwYXJhbSB7R0xURi5QcmltaXRpdmV9IHByaW1pdGl2ZURlZgoJICogQHBhcmFtIHtHTFRGUGFyc2VyfSBwYXJzZXIKCSAqLwoJZnVuY3Rpb24gY29tcHV0ZUJvdW5kcyggZ2VvbWV0cnksIHByaW1pdGl2ZURlZiwgcGFyc2VyICkgewoKCQl2YXIgYXR0cmlidXRlcyA9IHByaW1pdGl2ZURlZi5hdHRyaWJ1dGVzOwoKCQl2YXIgYm94ID0gbmV3IFRIUkVFLkJveDMoKTsKCgkJaWYgKCBhdHRyaWJ1dGVzLlBPU0lUSU9OICE9PSB1bmRlZmluZWQgKSB7CgoJCQl2YXIgYWNjZXNzb3IgPSBwYXJzZXIuanNvbi5hY2Nlc3NvcnNbIGF0dHJpYnV0ZXMuUE9TSVRJT04gXTsKCQkJdmFyIG1pbiA9IGFjY2Vzc29yLm1pbjsKCQkJdmFyIG1heCA9IGFjY2Vzc29yLm1heDsKCgkJCWJveC5zZXQoCgkJCQluZXcgVEhSRUUuVmVjdG9yMyggbWluWyAwIF0sIG1pblsgMSBdLCBtaW5bIDIgXSApLAoJCQkJbmV3IFRIUkVFLlZlY3RvcjMoIG1heFsgMCBdLCBtYXhbIDEgXSwgbWF4WyAyIF0gKSApOwoKCQl9IGVsc2UgewoKCQkJcmV0dXJuOwoKCQl9CgoJCXZhciB0YXJnZXRzID0gcHJpbWl0aXZlRGVmLnRhcmdldHM7CgoJCWlmICggdGFyZ2V0cyAhPT0gdW5kZWZpbmVkICkgewoKCQkJdmFyIHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CgoJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQl2YXIgdGFyZ2V0ID0gdGFyZ2V0c1sgaSBdOwoKCQkJCWlmICggdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJCXZhciBhY2Nlc3NvciA9IHBhcnNlci5qc29uLmFjY2Vzc29yc1sgdGFyZ2V0LlBPU0lUSU9OIF07CgkJCQkJdmFyIG1pbiA9IGFjY2Vzc29yLm1pbjsKCQkJCQl2YXIgbWF4ID0gYWNjZXNzb3IubWF4OwoKCQkJCQkvLyB3ZSBuZWVkIHRvIGdldCBtYXggb2YgYWJzb2x1dGUgY29tcG9uZW50cyBiZWNhdXNlIHRhcmdldCB3ZWlnaHQgaXMgWy0xLDFdCgkJCQkJdmVjdG9yLnNldFgoIE1hdGgubWF4KCBNYXRoLmFicyggbWluWyAwIF0gKSwgTWF0aC5hYnMoIG1heFsgMCBdICkgKSApOwoJCQkJCXZlY3Rvci5zZXRZKCBNYXRoLm1heCggTWF0aC5hYnMoIG1pblsgMSBdICksIE1hdGguYWJzKCBtYXhbIDEgXSApICkgKTsKCQkJCQl2ZWN0b3Iuc2V0WiggTWF0aC5tYXgoIE1hdGguYWJzKCBtaW5bIDIgXSApLCBNYXRoLmFicyggbWF4WyAyIF0gKSApICk7CgoJCQkJCWJveC5leHBhbmRCeVZlY3RvciggdmVjdG9yICk7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCWdlb21ldHJ5LmJvdW5kaW5nQm94ID0gYm94OwoKCQl2YXIgc3BoZXJlID0gbmV3IFRIUkVFLlNwaGVyZSgpOwoKCQlib3guZ2V0Q2VudGVyKCBzcGhlcmUuY2VudGVyICk7CgkJc3BoZXJlLnJhZGl1cyA9IGJveC5taW4uZGlzdGFuY2VUbyggYm94Lm1heCApIC8gMjsKCgkJZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBzcGhlcmU7CgoJfQoKCS8qKgoJICogQHBhcmFtIHtUSFJFRS5CdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkKCSAqIEBwYXJhbSB7R0xURi5QcmltaXRpdmV9IHByaW1pdGl2ZURlZgoJICogQHBhcmFtIHtHTFRGUGFyc2VyfSBwYXJzZXIKCSAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQnVmZmVyR2VvbWV0cnk+fQoJICovCglmdW5jdGlvbiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKCBnZW9tZXRyeSwgcHJpbWl0aXZlRGVmLCBwYXJzZXIgKSB7CgoJCXZhciBhdHRyaWJ1dGVzID0gcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXM7CgoJCXZhciBwZW5kaW5nID0gW107CgoJCWZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKCBhY2Nlc3NvckluZGV4LCBhdHRyaWJ1dGVOYW1lICkgewoKCQkJcmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCBhY2Nlc3NvckluZGV4ICkKCQkJCS50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29yICkgewoKCQkJCQlnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUsIGFjY2Vzc29yICk7CgoJCQkJfSApOwoKCQl9CgoJCWZvciAoIHZhciBnbHRmQXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzICkgewoKCQkJdmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbIGdsdGZBdHRyaWJ1dGVOYW1lIF0gfHwgZ2x0ZkF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTsKCgkJCS8vIFNraXAgYXR0cmlidXRlcyBhbHJlYWR5IHByb3ZpZGVkIGJ5IGUuZy4gRHJhY28gZXh0ZW5zaW9uLgoJCQlpZiAoIHRocmVlQXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkgY29udGludWU7CgoJCQlwZW5kaW5nLnB1c2goIGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKCBhdHRyaWJ1dGVzWyBnbHRmQXR0cmlidXRlTmFtZSBdLCB0aHJlZUF0dHJpYnV0ZU5hbWUgKSApOwoKCQl9CgoJCWlmICggcHJpbWl0aXZlRGVmLmluZGljZXMgIT09IHVuZGVmaW5lZCAmJiAhIGdlb21ldHJ5LmluZGV4ICkgewoKCQkJdmFyIGFjY2Vzc29yID0gcGFyc2VyLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHByaW1pdGl2ZURlZi5pbmRpY2VzICkudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvciApIHsKCgkJCQlnZW9tZXRyeS5zZXRJbmRleCggYWNjZXNzb3IgKTsKCgkJCX0gKTsKCgkJCXBlbmRpbmcucHVzaCggYWNjZXNzb3IgKTsKCgkJfQoKCQlhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBnZW9tZXRyeSwgcHJpbWl0aXZlRGVmICk7CgoJCWNvbXB1dGVCb3VuZHMoIGdlb21ldHJ5LCBwcmltaXRpdmVEZWYsIHBhcnNlciApOwoKCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7CgoJCQlyZXR1cm4gcHJpbWl0aXZlRGVmLnRhcmdldHMgIT09IHVuZGVmaW5lZAoJCQkJPyBhZGRNb3JwaFRhcmdldHMoIGdlb21ldHJ5LCBwcmltaXRpdmVEZWYudGFyZ2V0cywgcGFyc2VyICkKCQkJCTogZ2VvbWV0cnk7CgoJCX0gKTsKCgl9CgoJLyoqCgkgKiBAcGFyYW0ge1RIUkVFLkJ1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeQoJICogQHBhcmFtIHtOdW1iZXJ9IGRyYXdNb2RlCgkgKiBAcmV0dXJuIHtUSFJFRS5CdWZmZXJHZW9tZXRyeX0KCSAqLwoJZnVuY3Rpb24gdG9UcmlhbmdsZXNEcmF3TW9kZSggZ2VvbWV0cnksIGRyYXdNb2RlICkgewoKCQl2YXIgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpOwoKCQkvLyBnZW5lcmF0ZSBpbmRleCBpZiBub3QgcHJlc2VudAoKCQlpZiAoIGluZGV4ID09PSBudWxsICkgewoKCQkJdmFyIGluZGljZXMgPSBbXTsKCgkJCXZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApOwoKCQkJaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCWZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9uLmNvdW50OyBpICsrICkgewoKCQkJCQlpbmRpY2VzLnB1c2goIGkgKTsKCgkJCQl9CgoJCQkJZ2VvbWV0cnkuc2V0SW5kZXgoIGluZGljZXMgKTsKCQkJCWluZGV4ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTsKCgkJCX0gZWxzZSB7CgoJCQkJY29uc29sZS5lcnJvciggJ1RIUkVFLkdMVEZMb2FkZXIudG9UcmlhbmdsZXNEcmF3TW9kZSgpOiBVbmRlZmluZWQgcG9zaXRpb24gYXR0cmlidXRlLiBQcm9jZXNzaW5nIG5vdCBwb3NzaWJsZS4nICk7CgkJCQlyZXR1cm4gZ2VvbWV0cnk7CgoJCQl9CgoJCX0KCgkJLy8KCgkJdmFyIG51bWJlck9mVHJpYW5nbGVzID0gaW5kZXguY291bnQgLSAyOwoJCXZhciBuZXdJbmRpY2VzID0gW107CgoJCWlmICggZHJhd01vZGUgPT09IFRIUkVFLlRyaWFuZ2xlRmFuRHJhd01vZGUgKSB7CgoJCQkvLyBnbC5UUklBTkdMRV9GQU4KCgkJCWZvciAoIHZhciBpID0gMTsgaSA8PSBudW1iZXJPZlRyaWFuZ2xlczsgaSArKyApIHsKCgkJCQluZXdJbmRpY2VzLnB1c2goIGluZGV4LmdldFgoIDAgKSApOwoJCQkJbmV3SW5kaWNlcy5wdXNoKCBpbmRleC5nZXRYKCBpICkgKTsKCQkJCW5ld0luZGljZXMucHVzaCggaW5kZXguZ2V0WCggaSArIDEgKSApOwoKCQkJfQoKCQl9IGVsc2UgewoKCQkJLy8gZ2wuVFJJQU5HTEVfU1RSSVAKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IG51bWJlck9mVHJpYW5nbGVzOyBpICsrICkgewoKCQkJCWlmICggaSAlIDIgPT09IDAgKSB7CgoJCQkJCW5ld0luZGljZXMucHVzaCggaW5kZXguZ2V0WCggaSApICk7CgkJCQkJbmV3SW5kaWNlcy5wdXNoKCBpbmRleC5nZXRYKCBpICsgMSApICk7CgkJCQkJbmV3SW5kaWNlcy5wdXNoKCBpbmRleC5nZXRYKCBpICsgMiApICk7CgoKCQkJCX0gZWxzZSB7CgoJCQkJCW5ld0luZGljZXMucHVzaCggaW5kZXguZ2V0WCggaSArIDIgKSApOwoJCQkJCW5ld0luZGljZXMucHVzaCggaW5kZXguZ2V0WCggaSArIDEgKSApOwoJCQkJCW5ld0luZGljZXMucHVzaCggaW5kZXguZ2V0WCggaSApICk7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCWlmICggKCBuZXdJbmRpY2VzLmxlbmd0aCAvIDMgKSAhPT0gbnVtYmVyT2ZUcmlhbmdsZXMgKSB7CgoJCQljb25zb2xlLmVycm9yKCAnVEhSRUUuR0xURkxvYWRlci50b1RyaWFuZ2xlc0RyYXdNb2RlKCk6IFVuYWJsZSB0byBnZW5lcmF0ZSBjb3JyZWN0IGFtb3VudCBvZiB0cmlhbmdsZXMuJyApOwoKCQl9CgoJCS8vIGJ1aWxkIGZpbmFsIGdlb21ldHJ5CgoJCXZhciBuZXdHZW9tZXRyeSA9IGdlb21ldHJ5LmNsb25lKCk7CgkJbmV3R2VvbWV0cnkuc2V0SW5kZXgoIG5ld0luZGljZXMgKTsKCgkJcmV0dXJuIG5ld0dlb21ldHJ5OwoKCX0KCgkvKioKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjZ2VvbWV0cnkKCSAqCgkgKiBDcmVhdGVzIEJ1ZmZlckdlb21ldHJpZXMgZnJvbSBwcmltaXRpdmVzLgoJICoKCSAqIEBwYXJhbSB7QXJyYXk8R0xURi5QcmltaXRpdmU+fSBwcmltaXRpdmVzCgkgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PFRIUkVFLkJ1ZmZlckdlb21ldHJ5Pj59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRHZW9tZXRyaWVzID0gZnVuY3Rpb24gKCBwcmltaXRpdmVzICkgewoKCQl2YXIgcGFyc2VyID0gdGhpczsKCQl2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9uczsKCQl2YXIgY2FjaGUgPSB0aGlzLnByaW1pdGl2ZUNhY2hlOwoKCQlmdW5jdGlvbiBjcmVhdGVEcmFjb1ByaW1pdGl2ZSggcHJpbWl0aXZlICkgewoKCQkJcmV0dXJuIGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04gXQoJCQkJLmRlY29kZVByaW1pdGl2ZSggcHJpbWl0aXZlLCBwYXJzZXIgKQoJCQkJLnRoZW4oIGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7CgoJCQkJCXJldHVybiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKCBnZW9tZXRyeSwgcHJpbWl0aXZlLCBwYXJzZXIgKTsKCgkJCQl9ICk7CgoJCX0KCgkJdmFyIHBlbmRpbmcgPSBbXTsKCgkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQl2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1sgaSBdOwoJCQl2YXIgY2FjaGVLZXkgPSBjcmVhdGVQcmltaXRpdmVLZXkoIHByaW1pdGl2ZSApOwoKCQkJLy8gU2VlIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdlb21ldHJ5CgkJCXZhciBjYWNoZWQgPSBjYWNoZVsgY2FjaGVLZXkgXTsKCgkJCWlmICggY2FjaGVkICkgewoKCQkJCS8vIFVzZSB0aGUgY2FjaGVkIGdlb21ldHJ5IGlmIGl0IGV4aXN0cwoJCQkJcGVuZGluZy5wdXNoKCBjYWNoZWQucHJvbWlzZSApOwoKCQkJfSBlbHNlIHsKCgkJCQl2YXIgZ2VvbWV0cnlQcm9taXNlOwoKCQkJCWlmICggcHJpbWl0aXZlLmV4dGVuc2lvbnMgJiYgcHJpbWl0aXZlLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04gXSApIHsKCgkJCQkJLy8gVXNlIERSQUNPIGdlb21ldHJ5IGlmIGF2YWlsYWJsZQoJCQkJCWdlb21ldHJ5UHJvbWlzZSA9IGNyZWF0ZURyYWNvUHJpbWl0aXZlKCBwcmltaXRpdmUgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQkvLyBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGdlb21ldHJ5CgkJCQkJZ2VvbWV0cnlQcm9taXNlID0gYWRkUHJpbWl0aXZlQXR0cmlidXRlcyggbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCksIHByaW1pdGl2ZSwgcGFyc2VyICk7CgoJCQkJfQoKCQkJCS8vIENhY2hlIHRoaXMgZ2VvbWV0cnkKCQkJCWNhY2hlWyBjYWNoZUtleSBdID0geyBwcmltaXRpdmU6IHByaW1pdGl2ZSwgcHJvbWlzZTogZ2VvbWV0cnlQcm9taXNlIH07CgoJCQkJcGVuZGluZy5wdXNoKCBnZW9tZXRyeVByb21pc2UgKTsKCgkJCX0KCgkJfQoKCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTsKCgl9OwoKCS8qKgoJICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtZXNoZXMKCSAqIEBwYXJhbSB7bnVtYmVyfSBtZXNoSW5kZXgKCSAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuR3JvdXB8VEhSRUUuTWVzaHxUSFJFRS5Ta2lubmVkTWVzaD59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKCBtZXNoSW5kZXggKSB7CgoJCXZhciBwYXJzZXIgPSB0aGlzOwoJCXZhciBqc29uID0gdGhpcy5qc29uOwoKCQl2YXIgbWVzaERlZiA9IGpzb24ubWVzaGVzWyBtZXNoSW5kZXggXTsKCQl2YXIgcHJpbWl0aXZlcyA9IG1lc2hEZWYucHJpbWl0aXZlczsKCgkJdmFyIHBlbmRpbmcgPSBbXTsKCgkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQl2YXIgbWF0ZXJpYWwgPSBwcmltaXRpdmVzWyBpIF0ubWF0ZXJpYWwgPT09IHVuZGVmaW5lZAoJCQkJPyBjcmVhdGVEZWZhdWx0TWF0ZXJpYWwoIHRoaXMuY2FjaGUgKQoJCQkJOiB0aGlzLmdldERlcGVuZGVuY3koICdtYXRlcmlhbCcsIHByaW1pdGl2ZXNbIGkgXS5tYXRlcmlhbCApOwoKCQkJcGVuZGluZy5wdXNoKCBtYXRlcmlhbCApOwoKCQl9CgoJCXJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApLnRoZW4oIGZ1bmN0aW9uICggb3JpZ2luYWxNYXRlcmlhbHMgKSB7CgoJCQlyZXR1cm4gcGFyc2VyLmxvYWRHZW9tZXRyaWVzKCBwcmltaXRpdmVzICkudGhlbiggZnVuY3Rpb24gKCBnZW9tZXRyaWVzICkgewoKCQkJCXZhciBtZXNoZXMgPSBbXTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cmllcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJdmFyIGdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgaSBdOwoJCQkJCXZhciBwcmltaXRpdmUgPSBwcmltaXRpdmVzWyBpIF07CgoJCQkJCS8vIDEuIGNyZWF0ZSBNZXNoCgoJCQkJCXZhciBtZXNoOwoKCQkJCQl2YXIgbWF0ZXJpYWwgPSBvcmlnaW5hbE1hdGVyaWFsc1sgaSBdOwoKCQkJCQlpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVTIHx8CgkJCQkJCXByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgfHwKCQkJCQkJcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9GQU4gfHwKCQkJCQkJcHJpbWl0aXZlLm1vZGUgPT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCS8vIC5pc1NraW5uZWRNZXNoIGlzbid0IGluIGdsVEYgc3BlYy4gU2VlIC5tYXJrRGVmcygpCgkJCQkJCW1lc2ggPSBtZXNoRGVmLmlzU2tpbm5lZE1lc2ggPT09IHRydWUKCQkJCQkJCT8gbmV3IFRIUkVFLlNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKQoJCQkJCQkJOiBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCQkJCQlpZiAoIG1lc2guaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZSAmJiAhIG1lc2guZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0Lm5vcm1hbGl6ZWQgKSB7CgoJCQkJCQkJLy8gd2Ugbm9ybWFsaXplIGZsb2F0aW5nIHBvaW50IHNraW4gd2VpZ2h0IGFycmF5IHRvIGZpeCBtYWxmb3JtZWQgYXNzZXRzIChzZWUgIzE1MzE5KQoJCQkJCQkJLy8gaXQncyBpbXBvcnRhbnQgdG8gc2tpcCB0aGlzIGZvciBub24tZmxvYXQzMiBkYXRhIHNpbmNlIG5vcm1hbGl6ZVNraW5XZWlnaHRzIGFzc3VtZXMgbm9uLW5vcm1hbGl6ZWQgaW5wdXRzCgkJCQkJCQltZXNoLm5vcm1hbGl6ZVNraW5XZWlnaHRzKCk7CgoJCQkJCQl9CgoJCQkJCQlpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgKSB7CgoJCQkJCQkJbWVzaC5nZW9tZXRyeSA9IHRvVHJpYW5nbGVzRHJhd01vZGUoIG1lc2guZ2VvbWV0cnksIFRIUkVFLlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSApOwoKCQkJCQkJfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9GQU4gKSB7CgoJCQkJCQkJbWVzaC5nZW9tZXRyeSA9IHRvVHJpYW5nbGVzRHJhd01vZGUoIG1lc2guZ2VvbWV0cnksIFRIUkVFLlRyaWFuZ2xlRmFuRHJhd01vZGUgKTsKCgkJCQkJCX0KCgkJCQkJfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FUyApIHsKCgkJCQkJCW1lc2ggPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJCQkJfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX1NUUklQICkgewoKCQkJCQkJbWVzaCA9IG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJCQkJfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX0xPT1AgKSB7CgoJCQkJCQltZXNoID0gbmV3IFRIUkVFLkxpbmVMb29wKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTsKCgkJCQkJfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5QT0lOVFMgKSB7CgoJCQkJCQltZXNoID0gbmV3IFRIUkVFLlBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBQcmltaXRpdmUgbW9kZSB1bnN1cHBvcnRlZDogJyArIHByaW1pdGl2ZS5tb2RlICk7CgoJCQkJCX0KCgkJCQkJaWYgKCBPYmplY3Qua2V5cyggbWVzaC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKS5sZW5ndGggPiAwICkgewoKCQkJCQkJdXBkYXRlTW9ycGhUYXJnZXRzKCBtZXNoLCBtZXNoRGVmICk7CgoJCQkJCX0KCgkJCQkJbWVzaC5uYW1lID0gbWVzaERlZi5uYW1lIHx8ICggJ21lc2hfJyArIG1lc2hJbmRleCApOwoKCQkJCQlpZiAoIGdlb21ldHJpZXMubGVuZ3RoID4gMSApIG1lc2gubmFtZSArPSAnXycgKyBpOwoKCQkJCQlhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBtZXNoLCBtZXNoRGVmICk7CgoJCQkJCXBhcnNlci5hc3NpZ25GaW5hbE1hdGVyaWFsKCBtZXNoICk7CgoJCQkJCW1lc2hlcy5wdXNoKCBtZXNoICk7CgoJCQkJfQoKCQkJCWlmICggbWVzaGVzLmxlbmd0aCA9PT0gMSApIHsKCgkJCQkJcmV0dXJuIG1lc2hlc1sgMCBdOwoKCQkJCX0KCgkJCQl2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTsKCgkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWVzaGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQlncm91cC5hZGQoIG1lc2hlc1sgaSBdICk7CgoJCQkJfQoKCQkJCXJldHVybiBncm91cDsKCgkJCX0gKTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjY2FtZXJhcwoJICogQHBhcmFtIHtudW1iZXJ9IGNhbWVyYUluZGV4CgkgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLkNhbWVyYT59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYUluZGV4ICkgewoKCQl2YXIgY2FtZXJhOwoJCXZhciBjYW1lcmFEZWYgPSB0aGlzLmpzb24uY2FtZXJhc1sgY2FtZXJhSW5kZXggXTsKCQl2YXIgcGFyYW1zID0gY2FtZXJhRGVmWyBjYW1lcmFEZWYudHlwZSBdOwoKCQlpZiAoICEgcGFyYW1zICkgewoKCQkJY29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogTWlzc2luZyBjYW1lcmEgcGFyYW1ldGVycy4nICk7CgkJCXJldHVybjsKCgkJfQoKCQlpZiAoIGNhbWVyYURlZi50eXBlID09PSAncGVyc3BlY3RpdmUnICkgewoKCQkJY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCBUSFJFRS5NYXRoLnJhZFRvRGVnKCBwYXJhbXMueWZvdiApLCBwYXJhbXMuYXNwZWN0UmF0aW8gfHwgMSwgcGFyYW1zLnpuZWFyIHx8IDEsIHBhcmFtcy56ZmFyIHx8IDJlNiApOwoKCQl9IGVsc2UgaWYgKCBjYW1lcmFEZWYudHlwZSA9PT0gJ29ydGhvZ3JhcGhpYycgKSB7CgoJCQljYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKCBwYXJhbXMueG1hZyAvIC0gMiwgcGFyYW1zLnhtYWcgLyAyLCBwYXJhbXMueW1hZyAvIDIsIHBhcmFtcy55bWFnIC8gLSAyLCBwYXJhbXMuem5lYXIsIHBhcmFtcy56ZmFyICk7CgoJCX0KCgkJaWYgKCBjYW1lcmFEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgY2FtZXJhLm5hbWUgPSBjYW1lcmFEZWYubmFtZTsKCgkJYXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggY2FtZXJhLCBjYW1lcmFEZWYgKTsKCgkJcmV0dXJuIFByb21pc2UucmVzb2x2ZSggY2FtZXJhICk7CgoJfTsKCgkvKioKCSAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNza2lucwoJICogQHBhcmFtIHtudW1iZXJ9IHNraW5JbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fQoJICovCglHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2tpbiA9IGZ1bmN0aW9uICggc2tpbkluZGV4ICkgewoKCQl2YXIgc2tpbkRlZiA9IHRoaXMuanNvbi5za2luc1sgc2tpbkluZGV4IF07CgoJCXZhciBza2luRW50cnkgPSB7IGpvaW50czogc2tpbkRlZi5qb2ludHMgfTsKCgkJaWYgKCBza2luRGVmLmludmVyc2VCaW5kTWF0cmljZXMgPT09IHVuZGVmaW5lZCApIHsKCgkJCXJldHVybiBQcm9taXNlLnJlc29sdmUoIHNraW5FbnRyeSApOwoKCQl9CgoJCXJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyApLnRoZW4oIGZ1bmN0aW9uICggYWNjZXNzb3IgKSB7CgoJCQlza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyA9IGFjY2Vzc29yOwoKCQkJcmV0dXJuIHNraW5FbnRyeTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjYW5pbWF0aW9ucwoJICogQHBhcmFtIHtudW1iZXJ9IGFuaW1hdGlvbkluZGV4CgkgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLkFuaW1hdGlvbkNsaXA+fQoJICovCglHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQW5pbWF0aW9uID0gZnVuY3Rpb24gKCBhbmltYXRpb25JbmRleCApIHsKCgkJdmFyIGpzb24gPSB0aGlzLmpzb247CgoJCXZhciBhbmltYXRpb25EZWYgPSBqc29uLmFuaW1hdGlvbnNbIGFuaW1hdGlvbkluZGV4IF07CgoJCXZhciBwZW5kaW5nTm9kZXMgPSBbXTsKCQl2YXIgcGVuZGluZ0lucHV0QWNjZXNzb3JzID0gW107CgkJdmFyIHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMgPSBbXTsKCQl2YXIgcGVuZGluZ1NhbXBsZXJzID0gW107CgkJdmFyIHBlbmRpbmdUYXJnZXRzID0gW107CgoJCWZvciAoIHZhciBpID0gMCwgaWwgPSBhbmltYXRpb25EZWYuY2hhbm5lbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQl2YXIgY2hhbm5lbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVsc1sgaSBdOwoJCQl2YXIgc2FtcGxlciA9IGFuaW1hdGlvbkRlZi5zYW1wbGVyc1sgY2hhbm5lbC5zYW1wbGVyIF07CgkJCXZhciB0YXJnZXQgPSBjaGFubmVsLnRhcmdldDsKCQkJdmFyIG5hbWUgPSB0YXJnZXQubm9kZSAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0Lm5vZGUgOiB0YXJnZXQuaWQ7IC8vIE5PVEU6IHRhcmdldC5pZCBpcyBkZXByZWNhdGVkLgoJCQl2YXIgaW5wdXQgPSBhbmltYXRpb25EZWYucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnNbIHNhbXBsZXIuaW5wdXQgXSA6IHNhbXBsZXIuaW5wdXQ7CgkJCXZhciBvdXRwdXQgPSBhbmltYXRpb25EZWYucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnNbIHNhbXBsZXIub3V0cHV0IF0gOiBzYW1wbGVyLm91dHB1dDsKCgkJCXBlbmRpbmdOb2Rlcy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdub2RlJywgbmFtZSApICk7CgkJCXBlbmRpbmdJbnB1dEFjY2Vzc29ycy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIGlucHV0ICkgKTsKCQkJcGVuZGluZ091dHB1dEFjY2Vzc29ycy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIG91dHB1dCApICk7CgkJCXBlbmRpbmdTYW1wbGVycy5wdXNoKCBzYW1wbGVyICk7CgkJCXBlbmRpbmdUYXJnZXRzLnB1c2goIHRhcmdldCApOwoKCQl9CgoJCXJldHVybiBQcm9taXNlLmFsbCggWwoKCQkJUHJvbWlzZS5hbGwoIHBlbmRpbmdOb2RlcyApLAoJCQlQcm9taXNlLmFsbCggcGVuZGluZ0lucHV0QWNjZXNzb3JzICksCgkJCVByb21pc2UuYWxsKCBwZW5kaW5nT3V0cHV0QWNjZXNzb3JzICksCgkJCVByb21pc2UuYWxsKCBwZW5kaW5nU2FtcGxlcnMgKSwKCQkJUHJvbWlzZS5hbGwoIHBlbmRpbmdUYXJnZXRzICkKCgkJXSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkgewoKCQkJdmFyIG5vZGVzID0gZGVwZW5kZW5jaWVzWyAwIF07CgkJCXZhciBpbnB1dEFjY2Vzc29ycyA9IGRlcGVuZGVuY2llc1sgMSBdOwoJCQl2YXIgb3V0cHV0QWNjZXNzb3JzID0gZGVwZW5kZW5jaWVzWyAyIF07CgkJCXZhciBzYW1wbGVycyA9IGRlcGVuZGVuY2llc1sgMyBdOwoJCQl2YXIgdGFyZ2V0cyA9IGRlcGVuZGVuY2llc1sgNCBdOwoKCQkJdmFyIHRyYWNrcyA9IFtdOwoKCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXZhciBub2RlID0gbm9kZXNbIGkgXTsKCQkJCXZhciBpbnB1dEFjY2Vzc29yID0gaW5wdXRBY2Nlc3NvcnNbIGkgXTsKCQkJCXZhciBvdXRwdXRBY2Nlc3NvciA9IG91dHB1dEFjY2Vzc29yc1sgaSBdOwoJCQkJdmFyIHNhbXBsZXIgPSBzYW1wbGVyc1sgaSBdOwoJCQkJdmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTsKCgkJCQlpZiAoIG5vZGUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlOwoKCQkJCW5vZGUudXBkYXRlTWF0cml4KCk7CgkJCQlub2RlLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlOwoKCQkJCXZhciBUeXBlZEtleWZyYW1lVHJhY2s7CgoJCQkJc3dpdGNoICggUEFUSF9QUk9QRVJUSUVTWyB0YXJnZXQucGF0aCBdICkgewoKCQkJCQljYXNlIFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzOgoKCQkJCQkJVHlwZWRLZXlmcmFtZVRyYWNrID0gVEhSRUUuTnVtYmVyS2V5ZnJhbWVUcmFjazsKCQkJCQkJYnJlYWs7CgoJCQkJCWNhc2UgUEFUSF9QUk9QRVJUSUVTLnJvdGF0aW9uOgoKCQkJCQkJVHlwZWRLZXlmcmFtZVRyYWNrID0gVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2s7CgkJCQkJCWJyZWFrOwoKCQkJCQljYXNlIFBBVEhfUFJPUEVSVElFUy5wb3NpdGlvbjoKCQkJCQljYXNlIFBBVEhfUFJPUEVSVElFUy5zY2FsZToKCQkJCQlkZWZhdWx0OgoKCQkJCQkJVHlwZWRLZXlmcmFtZVRyYWNrID0gVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjazsKCQkJCQkJYnJlYWs7CgoJCQkJfQoKCQkJCXZhciB0YXJnZXROYW1lID0gbm9kZS5uYW1lID8gbm9kZS5uYW1lIDogbm9kZS51dWlkOwoKCQkJCXZhciBpbnRlcnBvbGF0aW9uID0gc2FtcGxlci5pbnRlcnBvbGF0aW9uICE9PSB1bmRlZmluZWQgPyBJTlRFUlBPTEFUSU9OWyBzYW1wbGVyLmludGVycG9sYXRpb24gXSA6IFRIUkVFLkludGVycG9sYXRlTGluZWFyOwoKCQkJCXZhciB0YXJnZXROYW1lcyA9IFtdOwoKCQkJCWlmICggUEFUSF9QUk9QRVJUSUVTWyB0YXJnZXQucGF0aCBdID09PSBQQVRIX1BST1BFUlRJRVMud2VpZ2h0cyApIHsKCgkJCQkJLy8gTm9kZSBtYXkgYmUgYSBUSFJFRS5Hcm91cCAoZ2xURiBtZXNoIHdpdGggc2V2ZXJhbCBwcmltaXRpdmVzKSBvciBhIFRIUkVFLk1lc2guCgkJCQkJbm9kZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7CgoJCQkJCQlpZiAoIG9iamVjdC5pc01lc2ggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyApIHsKCgkJCQkJCQl0YXJnZXROYW1lcy5wdXNoKCBvYmplY3QubmFtZSA/IG9iamVjdC5uYW1lIDogb2JqZWN0LnV1aWQgKTsKCgkJCQkJCX0KCgkJCQkJfSApOwoKCQkJCX0gZWxzZSB7CgoJCQkJCXRhcmdldE5hbWVzLnB1c2goIHRhcmdldE5hbWUgKTsKCgkJCQl9CgoJCQkJdmFyIG91dHB1dEFycmF5ID0gb3V0cHV0QWNjZXNzb3IuYXJyYXk7CgoJCQkJaWYgKCBvdXRwdXRBY2Nlc3Nvci5ub3JtYWxpemVkICkgewoKCQkJCQl2YXIgc2NhbGU7CgoJCQkJCWlmICggb3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IEludDhBcnJheSApIHsKCgkJCQkJCXNjYWxlID0gMSAvIDEyNzsKCgkJCQkJfSBlbHNlIGlmICggb3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IFVpbnQ4QXJyYXkgKSB7CgoJCQkJCQlzY2FsZSA9IDEgLyAyNTU7CgoJCQkJCX0gZWxzZSBpZiAoIG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09IEludDE2QXJyYXkgKSB7CgoJCQkJCQlzY2FsZSA9IDEgLyAzMjc2NzsKCgkJCQkJfSBlbHNlIGlmICggb3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5ICkgewoKCQkJCQkJc2NhbGUgPSAxIC8gNjU1MzU7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBvdXRwdXQgYWNjZXNzb3IgY29tcG9uZW50IHR5cGUuJyApOwoKCQkJCQl9CgoJCQkJCXZhciBzY2FsZWQgPSBuZXcgRmxvYXQzMkFycmF5KCBvdXRwdXRBcnJheS5sZW5ndGggKTsKCgkJCQkJZm9yICggdmFyIGogPSAwLCBqbCA9IG91dHB1dEFycmF5Lmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQkJc2NhbGVkWyBqIF0gPSBvdXRwdXRBcnJheVsgaiBdICogc2NhbGU7CgoJCQkJCX0KCgkJCQkJb3V0cHV0QXJyYXkgPSBzY2FsZWQ7CgoJCQkJfQoKCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSB0YXJnZXROYW1lcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHsKCgkJCQkJdmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjaygKCQkJCQkJdGFyZ2V0TmFtZXNbIGogXSArICcuJyArIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSwKCQkJCQkJaW5wdXRBY2Nlc3Nvci5hcnJheSwKCQkJCQkJb3V0cHV0QXJyYXksCgkJCQkJCWludGVycG9sYXRpb24KCQkJCQkpOwoKCQkJCQkvLyBPdmVycmlkZSBpbnRlcnBvbGF0aW9uIHdpdGggY3VzdG9tIGZhY3RvcnkgbWV0aG9kLgoJCQkJCWlmICggc2FtcGxlci5pbnRlcnBvbGF0aW9uID09PSAnQ1VCSUNTUExJTkUnICkgewoKCQkJCQkJdHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSBmdW5jdGlvbiBJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUoIHJlc3VsdCApIHsKCgkJCQkJCQkvLyBBIENVQklDU1BMSU5FIGtleWZyYW1lIGluIGdsVEYgaGFzIHRocmVlIG91dHB1dCB2YWx1ZXMgZm9yIGVhY2ggaW5wdXQgdmFsdWUsCgkJCQkJCQkvLyByZXByZXNlbnRpbmcgaW5UYW5nZW50LCBzcGxpbmVWZXJ0ZXgsIGFuZCBvdXRUYW5nZW50LiBBcyBhIHJlc3VsdCwgdHJhY2suZ2V0VmFsdWVTaXplKCkKCQkJCQkJCS8vIG11c3QgYmUgZGl2aWRlZCBieSB0aHJlZSB0byBnZXQgdGhlIGludGVycG9sYW50J3Mgc2FtcGxlU2l6ZSBhcmd1bWVudC4KCgkJCQkJCQlyZXR1cm4gbmV3IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSAvIDMsIHJlc3VsdCApOwoKCQkJCQkJfTsKCgkJCQkJCS8vIE1hcmsgYXMgQ1VCSUNTUExJTkUuIGB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKClgIGRvZXNuJ3Qgc3VwcG9ydCBjdXN0b20gaW50ZXJwb2xhbnRzLgoJCQkJCQl0cmFjay5jcmVhdGVJbnRlcnBvbGFudC5pc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSA9IHRydWU7CgoJCQkJCX0KCgkJCQkJdHJhY2tzLnB1c2goIHRyYWNrICk7CgoJCQkJfQoKCQkJfQoKCQkJdmFyIG5hbWUgPSBhbmltYXRpb25EZWYubmFtZSAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLm5hbWUgOiAnYW5pbWF0aW9uXycgKyBhbmltYXRpb25JbmRleDsKCgkJCXJldHVybiBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcCggbmFtZSwgdW5kZWZpbmVkLCB0cmFja3MgKTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbm9kZXMtYW5kLWhpZXJhcmNoeQoJICogQHBhcmFtIHtudW1iZXJ9IG5vZGVJbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5PYmplY3QzRD59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWROb2RlID0gZnVuY3Rpb24gKCBub2RlSW5kZXggKSB7CgoJCXZhciBqc29uID0gdGhpcy5qc29uOwoJCXZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zOwoJCXZhciBwYXJzZXIgPSB0aGlzOwoKCQl2YXIgbWVzaFJlZmVyZW5jZXMgPSBqc29uLm1lc2hSZWZlcmVuY2VzOwoJCXZhciBtZXNoVXNlcyA9IGpzb24ubWVzaFVzZXM7CgoJCXZhciBub2RlRGVmID0ganNvbi5ub2Rlc1sgbm9kZUluZGV4IF07CgoJCXJldHVybiAoIGZ1bmN0aW9uICgpIHsKCgkJCXZhciBwZW5kaW5nID0gW107CgoJCQlpZiAoIG5vZGVEZWYubWVzaCAhPT0gdW5kZWZpbmVkICkgewoKCQkJCXBlbmRpbmcucHVzaCggcGFyc2VyLmdldERlcGVuZGVuY3koICdtZXNoJywgbm9kZURlZi5tZXNoICkudGhlbiggZnVuY3Rpb24gKCBtZXNoICkgewoKCQkJCQl2YXIgbm9kZTsKCgkJCQkJaWYgKCBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPiAxICkgewoKCQkJCQkJdmFyIGluc3RhbmNlTnVtID0gbWVzaFVzZXNbIG5vZGVEZWYubWVzaCBdICsrOwoKCQkJCQkJbm9kZSA9IG1lc2guY2xvbmUoKTsKCQkJCQkJbm9kZS5uYW1lICs9ICdfaW5zdGFuY2VfJyArIGluc3RhbmNlTnVtOwoKCQkJCQkJLy8gb25CZWZvcmVSZW5kZXIgY29weSBmb3IgU3BlY3VsYXItR2xvc3NpbmVzcwoJCQkJCQlub2RlLm9uQmVmb3JlUmVuZGVyID0gbWVzaC5vbkJlZm9yZVJlbmRlcjsKCgkJCQkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCQkJCW5vZGUuY2hpbGRyZW5bIGkgXS5uYW1lICs9ICdfaW5zdGFuY2VfJyArIGluc3RhbmNlTnVtOwoJCQkJCQkJbm9kZS5jaGlsZHJlblsgaSBdLm9uQmVmb3JlUmVuZGVyID0gbWVzaC5jaGlsZHJlblsgaSBdLm9uQmVmb3JlUmVuZGVyOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoKCQkJCQkJbm9kZSA9IG1lc2g7CgoJCQkJCX0KCgkJCQkJLy8gaWYgd2VpZ2h0cyBhcmUgcHJvdmlkZWQgb24gdGhlIG5vZGUsIG92ZXJyaWRlIHdlaWdodHMgb24gdGhlIG1lc2guCgkJCQkJaWYgKCBub2RlRGVmLndlaWdodHMgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJCW5vZGUudHJhdmVyc2UoIGZ1bmN0aW9uICggbyApIHsKCgkJCQkJCQlpZiAoICEgby5pc01lc2ggKSByZXR1cm47CgoJCQkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVEZWYud2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHsKCgkJCQkJCQkJby5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSA9IG5vZGVEZWYud2VpZ2h0c1sgaSBdOwoKCQkJCQkJCX0KCgkJCQkJCX0gKTsKCgkJCQkJfQoKCQkJCQlyZXR1cm4gbm9kZTsKCgkJCQl9ICkgKTsKCgkJCX0KCgkJCWlmICggbm9kZURlZi5jYW1lcmEgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlwZW5kaW5nLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnY2FtZXJhJywgbm9kZURlZi5jYW1lcmEgKSApOwoKCQkJfQoKCQkJaWYgKCBub2RlRGVmLmV4dGVuc2lvbnMKCQkJCSYmIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMIF0KCQkJCSYmIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMIF0ubGlnaHQgIT09IHVuZGVmaW5lZCApIHsKCgkJCQlwZW5kaW5nLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnbGlnaHQnLCBub2RlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTCBdLmxpZ2h0ICkgKTsKCgkJCX0KCgkJCXJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApOwoKCQl9KCkgKS50aGVuKCBmdW5jdGlvbiAoIG9iamVjdHMgKSB7CgoJCQl2YXIgbm9kZTsKCgkJCS8vIC5pc0JvbmUgaXNuJ3QgaW4gZ2xURiBzcGVjLiBTZWUgLm1hcmtEZWZzCgkJCWlmICggbm9kZURlZi5pc0JvbmUgPT09IHRydWUgKSB7CgoJCQkJbm9kZSA9IG5ldyBUSFJFRS5Cb25lKCk7CgoJCQl9IGVsc2UgaWYgKCBvYmplY3RzLmxlbmd0aCA+IDEgKSB7CgoJCQkJbm9kZSA9IG5ldyBUSFJFRS5Hcm91cCgpOwoKCQkJfSBlbHNlIGlmICggb2JqZWN0cy5sZW5ndGggPT09IDEgKSB7CgoJCQkJbm9kZSA9IG9iamVjdHNbIDAgXTsKCgkJCX0gZWxzZSB7CgoJCQkJbm9kZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpOwoKCQkJfQoKCQkJaWYgKCBub2RlICE9PSBvYmplY3RzWyAwIF0gKSB7CgoJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCW5vZGUuYWRkKCBvYmplY3RzWyBpIF0gKTsKCgkJCQl9CgoJCQl9CgoJCQlpZiAoIG5vZGVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgewoKCQkJCW5vZGUudXNlckRhdGEubmFtZSA9IG5vZGVEZWYubmFtZTsKCQkJCW5vZGUubmFtZSA9IFRIUkVFLlByb3BlcnR5QmluZGluZy5zYW5pdGl6ZU5vZGVOYW1lKCBub2RlRGVmLm5hbWUgKTsKCgkJCX0KCgkJCWFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIG5vZGUsIG5vZGVEZWYgKTsKCgkJCWlmICggbm9kZURlZi5leHRlbnNpb25zICkgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBleHRlbnNpb25zLCBub2RlLCBub2RlRGVmICk7CgoJCQlpZiAoIG5vZGVEZWYubWF0cml4ICE9PSB1bmRlZmluZWQgKSB7CgoJCQkJdmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7CgkJCQltYXRyaXguZnJvbUFycmF5KCBub2RlRGVmLm1hdHJpeCApOwoJCQkJbm9kZS5hcHBseU1hdHJpeCggbWF0cml4ICk7CgoJCQl9IGVsc2UgewoKCQkJCWlmICggbm9kZURlZi50cmFuc2xhdGlvbiAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQlub2RlLnBvc2l0aW9uLmZyb21BcnJheSggbm9kZURlZi50cmFuc2xhdGlvbiApOwoKCQkJCX0KCgkJCQlpZiAoIG5vZGVEZWYucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJbm9kZS5xdWF0ZXJuaW9uLmZyb21BcnJheSggbm9kZURlZi5yb3RhdGlvbiApOwoKCQkJCX0KCgkJCQlpZiAoIG5vZGVEZWYuc2NhbGUgIT09IHVuZGVmaW5lZCApIHsKCgkJCQkJbm9kZS5zY2FsZS5mcm9tQXJyYXkoIG5vZGVEZWYuc2NhbGUgKTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gbm9kZTsKCgkJfSApOwoKCX07CgoJLyoqCgkgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2NlbmVzCgkgKiBAcGFyYW0ge251bWJlcn0gc2NlbmVJbmRleAoJICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5TY2VuZT59CgkgKi8KCUdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTY2VuZSA9IGZ1bmN0aW9uICgpIHsKCgkJLy8gc2NlbmUgbm9kZSBoaWVyYWNoeSBidWlsZGVyCgoJCWZ1bmN0aW9uIGJ1aWxkTm9kZUhpZXJhY2h5KCBub2RlSWQsIHBhcmVudE9iamVjdCwganNvbiwgcGFyc2VyICkgewoKCQkJdmFyIG5vZGVEZWYgPSBqc29uLm5vZGVzWyBub2RlSWQgXTsKCgkJCXJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ25vZGUnLCBub2RlSWQgKS50aGVuKCBmdW5jdGlvbiAoIG5vZGUgKSB7CgoJCQkJaWYgKCBub2RlRGVmLnNraW4gPT09IHVuZGVmaW5lZCApIHJldHVybiBub2RlOwoKCQkJCS8vIGJ1aWxkIHNrZWxldG9uIGhlcmUgYXMgd2VsbAoKCQkJCXZhciBza2luRW50cnk7CgoJCQkJcmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnc2tpbicsIG5vZGVEZWYuc2tpbiApLnRoZW4oIGZ1bmN0aW9uICggc2tpbiApIHsKCgkJCQkJc2tpbkVudHJ5ID0gc2tpbjsKCgkJCQkJdmFyIHBlbmRpbmdKb2ludHMgPSBbXTsKCgkJCQkJZm9yICggdmFyIGkgPSAwLCBpbCA9IHNraW5FbnRyeS5qb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQlwZW5kaW5nSm9pbnRzLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnbm9kZScsIHNraW5FbnRyeS5qb2ludHNbIGkgXSApICk7CgoJCQkJCX0KCgkJCQkJcmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nSm9pbnRzICk7CgoJCQkJfSApLnRoZW4oIGZ1bmN0aW9uICggam9pbnROb2RlcyApIHsKCgkJCQkJbm9kZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBtZXNoICkgewoKCQkJCQkJaWYgKCAhIG1lc2guaXNNZXNoICkgcmV0dXJuOwoKCQkJCQkJdmFyIGJvbmVzID0gW107CgkJCQkJCXZhciBib25lSW52ZXJzZXMgPSBbXTsKCgkJCQkJCWZvciAoIHZhciBqID0gMCwgamwgPSBqb2ludE5vZGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkgewoKCQkJCQkJCXZhciBqb2ludE5vZGUgPSBqb2ludE5vZGVzWyBqIF07CgoJCQkJCQkJaWYgKCBqb2ludE5vZGUgKSB7CgoJCQkJCQkJCWJvbmVzLnB1c2goIGpvaW50Tm9kZSApOwoKCQkJCQkJCQl2YXIgbWF0ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTsKCgkJCQkJCQkJaWYgKCBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyAhPT0gdW5kZWZpbmVkICkgewoKCQkJCQkJCQkJbWF0LmZyb21BcnJheSggc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMuYXJyYXksIGogKiAxNiApOwoKCQkJCQkJCQl9CgoJCQkJCQkJCWJvbmVJbnZlcnNlcy5wdXNoKCBtYXQgKTsKCgkJCQkJCQl9IGVsc2UgewoKCQkJCQkJCQljb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBKb2ludCAiJXMiIGNvdWxkIG5vdCBiZSBmb3VuZC4nLCBza2luRW50cnkuam9pbnRzWyBqIF0gKTsKCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCQltZXNoLmJpbmQoIG5ldyBUSFJFRS5Ta2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApLCBtZXNoLm1hdHJpeFdvcmxkICk7CgoJCQkJCX0gKTsKCgkJCQkJcmV0dXJuIG5vZGU7CgoJCQkJfSApOwoKCQkJfSApLnRoZW4oIGZ1bmN0aW9uICggbm9kZSApIHsKCgkJCQkvLyBidWlsZCBub2RlIGhpZXJhY2h5CgoJCQkJcGFyZW50T2JqZWN0LmFkZCggbm9kZSApOwoKCQkJCXZhciBwZW5kaW5nID0gW107CgoJCQkJaWYgKCBub2RlRGVmLmNoaWxkcmVuICkgewoKCQkJCQl2YXIgY2hpbGRyZW4gPSBub2RlRGVmLmNoaWxkcmVuOwoKCQkJCQlmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7CgoJCQkJCQl2YXIgY2hpbGQgPSBjaGlsZHJlblsgaSBdOwoJCQkJCQlwZW5kaW5nLnB1c2goIGJ1aWxkTm9kZUhpZXJhY2h5KCBjaGlsZCwgbm9kZSwganNvbiwgcGFyc2VyICkgKTsKCgkJCQkJfQoKCQkJCX0KCgkJCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTsKCgkJCX0gKTsKCgkJfQoKCQlyZXR1cm4gZnVuY3Rpb24gbG9hZFNjZW5lKCBzY2VuZUluZGV4ICkgewoKCQkJdmFyIGpzb24gPSB0aGlzLmpzb247CgkJCXZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zOwoJCQl2YXIgc2NlbmVEZWYgPSB0aGlzLmpzb24uc2NlbmVzWyBzY2VuZUluZGV4IF07CgkJCXZhciBwYXJzZXIgPSB0aGlzOwoKCQkJdmFyIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7CgkJCWlmICggc2NlbmVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgc2NlbmUubmFtZSA9IHNjZW5lRGVmLm5hbWU7CgoJCQlhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBzY2VuZSwgc2NlbmVEZWYgKTsKCgkJCWlmICggc2NlbmVEZWYuZXh0ZW5zaW9ucyApIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YSggZXh0ZW5zaW9ucywgc2NlbmUsIHNjZW5lRGVmICk7CgoJCQl2YXIgbm9kZUlkcyA9IHNjZW5lRGVmLm5vZGVzIHx8IFtdOwoKCQkJdmFyIHBlbmRpbmcgPSBbXTsKCgkJCWZvciAoIHZhciBpID0gMCwgaWwgPSBub2RlSWRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkgewoKCQkJCXBlbmRpbmcucHVzaCggYnVpbGROb2RlSGllcmFjaHkoIG5vZGVJZHNbIGkgXSwgc2NlbmUsIGpzb24sIHBhcnNlciApICk7CgoJCQl9CgoJCQlyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7CgoJCQkJcmV0dXJuIHNjZW5lOwoKCQkJfSApOwoKCQl9OwoKCX0oKTsKCglyZXR1cm4gR0xURkxvYWRlcjsKCn0gKSgpOwoKfSx7fV0sNDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKioKICogTG9hZHMgYSBXYXZlZnJvbnQgLm10bCBmaWxlIHNwZWNpZnlpbmcgbWF0ZXJpYWxzCiAqCiAqIEBhdXRob3IgYW5nZWx4dWFuY2hhbmcKICovCgpUSFJFRS5NVExMb2FkZXIgPSBmdW5jdGlvbiAoIG1hbmFnZXIgKSB7CgoJVEhSRUUuTG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTsKCn07CgpUSFJFRS5NVExMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggVEhSRUUuTG9hZGVyLnByb3RvdHlwZSApLCB7CgoJY29uc3RydWN0b3I6IFRIUkVFLk1UTExvYWRlciwKCgkvKioKCSAqIExvYWRzIGFuZCBwYXJzZXMgYSBNVEwgYXNzZXQgZnJvbSBhIFVSTC4KCSAqCgkgKiBAcGFyYW0ge1N0cmluZ30gdXJsIC0gVVJMIHRvIHRoZSBNVEwgZmlsZS4KCSAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkxvYWRdIC0gQ2FsbGJhY2sgaW52b2tlZCB3aXRoIHRoZSBsb2FkZWQgb2JqZWN0LgoJICogQHBhcmFtIHtGdW5jdGlvbn0gW29uUHJvZ3Jlc3NdIC0gQ2FsbGJhY2sgZm9yIGRvd25sb2FkIHByb2dyZXNzLgoJICogQHBhcmFtIHtGdW5jdGlvbn0gW29uRXJyb3JdIC0gQ2FsbGJhY2sgZm9yIGRvd25sb2FkIGVycm9ycy4KCSAqCgkgKiBAc2VlIHNldFBhdGggc2V0UmVzb3VyY2VQYXRoCgkgKgoJICogQG5vdGUgSW4gb3JkZXIgZm9yIHJlbGF0aXZlIHRleHR1cmUgcmVmZXJlbmNlcyB0byByZXNvbHZlIGNvcnJlY3RseQoJICogeW91IG11c3QgY2FsbCBzZXRSZXNvdXJjZVBhdGgoKSBleHBsaWNpdGx5IHByaW9yIHRvIGxvYWQuCgkgKi8KCWxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7CgoJCXZhciBzY29wZSA9IHRoaXM7CgoJCXZhciBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7CgoJCXZhciBsb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7CgkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoJCWxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHsKCgkJCW9uTG9hZCggc2NvcGUucGFyc2UoIHRleHQsIHBhdGggKSApOwoKCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgoJfSwKCglzZXRNYXRlcmlhbE9wdGlvbnM6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgoJCXRoaXMubWF0ZXJpYWxPcHRpb25zID0gdmFsdWU7CgkJcmV0dXJuIHRoaXM7CgoJfSwKCgkvKioKCSAqIFBhcnNlcyBhIE1UTCBmaWxlLgoJICoKCSAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IC0gQ29udGVudCBvZiBNVEwgZmlsZQoJICogQHJldHVybiB7VEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvcn0KCSAqCgkgKiBAc2VlIHNldFBhdGggc2V0UmVzb3VyY2VQYXRoCgkgKgoJICogQG5vdGUgSW4gb3JkZXIgZm9yIHJlbGF0aXZlIHRleHR1cmUgcmVmZXJlbmNlcyB0byByZXNvbHZlIGNvcnJlY3RseQoJICogeW91IG11c3QgY2FsbCBzZXRSZXNvdXJjZVBhdGgoKSBleHBsaWNpdGx5IHByaW9yIHRvIHBhcnNlLgoJICovCglwYXJzZTogZnVuY3Rpb24gKCB0ZXh0LCBwYXRoICkgewoKCQl2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KCAnXG4nICk7CgkJdmFyIGluZm8gPSB7fTsKCQl2YXIgZGVsaW1pdGVyX3BhdHRlcm4gPSAvXHMrLzsKCQl2YXIgbWF0ZXJpYWxzSW5mbyA9IHt9OwoKCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKysgKSB7CgoJCQl2YXIgbGluZSA9IGxpbmVzWyBpIF07CgkJCWxpbmUgPSBsaW5lLnRyaW0oKTsKCgkJCWlmICggbGluZS5sZW5ndGggPT09IDAgfHwgbGluZS5jaGFyQXQoIDAgKSA9PT0gJyMnICkgewoKCQkJCS8vIEJsYW5rIGxpbmUgb3IgY29tbWVudCBpZ25vcmUKCQkJCWNvbnRpbnVlOwoKCQkJfQoKCQkJdmFyIHBvcyA9IGxpbmUuaW5kZXhPZiggJyAnICk7CgoJCQl2YXIga2V5ID0gKCBwb3MgPj0gMCApID8gbGluZS5zdWJzdHJpbmcoIDAsIHBvcyApIDogbGluZTsKCQkJa2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7CgoJCQl2YXIgdmFsdWUgPSAoIHBvcyA+PSAwICkgPyBsaW5lLnN1YnN0cmluZyggcG9zICsgMSApIDogJyc7CgkJCXZhbHVlID0gdmFsdWUudHJpbSgpOwoKCQkJaWYgKCBrZXkgPT09ICduZXdtdGwnICkgewoKCQkJCS8vIE5ldyBtYXRlcmlhbAoKCQkJCWluZm8gPSB7IG5hbWU6IHZhbHVlIH07CgkJCQltYXRlcmlhbHNJbmZvWyB2YWx1ZSBdID0gaW5mbzsKCgkJCX0gZWxzZSB7CgoJCQkJaWYgKCBrZXkgPT09ICdrYScgfHwga2V5ID09PSAna2QnIHx8IGtleSA9PT0gJ2tzJyB8fCBrZXkgPT09ICdrZScgKSB7CgoJCQkJCXZhciBzcyA9IHZhbHVlLnNwbGl0KCBkZWxpbWl0ZXJfcGF0dGVybiwgMyApOwoJCQkJCWluZm9bIGtleSBdID0gWyBwYXJzZUZsb2F0KCBzc1sgMCBdICksIHBhcnNlRmxvYXQoIHNzWyAxIF0gKSwgcGFyc2VGbG9hdCggc3NbIDIgXSApIF07CgoJCQkJfSBlbHNlIHsKCgkJCQkJaW5mb1sga2V5IF0gPSB2YWx1ZTsKCgkJCQl9CgoJCQl9CgoJCX0KCgkJdmFyIG1hdGVyaWFsQ3JlYXRvciA9IG5ldyBUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yKCB0aGlzLnJlc291cmNlUGF0aCB8fCBwYXRoLCB0aGlzLm1hdGVyaWFsT3B0aW9ucyApOwoJCW1hdGVyaWFsQ3JlYXRvci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApOwoJCW1hdGVyaWFsQ3JlYXRvci5zZXRNYW5hZ2VyKCB0aGlzLm1hbmFnZXIgKTsKCQltYXRlcmlhbENyZWF0b3Iuc2V0TWF0ZXJpYWxzKCBtYXRlcmlhbHNJbmZvICk7CgkJcmV0dXJuIG1hdGVyaWFsQ3JlYXRvcjsKCgl9Cgp9ICk7CgovKioKICogQ3JlYXRlIGEgbmV3IFRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IKICogQHBhcmFtIGJhc2VVcmwgLSBVcmwgcmVsYXRpdmUgdG8gd2hpY2ggdGV4dHVyZXMgYXJlIGxvYWRlZAogKiBAcGFyYW0gb3B0aW9ucyAtIFNldCBvZiBvcHRpb25zIG9uIGhvdyB0byBjb25zdHJ1Y3QgdGhlIG1hdGVyaWFscwogKiAgICAgICAgICAgICAgICAgIHNpZGU6IFdoaWNoIHNpZGUgdG8gYXBwbHkgdGhlIG1hdGVyaWFsCiAqICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuRnJvbnRTaWRlIChkZWZhdWx0KSwgVEhSRUUuQmFja1NpZGUsIFRIUkVFLkRvdWJsZVNpZGUKICogICAgICAgICAgICAgICAgICB3cmFwOiBXaGF0IHR5cGUgb2Ygd3JhcHBpbmcgdG8gYXBwbHkgZm9yIHRleHR1cmVzCiAqICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuUmVwZWF0V3JhcHBpbmcgKGRlZmF1bHQpLCBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLCBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nCiAqICAgICAgICAgICAgICAgICAgbm9ybWFsaXplUkdCOiBSR0JzIG5lZWQgdG8gYmUgbm9ybWFsaXplZCB0byAwLTEgZnJvbSAwLTI1NQogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogZmFsc2UsIGFzc3VtZWQgdG8gYmUgYWxyZWFkeSBub3JtYWxpemVkCiAqICAgICAgICAgICAgICAgICAgaWdub3JlWmVyb1JHQnM6IElnbm9yZSB2YWx1ZXMgb2YgUkdCcyAoS2EsS2QsS3MpIHRoYXQgYXJlIGFsbCAwJ3MKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogZmFsc2UKICogQGNvbnN0cnVjdG9yCiAqLwoKVEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvciA9IGZ1bmN0aW9uICggYmFzZVVybCwgb3B0aW9ucyApIHsKCgl0aGlzLmJhc2VVcmwgPSBiYXNlVXJsIHx8ICcnOwoJdGhpcy5vcHRpb25zID0gb3B0aW9uczsKCXRoaXMubWF0ZXJpYWxzSW5mbyA9IHt9OwoJdGhpcy5tYXRlcmlhbHMgPSB7fTsKCXRoaXMubWF0ZXJpYWxzQXJyYXkgPSBbXTsKCXRoaXMubmFtZUxvb2t1cCA9IHt9OwoKCXRoaXMuc2lkZSA9ICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5zaWRlICkgPyB0aGlzLm9wdGlvbnMuc2lkZSA6IFRIUkVFLkZyb250U2lkZTsKCXRoaXMud3JhcCA9ICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy53cmFwICkgPyB0aGlzLm9wdGlvbnMud3JhcCA6IFRIUkVFLlJlcGVhdFdyYXBwaW5nOwoKfTsKClRIUkVFLk1UTExvYWRlci5NYXRlcmlhbENyZWF0b3IucHJvdG90eXBlID0gewoKCWNvbnN0cnVjdG9yOiBUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yLAoKCWNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJywKCglzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJdGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlOwoJCXJldHVybiB0aGlzOwoKCX0sCgoJc2V0TWFuYWdlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHsKCgkJdGhpcy5tYW5hZ2VyID0gdmFsdWU7CgoJfSwKCglzZXRNYXRlcmlhbHM6IGZ1bmN0aW9uICggbWF0ZXJpYWxzSW5mbyApIHsKCgkJdGhpcy5tYXRlcmlhbHNJbmZvID0gdGhpcy5jb252ZXJ0KCBtYXRlcmlhbHNJbmZvICk7CgkJdGhpcy5tYXRlcmlhbHMgPSB7fTsKCQl0aGlzLm1hdGVyaWFsc0FycmF5ID0gW107CgkJdGhpcy5uYW1lTG9va3VwID0ge307CgoJfSwKCgljb252ZXJ0OiBmdW5jdGlvbiAoIG1hdGVyaWFsc0luZm8gKSB7CgoJCWlmICggISB0aGlzLm9wdGlvbnMgKSByZXR1cm4gbWF0ZXJpYWxzSW5mbzsKCgkJdmFyIGNvbnZlcnRlZCA9IHt9OwoKCQlmb3IgKCB2YXIgbW4gaW4gbWF0ZXJpYWxzSW5mbyApIHsKCgkJCS8vIENvbnZlcnQgbWF0ZXJpYWxzIGluZm8gaW50byBub3JtYWxpemVkIGZvcm0gYmFzZWQgb24gb3B0aW9ucwoKCQkJdmFyIG1hdCA9IG1hdGVyaWFsc0luZm9bIG1uIF07CgoJCQl2YXIgY292bWF0ID0ge307CgoJCQljb252ZXJ0ZWRbIG1uIF0gPSBjb3ZtYXQ7CgoJCQlmb3IgKCB2YXIgcHJvcCBpbiBtYXQgKSB7CgoJCQkJdmFyIHNhdmUgPSB0cnVlOwoJCQkJdmFyIHZhbHVlID0gbWF0WyBwcm9wIF07CgkJCQl2YXIgbHByb3AgPSBwcm9wLnRvTG93ZXJDYXNlKCk7CgoJCQkJc3dpdGNoICggbHByb3AgKSB7CgoJCQkJCWNhc2UgJ2tkJzoKCQkJCQljYXNlICdrYSc6CgkJCQkJY2FzZSAna3MnOgoKCQkJCQkJLy8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXMKCgkJCQkJCWlmICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5ub3JtYWxpemVSR0IgKSB7CgoJCQkJCQkJdmFsdWUgPSBbIHZhbHVlWyAwIF0gLyAyNTUsIHZhbHVlWyAxIF0gLyAyNTUsIHZhbHVlWyAyIF0gLyAyNTUgXTsKCgkJCQkJCX0KCgkJCQkJCWlmICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pZ25vcmVaZXJvUkdCcyApIHsKCgkJCQkJCQlpZiAoIHZhbHVlWyAwIF0gPT09IDAgJiYgdmFsdWVbIDEgXSA9PT0gMCAmJiB2YWx1ZVsgMiBdID09PSAwICkgewoKCQkJCQkJCQkvLyBpZ25vcmUKCgkJCQkJCQkJc2F2ZSA9IGZhbHNlOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJCWJyZWFrOwoKCQkJCQlkZWZhdWx0OgoKCQkJCQkJYnJlYWs7CgoJCQkJfQoKCQkJCWlmICggc2F2ZSApIHsKCgkJCQkJY292bWF0WyBscHJvcCBdID0gdmFsdWU7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCXJldHVybiBjb252ZXJ0ZWQ7CgoJfSwKCglwcmVsb2FkOiBmdW5jdGlvbiAoKSB7CgoJCWZvciAoIHZhciBtbiBpbiB0aGlzLm1hdGVyaWFsc0luZm8gKSB7CgoJCQl0aGlzLmNyZWF0ZSggbW4gKTsKCgkJfQoKCX0sCgoJZ2V0SW5kZXg6IGZ1bmN0aW9uICggbWF0ZXJpYWxOYW1lICkgewoKCQlyZXR1cm4gdGhpcy5uYW1lTG9va3VwWyBtYXRlcmlhbE5hbWUgXTsKCgl9LAoKCWdldEFzQXJyYXk6IGZ1bmN0aW9uICgpIHsKCgkJdmFyIGluZGV4ID0gMDsKCgkJZm9yICggdmFyIG1uIGluIHRoaXMubWF0ZXJpYWxzSW5mbyApIHsKCgkJCXRoaXMubWF0ZXJpYWxzQXJyYXlbIGluZGV4IF0gPSB0aGlzLmNyZWF0ZSggbW4gKTsKCQkJdGhpcy5uYW1lTG9va3VwWyBtbiBdID0gaW5kZXg7CgkJCWluZGV4ICsrOwoKCQl9CgoJCXJldHVybiB0aGlzLm1hdGVyaWFsc0FycmF5OwoKCX0sCgoJY3JlYXRlOiBmdW5jdGlvbiAoIG1hdGVyaWFsTmFtZSApIHsKCgkJaWYgKCB0aGlzLm1hdGVyaWFsc1sgbWF0ZXJpYWxOYW1lIF0gPT09IHVuZGVmaW5lZCApIHsKCgkJCXRoaXMuY3JlYXRlTWF0ZXJpYWxfKCBtYXRlcmlhbE5hbWUgKTsKCgkJfQoKCQlyZXR1cm4gdGhpcy5tYXRlcmlhbHNbIG1hdGVyaWFsTmFtZSBdOwoKCX0sCgoJY3JlYXRlTWF0ZXJpYWxfOiBmdW5jdGlvbiAoIG1hdGVyaWFsTmFtZSApIHsKCgkJLy8gQ3JlYXRlIG1hdGVyaWFsCgoJCXZhciBzY29wZSA9IHRoaXM7CgkJdmFyIG1hdCA9IHRoaXMubWF0ZXJpYWxzSW5mb1sgbWF0ZXJpYWxOYW1lIF07CgkJdmFyIHBhcmFtcyA9IHsKCgkJCW5hbWU6IG1hdGVyaWFsTmFtZSwKCQkJc2lkZTogdGhpcy5zaWRlCgoJCX07CgoJCWZ1bmN0aW9uIHJlc29sdmVVUkwoIGJhc2VVcmwsIHVybCApIHsKCgkJCWlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApCgkJCQlyZXR1cm4gJyc7CgoJCQkvLyBBYnNvbHV0ZSBVUkwKCQkJaWYgKCAvXmh0dHBzPzpcL1wvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsOwoKCQkJcmV0dXJuIGJhc2VVcmwgKyB1cmw7CgoJCX0KCgkJZnVuY3Rpb24gc2V0TWFwRm9yVHlwZSggbWFwVHlwZSwgdmFsdWUgKSB7CgoJCQlpZiAoIHBhcmFtc1sgbWFwVHlwZSBdICkgcmV0dXJuOyAvLyBLZWVwIHRoZSBmaXJzdCBlbmNvdW50ZXJlZCB0ZXh0dXJlCgoJCQl2YXIgdGV4UGFyYW1zID0gc2NvcGUuZ2V0VGV4dHVyZVBhcmFtcyggdmFsdWUsIHBhcmFtcyApOwoJCQl2YXIgbWFwID0gc2NvcGUubG9hZFRleHR1cmUoIHJlc29sdmVVUkwoIHNjb3BlLmJhc2VVcmwsIHRleFBhcmFtcy51cmwgKSApOwoKCQkJbWFwLnJlcGVhdC5jb3B5KCB0ZXhQYXJhbXMuc2NhbGUgKTsKCQkJbWFwLm9mZnNldC5jb3B5KCB0ZXhQYXJhbXMub2Zmc2V0ICk7CgoJCQltYXAud3JhcFMgPSBzY29wZS53cmFwOwoJCQltYXAud3JhcFQgPSBzY29wZS53cmFwOwoKCQkJcGFyYW1zWyBtYXBUeXBlIF0gPSBtYXA7CgoJCX0KCgkJZm9yICggdmFyIHByb3AgaW4gbWF0ICkgewoKCQkJdmFyIHZhbHVlID0gbWF0WyBwcm9wIF07CgkJCXZhciBuOwoKCQkJaWYgKCB2YWx1ZSA9PT0gJycgKSBjb250aW51ZTsKCgkJCXN3aXRjaCAoIHByb3AudG9Mb3dlckNhc2UoKSApIHsKCgkJCQkvLyBOcyBpcyBtYXRlcmlhbCBzcGVjdWxhciBleHBvbmVudAoKCQkJCWNhc2UgJ2tkJzoKCgkJCQkJLy8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXMKCgkJCQkJcGFyYW1zLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCB2YWx1ZSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdrcyc6CgoJCQkJCS8vIFNwZWN1bGFyIGNvbG9yIChjb2xvciB3aGVuIGxpZ2h0IGlzIHJlZmxlY3RlZCBmcm9tIHNoaW55IHN1cmZhY2UpIHVzaW5nIFJHQiB2YWx1ZXMKCQkJCQlwYXJhbXMuc3BlY3VsYXIgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIHZhbHVlICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ2tlJzoKCgkJCQkJLy8gRW1pc3NpdmUgdXNpbmcgUkdCIHZhbHVlcwoJCQkJCXBhcmFtcy5lbWlzc2l2ZSA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggdmFsdWUgKTsKCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnbWFwX2tkJzoKCgkJCQkJLy8gRGlmZnVzZSB0ZXh0dXJlIG1hcAoKCQkJCQlzZXRNYXBGb3JUeXBlKCAibWFwIiwgdmFsdWUgKTsKCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnbWFwX2tzJzoKCgkJCQkJLy8gU3BlY3VsYXIgbWFwCgoJCQkJCXNldE1hcEZvclR5cGUoICJzcGVjdWxhck1hcCIsIHZhbHVlICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ21hcF9rZSc6CgoJCQkJCS8vIEVtaXNzaXZlIG1hcAoKCQkJCQlzZXRNYXBGb3JUeXBlKCAiZW1pc3NpdmVNYXAiLCB2YWx1ZSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdub3JtJzoKCgkJCQkJc2V0TWFwRm9yVHlwZSggIm5vcm1hbE1hcCIsIHZhbHVlICk7CgoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ21hcF9idW1wJzoKCQkJCWNhc2UgJ2J1bXAnOgoKCQkJCQkvLyBCdW1wIHRleHR1cmUgbWFwCgoJCQkJCXNldE1hcEZvclR5cGUoICJidW1wTWFwIiwgdmFsdWUgKTsKCgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnbWFwX2QnOgoKCQkJCQkvLyBBbHBoYSBtYXAKCgkJCQkJc2V0TWFwRm9yVHlwZSggImFscGhhTWFwIiwgdmFsdWUgKTsKCQkJCQlwYXJhbXMudHJhbnNwYXJlbnQgPSB0cnVlOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICducyc6CgoJCQkJCS8vIFRoZSBzcGVjdWxhciBleHBvbmVudCAoZGVmaW5lcyB0aGUgZm9jdXMgb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodCkKCQkJCQkvLyBBIGhpZ2ggZXhwb25lbnQgcmVzdWx0cyBpbiBhIHRpZ2h0LCBjb25jZW50cmF0ZWQgaGlnaGxpZ2h0LiBOcyB2YWx1ZXMgbm9ybWFsbHkgcmFuZ2UgZnJvbSAwIHRvIDEwMDAuCgoJCQkJCXBhcmFtcy5zaGluaW5lc3MgPSBwYXJzZUZsb2F0KCB2YWx1ZSApOwoKCQkJCQlicmVhazsKCgkJCQljYXNlICdkJzoKCQkJCQluID0gcGFyc2VGbG9hdCggdmFsdWUgKTsKCgkJCQkJaWYgKCBuIDwgMSApIHsKCgkJCQkJCXBhcmFtcy5vcGFjaXR5ID0gbjsKCQkJCQkJcGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTsKCgkJCQkJfQoKCQkJCQlicmVhazsKCgkJCQljYXNlICd0cic6CgkJCQkJbiA9IHBhcnNlRmxvYXQoIHZhbHVlICk7CgoJCQkJCWlmICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pbnZlcnRUclByb3BlcnR5ICkgbiA9IDEgLSBuOwoKCQkJCQlpZiAoIG4gPiAwICkgewoKCQkJCQkJcGFyYW1zLm9wYWNpdHkgPSAxIC0gbjsKCQkJCQkJcGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTsKCgkJCQkJfQoKCQkJCQlicmVhazsKCgkJCQlkZWZhdWx0OgoJCQkJCWJyZWFrOwoKCQkJfQoKCQl9CgoJCXRoaXMubWF0ZXJpYWxzWyBtYXRlcmlhbE5hbWUgXSA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggcGFyYW1zICk7CgkJcmV0dXJuIHRoaXMubWF0ZXJpYWxzWyBtYXRlcmlhbE5hbWUgXTsKCgl9LAoKCWdldFRleHR1cmVQYXJhbXM6IGZ1bmN0aW9uICggdmFsdWUsIG1hdFBhcmFtcyApIHsKCgkJdmFyIHRleFBhcmFtcyA9IHsKCgkJCXNjYWxlOiBuZXcgVEhSRUUuVmVjdG9yMiggMSwgMSApLAoJCQlvZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IyKCAwLCAwICkKCgkJIH07CgoJCXZhciBpdGVtcyA9IHZhbHVlLnNwbGl0KCAvXHMrLyApOwoJCXZhciBwb3M7CgoJCXBvcyA9IGl0ZW1zLmluZGV4T2YoICctYm0nICk7CgoJCWlmICggcG9zID49IDAgKSB7CgoJCQltYXRQYXJhbXMuYnVtcFNjYWxlID0gcGFyc2VGbG9hdCggaXRlbXNbIHBvcyArIDEgXSApOwoJCQlpdGVtcy5zcGxpY2UoIHBvcywgMiApOwoKCQl9CgoJCXBvcyA9IGl0ZW1zLmluZGV4T2YoICctcycgKTsKCgkJaWYgKCBwb3MgPj0gMCApIHsKCgkJCXRleFBhcmFtcy5zY2FsZS5zZXQoIHBhcnNlRmxvYXQoIGl0ZW1zWyBwb3MgKyAxIF0gKSwgcGFyc2VGbG9hdCggaXRlbXNbIHBvcyArIDIgXSApICk7CgkJCWl0ZW1zLnNwbGljZSggcG9zLCA0ICk7IC8vIHdlIGV4cGVjdCAzIHBhcmFtZXRlcnMgaGVyZSEKCgkJfQoKCQlwb3MgPSBpdGVtcy5pbmRleE9mKCAnLW8nICk7CgoJCWlmICggcG9zID49IDAgKSB7CgoJCQl0ZXhQYXJhbXMub2Zmc2V0LnNldCggcGFyc2VGbG9hdCggaXRlbXNbIHBvcyArIDEgXSApLCBwYXJzZUZsb2F0KCBpdGVtc1sgcG9zICsgMiBdICkgKTsKCQkJaXRlbXMuc3BsaWNlKCBwb3MsIDQgKTsgLy8gd2UgZXhwZWN0IDMgcGFyYW1ldGVycyBoZXJlIQoKCQl9CgoJCXRleFBhcmFtcy51cmwgPSBpdGVtcy5qb2luKCAnICcgKS50cmltKCk7CgkJcmV0dXJuIHRleFBhcmFtczsKCgl9LAoKCWxvYWRUZXh0dXJlOiBmdW5jdGlvbiAoIHVybCwgbWFwcGluZywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkgewoKCQl2YXIgdGV4dHVyZTsKCQl2YXIgbWFuYWdlciA9ICggdGhpcy5tYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IHRoaXMubWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjsKCQl2YXIgbG9hZGVyID0gbWFuYWdlci5nZXRIYW5kbGVyKCB1cmwgKTsKCgkJaWYgKCBsb2FkZXIgPT09IG51bGwgKSB7CgoJCQlsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlciggbWFuYWdlciApOwoKCQl9CgoJCWlmICggbG9hZGVyLnNldENyb3NzT3JpZ2luICkgbG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7CgkJdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApOwoKCQlpZiAoIG1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7CgoJCXJldHVybiB0ZXh0dXJlOwoKCX0KCn07Cgp9LHt9XSw0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tLwogKi8KClRIUkVFLk9CSkxvYWRlciA9ICggZnVuY3Rpb24gKCkgewoKCS8vIG8gb2JqZWN0X25hbWUgfCBnIGdyb3VwX25hbWUKCXZhciBvYmplY3RfcGF0dGVybiA9IC9eW29nXVxzKiguKyk/LzsKCS8vIG10bGxpYiBmaWxlX3JlZmVyZW5jZQoJdmFyIG1hdGVyaWFsX2xpYnJhcnlfcGF0dGVybiA9IC9ebXRsbGliIC87CgkvLyB1c2VtdGwgbWF0ZXJpYWxfbmFtZQoJdmFyIG1hdGVyaWFsX3VzZV9wYXR0ZXJuID0gL151c2VtdGwgLzsKCS8vIHVzZW1hcCBtYXBfbmFtZQoJdmFyIG1hcF91c2VfcGF0dGVybiA9IC9edXNlbWFwIC87CgoJZnVuY3Rpb24gUGFyc2VyU3RhdGUoKSB7CgoJCXZhciBzdGF0ZSA9IHsKCQkJb2JqZWN0czogW10sCgkJCW9iamVjdDoge30sCgoJCQl2ZXJ0aWNlczogW10sCgkJCW5vcm1hbHM6IFtdLAoJCQljb2xvcnM6IFtdLAoJCQl1dnM6IFtdLAoKCQkJbWF0ZXJpYWxMaWJyYXJpZXM6IFtdLAoKCQkJc3RhcnRPYmplY3Q6IGZ1bmN0aW9uICggbmFtZSwgZnJvbURlY2xhcmF0aW9uICkgewoKCQkJCS8vIElmIHRoZSBjdXJyZW50IG9iamVjdCAoaW5pdGlhbCBmcm9tIHJlc2V0KSBpcyBub3QgZnJvbSBhIGcvbyBkZWNsYXJhdGlvbiBpbiB0aGUgcGFyc2VkCgkJCQkvLyBmaWxlLiBXZSBuZWVkIHRvIHVzZSBpdCBmb3IgdGhlIGZpcnN0IHBhcnNlZCBnL28gdG8ga2VlcCB0aGluZ3MgaW4gc3luYy4KCQkJCWlmICggdGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID09PSBmYWxzZSApIHsKCgkJCQkJdGhpcy5vYmplY3QubmFtZSA9IG5hbWU7CgkJCQkJdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID0gKCBmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlICk7CgkJCQkJcmV0dXJuOwoKCQkJCX0KCgkJCQl2YXIgcHJldmlvdXNNYXRlcmlhbCA9ICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpIDogdW5kZWZpbmVkICk7CgoJCQkJaWYgKCB0aGlzLm9iamVjdCAmJiB0eXBlb2YgdGhpcy5vYmplY3QuX2ZpbmFsaXplID09PSAnZnVuY3Rpb24nICkgewoKCQkJCQl0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTsKCgkJCQl9CgoJCQkJdGhpcy5vYmplY3QgPSB7CgkJCQkJbmFtZTogbmFtZSB8fCAnJywKCQkJCQlmcm9tRGVjbGFyYXRpb246ICggZnJvbURlY2xhcmF0aW9uICE9PSBmYWxzZSApLAoKCQkJCQlnZW9tZXRyeTogewoJCQkJCQl2ZXJ0aWNlczogW10sCgkJCQkJCW5vcm1hbHM6IFtdLAoJCQkJCQljb2xvcnM6IFtdLAoJCQkJCQl1dnM6IFtdCgkJCQkJfSwKCQkJCQltYXRlcmlhbHM6IFtdLAoJCQkJCXNtb290aDogdHJ1ZSwKCgkJCQkJc3RhcnRNYXRlcmlhbDogZnVuY3Rpb24gKCBuYW1lLCBsaWJyYXJpZXMgKSB7CgoJCQkJCQl2YXIgcHJldmlvdXMgPSB0aGlzLl9maW5hbGl6ZSggZmFsc2UgKTsKCgkJCQkJCS8vIE5ldyB1c2VtdGwgZGVjbGFyYXRpb24gb3ZlcndyaXRlcyBhbiBpbmhlcml0ZWQgbWF0ZXJpYWwsIGV4Y2VwdCBpZiBmYWNlcyB3ZXJlIGRlY2xhcmVkCgkJCQkJCS8vIGFmdGVyIHRoZSBtYXRlcmlhbCwgdGhlbiBpdCBtdXN0IGJlIHByZXNlcnZlZCBmb3IgcHJvcGVyIE11bHRpTWF0ZXJpYWwgY29udGludWF0aW9uLgoJCQkJCQlpZiAoIHByZXZpb3VzICYmICggcHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCApICkgewoKCQkJCQkJCXRoaXMubWF0ZXJpYWxzLnNwbGljZSggcHJldmlvdXMuaW5kZXgsIDEgKTsKCgkJCQkJCX0KCgkJCQkJCXZhciBtYXRlcmlhbCA9IHsKCQkJCQkJCWluZGV4OiB0aGlzLm1hdGVyaWFscy5sZW5ndGgsCgkJCQkJCQluYW1lOiBuYW1lIHx8ICcnLAoJCQkJCQkJbXRsbGliOiAoIEFycmF5LmlzQXJyYXkoIGxpYnJhcmllcyApICYmIGxpYnJhcmllcy5sZW5ndGggPiAwID8gbGlicmFyaWVzWyBsaWJyYXJpZXMubGVuZ3RoIC0gMSBdIDogJycgKSwKCQkJCQkJCXNtb290aDogKCBwcmV2aW91cyAhPT0gdW5kZWZpbmVkID8gcHJldmlvdXMuc21vb3RoIDogdGhpcy5zbW9vdGggKSwKCQkJCQkJCWdyb3VwU3RhcnQ6ICggcHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLmdyb3VwRW5kIDogMCApLAoJCQkJCQkJZ3JvdXBFbmQ6IC0gMSwKCQkJCQkJCWdyb3VwQ291bnQ6IC0gMSwKCQkJCQkJCWluaGVyaXRlZDogZmFsc2UsCgoJCQkJCQkJY2xvbmU6IGZ1bmN0aW9uICggaW5kZXggKSB7CgoJCQkJCQkJCXZhciBjbG9uZWQgPSB7CgkJCQkJCQkJCWluZGV4OiAoIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgPyBpbmRleCA6IHRoaXMuaW5kZXggKSwKCQkJCQkJCQkJbmFtZTogdGhpcy5uYW1lLAoJCQkJCQkJCQltdGxsaWI6IHRoaXMubXRsbGliLAoJCQkJCQkJCQlzbW9vdGg6IHRoaXMuc21vb3RoLAoJCQkJCQkJCQlncm91cFN0YXJ0OiAwLAoJCQkJCQkJCQlncm91cEVuZDogLSAxLAoJCQkJCQkJCQlncm91cENvdW50OiAtIDEsCgkJCQkJCQkJCWluaGVyaXRlZDogZmFsc2UKCQkJCQkJCQl9OwoJCQkJCQkJCWNsb25lZC5jbG9uZSA9IHRoaXMuY2xvbmUuYmluZCggY2xvbmVkICk7CgkJCQkJCQkJcmV0dXJuIGNsb25lZDsKCgkJCQkJCQl9CgkJCQkJCX07CgoJCQkJCQl0aGlzLm1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApOwoKCQkJCQkJcmV0dXJuIG1hdGVyaWFsOwoKCQkJCQl9LAoKCQkJCQljdXJyZW50TWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHsKCgkJCQkJCWlmICggdGhpcy5tYXRlcmlhbHMubGVuZ3RoID4gMCApIHsKCgkJCQkJCQlyZXR1cm4gdGhpcy5tYXRlcmlhbHNbIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDEgXTsKCgkJCQkJCX0KCgkJCQkJCXJldHVybiB1bmRlZmluZWQ7CgoJCQkJCX0sCgoJCQkJCV9maW5hbGl6ZTogZnVuY3Rpb24gKCBlbmQgKSB7CgoJCQkJCQl2YXIgbGFzdE11bHRpTWF0ZXJpYWwgPSB0aGlzLmN1cnJlbnRNYXRlcmlhbCgpOwoJCQkJCQlpZiAoIGxhc3RNdWx0aU1hdGVyaWFsICYmIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kID09PSAtIDEgKSB7CgoJCQkJCQkJbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgPSB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCAvIDM7CgkJCQkJCQlsYXN0TXVsdGlNYXRlcmlhbC5ncm91cENvdW50ID0gbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgLSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cFN0YXJ0OwoJCQkJCQkJbGFzdE11bHRpTWF0ZXJpYWwuaW5oZXJpdGVkID0gZmFsc2U7CgoJCQkJCQl9CgoJCQkJCQkvLyBJZ25vcmUgb2JqZWN0cyB0YWlsIG1hdGVyaWFscyBpZiBubyBmYWNlIGRlY2xhcmF0aW9ucyBmb2xsb3dlZCB0aGVtIGJlZm9yZSBhIG5ldyBvL2cgc3RhcnRlZC4KCQkJCQkJaWYgKCBlbmQgJiYgdGhpcy5tYXRlcmlhbHMubGVuZ3RoID4gMSApIHsKCgkJCQkJCQlmb3IgKCB2YXIgbWkgPSB0aGlzLm1hdGVyaWFscy5sZW5ndGggLSAxOyBtaSA+PSAwOyBtaSAtLSApIHsKCgkJCQkJCQkJaWYgKCB0aGlzLm1hdGVyaWFsc1sgbWkgXS5ncm91cENvdW50IDw9IDAgKSB7CgoJCQkJCQkJCQl0aGlzLm1hdGVyaWFscy5zcGxpY2UoIG1pLCAxICk7CgoJCQkJCQkJCX0KCgkJCQkJCQl9CgoJCQkJCQl9CgoJCQkJCQkvLyBHdWFyYW50ZWUgYXQgbGVhc3Qgb25lIGVtcHR5IG1hdGVyaWFsLCB0aGlzIG1ha2VzIHRoZSBjcmVhdGlvbiBsYXRlciBtb3JlIHN0cmFpZ2h0IGZvcndhcmQuCgkJCQkJCWlmICggZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCApIHsKCgkJCQkJCQl0aGlzLm1hdGVyaWFscy5wdXNoKCB7CgkJCQkJCQkJbmFtZTogJycsCgkJCQkJCQkJc21vb3RoOiB0aGlzLnNtb290aAoJCQkJCQkJfSApOwoKCQkJCQkJfQoKCQkJCQkJcmV0dXJuIGxhc3RNdWx0aU1hdGVyaWFsOwoKCQkJCQl9CgkJCQl9OwoKCQkJCS8vIEluaGVyaXQgcHJldmlvdXMgb2JqZWN0cyBtYXRlcmlhbC4KCQkJCS8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLgoJCQkJLy8gSWYgYSB1c2VtdGwgZGVjbGFyYXRpb24gaXMgZW5jb3VudGVyZWQgd2hpbGUgdGhpcyBuZXcgb2JqZWN0IGlzIGJlaW5nIHBhcnNlZCwgaXQgd2lsbAoJCQkJLy8gb3ZlcndyaXRlIHRoZSBpbmhlcml0ZWQgbWF0ZXJpYWwuIEV4Y2VwdGlvbiBiZWluZyB0aGF0IHRoZXJlIHdhcyBhbHJlYWR5IGZhY2UgZGVjbGFyYXRpb25zCgkJCQkvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uCgoJCQkJaWYgKCBwcmV2aW91c01hdGVyaWFsICYmIHByZXZpb3VzTWF0ZXJpYWwubmFtZSAmJiB0eXBlb2YgcHJldmlvdXNNYXRlcmlhbC5jbG9uZSA9PT0gJ2Z1bmN0aW9uJyApIHsKCgkJCQkJdmFyIGRlY2xhcmVkID0gcHJldmlvdXNNYXRlcmlhbC5jbG9uZSggMCApOwoJCQkJCWRlY2xhcmVkLmluaGVyaXRlZCA9IHRydWU7CgkJCQkJdGhpcy5vYmplY3QubWF0ZXJpYWxzLnB1c2goIGRlY2xhcmVkICk7CgoJCQkJfQoKCQkJCXRoaXMub2JqZWN0cy5wdXNoKCB0aGlzLm9iamVjdCApOwoKCQkJfSwKCgkJCWZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CgoJCQkJaWYgKCB0aGlzLm9iamVjdCAmJiB0eXBlb2YgdGhpcy5vYmplY3QuX2ZpbmFsaXplID09PSAnZnVuY3Rpb24nICkgewoKCQkJCQl0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTsKCgkJCQl9CgoJCQl9LAoKCQkJcGFyc2VWZXJ0ZXhJbmRleDogZnVuY3Rpb24gKCB2YWx1ZSwgbGVuICkgewoKCQkJCXZhciBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTsKCQkJCXJldHVybiAoIGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDMgKSAqIDM7CgoJCQl9LAoKCQkJcGFyc2VOb3JtYWxJbmRleDogZnVuY3Rpb24gKCB2YWx1ZSwgbGVuICkgewoKCQkJCXZhciBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTsKCQkJCXJldHVybiAoIGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDMgKSAqIDM7CgoJCQl9LAoKCQkJcGFyc2VVVkluZGV4OiBmdW5jdGlvbiAoIHZhbHVlLCBsZW4gKSB7CgoJCQkJdmFyIGluZGV4ID0gcGFyc2VJbnQoIHZhbHVlLCAxMCApOwoJCQkJcmV0dXJuICggaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMiApICogMjsKCgkJCX0sCgoJCQlhZGRWZXJ0ZXg6IGZ1bmN0aW9uICggYSwgYiwgYyApIHsKCgkJCQl2YXIgc3JjID0gdGhpcy52ZXJ0aWNlczsKCQkJCXZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlczsKCgkJCQlkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0sIHNyY1sgYSArIDIgXSApOwoJCQkJZHN0LnB1c2goIHNyY1sgYiArIDAgXSwgc3JjWyBiICsgMSBdLCBzcmNbIGIgKyAyIF0gKTsKCQkJCWRzdC5wdXNoKCBzcmNbIGMgKyAwIF0sIHNyY1sgYyArIDEgXSwgc3JjWyBjICsgMiBdICk7CgoJCQl9LAoKCQkJYWRkVmVydGV4UG9pbnQ6IGZ1bmN0aW9uICggYSApIHsKCgkJCQl2YXIgc3JjID0gdGhpcy52ZXJ0aWNlczsKCQkJCXZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlczsKCgkJCQlkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0sIHNyY1sgYSArIDIgXSApOwoKCQkJfSwKCgkJCWFkZFZlcnRleExpbmU6IGZ1bmN0aW9uICggYSApIHsKCgkJCQl2YXIgc3JjID0gdGhpcy52ZXJ0aWNlczsKCQkJCXZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlczsKCgkJCQlkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0sIHNyY1sgYSArIDIgXSApOwoKCQkJfSwKCgkJCWFkZE5vcm1hbDogZnVuY3Rpb24gKCBhLCBiLCBjICkgewoKCQkJCXZhciBzcmMgPSB0aGlzLm5vcm1hbHM7CgkJCQl2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkubm9ybWFsczsKCgkJCQlkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0sIHNyY1sgYSArIDIgXSApOwoJCQkJZHN0LnB1c2goIHNyY1sgYiArIDAgXSwgc3JjWyBiICsgMSBdLCBzcmNbIGIgKyAyIF0gKTsKCQkJCWRzdC5wdXNoKCBzcmNbIGMgKyAwIF0sIHNyY1sgYyArIDEgXSwgc3JjWyBjICsgMiBdICk7CgoJCQl9LAoKCQkJYWRkQ29sb3I6IGZ1bmN0aW9uICggYSwgYiwgYyApIHsKCgkJCQl2YXIgc3JjID0gdGhpcy5jb2xvcnM7CgkJCQl2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkuY29sb3JzOwoKCQkJCWRzdC5wdXNoKCBzcmNbIGEgKyAwIF0sIHNyY1sgYSArIDEgXSwgc3JjWyBhICsgMiBdICk7CgkJCQlkc3QucHVzaCggc3JjWyBiICsgMCBdLCBzcmNbIGIgKyAxIF0sIHNyY1sgYiArIDIgXSApOwoJCQkJZHN0LnB1c2goIHNyY1sgYyArIDAgXSwgc3JjWyBjICsgMSBdLCBzcmNbIGMgKyAyIF0gKTsKCgkJCX0sCgoJCQlhZGRVVjogZnVuY3Rpb24gKCBhLCBiLCBjICkgewoKCQkJCXZhciBzcmMgPSB0aGlzLnV2czsKCQkJCXZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7CgoJCQkJZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdICk7CgkJCQlkc3QucHVzaCggc3JjWyBiICsgMCBdLCBzcmNbIGIgKyAxIF0gKTsKCQkJCWRzdC5wdXNoKCBzcmNbIGMgKyAwIF0sIHNyY1sgYyArIDEgXSApOwoKCQkJfSwKCgkJCWFkZFVWTGluZTogZnVuY3Rpb24gKCBhICkgewoKCQkJCXZhciBzcmMgPSB0aGlzLnV2czsKCQkJCXZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7CgoJCQkJZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdICk7CgoJCQl9LAoKCQkJYWRkRmFjZTogZnVuY3Rpb24gKCBhLCBiLCBjLCB1YSwgdWIsIHVjLCBuYSwgbmIsIG5jICkgewoKCQkJCXZhciB2TGVuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7CgoJCQkJdmFyIGlhID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KCBhLCB2TGVuICk7CgkJCQl2YXIgaWIgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIGIsIHZMZW4gKTsKCQkJCXZhciBpYyA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggYywgdkxlbiApOwoKCQkJCXRoaXMuYWRkVmVydGV4KCBpYSwgaWIsIGljICk7CgoJCQkJaWYgKCB0aGlzLmNvbG9ycy5sZW5ndGggPiAwICkgewoKCQkJCQl0aGlzLmFkZENvbG9yKCBpYSwgaWIsIGljICk7CgoJCQkJfQoKCQkJCWlmICggdWEgIT09IHVuZGVmaW5lZCAmJiB1YSAhPT0gJycgKSB7CgoJCQkJCXZhciB1dkxlbiA9IHRoaXMudXZzLmxlbmd0aDsKCQkJCQlpYSA9IHRoaXMucGFyc2VVVkluZGV4KCB1YSwgdXZMZW4gKTsKCQkJCQlpYiA9IHRoaXMucGFyc2VVVkluZGV4KCB1YiwgdXZMZW4gKTsKCQkJCQlpYyA9IHRoaXMucGFyc2VVVkluZGV4KCB1YywgdXZMZW4gKTsKCQkJCQl0aGlzLmFkZFVWKCBpYSwgaWIsIGljICk7CgoJCQkJfQoKCQkJCWlmICggbmEgIT09IHVuZGVmaW5lZCAmJiBuYSAhPT0gJycgKSB7CgoJCQkJCS8vIE5vcm1hbHMgYXJlIG1hbnkgdGltZXMgdGhlIHNhbWUuIElmIHNvLCBza2lwIGZ1bmN0aW9uIGNhbGwgYW5kIHBhcnNlSW50LgoJCQkJCXZhciBuTGVuID0gdGhpcy5ub3JtYWxzLmxlbmd0aDsKCQkJCQlpYSA9IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmEsIG5MZW4gKTsKCgkJCQkJaWIgPSBuYSA9PT0gbmIgPyBpYSA6IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmIsIG5MZW4gKTsKCQkJCQlpYyA9IG5hID09PSBuYyA/IGlhIDogdGhpcy5wYXJzZU5vcm1hbEluZGV4KCBuYywgbkxlbiApOwoKCQkJCQl0aGlzLmFkZE5vcm1hbCggaWEsIGliLCBpYyApOwoKCQkJCX0KCgkJCX0sCgoJCQlhZGRQb2ludEdlb21ldHJ5OiBmdW5jdGlvbiAoIHZlcnRpY2VzICkgewoKCQkJCXRoaXMub2JqZWN0Lmdlb21ldHJ5LnR5cGUgPSAnUG9pbnRzJzsKCgkJCQl2YXIgdkxlbiA9IHRoaXMudmVydGljZXMubGVuZ3RoOwoKCQkJCWZvciAoIHZhciB2aSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IHZpIDwgbDsgdmkgKysgKSB7CgoJCQkJCXRoaXMuYWRkVmVydGV4UG9pbnQoIHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggdmVydGljZXNbIHZpIF0sIHZMZW4gKSApOwoKCQkJCX0KCgkJCX0sCgoJCQlhZGRMaW5lR2VvbWV0cnk6IGZ1bmN0aW9uICggdmVydGljZXMsIHV2cyApIHsKCgkJCQl0aGlzLm9iamVjdC5nZW9tZXRyeS50eXBlID0gJ0xpbmUnOwoKCQkJCXZhciB2TGVuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7CgkJCQl2YXIgdXZMZW4gPSB0aGlzLnV2cy5sZW5ndGg7CgoJCQkJZm9yICggdmFyIHZpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgdmkgPCBsOyB2aSArKyApIHsKCgkJCQkJdGhpcy5hZGRWZXJ0ZXhMaW5lKCB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIHZlcnRpY2VzWyB2aSBdLCB2TGVuICkgKTsKCgkJCQl9CgoJCQkJZm9yICggdmFyIHV2aSA9IDAsIGwgPSB1dnMubGVuZ3RoOyB1dmkgPCBsOyB1dmkgKysgKSB7CgoJCQkJCXRoaXMuYWRkVVZMaW5lKCB0aGlzLnBhcnNlVVZJbmRleCggdXZzWyB1dmkgXSwgdXZMZW4gKSApOwoKCQkJCX0KCgkJCX0KCgkJfTsKCgkJc3RhdGUuc3RhcnRPYmplY3QoICcnLCBmYWxzZSApOwoKCQlyZXR1cm4gc3RhdGU7CgoJfQoKCS8vCgoJZnVuY3Rpb24gT0JKTG9hZGVyKCBtYW5hZ2VyICkgewoKCQlUSFJFRS5Mb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApOwoKCQl0aGlzLm1hdGVyaWFscyA9IG51bGw7CgoJfQoKCU9CSkxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBUSFJFRS5Mb2FkZXIucHJvdG90eXBlICksIHsKCgkJY29uc3RydWN0b3I6IE9CSkxvYWRlciwKCgkJbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHsKCgkJCXZhciBzY29wZSA9IHRoaXM7CgoJCQl2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTsKCQkJbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApOwoJCQlsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7CgoJCQkJb25Mb2FkKCBzY29wZS5wYXJzZSggdGV4dCApICk7CgoJCQl9LCBvblByb2dyZXNzLCBvbkVycm9yICk7CgoJCX0sCgoJCXNldE1hdGVyaWFsczogZnVuY3Rpb24gKCBtYXRlcmlhbHMgKSB7CgoJCQl0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFsczsKCgkJCXJldHVybiB0aGlzOwoKCQl9LAoKCQlwYXJzZTogZnVuY3Rpb24gKCB0ZXh0ICkgewoKCQkJY29uc29sZS50aW1lKCAnT0JKTG9hZGVyJyApOwoKCQkJdmFyIHN0YXRlID0gbmV3IFBhcnNlclN0YXRlKCk7CgoJCQlpZiAoIHRleHQuaW5kZXhPZiggJ1xyXG4nICkgIT09IC0gMSApIHsKCgkJCQkvLyBUaGlzIGlzIGZhc3RlciB0aGFuIFN0cmluZy5zcGxpdCB3aXRoIHJlZ2V4IHRoYXQgc3BsaXRzIG9uIGJvdGgKCQkJCXRleHQgPSB0ZXh0LnJlcGxhY2UoIC9cclxuL2csICdcbicgKTsKCgkJCX0KCgkJCWlmICggdGV4dC5pbmRleE9mKCAnXFxcbicgKSAhPT0gLSAxICkgewoKCQkJCS8vIGpvaW4gbGluZXMgc2VwYXJhdGVkIGJ5IGEgbGluZSBjb250aW51YXRpb24gY2hhcmFjdGVyIChcKQoJCQkJdGV4dCA9IHRleHQucmVwbGFjZSggL1xcXG4vZywgJycgKTsKCgkJCX0KCgkJCXZhciBsaW5lcyA9IHRleHQuc3BsaXQoICdcbicgKTsKCQkJdmFyIGxpbmUgPSAnJywgbGluZUZpcnN0Q2hhciA9ICcnOwoJCQl2YXIgbGluZUxlbmd0aCA9IDA7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCS8vIEZhc3RlciB0byBqdXN0IHRyaW0gbGVmdCBzaWRlIG9mIHRoZSBsaW5lLiBVc2UgaWYgYXZhaWxhYmxlLgoJCQl2YXIgdHJpbUxlZnQgPSAoIHR5cGVvZiAnJy50cmltTGVmdCA9PT0gJ2Z1bmN0aW9uJyApOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHsKCgkJCQlsaW5lID0gbGluZXNbIGkgXTsKCgkJCQlsaW5lID0gdHJpbUxlZnQgPyBsaW5lLnRyaW1MZWZ0KCkgOiBsaW5lLnRyaW0oKTsKCgkJCQlsaW5lTGVuZ3RoID0gbGluZS5sZW5ndGg7CgoJCQkJaWYgKCBsaW5lTGVuZ3RoID09PSAwICkgY29udGludWU7CgoJCQkJbGluZUZpcnN0Q2hhciA9IGxpbmUuY2hhckF0KCAwICk7CgoJCQkJLy8gQHRvZG8gaW52b2tlIHBhc3NlZCBpbiBoYW5kbGVyIGlmIGFueQoJCQkJaWYgKCBsaW5lRmlyc3RDaGFyID09PSAnIycgKSBjb250aW51ZTsKCgkJCQlpZiAoIGxpbmVGaXJzdENoYXIgPT09ICd2JyApIHsKCgkJCQkJdmFyIGRhdGEgPSBsaW5lLnNwbGl0KCAvXHMrLyApOwoKCQkJCQlzd2l0Y2ggKCBkYXRhWyAwIF0gKSB7CgoJCQkJCQljYXNlICd2JzoKCQkJCQkJCXN0YXRlLnZlcnRpY2VzLnB1c2goCgkJCQkJCQkJcGFyc2VGbG9hdCggZGF0YVsgMSBdICksCgkJCQkJCQkJcGFyc2VGbG9hdCggZGF0YVsgMiBdICksCgkJCQkJCQkJcGFyc2VGbG9hdCggZGF0YVsgMyBdICkKCQkJCQkJCSk7CgkJCQkJCQlpZiAoIGRhdGEubGVuZ3RoID49IDcgKSB7CgoJCQkJCQkJCXN0YXRlLmNvbG9ycy5wdXNoKAoJCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyA0IF0gKSwKCQkJCQkJCQkJcGFyc2VGbG9hdCggZGF0YVsgNSBdICksCgkJCQkJCQkJCXBhcnNlRmxvYXQoIGRhdGFbIDYgXSApCgoJCQkJCQkJCSk7CgoJCQkJCQkJfQoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgJ3ZuJzoKCQkJCQkJCXN0YXRlLm5vcm1hbHMucHVzaCgKCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyAxIF0gKSwKCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyAyIF0gKSwKCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyAzIF0gKQoJCQkJCQkJKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlICd2dCc6CgkJCQkJCQlzdGF0ZS51dnMucHVzaCgKCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyAxIF0gKSwKCQkJCQkJCQlwYXJzZUZsb2F0KCBkYXRhWyAyIF0gKQoJCQkJCQkJKTsKCQkJCQkJCWJyZWFrOwoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggbGluZUZpcnN0Q2hhciA9PT0gJ2YnICkgewoKCQkJCQl2YXIgbGluZURhdGEgPSBsaW5lLnN1YnN0ciggMSApLnRyaW0oKTsKCQkJCQl2YXIgdmVydGV4RGF0YSA9IGxpbmVEYXRhLnNwbGl0KCAvXHMrLyApOwoJCQkJCXZhciBmYWNlVmVydGljZXMgPSBbXTsKCgkJCQkJLy8gUGFyc2UgdGhlIGZhY2UgdmVydGV4IGRhdGEgaW50byBhbiBlYXN5IHRvIHdvcmsgd2l0aCBmb3JtYXQKCgkJCQkJZm9yICggdmFyIGogPSAwLCBqbCA9IHZlcnRleERhdGEubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCQl2YXIgdmVydGV4ID0gdmVydGV4RGF0YVsgaiBdOwoKCQkJCQkJaWYgKCB2ZXJ0ZXgubGVuZ3RoID4gMCApIHsKCgkJCQkJCQl2YXIgdmVydGV4UGFydHMgPSB2ZXJ0ZXguc3BsaXQoICcvJyApOwoJCQkJCQkJZmFjZVZlcnRpY2VzLnB1c2goIHZlcnRleFBhcnRzICk7CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJLy8gRHJhdyBhbiBlZGdlIGJldHdlZW4gdGhlIGZpcnN0IHZlcnRleCBhbmQgYWxsIHN1YnNlcXVlbnQgdmVydGljZXMgdG8gZm9ybSBhbiBuLWdvbgoKCQkJCQl2YXIgdjEgPSBmYWNlVmVydGljZXNbIDAgXTsKCgkJCQkJZm9yICggdmFyIGogPSAxLCBqbCA9IGZhY2VWZXJ0aWNlcy5sZW5ndGggLSAxOyBqIDwgamw7IGogKysgKSB7CgoJCQkJCQl2YXIgdjIgPSBmYWNlVmVydGljZXNbIGogXTsKCQkJCQkJdmFyIHYzID0gZmFjZVZlcnRpY2VzWyBqICsgMSBdOwoKCQkJCQkJc3RhdGUuYWRkRmFjZSgKCQkJCQkJCXYxWyAwIF0sIHYyWyAwIF0sIHYzWyAwIF0sCgkJCQkJCQl2MVsgMSBdLCB2MlsgMSBdLCB2M1sgMSBdLAoJCQkJCQkJdjFbIDIgXSwgdjJbIDIgXSwgdjNbIDIgXQoJCQkJCQkpOwoKCQkJCQl9CgoJCQkJfSBlbHNlIGlmICggbGluZUZpcnN0Q2hhciA9PT0gJ2wnICkgewoKCQkJCQl2YXIgbGluZVBhcnRzID0gbGluZS5zdWJzdHJpbmcoIDEgKS50cmltKCkuc3BsaXQoICIgIiApOwoJCQkJCXZhciBsaW5lVmVydGljZXMgPSBbXSwgbGluZVVWcyA9IFtdOwoKCQkJCQlpZiAoIGxpbmUuaW5kZXhPZiggIi8iICkgPT09IC0gMSApIHsKCgkJCQkJCWxpbmVWZXJ0aWNlcyA9IGxpbmVQYXJ0czsKCgkJCQkJfSBlbHNlIHsKCgkJCQkJCWZvciAoIHZhciBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpICsrICkgewoKCQkJCQkJCXZhciBwYXJ0cyA9IGxpbmVQYXJ0c1sgbGkgXS5zcGxpdCggIi8iICk7CgoJCQkJCQkJaWYgKCBwYXJ0c1sgMCBdICE9PSAiIiApIGxpbmVWZXJ0aWNlcy5wdXNoKCBwYXJ0c1sgMCBdICk7CgkJCQkJCQlpZiAoIHBhcnRzWyAxIF0gIT09ICIiICkgbGluZVVWcy5wdXNoKCBwYXJ0c1sgMSBdICk7CgoJCQkJCQl9CgoJCQkJCX0KCQkJCQlzdGF0ZS5hZGRMaW5lR2VvbWV0cnkoIGxpbmVWZXJ0aWNlcywgbGluZVVWcyApOwoKCQkJCX0gZWxzZSBpZiAoIGxpbmVGaXJzdENoYXIgPT09ICdwJyApIHsKCgkJCQkJdmFyIGxpbmVEYXRhID0gbGluZS5zdWJzdHIoIDEgKS50cmltKCk7CgkJCQkJdmFyIHBvaW50RGF0YSA9IGxpbmVEYXRhLnNwbGl0KCAiICIgKTsKCgkJCQkJc3RhdGUuYWRkUG9pbnRHZW9tZXRyeSggcG9pbnREYXRhICk7CgoJCQkJfSBlbHNlIGlmICggKCByZXN1bHQgPSBvYmplY3RfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHsKCgkJCQkJLy8gbyBvYmplY3RfbmFtZQoJCQkJCS8vIG9yCgkJCQkJLy8gZyBncm91cF9uYW1lCgoJCQkJCS8vIFdPUktBUk9VTkQ6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTI4NjkKCQkJCQkvLyB2YXIgbmFtZSA9IHJlc3VsdFsgMCBdLnN1YnN0ciggMSApLnRyaW0oKTsKCQkJCQl2YXIgbmFtZSA9ICggIiAiICsgcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpICkuc3Vic3RyKCAxICk7CgoJCQkJCXN0YXRlLnN0YXJ0T2JqZWN0KCBuYW1lICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxfdXNlX3BhdHRlcm4udGVzdCggbGluZSApICkgewoKCQkJCQkvLyBtYXRlcmlhbAoKCQkJCQlzdGF0ZS5vYmplY3Quc3RhcnRNYXRlcmlhbCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCksIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzICk7CgoJCQkJfSBlbHNlIGlmICggbWF0ZXJpYWxfbGlicmFyeV9wYXR0ZXJuLnRlc3QoIGxpbmUgKSApIHsKCgkJCQkJLy8gbXRsIGZpbGUKCgkJCQkJc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMucHVzaCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCkgKTsKCgkJCQl9IGVsc2UgaWYgKCBtYXBfdXNlX3BhdHRlcm4udGVzdCggbGluZSApICkgewoKCQkJCQkvLyB0aGUgbGluZSBpcyBwYXJzZWQgYnV0IGlnbm9yZWQgc2luY2UgdGhlIGxvYWRlciBhc3N1bWVzIHRleHR1cmVzIGFyZSBkZWZpbmVkIE1UTCBmaWxlcwoJCQkJCS8vIChhY2NvcmRpbmcgdG8gaHR0cHM6Ly93d3cub2tpbm8uY29tL2NvbnYvaW1wX3dhdmUuaHRtLCAndXNlbWFwJyBpcyB0aGUgb2xkLXN0eWxlIFdhdmVmcm9udCB0ZXh0dXJlIHJlZmVyZW5jZSBtZXRob2QpCgoJCQkJCWNvbnNvbGUud2FybiggJ1RIUkVFLk9CSkxvYWRlcjogUmVuZGVyaW5nIGlkZW50aWZpZXIgInVzZW1hcCIgbm90IHN1cHBvcnRlZC4gVGV4dHVyZXMgbXVzdCBiZSBkZWZpbmVkIGluIE1UTCBmaWxlcy4nICk7CgoJCQkJfSBlbHNlIGlmICggbGluZUZpcnN0Q2hhciA9PT0gJ3MnICkgewoKCQkJCQlyZXN1bHQgPSBsaW5lLnNwbGl0KCAnICcgKTsKCgkJCQkJLy8gc21vb3RoIHNoYWRpbmcKCgkJCQkJLy8gQHRvZG8gSGFuZGxlIGZpbGVzIHRoYXQgaGF2ZSB2YXJ5aW5nIHNtb290aCB2YWx1ZXMgZm9yIGEgc2V0IG9mIGZhY2VzIGluc2lkZSBvbmUgZ2VvbWV0cnksCgkJCQkJLy8gYnV0IGRvZXMgbm90IGRlZmluZSBhIHVzZW10bCBmb3IgZWFjaCBmYWNlIHNldC4KCQkJCQkvLyBUaGlzIHNob3VsZCBiZSBkZXRlY3RlZCBhbmQgYSBkdW1teSBtYXRlcmlhbCBjcmVhdGVkIChsYXRlciBNdWx0aU1hdGVyaWFsIGFuZCBnZW9tZXRyeSBncm91cHMpLgoJCQkJCS8vIFRoaXMgcmVxdWlyZXMgc29tZSBjYXJlIHRvIG5vdCBjcmVhdGUgZXh0cmEgbWF0ZXJpYWwgb24gZWFjaCBzbW9vdGggdmFsdWUgZm9yICJub3JtYWwiIG9iaiBmaWxlcy4KCQkJCQkvLyB3aGVyZSBleHBsaWNpdCB1c2VtdGwgZGVmaW5lcyBnZW9tZXRyeSBncm91cHMuCgkJCQkJLy8gRXhhbXBsZSBhc3NldDogZXhhbXBsZXMvbW9kZWxzL29iai9jZXJiZXJ1cy9DZXJiZXJ1cy5vYmoKCgkJCQkJLyoKCQkJCQkgKiBodHRwOi8vcGF1bGJvdXJrZS5uZXQvZGF0YWZvcm1hdHMvb2JqLwoJCQkJCSAqIG9yCgkJCQkJICogaHR0cDovL3d3dy5jcy51dGFoLmVkdS9+Ym91bG9zL2NzMzUwNS9vYmpfc3BlYy5wZGYKCQkJCQkgKgoJCQkJCSAqIEZyb20gY2hhcHRlciAiR3JvdXBpbmciIFN5bnRheCBleHBsYW5hdGlvbiAicyBncm91cF9udW1iZXIiOgoJCQkJCSAqICJncm91cF9udW1iZXIgaXMgdGhlIHNtb290aGluZyBncm91cCBudW1iZXIuIFRvIHR1cm4gb2ZmIHNtb290aGluZyBncm91cHMsIHVzZSBhIHZhbHVlIG9mIDAgb3Igb2ZmLgoJCQkJCSAqIFBvbHlnb25hbCBlbGVtZW50cyB1c2UgZ3JvdXAgbnVtYmVycyB0byBwdXQgZWxlbWVudHMgaW4gZGlmZmVyZW50IHNtb290aGluZyBncm91cHMuIEZvciBmcmVlLWZvcm0KCQkJCQkgKiBzdXJmYWNlcywgc21vb3RoaW5nIGdyb3VwcyBhcmUgZWl0aGVyIHR1cm5lZCBvbiBvciBvZmY7IHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB2YWx1ZXMgZ3JlYXRlcgoJCQkJCSAqIHRoYW4gMC4iCgkJCQkJICovCgkJCQkJaWYgKCByZXN1bHQubGVuZ3RoID4gMSApIHsKCgkJCQkJCXZhciB2YWx1ZSA9IHJlc3VsdFsgMSBdLnRyaW0oKS50b0xvd2VyQ2FzZSgpOwoJCQkJCQlzdGF0ZS5vYmplY3Quc21vb3RoID0gKCB2YWx1ZSAhPT0gJzAnICYmIHZhbHVlICE9PSAnb2ZmJyApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gWkJydXNoIGNhbiBwcm9kdWNlICJzIiBsaW5lcyAjMTE3MDcKCQkJCQkJc3RhdGUub2JqZWN0LnNtb290aCA9IHRydWU7CgoJCQkJCX0KCQkJCQl2YXIgbWF0ZXJpYWwgPSBzdGF0ZS5vYmplY3QuY3VycmVudE1hdGVyaWFsKCk7CgkJCQkJaWYgKCBtYXRlcmlhbCApIG1hdGVyaWFsLnNtb290aCA9IHN0YXRlLm9iamVjdC5zbW9vdGg7CgoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gSGFuZGxlIG51bGwgdGVybWluYXRlZCBmaWxlcyB3aXRob3V0IGV4Y2VwdGlvbgoJCQkJCWlmICggbGluZSA9PT0gJ1wwJyApIGNvbnRpbnVlOwoKCQkJCQl0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5PQkpMb2FkZXI6IFVuZXhwZWN0ZWQgbGluZTogIicgKyBsaW5lICsgJyInICk7CgoJCQkJfQoKCQkJfQoKCQkJc3RhdGUuZmluYWxpemUoKTsKCgkJCXZhciBjb250YWluZXIgPSBuZXcgVEhSRUUuR3JvdXAoKTsKCQkJY29udGFpbmVyLm1hdGVyaWFsTGlicmFyaWVzID0gW10uY29uY2F0KCBzdGF0ZS5tYXRlcmlhbExpYnJhcmllcyApOwoKCQkJZm9yICggdmFyIGkgPSAwLCBsID0gc3RhdGUub2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkgewoKCQkJCXZhciBvYmplY3QgPSBzdGF0ZS5vYmplY3RzWyBpIF07CgkJCQl2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7CgkJCQl2YXIgbWF0ZXJpYWxzID0gb2JqZWN0Lm1hdGVyaWFsczsKCQkJCXZhciBpc0xpbmUgPSAoIGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lJyApOwoJCQkJdmFyIGlzUG9pbnRzID0gKCBnZW9tZXRyeS50eXBlID09PSAnUG9pbnRzJyApOwoJCQkJdmFyIGhhc1ZlcnRleENvbG9ycyA9IGZhbHNlOwoKCQkJCS8vIFNraXAgby9nIGxpbmUgZGVjbGFyYXRpb25zIHRoYXQgZGlkIG5vdCBmb2xsb3cgd2l0aCBhbnkgZmFjZXMKCQkJCWlmICggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoID09PSAwICkgY29udGludWU7CgoJCQkJdmFyIGJ1ZmZlcmdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7CgoJCQkJYnVmZmVyZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMsIDMgKSApOwoKCQkJCWlmICggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggPiAwICkgewoKCQkJCQlidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubm9ybWFscywgMyApICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJYnVmZmVyZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsKCgkJCQl9CgoJCQkJaWYgKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoID4gMCApIHsKCgkJCQkJaGFzVmVydGV4Q29sb3JzID0gdHJ1ZTsKCQkJCQlidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMsIDMgKSApOwoKCQkJCX0KCgkJCQlpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkgewoKCQkJCQlidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS51dnMsIDIgKSApOwoKCQkJCX0KCgkJCQkvLyBDcmVhdGUgbWF0ZXJpYWxzCgoJCQkJdmFyIGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTsKCgkJCQlmb3IgKCB2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW47IG1pICsrICkgewoKCQkJCQl2YXIgc291cmNlTWF0ZXJpYWwgPSBtYXRlcmlhbHNbIG1pIF07CgkJCQkJdmFyIG1hdGVyaWFsID0gdW5kZWZpbmVkOwoKCQkJCQlpZiAoIHRoaXMubWF0ZXJpYWxzICE9PSBudWxsICkgewoKCQkJCQkJbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFscy5jcmVhdGUoIHNvdXJjZU1hdGVyaWFsLm5hbWUgKTsKCgkJCQkJCS8vIG10bCBldGMuIGxvYWRlcnMgcHJvYmFibHkgY2FuJ3QgY3JlYXRlIGxpbmUgbWF0ZXJpYWxzIGNvcnJlY3RseSwgY29weSBwcm9wZXJ0aWVzIHRvIGEgbGluZSBtYXRlcmlhbC4KCQkJCQkJaWYgKCBpc0xpbmUgJiYgbWF0ZXJpYWwgJiYgISAoIG1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwgKSApIHsKCgkJCQkJCQl2YXIgbWF0ZXJpYWxMaW5lID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCk7CgkJCQkJCQlUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBtYXRlcmlhbExpbmUsIG1hdGVyaWFsICk7CgkJCQkJCQltYXRlcmlhbExpbmUuY29sb3IuY29weSggbWF0ZXJpYWwuY29sb3IgKTsKCQkJCQkJCW1hdGVyaWFsID0gbWF0ZXJpYWxMaW5lOwoKCQkJCQkJfSBlbHNlIGlmICggaXNQb2ludHMgJiYgbWF0ZXJpYWwgJiYgISAoIG1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRzTWF0ZXJpYWwgKSApIHsKCgkJCQkJCQl2YXIgbWF0ZXJpYWxQb2ludHMgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoIHsgc2l6ZTogMTAsIHNpemVBdHRlbnVhdGlvbjogZmFsc2UgfSApOwoJCQkJCQkJVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggbWF0ZXJpYWxQb2ludHMsIG1hdGVyaWFsICk7CgkJCQkJCQltYXRlcmlhbFBvaW50cy5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApOwoJCQkJCQkJbWF0ZXJpYWxQb2ludHMubWFwID0gbWF0ZXJpYWwubWFwOwoJCQkJCQkJbWF0ZXJpYWwgPSBtYXRlcmlhbFBvaW50czsKCgkJCQkJCX0KCgkJCQkJfQoKCQkJCQlpZiAoICEgbWF0ZXJpYWwgKSB7CgoJCQkJCQlpZiAoIGlzTGluZSApIHsKCgkJCQkJCQltYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpOwoKCQkJCQkJfSBlbHNlIGlmICggaXNQb2ludHMgKSB7CgoJCQkJCQkJbWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoIHsgc2l6ZTogMSwgc2l6ZUF0dGVudWF0aW9uOiBmYWxzZSB9ICk7CgoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCW1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCk7CgoJCQkJCQl9CgoJCQkJCQltYXRlcmlhbC5uYW1lID0gc291cmNlTWF0ZXJpYWwubmFtZTsKCgkJCQkJfQoKCQkJCQltYXRlcmlhbC5mbGF0U2hhZGluZyA9IHNvdXJjZU1hdGVyaWFsLnNtb290aCA/IGZhbHNlIDogdHJ1ZTsKCQkJCQltYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBoYXNWZXJ0ZXhDb2xvcnMgPyBUSFJFRS5WZXJ0ZXhDb2xvcnMgOiBUSFJFRS5Ob0NvbG9yczsKCgkJCQkJY3JlYXRlZE1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApOwoKCQkJCX0KCgkJCQkvLyBDcmVhdGUgbWVzaAoKCQkJCXZhciBtZXNoOwoKCQkJCWlmICggY3JlYXRlZE1hdGVyaWFscy5sZW5ndGggPiAxICkgewoKCQkJCQlmb3IgKCB2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW47IG1pICsrICkgewoKCQkJCQkJdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzWyBtaSBdOwoJCQkJCQlidWZmZXJnZW9tZXRyeS5hZGRHcm91cCggc291cmNlTWF0ZXJpYWwuZ3JvdXBTdGFydCwgc291cmNlTWF0ZXJpYWwuZ3JvdXBDb3VudCwgbWkgKTsKCgkJCQkJfQoKCQkJCQlpZiAoIGlzTGluZSApIHsKCgkJCQkJCW1lc2ggPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscyApOwoKCQkJCQl9IGVsc2UgaWYgKCBpc1BvaW50cyApIHsKCgkJCQkJCW1lc2ggPSBuZXcgVEhSRUUuUG9pbnRzKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscyApOwoKCQkJCQl9IGVsc2UgewoKCQkJCQkJbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscyApOwoKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCgkJCQkJaWYgKCBpc0xpbmUgKSB7CgoJCQkJCQltZXNoID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbIDAgXSApOwoKCQkJCQl9IGVsc2UgaWYgKCBpc1BvaW50cyApIHsKCgkJCQkJCW1lc2ggPSBuZXcgVEhSRUUuUG9pbnRzKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFsc1sgMCBdICk7CgoJCQkJCX0gZWxzZSB7CgoJCQkJCQltZXNoID0gbmV3IFRIUkVFLk1lc2goIGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWyAwIF0gKTsKCgkJCQkJfQoKCQkJCX0KCgkJCQltZXNoLm5hbWUgPSBvYmplY3QubmFtZTsKCgkJCQljb250YWluZXIuYWRkKCBtZXNoICk7CgoJCQl9CgoJCQljb25zb2xlLnRpbWVFbmQoICdPQkpMb2FkZXInICk7CgoJCQlyZXR1cm4gY29udGFpbmVyOwoKCQl9CgoJfSApOwoKCXJldHVybiBPQkpMb2FkZXI7Cgp9ICkoKTsKCn0se31dLDQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNyZWF0ZUxheW91dCA9IF9kZXJlcV8oJ2xheW91dC1ibWZvbnQtdGV4dCcpCnZhciBpbmhlcml0cyA9IF9kZXJlcV8oJ2luaGVyaXRzJykKdmFyIGNyZWF0ZUluZGljZXMgPSBfZGVyZXFfKCdxdWFkLWluZGljZXMnKQp2YXIgYnVmZmVyID0gX2RlcmVxXygndGhyZWUtYnVmZmVyLXZlcnRleC1kYXRhJykKdmFyIGFzc2lnbiA9IF9kZXJlcV8oJ29iamVjdC1hc3NpZ24nKQoKdmFyIHZlcnRpY2VzID0gX2RlcmVxXygnLi9saWIvdmVydGljZXMnKQp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL2xpYi91dGlscycpCgp2YXIgQmFzZSA9IFRIUkVFLkJ1ZmZlckdlb21ldHJ5Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZVRleHRHZW9tZXRyeSAob3B0KSB7CiAgcmV0dXJuIG5ldyBUZXh0R2VvbWV0cnkob3B0KQp9CgpmdW5jdGlvbiBUZXh0R2VvbWV0cnkgKG9wdCkgewogIEJhc2UuY2FsbCh0aGlzKQoKICBpZiAodHlwZW9mIG9wdCA9PT0gJ3N0cmluZycpIHsKICAgIG9wdCA9IHsgdGV4dDogb3B0IH0KICB9CgogIC8vIHVzZSB0aGVzZSBhcyBkZWZhdWx0IHZhbHVlcyBmb3IgYW55IHN1YnNlcXVlbnQKICAvLyBjYWxscyB0byB1cGRhdGUoKQogIHRoaXMuX29wdCA9IGFzc2lnbih7fSwgb3B0KQoKICAvLyBhbHNvIGRvIGFuIGluaXRpYWwgc2V0dXAuLi4KICBpZiAob3B0KSB0aGlzLnVwZGF0ZShvcHQpCn0KCmluaGVyaXRzKFRleHRHZW9tZXRyeSwgQmFzZSkKClRleHRHZW9tZXRyeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9wdCkgewogIGlmICh0eXBlb2Ygb3B0ID09PSAnc3RyaW5nJykgewogICAgb3B0ID0geyB0ZXh0OiBvcHQgfQogIH0KCiAgLy8gdXNlIGNvbnN0cnVjdG9yIGRlZmF1bHRzCiAgb3B0ID0gYXNzaWduKHt9LCB0aGlzLl9vcHQsIG9wdCkKCiAgaWYgKCFvcHQuZm9udCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBzcGVjaWZ5IGEgeyBmb250IH0gaW4gb3B0aW9ucycpCiAgfQoKICB0aGlzLmxheW91dCA9IGNyZWF0ZUxheW91dChvcHQpCgogIC8vIGdldCB2ZWMyIHRleGNvb3JkcwogIHZhciBmbGlwWSA9IG9wdC5mbGlwWSAhPT0gZmFsc2UKCiAgLy8gdGhlIGRlc2lyZWQgQk1Gb250IGRhdGEKICB2YXIgZm9udCA9IG9wdC5mb250CgogIC8vIGRldGVybWluZSB0ZXh0dXJlIHNpemUgZnJvbSBmb250IGZpbGUKICB2YXIgdGV4V2lkdGggPSBmb250LmNvbW1vbi5zY2FsZVcKICB2YXIgdGV4SGVpZ2h0ID0gZm9udC5jb21tb24uc2NhbGVICgogIC8vIGdldCB2aXNpYmxlIGdseXBocwogIHZhciBnbHlwaHMgPSB0aGlzLmxheW91dC5nbHlwaHMuZmlsdGVyKGZ1bmN0aW9uIChnbHlwaCkgewogICAgdmFyIGJpdG1hcCA9IGdseXBoLmRhdGEKICAgIHJldHVybiBiaXRtYXAud2lkdGggKiBiaXRtYXAuaGVpZ2h0ID4gMAogIH0pCgogIC8vIHByb3ZpZGUgdmlzaWJsZSBnbHlwaHMgZm9yIGNvbnZlbmllbmNlCiAgdGhpcy52aXNpYmxlR2x5cGhzID0gZ2x5cGhzCgogIC8vIGdldCBjb21tb24gdmVydGV4IGRhdGEKICB2YXIgcG9zaXRpb25zID0gdmVydGljZXMucG9zaXRpb25zKGdseXBocykKICB2YXIgdXZzID0gdmVydGljZXMudXZzKGdseXBocywgdGV4V2lkdGgsIHRleEhlaWdodCwgZmxpcFkpCiAgdmFyIGluZGljZXMgPSBjcmVhdGVJbmRpY2VzKHsKICAgIGNsb2Nrd2lzZTogdHJ1ZSwKICAgIHR5cGU6ICd1aW50MTYnLAogICAgY291bnQ6IGdseXBocy5sZW5ndGgKICB9KQoKICAvLyB1cGRhdGUgdmVydGV4IGRhdGEKICBidWZmZXIuaW5kZXgodGhpcywgaW5kaWNlcywgMSwgJ3VpbnQxNicpCiAgYnVmZmVyLmF0dHIodGhpcywgJ3Bvc2l0aW9uJywgcG9zaXRpb25zLCAyKQogIGJ1ZmZlci5hdHRyKHRoaXMsICd1dicsIHV2cywgMikKCiAgLy8gdXBkYXRlIG11bHRpcGFnZSBkYXRhCiAgaWYgKCFvcHQubXVsdGlwYWdlICYmICdwYWdlJyBpbiB0aGlzLmF0dHJpYnV0ZXMpIHsKICAgIC8vIGRpc2FibGUgbXVsdGlwYWdlIHJlbmRlcmluZwogICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3BhZ2UnKQogIH0gZWxzZSBpZiAob3B0Lm11bHRpcGFnZSkgewogICAgdmFyIHBhZ2VzID0gdmVydGljZXMucGFnZXMoZ2x5cGhzKQogICAgLy8gZW5hYmxlIG11bHRpcGFnZSByZW5kZXJpbmcKICAgIGJ1ZmZlci5hdHRyKHRoaXMsICdwYWdlJywgcGFnZXMsIDEpCiAgfQp9CgpUZXh0R2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSA9IGZ1bmN0aW9uICgpIHsKICBpZiAodGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCkgewogICAgdGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmUoKQogIH0KCiAgdmFyIHBvc2l0aW9ucyA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheQogIHZhciBpdGVtU2l6ZSA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5pdGVtU2l6ZQogIGlmICghcG9zaXRpb25zIHx8ICFpdGVtU2l6ZSB8fCBwb3NpdGlvbnMubGVuZ3RoIDwgMikgewogICAgdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSAwCiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlci5zZXQoMCwgMCwgMCkKICAgIHJldHVybgogIH0KICB1dGlscy5jb21wdXRlU3BoZXJlKHBvc2l0aW9ucywgdGhpcy5ib3VuZGluZ1NwaGVyZSkKICBpZiAoaXNOYU4odGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMpKSB7CiAgICBjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogJyArCiAgICAgICdDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgJyArCiAgICAgICcicG9zaXRpb24iIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicpCiAgfQp9CgpUZXh0R2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uICgpIHsKICBpZiAodGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCkgewogICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCkKICB9CgogIHZhciBiYm94ID0gdGhpcy5ib3VuZGluZ0JveAogIHZhciBwb3NpdGlvbnMgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXkKICB2YXIgaXRlbVNpemUgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uaXRlbVNpemUKICBpZiAoIXBvc2l0aW9ucyB8fCAhaXRlbVNpemUgfHwgcG9zaXRpb25zLmxlbmd0aCA8IDIpIHsKICAgIGJib3gubWFrZUVtcHR5KCkKICAgIHJldHVybgogIH0KICB1dGlscy5jb21wdXRlQm94KHBvc2l0aW9ucywgYmJveCkKfQoKfSx7Ii4vbGliL3V0aWxzIjo0MywiLi9saWIvdmVydGljZXMiOjQ0LCJpbmhlcml0cyI6MTksImxheW91dC1ibWZvbnQtdGV4dCI6MjQsIm9iamVjdC1hc3NpZ24iOjI3LCJxdWFkLWluZGljZXMiOjM1LCJ0aHJlZS1idWZmZXItdmVydGV4LWRhdGEiOjQ1fV0sNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgaXRlbVNpemUgPSAyCnZhciBib3ggPSB7IG1pbjogWzAsIDBdLCBtYXg6IFswLCAwXSB9CgpmdW5jdGlvbiBib3VuZHMgKHBvc2l0aW9ucykgewogIHZhciBjb3VudCA9IHBvc2l0aW9ucy5sZW5ndGggLyBpdGVtU2l6ZQogIGJveC5taW5bMF0gPSBwb3NpdGlvbnNbMF0KICBib3gubWluWzFdID0gcG9zaXRpb25zWzFdCiAgYm94Lm1heFswXSA9IHBvc2l0aW9uc1swXQogIGJveC5tYXhbMV0gPSBwb3NpdGlvbnNbMV0KCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICB2YXIgeCA9IHBvc2l0aW9uc1tpICogaXRlbVNpemUgKyAwXQogICAgdmFyIHkgPSBwb3NpdGlvbnNbaSAqIGl0ZW1TaXplICsgMV0KICAgIGJveC5taW5bMF0gPSBNYXRoLm1pbih4LCBib3gubWluWzBdKQogICAgYm94Lm1pblsxXSA9IE1hdGgubWluKHksIGJveC5taW5bMV0pCiAgICBib3gubWF4WzBdID0gTWF0aC5tYXgoeCwgYm94Lm1heFswXSkKICAgIGJveC5tYXhbMV0gPSBNYXRoLm1heCh5LCBib3gubWF4WzFdKQogIH0KfQoKbW9kdWxlLmV4cG9ydHMuY29tcHV0ZUJveCA9IGZ1bmN0aW9uIChwb3NpdGlvbnMsIG91dHB1dCkgewogIGJvdW5kcyhwb3NpdGlvbnMpCiAgb3V0cHV0Lm1pbi5zZXQoYm94Lm1pblswXSwgYm94Lm1pblsxXSwgMCkKICBvdXRwdXQubWF4LnNldChib3gubWF4WzBdLCBib3gubWF4WzFdLCAwKQp9Cgptb2R1bGUuZXhwb3J0cy5jb21wdXRlU3BoZXJlID0gZnVuY3Rpb24gKHBvc2l0aW9ucywgb3V0cHV0KSB7CiAgYm91bmRzKHBvc2l0aW9ucykKICB2YXIgbWluWCA9IGJveC5taW5bMF0KICB2YXIgbWluWSA9IGJveC5taW5bMV0KICB2YXIgbWF4WCA9IGJveC5tYXhbMF0KICB2YXIgbWF4WSA9IGJveC5tYXhbMV0KICB2YXIgd2lkdGggPSBtYXhYIC0gbWluWAogIHZhciBoZWlnaHQgPSBtYXhZIC0gbWluWQogIHZhciBsZW5ndGggPSBNYXRoLnNxcnQod2lkdGggKiB3aWR0aCArIGhlaWdodCAqIGhlaWdodCkKICBvdXRwdXQuY2VudGVyLnNldChtaW5YICsgd2lkdGggLyAyLCBtaW5ZICsgaGVpZ2h0IC8gMiwgMCkKICBvdXRwdXQucmFkaXVzID0gbGVuZ3RoIC8gMgp9Cgp9LHt9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzLnBhZ2VzID0gZnVuY3Rpb24gcGFnZXMgKGdseXBocykgewogIHZhciBwYWdlcyA9IG5ldyBGbG9hdDMyQXJyYXkoZ2x5cGhzLmxlbmd0aCAqIDQgKiAxKQogIHZhciBpID0gMAogIGdseXBocy5mb3JFYWNoKGZ1bmN0aW9uIChnbHlwaCkgewogICAgdmFyIGlkID0gZ2x5cGguZGF0YS5wYWdlIHx8IDAKICAgIHBhZ2VzW2krK10gPSBpZAogICAgcGFnZXNbaSsrXSA9IGlkCiAgICBwYWdlc1tpKytdID0gaWQKICAgIHBhZ2VzW2krK10gPSBpZAogIH0pCiAgcmV0dXJuIHBhZ2VzCn0KCm1vZHVsZS5leHBvcnRzLnV2cyA9IGZ1bmN0aW9uIHV2cyAoZ2x5cGhzLCB0ZXhXaWR0aCwgdGV4SGVpZ2h0LCBmbGlwWSkgewogIHZhciB1dnMgPSBuZXcgRmxvYXQzMkFycmF5KGdseXBocy5sZW5ndGggKiA0ICogMikKICB2YXIgaSA9IDAKICBnbHlwaHMuZm9yRWFjaChmdW5jdGlvbiAoZ2x5cGgpIHsKICAgIHZhciBiaXRtYXAgPSBnbHlwaC5kYXRhCiAgICB2YXIgYncgPSAoYml0bWFwLnggKyBiaXRtYXAud2lkdGgpCiAgICB2YXIgYmggPSAoYml0bWFwLnkgKyBiaXRtYXAuaGVpZ2h0KQoKICAgIC8vIHRvcCBsZWZ0IHBvc2l0aW9uCiAgICB2YXIgdTAgPSBiaXRtYXAueCAvIHRleFdpZHRoCiAgICB2YXIgdjEgPSBiaXRtYXAueSAvIHRleEhlaWdodAogICAgdmFyIHUxID0gYncgLyB0ZXhXaWR0aAogICAgdmFyIHYwID0gYmggLyB0ZXhIZWlnaHQKCiAgICBpZiAoZmxpcFkpIHsKICAgICAgdjEgPSAodGV4SGVpZ2h0IC0gYml0bWFwLnkpIC8gdGV4SGVpZ2h0CiAgICAgIHYwID0gKHRleEhlaWdodCAtIGJoKSAvIHRleEhlaWdodAogICAgfQoKICAgIC8vIEJMCiAgICB1dnNbaSsrXSA9IHUwCiAgICB1dnNbaSsrXSA9IHYxCiAgICAvLyBUTAogICAgdXZzW2krK10gPSB1MAogICAgdXZzW2krK10gPSB2MAogICAgLy8gVFIKICAgIHV2c1tpKytdID0gdTEKICAgIHV2c1tpKytdID0gdjAKICAgIC8vIEJSCiAgICB1dnNbaSsrXSA9IHUxCiAgICB1dnNbaSsrXSA9IHYxCiAgfSkKICByZXR1cm4gdXZzCn0KCm1vZHVsZS5leHBvcnRzLnBvc2l0aW9ucyA9IGZ1bmN0aW9uIHBvc2l0aW9ucyAoZ2x5cGhzKSB7CiAgdmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoZ2x5cGhzLmxlbmd0aCAqIDQgKiAyKQogIHZhciBpID0gMAogIGdseXBocy5mb3JFYWNoKGZ1bmN0aW9uIChnbHlwaCkgewogICAgdmFyIGJpdG1hcCA9IGdseXBoLmRhdGEKCiAgICAvLyBib3R0b20gbGVmdCBwb3NpdGlvbgogICAgdmFyIHggPSBnbHlwaC5wb3NpdGlvblswXSArIGJpdG1hcC54b2Zmc2V0CiAgICB2YXIgeSA9IGdseXBoLnBvc2l0aW9uWzFdICsgYml0bWFwLnlvZmZzZXQKCiAgICAvLyBxdWFkIHNpemUKICAgIHZhciB3ID0gYml0bWFwLndpZHRoCiAgICB2YXIgaCA9IGJpdG1hcC5oZWlnaHQKCiAgICAvLyBCTAogICAgcG9zaXRpb25zW2krK10gPSB4CiAgICBwb3NpdGlvbnNbaSsrXSA9IHkKICAgIC8vIFRMCiAgICBwb3NpdGlvbnNbaSsrXSA9IHgKICAgIHBvc2l0aW9uc1tpKytdID0geSArIGgKICAgIC8vIFRSCiAgICBwb3NpdGlvbnNbaSsrXSA9IHggKyB3CiAgICBwb3NpdGlvbnNbaSsrXSA9IHkgKyBoCiAgICAvLyBCUgogICAgcG9zaXRpb25zW2krK10gPSB4ICsgdwogICAgcG9zaXRpb25zW2krK10gPSB5CiAgfSkKICByZXR1cm4gcG9zaXRpb25zCn0KCn0se31dLDQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGZsYXR0ZW4gPSBfZGVyZXFfKCdmbGF0dGVuLXZlcnRleC1kYXRhJykKdmFyIHdhcm5lZCA9IGZhbHNlOwoKbW9kdWxlLmV4cG9ydHMuYXR0ciA9IHNldEF0dHJpYnV0ZQptb2R1bGUuZXhwb3J0cy5pbmRleCA9IHNldEluZGV4CgpmdW5jdGlvbiBzZXRJbmRleCAoZ2VvbWV0cnksIGRhdGEsIGl0ZW1TaXplLCBkdHlwZSkgewogIGlmICh0eXBlb2YgaXRlbVNpemUgIT09ICdudW1iZXInKSBpdGVtU2l6ZSA9IDEKICBpZiAodHlwZW9mIGR0eXBlICE9PSAnc3RyaW5nJykgZHR5cGUgPSAndWludDE2JwoKICB2YXIgaXNSNjkgPSAhZ2VvbWV0cnkuaW5kZXggJiYgdHlwZW9mIGdlb21ldHJ5LnNldEluZGV4ICE9PSAnZnVuY3Rpb24nCiAgdmFyIGF0dHJpYiA9IGlzUjY5ID8gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdpbmRleCcpIDogZ2VvbWV0cnkuaW5kZXgKICB2YXIgbmV3QXR0cmliID0gdXBkYXRlQXR0cmlidXRlKGF0dHJpYiwgZGF0YSwgaXRlbVNpemUsIGR0eXBlKQogIGlmIChuZXdBdHRyaWIpIHsKICAgIGlmIChpc1I2OSkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdpbmRleCcsIG5ld0F0dHJpYikKICAgIGVsc2UgZ2VvbWV0cnkuaW5kZXggPSBuZXdBdHRyaWIKICB9Cn0KCmZ1bmN0aW9uIHNldEF0dHJpYnV0ZSAoZ2VvbWV0cnksIGtleSwgZGF0YSwgaXRlbVNpemUsIGR0eXBlKSB7CiAgaWYgKHR5cGVvZiBpdGVtU2l6ZSAhPT0gJ251bWJlcicpIGl0ZW1TaXplID0gMwogIGlmICh0eXBlb2YgZHR5cGUgIT09ICdzdHJpbmcnKSBkdHlwZSA9ICdmbG9hdDMyJwogIGlmIChBcnJheS5pc0FycmF5KGRhdGEpICYmCiAgICBBcnJheS5pc0FycmF5KGRhdGFbMF0pICYmCiAgICBkYXRhWzBdLmxlbmd0aCAhPT0gaXRlbVNpemUpIHsKICAgIHRocm93IG5ldyBFcnJvcignTmVzdGVkIHZlcnRleCBhcnJheSBoYXMgdW5leHBlY3RlZCBzaXplOyBleHBlY3RlZCAnICsKICAgICAgaXRlbVNpemUgKyAnIGJ1dCBmb3VuZCAnICsgZGF0YVswXS5sZW5ndGgpCiAgfQoKICB2YXIgYXR0cmliID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKGtleSkKICB2YXIgbmV3QXR0cmliID0gdXBkYXRlQXR0cmlidXRlKGF0dHJpYiwgZGF0YSwgaXRlbVNpemUsIGR0eXBlKQogIGdlb21ldHJ5LnNldEF0dHJpYnV0ZShrZXksIG5ld0F0dHJpYikKfQoKZnVuY3Rpb24gdXBkYXRlQXR0cmlidXRlIChhdHRyaWIsIGRhdGEsIGl0ZW1TaXplLCBkdHlwZSkgewogIGRhdGEgPSBkYXRhIHx8IFtdCgogIC8vIGNyZWF0ZSBhIG5ldyBhcnJheSB3aXRoIGRlc2lyZWQgdHlwZQogIGRhdGEgPSBmbGF0dGVuKGRhdGEsIGR0eXBlKQoKICBhdHRyaWIgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGRhdGEsIGl0ZW1TaXplKTsKICBhdHRyaWIuaXRlbVNpemUgPSBpdGVtU2l6ZTsKICBhdHRyaWIubmVlZHNVcGRhdGUgPSB0cnVlOwoKICByZXR1cm4gYXR0cmliCn0KCi8vIFRlc3Qgd2hldGhlciB0aGUgYXR0cmlidXRlIG5lZWRzIHRvIGJlIHJlLWNyZWF0ZWQsCi8vIHJldHVybnMgZmFsc2UgaWYgd2UgY2FuIHJlLXVzZSBpdCBhcy1pcy4KZnVuY3Rpb24gcmVidWlsZEF0dHJpYnV0ZSAoYXR0cmliLCBkYXRhLCBpdGVtU2l6ZSkgewogIGlmIChhdHRyaWIuaXRlbVNpemUgIT09IGl0ZW1TaXplKSByZXR1cm4gdHJ1ZQogIGlmICghYXR0cmliLmFycmF5KSByZXR1cm4gdHJ1ZQogIHZhciBhdHRyaWJMZW5ndGggPSBhdHRyaWIuYXJyYXkubGVuZ3RoCiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgQXJyYXkuaXNBcnJheShkYXRhWzBdKSkgewogICAgLy8gWyBbIHgsIHksIHogXSBdCiAgICByZXR1cm4gYXR0cmliTGVuZ3RoICE9PSBkYXRhLmxlbmd0aCAqIGl0ZW1TaXplCiAgfSBlbHNlIHsKICAgIC8vIFsgeCwgeSwgeiBdCiAgICByZXR1cm4gYXR0cmliTGVuZ3RoICE9PSBkYXRhLmxlbmd0aAogIH0KICByZXR1cm4gZmFsc2UKfQoKfSx7ImZsYXR0ZW4tdmVydGV4LWRhdGEiOjE1fV0sNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHNldEltbWVkaWF0ZSxjbGVhckltbWVkaWF0ZSl7CnZhciBuZXh0VGljayA9IF9kZXJlcV8oJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrOwp2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7CnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTsKdmFyIGltbWVkaWF0ZUlkcyA9IHt9Owp2YXIgbmV4dEltbWVkaWF0ZUlkID0gMDsKCi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzCgpleHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7Cn07CmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTsKfTsKZXhwb3J0cy5jbGVhclRpbWVvdXQgPQpleHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTsKCmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHsKICB0aGlzLl9pZCA9IGlkOwogIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuOwp9ClRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTsKVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHsKICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7Cn07CgovLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC4KZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2VjcykgewogIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTsKICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzOwp9OwoKZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHsKICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7CiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTsKfTsKCmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7CiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpOwoKICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDsKICBpZiAobXNlY3MgPj0gMCkgewogICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkgewogICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KQogICAgICAgIGl0ZW0uX29uVGltZW91dCgpOwogICAgfSwgbXNlY3MpOwogIH0KfTsKCi8vIFRoYXQncyBub3QgaG93IG5vZGUuanMgaW1wbGVtZW50cyBpdCBidXQgdGhlIGV4cG9zZWQgYXBpIGlzIHRoZSBzYW1lLgpleHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICJmdW5jdGlvbiIgPyBzZXRJbW1lZGlhdGUgOiBmdW5jdGlvbihmbikgewogIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrOwogIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKCiAgaW1tZWRpYXRlSWRzW2lkXSA9IHRydWU7CgogIG5leHRUaWNrKGZ1bmN0aW9uIG9uTmV4dFRpY2soKSB7CiAgICBpZiAoaW1tZWRpYXRlSWRzW2lkXSkgewogICAgICAvLyBmbi5jYWxsKCkgaXMgZmFzdGVyIHNvIHdlIG9wdGltaXplIGZvciB0aGUgY29tbW9uIHVzZS1jYXNlCiAgICAgIC8vIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vY2FsbC1hcHBseS1zZWd1CiAgICAgIGlmIChhcmdzKSB7CiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm4uY2FsbChudWxsKTsKICAgICAgfQogICAgICAvLyBQcmV2ZW50IGlkcyBmcm9tIGxlYWtpbmcKICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7CiAgICB9CiAgfSk7CgogIHJldHVybiBpZDsKfTsKCmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09ICJmdW5jdGlvbiIgPyBjbGVhckltbWVkaWF0ZSA6IGZ1bmN0aW9uKGlkKSB7CiAgZGVsZXRlIGltbWVkaWF0ZUlkc1tpZF07Cn07Cn0pLmNhbGwodGhpcyxfZGVyZXFfKCJ0aW1lcnMiKS5zZXRJbW1lZGlhdGUsX2RlcmVxXygidGltZXJzIikuY2xlYXJJbW1lZGlhdGUpCgp9LHsicHJvY2Vzcy9icm93c2VyLmpzIjo0NywidGltZXJzIjo0Nn1dLDQ3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1fV0sNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewoKZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHJpbTsKCmZ1bmN0aW9uIHRyaW0oc3RyKXsKICByZXR1cm4gc3RyLnJlcGxhY2UoL15ccyp8XHMqJC9nLCAnJyk7Cn0KCmV4cG9ydHMubGVmdCA9IGZ1bmN0aW9uKHN0cil7CiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXHMqLywgJycpOwp9OwoKZXhwb3J0cy5yaWdodCA9IGZ1bmN0aW9uKHN0cil7CiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9ccyokLywgJycpOwp9OwoKfSx7fV0sNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7Ci8qKgogKiBAbGljZW5zZQogKiB3ZWJ2ci1wb2x5ZmlsbAogKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNyBHb29nbGUKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCi8qKgogKiBAbGljZW5zZQogKiBjYXJkYm9hcmQtdnItZGlzcGxheQogKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNyBHb29nbGUKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCi8qKgogKiBAbGljZW5zZQogKiB3ZWJ2ci1wb2x5ZmlsbC1kcGRiIAogKiBDb3B5cmlnaHQgKGMpIDIwMTcgR29vZ2xlCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgovKioKICogQGxpY2Vuc2UKICogd2dsdS1wcmVzZXJ2ZS1zdGF0ZQogKiBDb3B5cmlnaHQgKGMpIDIwMTYsIEJyYW5kb24gSm9uZXMuCiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwogKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKgogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgogKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICoKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQogKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KICogVEhFIFNPRlRXQVJFLgogKi8KCi8qKgogKiBAbGljZW5zZQogKiBub3NsZWVwLmpzCiAqIENvcHlyaWdodCAoYykgMjAxNywgUmljaCBUaWJiZXR0CiAqCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwogKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgogKgogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgogKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICoKICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQogKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KICogVEhFIFNPRlRXQVJFLgogKi8KCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7Cgl0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6Cgl0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOgoJKGdsb2JhbC5XZWJWUlBvbHlmaWxsID0gZmFjdG9yeSgpKTsKfSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7Cgp2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9OwoKCgpmdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7CglyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4Owp9CgpmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7CglyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7Cn0KCnZhciBpc01vYmlsZSA9IGZ1bmN0aW9uIGlzTW9iaWxlKCkgewogIHJldHVybiAoL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9pUGhvbmV8aVBhZHxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KQogICk7Cn07CnZhciBjb3B5QXJyYXkgPSBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBkZXN0KSB7CiAgZm9yICh2YXIgaSA9IDAsIG4gPSBzb3VyY2UubGVuZ3RoOyBpIDwgbjsgaSsrKSB7CiAgICBkZXN0W2ldID0gc291cmNlW2ldOwogIH0KfTsKdmFyIGV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMpIHsKICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7CiAgICBpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgZGVzdFtrZXldID0gc3JjW2tleV07CiAgICB9CiAgfQogIHJldHVybiBkZXN0Owp9OwoKdmFyIGNhcmRib2FyZFZyRGlzcGxheSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHsKLyoqCiAqIEBsaWNlbnNlCiAqIGNhcmRib2FyZC12ci1kaXNwbGF5CiAqIENvcHlyaWdodCAoYykgMjAxNS0yMDE3IEdvb2dsZQogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwovKioKICogQGxpY2Vuc2UKICogZ2wtcHJlc2VydmUtc3RhdGUKICogQ29weXJpZ2h0IChjKSAyMDE2LCBCcmFuZG9uIEpvbmVzLgogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICoKICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgogKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOCiAqIFRIRSBTT0ZUV0FSRS4KICovCi8qKgogKiBAbGljZW5zZQogKiB3ZWJ2ci1wb2x5ZmlsbC1kcGRiCiAqIENvcHlyaWdodCAoYykgMjAxNS0yMDE3IEdvb2dsZQogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwovKioKICogQGxpY2Vuc2UKICogbm9zbGVlcC5qcwogKiBDb3B5cmlnaHQgKGMpIDIwMTcsIFJpY2ggVGliYmV0dAogKgogKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5CiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbAogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKICoKICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCiAqCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAogKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgogKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAogKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOCiAqIFRIRSBTT0ZUV0FSRS4KICovCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7Cgltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKfShjb21tb25qc0dsb2JhbCwgKGZ1bmN0aW9uICgpIHsgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn07CnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICB9CiAgfQogIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgICByZXR1cm4gQ29uc3RydWN0b3I7CiAgfTsKfSgpOwp2YXIgc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgewogICAgdmFyIF9hcnIgPSBbXTsKICAgIHZhciBfbiA9IHRydWU7CiAgICB2YXIgX2QgPSBmYWxzZTsKICAgIHZhciBfZSA9IHVuZGVmaW5lZDsKICAgIHRyeSB7CiAgICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwogICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9kID0gdHJ1ZTsKICAgICAgX2UgPSBlcnI7CiAgICB9IGZpbmFsbHkgewogICAgICB0cnkgewogICAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdKSBfaVsicmV0dXJuIl0oKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gX2FycjsKICB9CiAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgICAgcmV0dXJuIGFycjsKICAgIH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7CiAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7CiAgICB9CiAgfTsKfSgpOwp2YXIgTUlOX1RJTUVTVEVQID0gMC4wMDE7CnZhciBNQVhfVElNRVNURVAgPSAxOwp2YXIgZGF0YVVyaSA9IGZ1bmN0aW9uIGRhdGFVcmkobWltZVR5cGUsIHN2ZykgewogIHJldHVybiAnZGF0YTonICsgbWltZVR5cGUgKyAnLCcgKyBlbmNvZGVVUklDb21wb25lbnQoc3ZnKTsKfTsKdmFyIGxlcnAgPSBmdW5jdGlvbiBsZXJwKGEsIGIsIHQpIHsKICByZXR1cm4gYSArIChiIC0gYSkgKiB0Owp9Owp2YXIgaXNJT1MgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGlzSU9TID0gL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGlzSU9TOwogIH07Cn0oKTsKdmFyIGlzV2ViVmlld0FuZHJvaWQgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGlzV2ViVmlld0FuZHJvaWQgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1ZlcnNpb24nKSAhPT0gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgIT09IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgIT09IC0xOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gaXNXZWJWaWV3QW5kcm9pZDsKICB9Owp9KCk7CnZhciBpc1NhZmFyaSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gaXNTYWZhcmk7CiAgfTsKfSgpOwp2YXIgaXNGaXJlZm94QW5kcm9pZCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgaXNGaXJlZm94QW5kcm9pZCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSAhPT0gLTE7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBpc0ZpcmVmb3hBbmRyb2lkOwogIH07Cn0oKTsKdmFyIGdldENocm9tZVZlcnNpb24gPSBmdW5jdGlvbiAoKSB7CiAgdmFyIG1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvLipDaHJvbWVcLyhbMC05XSspLyk7CiAgdmFyIHZhbHVlID0gbWF0Y2ggPyBwYXJzZUludChtYXRjaFsxXSwgMTApIDogbnVsbDsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHZhbHVlOwogIH07Cn0oKTsKdmFyIGlzQ2hyb21lV2l0aG91dERldmljZU1vdGlvbiA9IGZ1bmN0aW9uICgpIHsKICB2YXIgdmFsdWUgPSBmYWxzZTsKICBpZiAoZ2V0Q2hyb21lVmVyc2lvbigpID09PSA2NSkgewogICAgdmFyIG1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvLipDaHJvbWVcLyhbMC05XC5dKikvKTsKICAgIGlmIChtYXRjaCkgewogICAgICB2YXIgX21hdGNoJDEkc3BsaXQgPSBtYXRjaFsxXS5zcGxpdCgnLicpLAogICAgICAgICAgX21hdGNoJDEkc3BsaXQyID0gc2xpY2VkVG9BcnJheShfbWF0Y2gkMSRzcGxpdCwgNCksCiAgICAgICAgICBtYWpvciA9IF9tYXRjaCQxJHNwbGl0MlswXSwKICAgICAgICAgIG1pbm9yID0gX21hdGNoJDEkc3BsaXQyWzFdLAogICAgICAgICAgYnJhbmNoID0gX21hdGNoJDEkc3BsaXQyWzJdLAogICAgICAgICAgYnVpbGQgPSBfbWF0Y2gkMSRzcGxpdDJbM107CiAgICAgIHZhbHVlID0gcGFyc2VJbnQoYnJhbmNoLCAxMCkgPT09IDMzMjUgJiYgcGFyc2VJbnQoYnVpbGQsIDEwKSA8IDE0ODsKICAgIH0KICB9CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB2YWx1ZTsKICB9Owp9KCk7CnZhciBpc1I3ID0gZnVuY3Rpb24gKCkgewogIHZhciBpc1I3ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdSNyBCdWlsZCcpICE9PSAtMTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGlzUjc7CiAgfTsKfSgpOwp2YXIgaXNMYW5kc2NhcGVNb2RlID0gZnVuY3Rpb24gaXNMYW5kc2NhcGVNb2RlKCkgewogIHZhciBydG4gPSB3aW5kb3cub3JpZW50YXRpb24gPT0gOTAgfHwgd2luZG93Lm9yaWVudGF0aW9uID09IC05MDsKICByZXR1cm4gaXNSNygpID8gIXJ0biA6IHJ0bjsKfTsKdmFyIGlzVGltZXN0YW1wRGVsdGFWYWxpZCA9IGZ1bmN0aW9uIGlzVGltZXN0YW1wRGVsdGFWYWxpZCh0aW1lc3RhbXBEZWx0YVMpIHsKICBpZiAoaXNOYU4odGltZXN0YW1wRGVsdGFTKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAodGltZXN0YW1wRGVsdGFTIDw9IE1JTl9USU1FU1RFUCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAodGltZXN0YW1wRGVsdGFTID4gTUFYX1RJTUVTVEVQKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwp9Owp2YXIgZ2V0U2NyZWVuV2lkdGggPSBmdW5jdGlvbiBnZXRTY3JlZW5XaWR0aCgpIHsKICByZXR1cm4gTWF0aC5tYXgod2luZG93LnNjcmVlbi53aWR0aCwgd2luZG93LnNjcmVlbi5oZWlnaHQpICogd2luZG93LmRldmljZVBpeGVsUmF0aW87Cn07CnZhciBnZXRTY3JlZW5IZWlnaHQgPSBmdW5jdGlvbiBnZXRTY3JlZW5IZWlnaHQoKSB7CiAgcmV0dXJuIE1hdGgubWluKHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvOwp9Owp2YXIgcmVxdWVzdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiByZXF1ZXN0RnVsbHNjcmVlbihlbGVtZW50KSB7CiAgaWYgKGlzV2ViVmlld0FuZHJvaWQoKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikgewogICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpOwogIH0gZWxzZSBpZiAoZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikgewogICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpOwogIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikgewogICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpOwogIH0gZWxzZSBpZiAoZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7CiAgICBlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTsKICB9IGVsc2UgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKfTsKdmFyIGV4aXRGdWxsc2NyZWVuID0gZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4oKSB7CiAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7CiAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpOwogIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHsKICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7CiAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7CiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7CiAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7CiAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKCk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7Cn07CnZhciBnZXRGdWxsc2NyZWVuRWxlbWVudCA9IGZ1bmN0aW9uIGdldEZ1bGxzY3JlZW5FbGVtZW50KCkgewogIHJldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50Owp9Owp2YXIgbGlua1Byb2dyYW0gPSBmdW5jdGlvbiBsaW5rUHJvZ3JhbShnbCwgdmVydGV4U291cmNlLCBmcmFnbWVudFNvdXJjZSwgYXR0cmliTG9jYXRpb25NYXApIHsKICB2YXIgdmVydGV4U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpOwogIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNvdXJjZSk7CiAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpOwogIHZhciBmcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpOwogIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ21lbnRTb3VyY2UpOwogIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpOwogIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpOwogIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpOwogIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7CiAgZm9yICh2YXIgYXR0cmliTmFtZSBpbiBhdHRyaWJMb2NhdGlvbk1hcCkgewogICAgZ2wuYmluZEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGF0dHJpYkxvY2F0aW9uTWFwW2F0dHJpYk5hbWVdLCBhdHRyaWJOYW1lKTsKICB9Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7CiAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7CiAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTsKICByZXR1cm4gcHJvZ3JhbTsKfTsKdmFyIGdldFByb2dyYW1Vbmlmb3JtcyA9IGZ1bmN0aW9uIGdldFByb2dyYW1Vbmlmb3JtcyhnbCwgcHJvZ3JhbSkgewogIHZhciB1bmlmb3JtcyA9IHt9OwogIHZhciB1bmlmb3JtQ291bnQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7CiAgdmFyIHVuaWZvcm1OYW1lID0gJyc7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmlmb3JtQ291bnQ7IGkrKykgewogICAgdmFyIHVuaWZvcm1JbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpKTsKICAgIHVuaWZvcm1OYW1lID0gdW5pZm9ybUluZm8ubmFtZS5yZXBsYWNlKCdbMF0nLCAnJyk7CiAgICB1bmlmb3Jtc1t1bmlmb3JtTmFtZV0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdW5pZm9ybU5hbWUpOwogIH0KICByZXR1cm4gdW5pZm9ybXM7Cn07CnZhciBvcnRob01hdHJpeCA9IGZ1bmN0aW9uIG9ydGhvTWF0cml4KG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHsKICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCksCiAgICAgIGJ0ID0gMSAvIChib3R0b20gLSB0b3ApLAogICAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7CiAgb3V0WzBdID0gLTIgKiBscjsKICBvdXRbMV0gPSAwOwogIG91dFsyXSA9IDA7CiAgb3V0WzNdID0gMDsKICBvdXRbNF0gPSAwOwogIG91dFs1XSA9IC0yICogYnQ7CiAgb3V0WzZdID0gMDsKICBvdXRbN10gPSAwOwogIG91dFs4XSA9IDA7CiAgb3V0WzldID0gMDsKICBvdXRbMTBdID0gMiAqIG5mOwogIG91dFsxMV0gPSAwOwogIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyOwogIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0OwogIG91dFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjsKICBvdXRbMTVdID0gMTsKICByZXR1cm4gb3V0Owp9Owp2YXIgaXNNb2JpbGUgPSBmdW5jdGlvbiBpc01vYmlsZSgpIHsKICB2YXIgY2hlY2sgPSBmYWxzZTsKICAoZnVuY3Rpb24gKGEpIHsKICAgIGlmICgvKGFuZHJvaWR8YmJcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KGEpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcLShufHUpfGM1NVwvfGNhcGl8Y2N3YXxjZG1cLXxjZWxsfGNodG18Y2xkY3xjbWRcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1wtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlwtNXxnXC1tb3xnbyhcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcLShtfHB8dCl8aGVpXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1wtY3xodChjKFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFwtfFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFwvKXxrbG9ufGtwdCB8a3djXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFwvKGt8bHx1KXw1MHw1NHxcLVthLXddKXxsaWJ3fGx5bnh8bTFcLXd8bTNnYXxtNTBcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFwtZ3xxYVwtYXxxYygwN3wxMnwyMXwzMnw2MHxcLVsyLTddfGlcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFwtfG9vfHBcLSl8c2RrXC98c2UoYyhcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcLXxzaGFyfHNpZShcLXxtKXxza1wtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXC18dlwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXC18dGRnXC18dGVsKGl8bSl8dGltXC18dFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cLXxtM3xtNSl8dHhcLTl8dXAoXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXC18eW91cnx6ZXRvfHp0ZVwtL2kudGVzdChhLnN1YnN0cigwLCA0KSkpIGNoZWNrID0gdHJ1ZTsKICB9KShuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKTsKICByZXR1cm4gY2hlY2s7Cn07CnZhciBleHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoZGVzdCwgc3JjKSB7CiAgZm9yICh2YXIga2V5IGluIHNyYykgewogICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgIGRlc3Rba2V5XSA9IHNyY1trZXldOwogICAgfQogIH0KICByZXR1cm4gZGVzdDsKfTsKdmFyIHNhZmFyaUNzc1NpemVXb3JrYXJvdW5kID0gZnVuY3Rpb24gc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQoY2FudmFzKSB7CiAgaWYgKGlzSU9TKCkpIHsKICAgIHZhciB3aWR0aCA9IGNhbnZhcy5zdHlsZS53aWR0aDsKICAgIHZhciBoZWlnaHQgPSBjYW52YXMuc3R5bGUuaGVpZ2h0OwogICAgY2FudmFzLnN0eWxlLndpZHRoID0gcGFyc2VJbnQod2lkdGgpICsgMSArICdweCc7CiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0KSArICdweCc7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGg7CiAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7CiAgICB9LCAxMDApOwogIH0KICB3aW5kb3cuY2FudmFzID0gY2FudmFzOwp9Owp2YXIgZnJhbWVEYXRhRnJvbVBvc2UgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHBpT3ZlcjE4MCA9IE1hdGguUEkgLyAxODAuMDsKICB2YXIgcmFkNDUgPSBNYXRoLlBJICogMC4yNTsKICBmdW5jdGlvbiBtYXQ0X3BlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3KG91dCwgZm92LCBuZWFyLCBmYXIpIHsKICAgIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdiA/IGZvdi51cERlZ3JlZXMgKiBwaU92ZXIxODAgOiByYWQ0NSksCiAgICAgICAgZG93blRhbiA9IE1hdGgudGFuKGZvdiA/IGZvdi5kb3duRGVncmVlcyAqIHBpT3ZlcjE4MCA6IHJhZDQ1KSwKICAgICAgICBsZWZ0VGFuID0gTWF0aC50YW4oZm92ID8gZm92LmxlZnREZWdyZWVzICogcGlPdmVyMTgwIDogcmFkNDUpLAogICAgICAgIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92ID8gZm92LnJpZ2h0RGVncmVlcyAqIHBpT3ZlcjE4MCA6IHJhZDQ1KSwKICAgICAgICB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKSwKICAgICAgICB5U2NhbGUgPSAyLjAgLyAodXBUYW4gKyBkb3duVGFuKTsKICAgIG91dFswXSA9IHhTY2FsZTsKICAgIG91dFsxXSA9IDAuMDsKICAgIG91dFsyXSA9IDAuMDsKICAgIG91dFszXSA9IDAuMDsKICAgIG91dFs0XSA9IDAuMDsKICAgIG91dFs1XSA9IHlTY2FsZTsKICAgIG91dFs2XSA9IDAuMDsKICAgIG91dFs3XSA9IDAuMDsKICAgIG91dFs4XSA9IC0oKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjUpOwogICAgb3V0WzldID0gKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjU7CiAgICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpOwogICAgb3V0WzExXSA9IC0xLjA7CiAgICBvdXRbMTJdID0gMC4wOwogICAgb3V0WzEzXSA9IDAuMDsKICAgIG91dFsxNF0gPSBmYXIgKiBuZWFyIC8gKG5lYXIgLSBmYXIpOwogICAgb3V0WzE1XSA9IDAuMDsKICAgIHJldHVybiBvdXQ7CiAgfQogIGZ1bmN0aW9uIG1hdDRfZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7CiAgICB2YXIgeCA9IHFbMF0sCiAgICAgICAgeSA9IHFbMV0sCiAgICAgICAgeiA9IHFbMl0sCiAgICAgICAgdyA9IHFbM10sCiAgICAgICAgeDIgPSB4ICsgeCwKICAgICAgICB5MiA9IHkgKyB5LAogICAgICAgIHoyID0geiArIHosCiAgICAgICAgeHggPSB4ICogeDIsCiAgICAgICAgeHkgPSB4ICogeTIsCiAgICAgICAgeHogPSB4ICogejIsCiAgICAgICAgeXkgPSB5ICogeTIsCiAgICAgICAgeXogPSB5ICogejIsCiAgICAgICAgenogPSB6ICogejIsCiAgICAgICAgd3ggPSB3ICogeDIsCiAgICAgICAgd3kgPSB3ICogeTIsCiAgICAgICAgd3ogPSB3ICogejI7CiAgICBvdXRbMF0gPSAxIC0gKHl5ICsgenopOwogICAgb3V0WzFdID0geHkgKyB3ejsKICAgIG91dFsyXSA9IHh6IC0gd3k7CiAgICBvdXRbM10gPSAwOwogICAgb3V0WzRdID0geHkgLSB3ejsKICAgIG91dFs1XSA9IDEgLSAoeHggKyB6eik7CiAgICBvdXRbNl0gPSB5eiArIHd4OwogICAgb3V0WzddID0gMDsKICAgIG91dFs4XSA9IHh6ICsgd3k7CiAgICBvdXRbOV0gPSB5eiAtIHd4OwogICAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7CiAgICBvdXRbMTFdID0gMDsKICAgIG91dFsxMl0gPSB2WzBdOwogICAgb3V0WzEzXSA9IHZbMV07CiAgICBvdXRbMTRdID0gdlsyXTsKICAgIG91dFsxNV0gPSAxOwogICAgcmV0dXJuIG91dDsKICB9CiAgZnVuY3Rpb24gbWF0NF90cmFuc2xhdGUob3V0LCBhLCB2KSB7CiAgICB2YXIgeCA9IHZbMF0sCiAgICAgICAgeSA9IHZbMV0sCiAgICAgICAgeiA9IHZbMl0sCiAgICAgICAgYTAwLAogICAgICAgIGEwMSwKICAgICAgICBhMDIsCiAgICAgICAgYTAzLAogICAgICAgIGExMCwKICAgICAgICBhMTEsCiAgICAgICAgYTEyLAogICAgICAgIGExMywKICAgICAgICBhMjAsCiAgICAgICAgYTIxLAogICAgICAgIGEyMiwKICAgICAgICBhMjM7CiAgICBpZiAoYSA9PT0gb3V0KSB7CiAgICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTsKICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdOwogICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdOwogICAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdOwogICAgfSBlbHNlIHsKICAgICAgYTAwID0gYVswXTthMDEgPSBhWzFdO2EwMiA9IGFbMl07YTAzID0gYVszXTsKICAgICAgYTEwID0gYVs0XTthMTEgPSBhWzVdO2ExMiA9IGFbNl07YTEzID0gYVs3XTsKICAgICAgYTIwID0gYVs4XTthMjEgPSBhWzldO2EyMiA9IGFbMTBdO2EyMyA9IGFbMTFdOwogICAgICBvdXRbMF0gPSBhMDA7b3V0WzFdID0gYTAxO291dFsyXSA9IGEwMjtvdXRbM10gPSBhMDM7CiAgICAgIG91dFs0XSA9IGExMDtvdXRbNV0gPSBhMTE7b3V0WzZdID0gYTEyO291dFs3XSA9IGExMzsKICAgICAgb3V0WzhdID0gYTIwO291dFs5XSA9IGEyMTtvdXRbMTBdID0gYTIyO291dFsxMV0gPSBhMjM7CiAgICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTsKICAgICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdOwogICAgICBvdXRbMTRdID0gYTAyICogeCArIGExMiAqIHkgKyBhMjIgKiB6ICsgYVsxNF07CiAgICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTsKICAgIH0KICAgIHJldHVybiBvdXQ7CiAgfQogIGZ1bmN0aW9uIG1hdDRfaW52ZXJ0KG91dCwgYSkgewogICAgdmFyIGEwMCA9IGFbMF0sCiAgICAgICAgYTAxID0gYVsxXSwKICAgICAgICBhMDIgPSBhWzJdLAogICAgICAgIGEwMyA9IGFbM10sCiAgICAgICAgYTEwID0gYVs0XSwKICAgICAgICBhMTEgPSBhWzVdLAogICAgICAgIGExMiA9IGFbNl0sCiAgICAgICAgYTEzID0gYVs3XSwKICAgICAgICBhMjAgPSBhWzhdLAogICAgICAgIGEyMSA9IGFbOV0sCiAgICAgICAgYTIyID0gYVsxMF0sCiAgICAgICAgYTIzID0gYVsxMV0sCiAgICAgICAgYTMwID0gYVsxMl0sCiAgICAgICAgYTMxID0gYVsxM10sCiAgICAgICAgYTMyID0gYVsxNF0sCiAgICAgICAgYTMzID0gYVsxNV0sCiAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLAogICAgICAgIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMCwKICAgICAgICBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTAsCiAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLAogICAgICAgIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMSwKICAgICAgICBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTIsCiAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLAogICAgICAgIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMCwKICAgICAgICBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzAsCiAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLAogICAgICAgIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMSwKICAgICAgICBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzIsCiAgICBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7CiAgICBpZiAoIWRldCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGRldCA9IDEuMCAvIGRldDsKICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0OwogICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7CiAgICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDsKICAgIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0OwogICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7CiAgICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDsKICAgIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0OwogICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7CiAgICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDsKICAgIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0OwogICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0OwogICAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0OwogICAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0OwogICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0OwogICAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0OwogICAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0OwogICAgcmV0dXJuIG91dDsKICB9CiAgdmFyIGRlZmF1bHRPcmllbnRhdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDAsIDFdKTsKICB2YXIgZGVmYXVsdFBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMF0pOwogIGZ1bmN0aW9uIHVwZGF0ZUV5ZU1hdHJpY2VzKHByb2plY3Rpb24sIHZpZXcsIHBvc2UsIGZvdiwgb2Zmc2V0LCB2ckRpc3BsYXkpIHsKICAgIG1hdDRfcGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXcocHJvamVjdGlvbiwgZm92IHx8IG51bGwsIHZyRGlzcGxheS5kZXB0aE5lYXIsIHZyRGlzcGxheS5kZXB0aEZhcik7CiAgICB2YXIgb3JpZW50YXRpb24gPSBwb3NlLm9yaWVudGF0aW9uIHx8IGRlZmF1bHRPcmllbnRhdGlvbjsKICAgIHZhciBwb3NpdGlvbiA9IHBvc2UucG9zaXRpb24gfHwgZGVmYXVsdFBvc2l0aW9uOwogICAgbWF0NF9mcm9tUm90YXRpb25UcmFuc2xhdGlvbih2aWV3LCBvcmllbnRhdGlvbiwgcG9zaXRpb24pOwogICAgaWYgKG9mZnNldCkgbWF0NF90cmFuc2xhdGUodmlldywgdmlldywgb2Zmc2V0KTsKICAgIG1hdDRfaW52ZXJ0KHZpZXcsIHZpZXcpOwogIH0KICByZXR1cm4gZnVuY3Rpb24gKGZyYW1lRGF0YSwgcG9zZSwgdnJEaXNwbGF5KSB7CiAgICBpZiAoIWZyYW1lRGF0YSB8fCAhcG9zZSkgcmV0dXJuIGZhbHNlOwogICAgZnJhbWVEYXRhLnBvc2UgPSBwb3NlOwogICAgZnJhbWVEYXRhLnRpbWVzdGFtcCA9IHBvc2UudGltZXN0YW1wOwogICAgdXBkYXRlRXllTWF0cmljZXMoZnJhbWVEYXRhLmxlZnRQcm9qZWN0aW9uTWF0cml4LCBmcmFtZURhdGEubGVmdFZpZXdNYXRyaXgsIHBvc2UsIHZyRGlzcGxheS5fZ2V0RmllbGRPZlZpZXcoImxlZnQiKSwgdnJEaXNwbGF5Ll9nZXRFeWVPZmZzZXQoImxlZnQiKSwgdnJEaXNwbGF5KTsKICAgIHVwZGF0ZUV5ZU1hdHJpY2VzKGZyYW1lRGF0YS5yaWdodFByb2plY3Rpb25NYXRyaXgsIGZyYW1lRGF0YS5yaWdodFZpZXdNYXRyaXgsIHBvc2UsIHZyRGlzcGxheS5fZ2V0RmllbGRPZlZpZXcoInJpZ2h0IiksIHZyRGlzcGxheS5fZ2V0RXllT2Zmc2V0KCJyaWdodCIpLCB2ckRpc3BsYXkpOwogICAgcmV0dXJuIHRydWU7CiAgfTsKfSgpOwp2YXIgaXNJbnNpZGVDcm9zc09yaWdpbklGcmFtZSA9IGZ1bmN0aW9uIGlzSW5zaWRlQ3Jvc3NPcmlnaW5JRnJhbWUoKSB7CiAgdmFyIGlzRnJhbWVkID0gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7CiAgdmFyIHJlZk9yaWdpbiA9IGdldE9yaWdpbkZyb21VcmwoZG9jdW1lbnQucmVmZXJyZXIpOwogIHZhciB0aGlzT3JpZ2luID0gZ2V0T3JpZ2luRnJvbVVybCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgcmV0dXJuIGlzRnJhbWVkICYmIHJlZk9yaWdpbiAhPT0gdGhpc09yaWdpbjsKfTsKdmFyIGdldE9yaWdpbkZyb21VcmwgPSBmdW5jdGlvbiBnZXRPcmlnaW5Gcm9tVXJsKHVybCkgewogIHZhciBkb21haW5JZHg7CiAgdmFyIHByb3RvU2VwSWR4ID0gdXJsLmluZGV4T2YoIjovLyIpOwogIGlmIChwcm90b1NlcElkeCAhPT0gLTEpIHsKICAgIGRvbWFpbklkeCA9IHByb3RvU2VwSWR4ICsgMzsKICB9IGVsc2UgewogICAgZG9tYWluSWR4ID0gMDsKICB9CiAgdmFyIGRvbWFpbkVuZElkeCA9IHVybC5pbmRleE9mKCcvJywgZG9tYWluSWR4KTsKICBpZiAoZG9tYWluRW5kSWR4ID09PSAtMSkgewogICAgZG9tYWluRW5kSWR4ID0gdXJsLmxlbmd0aDsKICB9CiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgZG9tYWluRW5kSWR4KTsKfTsKdmFyIGdldFF1YXRlcm5pb25BbmdsZSA9IGZ1bmN0aW9uIGdldFF1YXRlcm5pb25BbmdsZShxdWF0KSB7CiAgaWYgKHF1YXQudyA+IDEpIHsKICAgIGNvbnNvbGUud2FybignZ2V0UXVhdGVybmlvbkFuZ2xlOiB3ID4gMScpOwogICAgcmV0dXJuIDA7CiAgfQogIHZhciBhbmdsZSA9IDIgKiBNYXRoLmFjb3MocXVhdC53KTsKICByZXR1cm4gYW5nbGU7Cn07CnZhciB3YXJuT25jZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgb2JzZXJ2ZWRXYXJuaW5ncyA9IHt9OwogIHJldHVybiBmdW5jdGlvbiAoa2V5LCBtZXNzYWdlKSB7CiAgICBpZiAob2JzZXJ2ZWRXYXJuaW5nc1trZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgY29uc29sZS53YXJuKCd3ZWJ2ci1wb2x5ZmlsbDogJyArIG1lc3NhZ2UpOwogICAgICBvYnNlcnZlZFdhcm5pbmdzW2tleV0gPSB0cnVlOwogICAgfQogIH07Cn0oKTsKdmFyIGRlcHJlY2F0ZVdhcm5pbmcgPSBmdW5jdGlvbiBkZXByZWNhdGVXYXJuaW5nKGRlcHJlY2F0ZWQsIHN1Z2dlc3RlZCkgewogIHZhciBhbHRlcm5hdGl2ZSA9IHN1Z2dlc3RlZCA/ICdQbGVhc2UgdXNlICcgKyBzdWdnZXN0ZWQgKyAnIGluc3RlYWQuJyA6ICcnOwogIHdhcm5PbmNlKGRlcHJlY2F0ZWQsIGRlcHJlY2F0ZWQgKyAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnVGhpcyBtYXkgbm90IHdvcmsgb24gbmF0aXZlIFdlYlZSIGRpc3BsYXlzLiAnICsgYWx0ZXJuYXRpdmUpOwp9OwpmdW5jdGlvbiBXR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBiaW5kaW5ncywgY2FsbGJhY2spIHsKICBpZiAoIWJpbmRpbmdzKSB7CiAgICBjYWxsYmFjayhnbCk7CiAgICByZXR1cm47CiAgfQogIHZhciBib3VuZFZhbHVlcyA9IFtdOwogIHZhciBhY3RpdmVUZXh0dXJlID0gbnVsbDsKICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgKytpKSB7CiAgICB2YXIgYmluZGluZyA9IGJpbmRpbmdzW2ldOwogICAgc3dpdGNoIChiaW5kaW5nKSB7CiAgICAgIGNhc2UgZ2wuVEVYVFVSRV9CSU5ESU5HXzJEOgogICAgICBjYXNlIGdsLlRFWFRVUkVfQklORElOR19DVUJFX01BUDoKICAgICAgICB2YXIgdGV4dHVyZVVuaXQgPSBiaW5kaW5nc1srK2ldOwogICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCJURVhUVVJFX0JJTkRJTkdfMkQgb3IgVEVYVFVSRV9CSU5ESU5HX0NVQkVfTUFQIG11c3QgYmUgZm9sbG93ZWQgYnkgYSB2YWxpZCB0ZXh0dXJlIHVuaXQiKTsKICAgICAgICAgIGJvdW5kVmFsdWVzLnB1c2gobnVsbCwgbnVsbCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKCFhY3RpdmVUZXh0dXJlKSB7CiAgICAgICAgICBhY3RpdmVUZXh0dXJlID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkFDVElWRV9URVhUVVJFKTsKICAgICAgICB9CiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7CiAgICAgICAgYm91bmRWYWx1ZXMucHVzaChnbC5nZXRQYXJhbWV0ZXIoYmluZGluZyksIG51bGwpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIGdsLkFDVElWRV9URVhUVVJFOgogICAgICAgIGFjdGl2ZVRleHR1cmUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQUNUSVZFX1RFWFRVUkUpOwogICAgICAgIGJvdW5kVmFsdWVzLnB1c2gobnVsbCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgYm91bmRWYWx1ZXMucHVzaChnbC5nZXRQYXJhbWV0ZXIoYmluZGluZykpOwogICAgICAgIGJyZWFrOwogICAgfQogIH0KICBjYWxsYmFjayhnbCk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7ICsraSkgewogICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTsKICAgIHZhciBib3VuZFZhbHVlID0gYm91bmRWYWx1ZXNbaV07CiAgICBzd2l0Y2ggKGJpbmRpbmcpIHsKICAgICAgY2FzZSBnbC5BQ1RJVkVfVEVYVFVSRToKICAgICAgICBicmVhazsKICAgICAgY2FzZSBnbC5BUlJBWV9CVUZGRVJfQklORElORzoKICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYm91bmRWYWx1ZSk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgZ2wuQ09MT1JfQ0xFQVJfVkFMVUU6CiAgICAgICAgZ2wuY2xlYXJDb2xvcihib3VuZFZhbHVlWzBdLCBib3VuZFZhbHVlWzFdLCBib3VuZFZhbHVlWzJdLCBib3VuZFZhbHVlWzNdKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBnbC5DT0xPUl9XUklURU1BU0s6CiAgICAgICAgZ2wuY29sb3JNYXNrKGJvdW5kVmFsdWVbMF0sIGJvdW5kVmFsdWVbMV0sIGJvdW5kVmFsdWVbMl0sIGJvdW5kVmFsdWVbM10pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIGdsLkNVUlJFTlRfUFJPR1JBTToKICAgICAgICBnbC51c2VQcm9ncmFtKGJvdW5kVmFsdWUpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkc6CiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYm91bmRWYWx1ZSk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgZ2wuRlJBTUVCVUZGRVJfQklORElORzoKICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGJvdW5kVmFsdWUpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIGdsLlJFTkRFUkJVRkZFUl9CSU5ESU5HOgogICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBib3VuZFZhbHVlKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfMkQ6CiAgICAgICAgdmFyIHRleHR1cmVVbml0ID0gYmluZGluZ3NbKytpXTsKICAgICAgICBpZiAodGV4dHVyZVVuaXQgPCBnbC5URVhUVVJFMCB8fCB0ZXh0dXJlVW5pdCA+IGdsLlRFWFRVUkUzMSkKICAgICAgICAgIGJyZWFrOwogICAgICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpOwogICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGJvdW5kVmFsdWUpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIGdsLlRFWFRVUkVfQklORElOR19DVUJFX01BUDoKICAgICAgICB2YXIgdGV4dHVyZVVuaXQgPSBiaW5kaW5nc1srK2ldOwogICAgICAgIGlmICh0ZXh0dXJlVW5pdCA8IGdsLlRFWFRVUkUwIHx8IHRleHR1cmVVbml0ID4gZ2wuVEVYVFVSRTMxKQogICAgICAgICAgYnJlYWs7CiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7CiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV9DVUJFX01BUCwgYm91bmRWYWx1ZSk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgZ2wuVklFV1BPUlQ6CiAgICAgICAgZ2wudmlld3BvcnQoYm91bmRWYWx1ZVswXSwgYm91bmRWYWx1ZVsxXSwgYm91bmRWYWx1ZVsyXSwgYm91bmRWYWx1ZVszXSk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgZ2wuQkxFTkQ6CiAgICAgIGNhc2UgZ2wuQ1VMTF9GQUNFOgogICAgICBjYXNlIGdsLkRFUFRIX1RFU1Q6CiAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOgogICAgICBjYXNlIGdsLlNURU5DSUxfVEVTVDoKICAgICAgICBpZiAoYm91bmRWYWx1ZSkgewogICAgICAgICAgZ2wuZW5hYmxlKGJpbmRpbmcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnbC5kaXNhYmxlKGJpbmRpbmcpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBjb25zb2xlLmxvZygiTm8gR0wgcmVzdG9yZSBiZWhhdmlvciBmb3IgMHgiICsgYmluZGluZy50b1N0cmluZygxNikpOwogICAgICAgIGJyZWFrOwogICAgfQogICAgaWYgKGFjdGl2ZVRleHR1cmUpIHsKICAgICAgZ2wuYWN0aXZlVGV4dHVyZShhY3RpdmVUZXh0dXJlKTsKICAgIH0KICB9Cn0KdmFyIGdsUHJlc2VydmVTdGF0ZSA9IFdHTFVQcmVzZXJ2ZUdMU3RhdGU7CnZhciBkaXN0b3J0aW9uVlMgPSBbJ2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uOycsICdhdHRyaWJ1dGUgdmVjMyB0ZXhDb29yZDsnLCAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDsnLCAndW5pZm9ybSB2ZWM0IHZpZXdwb3J0T2Zmc2V0U2NhbGVbMl07JywgJ3ZvaWQgbWFpbigpIHsnLCAnICB2ZWM0IHZpZXdwb3J0ID0gdmlld3BvcnRPZmZzZXRTY2FsZVtpbnQodGV4Q29vcmQueildOycsICcgIHZUZXhDb29yZCA9ICh0ZXhDb29yZC54eSAqIHZpZXdwb3J0Lnp3KSArIHZpZXdwb3J0Lnh5OycsICcgIGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCwgMS4wICk7JywgJ30nXS5qb2luKCdcbicpOwp2YXIgZGlzdG9ydGlvbkZTID0gWydwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLCAndW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZTsnLCAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDsnLCAndm9pZCBtYWluKCkgeycsICcgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChkaWZmdXNlLCB2VGV4Q29vcmQpOycsICd9J10uam9pbignXG4nKTsKZnVuY3Rpb24gQ2FyZGJvYXJkRGlzdG9ydGVyKGdsLCBjYXJkYm9hcmRVSSwgYnVmZmVyU2NhbGUsIGRpcnR5U3VibWl0RnJhbWVCaW5kaW5ncykgewogIHRoaXMuZ2wgPSBnbDsKICB0aGlzLmNhcmRib2FyZFVJID0gY2FyZGJvYXJkVUk7CiAgdGhpcy5idWZmZXJTY2FsZSA9IGJ1ZmZlclNjYWxlOwogIHRoaXMuZGlydHlTdWJtaXRGcmFtZUJpbmRpbmdzID0gZGlydHlTdWJtaXRGcmFtZUJpbmRpbmdzOwogIHRoaXMuY3R4QXR0cmlicyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7CiAgdGhpcy5tZXNoV2lkdGggPSAyMDsKICB0aGlzLm1lc2hIZWlnaHQgPSAyMDsKICB0aGlzLmJ1ZmZlcldpZHRoID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoOwogIHRoaXMuYnVmZmVySGVpZ2h0ID0gZ2wuZHJhd2luZ0J1ZmZlckhlaWdodDsKICB0aGlzLnJlYWxCaW5kRnJhbWVidWZmZXIgPSBnbC5iaW5kRnJhbWVidWZmZXI7CiAgdGhpcy5yZWFsRW5hYmxlID0gZ2wuZW5hYmxlOwogIHRoaXMucmVhbERpc2FibGUgPSBnbC5kaXNhYmxlOwogIHRoaXMucmVhbENvbG9yTWFzayA9IGdsLmNvbG9yTWFzazsKICB0aGlzLnJlYWxDbGVhckNvbG9yID0gZ2wuY2xlYXJDb2xvcjsKICB0aGlzLnJlYWxWaWV3cG9ydCA9IGdsLnZpZXdwb3J0OwogIGlmICghaXNJT1MoKSkgewogICAgdGhpcy5yZWFsQ2FudmFzV2lkdGggPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsLmNhbnZhcy5fX3Byb3RvX18sICd3aWR0aCcpOwogICAgdGhpcy5yZWFsQ2FudmFzSGVpZ2h0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbC5jYW52YXMuX19wcm90b19fLCAnaGVpZ2h0Jyk7CiAgfQogIHRoaXMuaXNQYXRjaGVkID0gZmFsc2U7CiAgdGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9IG51bGw7CiAgdGhpcy5jdWxsRmFjZSA9IGZhbHNlOwogIHRoaXMuZGVwdGhUZXN0ID0gZmFsc2U7CiAgdGhpcy5ibGVuZCA9IGZhbHNlOwogIHRoaXMuc2Npc3NvclRlc3QgPSBmYWxzZTsKICB0aGlzLnN0ZW5jaWxUZXN0ID0gZmFsc2U7CiAgdGhpcy52aWV3cG9ydCA9IFswLCAwLCAwLCAwXTsKICB0aGlzLmNvbG9yTWFzayA9IFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXTsKICB0aGlzLmNsZWFyQ29sb3IgPSBbMCwgMCwgMCwgMF07CiAgdGhpcy5hdHRyaWJzID0gewogICAgcG9zaXRpb246IDAsCiAgICB0ZXhDb29yZDogMQogIH07CiAgdGhpcy5wcm9ncmFtID0gbGlua1Byb2dyYW0oZ2wsIGRpc3RvcnRpb25WUywgZGlzdG9ydGlvbkZTLCB0aGlzLmF0dHJpYnMpOwogIHRoaXMudW5pZm9ybXMgPSBnZXRQcm9ncmFtVW5pZm9ybXMoZ2wsIHRoaXMucHJvZ3JhbSk7CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlID0gbmV3IEZsb2F0MzJBcnJheSg4KTsKICB0aGlzLnNldFRleHR1cmVCb3VuZHMoKTsKICB0aGlzLnZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpOwogIHRoaXMuaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICB0aGlzLmluZGV4Q291bnQgPSAwOwogIHRoaXMucmVuZGVyVGFyZ2V0ID0gZ2wuY3JlYXRlVGV4dHVyZSgpOwogIHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpOwogIHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyID0gbnVsbDsKICB0aGlzLmRlcHRoQnVmZmVyID0gbnVsbDsKICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBudWxsOwogIGlmICh0aGlzLmN0eEF0dHJpYnMuZGVwdGggJiYgdGhpcy5jdHhBdHRyaWJzLnN0ZW5jaWwpIHsKICAgIHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7CiAgfSBlbHNlIGlmICh0aGlzLmN0eEF0dHJpYnMuZGVwdGgpIHsKICAgIHRoaXMuZGVwdGhCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICB9IGVsc2UgaWYgKHRoaXMuY3R4QXR0cmlicy5zdGVuY2lsKSB7CiAgICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTsKICB9CiAgdGhpcy5wYXRjaCgpOwogIHRoaXMub25SZXNpemUoKTsKfQpDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGdsID0gdGhpcy5nbDsKICB0aGlzLnVucGF0Y2goKTsKICBnbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7CiAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMudmVydGV4QnVmZmVyKTsKICBnbC5kZWxldGVCdWZmZXIodGhpcy5pbmRleEJ1ZmZlcik7CiAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnJlbmRlclRhcmdldCk7CiAgZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5mcmFtZWJ1ZmZlcik7CiAgaWYgKHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyKSB7CiAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5kZXB0aFN0ZW5jaWxCdWZmZXIpOwogIH0KICBpZiAodGhpcy5kZXB0aEJ1ZmZlcikgewogICAgZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKHRoaXMuZGVwdGhCdWZmZXIpOwogIH0KICBpZiAodGhpcy5zdGVuY2lsQnVmZmVyKSB7CiAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5zdGVuY2lsQnVmZmVyKTsKICB9CiAgaWYgKHRoaXMuY2FyZGJvYXJkVUkpIHsKICAgIHRoaXMuY2FyZGJvYXJkVUkuZGVzdHJveSgpOwogIH0KfTsKQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZ2wgPSB0aGlzLmdsOwogIHZhciBzZWxmID0gdGhpczsKICB2YXIgZ2xTdGF0ZSA9IFtnbC5SRU5ERVJCVUZGRVJfQklORElORywgZ2wuVEVYVFVSRV9CSU5ESU5HXzJELCBnbC5URVhUVVJFMF07CiAgZ2xQcmVzZXJ2ZVN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbiAoZ2wpIHsKICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKGdsLCBnbC5GUkFNRUJVRkZFUiwgbnVsbCk7CiAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgewogICAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7CiAgICB9CiAgICBzZWxmLnJlYWxDb2xvck1hc2suY2FsbChnbCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7CiAgICBzZWxmLnJlYWxWaWV3cG9ydC5jYWxsKGdsLCAwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCAwLCAwLCAwLCAxKTsKICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpOwogICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmZyYW1lYnVmZmVyKTsKICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHNlbGYucmVuZGVyVGFyZ2V0KTsKICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgc2VsZi5jdHhBdHRyaWJzLmFscGhhID8gZ2wuUkdCQSA6IGdsLlJHQiwgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQsIDAsIHNlbGYuY3R4QXR0cmlicy5hbHBoYSA/IGdsLlJHQkEgOiBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpOwogICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7CiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTsKICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpOwogICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7CiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHNlbGYucmVuZGVyVGFyZ2V0LCAwKTsKICAgIGlmIChzZWxmLmN0eEF0dHJpYnMuZGVwdGggJiYgc2VsZi5jdHhBdHRyaWJzLnN0ZW5jaWwpIHsKICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHNlbGYuZGVwdGhTdGVuY2lsQnVmZmVyKTsKICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUwsIHNlbGYuYnVmZmVyV2lkdGgsIHNlbGYuYnVmZmVySGVpZ2h0KTsKICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoU3RlbmNpbEJ1ZmZlcik7CiAgICB9IGVsc2UgaWYgKHNlbGYuY3R4QXR0cmlicy5kZXB0aCkgewogICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5kZXB0aEJ1ZmZlcik7CiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQpOwogICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoQnVmZmVyKTsKICAgIH0gZWxzZSBpZiAoc2VsZi5jdHhBdHRyaWJzLnN0ZW5jaWwpIHsKICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHNlbGYuc3RlbmNpbEJ1ZmZlcik7CiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5TVEVOQ0lMX0lOREVYOCwgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQpOwogICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHNlbGYuc3RlbmNpbEJ1ZmZlcik7CiAgICB9CiAgICBpZiAoIWdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpID09PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkgewogICAgICBjb25zb2xlLmVycm9yKCdGcmFtZWJ1ZmZlciBpbmNvbXBsZXRlIScpOwogICAgfQogICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTsKICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7CiAgICAgIHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5TQ0lTU09SX1RFU1QpOwogICAgfQogICAgc2VsZi5yZWFsQ29sb3JNYXNrLmFwcGx5KGdsLCBzZWxmLmNvbG9yTWFzayk7CiAgICBzZWxmLnJlYWxWaWV3cG9ydC5hcHBseShnbCwgc2VsZi52aWV3cG9ydCk7CiAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmFwcGx5KGdsLCBzZWxmLmNsZWFyQ29sb3IpOwogIH0pOwogIGlmICh0aGlzLmNhcmRib2FyZFVJKSB7CiAgICB0aGlzLmNhcmRib2FyZFVJLm9uUmVzaXplKCk7CiAgfQp9OwpDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLmlzUGF0Y2hlZCkgewogICAgcmV0dXJuOwogIH0KICB2YXIgc2VsZiA9IHRoaXM7CiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzOwogIHZhciBnbCA9IHRoaXMuZ2w7CiAgaWYgKCFpc0lPUygpKSB7CiAgICBjYW52YXMud2lkdGggPSBnZXRTY3JlZW5XaWR0aCgpICogdGhpcy5idWZmZXJTY2FsZTsKICAgIGNhbnZhcy5oZWlnaHQgPSBnZXRTY3JlZW5IZWlnaHQoKSAqIHRoaXMuYnVmZmVyU2NhbGU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnd2lkdGgnLCB7CiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVyV2lkdGg7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgICAgc2VsZi5idWZmZXJXaWR0aCA9IHZhbHVlOwogICAgICAgIHNlbGYucmVhbENhbnZhc1dpZHRoLnNldC5jYWxsKGNhbnZhcywgdmFsdWUpOwogICAgICAgIHNlbGYub25SZXNpemUoKTsKICAgICAgfQogICAgfSk7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnaGVpZ2h0JywgewogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlckhlaWdodDsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgICBzZWxmLmJ1ZmZlckhlaWdodCA9IHZhbHVlOwogICAgICAgIHNlbGYucmVhbENhbnZhc0hlaWdodC5zZXQuY2FsbChjYW52YXMsIHZhbHVlKTsKICAgICAgICBzZWxmLm9uUmVzaXplKCk7CiAgICAgIH0KICAgIH0pOwogIH0KICB0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpOwogIGlmICh0aGlzLmxhc3RCb3VuZEZyYW1lYnVmZmVyID09IG51bGwpIHsKICAgIHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPSB0aGlzLmZyYW1lYnVmZmVyOwogICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpOwogIH0KICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uICh0YXJnZXQsIGZyYW1lYnVmZmVyKSB7CiAgICBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXIgPyBmcmFtZWJ1ZmZlciA6IHNlbGYuZnJhbWVidWZmZXI7CiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgdGFyZ2V0LCBzZWxmLmxhc3RCb3VuZEZyYW1lYnVmZmVyKTsKICB9OwogIHRoaXMuY3VsbEZhY2UgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQ1VMTF9GQUNFKTsKICB0aGlzLmRlcHRoVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5ERVBUSF9URVNUKTsKICB0aGlzLmJsZW5kID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkJMRU5EKTsKICB0aGlzLnNjaXNzb3JUZXN0ID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlNDSVNTT1JfVEVTVCk7CiAgdGhpcy5zdGVuY2lsVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5TVEVOQ0lMX1RFU1QpOwogIGdsLmVuYWJsZSA9IGZ1bmN0aW9uIChwbmFtZSkgewogICAgc3dpdGNoIChwbmFtZSkgewogICAgICBjYXNlIGdsLkNVTExfRkFDRToKICAgICAgICBzZWxmLmN1bGxGYWNlID0gdHJ1ZTticmVhazsKICAgICAgY2FzZSBnbC5ERVBUSF9URVNUOgogICAgICAgIHNlbGYuZGVwdGhUZXN0ID0gdHJ1ZTticmVhazsKICAgICAgY2FzZSBnbC5CTEVORDoKICAgICAgICBzZWxmLmJsZW5kID0gdHJ1ZTticmVhazsKICAgICAgY2FzZSBnbC5TQ0lTU09SX1RFU1Q6CiAgICAgICAgc2VsZi5zY2lzc29yVGVzdCA9IHRydWU7YnJlYWs7CiAgICAgIGNhc2UgZ2wuU1RFTkNJTF9URVNUOgogICAgICAgIHNlbGYuc3RlbmNpbFRlc3QgPSB0cnVlO2JyZWFrOwogICAgfQogICAgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIHBuYW1lKTsKICB9OwogIGdsLmRpc2FibGUgPSBmdW5jdGlvbiAocG5hbWUpIHsKICAgIHN3aXRjaCAocG5hbWUpIHsKICAgICAgY2FzZSBnbC5DVUxMX0ZBQ0U6CiAgICAgICAgc2VsZi5jdWxsRmFjZSA9IGZhbHNlO2JyZWFrOwogICAgICBjYXNlIGdsLkRFUFRIX1RFU1Q6CiAgICAgICAgc2VsZi5kZXB0aFRlc3QgPSBmYWxzZTticmVhazsKICAgICAgY2FzZSBnbC5CTEVORDoKICAgICAgICBzZWxmLmJsZW5kID0gZmFsc2U7YnJlYWs7CiAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOgogICAgICAgIHNlbGYuc2Npc3NvclRlc3QgPSBmYWxzZTticmVhazsKICAgICAgY2FzZSBnbC5TVEVOQ0lMX1RFU1Q6CiAgICAgICAgc2VsZi5zdGVuY2lsVGVzdCA9IGZhbHNlO2JyZWFrOwogICAgfQogICAgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBwbmFtZSk7CiAgfTsKICB0aGlzLmNvbG9yTWFzayA9IGdsLmdldFBhcmFtZXRlcihnbC5DT0xPUl9XUklURU1BU0spOwogIGdsLmNvbG9yTWFzayA9IGZ1bmN0aW9uIChyLCBnLCBiLCBhKSB7CiAgICBzZWxmLmNvbG9yTWFza1swXSA9IHI7CiAgICBzZWxmLmNvbG9yTWFza1sxXSA9IGc7CiAgICBzZWxmLmNvbG9yTWFza1syXSA9IGI7CiAgICBzZWxmLmNvbG9yTWFza1szXSA9IGE7CiAgICBzZWxmLnJlYWxDb2xvck1hc2suY2FsbChnbCwgciwgZywgYiwgYSk7CiAgfTsKICB0aGlzLmNsZWFyQ29sb3IgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQ09MT1JfQ0xFQVJfVkFMVUUpOwogIGdsLmNsZWFyQ29sb3IgPSBmdW5jdGlvbiAociwgZywgYiwgYSkgewogICAgc2VsZi5jbGVhckNvbG9yWzBdID0gcjsKICAgIHNlbGYuY2xlYXJDb2xvclsxXSA9IGc7CiAgICBzZWxmLmNsZWFyQ29sb3JbMl0gPSBiOwogICAgc2VsZi5jbGVhckNvbG9yWzNdID0gYTsKICAgIHNlbGYucmVhbENsZWFyQ29sb3IuY2FsbChnbCwgciwgZywgYiwgYSk7CiAgfTsKICB0aGlzLnZpZXdwb3J0ID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlZJRVdQT1JUKTsKICBnbC52aWV3cG9ydCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7CiAgICBzZWxmLnZpZXdwb3J0WzBdID0geDsKICAgIHNlbGYudmlld3BvcnRbMV0gPSB5OwogICAgc2VsZi52aWV3cG9ydFsyXSA9IHc7CiAgICBzZWxmLnZpZXdwb3J0WzNdID0gaDsKICAgIHNlbGYucmVhbFZpZXdwb3J0LmNhbGwoZ2wsIHgsIHksIHcsIGgpOwogIH07CiAgdGhpcy5pc1BhdGNoZWQgPSB0cnVlOwogIHNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGNhbnZhcyk7Cn07CkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUudW5wYXRjaCA9IGZ1bmN0aW9uICgpIHsKICBpZiAoIXRoaXMuaXNQYXRjaGVkKSB7CiAgICByZXR1cm47CiAgfQogIHZhciBnbCA9IHRoaXMuZ2w7CiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzOwogIGlmICghaXNJT1MoKSkgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ3dpZHRoJywgdGhpcy5yZWFsQ2FudmFzV2lkdGgpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ2hlaWdodCcsIHRoaXMucmVhbENhbnZhc0hlaWdodCk7CiAgfQogIGNhbnZhcy53aWR0aCA9IHRoaXMuYnVmZmVyV2lkdGg7CiAgY2FudmFzLmhlaWdodCA9IHRoaXMuYnVmZmVySGVpZ2h0OwogIGdsLmJpbmRGcmFtZWJ1ZmZlciA9IHRoaXMucmVhbEJpbmRGcmFtZWJ1ZmZlcjsKICBnbC5lbmFibGUgPSB0aGlzLnJlYWxFbmFibGU7CiAgZ2wuZGlzYWJsZSA9IHRoaXMucmVhbERpc2FibGU7CiAgZ2wuY29sb3JNYXNrID0gdGhpcy5yZWFsQ29sb3JNYXNrOwogIGdsLmNsZWFyQ29sb3IgPSB0aGlzLnJlYWxDbGVhckNvbG9yOwogIGdsLnZpZXdwb3J0ID0gdGhpcy5yZWFsVmlld3BvcnQ7CiAgaWYgKHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPT0gdGhpcy5mcmFtZWJ1ZmZlcikgewogICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTsKICB9CiAgdGhpcy5pc1BhdGNoZWQgPSBmYWxzZTsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIHNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGNhbnZhcyk7CiAgfSwgMSk7Cn07CkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuc2V0VGV4dHVyZUJvdW5kcyA9IGZ1bmN0aW9uIChsZWZ0Qm91bmRzLCByaWdodEJvdW5kcykgewogIGlmICghbGVmdEJvdW5kcykgewogICAgbGVmdEJvdW5kcyA9IFswLCAwLCAwLjUsIDFdOwogIH0KICBpZiAoIXJpZ2h0Qm91bmRzKSB7CiAgICByaWdodEJvdW5kcyA9IFswLjUsIDAsIDAuNSwgMV07CiAgfQogIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVswXSA9IGxlZnRCb3VuZHNbMF07CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzFdID0gbGVmdEJvdW5kc1sxXTsKICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMl0gPSBsZWZ0Qm91bmRzWzJdOwogIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVszXSA9IGxlZnRCb3VuZHNbM107CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzRdID0gcmlnaHRCb3VuZHNbMF07CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzVdID0gcmlnaHRCb3VuZHNbMV07CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzZdID0gcmlnaHRCb3VuZHNbMl07CiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzddID0gcmlnaHRCb3VuZHNbM107Cn07CkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGdsID0gdGhpcy5nbDsKICB2YXIgc2VsZiA9IHRoaXM7CiAgdmFyIGdsU3RhdGUgPSBbXTsKICBpZiAoIXRoaXMuZGlydHlTdWJtaXRGcmFtZUJpbmRpbmdzKSB7CiAgICBnbFN0YXRlLnB1c2goZ2wuQ1VSUkVOVF9QUk9HUkFNLCBnbC5BUlJBWV9CVUZGRVJfQklORElORywgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORywgZ2wuVEVYVFVSRV9CSU5ESU5HXzJELCBnbC5URVhUVVJFMCk7CiAgfQogIGdsUHJlc2VydmVTdGF0ZShnbCwgZ2xTdGF0ZSwgZnVuY3Rpb24gKGdsKSB7CiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIG51bGwpOwogICAgaWYgKHNlbGYuY3VsbEZhY2UpIHsKICAgICAgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5DVUxMX0ZBQ0UpOwogICAgfQogICAgaWYgKHNlbGYuZGVwdGhUZXN0KSB7CiAgICAgIHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuREVQVEhfVEVTVCk7CiAgICB9CiAgICBpZiAoc2VsZi5ibGVuZCkgewogICAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLkJMRU5EKTsKICAgIH0KICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7CiAgICAgIHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuU0NJU1NPUl9URVNUKTsKICAgIH0KICAgIGlmIChzZWxmLnN0ZW5jaWxUZXN0KSB7CiAgICAgIHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuU1RFTkNJTF9URVNUKTsKICAgIH0KICAgIHNlbGYucmVhbENvbG9yTWFzay5jYWxsKGdsLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTsKICAgIHNlbGYucmVhbFZpZXdwb3J0LmNhbGwoZ2wsIDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7CiAgICBpZiAoc2VsZi5jdHhBdHRyaWJzLmFscGhhIHx8IGlzSU9TKCkpIHsKICAgICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCAwLCAwLCAwLCAxKTsKICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7CiAgICB9CiAgICBnbC51c2VQcm9ncmFtKHNlbGYucHJvZ3JhbSk7CiAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBzZWxmLmluZGV4QnVmZmVyKTsKICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7CiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzZWxmLmF0dHJpYnMucG9zaXRpb24pOwogICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2VsZi5hdHRyaWJzLnRleENvb3JkKTsKICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2VsZi5hdHRyaWJzLnBvc2l0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDIwLCAwKTsKICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2VsZi5hdHRyaWJzLnRleENvb3JkLCAzLCBnbC5GTE9BVCwgZmFsc2UsIDIwLCA4KTsKICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApOwogICAgZ2wudW5pZm9ybTFpKHNlbGYudW5pZm9ybXMuZGlmZnVzZSwgMCk7CiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzZWxmLnJlbmRlclRhcmdldCk7CiAgICBnbC51bmlmb3JtNGZ2KHNlbGYudW5pZm9ybXMudmlld3BvcnRPZmZzZXRTY2FsZSwgc2VsZi52aWV3cG9ydE9mZnNldFNjYWxlKTsKICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHNlbGYuaW5kZXhDb3VudCwgZ2wuVU5TSUdORURfU0hPUlQsIDApOwogICAgaWYgKHNlbGYuY2FyZGJvYXJkVUkpIHsKICAgICAgc2VsZi5jYXJkYm9hcmRVSS5yZW5kZXJOb1N0YXRlKCk7CiAgICB9CiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChzZWxmLmdsLCBnbC5GUkFNRUJVRkZFUiwgc2VsZi5mcmFtZWJ1ZmZlcik7CiAgICBpZiAoIXNlbGYuY3R4QXR0cmlicy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIpIHsKICAgICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCAwLCAwLCAwLCAwKTsKICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7CiAgICB9CiAgICBpZiAoIXNlbGYuZGlydHlTdWJtaXRGcmFtZUJpbmRpbmdzKSB7CiAgICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKGdsLCBnbC5GUkFNRUJVRkZFUiwgc2VsZi5sYXN0Qm91bmRGcmFtZWJ1ZmZlcik7CiAgICB9CiAgICBpZiAoc2VsZi5jdWxsRmFjZSkgewogICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuQ1VMTF9GQUNFKTsKICAgIH0KICAgIGlmIChzZWxmLmRlcHRoVGVzdCkgewogICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuREVQVEhfVEVTVCk7CiAgICB9CiAgICBpZiAoc2VsZi5ibGVuZCkgewogICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuQkxFTkQpOwogICAgfQogICAgaWYgKHNlbGYuc2Npc3NvclRlc3QpIHsKICAgICAgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7CiAgICB9CiAgICBpZiAoc2VsZi5zdGVuY2lsVGVzdCkgewogICAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuU1RFTkNJTF9URVNUKTsKICAgIH0KICAgIHNlbGYucmVhbENvbG9yTWFzay5hcHBseShnbCwgc2VsZi5jb2xvck1hc2spOwogICAgc2VsZi5yZWFsVmlld3BvcnQuYXBwbHkoZ2wsIHNlbGYudmlld3BvcnQpOwogICAgaWYgKHNlbGYuY3R4QXR0cmlicy5hbHBoYSB8fCAhc2VsZi5jdHhBdHRyaWJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlcikgewogICAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmFwcGx5KGdsLCBzZWxmLmNsZWFyQ29sb3IpOwogICAgfQogIH0pOwogIGlmIChpc0lPUygpKSB7CiAgICB2YXIgY2FudmFzID0gZ2wuY2FudmFzOwogICAgaWYgKGNhbnZhcy53aWR0aCAhPSBzZWxmLmJ1ZmZlcldpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT0gc2VsZi5idWZmZXJIZWlnaHQpIHsKICAgICAgc2VsZi5idWZmZXJXaWR0aCA9IGNhbnZhcy53aWR0aDsKICAgICAgc2VsZi5idWZmZXJIZWlnaHQgPSBjYW52YXMuaGVpZ2h0OwogICAgICBzZWxmLm9uUmVzaXplKCk7CiAgICB9CiAgfQp9OwpDYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnVwZGF0ZURldmljZUluZm8gPSBmdW5jdGlvbiAoZGV2aWNlSW5mbykgewogIHZhciBnbCA9IHRoaXMuZ2w7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHZhciBnbFN0YXRlID0gW2dsLkFSUkFZX0JVRkZFUl9CSU5ESU5HLCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HXTsKICBnbFByZXNlcnZlU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uIChnbCkgewogICAgdmFyIHZlcnRpY2VzID0gc2VsZi5jb21wdXRlTWVzaFZlcnRpY2VzXyhzZWxmLm1lc2hXaWR0aCwgc2VsZi5tZXNoSGVpZ2h0LCBkZXZpY2VJbmZvKTsKICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBzZWxmLnZlcnRleEJ1ZmZlcik7CiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXMsIGdsLlNUQVRJQ19EUkFXKTsKICAgIGlmICghc2VsZi5pbmRleENvdW50KSB7CiAgICAgIHZhciBpbmRpY2VzID0gc2VsZi5jb21wdXRlTWVzaEluZGljZXNfKHNlbGYubWVzaFdpZHRoLCBzZWxmLm1lc2hIZWlnaHQpOwogICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBzZWxmLmluZGV4QnVmZmVyKTsKICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kaWNlcywgZ2wuU1RBVElDX0RSQVcpOwogICAgICBzZWxmLmluZGV4Q291bnQgPSBpbmRpY2VzLmxlbmd0aDsKICAgIH0KICB9KTsKfTsKQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5jb21wdXRlTWVzaFZlcnRpY2VzXyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBkZXZpY2VJbmZvKSB7CiAgdmFyIHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyICogd2lkdGggKiBoZWlnaHQgKiA1KTsKICB2YXIgbGVuc0ZydXN0dW0gPSBkZXZpY2VJbmZvLmdldExlZnRFeWVWaXNpYmxlVGFuQW5nbGVzKCk7CiAgdmFyIG5vTGVuc0ZydXN0dW0gPSBkZXZpY2VJbmZvLmdldExlZnRFeWVOb0xlbnNUYW5BbmdsZXMoKTsKICB2YXIgdmlld3BvcnQgPSBkZXZpY2VJbmZvLmdldExlZnRFeWVWaXNpYmxlU2NyZWVuUmVjdChub0xlbnNGcnVzdHVtKTsKICB2YXIgdmlkeCA9IDA7CiAgZm9yICh2YXIgZSA9IDA7IGUgPCAyOyBlKyspIHsKICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVpZ2h0OyBqKyspIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aDsgaSsrLCB2aWR4KyspIHsKICAgICAgICB2YXIgdSA9IGkgLyAod2lkdGggLSAxKTsKICAgICAgICB2YXIgdiA9IGogLyAoaGVpZ2h0IC0gMSk7CiAgICAgICAgdmFyIHMgPSB1OwogICAgICAgIHZhciB0ID0gdjsKICAgICAgICB2YXIgeCA9IGxlcnAobGVuc0ZydXN0dW1bMF0sIGxlbnNGcnVzdHVtWzJdLCB1KTsKICAgICAgICB2YXIgeSA9IGxlcnAobGVuc0ZydXN0dW1bM10sIGxlbnNGcnVzdHVtWzFdLCB2KTsKICAgICAgICB2YXIgZCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsKICAgICAgICB2YXIgciA9IGRldmljZUluZm8uZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShkKTsKICAgICAgICB2YXIgcCA9IHggKiByIC8gZDsKICAgICAgICB2YXIgcSA9IHkgKiByIC8gZDsKICAgICAgICB1ID0gKHAgLSBub0xlbnNGcnVzdHVtWzBdKSAvIChub0xlbnNGcnVzdHVtWzJdIC0gbm9MZW5zRnJ1c3R1bVswXSk7CiAgICAgICAgdiA9IChxIC0gbm9MZW5zRnJ1c3R1bVszXSkgLyAobm9MZW5zRnJ1c3R1bVsxXSAtIG5vTGVuc0ZydXN0dW1bM10pOwogICAgICAgIHUgPSAodmlld3BvcnQueCArIHUgKiB2aWV3cG9ydC53aWR0aCAtIDAuNSkgKiAyLjA7CiAgICAgICAgdiA9ICh2aWV3cG9ydC55ICsgdiAqIHZpZXdwb3J0LmhlaWdodCAtIDAuNSkgKiAyLjA7CiAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAwXSA9IHU7CiAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAxXSA9IHY7CiAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAyXSA9IHM7CiAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyAzXSA9IHQ7CiAgICAgICAgdmVydGljZXNbdmlkeCAqIDUgKyA0XSA9IGU7CiAgICAgIH0KICAgIH0KICAgIHZhciB3ID0gbGVuc0ZydXN0dW1bMl0gLSBsZW5zRnJ1c3R1bVswXTsKICAgIGxlbnNGcnVzdHVtWzBdID0gLSh3ICsgbGVuc0ZydXN0dW1bMF0pOwogICAgbGVuc0ZydXN0dW1bMl0gPSB3IC0gbGVuc0ZydXN0dW1bMl07CiAgICB3ID0gbm9MZW5zRnJ1c3R1bVsyXSAtIG5vTGVuc0ZydXN0dW1bMF07CiAgICBub0xlbnNGcnVzdHVtWzBdID0gLSh3ICsgbm9MZW5zRnJ1c3R1bVswXSk7CiAgICBub0xlbnNGcnVzdHVtWzJdID0gdyAtIG5vTGVuc0ZydXN0dW1bMl07CiAgICB2aWV3cG9ydC54ID0gMSAtICh2aWV3cG9ydC54ICsgdmlld3BvcnQud2lkdGgpOwogIH0KICByZXR1cm4gdmVydGljZXM7Cn07CkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuY29tcHV0ZU1lc2hJbmRpY2VzXyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7CiAgdmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoMiAqICh3aWR0aCAtIDEpICogKGhlaWdodCAtIDEpICogNik7CiAgdmFyIGhhbGZ3aWR0aCA9IHdpZHRoIC8gMjsKICB2YXIgaGFsZmhlaWdodCA9IGhlaWdodCAvIDI7CiAgdmFyIHZpZHggPSAwOwogIHZhciBpaWR4ID0gMDsKICBmb3IgKHZhciBlID0gMDsgZSA8IDI7IGUrKykgewogICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZWlnaHQ7IGorKykgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpKyssIHZpZHgrKykgewogICAgICAgIGlmIChpID09IDAgfHwgaiA9PSAwKSBjb250aW51ZTsKICAgICAgICBpZiAoaSA8PSBoYWxmd2lkdGggPT0gaiA8PSBoYWxmaGVpZ2h0KSB7CiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4OwogICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoIC0gMTsKICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDsKICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aCAtIDE7CiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4OwogICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSAxOwogICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoOwogICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeDsKICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDsKICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSAxOwogICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIHdpZHRoIC0gMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGluZGljZXM7Cn07CkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXyA9IGZ1bmN0aW9uIChwcm90bywgYXR0ck5hbWUpIHsKICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGF0dHJOYW1lKTsKICBpZiAoZGVzY3JpcHRvci5nZXQgPT09IHVuZGVmaW5lZCB8fCBkZXNjcmlwdG9yLnNldCA9PT0gdW5kZWZpbmVkKSB7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlOwogICAgZGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7CiAgICB9OwogICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiAodmFsKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCB2YWwpOwogICAgfTsKICB9CiAgcmV0dXJuIGRlc2NyaXB0b3I7Cn07CnZhciB1aVZTID0gWydhdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjsnLCAndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXQ7JywgJ3ZvaWQgbWFpbigpIHsnLCAnICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXQgKiB2ZWM0KCBwb3NpdGlvbiwgLTEuMCwgMS4wICk7JywgJ30nXS5qb2luKCdcbicpOwp2YXIgdWlGUyA9IFsncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JywgJ3VuaWZvcm0gdmVjNCBjb2xvcjsnLCAndm9pZCBtYWluKCkgeycsICcgIGdsX0ZyYWdDb2xvciA9IGNvbG9yOycsICd9J10uam9pbignXG4nKTsKdmFyIERFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLjA7CnZhciBrQW5nbGVQZXJHZWFyU2VjdGlvbiA9IDYwOwp2YXIga091dGVyUmltRW5kQW5nbGUgPSAxMjsKdmFyIGtJbm5lclJpbUJlZ2luQW5nbGUgPSAyMDsKdmFyIGtPdXRlclJhZGl1cyA9IDE7CnZhciBrTWlkZGxlUmFkaXVzID0gMC43NTsKdmFyIGtJbm5lclJhZGl1cyA9IDAuMzEyNTsKdmFyIGtDZW50ZXJMaW5lVGhpY2tuZXNzRHAgPSA0Owp2YXIga0J1dHRvbldpZHRoRHAgPSAyODsKdmFyIGtUb3VjaFNsb3BGYWN0b3IgPSAxLjU7CmZ1bmN0aW9uIENhcmRib2FyZFVJKGdsKSB7CiAgdGhpcy5nbCA9IGdsOwogIHRoaXMuYXR0cmlicyA9IHsKICAgIHBvc2l0aW9uOiAwCiAgfTsKICB0aGlzLnByb2dyYW0gPSBsaW5rUHJvZ3JhbShnbCwgdWlWUywgdWlGUywgdGhpcy5hdHRyaWJzKTsKICB0aGlzLnVuaWZvcm1zID0gZ2V0UHJvZ3JhbVVuaWZvcm1zKGdsLCB0aGlzLnByb2dyYW0pOwogIHRoaXMudmVydGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7CiAgdGhpcy5nZWFyT2Zmc2V0ID0gMDsKICB0aGlzLmdlYXJWZXJ0ZXhDb3VudCA9IDA7CiAgdGhpcy5hcnJvd09mZnNldCA9IDA7CiAgdGhpcy5hcnJvd1ZlcnRleENvdW50ID0gMDsKICB0aGlzLnByb2pNYXQgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICB0aGlzLmxpc3RlbmVyID0gbnVsbDsKICB0aGlzLm9uUmVzaXplKCk7Cn0KQ2FyZGJvYXJkVUkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGdsID0gdGhpcy5nbDsKICBpZiAodGhpcy5saXN0ZW5lcikgewogICAgZ2wuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5saXN0ZW5lciwgZmFsc2UpOwogIH0KICBnbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7CiAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMudmVydGV4QnVmZmVyKTsKfTsKQ2FyZGJvYXJkVUkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIChvcHRpb25zQ2FsbGJhY2ssIGJhY2tDYWxsYmFjaykgewogIHZhciBjYW52YXMgPSB0aGlzLmdsLmNhbnZhczsKICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICB2YXIgbWlkbGluZSA9IGNhbnZhcy5jbGllbnRXaWR0aCAvIDI7CiAgICB2YXIgYnV0dG9uU2l6ZSA9IGtCdXR0b25XaWR0aERwICoga1RvdWNoU2xvcEZhY3RvcjsKICAgIGlmIChldmVudC5jbGllbnRYID4gbWlkbGluZSAtIGJ1dHRvblNpemUgJiYgZXZlbnQuY2xpZW50WCA8IG1pZGxpbmUgKyBidXR0b25TaXplICYmIGV2ZW50LmNsaWVudFkgPiBjYW52YXMuY2xpZW50SGVpZ2h0IC0gYnV0dG9uU2l6ZSkgewogICAgICBvcHRpb25zQ2FsbGJhY2soZXZlbnQpOwogICAgfQogICAgZWxzZSBpZiAoZXZlbnQuY2xpZW50WCA8IGJ1dHRvblNpemUgJiYgZXZlbnQuY2xpZW50WSA8IGJ1dHRvblNpemUpIHsKICAgICAgICBiYWNrQ2FsbGJhY2soZXZlbnQpOwogICAgICB9CiAgfTsKICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmxpc3RlbmVyLCBmYWxzZSk7Cn07CkNhcmRib2FyZFVJLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZ2wgPSB0aGlzLmdsOwogIHZhciBzZWxmID0gdGhpczsKICB2YXIgZ2xTdGF0ZSA9IFtnbC5BUlJBWV9CVUZGRVJfQklORElOR107CiAgZ2xQcmVzZXJ2ZVN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbiAoZ2wpIHsKICAgIHZhciB2ZXJ0aWNlcyA9IFtdOwogICAgdmFyIG1pZGxpbmUgPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGggLyAyOwogICAgdmFyIHBoeXNpY2FsUGl4ZWxzID0gTWF0aC5tYXgoc2NyZWVuLndpZHRoLCBzY3JlZW4uaGVpZ2h0KSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvOwogICAgdmFyIHNjYWxpbmdSYXRpbyA9IGdsLmRyYXdpbmdCdWZmZXJXaWR0aCAvIHBoeXNpY2FsUGl4ZWxzOwogICAgdmFyIGRwcyA9IHNjYWxpbmdSYXRpbyAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvOwogICAgdmFyIGxpbmVXaWR0aCA9IGtDZW50ZXJMaW5lVGhpY2tuZXNzRHAgKiBkcHMgLyAyOwogICAgdmFyIGJ1dHRvblNpemUgPSBrQnV0dG9uV2lkdGhEcCAqIGtUb3VjaFNsb3BGYWN0b3IgKiBkcHM7CiAgICB2YXIgYnV0dG9uU2NhbGUgPSBrQnV0dG9uV2lkdGhEcCAqIGRwcyAvIDI7CiAgICB2YXIgYnV0dG9uQm9yZGVyID0gKGtCdXR0b25XaWR0aERwICoga1RvdWNoU2xvcEZhY3RvciAtIGtCdXR0b25XaWR0aERwKSAqIGRwczsKICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSAtIGxpbmVXaWR0aCwgYnV0dG9uU2l6ZSk7CiAgICB2ZXJ0aWNlcy5wdXNoKG1pZGxpbmUgLSBsaW5lV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgdmVydGljZXMucHVzaChtaWRsaW5lICsgbGluZVdpZHRoLCBidXR0b25TaXplKTsKICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSArIGxpbmVXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7CiAgICBzZWxmLmdlYXJPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAyOwogICAgZnVuY3Rpb24gYWRkR2VhclNlZ21lbnQodGhldGEsIHIpIHsKICAgICAgdmFyIGFuZ2xlID0gKDkwIC0gdGhldGEpICogREVHMlJBRDsKICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgIHZhciB5ID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICB2ZXJ0aWNlcy5wdXNoKGtJbm5lclJhZGl1cyAqIHggKiBidXR0b25TY2FsZSArIG1pZGxpbmUsIGtJbm5lclJhZGl1cyAqIHkgKiBidXR0b25TY2FsZSArIGJ1dHRvblNjYWxlKTsKICAgICAgdmVydGljZXMucHVzaChyICogeCAqIGJ1dHRvblNjYWxlICsgbWlkbGluZSwgciAqIHkgKiBidXR0b25TY2FsZSArIGJ1dHRvblNjYWxlKTsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IDY7IGkrKykgewogICAgICB2YXIgc2VnbWVudFRoZXRhID0gaSAqIGtBbmdsZVBlckdlYXJTZWN0aW9uOwogICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEsIGtPdXRlclJhZGl1cyk7CiAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIGtPdXRlclJpbUVuZEFuZ2xlLCBrT3V0ZXJSYWRpdXMpOwogICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyBrSW5uZXJSaW1CZWdpbkFuZ2xlLCBrTWlkZGxlUmFkaXVzKTsKICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhICsgKGtBbmdsZVBlckdlYXJTZWN0aW9uIC0ga0lubmVyUmltQmVnaW5BbmdsZSksIGtNaWRkbGVSYWRpdXMpOwogICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyAoa0FuZ2xlUGVyR2VhclNlY3Rpb24gLSBrT3V0ZXJSaW1FbmRBbmdsZSksIGtPdXRlclJhZGl1cyk7CiAgICB9CiAgICBzZWxmLmdlYXJWZXJ0ZXhDb3VudCA9IHZlcnRpY2VzLmxlbmd0aCAvIDIgLSBzZWxmLmdlYXJPZmZzZXQ7CiAgICBzZWxmLmFycm93T2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMjsKICAgIGZ1bmN0aW9uIGFkZEFycm93VmVydGV4KHgsIHkpIHsKICAgICAgdmVydGljZXMucHVzaChidXR0b25Cb3JkZXIgKyB4LCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0IC0gYnV0dG9uQm9yZGVyIC0geSk7CiAgICB9CiAgICB2YXIgYW5nbGVkTGluZVdpZHRoID0gbGluZVdpZHRoIC8gTWF0aC5zaW4oNDUgKiBERUcyUkFEKTsKICAgIGFkZEFycm93VmVydGV4KDAsIGJ1dHRvblNjYWxlKTsKICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlLCAwKTsKICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlICsgYW5nbGVkTGluZVdpZHRoLCBhbmdsZWRMaW5lV2lkdGgpOwogICAgYWRkQXJyb3dWZXJ0ZXgoYW5nbGVkTGluZVdpZHRoLCBidXR0b25TY2FsZSArIGFuZ2xlZExpbmVXaWR0aCk7CiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlIC0gYW5nbGVkTGluZVdpZHRoKTsKICAgIGFkZEFycm93VmVydGV4KDAsIGJ1dHRvblNjYWxlKTsKICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlLCBidXR0b25TY2FsZSAqIDIpOwogICAgYWRkQXJyb3dWZXJ0ZXgoYnV0dG9uU2NhbGUgKyBhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlICogMiAtIGFuZ2xlZExpbmVXaWR0aCk7CiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlIC0gYW5nbGVkTGluZVdpZHRoKTsKICAgIGFkZEFycm93VmVydGV4KDAsIGJ1dHRvblNjYWxlKTsKICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgLSBsaW5lV2lkdGgpOwogICAgYWRkQXJyb3dWZXJ0ZXgoa0J1dHRvbldpZHRoRHAgKiBkcHMsIGJ1dHRvblNjYWxlIC0gbGluZVdpZHRoKTsKICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgKyBsaW5lV2lkdGgpOwogICAgYWRkQXJyb3dWZXJ0ZXgoa0J1dHRvbldpZHRoRHAgKiBkcHMsIGJ1dHRvblNjYWxlICsgbGluZVdpZHRoKTsKICAgIHNlbGYuYXJyb3dWZXJ0ZXhDb3VudCA9IHZlcnRpY2VzLmxlbmd0aCAvIDIgLSBzZWxmLmFycm93T2Zmc2V0OwogICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHNlbGYudmVydGV4QnVmZmVyKTsKICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpOwogIH0pOwp9OwpDYXJkYm9hcmRVSS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkgewogIHZhciBnbCA9IHRoaXMuZ2w7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHZhciBnbFN0YXRlID0gW2dsLkNVTExfRkFDRSwgZ2wuREVQVEhfVEVTVCwgZ2wuQkxFTkQsIGdsLlNDSVNTT1JfVEVTVCwgZ2wuU1RFTkNJTF9URVNULCBnbC5DT0xPUl9XUklURU1BU0ssIGdsLlZJRVdQT1JULCBnbC5DVVJSRU5UX1BST0dSQU0sIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HXTsKICBnbFByZXNlcnZlU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uIChnbCkgewogICAgZ2wuZGlzYWJsZShnbC5DVUxMX0ZBQ0UpOwogICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTsKICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpOwogICAgZ2wuZGlzYWJsZShnbC5TQ0lTU09SX1RFU1QpOwogICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpOwogICAgZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpOwogICAgZ2wudmlld3BvcnQoMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTsKICAgIHNlbGYucmVuZGVyTm9TdGF0ZSgpOwogIH0pOwp9OwpDYXJkYm9hcmRVSS5wcm90b3R5cGUucmVuZGVyTm9TdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZ2wgPSB0aGlzLmdsOwogIGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTsKICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhCdWZmZXIpOwogIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYXR0cmlicy5wb3NpdGlvbik7CiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmF0dHJpYnMucG9zaXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgOCwgMCk7CiAgZ2wudW5pZm9ybTRmKHRoaXMudW5pZm9ybXMuY29sb3IsIDEuMCwgMS4wLCAxLjAsIDEuMCk7CiAgb3J0aG9NYXRyaXgodGhpcy5wcm9qTWF0LCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIDAsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQsIDAuMSwgMTAyNC4wKTsKICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudW5pZm9ybXMucHJvamVjdGlvbk1hdCwgZmFsc2UsIHRoaXMucHJvak1hdCk7CiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7CiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgdGhpcy5nZWFyT2Zmc2V0LCB0aGlzLmdlYXJWZXJ0ZXhDb3VudCk7CiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgdGhpcy5hcnJvd09mZnNldCwgdGhpcy5hcnJvd1ZlcnRleENvdW50KTsKfTsKZnVuY3Rpb24gRGlzdG9ydGlvbihjb2VmZmljaWVudHMpIHsKICB0aGlzLmNvZWZmaWNpZW50cyA9IGNvZWZmaWNpZW50czsKfQpEaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0SW52ZXJzZSA9IGZ1bmN0aW9uIChyYWRpdXMpIHsKICB2YXIgcjAgPSAwOwogIHZhciByMSA9IDE7CiAgdmFyIGRyMCA9IHJhZGl1cyAtIHRoaXMuZGlzdG9ydChyMCk7CiAgd2hpbGUgKE1hdGguYWJzKHIxIC0gcjApID4gMC4wMDAxICAgICAgICAgICAgICkgewogICAgdmFyIGRyMSA9IHJhZGl1cyAtIHRoaXMuZGlzdG9ydChyMSk7CiAgICB2YXIgcjIgPSByMSAtIGRyMSAqICgocjEgLSByMCkgLyAoZHIxIC0gZHIwKSk7CiAgICByMCA9IHIxOwogICAgcjEgPSByMjsKICAgIGRyMCA9IGRyMTsKICB9CiAgcmV0dXJuIHIxOwp9OwpEaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0ID0gZnVuY3Rpb24gKHJhZGl1cykgewogIHZhciByMiA9IHJhZGl1cyAqIHJhZGl1czsKICB2YXIgcmV0ID0gMDsKICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aDsgaSsrKSB7CiAgICByZXQgPSByMiAqIChyZXQgKyB0aGlzLmNvZWZmaWNpZW50c1tpXSk7CiAgfQogIHJldHVybiAocmV0ICsgMSkgKiByYWRpdXM7Cn07CnZhciBkZWdUb1JhZCA9IE1hdGguUEkgLyAxODA7CnZhciByYWRUb0RlZyA9IDE4MCAvIE1hdGguUEk7CnZhciBWZWN0b3IzID0gZnVuY3Rpb24gVmVjdG9yMyh4LCB5LCB6KSB7CiAgdGhpcy54ID0geCB8fCAwOwogIHRoaXMueSA9IHkgfHwgMDsKICB0aGlzLnogPSB6IHx8IDA7Cn07ClZlY3RvcjMucHJvdG90eXBlID0gewogIGNvbnN0cnVjdG9yOiBWZWN0b3IzLAogIHNldDogZnVuY3Rpb24gc2V0KHgsIHksIHopIHsKICAgIHRoaXMueCA9IHg7CiAgICB0aGlzLnkgPSB5OwogICAgdGhpcy56ID0gejsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgY29weTogZnVuY3Rpb24gY29weSh2KSB7CiAgICB0aGlzLnggPSB2Lng7CiAgICB0aGlzLnkgPSB2Lnk7CiAgICB0aGlzLnogPSB2Lno7CiAgICByZXR1cm4gdGhpczsKICB9LAogIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKCkgewogICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnopOwogIH0sCiAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUoKSB7CiAgICB2YXIgc2NhbGFyID0gdGhpcy5sZW5ndGgoKTsKICAgIGlmIChzY2FsYXIgIT09IDApIHsKICAgICAgdmFyIGludlNjYWxhciA9IDEgLyBzY2FsYXI7CiAgICAgIHRoaXMubXVsdGlwbHlTY2FsYXIoaW52U2NhbGFyKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMueCA9IDA7CiAgICAgIHRoaXMueSA9IDA7CiAgICAgIHRoaXMueiA9IDA7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9LAogIG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihzY2FsYXIpIHsKICAgIHRoaXMueCAqPSBzY2FsYXI7CiAgICB0aGlzLnkgKj0gc2NhbGFyOwogICAgdGhpcy56ICo9IHNjYWxhcjsKICB9LAogIGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gYXBwbHlRdWF0ZXJuaW9uKHEpIHsKICAgIHZhciB4ID0gdGhpcy54OwogICAgdmFyIHkgPSB0aGlzLnk7CiAgICB2YXIgeiA9IHRoaXMuejsKICAgIHZhciBxeCA9IHEueDsKICAgIHZhciBxeSA9IHEueTsKICAgIHZhciBxeiA9IHEuejsKICAgIHZhciBxdyA9IHEudzsKICAgIHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTsKICAgIHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejsKICAgIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDsKICAgIHZhciBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7CiAgICB0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5OwogICAgdGhpcy55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejsKICAgIHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7CiAgICByZXR1cm4gdGhpczsKICB9LAogIGRvdDogZnVuY3Rpb24gZG90KHYpIHsKICAgIHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7CiAgfSwKICBjcm9zc1ZlY3RvcnM6IGZ1bmN0aW9uIGNyb3NzVmVjdG9ycyhhLCBiKSB7CiAgICB2YXIgYXggPSBhLngsCiAgICAgICAgYXkgPSBhLnksCiAgICAgICAgYXogPSBhLno7CiAgICB2YXIgYnggPSBiLngsCiAgICAgICAgYnkgPSBiLnksCiAgICAgICAgYnogPSBiLno7CiAgICB0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTsKICAgIHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6OwogICAgdGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7CiAgICByZXR1cm4gdGhpczsKICB9Cn07CnZhciBRdWF0ZXJuaW9uID0gZnVuY3Rpb24gUXVhdGVybmlvbih4LCB5LCB6LCB3KSB7CiAgdGhpcy54ID0geCB8fCAwOwogIHRoaXMueSA9IHkgfHwgMDsKICB0aGlzLnogPSB6IHx8IDA7CiAgdGhpcy53ID0gdyAhPT0gdW5kZWZpbmVkID8gdyA6IDE7Cn07ClF1YXRlcm5pb24ucHJvdG90eXBlID0gewogIGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uLAogIHNldDogZnVuY3Rpb24gc2V0KHgsIHksIHosIHcpIHsKICAgIHRoaXMueCA9IHg7CiAgICB0aGlzLnkgPSB5OwogICAgdGhpcy56ID0gejsKICAgIHRoaXMudyA9IHc7CiAgICByZXR1cm4gdGhpczsKICB9LAogIGNvcHk6IGZ1bmN0aW9uIGNvcHkocXVhdGVybmlvbikgewogICAgdGhpcy54ID0gcXVhdGVybmlvbi54OwogICAgdGhpcy55ID0gcXVhdGVybmlvbi55OwogICAgdGhpcy56ID0gcXVhdGVybmlvbi56OwogICAgdGhpcy53ID0gcXVhdGVybmlvbi53OwogICAgcmV0dXJuIHRoaXM7CiAgfSwKICBzZXRGcm9tRXVsZXJYWVo6IGZ1bmN0aW9uIHNldEZyb21FdWxlclhZWih4LCB5LCB6KSB7CiAgICB2YXIgYzEgPSBNYXRoLmNvcyh4IC8gMik7CiAgICB2YXIgYzIgPSBNYXRoLmNvcyh5IC8gMik7CiAgICB2YXIgYzMgPSBNYXRoLmNvcyh6IC8gMik7CiAgICB2YXIgczEgPSBNYXRoLnNpbih4IC8gMik7CiAgICB2YXIgczIgPSBNYXRoLnNpbih5IC8gMik7CiAgICB2YXIgczMgPSBNYXRoLnNpbih6IC8gMik7CiAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7CiAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7CiAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7CiAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7CiAgICByZXR1cm4gdGhpczsKICB9LAogIHNldEZyb21FdWxlcllYWjogZnVuY3Rpb24gc2V0RnJvbUV1bGVyWVhaKHgsIHksIHopIHsKICAgIHZhciBjMSA9IE1hdGguY29zKHggLyAyKTsKICAgIHZhciBjMiA9IE1hdGguY29zKHkgLyAyKTsKICAgIHZhciBjMyA9IE1hdGguY29zKHogLyAyKTsKICAgIHZhciBzMSA9IE1hdGguc2luKHggLyAyKTsKICAgIHZhciBzMiA9IE1hdGguc2luKHkgLyAyKTsKICAgIHZhciBzMyA9IE1hdGguc2luKHogLyAyKTsKICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMzsKICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMzsKICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMzsKICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMzsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgc2V0RnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gc2V0RnJvbUF4aXNBbmdsZShheGlzLCBhbmdsZSkgewogICAgdmFyIGhhbGZBbmdsZSA9IGFuZ2xlIC8gMiwKICAgICAgICBzID0gTWF0aC5zaW4oaGFsZkFuZ2xlKTsKICAgIHRoaXMueCA9IGF4aXMueCAqIHM7CiAgICB0aGlzLnkgPSBheGlzLnkgKiBzOwogICAgdGhpcy56ID0gYXhpcy56ICogczsKICAgIHRoaXMudyA9IE1hdGguY29zKGhhbGZBbmdsZSk7CiAgICByZXR1cm4gdGhpczsKICB9LAogIG11bHRpcGx5OiBmdW5jdGlvbiBtdWx0aXBseShxKSB7CiAgICByZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMsIHEpOwogIH0sCiAgbXVsdGlwbHlRdWF0ZXJuaW9uczogZnVuY3Rpb24gbXVsdGlwbHlRdWF0ZXJuaW9ucyhhLCBiKSB7CiAgICB2YXIgcWF4ID0gYS54LAogICAgICAgIHFheSA9IGEueSwKICAgICAgICBxYXogPSBhLnosCiAgICAgICAgcWF3ID0gYS53OwogICAgdmFyIHFieCA9IGIueCwKICAgICAgICBxYnkgPSBiLnksCiAgICAgICAgcWJ6ID0gYi56LAogICAgICAgIHFidyA9IGIudzsKICAgIHRoaXMueCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTsKICAgIHRoaXMueSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejsKICAgIHRoaXMueiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDsKICAgIHRoaXMudyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgaW52ZXJzZTogZnVuY3Rpb24gaW52ZXJzZSgpIHsKICAgIHRoaXMueCAqPSAtMTsKICAgIHRoaXMueSAqPSAtMTsKICAgIHRoaXMueiAqPSAtMTsKICAgIHRoaXMubm9ybWFsaXplKCk7CiAgICByZXR1cm4gdGhpczsKICB9LAogIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkgewogICAgdmFyIGwgPSBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53KTsKICAgIGlmIChsID09PSAwKSB7CiAgICAgIHRoaXMueCA9IDA7CiAgICAgIHRoaXMueSA9IDA7CiAgICAgIHRoaXMueiA9IDA7CiAgICAgIHRoaXMudyA9IDE7CiAgICB9IGVsc2UgewogICAgICBsID0gMSAvIGw7CiAgICAgIHRoaXMueCA9IHRoaXMueCAqIGw7CiAgICAgIHRoaXMueSA9IHRoaXMueSAqIGw7CiAgICAgIHRoaXMueiA9IHRoaXMueiAqIGw7CiAgICAgIHRoaXMudyA9IHRoaXMudyAqIGw7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9LAogIHNsZXJwOiBmdW5jdGlvbiBzbGVycChxYiwgdCkgewogICAgaWYgKHQgPT09IDApIHJldHVybiB0aGlzOwogICAgaWYgKHQgPT09IDEpIHJldHVybiB0aGlzLmNvcHkocWIpOwogICAgdmFyIHggPSB0aGlzLngsCiAgICAgICAgeSA9IHRoaXMueSwKICAgICAgICB6ID0gdGhpcy56LAogICAgICAgIHcgPSB0aGlzLnc7CiAgICB2YXIgY29zSGFsZlRoZXRhID0gdyAqIHFiLncgKyB4ICogcWIueCArIHkgKiBxYi55ICsgeiAqIHFiLno7CiAgICBpZiAoY29zSGFsZlRoZXRhIDwgMCkgewogICAgICB0aGlzLncgPSAtcWIudzsKICAgICAgdGhpcy54ID0gLXFiLng7CiAgICAgIHRoaXMueSA9IC1xYi55OwogICAgICB0aGlzLnogPSAtcWIuejsKICAgICAgY29zSGFsZlRoZXRhID0gLWNvc0hhbGZUaGV0YTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuY29weShxYik7CiAgICB9CiAgICBpZiAoY29zSGFsZlRoZXRhID49IDEuMCkgewogICAgICB0aGlzLncgPSB3OwogICAgICB0aGlzLnggPSB4OwogICAgICB0aGlzLnkgPSB5OwogICAgICB0aGlzLnogPSB6OwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHZhciBoYWxmVGhldGEgPSBNYXRoLmFjb3MoY29zSGFsZlRoZXRhKTsKICAgIHZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhKTsKICAgIGlmIChNYXRoLmFicyhzaW5IYWxmVGhldGEpIDwgMC4wMDEpIHsKICAgICAgdGhpcy53ID0gMC41ICogKHcgKyB0aGlzLncpOwogICAgICB0aGlzLnggPSAwLjUgKiAoeCArIHRoaXMueCk7CiAgICAgIHRoaXMueSA9IDAuNSAqICh5ICsgdGhpcy55KTsKICAgICAgdGhpcy56ID0gMC41ICogKHogKyB0aGlzLnopOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHZhciByYXRpb0EgPSBNYXRoLnNpbigoMSAtIHQpICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YSwKICAgICAgICByYXRpb0IgPSBNYXRoLnNpbih0ICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YTsKICAgIHRoaXMudyA9IHcgKiByYXRpb0EgKyB0aGlzLncgKiByYXRpb0I7CiAgICB0aGlzLnggPSB4ICogcmF0aW9BICsgdGhpcy54ICogcmF0aW9COwogICAgdGhpcy55ID0geSAqIHJhdGlvQSArIHRoaXMueSAqIHJhdGlvQjsKICAgIHRoaXMueiA9IHogKiByYXRpb0EgKyB0aGlzLnogKiByYXRpb0I7CiAgICByZXR1cm4gdGhpczsKICB9LAogIHNldEZyb21Vbml0VmVjdG9yczogZnVuY3Rpb24gKCkgewogICAgdmFyIHYxLCByOwogICAgdmFyIEVQUyA9IDAuMDAwMDAxOwogICAgcmV0dXJuIGZ1bmN0aW9uICh2RnJvbSwgdlRvKSB7CiAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKSB2MSA9IG5ldyBWZWN0b3IzKCk7CiAgICAgIHIgPSB2RnJvbS5kb3QodlRvKSArIDE7CiAgICAgIGlmIChyIDwgRVBTKSB7CiAgICAgICAgciA9IDA7CiAgICAgICAgaWYgKE1hdGguYWJzKHZGcm9tLngpID4gTWF0aC5hYnModkZyb20ueikpIHsKICAgICAgICAgIHYxLnNldCgtdkZyb20ueSwgdkZyb20ueCwgMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHYxLnNldCgwLCAtdkZyb20ueiwgdkZyb20ueSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHYxLmNyb3NzVmVjdG9ycyh2RnJvbSwgdlRvKTsKICAgICAgfQogICAgICB0aGlzLnggPSB2MS54OwogICAgICB0aGlzLnkgPSB2MS55OwogICAgICB0aGlzLnogPSB2MS56OwogICAgICB0aGlzLncgPSByOwogICAgICB0aGlzLm5vcm1hbGl6ZSgpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgfSgpCn07CmZ1bmN0aW9uIERldmljZShwYXJhbXMpIHsKICB0aGlzLndpZHRoID0gcGFyYW1zLndpZHRoIHx8IGdldFNjcmVlbldpZHRoKCk7CiAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0IHx8IGdldFNjcmVlbkhlaWdodCgpOwogIHRoaXMud2lkdGhNZXRlcnMgPSBwYXJhbXMud2lkdGhNZXRlcnM7CiAgdGhpcy5oZWlnaHRNZXRlcnMgPSBwYXJhbXMuaGVpZ2h0TWV0ZXJzOwogIHRoaXMuYmV2ZWxNZXRlcnMgPSBwYXJhbXMuYmV2ZWxNZXRlcnM7Cn0KdmFyIERFRkFVTFRfQU5EUk9JRCA9IG5ldyBEZXZpY2UoewogIHdpZHRoTWV0ZXJzOiAwLjExMCwKICBoZWlnaHRNZXRlcnM6IDAuMDYyLAogIGJldmVsTWV0ZXJzOiAwLjAwNAp9KTsKdmFyIERFRkFVTFRfSU9TID0gbmV3IERldmljZSh7CiAgd2lkdGhNZXRlcnM6IDAuMTAzOCwKICBoZWlnaHRNZXRlcnM6IDAuMDU4NCwKICBiZXZlbE1ldGVyczogMC4wMDQKfSk7CnZhciBWaWV3ZXJzID0gewogIENhcmRib2FyZFYxOiBuZXcgQ2FyZGJvYXJkVmlld2VyKHsKICAgIGlkOiAnQ2FyZGJvYXJkVjEnLAogICAgbGFiZWw6ICdDYXJkYm9hcmQgSS9PIDIwMTQnLAogICAgZm92OiA0MCwKICAgIGludGVyTGVuc0Rpc3RhbmNlOiAwLjA2MCwKICAgIGJhc2VsaW5lTGVuc0Rpc3RhbmNlOiAwLjAzNSwKICAgIHNjcmVlbkxlbnNEaXN0YW5jZTogMC4wNDIsCiAgICBkaXN0b3J0aW9uQ29lZmZpY2llbnRzOiBbMC40NDEsIDAuMTU2XSwKICAgIGludmVyc2VDb2VmZmljaWVudHM6IFstMC40NDEwMDM1LCAwLjQyNzU2MTU1LCAtMC40ODA0NDM5LCAwLjU0NjAxMzksIC0wLjU4ODIxMTgzLCAwLjU3MzM5MzgsIC0wLjQ4MzAzMjAyLCAwLjMzMjk5MDgzLCAtMC4xNzU3Mzg0MSwgMC4wNjUxNzcyLCAtMC4wMTQ4ODk2MywgMC4wMDE1NTk4MzRdCiAgfSksCiAgQ2FyZGJvYXJkVjI6IG5ldyBDYXJkYm9hcmRWaWV3ZXIoewogICAgaWQ6ICdDYXJkYm9hcmRWMicsCiAgICBsYWJlbDogJ0NhcmRib2FyZCBJL08gMjAxNScsCiAgICBmb3Y6IDYwLAogICAgaW50ZXJMZW5zRGlzdGFuY2U6IDAuMDY0LAogICAgYmFzZWxpbmVMZW5zRGlzdGFuY2U6IDAuMDM1LAogICAgc2NyZWVuTGVuc0Rpc3RhbmNlOiAwLjAzOSwKICAgIGRpc3RvcnRpb25Db2VmZmljaWVudHM6IFswLjM0LCAwLjU1XSwKICAgIGludmVyc2VDb2VmZmljaWVudHM6IFstMC4zMzgzNjcwNCwgLTAuMTgxNjIxODUsIDAuODYyNjU1LCAtMS4yNDYyMDUxLCAxLjA1NjA2MDIsIC0wLjU4MjA4MzE3LCAwLjIxNjA5MDc4LCAtMC4wNTQ0NDgyMywgMC4wMDkxNzc5NTYsIC05LjkwNDE2OUUtNCwgNi4xODM1MzVFLTUsIC0xLjY5ODE4MDNFLTZdCiAgfSkKfTsKZnVuY3Rpb24gRGV2aWNlSW5mbyhkZXZpY2VQYXJhbXMsIGFkZGl0aW9uYWxWaWV3ZXJzKSB7CiAgdGhpcy52aWV3ZXIgPSBWaWV3ZXJzLkNhcmRib2FyZFYyOwogIHRoaXMudXBkYXRlRGV2aWNlUGFyYW1zKGRldmljZVBhcmFtcyk7CiAgdGhpcy5kaXN0b3J0aW9uID0gbmV3IERpc3RvcnRpb24odGhpcy52aWV3ZXIuZGlzdG9ydGlvbkNvZWZmaWNpZW50cyk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRpdGlvbmFsVmlld2Vycy5sZW5ndGg7IGkrKykgewogICAgdmFyIHZpZXdlciA9IGFkZGl0aW9uYWxWaWV3ZXJzW2ldOwogICAgVmlld2Vyc1t2aWV3ZXIuaWRdID0gbmV3IENhcmRib2FyZFZpZXdlcih2aWV3ZXIpOwogIH0KfQpEZXZpY2VJbmZvLnByb3RvdHlwZS51cGRhdGVEZXZpY2VQYXJhbXMgPSBmdW5jdGlvbiAoZGV2aWNlUGFyYW1zKSB7CiAgdGhpcy5kZXZpY2UgPSB0aGlzLmRldGVybWluZURldmljZV8oZGV2aWNlUGFyYW1zKSB8fCB0aGlzLmRldmljZTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLmRldmljZTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuc2V0Vmlld2VyID0gZnVuY3Rpb24gKHZpZXdlcikgewogIHRoaXMudmlld2VyID0gdmlld2VyOwogIHRoaXMuZGlzdG9ydGlvbiA9IG5ldyBEaXN0b3J0aW9uKHRoaXMudmlld2VyLmRpc3RvcnRpb25Db2VmZmljaWVudHMpOwp9OwpEZXZpY2VJbmZvLnByb3RvdHlwZS5kZXRlcm1pbmVEZXZpY2VfID0gZnVuY3Rpb24gKGRldmljZVBhcmFtcykgewogIGlmICghZGV2aWNlUGFyYW1zKSB7CiAgICBpZiAoaXNJT1MoKSkgewogICAgICBjb25zb2xlLndhcm4oJ1VzaW5nIGZhbGxiYWNrIGlPUyBkZXZpY2UgbWVhc3VyZW1lbnRzLicpOwogICAgICByZXR1cm4gREVGQVVMVF9JT1M7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLndhcm4oJ1VzaW5nIGZhbGxiYWNrIEFuZHJvaWQgZGV2aWNlIG1lYXN1cmVtZW50cy4nKTsKICAgICAgcmV0dXJuIERFRkFVTFRfQU5EUk9JRDsKICAgIH0KICB9CiAgdmFyIE1FVEVSU19QRVJfSU5DSCA9IDAuMDI1NDsKICB2YXIgbWV0ZXJzUGVyUGl4ZWxYID0gTUVURVJTX1BFUl9JTkNIIC8gZGV2aWNlUGFyYW1zLnhkcGk7CiAgdmFyIG1ldGVyc1BlclBpeGVsWSA9IE1FVEVSU19QRVJfSU5DSCAvIGRldmljZVBhcmFtcy55ZHBpOwogIHZhciB3aWR0aCA9IGdldFNjcmVlbldpZHRoKCk7CiAgdmFyIGhlaWdodCA9IGdldFNjcmVlbkhlaWdodCgpOwogIHJldHVybiBuZXcgRGV2aWNlKHsKICAgIHdpZHRoTWV0ZXJzOiBtZXRlcnNQZXJQaXhlbFggKiB3aWR0aCwKICAgIGhlaWdodE1ldGVyczogbWV0ZXJzUGVyUGl4ZWxZICogaGVpZ2h0LAogICAgYmV2ZWxNZXRlcnM6IGRldmljZVBhcmFtcy5iZXZlbE1tICogMC4wMDEKICB9KTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RGlzdG9ydGVkRmllbGRPZlZpZXdMZWZ0RXllID0gZnVuY3Rpb24gKCkgewogIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjsKICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7CiAgdmFyIGRpc3RvcnRpb24gPSB0aGlzLmRpc3RvcnRpb247CiAgdmFyIGV5ZVRvU2NyZWVuRGlzdGFuY2UgPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlOwogIHZhciBvdXRlckRpc3QgPSAoZGV2aWNlLndpZHRoTWV0ZXJzIC0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlKSAvIDI7CiAgdmFyIGlubmVyRGlzdCA9IHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAvIDI7CiAgdmFyIGJvdHRvbURpc3QgPSB2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnM7CiAgdmFyIHRvcERpc3QgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC0gYm90dG9tRGlzdDsKICB2YXIgb3V0ZXJBbmdsZSA9IHJhZFRvRGVnICogTWF0aC5hdGFuKGRpc3RvcnRpb24uZGlzdG9ydChvdXRlckRpc3QgLyBleWVUb1NjcmVlbkRpc3RhbmNlKSk7CiAgdmFyIGlubmVyQW5nbGUgPSByYWRUb0RlZyAqIE1hdGguYXRhbihkaXN0b3J0aW9uLmRpc3RvcnQoaW5uZXJEaXN0IC8gZXllVG9TY3JlZW5EaXN0YW5jZSkpOwogIHZhciBib3R0b21BbmdsZSA9IHJhZFRvRGVnICogTWF0aC5hdGFuKGRpc3RvcnRpb24uZGlzdG9ydChib3R0b21EaXN0IC8gZXllVG9TY3JlZW5EaXN0YW5jZSkpOwogIHZhciB0b3BBbmdsZSA9IHJhZFRvRGVnICogTWF0aC5hdGFuKGRpc3RvcnRpb24uZGlzdG9ydCh0b3BEaXN0IC8gZXllVG9TY3JlZW5EaXN0YW5jZSkpOwogIHJldHVybiB7CiAgICBsZWZ0RGVncmVlczogTWF0aC5taW4ob3V0ZXJBbmdsZSwgdmlld2VyLmZvdiksCiAgICByaWdodERlZ3JlZXM6IE1hdGgubWluKGlubmVyQW5nbGUsIHZpZXdlci5mb3YpLAogICAgZG93bkRlZ3JlZXM6IE1hdGgubWluKGJvdHRvbUFuZ2xlLCB2aWV3ZXIuZm92KSwKICAgIHVwRGVncmVlczogTWF0aC5taW4odG9wQW5nbGUsIHZpZXdlci5mb3YpCiAgfTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0TGVmdEV5ZVZpc2libGVUYW5BbmdsZXMgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyOwogIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTsKICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjsKICB2YXIgZm92TGVmdCA9IE1hdGgudGFuKC1kZWdUb1JhZCAqIHZpZXdlci5mb3YpOwogIHZhciBmb3ZUb3AgPSBNYXRoLnRhbihkZWdUb1JhZCAqIHZpZXdlci5mb3YpOwogIHZhciBmb3ZSaWdodCA9IE1hdGgudGFuKGRlZ1RvUmFkICogdmlld2VyLmZvdik7CiAgdmFyIGZvdkJvdHRvbSA9IE1hdGgudGFuKC1kZWdUb1JhZCAqIHZpZXdlci5mb3YpOwogIHZhciBoYWxmV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyA0OwogIHZhciBoYWxmSGVpZ2h0ID0gZGV2aWNlLmhlaWdodE1ldGVycyAvIDI7CiAgdmFyIHZlcnRpY2FsTGVuc09mZnNldCA9IHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycyAtIGhhbGZIZWlnaHQ7CiAgdmFyIGNlbnRlclggPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyIC0gaGFsZldpZHRoOwogIHZhciBjZW50ZXJZID0gLXZlcnRpY2FsTGVuc09mZnNldDsKICB2YXIgY2VudGVyWiA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7CiAgdmFyIHNjcmVlbkxlZnQgPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclggLSBoYWxmV2lkdGgpIC8gY2VudGVyWik7CiAgdmFyIHNjcmVlblRvcCA9IGRpc3RvcnRpb24uZGlzdG9ydCgoY2VudGVyWSArIGhhbGZIZWlnaHQpIC8gY2VudGVyWik7CiAgdmFyIHNjcmVlblJpZ2h0ID0gZGlzdG9ydGlvbi5kaXN0b3J0KChjZW50ZXJYICsgaGFsZldpZHRoKSAvIGNlbnRlclopOwogIHZhciBzY3JlZW5Cb3R0b20gPSBkaXN0b3J0aW9uLmRpc3RvcnQoKGNlbnRlclkgLSBoYWxmSGVpZ2h0KSAvIGNlbnRlclopOwogIHZhciByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KDQpOwogIHJlc3VsdFswXSA9IE1hdGgubWF4KGZvdkxlZnQsIHNjcmVlbkxlZnQpOwogIHJlc3VsdFsxXSA9IE1hdGgubWluKGZvdlRvcCwgc2NyZWVuVG9wKTsKICByZXN1bHRbMl0gPSBNYXRoLm1pbihmb3ZSaWdodCwgc2NyZWVuUmlnaHQpOwogIHJlc3VsdFszXSA9IE1hdGgubWF4KGZvdkJvdHRvbSwgc2NyZWVuQm90dG9tKTsKICByZXR1cm4gcmVzdWx0Owp9OwpEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRMZWZ0RXllTm9MZW5zVGFuQW5nbGVzID0gZnVuY3Rpb24gKCkgewogIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjsKICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7CiAgdmFyIGRpc3RvcnRpb24gPSB0aGlzLmRpc3RvcnRpb247CiAgdmFyIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7CiAgdmFyIGZvdkxlZnQgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKC1kZWdUb1JhZCAqIHZpZXdlci5mb3YpKTsKICB2YXIgZm92VG9wID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbihkZWdUb1JhZCAqIHZpZXdlci5mb3YpKTsKICB2YXIgZm92UmlnaHQgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKGRlZ1RvUmFkICogdmlld2VyLmZvdikpOwogIHZhciBmb3ZCb3R0b20gPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKC1kZWdUb1JhZCAqIHZpZXdlci5mb3YpKTsKICB2YXIgaGFsZldpZHRoID0gZGV2aWNlLndpZHRoTWV0ZXJzIC8gNDsKICB2YXIgaGFsZkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyAyOwogIHZhciB2ZXJ0aWNhbExlbnNPZmZzZXQgPSB2aWV3ZXIuYmFzZWxpbmVMZW5zRGlzdGFuY2UgLSBkZXZpY2UuYmV2ZWxNZXRlcnMgLSBoYWxmSGVpZ2h0OwogIHZhciBjZW50ZXJYID0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlIC8gMiAtIGhhbGZXaWR0aDsKICB2YXIgY2VudGVyWSA9IC12ZXJ0aWNhbExlbnNPZmZzZXQ7CiAgdmFyIGNlbnRlclogPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlOwogIHZhciBzY3JlZW5MZWZ0ID0gKGNlbnRlclggLSBoYWxmV2lkdGgpIC8gY2VudGVyWjsKICB2YXIgc2NyZWVuVG9wID0gKGNlbnRlclkgKyBoYWxmSGVpZ2h0KSAvIGNlbnRlclo7CiAgdmFyIHNjcmVlblJpZ2h0ID0gKGNlbnRlclggKyBoYWxmV2lkdGgpIC8gY2VudGVyWjsKICB2YXIgc2NyZWVuQm90dG9tID0gKGNlbnRlclkgLSBoYWxmSGVpZ2h0KSAvIGNlbnRlclo7CiAgcmVzdWx0WzBdID0gTWF0aC5tYXgoZm92TGVmdCwgc2NyZWVuTGVmdCk7CiAgcmVzdWx0WzFdID0gTWF0aC5taW4oZm92VG9wLCBzY3JlZW5Ub3ApOwogIHJlc3VsdFsyXSA9IE1hdGgubWluKGZvdlJpZ2h0LCBzY3JlZW5SaWdodCk7CiAgcmVzdWx0WzNdID0gTWF0aC5tYXgoZm92Qm90dG9tLCBzY3JlZW5Cb3R0b20pOwogIHJldHVybiByZXN1bHQ7Cn07CkRldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVWaXNpYmxlU2NyZWVuUmVjdCA9IGZ1bmN0aW9uICh1bmRpc3RvcnRlZEZydXN0dW0pIHsKICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7CiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlOwogIHZhciBkaXN0ID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICB2YXIgZXllWCA9IChkZXZpY2Uud2lkdGhNZXRlcnMgLSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UpIC8gMjsKICB2YXIgZXllWSA9IHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVyczsKICB2YXIgbGVmdCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMF0gKiBkaXN0ICsgZXllWCkgLyBkZXZpY2Uud2lkdGhNZXRlcnM7CiAgdmFyIHRvcCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMV0gKiBkaXN0ICsgZXllWSkgLyBkZXZpY2UuaGVpZ2h0TWV0ZXJzOwogIHZhciByaWdodCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMl0gKiBkaXN0ICsgZXllWCkgLyBkZXZpY2Uud2lkdGhNZXRlcnM7CiAgdmFyIGJvdHRvbSA9ICh1bmRpc3RvcnRlZEZydXN0dW1bM10gKiBkaXN0ICsgZXllWSkgLyBkZXZpY2UuaGVpZ2h0TWV0ZXJzOwogIHJldHVybiB7CiAgICB4OiBsZWZ0LAogICAgeTogYm90dG9tLAogICAgd2lkdGg6IHJpZ2h0IC0gbGVmdCwKICAgIGhlaWdodDogdG9wIC0gYm90dG9tCiAgfTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RmllbGRPZlZpZXdMZWZ0RXllID0gZnVuY3Rpb24gKG9wdF9pc1VuZGlzdG9ydGVkKSB7CiAgcmV0dXJuIG9wdF9pc1VuZGlzdG9ydGVkID8gdGhpcy5nZXRVbmRpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSgpIDogdGhpcy5nZXREaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUoKTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RmllbGRPZlZpZXdSaWdodEV5ZSA9IGZ1bmN0aW9uIChvcHRfaXNVbmRpc3RvcnRlZCkgewogIHZhciBmb3YgPSB0aGlzLmdldEZpZWxkT2ZWaWV3TGVmdEV5ZShvcHRfaXNVbmRpc3RvcnRlZCk7CiAgcmV0dXJuIHsKICAgIGxlZnREZWdyZWVzOiBmb3YucmlnaHREZWdyZWVzLAogICAgcmlnaHREZWdyZWVzOiBmb3YubGVmdERlZ3JlZXMsCiAgICB1cERlZ3JlZXM6IGZvdi51cERlZ3JlZXMsCiAgICBkb3duRGVncmVlczogZm92LmRvd25EZWdyZWVzCiAgfTsKfTsKRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0VW5kaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHAgPSB0aGlzLmdldFVuZGlzdG9ydGVkUGFyYW1zXygpOwogIHJldHVybiB7CiAgICBsZWZ0RGVncmVlczogcmFkVG9EZWcgKiBNYXRoLmF0YW4ocC5vdXRlckRpc3QpLAogICAgcmlnaHREZWdyZWVzOiByYWRUb0RlZyAqIE1hdGguYXRhbihwLmlubmVyRGlzdCksCiAgICBkb3duRGVncmVlczogcmFkVG9EZWcgKiBNYXRoLmF0YW4ocC5ib3R0b21EaXN0KSwKICAgIHVwRGVncmVlczogcmFkVG9EZWcgKiBNYXRoLmF0YW4ocC50b3BEaXN0KQogIH07Cn07CkRldmljZUluZm8ucHJvdG90eXBlLmdldFVuZGlzdG9ydGVkVmlld3BvcnRMZWZ0RXllID0gZnVuY3Rpb24gKCkgewogIHZhciBwID0gdGhpcy5nZXRVbmRpc3RvcnRlZFBhcmFtc18oKTsKICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7CiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlOwogIHZhciBleWVUb1NjcmVlbkRpc3RhbmNlID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTsKICB2YXIgc2NyZWVuV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlOwogIHZhciBzY3JlZW5IZWlnaHQgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICB2YXIgeFB4UGVyVGFuQW5nbGUgPSBkZXZpY2Uud2lkdGggLyBzY3JlZW5XaWR0aDsKICB2YXIgeVB4UGVyVGFuQW5nbGUgPSBkZXZpY2UuaGVpZ2h0IC8gc2NyZWVuSGVpZ2h0OwogIHZhciB4ID0gTWF0aC5yb3VuZCgocC5leWVQb3NYIC0gcC5vdXRlckRpc3QpICogeFB4UGVyVGFuQW5nbGUpOwogIHZhciB5ID0gTWF0aC5yb3VuZCgocC5leWVQb3NZIC0gcC5ib3R0b21EaXN0KSAqIHlQeFBlclRhbkFuZ2xlKTsKICByZXR1cm4gewogICAgeDogeCwKICAgIHk6IHksCiAgICB3aWR0aDogTWF0aC5yb3VuZCgocC5leWVQb3NYICsgcC5pbm5lckRpc3QpICogeFB4UGVyVGFuQW5nbGUpIC0geCwKICAgIGhlaWdodDogTWF0aC5yb3VuZCgocC5leWVQb3NZICsgcC50b3BEaXN0KSAqIHlQeFBlclRhbkFuZ2xlKSAtIHkKICB9Owp9OwpEZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRVbmRpc3RvcnRlZFBhcmFtc18gPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyOwogIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTsKICB2YXIgZGlzdG9ydGlvbiA9IHRoaXMuZGlzdG9ydGlvbjsKICB2YXIgZXllVG9TY3JlZW5EaXN0YW5jZSA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7CiAgdmFyIGhhbGZMZW5zRGlzdGFuY2UgPSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UgLyAyIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICB2YXIgc2NyZWVuV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlOwogIHZhciBzY3JlZW5IZWlnaHQgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTsKICB2YXIgZXllUG9zWCA9IHNjcmVlbldpZHRoIC8gMiAtIGhhbGZMZW5zRGlzdGFuY2U7CiAgdmFyIGV5ZVBvc1kgPSAodmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzKSAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7CiAgdmFyIG1heEZvdiA9IHZpZXdlci5mb3Y7CiAgdmFyIHZpZXdlck1heCA9IGRpc3RvcnRpb24uZGlzdG9ydEludmVyc2UoTWF0aC50YW4oZGVnVG9SYWQgKiBtYXhGb3YpKTsKICB2YXIgb3V0ZXJEaXN0ID0gTWF0aC5taW4oZXllUG9zWCwgdmlld2VyTWF4KTsKICB2YXIgaW5uZXJEaXN0ID0gTWF0aC5taW4oaGFsZkxlbnNEaXN0YW5jZSwgdmlld2VyTWF4KTsKICB2YXIgYm90dG9tRGlzdCA9IE1hdGgubWluKGV5ZVBvc1ksIHZpZXdlck1heCk7CiAgdmFyIHRvcERpc3QgPSBNYXRoLm1pbihzY3JlZW5IZWlnaHQgLSBleWVQb3NZLCB2aWV3ZXJNYXgpOwogIHJldHVybiB7CiAgICBvdXRlckRpc3Q6IG91dGVyRGlzdCwKICAgIGlubmVyRGlzdDogaW5uZXJEaXN0LAogICAgdG9wRGlzdDogdG9wRGlzdCwKICAgIGJvdHRvbURpc3Q6IGJvdHRvbURpc3QsCiAgICBleWVQb3NYOiBleWVQb3NYLAogICAgZXllUG9zWTogZXllUG9zWQogIH07Cn07CmZ1bmN0aW9uIENhcmRib2FyZFZpZXdlcihwYXJhbXMpIHsKICB0aGlzLmlkID0gcGFyYW1zLmlkOwogIHRoaXMubGFiZWwgPSBwYXJhbXMubGFiZWw7CiAgdGhpcy5mb3YgPSBwYXJhbXMuZm92OwogIHRoaXMuaW50ZXJMZW5zRGlzdGFuY2UgPSBwYXJhbXMuaW50ZXJMZW5zRGlzdGFuY2U7CiAgdGhpcy5iYXNlbGluZUxlbnNEaXN0YW5jZSA9IHBhcmFtcy5iYXNlbGluZUxlbnNEaXN0YW5jZTsKICB0aGlzLnNjcmVlbkxlbnNEaXN0YW5jZSA9IHBhcmFtcy5zY3JlZW5MZW5zRGlzdGFuY2U7CiAgdGhpcy5kaXN0b3J0aW9uQ29lZmZpY2llbnRzID0gcGFyYW1zLmRpc3RvcnRpb25Db2VmZmljaWVudHM7CiAgdGhpcy5pbnZlcnNlQ29lZmZpY2llbnRzID0gcGFyYW1zLmludmVyc2VDb2VmZmljaWVudHM7Cn0KRGV2aWNlSW5mby5WaWV3ZXJzID0gVmlld2VyczsKdmFyIGZvcm1hdCA9IDE7CnZhciBsYXN0X3VwZGF0ZWQgPSAiMjAxOC0xMi0xMFQxNzowMTo0MloiOwp2YXIgZGV2aWNlcyA9IFt7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJhc3VzLyovTmV4dXMgNy8qIn0seyJ1YSI6Ik5leHVzIDcifV0sImRwaSI6WzMyMC44LDMyM10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJhc3VzLyovQVNVU19aMDBBRC8qIn0seyJ1YSI6IkFTVVNfWjAwQUQifV0sImRwaSI6WzQwMyw0MDQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiR29vZ2xlLyovUGl4ZWwgMiBYTC8qIn0seyJ1YSI6IlBpeGVsIDIgWEwifV0sImRwaSI6NTM3LjksImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiR29vZ2xlLyovUGl4ZWwgMyBYTC8qIn0seyJ1YSI6IlBpeGVsIDMgWEwifV0sImRwaSI6WzU1OC41LDU1My44XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJHb29nbGUvKi9QaXhlbCBYTC8qIn0seyJ1YSI6IlBpeGVsIFhMIn1dLCJkcGkiOls1MzcuOSw1MzNdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsIDMvKiJ9LHsidWEiOiJQaXhlbCAzIn1dLCJkcGkiOjQ0Mi40LCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsIDIvKiJ9LHsidWEiOiJQaXhlbCAyIn1dLCJkcGkiOjQ0MSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikdvb2dsZS8qL1BpeGVsLyoifSx7InVhIjoiUGl4ZWwifV0sImRwaSI6WzQzMi42LDQzNi43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIVEMvKi9IVEM2NDM1TFZXLyoifSx7InVhIjoiSFRDNjQzNUxWVyJ9XSwiZHBpIjpbNDQ5LjcsNDQzLjNdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkhUQy8qL0hUQyBPbmUgWEwvKiJ9LHsidWEiOiJIVEMgT25lIFhMIn1dLCJkcGkiOlszMTUuMywzMTQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiaHRjLyovTmV4dXMgOS8qIn0seyJ1YSI6Ik5leHVzIDkifV0sImRwaSI6Mjg5LCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiSFRDLyovSFRDIE9uZSBNOS8qIn0seyJ1YSI6IkhUQyBPbmUgTTkifV0sImRwaSI6WzQ0Mi41LDQ0My4zXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkhUQy8qL0hUQyBPbmVfTTgvKiJ9LHsidWEiOiJIVEMgT25lX004In1dLCJkcGkiOls0NDkuNyw0NDcuNF0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIVEMvKi9IVEMgT25lLyoifSx7InVhIjoiSFRDIE9uZSJ9XSwiZHBpIjo0NzIuOCwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJIdWF3ZWkvKi9OZXh1cyA2UC8qIn0seyJ1YSI6Ik5leHVzIDZQIn1dLCJkcGkiOls1MTUuMSw1MThdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ikh1YXdlaS8qL0JMTi1MMjQvKiJ9LHsidWEiOiJIT05PUkJMTi1MMjQifV0sImRwaSI6NDgwLCJidyI6NCwiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiSHVhd2VpLyovQktMLUwwOS8qIn0seyJ1YSI6IkJLTC1MMDkifV0sImRwaSI6NDAzLCJidyI6My40NywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEVOT1ZPLyovTGVub3ZvIFBCMi02OTBZLyoifSx7InVhIjoiTGVub3ZvIFBCMi02OTBZIn1dLCJkcGkiOls0NTcuMiw0NTQuNzEzXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL05leHVzIDVYLyoifSx7InVhIjoiTmV4dXMgNVgifV0sImRwaSI6WzQyMiw0MTkuOV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEdNUzM0NS8qIn0seyJ1YSI6IkxHTVMzNDUifV0sImRwaSI6WzIyMS43LDIxOS4xXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL0xHLUQ4MDAvKiJ9LHsidWEiOiJMRy1EODAwIn1dLCJkcGkiOls0MjIsNDI0LjFdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEctRDg1MC8qIn0seyJ1YSI6IkxHLUQ4NTAifV0sImRwaSI6WzUzNy45LDU0MS45XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL1ZTOTg1IDRHLyoifSx7InVhIjoiVlM5ODUgNEcifV0sImRwaSI6WzUzNy45LDUzNS42XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJMR0UvKi9OZXh1cyA1LyoifSx7InVhIjoiTmV4dXMgNSBCIn1dLCJkcGkiOls0NDIuNCw0NDQuOF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTmV4dXMgNC8qIn0seyJ1YSI6Ik5leHVzIDQifV0sImRwaSI6WzMxOS44LDMxOC40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJMR0UvKi9MRy1QNzY5LyoifSx7InVhIjoiTEctUDc2OSJ9XSwiZHBpIjpbMjQwLjYsMjQ3LjVdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkxHRS8qL0xHTVMzMjMvKiJ9LHsidWEiOiJMR01TMzIzIn1dLCJkcGkiOlsyMDYuNiwyMDQuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTEdFLyovTEdMUzk5Ni8qIn0seyJ1YSI6IkxHTFM5OTYifV0sImRwaSI6WzQwMy40LDQwMS41XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJNaWNyb21heC8qLzQ1NjBNTVgvKiJ9LHsidWEiOiI0NTYwTU1YIn1dLCJkcGkiOlsyNDAsMjE5LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik1pY3JvbWF4LyovQTI1MC8qIn0seyJ1YSI6Ik1pY3JvbWF4IEEyNTAifV0sImRwaSI6WzQ4MCw0NDYuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiTWljcm9tYXgvKi9NaWNyb21heCBBUTQ1MDEvKiJ9LHsidWEiOiJNaWNyb21heCBBUTQ1MDEifV0sImRwaSI6MjQwLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9HNS8qIn0seyJ1YSI6Ik1vdG8gRyAoNSkgUGx1cyJ9XSwiZHBpIjpbNDAzLjQsNDAzXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL0RST0lEIFJBWlIvKiJ9LHsidWEiOiJEUk9JRCBSQVpSIn1dLCJkcGkiOlszNjguMSwyNTYuN10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDgzMEMvKiJ9LHsidWEiOiJYVDgzMEMifV0sImRwaSI6WzI1NCwyNTUuOV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwMjEvKiJ9LHsidWEiOiJYVDEwMjEifV0sImRwaSI6WzI1NCwyNTYuN10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTAyMy8qIn0seyJ1YSI6IlhUMTAyMyJ9XSwiZHBpIjpbMjU0LDI1Ni43XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDI4LyoifSx7InVhIjoiWFQxMDI4In1dLCJkcGkiOlszMjYuNiwzMjcuNl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwMzQvKiJ9LHsidWEiOiJYVDEwMzQifV0sImRwaSI6WzMyNi42LDMyOC40XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDUzLyoifSx7InVhIjoiWFQxMDUzIn1dLCJkcGkiOlszMTUuMywzMTYuMV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDE1NjIvKiJ9LHsidWEiOiJYVDE1NjIifV0sImRwaSI6WzQwMy40LDQwMi43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL05leHVzIDYvKiJ9LHsidWEiOiJOZXh1cyA2IEIifV0sImRwaSI6WzQ5NC4zLDQ4OS43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTA2My8qIn0seyJ1YSI6IlhUMTA2MyJ9XSwiZHBpIjpbMjk1LDI5Ni42XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJtb3Rvcm9sYS8qL1hUMTA2NC8qIn0seyJ1YSI6IlhUMTA2NCJ9XSwiZHBpIjpbMjk1LDI5NS42XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Im1vdG9yb2xhLyovWFQxMDkyLyoifSx7InVhIjoiWFQxMDkyIn1dLCJkcGkiOls0MjIsNDI0LjFdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9YVDEwOTUvKiJ9LHsidWEiOiJYVDEwOTUifV0sImRwaSI6WzQyMiw0MjMuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoibW90b3JvbGEvKi9HNC8qIn0seyJ1YSI6Ik1vdG8gRyAoNCkifV0sImRwaSI6NDAxLCJidyI6NCwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9BMDAwMS8qIn0seyJ1YSI6IkEwMDAxIn1dLCJkcGkiOls0MDMuNCw0MDFdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6Ik9uZVBsdXMvKi9PTkUgRTEwMDUvKiJ9LHsidWEiOiJPTkUgRTEwMDUifV0sImRwaSI6WzQ0Mi40LDQ0MS40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FIEEyMDA1LyoifSx7InVhIjoiT05FIEEyMDA1In1dLCJkcGkiOlszOTEuOSw0MDUuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT25lUGx1cy8qL09ORVBMVVMgQTUwMDAvKiJ9LHsidWEiOiJPTkVQTFVTIEE1MDAwICJ9XSwiZHBpIjpbNDAzLjQxMSwzOTkuNzM3XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJPbmVQbHVzLyovT05FIEE1MDEwLyoifSx7InVhIjoiT05FUExVUyBBNTAxMCJ9XSwiZHBpIjpbNDAzLDQwMF0sImJ3IjoyLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiT1BQTy8qL1g5MDkvKiJ9LHsidWEiOiJYOTA5In1dLCJkcGkiOls0NDIuNCw0NDQuMV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL0dULUk5MDgyLyoifSx7InVhIjoiR1QtSTkwODIifV0sImRwaSI6WzE4NC43LDE4NS40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzM2MFAvKiJ9LHsidWEiOiJTTS1HMzYwUCJ9XSwiZHBpIjpbMTk2LjcsMjA1LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9OZXh1cyBTLyoifSx7InVhIjoiTmV4dXMgUyJ9XSwiZHBpIjpbMjM0LjUsMjI5LjhdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTMwMC8qIn0seyJ1YSI6IkdULUk5MzAwIn1dLCJkcGkiOlszMDQuOCwzMDMuOV0sImJ3Ijo1LCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tVDIzME5VLyoifSx7InVhIjoiU00tVDIzME5VIn1dLCJkcGkiOjIxNiwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TR0gtVDM5OS8qIn0seyJ1YSI6IlNHSC1UMzk5In1dLCJkcGkiOlsyMTcuNywyMzEuNF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NHSC1NOTE5LyoifSx7InVhIjoiU0dILU05MTkifV0sImRwaSI6WzQ0MC44LDQzNy43XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkwMDUvKiJ9LHsidWEiOiJTTS1OOTAwNSJ9XSwiZHBpIjpbMzg2LjQsMzg3XSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TQU1TVU5HLVNNLU45MDBBLyoifSx7InVhIjoiU0FNU1VORy1TTS1OOTAwQSJ9XSwiZHBpIjpbMzg2LjQsMzg3LjddLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTUwMC8qIn0seyJ1YSI6IkdULUk5NTAwIn1dLCJkcGkiOls0NDIuNSw0NDMuM10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR1QtSTk1MDUvKiJ9LHsidWEiOiJHVC1JOTUwNSJ9XSwiZHBpIjo0MzkuNCwiYnciOjQsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkwMEYvKiJ9LHsidWEiOiJTTS1HOTAwRiJ9XSwiZHBpIjpbNDE1LjYsNDMxLjZdLCJidyI6NSwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTAwTS8qIn0seyJ1YSI6IlNNLUc5MDBNIn1dLCJkcGkiOls0MTUuNiw0MzEuNl0sImJ3Ijo1LCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc4MDBGLyoifSx7InVhIjoiU00tRzgwMEYifV0sImRwaSI6MzI2LjgsImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MDZTLyoifSx7InVhIjoiU00tRzkwNlMifV0sImRwaSI6WzU2Mi43LDU3Mi40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR1QtSTkzMDAvKiJ9LHsidWEiOiJHVC1JOTMwMCJ9XSwiZHBpIjpbMzA2LjcsMzA0LjhdLCJidyI6NSwiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1UNTM1LyoifSx7InVhIjoiU00tVDUzNSJ9XSwiZHBpIjpbMTQyLjYsMTM2LjRdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLU45MjBDLyoifSx7InVhIjoiU00tTjkyMEMifV0sImRwaSI6WzUxNS4xLDUxOC40XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tTjkyMFAvKiJ9LHsidWEiOiJTTS1OOTIwUCJ9XSwiZHBpIjpbMzg2LjM2NTUsMzkwLjE0NF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLU45MjBXOC8qIn0seyJ1YSI6IlNNLU45MjBXOCJ9XSwiZHBpIjpbNTE1LjEsNTE4LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9HVC1JOTMwMEkvKiJ9LHsidWEiOiJHVC1JOTMwMEkifV0sImRwaSI6WzMwNC44LDMwNS44XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR1QtSTkxOTUvKiJ9LHsidWEiOiJHVC1JOTE5NSJ9XSwiZHBpIjpbMjQ5LjQsMjU2LjddLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NQSC1MNTIwLyoifSx7InVhIjoiU1BILUw1MjAifV0sImRwaSI6WzI0OS40LDI1NS45XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU0FNU1VORy1TR0gtSTcxNy8qIn0seyJ1YSI6IlNBTVNVTkctU0dILUk3MTcifV0sImRwaSI6Mjg1LjgsImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NQSC1ENzEwLyoifSx7InVhIjoiU1BILUQ3MTAifV0sImRwaSI6WzIxNy43LDIwNC4yXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR1QtTjcxMDAvKiJ9LHsidWEiOiJHVC1ONzEwMCJ9XSwiZHBpIjoyNjUuMSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU0NILUk2MDUvKiJ9LHsidWEiOiJTQ0gtSTYwNSJ9XSwiZHBpIjoyNjUuMSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovR2FsYXh5IE5leHVzLyoifSx7InVhIjoiR2FsYXh5IE5leHVzIn1dLCJkcGkiOlszMTUuMywzMTQuMl0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLU45MTBILyoifSx7InVhIjoiU00tTjkxMEgifV0sImRwaSI6WzUxNS4xLDUxOF0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLU45MTBDLyoifSx7InVhIjoiU00tTjkxMEMifV0sImRwaSI6WzUxNS4yLDUyMC4yXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HMTMwTS8qIn0seyJ1YSI6IlNNLUcxMzBNIn1dLCJkcGkiOlsxNjUuOSwxNjQuOF0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkyOEkvKiJ9LHsidWEiOiJTTS1HOTI4SSJ9XSwiZHBpIjpbNTE1LjEsNTE4LjRdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTIwRi8qIn0seyJ1YSI6IlNNLUc5MjBGIn1dLCJkcGkiOjU4MC42LCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MjBQLyoifSx7InVhIjoiU00tRzkyMFAifV0sImRwaSI6WzUyMi41LDU3N10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5MjVGLyoifSx7InVhIjoiU00tRzkyNUYifV0sImRwaSI6NTgwLjYsImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzkyNVYvKiJ9LHsidWEiOiJTTS1HOTI1ViJ9XSwiZHBpIjpbNTIyLjUsNTc2LjZdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTMwRi8qIn0seyJ1YSI6IlNNLUc5MzBGIn1dLCJkcGkiOjU3Ni42LCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTM1Ri8qIn0seyJ1YSI6IlNNLUc5MzVGIn1dLCJkcGkiOjUzMywiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6InNhbXN1bmcvKi9TTS1HOTUwRi8qIn0seyJ1YSI6IlNNLUc5NTBGIn1dLCJkcGkiOls1NjIuNzA3LDU2NS4yOTNdLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoic2Ftc3VuZy8qL1NNLUc5NTVVLyoifSx7InVhIjoiU00tRzk1NVUifV0sImRwaSI6WzUyMi41MTQsNTI1Ljc2Ml0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJzYW1zdW5nLyovU00tRzk1NUYvKiJ9LHsidWEiOiJTTS1HOTU1RiJ9XSwiZHBpIjpbNTIyLjUxNCw1MjUuNzYyXSwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IlNvbnkvKi9DNjkwMy8qIn0seyJ1YSI6IkM2OTAzIn1dLCJkcGkiOls0NDIuNSw0NDMuM10sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJTb255LyovRDY2NTMvKiJ9LHsidWEiOiJENjY1MyJ9XSwiZHBpIjpbNDI4LjYsNDI3LjZdLCJidyI6MywiYWMiOjEwMDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IlNvbnkvKi9FNjY1My8qIn0seyJ1YSI6IkU2NjUzIn1dLCJkcGkiOls0MjguNiw0MjUuN10sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiU29ueS8qL0U2ODUzLyoifSx7InVhIjoiRTY4NTMifV0sImRwaSI6WzQwMy40LDQwMS45XSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJTb255LyovU0dQMzIxLyoifSx7InVhIjoiU0dQMzIxIn1dLCJkcGkiOlsyMjQuNywyMjQuMV0sImJ3IjozLCJhYyI6NTAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJUQ1QvKi9BTENBVEVMIE9ORSBUT1VDSCBGaWVyY2UvKiJ9LHsidWEiOiJBTENBVEVMIE9ORSBUT1VDSCBGaWVyY2UifV0sImRwaSI6WzI0MCwyNDcuNV0sImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiVEhMLyovdGhsIDUwMDAvKiJ9LHsidWEiOiJ0aGwgNTAwMCJ9XSwiZHBpIjpbNDgwLDQ0My4zXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJhbmRyb2lkIiwicnVsZXMiOlt7Im1kbWgiOiJGbHkvKi9JUTQ0MTIvKiJ9LHsidWEiOiJJUTQ0MTIifV0sImRwaSI6MzA3LjksImJ3IjozLCJhYyI6MTAwMH0seyJ0eXBlIjoiYW5kcm9pZCIsInJ1bGVzIjpbeyJtZG1oIjoiWlRFLyovWlRFIEJsYWRlIEwyLyoifSx7InVhIjoiWlRFIEJsYWRlIEwyIn1dLCJkcGkiOjI0MCwiYnciOjMsImFjIjo1MDB9LHsidHlwZSI6ImFuZHJvaWQiLCJydWxlcyI6W3sibWRtaCI6IkJFTkVWRS8qL1ZSNTE4LyoifSx7InVhIjoiVlI1MTgifV0sImRwaSI6NDgwLCJidyI6MywiYWMiOjUwMH0seyJ0eXBlIjoiaW9zIiwicnVsZXMiOlt7InJlcyI6WzY0MCw5NjBdfV0sImRwaSI6WzMyNS4xLDMyOC40XSwiYnciOjQsImFjIjoxMDAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbNjQwLDExMzZdfV0sImRwaSI6WzMxNy4xLDMyMC4yXSwiYnciOjMsImFjIjoxMDAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbNzUwLDEzMzRdfV0sImRwaSI6MzI2LjQsImJ3Ijo0LCJhYyI6MTAwMH0seyJ0eXBlIjoiaW9zIiwicnVsZXMiOlt7InJlcyI6WzEyNDIsMjIwOF19XSwiZHBpIjpbNDUzLjYsNDU4LjRdLCJidyI6NCwiYWMiOjEwMDB9LHsidHlwZSI6ImlvcyIsInJ1bGVzIjpbeyJyZXMiOlsxMTI1LDIwMDFdfV0sImRwaSI6WzQxMC45LDQxNS40XSwiYnciOjQsImFjIjoxMDAwfSx7InR5cGUiOiJpb3MiLCJydWxlcyI6W3sicmVzIjpbMTEyNSwyNDM2XX1dLCJkcGkiOjQ1OCwiYnciOjQsImFjIjoxMDAwfV07CnZhciBEUERCX0NBQ0hFID0gewoJZm9ybWF0OiBmb3JtYXQsCglsYXN0X3VwZGF0ZWQ6IGxhc3RfdXBkYXRlZCwKCWRldmljZXM6IGRldmljZXMKfTsKZnVuY3Rpb24gRHBkYih1cmwsIG9uRGV2aWNlUGFyYW1zVXBkYXRlZCkgewogIHRoaXMuZHBkYiA9IERQREJfQ0FDSEU7CiAgdGhpcy5yZWNhbGN1bGF0ZURldmljZVBhcmFtc18oKTsKICBpZiAodXJsKSB7CiAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCA9IG9uRGV2aWNlUGFyYW1zVXBkYXRlZDsKICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIHZhciBvYmogPSB0aGlzOwogICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7CiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgb2JqLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPD0gMjk5KSB7CiAgICAgICAgb2JqLmRwZGIgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7CiAgICAgICAgb2JqLnJlY2FsY3VsYXRlRGV2aWNlUGFyYW1zXygpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgb25saW5lIERQREIhJyk7CiAgICAgIH0KICAgIH0pOwogICAgeGhyLnNlbmQoKTsKICB9Cn0KRHBkYi5wcm90b3R5cGUuZ2V0RGV2aWNlUGFyYW1zID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLmRldmljZVBhcmFtczsKfTsKRHBkYi5wcm90b3R5cGUucmVjYWxjdWxhdGVEZXZpY2VQYXJhbXNfID0gZnVuY3Rpb24gKCkgewogIHZhciBuZXdEZXZpY2VQYXJhbXMgPSB0aGlzLmNhbGNEZXZpY2VQYXJhbXNfKCk7CiAgaWYgKG5ld0RldmljZVBhcmFtcykgewogICAgdGhpcy5kZXZpY2VQYXJhbXMgPSBuZXdEZXZpY2VQYXJhbXM7CiAgICBpZiAodGhpcy5vbkRldmljZVBhcmFtc1VwZGF0ZWQpIHsKICAgICAgdGhpcy5vbkRldmljZVBhcmFtc1VwZGF0ZWQodGhpcy5kZXZpY2VQYXJhbXMpOwogICAgfQogIH0gZWxzZSB7CiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcmVjYWxjdWxhdGUgZGV2aWNlIHBhcmFtZXRlcnMuJyk7CiAgfQp9OwpEcGRiLnByb3RvdHlwZS5jYWxjRGV2aWNlUGFyYW1zXyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZGIgPSB0aGlzLmRwZGI7CiAgaWYgKCFkYikgewogICAgY29uc29sZS5lcnJvcignRFBEQiBub3QgYXZhaWxhYmxlLicpOwogICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChkYi5mb3JtYXQgIT0gMSkgewogICAgY29uc29sZS5lcnJvcignRFBEQiBoYXMgdW5leHBlY3RlZCBmb3JtYXQgdmVyc2lvbi4nKTsKICAgIHJldHVybiBudWxsOwogIH0KICBpZiAoIWRiLmRldmljZXMgfHwgIWRiLmRldmljZXMubGVuZ3RoKSB7CiAgICBjb25zb2xlLmVycm9yKCdEUERCIGRvZXMgbm90IGhhdmUgYSBkZXZpY2VzIHNlY3Rpb24uJyk7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmE7CiAgdmFyIHdpZHRoID0gZ2V0U2NyZWVuV2lkdGgoKTsKICB2YXIgaGVpZ2h0ID0gZ2V0U2NyZWVuSGVpZ2h0KCk7CiAgaWYgKCFkYi5kZXZpY2VzKSB7CiAgICBjb25zb2xlLmVycm9yKCdEUERCIGhhcyBubyBkZXZpY2VzIHNlY3Rpb24uJyk7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYi5kZXZpY2VzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGV2aWNlID0gZGIuZGV2aWNlc1tpXTsKICAgIGlmICghZGV2aWNlLnJ1bGVzKSB7CiAgICAgIGNvbnNvbGUud2FybignRGV2aWNlWycgKyBpICsgJ10gaGFzIG5vIHJ1bGVzIHNlY3Rpb24uJyk7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKGRldmljZS50eXBlICE9ICdpb3MnICYmIGRldmljZS50eXBlICE9ICdhbmRyb2lkJykgewogICAgICBjb25zb2xlLndhcm4oJ0RldmljZVsnICsgaSArICddIGhhcyBpbnZhbGlkIHR5cGUuJyk7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgaWYgKGlzSU9TKCkgIT0gKGRldmljZS50eXBlID09ICdpb3MnKSkgY29udGludWU7CiAgICB2YXIgbWF0Y2hlZCA9IGZhbHNlOwogICAgZm9yICh2YXIgaiA9IDA7IGogPCBkZXZpY2UucnVsZXMubGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIHJ1bGUgPSBkZXZpY2UucnVsZXNbal07CiAgICAgIGlmICh0aGlzLnJ1bGVNYXRjaGVzXyhydWxlLCB1c2VyQWdlbnQsIHdpZHRoLCBoZWlnaHQpKSB7CiAgICAgICAgbWF0Y2hlZCA9IHRydWU7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmICghbWF0Y2hlZCkgY29udGludWU7CiAgICB2YXIgeGRwaSA9IGRldmljZS5kcGlbMF0gfHwgZGV2aWNlLmRwaTsKICAgIHZhciB5ZHBpID0gZGV2aWNlLmRwaVsxXSB8fCBkZXZpY2UuZHBpOwogICAgcmV0dXJuIG5ldyBEZXZpY2VQYXJhbXMoeyB4ZHBpOiB4ZHBpLCB5ZHBpOiB5ZHBpLCBiZXZlbE1tOiBkZXZpY2UuYncgfSk7CiAgfQogIGNvbnNvbGUud2FybignTm8gRFBEQiBkZXZpY2UgbWF0Y2guJyk7CiAgcmV0dXJuIG51bGw7Cn07CkRwZGIucHJvdG90eXBlLnJ1bGVNYXRjaGVzXyA9IGZ1bmN0aW9uIChydWxlLCB1YSwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkgewogIGlmICghcnVsZS51YSAmJiAhcnVsZS5yZXMpIHJldHVybiBmYWxzZTsKICBpZiAocnVsZS51YSAmJiBydWxlLnVhLnN1YnN0cmluZygwLCAyKSA9PT0gJ1NNJykgcnVsZS51YSA9IHJ1bGUudWEuc3Vic3RyaW5nKDAsIDcpOwogIGlmIChydWxlLnVhICYmIHVhLmluZGV4T2YocnVsZS51YSkgPCAwKSByZXR1cm4gZmFsc2U7CiAgaWYgKHJ1bGUucmVzKSB7CiAgICBpZiAoIXJ1bGUucmVzWzBdIHx8ICFydWxlLnJlc1sxXSkgcmV0dXJuIGZhbHNlOwogICAgdmFyIHJlc1ggPSBydWxlLnJlc1swXTsKICAgIHZhciByZXNZID0gcnVsZS5yZXNbMV07CiAgICBpZiAoTWF0aC5taW4oc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkgIT0gTWF0aC5taW4ocmVzWCwgcmVzWSkgfHwgTWF0aC5tYXgoc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkgIT0gTWF0aC5tYXgocmVzWCwgcmVzWSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KICByZXR1cm4gdHJ1ZTsKfTsKZnVuY3Rpb24gRGV2aWNlUGFyYW1zKHBhcmFtcykgewogIHRoaXMueGRwaSA9IHBhcmFtcy54ZHBpOwogIHRoaXMueWRwaSA9IHBhcmFtcy55ZHBpOwogIHRoaXMuYmV2ZWxNbSA9IHBhcmFtcy5iZXZlbE1tOwp9CmZ1bmN0aW9uIFNlbnNvclNhbXBsZShzYW1wbGUsIHRpbWVzdGFtcFMpIHsKICB0aGlzLnNldChzYW1wbGUsIHRpbWVzdGFtcFMpOwp9ClNlbnNvclNhbXBsZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHNhbXBsZSwgdGltZXN0YW1wUykgewogIHRoaXMuc2FtcGxlID0gc2FtcGxlOwogIHRoaXMudGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7Cn07ClNlbnNvclNhbXBsZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzZW5zb3JTYW1wbGUpIHsKICB0aGlzLnNldChzZW5zb3JTYW1wbGUuc2FtcGxlLCBzZW5zb3JTYW1wbGUudGltZXN0YW1wUyk7Cn07CmZ1bmN0aW9uIENvbXBsZW1lbnRhcnlGaWx0ZXIoa0ZpbHRlciwgaXNEZWJ1ZykgewogIHRoaXMua0ZpbHRlciA9IGtGaWx0ZXI7CiAgdGhpcy5pc0RlYnVnID0gaXNEZWJ1ZzsKICB0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50ID0gbmV3IFNlbnNvclNhbXBsZSgpOwogIHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTsKICB0aGlzLnByZXZpb3VzR3lyb01lYXN1cmVtZW50ID0gbmV3IFNlbnNvclNhbXBsZSgpOwogIGlmIChpc0lPUygpKSB7CiAgICB0aGlzLmZpbHRlclEgPSBuZXcgUXVhdGVybmlvbigtMSwgMCwgMCwgMSk7CiAgfSBlbHNlIHsKICAgIHRoaXMuZmlsdGVyUSA9IG5ldyBRdWF0ZXJuaW9uKDEsIDAsIDAsIDEpOwogIH0KICB0aGlzLnByZXZpb3VzRmlsdGVyUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgdGhpcy5wcmV2aW91c0ZpbHRlclEuY29weSh0aGlzLmZpbHRlclEpOwogIHRoaXMuYWNjZWxRID0gbmV3IFF1YXRlcm5pb24oKTsKICB0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCA9IGZhbHNlOwogIHRoaXMuZXN0aW1hdGVkR3Jhdml0eSA9IG5ldyBWZWN0b3IzKCk7CiAgdGhpcy5tZWFzdXJlZEdyYXZpdHkgPSBuZXcgVmVjdG9yMygpOwogIHRoaXMuZ3lyb0ludGVncmFsUSA9IG5ldyBRdWF0ZXJuaW9uKCk7Cn0KQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUuYWRkQWNjZWxNZWFzdXJlbWVudCA9IGZ1bmN0aW9uICh2ZWN0b3IsIHRpbWVzdGFtcFMpIHsKICB0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpOwp9OwpDb21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRHeXJvTWVhc3VyZW1lbnQgPSBmdW5jdGlvbiAodmVjdG9yLCB0aW1lc3RhbXBTKSB7CiAgdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpOwogIHZhciBkZWx0YVQgPSB0aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTOwogIGlmIChpc1RpbWVzdGFtcERlbHRhVmFsaWQoZGVsdGFUKSkgewogICAgdGhpcy5ydW5fKCk7CiAgfQogIHRoaXMucHJldmlvdXNHeXJvTWVhc3VyZW1lbnQuY29weSh0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQpOwp9OwpDb21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5ydW5fID0gZnVuY3Rpb24gKCkgewogIGlmICghdGhpcy5pc09yaWVudGF0aW9uSW5pdGlhbGl6ZWQpIHsKICAgIHRoaXMuYWNjZWxRID0gdGhpcy5hY2NlbFRvUXVhdGVybmlvbl8odGhpcy5jdXJyZW50QWNjZWxNZWFzdXJlbWVudC5zYW1wbGUpOwogICAgdGhpcy5wcmV2aW91c0ZpbHRlclEuY29weSh0aGlzLmFjY2VsUSk7CiAgICB0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCA9IHRydWU7CiAgICByZXR1cm47CiAgfQogIHZhciBkZWx0YVQgPSB0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQudGltZXN0YW1wUyAtIHRoaXMucHJldmlvdXNHeXJvTWVhc3VyZW1lbnQudGltZXN0YW1wUzsKICB2YXIgZ3lyb0RlbHRhUSA9IHRoaXMuZ3lyb1RvUXVhdGVybmlvbkRlbHRhXyh0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQuc2FtcGxlLCBkZWx0YVQpOwogIHRoaXMuZ3lyb0ludGVncmFsUS5tdWx0aXBseShneXJvRGVsdGFRKTsKICB0aGlzLmZpbHRlclEuY29weSh0aGlzLnByZXZpb3VzRmlsdGVyUSk7CiAgdGhpcy5maWx0ZXJRLm11bHRpcGx5KGd5cm9EZWx0YVEpOwogIHZhciBpbnZGaWx0ZXJRID0gbmV3IFF1YXRlcm5pb24oKTsKICBpbnZGaWx0ZXJRLmNvcHkodGhpcy5maWx0ZXJRKTsKICBpbnZGaWx0ZXJRLmludmVyc2UoKTsKICB0aGlzLmVzdGltYXRlZEdyYXZpdHkuc2V0KDAsIDAsIC0xKTsKICB0aGlzLmVzdGltYXRlZEdyYXZpdHkuYXBwbHlRdWF0ZXJuaW9uKGludkZpbHRlclEpOwogIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS5ub3JtYWxpemUoKTsKICB0aGlzLm1lYXN1cmVkR3Jhdml0eS5jb3B5KHRoaXMuY3VycmVudEFjY2VsTWVhc3VyZW1lbnQuc2FtcGxlKTsKICB0aGlzLm1lYXN1cmVkR3Jhdml0eS5ub3JtYWxpemUoKTsKICB2YXIgZGVsdGFRID0gbmV3IFF1YXRlcm5pb24oKTsKICBkZWx0YVEuc2V0RnJvbVVuaXRWZWN0b3JzKHRoaXMuZXN0aW1hdGVkR3Jhdml0eSwgdGhpcy5tZWFzdXJlZEdyYXZpdHkpOwogIGRlbHRhUS5pbnZlcnNlKCk7CiAgaWYgKHRoaXMuaXNEZWJ1ZykgewogICAgY29uc29sZS5sb2coJ0RlbHRhOiAlZCBkZWcsIEdfZXN0OiAoJXMsICVzLCAlcyksIEdfbWVhczogKCVzLCAlcywgJXMpJywgcmFkVG9EZWcgKiBnZXRRdWF0ZXJuaW9uQW5nbGUoZGVsdGFRKSwgdGhpcy5lc3RpbWF0ZWRHcmF2aXR5LngudG9GaXhlZCgxKSwgdGhpcy5lc3RpbWF0ZWRHcmF2aXR5LnkudG9GaXhlZCgxKSwgdGhpcy5lc3RpbWF0ZWRHcmF2aXR5LnoudG9GaXhlZCgxKSwgdGhpcy5tZWFzdXJlZEdyYXZpdHkueC50b0ZpeGVkKDEpLCB0aGlzLm1lYXN1cmVkR3Jhdml0eS55LnRvRml4ZWQoMSksIHRoaXMubWVhc3VyZWRHcmF2aXR5LnoudG9GaXhlZCgxKSk7CiAgfQogIHZhciB0YXJnZXRRID0gbmV3IFF1YXRlcm5pb24oKTsKICB0YXJnZXRRLmNvcHkodGhpcy5maWx0ZXJRKTsKICB0YXJnZXRRLm11bHRpcGx5KGRlbHRhUSk7CiAgdGhpcy5maWx0ZXJRLnNsZXJwKHRhcmdldFEsIDEgLSB0aGlzLmtGaWx0ZXIpOwogIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5maWx0ZXJRKTsKfTsKQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUuZ2V0T3JpZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuZmlsdGVyUTsKfTsKQ29tcGxlbWVudGFyeUZpbHRlci5wcm90b3R5cGUuYWNjZWxUb1F1YXRlcm5pb25fID0gZnVuY3Rpb24gKGFjY2VsKSB7CiAgdmFyIG5vcm1BY2NlbCA9IG5ldyBWZWN0b3IzKCk7CiAgbm9ybUFjY2VsLmNvcHkoYWNjZWwpOwogIG5vcm1BY2NlbC5ub3JtYWxpemUoKTsKICB2YXIgcXVhdCA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgcXVhdC5zZXRGcm9tVW5pdFZlY3RvcnMobmV3IFZlY3RvcjMoMCwgMCwgLTEpLCBub3JtQWNjZWwpOwogIHF1YXQuaW52ZXJzZSgpOwogIHJldHVybiBxdWF0Owp9OwpDb21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5neXJvVG9RdWF0ZXJuaW9uRGVsdGFfID0gZnVuY3Rpb24gKGd5cm8sIGR0KSB7CiAgdmFyIHF1YXQgPSBuZXcgUXVhdGVybmlvbigpOwogIHZhciBheGlzID0gbmV3IFZlY3RvcjMoKTsKICBheGlzLmNvcHkoZ3lybyk7CiAgYXhpcy5ub3JtYWxpemUoKTsKICBxdWF0LnNldEZyb21BeGlzQW5nbGUoYXhpcywgZ3lyby5sZW5ndGgoKSAqIGR0KTsKICByZXR1cm4gcXVhdDsKfTsKZnVuY3Rpb24gUG9zZVByZWRpY3RvcihwcmVkaWN0aW9uVGltZVMsIGlzRGVidWcpIHsKICB0aGlzLnByZWRpY3Rpb25UaW1lUyA9IHByZWRpY3Rpb25UaW1lUzsKICB0aGlzLmlzRGVidWcgPSBpc0RlYnVnOwogIHRoaXMucHJldmlvdXNRID0gbmV3IFF1YXRlcm5pb24oKTsKICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IG51bGw7CiAgdGhpcy5kZWx0YVEgPSBuZXcgUXVhdGVybmlvbigpOwogIHRoaXMub3V0USA9IG5ldyBRdWF0ZXJuaW9uKCk7Cn0KUG9zZVByZWRpY3Rvci5wcm90b3R5cGUuZ2V0UHJlZGljdGlvbiA9IGZ1bmN0aW9uIChjdXJyZW50USwgZ3lybywgdGltZXN0YW1wUykgewogIGlmICghdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMpIHsKICAgIHRoaXMucHJldmlvdXNRLmNvcHkoY3VycmVudFEpOwogICAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSB0aW1lc3RhbXBTOwogICAgcmV0dXJuIGN1cnJlbnRROwogIH0KICB2YXIgYXhpcyA9IG5ldyBWZWN0b3IzKCk7CiAgYXhpcy5jb3B5KGd5cm8pOwogIGF4aXMubm9ybWFsaXplKCk7CiAgdmFyIGFuZ3VsYXJTcGVlZCA9IGd5cm8ubGVuZ3RoKCk7CiAgaWYgKGFuZ3VsYXJTcGVlZCA8IGRlZ1RvUmFkICogMjApIHsKICAgIGlmICh0aGlzLmlzRGVidWcpIHsKICAgICAgY29uc29sZS5sb2coJ01vdmluZyBzbG93bHksIGF0ICVzIGRlZy9zOiBubyBwcmVkaWN0aW9uJywgKHJhZFRvRGVnICogYW5ndWxhclNwZWVkKS50b0ZpeGVkKDEpKTsKICAgIH0KICAgIHRoaXMub3V0US5jb3B5KGN1cnJlbnRRKTsKICAgIHRoaXMucHJldmlvdXNRLmNvcHkoY3VycmVudFEpOwogICAgcmV0dXJuIHRoaXMub3V0UTsKICB9CiAgdmFyIHByZWRpY3RBbmdsZSA9IGFuZ3VsYXJTcGVlZCAqIHRoaXMucHJlZGljdGlvblRpbWVTOwogIHRoaXMuZGVsdGFRLnNldEZyb21BeGlzQW5nbGUoYXhpcywgcHJlZGljdEFuZ2xlKTsKICB0aGlzLm91dFEuY29weSh0aGlzLnByZXZpb3VzUSk7CiAgdGhpcy5vdXRRLm11bHRpcGx5KHRoaXMuZGVsdGFRKTsKICB0aGlzLnByZXZpb3VzUS5jb3B5KGN1cnJlbnRRKTsKICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7CiAgcmV0dXJuIHRoaXMub3V0UTsKfTsKZnVuY3Rpb24gRnVzaW9uUG9zZVNlbnNvcihrRmlsdGVyLCBwcmVkaWN0aW9uVGltZSwgeWF3T25seSwgaXNEZWJ1ZykgewogIHRoaXMueWF3T25seSA9IHlhd09ubHk7CiAgdGhpcy5hY2NlbGVyb21ldGVyID0gbmV3IFZlY3RvcjMoKTsKICB0aGlzLmd5cm9zY29wZSA9IG5ldyBWZWN0b3IzKCk7CiAgdGhpcy5maWx0ZXIgPSBuZXcgQ29tcGxlbWVudGFyeUZpbHRlcihrRmlsdGVyLCBpc0RlYnVnKTsKICB0aGlzLnBvc2VQcmVkaWN0b3IgPSBuZXcgUG9zZVByZWRpY3RvcihwcmVkaWN0aW9uVGltZSwgaXNEZWJ1Zyk7CiAgdGhpcy5pc0ZpcmVmb3hBbmRyb2lkID0gaXNGaXJlZm94QW5kcm9pZCgpOwogIHRoaXMuaXNJT1MgPSBpc0lPUygpOwogIHZhciBjaHJvbWVWZXJzaW9uID0gZ2V0Q2hyb21lVmVyc2lvbigpOwogIHRoaXMuaXNEZXZpY2VNb3Rpb25JblJhZGlhbnMgPSAhdGhpcy5pc0lPUyAmJiBjaHJvbWVWZXJzaW9uICYmIGNocm9tZVZlcnNpb24gPCA2NjsKICB0aGlzLmlzV2l0aG91dERldmljZU1vdGlvbiA9IGlzQ2hyb21lV2l0aG91dERldmljZU1vdGlvbigpOwogIHRoaXMuZmlsdGVyVG9Xb3JsZFEgPSBuZXcgUXVhdGVybmlvbigpOwogIGlmIChpc0lPUygpKSB7CiAgICB0aGlzLmZpbHRlclRvV29ybGRRLnNldEZyb21BeGlzQW5nbGUobmV3IFZlY3RvcjMoMSwgMCwgMCksIE1hdGguUEkgLyAyKTsKICB9IGVsc2UgewogICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDEsIDAsIDApLCAtTWF0aC5QSSAvIDIpOwogIH0KICB0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgdGhpcy53b3JsZFRvU2NyZWVuUSA9IG5ldyBRdWF0ZXJuaW9uKCk7CiAgdGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRID0gbmV3IFF1YXRlcm5pb24oKTsKICB0aGlzLm9yaWdpbmFsUG9zZUFkanVzdFEuc2V0RnJvbUF4aXNBbmdsZShuZXcgVmVjdG9yMygwLCAwLCAxKSwgLXdpbmRvdy5vcmllbnRhdGlvbiAqIE1hdGguUEkgLyAxODApOwogIHRoaXMuc2V0U2NyZWVuVHJhbnNmb3JtXygpOwogIGlmIChpc0xhbmRzY2FwZU1vZGUoKSkgewogICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5tdWx0aXBseSh0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUSk7CiAgfQogIHRoaXMucmVzZXRRID0gbmV3IFF1YXRlcm5pb24oKTsKICB0aGlzLm9yaWVudGF0aW9uT3V0XyA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7CiAgdGhpcy5zdGFydCgpOwp9CkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBudWxsOwp9OwpGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5nZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICB2YXIgb3JpZW50YXRpb24gPSB2b2lkIDA7CiAgaWYgKHRoaXMuaXNXaXRob3V0RGV2aWNlTW90aW9uICYmIHRoaXMuX2RldmljZU9yaWVudGF0aW9uUSkgewogICAgdGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpeFEgPSB0aGlzLmRldmljZU9yaWVudGF0aW9uRml4USB8fCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB6ID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDAsIC0xKSwgMCk7CiAgICAgIHZhciB5ID0gbmV3IFF1YXRlcm5pb24oKTsKICAgICAgaWYgKHdpbmRvdy5vcmllbnRhdGlvbiA9PT0gLTkwKSB7CiAgICAgICAgeS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDEsIDApLCBNYXRoLlBJIC8gLTIpOwogICAgICB9IGVsc2UgewogICAgICAgIHkuc2V0RnJvbUF4aXNBbmdsZShuZXcgVmVjdG9yMygwLCAxLCAwKSwgTWF0aC5QSSAvIDIpOwogICAgICB9CiAgICAgIHJldHVybiB6Lm11bHRpcGx5KHkpOwogICAgfSgpOwogICAgdGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpbHRlclRvV29ybGRRID0gdGhpcy5kZXZpY2VPcmllbnRhdGlvbkZpbHRlclRvV29ybGRRIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHEgPSBuZXcgUXVhdGVybmlvbigpOwogICAgICBxLnNldEZyb21BeGlzQW5nbGUobmV3IFZlY3RvcjMoMSwgMCwgMCksIC1NYXRoLlBJIC8gMik7CiAgICAgIHJldHVybiBxOwogICAgfSgpOwogICAgb3JpZW50YXRpb24gPSB0aGlzLl9kZXZpY2VPcmllbnRhdGlvblE7CiAgICB2YXIgb3V0ID0gbmV3IFF1YXRlcm5pb24oKTsKICAgIG91dC5jb3B5KG9yaWVudGF0aW9uKTsKICAgIG91dC5tdWx0aXBseSh0aGlzLmRldmljZU9yaWVudGF0aW9uRmlsdGVyVG9Xb3JsZFEpOwogICAgb3V0Lm11bHRpcGx5KHRoaXMucmVzZXRRKTsKICAgIG91dC5tdWx0aXBseSh0aGlzLndvcmxkVG9TY3JlZW5RKTsKICAgIG91dC5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMuZGV2aWNlT3JpZW50YXRpb25GaXhRLCBvdXQpOwogICAgaWYgKHRoaXMueWF3T25seSkgewogICAgICBvdXQueCA9IDA7CiAgICAgIG91dC56ID0gMDsKICAgICAgb3V0Lm5vcm1hbGl6ZSgpOwogICAgfQogICAgdGhpcy5vcmllbnRhdGlvbk91dF9bMF0gPSBvdXQueDsKICAgIHRoaXMub3JpZW50YXRpb25PdXRfWzFdID0gb3V0Lnk7CiAgICB0aGlzLm9yaWVudGF0aW9uT3V0X1syXSA9IG91dC56OwogICAgdGhpcy5vcmllbnRhdGlvbk91dF9bM10gPSBvdXQudzsKICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uT3V0XzsKICB9IGVsc2UgewogICAgdmFyIGZpbHRlck9yaWVudGF0aW9uID0gdGhpcy5maWx0ZXIuZ2V0T3JpZW50YXRpb24oKTsKICAgIG9yaWVudGF0aW9uID0gdGhpcy5wb3NlUHJlZGljdG9yLmdldFByZWRpY3Rpb24oZmlsdGVyT3JpZW50YXRpb24sIHRoaXMuZ3lyb3Njb3BlLCB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyk7CiAgfQogIHZhciBvdXQgPSBuZXcgUXVhdGVybmlvbigpOwogIG91dC5jb3B5KHRoaXMuZmlsdGVyVG9Xb3JsZFEpOwogIG91dC5tdWx0aXBseSh0aGlzLnJlc2V0USk7CiAgb3V0Lm11bHRpcGx5KG9yaWVudGF0aW9uKTsKICBvdXQubXVsdGlwbHkodGhpcy53b3JsZFRvU2NyZWVuUSk7CiAgaWYgKHRoaXMueWF3T25seSkgewogICAgb3V0LnggPSAwOwogICAgb3V0LnogPSAwOwogICAgb3V0Lm5vcm1hbGl6ZSgpOwogIH0KICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IG91dC54OwogIHRoaXMub3JpZW50YXRpb25PdXRfWzFdID0gb3V0Lnk7CiAgdGhpcy5vcmllbnRhdGlvbk91dF9bMl0gPSBvdXQuejsKICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IG91dC53OwogIHJldHVybiB0aGlzLm9yaWVudGF0aW9uT3V0XzsKfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUucmVzZXRQb3NlID0gZnVuY3Rpb24gKCkgewogIHRoaXMucmVzZXRRLmNvcHkodGhpcy5maWx0ZXIuZ2V0T3JpZW50YXRpb24oKSk7CiAgdGhpcy5yZXNldFEueCA9IDA7CiAgdGhpcy5yZXNldFEueSA9IDA7CiAgdGhpcy5yZXNldFEueiAqPSAtMTsKICB0aGlzLnJlc2V0US5ub3JtYWxpemUoKTsKICBpZiAoaXNMYW5kc2NhcGVNb2RlKCkpIHsKICAgIHRoaXMucmVzZXRRLm11bHRpcGx5KHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RKTsKICB9CiAgdGhpcy5yZXNldFEubXVsdGlwbHkodGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRKTsKfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25EZXZpY2VPcmllbnRhdGlvbl8gPSBmdW5jdGlvbiAoZSkgewogIHRoaXMuX2RldmljZU9yaWVudGF0aW9uUSA9IHRoaXMuX2RldmljZU9yaWVudGF0aW9uUSB8fCBuZXcgUXVhdGVybmlvbigpOwogIHZhciBhbHBoYSA9IGUuYWxwaGEsCiAgICAgIGJldGEgPSBlLmJldGEsCiAgICAgIGdhbW1hID0gZS5nYW1tYTsKICBhbHBoYSA9IChhbHBoYSB8fCAwKSAqIE1hdGguUEkgLyAxODA7CiAgYmV0YSA9IChiZXRhIHx8IDApICogTWF0aC5QSSAvIDE4MDsKICBnYW1tYSA9IChnYW1tYSB8fCAwKSAqIE1hdGguUEkgLyAxODA7CiAgdGhpcy5fZGV2aWNlT3JpZW50YXRpb25RLnNldEZyb21FdWxlcllYWihiZXRhLCBhbHBoYSwgLWdhbW1hKTsKfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25EZXZpY2VNb3Rpb25fID0gZnVuY3Rpb24gKGRldmljZU1vdGlvbikgewogIHRoaXMudXBkYXRlRGV2aWNlTW90aW9uXyhkZXZpY2VNb3Rpb24pOwp9OwpGdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS51cGRhdGVEZXZpY2VNb3Rpb25fID0gZnVuY3Rpb24gKGRldmljZU1vdGlvbikgewogIHZhciBhY2NHcmF2aXR5ID0gZGV2aWNlTW90aW9uLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7CiAgdmFyIHJvdFJhdGUgPSBkZXZpY2VNb3Rpb24ucm90YXRpb25SYXRlOwogIHZhciB0aW1lc3RhbXBTID0gZGV2aWNlTW90aW9uLnRpbWVTdGFtcCAvIDEwMDA7CiAgdmFyIGRlbHRhUyA9IHRpbWVzdGFtcFMgLSB0aGlzLnByZXZpb3VzVGltZXN0YW1wUzsKICBpZiAoZGVsdGFTIDwgMCkgewogICAgd2Fybk9uY2UoJ2Z1c2lvbi1wb3NlLXNlbnNvcjppbnZhbGlkOm5vbi1tb25vdG9uaWMnLCAnSW52YWxpZCB0aW1lc3RhbXBzIGRldGVjdGVkOiBub24tbW9ub3RvbmljIHRpbWVzdGFtcCBmcm9tIGRldmljZW1vdGlvbicpOwogICAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSB0aW1lc3RhbXBTOwogICAgcmV0dXJuOwogIH0gZWxzZSBpZiAoZGVsdGFTIDw9IE1JTl9USU1FU1RFUCB8fCBkZWx0YVMgPiBNQVhfVElNRVNURVApIHsKICAgIHdhcm5PbmNlKCdmdXNpb24tcG9zZS1zZW5zb3I6aW52YWxpZDpvdXRzaWRlLXRocmVzaG9sZCcsICdJbnZhbGlkIHRpbWVzdGFtcHMgZGV0ZWN0ZWQ6IFRpbWVzdGFtcCBmcm9tIGRldmljZW1vdGlvbiBvdXRzaWRlIGV4cGVjdGVkIHJhbmdlLicpOwogICAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSB0aW1lc3RhbXBTOwogICAgcmV0dXJuOwogIH0KICB0aGlzLmFjY2VsZXJvbWV0ZXIuc2V0KC1hY2NHcmF2aXR5LngsIC1hY2NHcmF2aXR5LnksIC1hY2NHcmF2aXR5LnopOwogIGlmIChpc1I3KCkpIHsKICAgIHRoaXMuZ3lyb3Njb3BlLnNldCgtcm90UmF0ZS5iZXRhLCByb3RSYXRlLmFscGhhLCByb3RSYXRlLmdhbW1hKTsKICB9IGVsc2UgewogICAgdGhpcy5neXJvc2NvcGUuc2V0KHJvdFJhdGUuYWxwaGEsIHJvdFJhdGUuYmV0YSwgcm90UmF0ZS5nYW1tYSk7CiAgfQogIGlmICghdGhpcy5pc0RldmljZU1vdGlvbkluUmFkaWFucykgewogICAgdGhpcy5neXJvc2NvcGUubXVsdGlwbHlTY2FsYXIoTWF0aC5QSSAvIDE4MCk7CiAgfQogIHRoaXMuZmlsdGVyLmFkZEFjY2VsTWVhc3VyZW1lbnQodGhpcy5hY2NlbGVyb21ldGVyLCB0aW1lc3RhbXBTKTsKICB0aGlzLmZpbHRlci5hZGRHeXJvTWVhc3VyZW1lbnQodGhpcy5neXJvc2NvcGUsIHRpbWVzdGFtcFMpOwogIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUzsKfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25PcmllbnRhdGlvbkNoYW5nZV8gPSBmdW5jdGlvbiAoc2NyZWVuT3JpZW50YXRpb24pIHsKICB0aGlzLnNldFNjcmVlblRyYW5zZm9ybV8oKTsKfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25NZXNzYWdlXyA9IGZ1bmN0aW9uIChldmVudCkgewogIHZhciBtZXNzYWdlID0gZXZlbnQuZGF0YTsKICBpZiAoIW1lc3NhZ2UgfHwgIW1lc3NhZ2UudHlwZSkgewogICAgcmV0dXJuOwogIH0KICB2YXIgdHlwZSA9IG1lc3NhZ2UudHlwZS50b0xvd2VyQ2FzZSgpOwogIGlmICh0eXBlICE9PSAnZGV2aWNlbW90aW9uJykgewogICAgcmV0dXJuOwogIH0KICB0aGlzLnVwZGF0ZURldmljZU1vdGlvbl8obWVzc2FnZS5kZXZpY2VNb3Rpb25FdmVudCk7Cn07CkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLnNldFNjcmVlblRyYW5zZm9ybV8gPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy53b3JsZFRvU2NyZWVuUS5zZXQoMCwgMCwgMCwgMSk7CiAgc3dpdGNoICh3aW5kb3cub3JpZW50YXRpb24pIHsKICAgIGNhc2UgMDoKICAgICAgYnJlYWs7CiAgICBjYXNlIDkwOgogICAgICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldEZyb21BeGlzQW5nbGUobmV3IFZlY3RvcjMoMCwgMCwgMSksIC1NYXRoLlBJIC8gMik7CiAgICAgIGJyZWFrOwogICAgY2FzZSAtOTA6CiAgICAgIHRoaXMud29ybGRUb1NjcmVlblEuc2V0RnJvbUF4aXNBbmdsZShuZXcgVmVjdG9yMygwLCAwLCAxKSwgTWF0aC5QSSAvIDIpOwogICAgICBicmVhazsKICAgIGNhc2UgMTgwOgogICAgICBicmVhazsKICB9CiAgdGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEuY29weSh0aGlzLndvcmxkVG9TY3JlZW5RKTsKICB0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUS5pbnZlcnNlKCk7Cn07CkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkgewogIHRoaXMub25EZXZpY2VNb3Rpb25DYWxsYmFja18gPSB0aGlzLm9uRGV2aWNlTW90aW9uXy5iaW5kKHRoaXMpOwogIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrXyA9IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKTsKICB0aGlzLm9uTWVzc2FnZUNhbGxiYWNrXyA9IHRoaXMub25NZXNzYWdlXy5iaW5kKHRoaXMpOwogIHRoaXMub25EZXZpY2VPcmllbnRhdGlvbkNhbGxiYWNrXyA9IHRoaXMub25EZXZpY2VPcmllbnRhdGlvbl8uYmluZCh0aGlzKTsKICBpZiAoaXNJT1MoKSAmJiBpc0luc2lkZUNyb3NzT3JpZ2luSUZyYW1lKCkpIHsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbk1lc3NhZ2VDYWxsYmFja18pOwogIH0KICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFja18pOwogIGlmICh0aGlzLmlzV2l0aG91dERldmljZU1vdGlvbikgewogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW9yaWVudGF0aW9uJywgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQ2FsbGJhY2tfKTsKICB9IGVsc2UgewogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW1vdGlvbicsIHRoaXMub25EZXZpY2VNb3Rpb25DYWxsYmFja18pOwogIH0KfTsKRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgdGhpcy5vbkRldmljZU1vdGlvbkNhbGxiYWNrXyk7CiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RldmljZW9yaWVudGF0aW9uJywgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQ2FsbGJhY2tfKTsKICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFja18pOwogIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5vbk1lc3NhZ2VDYWxsYmFja18pOwp9Owp2YXIgU0VOU09SX0ZSRVFVRU5DWSA9IDYwOwp2YXIgWF9BWElTID0gbmV3IFZlY3RvcjMoMSwgMCwgMCk7CnZhciBaX0FYSVMgPSBuZXcgVmVjdG9yMygwLCAwLCAxKTsKdmFyIFNFTlNPUl9UT19WUiA9IG5ldyBRdWF0ZXJuaW9uKCk7ClNFTlNPUl9UT19WUi5zZXRGcm9tQXhpc0FuZ2xlKFhfQVhJUywgLU1hdGguUEkgLyAyKTsKU0VOU09SX1RPX1ZSLm11bHRpcGx5KG5ldyBRdWF0ZXJuaW9uKCkuc2V0RnJvbUF4aXNBbmdsZShaX0FYSVMsIE1hdGguUEkgLyAyKSk7CnZhciBQb3NlU2Vuc29yID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBvc2VTZW5zb3IoY29uZmlnKSB7CiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3NlU2Vuc29yKTsKICAgIHRoaXMuY29uZmlnID0gY29uZmlnOwogICAgdGhpcy5zZW5zb3IgPSBudWxsOwogICAgdGhpcy5mdXNpb25TZW5zb3IgPSBudWxsOwogICAgdGhpcy5fb3V0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTsKICAgIHRoaXMuYXBpID0gbnVsbDsKICAgIHRoaXMuZXJyb3JzID0gW107CiAgICB0aGlzLl9zZW5zb3JRID0gbmV3IFF1YXRlcm5pb24oKTsKICAgIHRoaXMuX291dFEgPSBuZXcgUXVhdGVybmlvbigpOwogICAgdGhpcy5fb25TZW5zb3JSZWFkID0gdGhpcy5fb25TZW5zb3JSZWFkLmJpbmQodGhpcyk7CiAgICB0aGlzLl9vblNlbnNvckVycm9yID0gdGhpcy5fb25TZW5zb3JFcnJvci5iaW5kKHRoaXMpOwogICAgdGhpcy5pbml0KCk7CiAgfQogIGNyZWF0ZUNsYXNzKFBvc2VTZW5zb3IsIFt7CiAgICBrZXk6ICdpbml0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICB2YXIgc2Vuc29yID0gbnVsbDsKICAgICAgdHJ5IHsKICAgICAgICBzZW5zb3IgPSBuZXcgUmVsYXRpdmVPcmllbnRhdGlvblNlbnNvcih7CiAgICAgICAgICBmcmVxdWVuY3k6IFNFTlNPUl9GUkVRVUVOQ1ksCiAgICAgICAgICByZWZlcmVuY2VGcmFtZTogJ3NjcmVlbicKICAgICAgICB9KTsKICAgICAgICBzZW5zb3IuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9vblNlbnNvckVycm9yKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVycm9yKTsKICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ1NlY3VyaXR5RXJyb3InKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgY29uc3RydWN0IHNlbnNvcnMgZHVlIHRvIHRoZSBGZWF0dXJlIFBvbGljeScpOwogICAgICAgICAgY29uc29sZS53YXJuKCdBdHRlbXB0aW5nIHRvIGZhbGwgYmFjayB1c2luZyAiZGV2aWNlbW90aW9uIjsgaG93ZXZlciB0aGlzIHdpbGwgJyArICdmYWlsIGluIHRoZSBmdXR1cmUgd2l0aG91dCBjb3JyZWN0IHBlcm1pc3Npb25zLicpOwogICAgICAgICAgdGhpcy51c2VEZXZpY2VNb3Rpb24oKTsKICAgICAgICB9IGVsc2UgaWYgKGVycm9yLm5hbWUgPT09ICdSZWZlcmVuY2VFcnJvcicpIHsKICAgICAgICAgIHRoaXMudXNlRGV2aWNlTW90aW9uKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoc2Vuc29yKSB7CiAgICAgICAgdGhpcy5hcGkgPSAnc2Vuc29yJzsKICAgICAgICB0aGlzLnNlbnNvciA9IHNlbnNvcjsKICAgICAgICB0aGlzLnNlbnNvci5hZGRFdmVudExpc3RlbmVyKCdyZWFkaW5nJywgdGhpcy5fb25TZW5zb3JSZWFkKTsKICAgICAgICB0aGlzLnNlbnNvci5zdGFydCgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAndXNlRGV2aWNlTW90aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VEZXZpY2VNb3Rpb24oKSB7CiAgICAgIHRoaXMuYXBpID0gJ2RldmljZW1vdGlvbic7CiAgICAgIHRoaXMuZnVzaW9uU2Vuc29yID0gbmV3IEZ1c2lvblBvc2VTZW5zb3IodGhpcy5jb25maWcuS19GSUxURVIsIHRoaXMuY29uZmlnLlBSRURJQ1RJT05fVElNRV9TLCB0aGlzLmNvbmZpZy5ZQVdfT05MWSwgdGhpcy5jb25maWcuREVCVUcpOwogICAgICBpZiAodGhpcy5zZW5zb3IpIHsKICAgICAgICB0aGlzLnNlbnNvci5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkaW5nJywgdGhpcy5fb25TZW5zb3JSZWFkKTsKICAgICAgICB0aGlzLnNlbnNvci5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX29uU2Vuc29yRXJyb3IpOwogICAgICAgIHRoaXMuc2Vuc29yID0gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldE9yaWVudGF0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcmllbnRhdGlvbigpIHsKICAgICAgaWYgKHRoaXMuZnVzaW9uU2Vuc29yKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZnVzaW9uU2Vuc29yLmdldE9yaWVudGF0aW9uKCk7CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLnNlbnNvciB8fCAhdGhpcy5zZW5zb3IucXVhdGVybmlvbikgewogICAgICAgIHRoaXMuX291dFswXSA9IHRoaXMuX291dFsxXSA9IHRoaXMuX291dFsyXSA9IDA7CiAgICAgICAgdGhpcy5fb3V0WzNdID0gMTsKICAgICAgICByZXR1cm4gdGhpcy5fb3V0OwogICAgICB9CiAgICAgIHZhciBxID0gdGhpcy5zZW5zb3IucXVhdGVybmlvbjsKICAgICAgdGhpcy5fc2Vuc29yUS5zZXQocVswXSwgcVsxXSwgcVsyXSwgcVszXSk7CiAgICAgIHZhciBvdXQgPSB0aGlzLl9vdXRROwogICAgICBvdXQuY29weShTRU5TT1JfVE9fVlIpOwogICAgICBvdXQubXVsdGlwbHkodGhpcy5fc2Vuc29yUSk7CiAgICAgIGlmICh0aGlzLmNvbmZpZy5ZQVdfT05MWSkgewogICAgICAgIG91dC54ID0gb3V0LnogPSAwOwogICAgICAgIG91dC5ub3JtYWxpemUoKTsKICAgICAgfQogICAgICB0aGlzLl9vdXRbMF0gPSBvdXQueDsKICAgICAgdGhpcy5fb3V0WzFdID0gb3V0Lnk7CiAgICAgIHRoaXMuX291dFsyXSA9IG91dC56OwogICAgICB0aGlzLl9vdXRbM10gPSBvdXQudzsKICAgICAgcmV0dXJuIHRoaXMuX291dDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfb25TZW5zb3JFcnJvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uU2Vuc29yRXJyb3IoZXZlbnQpIHsKICAgICAgdGhpcy5lcnJvcnMucHVzaChldmVudC5lcnJvcik7CiAgICAgIGlmIChldmVudC5lcnJvci5uYW1lID09PSAnTm90QWxsb3dlZEVycm9yJykgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Blcm1pc3Npb24gdG8gYWNjZXNzIHNlbnNvciB3YXMgZGVuaWVkJyk7CiAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZXJyb3IubmFtZSA9PT0gJ05vdFJlYWRhYmxlRXJyb3InKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignU2Vuc29yIGNvdWxkIG5vdCBiZSByZWFkJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcihldmVudC5lcnJvcik7CiAgICAgIH0KICAgICAgdGhpcy51c2VEZXZpY2VNb3Rpb24oKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfb25TZW5zb3JSZWFkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TZW5zb3JSZWFkKCkge30KICB9XSk7CiAgcmV0dXJuIFBvc2VTZW5zb3I7Cn0oKTsKdmFyIHJvdGF0ZUluc3RydWN0aW9uc0Fzc2V0ID0gIjxzdmcgd2lkdGg9JzE5OCcgaGVpZ2h0PScyNDAnIHZpZXdCb3g9JzAgMCAxOTggMjQwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnPjxnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCc+PHBhdGggZD0nTTE0OS42MjUgMTA5LjUyN2w2LjczNyAzLjg5MXYuODg2YzAgLjE3Ny4wMTMuMzYuMDM4LjU0OS4wMS4wODEuMDIuMTYyLjAyNy4yNDIuMTQgMS40MTUuOTc0IDIuOTk4IDIuMTA1IDMuOTk5bDUuNzIgNS4wNjIuMDgxLS4wOXM0LjM4Mi0yLjUzIDUuMjM1LTMuMDI0bDI1Ljk3IDE0Ljk5M3Y1NC4wMDFjMCAuNzcxLS4zODYgMS4yMTctLjk0OCAxLjIxNy0uMjMzIDAtLjQ5NS0uMDc2LS43NzItLjIzNmwtMjMuOTY3LTEzLjgzOC0uMDE0LjAyNC0yNy4zMjIgMTUuNzc1LS44NS0xLjMyM2MtNC43MzEtMS41MjktOS43NDgtMi43NC0xNC45NTEtMy42MWEuMjcuMjcgMCAwIDAtLjAwNy4wMjRsLTUuMDY3IDE2Ljk2MS03Ljg5MSA0LjU1Ni0uMDM3LS4wNjN2MjcuNTljMCAuNzcyLS4zODYgMS4yMTctLjk0OCAxLjIxNy0uMjMyIDAtLjQ5NS0uMDc2LS43NzItLjIzNmwtNDIuNDczLTI0LjUyMmMtLjk1LS41NDktMS43Mi0xLjg3Ny0xLjcyLTIuOTY3di0xLjAzNWwtLjAyMS4wNDdhNS4xMTEgNS4xMTEgMCAwIDAtMS44MTYtLjM5OSA1LjY4MiA1LjY4MiAwIDAgMC0uNTQ2LjAwMSAxMy43MjQgMTMuNzI0IDAgMCAxLTEuOTE4LS4wNDFjLTEuNjU1LS4xNTMtMy4yLS42LTQuNDA0LTEuMjk2bC00Ni41NzYtMjYuODkuMDA1LjAxMi0xMC4yNzgtMTguNzVjLTEuMDAxLTEuODI3LS4yNDEtNC4yMTYgMS42OTgtNS4zMzZsNTYuMDExLTMyLjM0NWE0LjE5NCA0LjE5NCAwIDAgMSAyLjA5OS0uNTcyYzEuMzI2IDAgMi41NzIuNjU5IDMuMjI3IDEuODUzbC4wMDUtLjAwMy4yMjcuNDEzLS4wMDYuMDA0YTkuNjMgOS42MyAwIDAgMCAxLjQ3NyAyLjAxOGwuMjc3LjI3YzEuOTE0IDEuODUgNC40NjggMi44MDEgNy4xMTMgMi44MDEgMS45NDkgMCAzLjk0OC0uNTE3IDUuNzc1LTEuNTcyLjAxMyAwIDcuMzE5LTQuMjE5IDcuMzE5LTQuMjE5YTQuMTk0IDQuMTk0IDAgMCAxIDIuMDk5LS41NzJjMS4zMjYgMCAyLjU3Mi42NTggMy4yMjYgMS44NTNsMy4yNSA1LjkyOC4wMjItLjAxOCA2Ljc4NSAzLjkxNy0uMTA1LS4xODIgNDYuODgxLTI2Ljk2NW0wLTEuNjM1Yy0uMjgyIDAtLjU2My4wNzMtLjgxNS4yMThsLTQ2LjE2OSAyNi41NTYtNS40MS0zLjEyNC0zLjAwNS01LjQ4MWMtLjkxMy0xLjY2Ny0yLjY5OS0yLjcwMi00LjY2LTIuNzAzLTEuMDExIDAtMi4wMi4yNzQtMi45MTcuNzkyYTM4MjUgMzgyNSAwIDAgMS03LjI3NSA0LjE5NWwtLjA0NC4wMjRhOS45MzcgOS45MzcgMCAwIDEtNC45NTcgMS4zNTNjLTIuMjkyIDAtNC40MTQtLjgzMi01Ljk3Ni0yLjM0MmwtLjI1Mi0uMjQ1YTcuOTkyIDcuOTkyIDAgMCAxLTEuMTM5LTEuNTM0IDEuMzc5IDEuMzc5IDAgMCAwLS4wNi0uMTIybC0uMjI3LS40MTRhMS43MTggMS43MTggMCAwIDAtLjA5NS0uMTU0Yy0uOTM4LTEuNTc0LTIuNjczLTIuNTQ1LTQuNTcxLTIuNTQ1LTEuMDExIDAtMi4wMi4yNzQtMi45MTcuNzkyTDMuMTI1IDE1NS41MDJjLTIuNjk5IDEuNTU5LTMuNzM4IDQuOTQtMi4zMTQgNy41MzhsMTAuMjc4IDE4Ljc1Yy4xNzcuMzIzLjQ0OC41NjMuNzYxLjcwNGw0Ni40MjYgMjYuODA0YzEuNDAzLjgxIDMuMTU3IDEuMzMyIDUuMDcyIDEuNTA4YTE1LjY2MSAxNS42NjEgMCAwIDAgMi4xNDYuMDQ2IDQuNzY2IDQuNzY2IDAgMCAxIC4zOTYgMGMuMDk2LjAwNC4xOS4wMTEuMjgzLjAyMi4xMDkgMS41OTMgMS4xNTkgMy4zMjMgMi41MjkgNC4xMTRsNDIuNDcyIDI0LjUyMmMuNTI0LjMwMiAxLjA1OC40NTUgMS41OS40NTUgMS40OTcgMCAyLjU4My0xLjIgMi41ODMtMi44NTJ2LTI2LjU2Mmw3LjExMS00LjEwNWExLjY0IDEuNjQgMCAwIDAgLjc0OS0uOTQ4bDQuNjU4LTE1LjU5M2M0LjQxNC43OTcgOC42OTIgMS44NDggMTIuNzQyIDMuMTI4bC41MzMuODI5YTEuNjM0IDEuNjM0IDAgMCAwIDIuMTkzLjUzMWwyNi41MzItMTUuMzE3TDE5MyAxOTIuNDMzYy41MjMuMzAyIDEuMDU4LjQ1NSAxLjU5LjQ1NSAxLjQ5NyAwIDIuNTgzLTEuMTk5IDIuNTgzLTIuODUydi01NC4wMDFjMC0uNTg0LS4zMTItMS4xMjQtLjgxOC0xLjQxNmwtMjUuOTctMTQuOTkzYTEuNjMzIDEuNjMzIDAgMCAwLTEuNjM2LjAwMWMtLjYwNi4zNTEtMi45OTMgMS43My00LjMyNSAyLjQ5OGwtNC44MDktNC4yNTVjLS44MTktLjcyNS0xLjQ2MS0xLjkzMy0xLjU2MS0yLjkzNmE3Ljc3NiA3Ljc3NiAwIDAgMC0uMDMzLS4yOTQgMi40ODcgMi40ODcgMCAwIDEtLjAyMy0uMzM2di0uODg2YzAtLjU4NC0uMzEyLTEuMTIzLS44MTctMS40MTZsLTYuNzM5LTMuODkxYTEuNjMzIDEuNjMzIDAgMCAwLS44MTctLjIxOScgZmlsbD0nIzQ1NUE2NCcvPjxwYXRoIGQ9J005Ni4wMjcgMTMyLjYzNmw0Ni41NzYgMjYuODkxYzEuMjA0LjY5NSAxLjk3OSAxLjU4NyAyLjI0MiAyLjU0MWwtLjAxLjAwNy04MS4zNzQgNDYuOTgyaC0uMDAxYy0xLjY1NC0uMTUyLTMuMTk5LS42LTQuNDAzLTEuMjk1bC00Ni41NzYtMjYuODkxIDgzLjU0Ni00OC4yMzUnIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNNjMuNDYxIDIwOS4xNzRjLS4wMDggMC0uMDE1IDAtLjAyMi0uMDAyLTEuNjkzLS4xNTYtMy4yMjgtLjYwOS00LjQ0MS0xLjMwOWwtNDYuNTc2LTI2Ljg5YS4xMTguMTE4IDAgMCAxIDAtLjIwM2w4My41NDYtNDguMjM1YS4xMTcuMTE3IDAgMCAxIC4xMTcgMGw0Ni41NzYgMjYuODkxYzEuMjI3LjcwOCAyLjAyMSAxLjYxMiAyLjI5NiAyLjYxMWEuMTE2LjExNiAwIDAgMS0uMDQyLjEyNGwtLjAyMS4wMTYtODEuMzc1IDQ2Ljk4MWEuMTEuMTEgMCAwIDEtLjA1OC4wMTZ6bS01MC43NDctMjguMzAzbDQ2LjQwMSAyNi43OWMxLjE3OC42OCAyLjY3MSAxLjEyMSA0LjMyIDEuMjc2bDgxLjI3Mi00Ni45MjJjLS4yNzktLjkwNy0xLjAyNS0xLjczLTIuMTYzLTIuMzg3bC00Ni41MTctMjYuODU3LTgzLjMxMyA0OC4xeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNDguMzI3IDE2NS40NzFhNS44NSA1Ljg1IDAgMCAxLS41NDYuMDAxYy0xLjg5NC0uMDgzLTMuMzAyLTEuMDM4LTMuMTQ1LTIuMTMyYTIuNjkzIDIuNjkzIDAgMCAwLS4wNzItMS4xMDVsLTgxLjEwMyA0Ni44MjJjLjYyOC4wNTggMS4yNzIuMDczIDEuOTE4LjA0Mi4xODItLjAwOS4zNjQtLjAwOS41NDYtLjAwMSAxLjg5NC4wODMgMy4zMDIgMS4wMzggMy4xNDUgMi4xMzJsNzkuMjU3LTQ1Ljc1OScgZmlsbD0nI0ZGRicvPjxwYXRoIGQ9J002OS4wNyAyMTEuMzQ3YS4xMTguMTE4IDAgMCAxLS4xMTUtLjEzNGMuMDQ1LS4zMTctLjA1Ny0uNjM3LS4yOTctLjkyNS0uNTA1LS42MS0xLjU1NS0xLjAyMi0yLjczOC0xLjA3NGE1Ljk2NiA1Ljk2NiAwIDAgMC0uNTM1LjAwMSAxNC4wMyAxNC4wMyAwIDAgMS0xLjkzNS0uMDQxLjExNy4xMTcgMCAwIDEtLjEwMy0uMDkyLjExNi4xMTYgMCAwIDEgLjA1NS0uMTI2bDgxLjEwNC00Ni44MjJhLjExNy4xMTcgMCAwIDEgLjE3MS4wN2MuMTA0LjM4MS4xMjkuNzY4LjA3NCAxLjE1My0uMDQ1LjMxNi4wNTcuNjM3LjI5Ni45MjUuNTA2LjYxIDEuNTU1IDEuMDIxIDIuNzM5IDEuMDczLjE3OC4wMDguMzU3LjAwOC41MzUtLjAwMWEuMTE3LjExNyAwIDAgMSAuMDY0LjIxOGwtNzkuMjU2IDQ1Ljc1OWEuMTE0LjExNCAwIDAgMS0uMDU5LjAxNnptLTMuNDA1LTIuMzcyYy4wODkgMCAuMTc3LjAwMi4yNjUuMDA2IDEuMjY2LjA1NiAyLjM1My40ODggMi45MDggMS4xNTguMjI3LjI3NC4zNS41NzUuMzYuODgybDc4LjY4NS00NS40MjljLS4wMzYgMC0uMDcyLS4wMDEtLjEwNy0uMDAzLTEuMjY3LS4wNTYtMi4zNTQtLjQ4OS0yLjkwOS0xLjE1OC0uMjgyLS4zNC0uNDAyLS43MjQtLjM0Ny0xLjEwN2EyLjYwNCAyLjYwNCAwIDAgMC0uMDMyLS45MUw2My44NDYgMjA4Ljk3YTEzLjkxIDEzLjkxIDAgMCAwIDEuNTI4LjAxMmMuMDk3LS4wMDUuMTk0LS4wMDcuMjkxLS4wMDd6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTIuMjA4IDE2Mi4xMzRjLTEuMDAxLTEuODI3LS4yNDEtNC4yMTcgMS42OTgtNS4zMzdsNTYuMDExLTMyLjM0NGMxLjkzOS0xLjEyIDQuMzI0LS41NDYgNS4zMjYgMS4yODFsLjIzMi40MWE5LjM0NCA5LjM0NCAwIDAgMCAxLjQ3IDIuMDIxbC4yNzguMjdjMy4zMjUgMy4yMTQgOC41ODMgMy43MTYgMTIuODg4IDEuMjNsNy4zMTktNC4yMmMxLjk0LTEuMTE5IDQuMzI0LS41NDYgNS4zMjUgMS4yODJsMy4yNSA1LjkyOC04My41MTkgNDguMjI5LTEwLjI3OC0xOC43NXonIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNMTIuNDg2IDE4MS4wMDFhLjExMi4xMTIgMCAwIDEtLjAzMS0uMDA1LjExNC4xMTQgMCAwIDEtLjA3MS0uMDU2TDIuMTA2IDE2Mi4xOWMtMS4wMzEtMS44OC0uMjQ5LTQuMzQ1IDEuNzQyLTUuNDk0bDU2LjAxLTMyLjM0NGE0LjMyOCA0LjMyOCAwIDAgMSAyLjE1OC0uNTg4YzEuNDE1IDAgMi42NS43MDIgMy4zMTEgMS44ODIuMDEuMDA4LjAxOC4wMTcuMDI0LjAyOGwuMjI3LjQxNGEuMTIyLjEyMiAwIDAgMSAuMDEzLjAzOCA5LjUwOCA5LjUwOCAwIDAgMCAxLjQzOSAxLjk1OWwuMjc1LjI2NmMxLjg0NiAxLjc4NiA0LjM0NCAyLjc2OSA3LjAzMSAyLjc2OSAxLjk3NyAwIDMuOTU0LS41MzggNS43MTctMS41NTdhLjE0OC4xNDggMCAwIDEgLjAzNS0uMDEzbDcuMjg0LTQuMjA2YTQuMzIxIDQuMzIxIDAgMCAxIDIuMTU3LS41ODhjMS40MjcgMCAyLjY3Mi43MTYgMy4zMjkgMS45MTRsMy4yNDkgNS45MjlhLjExNi4xMTYgMCAwIDEtLjA0NC4xNTdsLTgzLjUxOCA0OC4yMjlhLjExNi4xMTYgMCAwIDEtLjA1OS4wMTZ6bTQ5LjUzLTU3LjAwNGMtLjcwNCAwLTEuNDEuMTkzLTIuMDQxLjU1N2wtNTYuMDEgMzIuMzQ1Yy0xLjg4MiAxLjA4Ni0yLjYyNCAzLjQwOS0xLjY1NSA1LjE3OWwxMC4yMjEgMTguNjQ1IDgzLjMxNy00OC4xMTItMy4xOTUtNS44MjljLS42MTUtMS4xMjItMS43ODMtMS43OTItMy4xMjQtMS43OTJhNC4wOCA0LjA4IDAgMCAwLTIuMDQuNTU3bC03LjMxNyA0LjIyNWEuMTQ4LjE0OCAwIDAgMS0uMDM1LjAxMyAxMS43IDExLjcgMCAwIDEtNS44MDEgMS41NjljLTIuNzQ4IDAtNS4zMDMtMS4wMDctNy4xOTQtMi44MzVsLS4yNzgtLjI3YTkuNzE2IDkuNzE2IDAgMCAxLTEuNDk3LTIuMDQ2LjA5Ni4wOTYgMCAwIDEtLjAxMy0uMDM3bC0uMTkxLS4zNDdhLjExLjExIDAgMCAxLS4wMjMtLjAyOWMtLjYxNS0xLjEyMy0xLjc4My0xLjc5My0zLjEyNC0xLjc5M3onIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNNDIuNDM0IDE1NS44MDhjLTIuNTEtLjAwMS00LjY5Ny0xLjI1OC01Ljg1Mi0zLjM2NS0xLjgxMS0zLjMwNC0uNDM4LTcuNjM0IDMuMDU5LTkuNjU0bDEyLjI5MS03LjA5OGE3LjU5OSA3LjU5OSAwIDAgMSAzLjc4OS0xLjAzM2MyLjUxIDAgNC42OTcgMS4yNTggNS44NTIgMy4zNjUgMS44MTEgMy4zMDQuNDM5IDcuNjM0LTMuMDU5IDkuNjU0bC0xMi4yOTEgNy4wOThhNy42MDYgNy42MDYgMCAwIDEtMy43ODkgMS4wMzN6bTEzLjI4Ny0yMC42ODNhNy4xMjggNy4xMjggMCAwIDAtMy41NTUuOTcxbC0xMi4yOTEgNy4wOThjLTMuMjc5IDEuODkzLTQuNTczIDUuOTQyLTIuODgzIDkuMDI0IDEuMDcxIDEuOTU1IDMuMTA2IDMuMTIyIDUuNDQyIDMuMTIyYTcuMTMgNy4xMyAwIDAgMCAzLjU1Ni0uOTdsMTIuMjkxLTcuMDk4YzMuMjc5LTEuODkzIDQuNTcyLTUuOTQyIDIuODgzLTkuMDI0LTEuMDcyLTEuOTU1LTMuMTA2LTMuMTIzLTUuNDQzLTMuMTIzeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNDkuNTg4IDEwOS40MDdsNi43MzcgMy44OXYuODg3YzAgLjE3Ni4wMTMuMzYuMDM3LjU0OS4wMTEuMDgxLjAyLjE2MS4wMjguMjQyLjE0IDEuNDE1Ljk3MyAyLjk5OCAyLjEwNSAzLjk5OWw3LjM5NiA2LjU0NWMuMTc3LjE1Ni4zNTguMjk1LjU0MS40MTUgMS41NzkgMS4wNCAyLjk1LjQ2NiAzLjA2Mi0xLjI4Mi4wNDktLjc4NC4wNTctMS41OTUuMDIzLTIuNDI5bC0uMDAzLS4xNnYtMS4xNTFsMjUuOTg3IDE1LjAwM3Y1NGMwIDEuMDktLjc3IDEuNTMtMS43Mi45ODJsLTQyLjQ3My0yNC41MjNjLS45NS0uNTQ4LTEuNzItMS44NzctMS43Mi0yLjk2NnYtMzQuMDMzJyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTE5NC41NTMgMTkxLjI1Yy0uMjU3IDAtLjU0LS4wODUtLjgzMS0uMjUzbC00Mi40NzItMjQuNTIxYy0uOTgxLS41NjctMS43NzktMS45NDMtMS43NzktMy4wNjh2LTM0LjAzM2guMjM0djM0LjAzM2MwIDEuMDUxLjc0NSAyLjMzNiAxLjY2MSAyLjg2Nmw0Mi40NzMgMjQuNTIxYy40MjQuMjQ1LjgxNi4yODggMS4xMDMuMTIyLjI4NS0uMTY0LjQ0Mi0uNTIuNDQyLTEuMDAydi01My45MzNsLTI1Ljc1My0xNC44NjguMDAzIDEuMTA2Yy4wMzQuODMyLjAyNiAxLjY1NC0uMDI0IDIuNDM5LS4wNTQuODQ0LS4zOTYgMS40NjQtLjk2MyAxLjc0Ni0uNjE5LjMwOS0xLjQ1LjE3My0yLjI4LS4zNzNhNS4wMjMgNS4wMjMgMCAwIDEtLjU1My0uNDI2bC03LjM5Ny02LjU0NGMtMS4xNTgtMS4wMjYtMS45OTktMi42MjUtMi4xNDMtNC4wNzZhOS42MjQgOS42MjQgMCAwIDAtLjAyNy0uMjM4IDQuMjQxIDQuMjQxIDAgMCAxLS4wMzgtLjU2NHYtLjgybC02LjY4LTMuODU2LjExNy0uMjAyIDYuNzM4IDMuODkuMDU4LjAzNHYuOTU0YzAgLjE3MS4wMTIuMzUxLjAzNi41MzMuMDExLjA4My4wMjEuMTY1LjAyOS4yNDYuMTM4IDEuMzk1Ljk0OCAyLjkzNSAyLjA2NSAzLjkyM2w3LjM5NyA2LjU0NWMuMTczLjE1My4zNS4yODkuNTI3LjQwNi43NTguNDk5IDEuNTA0LjYzIDIuMDQ3LjM1OS40OS0uMjQzLjc4Ni0uNzk1LjgzNC0xLjU1MS4wNS0uNzc4LjA1Ny0xLjU5MS4wMjQtMi40MTdsLS4wMDQtLjE2M3YtMS4zNTVsLjE3NS4xIDI1Ljk4NyAxNS4wMDQuMDU5LjAzM3Y1NC4wNjhjMCAuNTY5LS4xOTguOTk2LS41NTkgMS4yMDRhMS4wMDIgMS4wMDIgMCAwIDEtLjUwNi4xMzEnIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTQ1LjY4NSAxNjMuMTYxbDI0LjExNSAxMy45MjItMjUuOTc4IDE0Ljk5OC0xLjQ2Mi0uMzA3Yy02LjUzNC0yLjE3LTEzLjYyOC0zLjcyOC0yMS4wMTktNC42MTYtNC4zNjUtLjUyNC04LjY2MyAxLjA5Ni05LjU5OCAzLjYyYTIuNzQ2IDIuNzQ2IDAgMCAwLS4wMTEgMS45MjhjMS41MzggNC4yNjcgNC4yMzYgOC4zNjMgNy45OTUgMTIuMTM1bC41MzIuODQ1LTI1Ljk3NyAxNC45OTctMjQuMTE1LTEzLjkyMiA3NS41MTgtNDMuNicgZmlsbD0nI0ZGRicvPjxwYXRoIGQ9J005NC4yODIgMjIwLjgxOGwtLjA1OS0uMDMzLTI0LjI5LTE0LjAyNC4xNzUtLjEwMSA3NS41NzctNDMuNjM0LjA1OC4wMzMgMjQuMjkgMTQuMDI0LTI2LjE5MSAxNS4xMjItLjA0NS0uMDEtMS40NjEtLjMwN2MtNi41NDktMi4xNzQtMTMuNjEzLTMuNzI1LTIxLjAwOS00LjYxNGExMy43NDQgMTMuNzQ0IDAgMCAwLTEuNjM4LS4wOTdjLTMuNzU4IDAtNy4wNTQgMS41MzEtNy44MzcgMy42NDJhMi42MiAyLjYyIDAgMCAwLS4wMSAxLjg0OGMxLjUzNSA0LjI1OCA0LjIxNiA4LjMyNiA3Ljk2OCAxMi4wOTFsLjAxNi4wMjEuNTI2LjgzNS4wMDYuMDEuMDY0LjEwMi0uMTA1LjA2MS0yNS45NzcgMTQuOTk4LS4wNTguMDMzem0tMjMuODgxLTE0LjA1N2wyMy44ODEgMTMuNzg4IDI0LjgwMi0xNC4zMmMuNTQ2LS4zMTUuODQ2LS40ODkgMS4wMTctLjU3NWwtLjQ2Ni0uNzRjLTMuNzcxLTMuNzg3LTYuNDY3LTcuODgxLTguMDEzLTEyLjE2OGEyLjg1MSAyLjg1MSAwIDAgMSAuMDExLTIuMDA4Yy44MTUtMi4xOTkgNC4yMDMtMy43OTUgOC4wNTYtMy43OTUuNTU3IDAgMS4xMTcuMDMzIDEuNjY2LjA5OSA3LjQxMi44OTEgMTQuNDkxIDIuNDQ1IDIxLjA0MSA0LjYyMS44MzYuMTc1IDEuMjE1LjI1NCAxLjM5LjMwNGwyNS43OC0xNC44ODQtMjMuODgxLTEzLjc4OC03NS4yODQgNDMuNDY2eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNjcuMjMgMTI1Ljk3OXY1MC44NzFsLTI3LjMyMSAxNS43NzMtNi40NjEtMTQuMTY3Yy0uOTEtMS45OTYtMy40MjgtMS43MzgtNS42MjQuNTc0YTEwLjIzOCAxMC4yMzggMCAwIDAtMi4zMyA0LjAxOGwtNi40NiAyMS42MjgtMjcuMzIyIDE1Ljc3NHYtNTAuODcxbDc1LjUxOC00My42JyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTkxLjcxMiAyMjAuNTY3YS4xMjcuMTI3IDAgMCAxLS4wNTktLjAxNi4xMTguMTE4IDAgMCAxLS4wNTgtLjEwMXYtNTAuODcxYzAtLjA0Mi4wMjMtLjA4LjA1OC0uMTAxbDc1LjUxOS00My42YS4xMTcuMTE3IDAgMCAxIC4xNzUuMTAxdjUwLjg3MWMwIC4wNDEtLjAyMy4wOC0uMDU5LjFsLTI3LjMyMSAxNS43NzVhLjExOC4xMTggMCAwIDEtLjA5NC4wMS4xMi4xMiAwIDAgMS0uMDcxLS4wNjNsLTYuNDYtMTQuMTY4Yy0uMzc1LS44MjItMS4wNjItMS4yNzUtMS45MzQtMS4yNzUtMS4wODkgMC0yLjM2NC42ODYtMy41IDEuODgxYTEwLjIwNiAxMC4yMDYgMCAwIDAtMi4zMDIgMy45NzJsLTYuNDYgMjEuNjI3YS4xMTguMTE4IDAgMCAxLS4wNTQuMDY4TDkxLjc3IDIyMC41NTFhLjEyLjEyIDAgMCAxLS4wNTguMDE2em0uMTE3LTUwLjkydjUwLjYwMWwyNy4xMDYtMTUuNjUgNi40NDctMjEuNTgzYTEwLjI4NiAxMC4yODYgMCAwIDEgMi4zNTctNC4wNjVjMS4xOC0xLjI0MiAyLjUxNy0xLjk1NCAzLjY2OS0xLjk1NC45NjkgMCAxLjczMS41MDEgMi4xNDYgMS40MTFsNi40MDcgMTQuMDUxIDI3LjE1Mi0xNS42NzZ2LTUwLjYwMWwtNzUuMjg0IDQzLjQ2NnonIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTY4LjU0MyAxMjYuMjEzdjUwLjg3bC0yNy4zMjIgMTUuNzc0LTYuNDYtMTQuMTY4Yy0uOTEtMS45OTUtMy40MjgtMS43MzgtNS42MjQuNTc0YTEwLjI0OCAxMC4yNDggMCAwIDAtMi4zMyA0LjAxOWwtNi40NjEgMjEuNjI3LTI3LjMyMSAxNS43NzR2LTUwLjg3bDc1LjUxOC00My42JyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTkzLjAyNSAyMjAuOGEuMTIzLjEyMyAwIDAgMS0uMDU5LS4wMTUuMTIuMTIgMCAwIDEtLjA1OC0uMTAxdi01MC44NzFjMC0uMDQyLjAyMy0uMDguMDU4LS4xMDFsNzUuNTE4LTQzLjZhLjExMi4xMTIgMCAwIDEgLjExNyAwYy4wMzYuMDIuMDU5LjA1OS4wNTkuMXY1MC44NzFhLjExNi4xMTYgMCAwIDEtLjA1OS4xMDFsLTI3LjMyMSAxNS43NzRhLjExMS4xMTEgMCAwIDEtLjA5NC4wMS4xMTUuMTE1IDAgMCAxLS4wNzEtLjA2MmwtNi40Ni0xNC4xNjhjLS4zNzUtLjgyMy0xLjA2Mi0xLjI3NS0xLjkzNS0xLjI3NS0xLjA4OCAwLTIuMzYzLjY4NS0zLjQ5OSAxLjg4MWExMC4xOSAxMC4xOSAwIDAgMC0yLjMwMiAzLjk3MWwtNi40NjEgMjEuNjI4YS4xMDguMTA4IDAgMCAxLS4wNTMuMDY3bC0yNy4zMjIgMTUuNzc1YS4xMi4xMiAwIDAgMS0uMDU4LjAxNXptLjExNy01MC45MTl2NTAuNmwyNy4xMDYtMTUuNjQ5IDYuNDQ3LTIxLjU4NGExMC4yOTMgMTAuMjkzIDAgMCAxIDIuMzU3LTQuMDY1YzEuMTc5LTEuMjQxIDIuNTE2LTEuOTU0IDMuNjY4LTEuOTU0Ljk2OSAwIDEuNzMyLjUwMiAyLjE0NyAxLjQxMmw2LjQwNyAxNC4wNTEgMjcuMTUyLTE1LjY3NnYtNTAuNjAxbC03NS4yODQgNDMuNDY2eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNjkuOCAxNzcuMDgzbC0yNy4zMjIgMTUuNzc0LTYuNDYtMTQuMTY4Yy0uOTEtMS45OTUtMy40MjgtMS43MzgtNS42MjUuNTc0YTEwLjI0NiAxMC4yNDYgMCAwIDAtMi4zMjkgNC4wMTlsLTYuNDYxIDIxLjYyNy0yNy4zMjEgMTUuNzc0di01MC44N2w3NS41MTgtNDMuNnY1MC44N3onIGZpbGw9JyNGQUZBRkEnLz48cGF0aCBkPSdNOTQuMjgyIDIyMC45MTdhLjIzNC4yMzQgMCAwIDEtLjIzNC0uMjMzdi01MC44NzFjMC0uMDgzLjA0NS0uMTYxLjExNy0uMjAybDc1LjUxOC00My42MDFhLjIzNC4yMzQgMCAxIDEgLjM1LjIwMnY1MC44NzFhLjIzMy4yMzMgMCAwIDEtLjExNi4yMDJsLTI3LjMyMiAxNS43NzVhLjIzMi4yMzIgMCAwIDEtLjMyOS0uMTA2bC02LjQ2MS0xNC4xNjhjLS4zNi0uNzg5LS45OTItMS4yMDYtMS44MjgtMS4yMDYtMS4wNTYgMC0yLjMwMS42NzItMy40MTUgMS44NDRhMTAuMDk5IDEwLjA5OSAwIDAgMC0yLjI3NSAzLjkyNGwtNi40NiAyMS42MjhhLjIzNS4yMzUgMCAwIDEtLjEwNy4xMzZsLTI3LjMyMiAxNS43NzRhLjIzLjIzIDAgMCAxLS4xMTYuMDMxem0uMjMzLTUwLjk2OXY1MC4zMzFsMjYuODkxLTE1LjUyNSA2LjQzNC0yMS41MzlhMTAuNDEgMTAuNDEgMCAwIDEgMi4zODQtNC4xMTJjMS4yMDEtMS4yNjUgMi41NjktMS45OTEgMy43NTMtMS45OTEgMS4wMTggMCAxLjgxOC41MjYgMi4yNTMgMS40OGw2LjM1NCAxMy45MzQgMjYuOTgyLTE1LjU3OHYtNTAuMzMxbC03NS4wNTEgNDMuMzMxeicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xMDkuODk0IDE5OS45NDNjLTEuNzc0IDAtMy4yNDEtLjcyNS00LjI0NC0yLjEyYS4yMjQuMjI0IDAgMCAxIC4wMjMtLjI5NC4yMzMuMjMzIDAgMCAxIC4zMDEtLjAyM2MuNzguNTQ3IDEuNzA1LjgyNyAyLjc1LjgyNyAxLjMyMyAwIDIuNzU0LS40MzkgNC4yNTYtMS4zMDYgNS4zMTEtMy4wNjcgOS42MzEtMTAuNTE4IDkuNjMxLTE2LjYxMSAwLTEuOTI3LS40NDItMy41Ni0xLjI3OC00LjcyNGEuMjMyLjIzMiAwIDAgMSAuMzIzLS4zMjdjMS42NzEgMS4xNzIgMi41OTEgMy4zODEgMi41OTEgNi4yMTkgMCA2LjI0Mi00LjQyNiAxMy44NjMtOS44NjUgMTcuMDAzLTEuNTc0LjkwOC0zLjA4NCAxLjM1Ni00LjQ4OCAxLjM1NnptLTIuOTY5LTEuNTQyYy44MTMuNjUxIDEuODIuODc3IDIuOTY4Ljg3N2guMDAxYzEuMzIxIDAgMi43NTMtLjMyNyA0LjI1NC0xLjE5NCA1LjMxMS0zLjA2NyA5LjYzMi0xMC40NjMgOS42MzItMTYuNTU2IDAtMS45NzktLjQ2My0zLjU5OS0xLjMyNi00Ljc2MS40MTEgMS4wMzUuNjI1IDIuMjc1LjYyNSAzLjYzNSAwIDYuMjQzLTQuNDI2IDEzLjg4My05Ljg2NSAxNy4wMjMtMS41NzQuOTA5LTMuMDg0IDEuMzE3LTQuNDkgMS4zMTctLjY0MSAwLTEuMjQzLS4xNDktMS43OTktLjM0MXonIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTEzLjA5NyAxOTcuMjNjNS4zODQtMy4xMDggOS43NDgtMTAuNjM2IDkuNzQ4LTE2LjgxNCAwLTIuMDUxLS40ODMtMy42OTItMS4zMjMtNC44Ni0xLjc4NC0xLjI1Mi00LjM3NC0xLjE5NC03LjI1Ny40Ny01LjM4NCAzLjEwOC05Ljc0OCAxMC42MzYtOS43NDggMTYuODE0IDAgMi4wNTEuNDgzIDMuNjkyIDEuMzIzIDQuODYgMS43ODQgMS4yNTIgNC4zNzQgMS4xOTQgNy4yNTctLjQ3JyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTEwOC43MjQgMTk4LjYxNGMtMS4xNDIgMC0yLjE1OC0uMjEzLTMuMDE5LS44MTctLjAyMS0uMDE0LS4wNC4wMTQtLjA1NS0uMDA3LS44OTQtMS4yNDQtMS4zNjctMi45NDgtMS4zNjctNC45NzMgMC02LjI0MiA0LjQyNi0xMy44NjQgOS44NjUtMTcuMDA1IDEuNTc0LS45MDggMy4wODQtMS4zNjMgNC40OS0xLjM2MyAxLjE0MiAwIDIuMTU4LjMwOSAzLjAxOC45MTNhLjIzLjIzIDAgMCAxIC4wNTYuMDU2Yy44OTQgMS4yNDQgMS4zNjcgMi45NzIgMS4zNjcgNC45OTcgMCA2LjI0My00LjQyNiAxMy43ODMtOS44NjUgMTYuOTIzLTEuNTc0LjkwOS0zLjA4NCAxLjI3Ni00LjQ5IDEuMjc2em0tMi43MTgtMS4xMDljLjc3NC41MzIgMS42ODguNzc2IDIuNzE4Ljc3NiAxLjMyMyAwIDIuNzU0LS40MTMgNC4yNTYtMS4yOCA1LjMxMS0zLjA2NiA5LjYzMS0xMC41MDUgOS42MzEtMTYuNTk4IDAtMS45MDktLjQzNC0zLjUyMy0xLjI1NS00LjY4NS0uNzc0LS41MzMtMS42ODgtLjc5OS0yLjcxOC0uNzk5LTEuMzIzIDAtMi43NTUuNDQxLTQuMjU2IDEuMzA4LTUuMzExIDMuMDY2LTkuNjMxIDEwLjUwNi05LjYzMSAxNi41OTkgMCAxLjkwOS40MzQgMy41MTcgMS4yNTUgNC42Nzl6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTE0OS4zMTggMTE0LjI2MmwtOS45ODQgOC44NzggMTUuODkzIDExLjAzMSA1LjU4OS02LjExMi0xMS40OTgtMTMuNzk3JyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTE2OS42NzYgMTIwLjg0bC05Ljc0OCA1LjYyN2MtMy42NDIgMi4xMDMtOS41MjggMi4xMTMtMTMuMTQ3LjAyNC0zLjYyLTIuMDg5LTMuNjAxLTUuNDg4LjA0MS03LjU5MWw5LjQ5NS01LjYwOC02LjcyOS0zLjg4NS04MS44MzYgNDcuMDcxIDQ1LjkyMyAyNi41MTQgMy4wODEtMS43NzljLjYzMS0uMzY1Ljg2OS0uODk4LjYxOC0xLjM5LTIuMzU3LTQuNjMyLTIuNTkzLTkuNTQ2LS42ODMtMTQuMjYyIDUuNjM4LTEzLjkyIDI0LjUwOS0yNC44MTUgNDguNjE4LTI4LjA3IDguMTY5LTEuMTAzIDE2LjY4LS45NjcgMjQuNzA0LjM5NC44NTIuMTQ1IDEuNzc2LjAwOCAyLjQwNy0uMzU3bDMuMDgxLTEuNzc4LTI1LjgyNS0xNC45MScgZmlsbD0nI0ZBRkFGQScvPjxwYXRoIGQ9J00xMTMuNjc1IDE4My40NTlhLjQ3LjQ3IDAgMCAxLS4yMzMtLjA2MmwtNDUuOTI0LTI2LjUxNWEuNDY4LjQ2OCAwIDAgMSAuMDAxLS44MDlsODEuODM2LTQ3LjA3MWEuNDY3LjQ2NyAwIDAgMSAuNDY2IDBsNi43MjkgMy44ODVhLjQ2Ny40NjcgMCAwIDEtLjQ2Ny44MDlsLTYuNDk2LTMuNzUtODAuOSA0Ni41MzMgNDQuOTg4IDI1Ljk3MyAyLjg0OC0xLjY0NGMuMTkyLS4xMTEuNjItLjQwOS40MzUtLjc3My0yLjQxNi00Ljc0OC0yLjY1OC05LjgxNC0uNy0xNC42NSAyLjgwNi02LjkyNyA4Ljg4NS0xMy4yNDIgMTcuNTgyLTE4LjI2MyA4LjY1Ny00Ljk5OCAxOS41MTgtOC40ODkgMzEuNDA3LTEwLjA5NCA4LjE5OC0xLjEwNyAxNi43OS0uOTcgMjQuODQ0LjM5Ny43MzkuMTI1IDEuNTYxLjAwNyAyLjA5NS0uMzAxbDIuMzgxLTEuMzc0LTI1LjEyNS0xNC41MDZhLjQ2Ny40NjcgMCAwIDEgLjQ2Ny0uODA5bDI1LjgyNSAxNC45MWEuNDY3LjQ2NyAwIDAgMSAwIC44MDlsLTMuMDgxIDEuNzc5Yy0uNzIxLjQxNy0xLjc2My41NzUtMi43MTguNDEzLTcuOTYzLTEuMzUxLTE2LjQ1Ny0xLjQ4Ni0yNC41NjMtLjM5Mi0xMS43NyAxLjU4OS0yMi41MTIgNS4wMzktMzEuMDY1IDkuOTc3LTguNTE0IDQuOTE2LTE0LjQ1NiAxMS4wNzMtMTcuMTgzIDE3LjgwNS0xLjg1NCA0LjU3OC0xLjYyMyA5LjM3Ni42NjYgMTMuODc1LjM3LjcyNS4wNTUgMS41MTMtLjggMi4wMDZsLTMuMDgxIDEuNzhhLjQ3Ni40NzYgMCAwIDEtLjIzNC4wNjInIGZpbGw9JyM0NTVBNjQnLz48cGF0aCBkPSdNMTUzLjMxNiAxMjguMjc5Yy0yLjQxMyAwLTQuODIxLS41MjgtNi42NTItMS41ODYtMS44MTgtMS4wNDktMi44Mi0yLjQ2MS0yLjgyLTMuOTc1IDAtMS41MjcgMS4wMTYtMi45NTUgMi44NjEtNC4wMmw5LjQ5My01LjYwN2EuMjMzLjIzMyAwIDEgMSAuMjM4LjQwMmwtOS40OTYgNS42MDljLTEuNjk2Ljk3OS0yLjYyOCAyLjI2My0yLjYyOCAzLjYxNiAwIDEuMzQuOTE4IDIuNjA4IDIuNTg1IDMuNTcxIDMuNTQ5IDIuMDQ5IDkuMzQzIDIuMDM4IDEyLjkxNC0uMDI0bDkuNzQ4LTUuNjI4YS4yMzQuMjM0IDAgMCAxIC4yMzQuNDA1bC05Ljc0OCA1LjYyOGMtMS44NTggMS4wNzItNC4yOTYgMS42MDktNi43MjkgMS42MDknIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTEzLjY3NSAxODIuOTkybC00NS45MTMtMjYuNTA4TTExMy42NzUgMTgzLjM0MmEuMzQ2LjM0NiAwIDAgMS0uMTc1LS4wNDdsLTQ1LjkxMy0yNi41MDhhLjM1LjM1IDAgMSAxIC4zNS0uNjA3bDQ1LjkxMyAyNi41MDhhLjM1LjM1IDAgMCAxLS4xNzUuNjU0JyBmaWxsPScjNDU1QTY0Jy8+PHBhdGggZD0nTTY3Ljc2MiAxNTYuNDg0djU0LjAwMWMwIDEuMDkuNzcgMi40MTggMS43MiAyLjk2N2w0Mi40NzMgMjQuNTIxYy45NS41NDkgMS43Mi4xMSAxLjcyLS45OHYtNTQuMDAxJyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTExMi43MjcgMjM4LjU2MWMtLjI5NyAwLS42Mi0uMDk1LS45NDctLjI4NWwtNDIuNDczLTI0LjUyMWMtMS4wNjMtLjYxMy0xLjg5NS0yLjA1LTEuODk1LTMuMjd2LTU0LjAwMWEuMzUuMzUgMCAxIDEgLjcwMSAwdjU0LjAwMWMwIC45Ni43MDcgMi4xOCAxLjU0NCAyLjY2M2w0Mi40NzMgMjQuNTIyYy4zNDQuMTk4LjY2MS4yNDMuODcuMTIyLjIwNi0uMTE5LjMyNS0uNDExLjMyNS0uNzk5di01NC4wMDFhLjM1LjM1IDAgMSAxIC43IDB2NTQuMDAxYzAgLjY1NS0uMjM5IDEuMTU0LS42NzUgMS40MDZhMS4yMzUgMS4yMzUgMCAwIDEtLjYyMy4xNjInIGZpbGw9JyM0NTVBNjQnLz48cGF0aCBkPSdNMTEyLjg2IDE0Ny41MTJoLS4wMDFjLTIuMzE4IDAtNC40OTktLjUyMi02LjE0Mi0xLjQ3MS0xLjcwNS0uOTg0LTIuNjQzLTIuMzE1LTIuNjQzLTMuNzQ5IDAtMS40NDUuOTUyLTIuNzkxIDIuNjgtMy43ODhsMTIuMDQxLTYuOTUzYzEuNjY4LS45NjIgMy44NzQtMS40OTMgNi4yMTItMS40OTMgMi4zMTggMCA0LjQ5OS41MjMgNi4xNDMgMS40NzIgMS43MDQuOTg0IDIuNjQzIDIuMzE1IDIuNjQzIDMuNzQ4IDAgMS40NDYtLjk1MiAyLjc5MS0yLjY4IDMuNzg5bC0xMi4wNDIgNi45NTJjLTEuNjY4Ljk2My0zLjg3NCAxLjQ5My02LjIxMSAxLjQ5M3ptMTIuMTQ3LTE2Ljc1M2MtMi4yMTcgMC00LjI5OC40OTctNS44NjEgMS4zOTlsLTEyLjA0MiA2Ljk1MmMtMS41MDIuODY4LTIuMzMgMS45OTgtMi4zMyAzLjE4MiAwIDEuMTczLjgxNSAyLjI4OSAyLjI5MyAzLjE0MiAxLjUzOC44ODkgMy41OTYgMS4zNzggNS43OTIgMS4zNzhoLjAwMWMyLjIxNiAwIDQuMjk4LS40OTcgNS44NjEtMS4zOTlsMTIuMDQxLTYuOTUzYzEuNTAyLS44NjcgMi4zMy0xLjk5NyAyLjMzLTMuMTgyIDAtMS4xNzItLjgxNC0yLjI4OC0yLjI5Mi0zLjE0Mi0xLjUzOS0uODg4LTMuNTk2LTEuMzc3LTUuNzkzLTEuMzc3eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNjUuNjMgMTIzLjIxOWwtNS43MzQgMy4zMTFjLTMuMTY3IDEuODI4LTguMjg2IDEuODM3LTExLjQzMy4wMi0zLjE0Ny0xLjgxNy0zLjEzMS00Ljc3Mi4wMzYtNi42MDFsNS43MzQtMy4zMSAxMS4zOTcgNi41OCcgZmlsbD0nI0ZBRkFGQScvPjxwYXRoIGQ9J00xNTQuMjMzIDExNy40NDhsOS45OTUgNS43NzEtNC42ODIgMi43MDRjLTEuNDM0LjgyNy0zLjM1MiAxLjI4My01LjM5OSAxLjI4My0yLjAyOSAwLTMuOTIzLS40NDktNS4zMzMtMS4yNjMtMS4yOS0uNzQ0LTItMS42OTQtMi0yLjY3NCAwLS45OTEuNzIzLTEuOTU1IDIuMDM2LTIuNzEzbDUuMzgzLTMuMTA4bTAtLjgwOWwtNS43MzQgMy4zMWMtMy4xNjcgMS44MjktMy4xODMgNC43ODQtLjAzNiA2LjYwMSAxLjU2OC45MDUgMy42MjMgMS4zNTcgNS42ODQgMS4zNTcgMi4wNzcgMCA0LjE1OS0uNDYgNS43NDktMS4zNzdsNS43MzQtMy4zMTEtMTEuMzk3LTYuNThNMTQ1LjQ0NSAxNzkuNjY3Yy0xLjc3MyAwLTMuMjQxLS44NS00LjI0My0yLjI0NS0uMDY3LS4wOTItLjA1Ny0uMjc1LjAyMy0uMzU2LjA4LS4wODEuMjA3LS4xMi4zLS4wNTUuNzgxLjU0OCAxLjcwNi44MTIgMi43NTEuODExIDEuMzIyIDAgMi43NTQtLjQ0NiA0LjI1Ni0xLjMxMyA1LjMxLTMuMDY2IDkuNjMxLTEwLjUyMiA5LjYzMS0xNi42MTUgMC0xLjkyNy0uNDQyLTMuNTYyLTEuMjc5LTQuNzI2YS4yMzUuMjM1IDAgMCAxIC4wMjQtLjMwMS4yMzIuMjMyIDAgMCAxIC4zLS4wMjdjMS42NyAxLjE3MiAyLjU5IDMuMzggMi41OSA2LjIxOSAwIDYuMjQyLTQuNDI1IDEzLjk4Ny05Ljg2NSAxNy4xMjctMS41NzMuOTA4LTMuMDgzIDEuNDgxLTQuNDg4IDEuNDgxek0xNDIuNDc2IDE3OGMuODE0LjY1MSAxLjgyIDEuMDAyIDIuOTY5IDEuMDAyIDEuMzIyIDAgMi43NTMtLjQ1MiA0LjI1NS0xLjMyIDUuMzEtMy4wNjUgOS42MzEtMTAuNTIzIDkuNjMxLTE2LjYxNyAwLTEuOTgtLjQ2My0zLjYzLTEuMzI1LTQuNzkzLjQxMSAxLjAzNS42MjQgMi4yNi42MjQgMy42MiAwIDYuMjQyLTQuNDI1IDEzLjg3NS05Ljg2NSAxNy4wMTUtMS41NzMuOTA5LTMuMDg0IDEuMzc2LTQuNDg5IDEuMzc2YTUuNDkgNS40OSAwIDAgMS0xLjgtLjI4M3onIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNMTQ4LjY0OCAxNzYuNzA0YzUuMzg0LTMuMTA4IDkuNzQ4LTEwLjYzNiA5Ljc0OC0xNi44MTMgMC0yLjA1Mi0uNDgzLTMuNjkzLTEuMzIyLTQuODYxLTEuNzg1LTEuMjUyLTQuMzc1LTEuMTk0LTcuMjU4LjQ3MS01LjM4MyAzLjEwOC05Ljc0OCAxMC42MzYtOS43NDggMTYuODEzIDAgMi4wNTEuNDg0IDMuNjkyIDEuMzIzIDQuODYgMS43ODUgMS4yNTMgNC4zNzQgMS4xOTUgNy4yNTctLjQ3JyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTE0NC4yNzYgMTc4LjI3NmMtMS4xNDMgMC0yLjE1OC0uMzA3LTMuMDE5LS45MTFhLjIxNy4yMTcgMCAwIDEtLjA1NS0uMDU0Yy0uODk1LTEuMjQ0LTEuMzY3LTIuOTcyLTEuMzY3LTQuOTk3IDAtNi4yNDEgNC40MjUtMTMuODc1IDkuODY1LTE3LjAxNiAxLjU3My0uOTA4IDMuMDg0LTEuMzY5IDQuNDg5LTEuMzY5IDEuMTQzIDAgMi4xNTguMzA3IDMuMDE5LjkxYS4yNC4yNCAwIDAgMSAuMDU1LjA1NWMuODk0IDEuMjQ0IDEuMzY3IDIuOTcxIDEuMzY3IDQuOTk3IDAgNi4yNDEtNC40MjUgMTMuODc1LTkuODY1IDE3LjAxNi0xLjU3My45MDgtMy4wODQgMS4zNjktNC40ODkgMS4zNjl6bS0yLjcxOC0xLjE3MmMuNzczLjUzMyAxLjY4Ny45MDEgMi43MTguOTAxIDEuMzIyIDAgMi43NTQtLjUzOCA0LjI1Ni0xLjQwNSA1LjMxLTMuMDY2IDkuNjMxLTEwLjU2NyA5LjYzMS0xNi42NjEgMC0xLjkwOC0uNDM0LTMuNTU0LTEuMjU2LTQuNzE2LS43NzQtLjUzMi0xLjY4OC0uODE0LTIuNzE4LS44MTQtMS4zMjIgMC0yLjc1NC40MzMtNC4yNTYgMS4zLTUuMzEgMy4wNjYtOS42MzEgMTAuNTY0LTkuNjMxIDE2LjY1NyAwIDEuOTEuNDM0IDMuNTc2IDEuMjU2IDQuNzM4eicgZmlsbD0nIzYwN0Q4QicvPjxwYXRoIGQ9J00xNTAuNzIgMTcyLjM2MWwtLjM2My0uMjk1YTI0LjEwNSAyNC4xMDUgMCAwIDAgMi4xNDgtMy4xMjggMjQuMDUgMjQuMDUgMCAwIDAgMS45NzctNC4zNzVsLjQ0My4xNDlhMjQuNTQgMjQuNTQgMCAwIDEtMi4wMTUgNC40NiAyNC42MSAyNC42MSAwIDAgMS0yLjE5IDMuMTg5TTExNS45MTcgMTkxLjUxNGwtLjM2My0uMjk0YTI0LjE3NCAyNC4xNzQgMCAwIDAgMi4xNDgtMy4xMjggMjQuMDM4IDI0LjAzOCAwIDAgMCAxLjk3Ni00LjM3NWwuNDQzLjE0OGEyNC40OCAyNC40OCAwIDAgMS0yLjAxNSA0LjQ2MSAyNC42NjIgMjQuNjYyIDAgMCAxLTIuMTg5IDMuMTg4TTExNCAyMzcuNDc2VjE4Mi41ODQgMjM3LjQ3NicgZmlsbD0nIzYwN0Q4QicvPjxnPjxwYXRoIGQ9J004MS44MjIgMzcuNDc0Yy4wMTctLjEzNS0uMDc1LS4yOC0uMjY3LS4zOTItLjMyNy0uMTg4LS44MjYtLjIxLTEuMTA5LS4wNDVsLTYuMDEyIDMuNDcxYy0uMTMxLjA3Ni0uMTk0LjE3OC0uMTkxLjI4NS4wMDIuMTMyLjAwMi40NjEuMDAyLjU3OHYuMDQzbC0uMDA3LjEyOC02LjU5MSAzLjc3OWMtLjAwMSAwLTIuMDc3IDEuMDQ2LTIuNzg3IDUuMTkyIDAgMC0uOTEyIDYuOTYxLS44OTggMTkuNzQ1LjAxNSAxMi41Ny42MDYgMTcuMDcgMS4xNjcgMjEuMzUxLjIyIDEuNjg0IDMuMDAxIDIuMTI1IDMuMDAxIDIuMTI1LjMzMS4wNC42OTgtLjAyNyAxLjA4LS4yNDhsNzUuMjczLTQzLjU1MWMxLjgwOC0xLjA2OSAyLjY2Ny0zLjcxOSAzLjA1Ni02LjI4NCAxLjIxMy03Ljk5IDEuNjc1LTMyLjk3OC0uMjc1LTM5Ljg3OC0uMTk2LS42OTMtLjUxLTEuMDgzLS44NjgtMS4yODJsLTIuMDg2LS43OWMtLjcyNy4wMjgtMS40MTYuNDY3LTEuNTM0LjUzNUw4Mi4wMzIgMzcuMDcybC0uMjEuNDAyJyBmaWxsPScjRkZGJy8+PHBhdGggZD0nTTE0NC4zMTEgMS43MDFsMi4wODUuNzljLjM1OC4xOTkuNjcyLjU4OS44NjggMS4yODIgMS45NDkgNi45IDEuNDg3IDMxLjg4Ny4yNzUgMzkuODc4LS4zOSAyLjU2NS0xLjI0OSA1LjIxNS0zLjA1NiA2LjI4NEw2OS4yMSA5My40ODZhMS43OCAxLjc4IDAgMCAxLS44OTYuMjU4bC0uMTgzLS4wMTFjMCAuMDAxLTIuNzgyLS40NC0zLjAwMy0yLjEyNC0uNTYtNC4yODItMS4xNTEtOC43ODEtMS4xNjUtMjEuMzUxLS4wMTUtMTIuNzg0Ljg5Ny0xOS43NDUuODk3LTE5Ljc0NS43MS00LjE0NiAyLjc4Ny01LjE5MiAyLjc4Ny01LjE5Mmw2LjU5MS0zLjc3OS4wMDctLjEyOHYtLjA0M2MwLS4xMTcgMC0uNDQ2LS4wMDItLjU3OC0uMDAzLS4xMDcuMDU5LS4yMS4xOTEtLjI4NWw2LjAxMi0zLjQ3MmEuOTguOTggMCAwIDEgLjQ4MS0uMTFjLjIxOCAwIC40NDkuMDUzLjYyNy4xNTYuMTkzLjExMi4yODUuMjU4LjI2OC4zOTJsLjIxMS0uNDAyIDYwLjc0NC0zNC44MzZjLjExNy0uMDY4LjgwNi0uNTA3IDEuNTM0LS41MzVtMC0uOTk3bC0uMDM5LjAwMWMtLjYxOC4wMjMtMS4yODMuMjQ0LTEuOTc0LjY1NmwtLjAyMS4wMTItNjAuNTE5IDM0LjcwNmEyLjM1OCAyLjM1OCAwIDAgMC0uODMxLS4xNWMtLjM2NSAwLS43MDQuMDg0LS45OC4yNDRsLTYuMDEyIDMuNDcxYy0uNDQyLjI1NS0uNjk5LjY5LS42ODkgMS4xNjZsLjAwMS4xNS02LjA4IDMuNDg3Yy0uMzczLjE5OS0yLjU0MiAxLjUzMS0zLjI5IDUuODk4bC0uMDA2LjAzOWMtLjAwOS4wNy0uOTIgNy4xNzMtLjkwNiAxOS44NzUuMDE0IDEyLjYyLjYwMyAxNy4xMTYgMS4xNzIgMjEuNDY1bC4wMDIuMDE1Yy4zMDggMi4zNTUgMy40NzUgMi45MjMgMy44MzYgMi45OGwuMDM0LjAwNGMuMTAxLjAxMy4yMDQuMDE5LjMwNS4wMTlhMi43NyAyLjc3IDAgMCAwIDEuMzk2LS4zOTJsNzUuMjczLTQzLjU1MmMxLjgxMS0xLjA3MSAyLjk5OS0zLjQyMyAzLjU0Mi02Ljk5NyAxLjE4Ni03LjgxNCAxLjczNC0zMy4wOTYtLjMwMS00MC4yOTktLjI1My0uODkzLS43MDQtMS41MjctMS4zNDMtMS44ODJsLS4xMzItLjA2Mi0yLjA4NS0uNzg5YS45NzMuOTczIDAgMCAwLS4zNTMtLjA2NScgZmlsbD0nIzQ1NUE2NCcvPjxwYXRoIGQ9J00xMjguMjY3IDExLjU2NWwxLjQ5NS40MzQtNTYuMzM5IDMyLjMyNicgZmlsbD0nI0ZGRicvPjxwYXRoIGQ9J003NC4yMDIgOTAuNTQ1YS41LjUgMCAwIDEtLjI1LS45MzFsMTguNDM3LTEwLjY0NWEuNDk5LjQ5OSAwIDEgMSAuNDk5Ljg2NEw3NC40NTEgOTAuNDc4bC0uMjQ5LjA2N003NS43NjQgNDIuNjU0bC0uMTA4LS4wNjIuMDQ2LS4xNzEgNS4xMzUtMi45NjQuMTcuMDQ1LS4wNDUuMTcxLTUuMTM1IDIuOTY0LS4wNjMuMDE3TTcwLjUyIDkwLjM3NVY0Ni40MjFsLjA2My0uMDM2TDEzNy44NCA3LjU1NHY0My45NTRsLS4wNjIuMDM2TDcwLjUyIDkwLjM3NXptLjI1LTQzLjgxMXY0My4zOGw2Ni44MjEtMzguNTc5VjcuOTg1TDcwLjc3IDQ2LjU2NHonIGZpbGw9JyM2MDdEOEInLz48cGF0aCBkPSdNODYuOTg2IDgzLjE4MmMtLjIzLjE0OS0uNjEyLjM4NC0uODQ5LjUyM2wtMTEuNTA1IDYuNzAxYy0uMjM3LjEzOS0uMjA2LjI1Mi4wNjguMjUyaC41NjVjLjI3NSAwIC42OTMtLjExMy45My0uMjUyTDg3LjcgODMuNzA1Yy4yMzctLjEzOS40MjgtLjI1My40MjUtLjI1NmExMS4yOSAxMS4yOSAwIDAgMS0uMDA2LS41MDNjMC0uMjc0LS4xODgtLjM3Ny0uNDE4LS4yMjdsLS43MTUuNDYzJyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTc1LjI2NiA5MC43ODJINzQuN2MtLjIgMC0uMzE2LS4wNTYtLjM0Ni0uMTY2LS4wMy0uMTEuMDQzLS4yMTcuMjE1LS4zMTdsMTEuNTA1LTYuNzAyYy4yMzYtLjEzOC42MTUtLjM3MS44NDQtLjUxOWwuNzE1LS40NjRhLjQ4OC40ODggMCAwIDEgLjI2Ni0uMDg5Yy4xNzIgMCAuMzQ1LjEzLjM0NS40MjEgMCAuMjE0LjAwMS4zNjMuMDAzLjQzN2wuMDA2LjAwNC0uMDA0LjA2OWMtLjAwMy4wNzUtLjAwMy4wNzUtLjQ4Ni4zNTZsLTExLjUwNSA2LjcwMmEyLjI4MiAyLjI4MiAwIDAgMS0uOTkyLjI2OHptLS42LS4yNWwuMDM0LjAwMWguNTY2Yy4yNTIgMCAuNjQ5LS4xMDguODY2LS4yMzRsMTEuNTA1LTYuNzAyYy4xNjgtLjA5OC4yOTQtLjE3My4zNjEtLjIxNC0uMDA0LS4wODQtLjAwNC0uMjE4LS4wMDQtLjQzN2wtLjA5NS0uMTcxLS4xMzEuMDQ5LS43MTQuNDYzYy0uMjMyLjE1LS42MTYuMzg2LS44NTQuNTI1bC0xMS41MDUgNi43MDItLjAyOS4wMTh6JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTc1LjI2NiA4OS44NzFINzQuN2MtLjIgMC0uMzE2LS4wNTYtLjM0Ni0uMTY2LS4wMy0uMTEuMDQzLS4yMTcuMjE1LS4zMTdsMTEuNTA1LTYuNzAyYy4yNTgtLjE1MS42OTQtLjI2OC45OTMtLjI2OGguNTY1Yy4yIDAgLjMxNi4wNTYuMzQ2LjE2Ni4wMy4xMS0uMDQzLjIxNy0uMjE1LjMxN2wtMTEuNTA1IDYuNzAyYTIuMjgyIDIuMjgyIDAgMCAxLS45OTIuMjY4em0tLjYtLjI1bC4wMzQuMDAxaC41NjZjLjI1MiAwIC42NDktLjEwNy44NjYtLjIzNGwxMS41MDUtNi43MDIuMDMtLjAxOC0uMDM1LS4wMDFoLS41NjVjLS4yNTIgMC0uNjQ5LjEwOC0uODY3LjIzNGwtMTEuNTA1IDYuNzAyLS4wMjkuMDE4ek03NC4zNyA5MC44MDF2LTEuMjQ3IDEuMjQ3JyBmaWxsPScjNjA3RDhCJy8+PHBhdGggZD0nTTY4LjEzIDkzLjkwMWMtLjc1MS0uMDkzLTEuMzE0LS43MzctMS40MzktMS4zNzYtLjgzMS00LjIzOC0xLjE1MS04Ljc4Mi0xLjE2NS0yMS4zNTItLjAxNS0xMi43ODQuODk3LTE5Ljc0NS44OTctMTkuNzQ1LjcxMS00LjE0NiAyLjc4Ny01LjE5MiAyLjc4Ny01LjE5Mmw3NC44NTktNDMuMjE5Yy4yMjMtLjEyOSAyLjQ4Ny0xLjU4NCAzLjE5NS45MjMgMS45NSA2LjkgMS40ODggMzEuODg3LjI3NSAzOS44NzgtLjM4OSAyLjU2NS0xLjI0OCA1LjIxNS0zLjA1NiA2LjI4M0w2OS4yMSA5My42NTNjLS4zODIuMjIxLS43NDkuMjg4LTEuMDguMjQ4IDAgMC0yLjc4MS0uNDQxLTMuMDAxLTIuMTI1LS41NjEtNC4yODEtMS4xNTItOC43ODEtMS4xNjctMjEuMzUxLS4wMTQtMTIuNzg0Ljg5OC0xOS43NDUuODk4LTE5Ljc0NS43MS00LjE0NiAyLjc4Ny01LjE5MSAyLjc4Ny01LjE5MWw2LjU5OC0zLjgxLjg3MS0uMTE5IDYuNTk5LTMuODMuMDQ2LS40NjFMNjguMTMgOTMuOTAxJyBmaWxsPScjRkFGQUZBJy8+PHBhdGggZD0nTTY4LjMxNyA5NC4xNjFsLS4yMTUtLjAxM2gtLjAwMWwtLjI0NC0uMDQ3Yy0uNzE5LS4xNTYtMi43NzItLjczNi0yLjk3Ni0yLjI5Mi0uNTY4LTQuMzQtMS4xNTQtOC44MTMtMS4xNjgtMjEuMzg0LS4wMTQtMTIuNjU0Ljg5MS0xOS43MDcuOS0xOS43NzcuNzI1LTQuMjMxIDIuODMyLTUuMzM4IDIuOTIyLTUuMzgybDYuNjI4LTMuODI3Ljg3LS4xMTkgNi40NDYtMy43NDIuMDM0LS4zMzRhLjI0OC4yNDggMCAwIDEgLjI3My0uMjIzLjI0OC4yNDggMCAwIDEgLjIyMy4yNzJsLS4wNTkuNTg5LTYuNzUyIDMuOTE5LS44Ny4xMTgtNi41NTYgMy43ODVjLS4wMzEuMDE2LTEuOTkgMS4wNjgtMi42NjYgNS4wMTgtLjAwNy4wNi0uOTA4IDcuMDg2LS44OTQgMTkuNzAyLjAxNCAxMi41MzkuNTk3IDE2Ljk5NiAxLjE2MSAyMS4zMDUuMDkxLjY5MS42ODkgMS4xNTQgMS4zMDkgMS40NTJhMS45NSAxLjk1IDAgMCAxLS4yMzYtLjYwOWMtLjc4MS0zLjk4NC0xLjE1NS04LjIwMi0xLjE3LTIxLjM5OS0uMDE0LTEyLjY1My44OTEtMTkuNzA3LjktMTkuNzc3LjcyNS00LjIzMSAyLjgzMi01LjMzNyAyLjkyMi01LjM4Mi0uMDA0LjAwMSA3NC40NDQtNDIuOTggNzQuODQ2LTQzLjIxMmwuMDI4LS4wMTdjLjkwNC0uNTM4IDEuNzItLjY4OCAyLjM2LS40MzMuNTU1LjIyMS45NDkuNzMzIDEuMTcyIDEuNTIgMi4wMTQgNy4xMjggMS40NiAzMi4yMTkuMjgxIDM5Ljk4My0uNTA3IDMuMzQxLTEuNTc1IDUuNTE1LTMuMTc1IDYuNDYyTDY5LjMzNSA5My44NjlhMi4wMjMgMi4wMjMgMCAwIDEtMS4wMTguMjkyem0tLjE0Ny0uNTA3Yy4yOTMuMDM2LjYwNC0uMDM3LjkxNS0uMjE3bDc1LjI3My00My41NTFjMS44MjMtMS4wNzggMi42MDItMy45MTUgMi45MzQtNi4xMDYgMS4xNzQtNy43MzEgMS43MzEtMzIuNjk1LS4yNjgtMzkuNzcyLS4xNzgtLjYzMS0uNDczLTEuMDMyLS44NzYtMS4xOTItLjQ4NC0uMTkzLTEuMTY2LS4wNTItMS45MjEuMzk3bC0uMDM0LjAyMS03NC44NTggNDMuMjE4Yy0uMDMxLjAxNy0xLjk4OSAxLjA2OS0yLjY2NiA1LjAxOS0uMDA3LjA1OS0uOTA4IDcuMDg1LS44OTQgMTkuNzAyLjAxNSAxMy4xNTUuMzg2IDE3LjM1MSAxLjE2MSAyMS4zMDMuMDkuNDYxLjQ3Ni45ODMgMS4wMzcgMS4xMzkuMTE0LjAyNS4xODUuMDM3LjE5Ni4wMzloLjAwMXonIGZpbGw9JyM0NTVBNjQnLz48cGF0aCBkPSdNNjkuMzE3IDY4Ljk4MmMuNDg5LS4yODEuODg1LS4wNTYuODg1LjUwNSAwIC41Ni0uMzk2IDEuMjQzLS44ODUgMS41MjUtLjQ4OC4yODItLjg4NC4wNTctLjg4NC0uNTA0IDAtLjU2LjM5Ni0xLjI0My44ODQtMS41MjYnIGZpbGw9JyNGRkYnLz48cGF0aCBkPSdNNjguOTIgNzEuMTMzYy0uMjg5IDAtLjQ4Ny0uMjI4LS40ODctLjYyNSAwLS41Ni4zOTYtMS4yNDMuODg0LTEuNTI2YS44MTIuODEyIDAgMCAxIC4zOTctLjEyMWMuMjg5IDAgLjQ4OC4yMjkuNDg4LjYyNiAwIC41Ni0uMzk2IDEuMjQzLS44ODUgMS41MjVhLjgxMi44MTIgMCAwIDEtLjM5Ny4xMjFtLjc5NC0yLjQ1OWEuOTc2Ljk3NiAwIDAgMC0uNDkuMTQ3Yy0uNTQ4LjMxNy0uOTc4IDEuMDU4LS45NzggMS42ODcgMCAuNDg2LjI3MS44MTIuNjc0LjgxMmEuOTg1Ljk4NSAwIDAgMCAuNDkxLS4xNDZjLjU0OC0uMzE3Ljk3OC0xLjA1Ny45NzgtMS42ODcgMC0uNDg2LS4yNzItLjgxMy0uNjc1LS44MTMnIGZpbGw9JyM4MDk3QTInLz48cGF0aCBkPSdNNjguOTIgNzAuOTQ3Yy0uMjcxIDAtLjI5OS0uMzA3LS4yOTktLjQzOSAwLS40OTEuMzYxLTEuMTE2Ljc5LTEuMzYzYS42MzIuNjMyIDAgMCAxIC4zMDMtLjA5NmMuMjcyIDAgLjMwMS4zMDYuMzAxLjQzOCAwIC40OTEtLjM2MyAxLjExNi0uNzkxIDEuMzY0YS42MjkuNjI5IDAgMCAxLS4zMDQuMDk2bS43OTQtMi4wODZhLjgxMi44MTIgMCAwIDAtLjM5Ny4xMjFjLS40ODguMjgzLS44ODQuOTY2LS44ODQgMS41MjYgMCAuMzk3LjE5OC42MjUuNDg3LjYyNWEuODEyLjgxMiAwIDAgMCAuMzk3LS4xMjFjLjQ4OS0uMjgyLjg4NS0uOTY1Ljg4NS0xLjUyNSAwLS4zOTctLjE5OS0uNjI2LS40ODgtLjYyNicgZmlsbD0nIzgwOTdBMicvPjxwYXRoIGQ9J002OS40NDQgODUuMzVjLjI2NC0uMTUyLjQ3Ny0uMDMxLjQ3Ny4yNzIgMCAuMzAzLS4yMTMuNjctLjQ3Ny44MjItLjI2My4xNTMtLjQ3Ny4wMzEtLjQ3Ny0uMjcxIDAtLjMwMi4yMTQtLjY3MS40NzctLjgyMycgZmlsbD0nI0ZGRicvPjxwYXRoIGQ9J002OS4yMyA4Ni41MWMtLjE1NiAwLS4yNjMtLjEyMy0uMjYzLS4zMzcgMC0uMzAyLjIxNC0uNjcxLjQ3Ny0uODIzYS40MzEuNDMxIDAgMCAxIC4yMTQtLjA2NmMuMTU2IDAgLjI2My4xMjQuMjYzLjMzOCAwIC4zMDMtLjIxMy42Ny0uNDc3LjgyMmEuNDMxLjQzMSAwIDAgMS0uMjE0LjA2Nm0uNDI4LTEuNDEyYy0uMSAwLS4yMDMuMDI5LS4zMDcuMDktLjMyLjE4NS0uNTcuNjE4LS41Ny45ODUgMCAuMzA5LjE4NS41MjQuNDQ5LjUyNGEuNjMuNjMgMCAwIDAgLjMwOC0uMDljLjMyLS4xODUuNTctLjYxOC41Ny0uOTg1IDAtLjMwOS0uMTg1LS41MjQtLjQ1LS41MjQnIGZpbGw9JyM4MDk3QTInLz48cGF0aCBkPSdNNjkuMjMgODYuMzIybC0uMDc2LS4xNDljMC0uMjM1LjE3OS0uNTQ0LjM4NC0uNjYxbC4xMi0uMDQxLjA3Ni4xNTFjMCAuMjM0LS4xNzkuNTQyLS4zODMuNjZsLS4xMjEuMDRtLjQyOC0xLjAzOGEuNDMxLjQzMSAwIDAgMC0uMjE0LjA2NmMtLjI2My4xNTItLjQ3Ny41MjEtLjQ3Ny44MjMgMCAuMjE0LjEwNy4zMzcuMjYzLjMzN2EuNDMxLjQzMSAwIDAgMCAuMjE0LS4wNjZjLjI2NC0uMTUyLjQ3Ny0uNTE5LjQ3Ny0uODIyIDAtLjIxNC0uMTA3LS4zMzgtLjI2My0uMzM4JyBmaWxsPScjODA5N0EyJy8+PHBhdGggZD0nTTEzOS4yNzggNy43Njl2NDMuNjY3TDcyLjIwOCA5MC4xNlY0Ni40OTNsNjcuMDctMzguNzI0JyBmaWxsPScjNDU1QTY0Jy8+PHBhdGggZD0nTTcyLjA4MyA5MC4zNzVWNDYuNDIxbC4wNjMtLjAzNiA2Ny4yNTctMzguODMxdjQzLjk1NGwtLjA2Mi4wMzYtNjcuMjU4IDM4LjgzMXptLjI1LTQzLjgxMXY0My4zOGw2Ni44MjEtMzguNTc5VjcuOTg1TDcyLjMzMyA0Ni41NjR6JyBmaWxsPScjNjA3RDhCJy8+PC9nPjxwYXRoIGQ9J00xMjUuNzM3IDg4LjY0N2wtNy42MzkgMy4zMzRWODRsLTExLjQ1OSA0LjcxM3Y4LjI2OUw5OSAxMDAuMzE1bDEzLjM2OSAzLjY0NiAxMy4zNjgtMTUuMzE0JyBmaWxsPScjNDU1QTY0Jy8+PC9nPjwvc3ZnPiI7CmZ1bmN0aW9uIFJvdGF0ZUluc3RydWN0aW9ucygpIHsKICB0aGlzLmxvYWRJY29uXygpOwogIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgdmFyIHMgPSBvdmVybGF5LnN0eWxlOwogIHMucG9zaXRpb24gPSAnZml4ZWQnOwogIHMudG9wID0gMDsKICBzLnJpZ2h0ID0gMDsKICBzLmJvdHRvbSA9IDA7CiAgcy5sZWZ0ID0gMDsKICBzLmJhY2tncm91bmRDb2xvciA9ICdncmF5JzsKICBzLmZvbnRGYW1pbHkgPSAnc2Fucy1zZXJpZic7CiAgcy56SW5kZXggPSAxMDAwMDAwOwogIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICBpbWcuc3JjID0gdGhpcy5pY29uOwogIHZhciBzID0gaW1nLnN0eWxlOwogIHMubWFyZ2luTGVmdCA9ICcyNSUnOwogIHMubWFyZ2luVG9wID0gJzI1JSc7CiAgcy53aWR0aCA9ICc1MCUnOwogIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaW1nKTsKICB2YXIgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIHZhciBzID0gdGV4dC5zdHlsZTsKICBzLnRleHRBbGlnbiA9ICdjZW50ZXInOwogIHMuZm9udFNpemUgPSAnMTZweCc7CiAgcy5saW5lSGVpZ2h0ID0gJzI0cHgnOwogIHMubWFyZ2luID0gJzI0cHggMjUlJzsKICBzLndpZHRoID0gJzUwJSc7CiAgdGV4dC5pbm5lckhUTUwgPSAnUGxhY2UgeW91ciBwaG9uZSBpbnRvIHlvdXIgQ2FyZGJvYXJkIHZpZXdlci4nOwogIG92ZXJsYXkuYXBwZW5kQ2hpbGQodGV4dCk7CiAgdmFyIHNuYWNrYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgdmFyIHMgPSBzbmFja2Jhci5zdHlsZTsKICBzLmJhY2tncm91bmRDb2xvciA9ICcjQ0ZEOERDJzsKICBzLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICBzLmJvdHRvbSA9IDA7CiAgcy53aWR0aCA9ICcxMDAlJzsKICBzLmhlaWdodCA9ICc0OHB4JzsKICBzLnBhZGRpbmcgPSAnMTRweCAyNHB4JzsKICBzLmJveFNpemluZyA9ICdib3JkZXItYm94JzsKICBzLmNvbG9yID0gJyM2NTZBNkInOwogIG92ZXJsYXkuYXBwZW5kQ2hpbGQoc25hY2tiYXIpOwogIHZhciBzbmFja2JhclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBzbmFja2JhclRleHQuc3R5bGUuZmxvYXQgPSAnbGVmdCc7CiAgc25hY2tiYXJUZXh0LmlubmVySFRNTCA9ICdObyBDYXJkYm9hcmQgdmlld2VyPyc7CiAgdmFyIHNuYWNrYmFyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIHNuYWNrYmFyQnV0dG9uLmhyZWYgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9nZXQvY2FyZGJvYXJkL2dldC1jYXJkYm9hcmQvJzsKICBzbmFja2JhckJ1dHRvbi5pbm5lckhUTUwgPSAnZ2V0IG9uZSc7CiAgc25hY2tiYXJCdXR0b24udGFyZ2V0ID0gJ19ibGFuayc7CiAgdmFyIHMgPSBzbmFja2JhckJ1dHRvbi5zdHlsZTsKICBzLmZsb2F0ID0gJ3JpZ2h0JzsKICBzLmZvbnRXZWlnaHQgPSA2MDA7CiAgcy50ZXh0VHJhbnNmb3JtID0gJ3VwcGVyY2FzZSc7CiAgcy5ib3JkZXJMZWZ0ID0gJzFweCBzb2xpZCBncmF5JzsKICBzLnBhZGRpbmdMZWZ0ID0gJzI0cHgnOwogIHMudGV4dERlY29yYXRpb24gPSAnbm9uZSc7CiAgcy5jb2xvciA9ICcjNjU2QTZCJzsKICBzbmFja2Jhci5hcHBlbmRDaGlsZChzbmFja2JhclRleHQpOwogIHNuYWNrYmFyLmFwcGVuZENoaWxkKHNuYWNrYmFyQnV0dG9uKTsKICB0aGlzLm92ZXJsYXkgPSBvdmVybGF5OwogIHRoaXMudGV4dCA9IHRleHQ7CiAgdGhpcy5oaWRlKCk7Cn0KUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHBhcmVudCkgewogIGlmICghcGFyZW50ICYmICF0aGlzLm92ZXJsYXkucGFyZW50RWxlbWVudCkgewogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXkpOwogIH0gZWxzZSBpZiAocGFyZW50KSB7CiAgICBpZiAodGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQgJiYgdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQgIT0gcGFyZW50KSB0aGlzLm92ZXJsYXkucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm92ZXJsYXkpOwogICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7CiAgfQogIHRoaXMub3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICB2YXIgaW1nID0gdGhpcy5vdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJ2ltZycpOwogIHZhciBzID0gaW1nLnN0eWxlOwogIGlmIChpc0xhbmRzY2FwZU1vZGUoKSkgewogICAgcy53aWR0aCA9ICcyMCUnOwogICAgcy5tYXJnaW5MZWZ0ID0gJzQwJSc7CiAgICBzLm1hcmdpblRvcCA9ICczJSc7CiAgfSBlbHNlIHsKICAgIHMud2lkdGggPSAnNTAlJzsKICAgIHMubWFyZ2luTGVmdCA9ICcyNSUnOwogICAgcy5tYXJnaW5Ub3AgPSAnMjUlJzsKICB9Cn07ClJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKfTsKUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5zaG93VGVtcG9yYXJpbHkgPSBmdW5jdGlvbiAobXMsIHBhcmVudCkgewogIHRoaXMuc2hvdyhwYXJlbnQpOwogIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZS5iaW5kKHRoaXMpLCBtcyk7Cn07ClJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUuZGlzYWJsZVNob3dUZW1wb3JhcmlseSA9IGZ1bmN0aW9uICgpIHsKICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7Cn07ClJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkgewogIHRoaXMuZGlzYWJsZVNob3dUZW1wb3JhcmlseSgpOwogIGlmICghaXNMYW5kc2NhcGVNb2RlKCkgJiYgaXNNb2JpbGUoKSkgewogICAgdGhpcy5zaG93KCk7CiAgfSBlbHNlIHsKICAgIHRoaXMuaGlkZSgpOwogIH0KfTsKUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5sb2FkSWNvbl8gPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5pY29uID0gZGF0YVVyaSgnaW1hZ2Uvc3ZnK3htbCcsIHJvdGF0ZUluc3RydWN0aW9uc0Fzc2V0KTsKfTsKdmFyIERFRkFVTFRfVklFV0VSID0gJ0NhcmRib2FyZFYxJzsKdmFyIFZJRVdFUl9LRVkgPSAnV0VCVlJfQ0FSREJPQVJEX1ZJRVdFUic7CnZhciBDTEFTU19OQU1FID0gJ3dlYnZyLXBvbHlmaWxsLXZpZXdlci1zZWxlY3Rvcic7CmZ1bmN0aW9uIFZpZXdlclNlbGVjdG9yKGRlZmF1bHRWaWV3ZXIpIHsKICB0cnkgewogICAgdGhpcy5zZWxlY3RlZEtleSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFZJRVdFUl9LRVkpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCB2aWV3ZXIgcHJvZmlsZTogJXMnLCBlcnJvcik7CiAgfQogIGlmICghdGhpcy5zZWxlY3RlZEtleSkgewogICAgdGhpcy5zZWxlY3RlZEtleSA9IGRlZmF1bHRWaWV3ZXIgfHwgREVGQVVMVF9WSUVXRVI7CiAgfQogIHRoaXMuZGlhbG9nID0gdGhpcy5jcmVhdGVEaWFsb2dfKERldmljZUluZm8uVmlld2Vycyk7CiAgdGhpcy5yb290ID0gbnVsbDsKICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2tzXyA9IFtdOwp9ClZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHJvb3QpIHsKICB0aGlzLnJvb3QgPSByb290OwogIHJvb3QuYXBwZW5kQ2hpbGQodGhpcy5kaWFsb2cpOwogIHZhciBzZWxlY3RlZCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5zZWxlY3RlZEtleSk7CiAgc2VsZWN0ZWQuY2hlY2tlZCA9IHRydWU7CiAgdGhpcy5kaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7Cn07ClZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LmNvbnRhaW5zKHRoaXMuZGlhbG9nKSkgewogICAgdGhpcy5yb290LnJlbW92ZUNoaWxkKHRoaXMuZGlhbG9nKTsKICB9CiAgdGhpcy5kaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKfTsKVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmdldEN1cnJlbnRWaWV3ZXIgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIERldmljZUluZm8uVmlld2Vyc1t0aGlzLnNlbGVjdGVkS2V5XTsKfTsKVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmdldFNlbGVjdGVkS2V5XyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgaW5wdXQgPSB0aGlzLmRpYWxvZy5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPWZpZWxkXTpjaGVja2VkJyk7CiAgaWYgKGlucHV0KSB7CiAgICByZXR1cm4gaW5wdXQuaWQ7CiAgfQogIHJldHVybiBudWxsOwp9OwpWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoY2IpIHsKICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2tzXy5wdXNoKGNiKTsKfTsKVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmZpcmVPbkNoYW5nZV8gPSBmdW5jdGlvbiAodmlld2VyKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2tzXy5sZW5ndGg7IGkrKykgewogICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrc19baV0odmlld2VyKTsKICB9Cn07ClZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5vblNhdmVfID0gZnVuY3Rpb24gKCkgewogIHRoaXMuc2VsZWN0ZWRLZXkgPSB0aGlzLmdldFNlbGVjdGVkS2V5XygpOwogIGlmICghdGhpcy5zZWxlY3RlZEtleSB8fCAhRGV2aWNlSW5mby5WaWV3ZXJzW3RoaXMuc2VsZWN0ZWRLZXldKSB7CiAgICBjb25zb2xlLmVycm9yKCdWaWV3ZXJTZWxlY3Rvci5vblNhdmVfOiB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4hJyk7CiAgICByZXR1cm47CiAgfQogIHRoaXMuZmlyZU9uQ2hhbmdlXyhEZXZpY2VJbmZvLlZpZXdlcnNbdGhpcy5zZWxlY3RlZEtleV0pOwogIHRyeSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShWSUVXRVJfS0VZLCB0aGlzLnNlbGVjdGVkS2V5KTsKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNhdmUgdmlld2VyIHByb2ZpbGU6ICVzJywgZXJyb3IpOwogIH0KICB0aGlzLmhpZGUoKTsKfTsKVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmNyZWF0ZURpYWxvZ18gPSBmdW5jdGlvbiAob3B0aW9ucykgewogIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FKTsKICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIHZhciBzID0gb3ZlcmxheS5zdHlsZTsKICBzLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICBzLmxlZnQgPSAwOwogIHMudG9wID0gMDsKICBzLndpZHRoID0gJzEwMCUnOwogIHMuaGVpZ2h0ID0gJzEwMCUnOwogIHMuYmFja2dyb3VuZCA9ICdyZ2JhKDAsIDAsIDAsIDAuMyknOwogIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGUuYmluZCh0aGlzKSk7CiAgdmFyIHdpZHRoID0gMjgwOwogIHZhciBkaWFsb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICB2YXIgcyA9IGRpYWxvZy5zdHlsZTsKICBzLmJveFNpemluZyA9ICdib3JkZXItYm94JzsKICBzLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICBzLnRvcCA9ICcyNHB4JzsKICBzLmxlZnQgPSAnNTAlJzsKICBzLm1hcmdpbkxlZnQgPSAtd2lkdGggLyAyICsgJ3B4JzsKICBzLndpZHRoID0gd2lkdGggKyAncHgnOwogIHMucGFkZGluZyA9ICcyNHB4JzsKICBzLm92ZXJmbG93ID0gJ2hpZGRlbic7CiAgcy5iYWNrZ3JvdW5kID0gJyNmYWZhZmEnOwogIHMuZm9udEZhbWlseSA9ICInUm9ib3RvJywgc2Fucy1zZXJpZiI7CiAgcy5ib3hTaGFkb3cgPSAnMHB4IDVweCAyMHB4ICM2NjYnOwogIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUgxXygnU2VsZWN0IHlvdXIgdmlld2VyJykpOwogIGZvciAodmFyIGlkIGluIG9wdGlvbnMpIHsKICAgIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUNob2ljZV8oaWQsIG9wdGlvbnNbaWRdLmxhYmVsKSk7CiAgfQogIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUJ1dHRvbl8oJ1NhdmUnLCB0aGlzLm9uU2F2ZV8uYmluZCh0aGlzKSkpOwogIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvdmVybGF5KTsKICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nKTsKICByZXR1cm4gY29udGFpbmVyOwp9OwpWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlSDFfID0gZnVuY3Rpb24gKG5hbWUpIHsKICB2YXIgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpOwogIHZhciBzID0gaDEuc3R5bGU7CiAgcy5jb2xvciA9ICdibGFjayc7CiAgcy5mb250U2l6ZSA9ICcyMHB4JzsKICBzLmZvbnRXZWlnaHQgPSAnYm9sZCc7CiAgcy5tYXJnaW5Ub3AgPSAwOwogIHMubWFyZ2luQm90dG9tID0gJzI0cHgnOwogIGgxLmlubmVySFRNTCA9IG5hbWU7CiAgcmV0dXJuIGgxOwp9OwpWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlQ2hvaWNlXyA9IGZ1bmN0aW9uIChpZCwgbmFtZSkgewogIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBkaXYuc3R5bGUubWFyZ2luVG9wID0gJzhweCc7CiAgZGl2LnN0eWxlLmNvbG9yID0gJ2JsYWNrJzsKICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogIGlucHV0LnN0eWxlLmZvbnRTaXplID0gJzMwcHgnOwogIGlucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7CiAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3JhZGlvJyk7CiAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGlkKTsKICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZmllbGQnKTsKICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpOwogIGxhYmVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnNHB4JzsKICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTsKICBsYWJlbC5pbm5lckhUTUwgPSBuYW1lOwogIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7CiAgZGl2LmFwcGVuZENoaWxkKGxhYmVsKTsKICByZXR1cm4gZGl2Owp9OwpWaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlQnV0dG9uXyA9IGZ1bmN0aW9uIChsYWJlbCwgb25jbGljaykgewogIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICBidXR0b24uaW5uZXJIVE1MID0gbGFiZWw7CiAgdmFyIHMgPSBidXR0b24uc3R5bGU7CiAgcy5mbG9hdCA9ICdyaWdodCc7CiAgcy50ZXh0VHJhbnNmb3JtID0gJ3VwcGVyY2FzZSc7CiAgcy5jb2xvciA9ICcjMTA5NGY3JzsKICBzLmZvbnRTaXplID0gJzE0cHgnOwogIHMubGV0dGVyU3BhY2luZyA9IDA7CiAgcy5ib3JkZXIgPSAwOwogIHMuYmFja2dyb3VuZCA9ICdub25lJzsKICBzLm1hcmdpblRvcCA9ICcxNnB4JzsKICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKTsKICByZXR1cm4gYnV0dG9uOwp9Owp2YXIgY29tbW9uanNHbG9iYWwkJDEgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBjb21tb25qc0dsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBjb21tb25qc0dsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTsKZnVuY3Rpb24gdW53cmFwRXhwb3J0cyQkMSAoeCkgewoJcmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDsKfQpmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZSQkMShmbiwgbW9kdWxlKSB7CglyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7Cn0KdmFyIE5vU2xlZXAgPSBjcmVhdGVDb21tb25qc01vZHVsZSQkMShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7Cgltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKfSkoY29tbW9uanNHbG9iYWwkJDEsIGZ1bmN0aW9uKCkgewpyZXR1cm4gICAgICAgICAgKGZ1bmN0aW9uKG1vZHVsZXMpIHsKICAgICAgICAgCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307CiAgICAgICAgIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7CiAgICAgICAgIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKICAgICAgICAgCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CiAgICAgICAgIAkJfQogICAgICAgICAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKICAgICAgICAgCQkJaTogbW9kdWxlSWQsCiAgICAgICAgIAkJCWw6IGZhbHNlLAogICAgICAgICAJCQlleHBvcnRzOiB7fQogICAgICAgICAJCX07CiAgICAgICAgIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CiAgICAgICAgIAkJbW9kdWxlLmwgPSB0cnVlOwogICAgICAgICAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKICAgICAgICAgCX0KICAgICAgICAgCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7CiAgICAgICAgIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwogICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7CiAgICAgICAgIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewogICAgICAgICAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewogICAgICAgICAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgICAgCQkJCWVudW1lcmFibGU6IHRydWUsCiAgICAgICAgIAkJCQlnZXQ6IGdldHRlcgogICAgICAgICAJCQl9KTsKICAgICAgICAgCQl9CiAgICAgICAgIAl9OwogICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgICAgICAgIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/CiAgICAgICAgIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6CiAgICAgICAgIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07CiAgICAgICAgIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwogICAgICAgICAJCXJldHVybiBnZXR0ZXI7CiAgICAgICAgIAl9OwogICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9OwogICAgICAgICAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7CiAgICAgICAgIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKICAgICAgICAgfSkKICAgICAgICAgKFsKICAgICAgKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CnZhciBtZWRpYUZpbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwp2YXIgb2xkSU9TID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFyc2VGbG9hdCgoJycgKyAoL0NQVS4qT1MgKFswLTlfXXszLDR9KVswLTlfXXswLDF9fChDUFUgbGlrZSkuKkFwcGxlV2ViS2l0LipNb2JpbGUvaS5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IFswLCAnJ10pWzFdKS5yZXBsYWNlKCd1bmRlZmluZWQnLCAnM18yJykucmVwbGFjZSgnXycsICcuJykucmVwbGFjZSgnXycsICcnKSkgPCAxMCAmJiAhd2luZG93Lk1TU3RyZWFtOwp2YXIgTm9TbGVlcCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBOb1NsZWVwKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vU2xlZXApOwogICAgaWYgKG9sZElPUykgewogICAgICB0aGlzLm5vU2xlZXBUaW1lciA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICB0aGlzLm5vU2xlZXBWaWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7CiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAnJyk7CiAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnNldEF0dHJpYnV0ZSgnc3JjJywgbWVkaWFGaWxlKTsKICAgICAgdGhpcy5ub1NsZWVwVmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKHRoaXMubm9TbGVlcFZpZGVvLmN1cnJlbnRUaW1lID4gMC41KSB7CiAgICAgICAgICB0aGlzLm5vU2xlZXBWaWRlby5jdXJyZW50VGltZSA9IE1hdGgucmFuZG9tKCk7CiAgICAgICAgfQogICAgICB9LmJpbmQodGhpcykpOwogICAgfQogIH0KICBfY3JlYXRlQ2xhc3MoTm9TbGVlcCwgW3sKICAgIGtleTogJ2VuYWJsZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlKCkgewogICAgICBpZiAob2xkSU9TKSB7CiAgICAgICAgdGhpcy5kaXNhYmxlKCk7CiAgICAgICAgdGhpcy5ub1NsZWVwVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7CiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh3aW5kb3cuc3RvcCwgMCk7CiAgICAgICAgfSwgMTUwMDApOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubm9TbGVlcFZpZGVvLnBsYXkoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2Rpc2FibGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7CiAgICAgIGlmIChvbGRJT1MpIHsKICAgICAgICBpZiAodGhpcy5ub1NsZWVwVGltZXIpIHsKICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubm9TbGVlcFRpbWVyKTsKICAgICAgICAgIHRoaXMubm9TbGVlcFRpbWVyID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5ub1NsZWVwVmlkZW8ucGF1c2UoKTsKICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gTm9TbGVlcDsKfSgpOwptb2R1bGUuZXhwb3J0cyA9IE5vU2xlZXA7CiAgICAgIH0pLAogICAgICAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7Cm1vZHVsZS5leHBvcnRzID0gJ2RhdGE6dmlkZW8vbXA0O2Jhc2U2NCxBQUFBSUdaMGVYQnRjRFF5QUFBQ0FHbHpiMjFwYzI4eVlYWmpNVzF3TkRFQUFBQUlabkpsWlFBQUNLQnRaR0YwQUFBQzh3WUYvLy92M0VYcHZlYlpTTGVXTE5nZzJTUHU3M2d5TmpRZ0xTQmpiM0psSURFME1pQnlNalEzT1NCa1pEYzVZVFl4SUMwZ1NDNHlOalF2VFZCRlJ5MDBJRUZXUXlCamIyUmxZeUF0SUVOdmNIbHNaV1owSURJd01ETXRNakF4TkNBdElHaDBkSEE2THk5M2QzY3VkbWxrWlc5c1lXNHViM0puTDNneU5qUXVhSFJ0YkNBdElHOXdkR2x2Ym5NNklHTmhZbUZqUFRFZ2NtVm1QVEVnWkdWaWJHOWphejB4T2pBNk1DQmhibUZzZVhObFBUQjRNVG93ZURFeE1TQnRaVDFvWlhnZ2MzVmliV1U5TWlCd2MzazlNU0J3YzNsZmNtUTlNUzR3TURvd0xqQXdJRzFwZUdWa1gzSmxaajB3SUcxbFgzSmhibWRsUFRFMklHTm9jbTl0WVY5dFpUMHhJSFJ5Wld4c2FYTTlNQ0E0ZURoa1kzUTlNQ0JqY1cwOU1DQmtaV0ZrZW05dVpUMHlNU3d4TVNCbVlYTjBYM0J6YTJsd1BURWdZMmh5YjIxaFgzRndYMjltWm5ObGREMHdJSFJvY21WaFpITTlOaUJzYjI5cllXaGxZV1JmZEdoeVpXRmtjejB4SUhOc2FXTmxaRjkwYUhKbFlXUnpQVEFnYm5JOU1DQmtaV05wYldGMFpUMHhJR2x1ZEdWeWJHRmpaV1E5TUNCaWJIVnlZWGxmWTI5dGNHRjBQVEFnWTI5dWMzUnlZV2x1WldSZmFXNTBjbUU5TUNCaVpuSmhiV1Z6UFRNZ1lsOXdlWEpoYldsa1BUSWdZbDloWkdGd2REMHhJR0pmWW1saGN6MHdJR1JwY21WamREMHhJSGRsYVdkb2RHSTlNU0J2Y0dWdVgyZHZjRDB3SUhkbGFXZG9kSEE5TVNCclpYbHBiblE5TXpBd0lHdGxlV2x1ZEY5dGFXNDlNekFnYzJObGJtVmpkWFE5TkRBZ2FXNTBjbUZmY21WbWNtVnphRDB3SUhKalgyeHZiMnRoYUdWaFpEMHhNQ0J5WXoxamNtWWdiV0owY21WbFBURWdZM0ptUFRJd0xqQWdjV052YlhBOU1DNDJNQ0J4Y0cxcGJqMHdJSEZ3YldGNFBUWTVJSEZ3YzNSbGNEMDBJSFppZGw5dFlYaHlZWFJsUFRJd01EQXdJSFppZGw5aWRXWnphWHBsUFRJMU1EQXdJR055Wmw5dFlYZzlNQzR3SUc1aGJGOW9jbVE5Ym05dVpTQm1hV3hzWlhJOU1DQnBjRjl5WVhScGJ6MHhMalF3SUdGeFBURTZNUzR3TUFDQUFBQUFPV1dJaEFBMy8vcCtDN3Y4dEREU1RqZjk3dzU1aTNTYlJQTzRaWStoa2pENWhia0FrTDN6cEo2aC9MUjFDQUFCemdCMWtxcXpVb3JsaFFBQUFBeEJtaVFZaG4vK3FaWUFETGdBQUFBSlFaNUNRaFgvQUFqNUlRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZVlVUW4vd0FMS0NFQUEwQm9IQUFBQUFrQm5tTkVKLzhBQ3lraEFBTkFhQndoQUFOQWFCd0FBQUFOUVpwb05FeERQLzZwbGdBTXVTRUFBMEJvSEFBQUFBdEJub1pGRVN3ci93QUkrU0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JucVZFSi84QUN5a2hBQU5BYUJ3QUFBQUpBWjZuUkNmL0FBc29JUUFEUUdnY0lRQURRR2djQUFBQURVR2FyRFJNUXovK3FaWUFETGdoQUFOQWFCd0FBQUFMUVo3S1JSVXNLLzhBQ1BraEFBTkFhQndBQUFBSkFaN3BSQ2YvQUFzb0lRQURRR2djSVFBRFFHZ2NBQUFBQ1FHZTYwUW4vd0FMS0NFQUEwQm9IQUFBQUExQm12QTBURU0vL3FtV0FBeTVJUUFEUUdnY0lRQURRR2djQUFBQUMwR2ZEa1VWTEN2L0FBajVJUUFEUUdnY0FBQUFDUUdmTFVRbi93QUxLU0VBQTBCb0hDRUFBMEJvSEFBQUFBa0JueTlFSi84QUN5Z2hBQU5BYUJ3QUFBQU5RWnMwTkV4RFAvNnBsZ0FNdUNFQUEwQm9IQUFBQUF0Qm4xSkZGU3dyL3dBSStTRUFBMEJvSENFQUEwQm9IQUFBQUFrQm4zRkVKLzhBQ3lnaEFBTkFhQndBQUFBSkFaOXpSQ2YvQUFzb0lRQURRR2djSVFBRFFHZ2NBQUFBRFVHYmVEUk1Rei8rcVpZQURMa2hBQU5BYUJ3QUFBQUxRWitXUlJVc0svOEFDUGdoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWisxUkNmL0FBc3BJUUFEUUdnY0FBQUFDUUdmdDBRbi93QUxLU0VBQTBCb0hDRUFBMEJvSEFBQUFBMUJtN3cwVEVNLy9xbVdBQXk0SVFBRFFHZ2NBQUFBQzBHZjJrVVZMQ3YvQUFqNUlRQURRR2djQUFBQUNRR2YrVVFuL3dBTEtDRUFBMEJvSENFQUEwQm9IQUFBQUFrQm4vdEVKLzhBQ3lraEFBTkFhQndBQUFBTlFadmdORXhEUC82cGxnQU11U0VBQTBCb0hDRUFBMEJvSEFBQUFBdEJuaDVGRlN3ci93QUkrQ0VBQTBCb0hBQUFBQWtCbmoxRUovOEFDeWdoQUFOQWFCd2hBQU5BYUJ3QUFBQUpBWjQvUkNmL0FBc3BJUUFEUUdnY0FBQUFEVUdhSkRSTVF6LytxWllBRExnaEFBTkFhQndBQUFBTFFaNUNSUlVzSy84QUNQa2hBQU5BYUJ3aEFBTkFhQndBQUFBSkFaNWhSQ2YvQUFzb0lRQURRR2djQUFBQUNRR2VZMFFuL3dBTEtTRUFBMEJvSENFQUEwQm9IQUFBQUExQm1tZzBURU0vL3FtV0FBeTVJUUFEUUdnY0FBQUFDMEdlaGtVVkxDdi9BQWo1SVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdlcFVRbi93QUxLU0VBQTBCb0hBQUFBQWtCbnFkRUovOEFDeWdoQUFOQWFCd0FBQUFOUVpxc05FeERQLzZwbGdBTXVDRUFBMEJvSENFQUEwQm9IQUFBQUF0Qm5zcEZGU3dyL3dBSStTRUFBMEJvSEFBQUFBa0JudWxFSi84QUN5Z2hBQU5BYUJ3aEFBTkFhQndBQUFBSkFaN3JSQ2YvQUFzb0lRQURRR2djQUFBQURVR2E4RFJNUXovK3FaWUFETGtoQUFOQWFCd2hBQU5BYUJ3QUFBQUxRWjhPUlJVc0svOEFDUGtoQUFOQWFCd0FBQUFKQVo4dFJDZi9BQXNwSVFBRFFHZ2NJUUFEUUdnY0FBQUFDUUdmTDBRbi93QUxLQ0VBQTBCb0hBQUFBQTFCbXpRMFRFTS8vcW1XQUF5NElRQURRR2djQUFBQUMwR2ZVa1VWTEN2L0FBajVJUUFEUUdnY0lRQURRR2djQUFBQUNRR2ZjVVFuL3dBTEtDRUFBMEJvSEFBQUFBa0JuM05FSi84QUN5Z2hBQU5BYUJ3aEFBTkFhQndBQUFBTlFadDRORXhDLy82cGxnQU11U0VBQTBCb0hBQUFBQXRCbjVaRkZTd3Ivd0FJK0NFQUEwQm9IQ0VBQTBCb0hBQUFBQWtCbjdWRUovOEFDeWtoQUFOQWFCd0FBQUFKQVorM1JDZi9BQXNwSVFBRFFHZ2NBQUFBRFVHYnV6Uk1Rbi8rbmhBQVlzQWhBQU5BYUJ3aEFBTkFhQndBQUFBSlFaL2FRaFAvQUFzcElRQURRR2djQUFBQUNRR2YrVVFuL3dBTEtDRUFBMEJvSENFQUEwQm9IQ0VBQTBCb0hDRUFBMEJvSENFQUEwQm9IQ0VBQTBCb0hBQUFDaUZ0YjI5MkFBQUFiRzEyYUdRQUFBQUExWUNDWDlXQWdsOEFBQVBvQUFBSC9BQUJBQUFCQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBREFBQUFHR2x2WkhNQUFBQUFFSUNBZ0FjQVQvLy8vdjcvQUFBRitYUnlZV3NBQUFCY2RHdG9aQUFBQUFQVmdJSmYxWUNDWHdBQUFBRUFBQUFBQUFBSDBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQXlnQUFBTW9BQUFBQUFDUmxaSFJ6QUFBQUhHVnNjM1FBQUFBQUFBQUFBUUFBQjlBQUFCZHdBQUVBQUFBQUJYRnRaR2xoQUFBQUlHMWthR1FBQUFBQTFZQ0NYOVdBZ2w4QUFWK1FBQUsvSUZYRUFBQUFBQUF0YUdSc2NnQUFBQUFBQUFBQWRtbGtaUUFBQUFBQUFBQUFBQUFBQUZacFpHVnZTR0Z1Wkd4bGNnQUFBQVVjYldsdVpnQUFBQlIyYldoa0FBQUFBUUFBQUFBQUFBQUFBQUFBSkdScGJtWUFBQUFjWkhKbFpnQUFBQUFBQUFBQkFBQUFESFZ5YkNBQUFBQUJBQUFFM0hOMFltd0FBQUNZYzNSelpBQUFBQUFBQUFBQkFBQUFpR0YyWXpFQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBeWdES0FFZ0FBQUJJQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVkvLzhBQUFBeVlYWmpRd0ZOUUNqLzRRQWJaMDFBS095aG8zeVNUVUJBUUZBQUFBTUFFQUFyOGdEeGd4bGdBUUFFYU8rRzhnQUFBQmh6ZEhSekFBQUFBQUFBQUFFQUFBQThBQUFMdUFBQUFCUnpkSE56QUFBQUFBQUFBQUVBQUFBQkFBQUI4R04wZEhNQUFBQUFBQUFBUEFBQUFBRUFBQmR3QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBRHFZQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUFFQUFBdTRBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFEcVlBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQUVBQUF1NEFBQUFBUUFBT3BnQUFBQUJBQUFYY0FBQUFBRUFBQUFBQUFBQUFRQUFDN2dBQUFBQkFBQTZtQUFBQUFFQUFCZHdBQUFBQVFBQUFBQUFBQUFCQUFBTHVBQUFBQUVBQURxWUFBQUFBUUFBRjNBQUFBQUJBQUFBQUFBQUFBRUFBQXU0QUFBQUFRQUFPcGdBQUFBQkFBQVhjQUFBQUFFQUFBQUFBQUFBQVFBQUM3Z0FBQUFCQUFBNm1BQUFBQUVBQUJkd0FBQUFBUUFBQUFBQUFBQUJBQUFMdUFBQUFBRUFBRHFZQUFBQUFRQUFGM0FBQUFBQkFBQUFBQUFBQUFFQUFBdTRBQUFBQVFBQU9wZ0FBQUFCQUFBWGNBQUFBQUVBQUFBQUFBQUFBUUFBQzdnQUFBQUJBQUE2bUFBQUFBRUFBQmR3QUFBQUFRQUFBQUFBQUFBQkFBQUx1QUFBQUFFQUFDN2dBQUFBQVFBQUYzQUFBQUFCQUFBQUFBQUFBQnh6ZEhOakFBQUFBQUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUVFYzNSemVnQUFBQUFBQUFBQUFBQUFQQUFBQXpRQUFBQVFBQUFBRFFBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQVBBQUFBRFFBQUFBMEFBQUFSQUFBQUR3QUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFQQUFBQURRQUFBQTBBQUFBUkFBQUFEd0FBQUEwQUFBQU5BQUFBRVFBQUFBOEFBQUFOQUFBQURRQUFBQkVBQUFBUEFBQUFEUUFBQUEwQUFBQVJBQUFBRHdBQUFBMEFBQUFOQUFBQUVRQUFBQThBQUFBTkFBQUFEUUFBQUJFQUFBQVBBQUFBRFFBQUFBMEFBQUFSQUFBQUR3QUFBQTBBQUFBTkFBQUFFUUFBQUE4QUFBQU5BQUFBRFFBQUFCRUFBQUFOQUFBQURRQUFBUUJ6ZEdOdkFBQUFBQUFBQUR3QUFBQXdBQUFEWkFBQUEzUUFBQU9OQUFBRG9BQUFBN2tBQUFQUUFBQUQ2d0FBQS80QUFBUVhBQUFFTGdBQUJFTUFBQVJjQUFBRWJ3QUFCSXdBQUFTaEFBQUV1Z0FBQk0wQUFBVGtBQUFFL3dBQUJSSUFBQVVyQUFBRlFnQUFCVjBBQUFWd0FBQUZpUUFBQmFBQUFBVzFBQUFGemdBQUJlRUFBQVgrQUFBR0V3QUFCaXdBQUFZL0FBQUdWZ0FBQm5FQUFBYUVBQUFHblFBQUJyUUFBQWJQQUFBRzRnQUFCdlVBQUFjU0FBQUhKd0FBQjBBQUFBZFRBQUFIY0FBQUI0VUFBQWVlQUFBSHNRQUFCOGdBQUFmakFBQUg5Z0FBQ0E4QUFBZ21BQUFJUVFBQUNGUUFBQWhuQUFBSWhBQUFDSmNBQUFNc2RISmhhd0FBQUZ4MGEyaGtBQUFBQTlXQWdsL1ZnSUpmQUFBQUFnQUFBQUFBQUFmOEFBQUFBQUFBQUFBQUFBQUJBUUFBQUFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQ3NtMWthV0VBQUFBZ2JXUm9aQUFBQUFEVmdJSmYxWUNDWHdBQXJFUUFBV0FBVmNRQUFBQUFBQ2RvWkd4eUFBQUFBQUFBQUFCemIzVnVBQUFBQUFBQUFBQUFBQUFBVTNSbGNtVnZBQUFBQW1OdGFXNW1BQUFBRUhOdGFHUUFBQUFBQUFBQUFBQUFBQ1JrYVc1bUFBQUFIR1J5WldZQUFBQUFBQUFBQVFBQUFBeDFjbXdnQUFBQUFRQUFBaWR6ZEdKc0FBQUFaM04wYzJRQUFBQUFBQUFBQVFBQUFGZHRjRFJoQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFDQUJBQUFBQUFyRVFBQUFBQUFETmxjMlJ6QUFBQUFBT0FnSUFpQUFJQUJJQ0FnQlJBRlFBQUFBQUREVUFBQUFBQUJZQ0FnQUlTRUFhQWdJQUJBZ0FBQUJoemRIUnpBQUFBQUFBQUFBRUFBQUJZQUFBRUFBQUFBQnh6ZEhOakFBQUFBQUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUFVYzNSemVnQUFBQUFBQUFBR0FBQUFXQUFBQVhCemRHTnZBQUFBQUFBQUFGZ0FBQU9CQUFBRGh3QUFBNW9BQUFPdEFBQURzd0FBQThvQUFBUGZBQUFENVFBQUEvZ0FBQVFMQUFBRUVRQUFCQ2dBQUFROUFBQUVVQUFBQkZZQUFBUnBBQUFFZ0FBQUJJWUFBQVNiQUFBRXJnQUFCTFFBQUFUSEFBQUUzZ0FBQlBNQUFBVDVBQUFGREFBQUJSOEFBQVVsQUFBRlBBQUFCVkVBQUFWWEFBQUZhZ0FBQlgwQUFBV0RBQUFGbWdBQUJhOEFBQVhDQUFBRnlBQUFCZHNBQUFYeUFBQUYrQUFBQmcwQUFBWWdBQUFHSmdBQUJqa0FBQVpRQUFBR1pRQUFCbXNBQUFaK0FBQUdrUUFBQnBjQUFBYXVBQUFHd3dBQUJza0FBQWJjQUFBRzd3QUFCd1lBQUFjTUFBQUhJUUFBQnpRQUFBYzZBQUFIVFFBQUIyUUFBQWRxQUFBSGZ3QUFCNUlBQUFlWUFBQUhxd0FBQjhJQUFBZlhBQUFIM1FBQUIvQUFBQWdEQUFBSUNRQUFDQ0FBQUFnMUFBQUlPd0FBQ0U0QUFBaGhBQUFJZUFBQUNINEFBQWlSQUFBSXBBQUFDS29BQUFpd0FBQUl0Z0FBQ0x3QUFBakNBQUFBRm5Wa2RHRUFBQUFPYm1GdFpWTjBaWEpsYndBQUFIQjFaSFJoQUFBQWFHMWxkR0VBQUFBQUFBQUFJV2hrYkhJQUFBQUFBQUFBQUcxa2FYSmhjSEJzQUFBQUFBQUFBQUFBQUFBQU8ybHNjM1FBQUFBenFYUnZid0FBQUN0a1lYUmhBQUFBQVFBQUFBQklZVzVrUW5KaGEyVWdNQzR4TUM0eUlESXdNVFV3TmpFeE1EQT0nOwogICAgICB9KQogICAgICAgICBdKTsKfSk7Cn0pOwp2YXIgTm9TbGVlcCQxID0gdW53cmFwRXhwb3J0cyQkMShOb1NsZWVwKTsKdmFyIG5leHREaXNwbGF5SWQgPSAxMDAwOwp2YXIgZGVmYXVsdExlZnRCb3VuZHMgPSBbMCwgMCwgMC41LCAxXTsKdmFyIGRlZmF1bHRSaWdodEJvdW5kcyA9IFswLjUsIDAsIDAuNSwgMV07CnZhciByYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOwp2YXIgY2FmID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lOwpmdW5jdGlvbiBWUkZyYW1lRGF0YSgpIHsKICB0aGlzLmxlZnRQcm9qZWN0aW9uTWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgdGhpcy5sZWZ0Vmlld01hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpOwogIHRoaXMucmlnaHRQcm9qZWN0aW9uTWF0cml4ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7CiAgdGhpcy5yaWdodFZpZXdNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsKICB0aGlzLnBvc2UgPSBudWxsOwp9CmZ1bmN0aW9uIFZSRGlzcGxheUNhcGFiaWxpdGllcyhjb25maWcpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7CiAgICBoYXNQb3NpdGlvbjogewogICAgICB3cml0YWJsZTogZmFsc2UsIGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBjb25maWcuaGFzUG9zaXRpb24KICAgIH0sCiAgICBoYXNFeHRlcm5hbERpc3BsYXk6IHsKICAgICAgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogY29uZmlnLmhhc0V4dGVybmFsRGlzcGxheQogICAgfSwKICAgIGNhblByZXNlbnQ6IHsKICAgICAgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogY29uZmlnLmNhblByZXNlbnQKICAgIH0sCiAgICBtYXhMYXllcnM6IHsKICAgICAgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogY29uZmlnLm1heExheWVycwogICAgfSwKICAgIGhhc09yaWVudGF0aW9uOiB7CiAgICAgIGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIGRlcHJlY2F0ZVdhcm5pbmcoJ1ZSRGlzcGxheUNhcGFiaWxpdGllcy5wcm90b3R5cGUuaGFzT3JpZW50YXRpb24nLCAnVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRGcmFtZURhdGEnKTsKICAgICAgICByZXR1cm4gY29uZmlnLmhhc09yaWVudGF0aW9uOwogICAgICB9CiAgICB9CiAgfSk7Cn0KZnVuY3Rpb24gVlJEaXNwbGF5KGNvbmZpZykgewogIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTsKICB2YXIgVVNFX1dBS0VMT0NLID0gJ3dha2Vsb2NrJyBpbiBjb25maWcgPyBjb25maWcud2FrZWxvY2sgOiB0cnVlOwogIHRoaXMuaXNQb2x5ZmlsbGVkID0gdHJ1ZTsKICB0aGlzLmRpc3BsYXlJZCA9IG5leHREaXNwbGF5SWQrKzsKICB0aGlzLmRpc3BsYXlOYW1lID0gJyc7CiAgdGhpcy5kZXB0aE5lYXIgPSAwLjAxOwogIHRoaXMuZGVwdGhGYXIgPSAxMDAwMC4wOwogIHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpc0Nvbm5lY3RlZCcsIHsKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLmlzQ29ubmVjdGVkJywgJ1ZSRGlzcGxheUNhcGFiaWxpdGllcy5wcm90b3R5cGUuaGFzRXh0ZXJuYWxEaXNwbGF5Jyk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9KTsKICB0aGlzLmNhcGFiaWxpdGllcyA9IG5ldyBWUkRpc3BsYXlDYXBhYmlsaXRpZXMoewogICAgaGFzUG9zaXRpb246IGZhbHNlLAogICAgaGFzT3JpZW50YXRpb246IGZhbHNlLAogICAgaGFzRXh0ZXJuYWxEaXNwbGF5OiBmYWxzZSwKICAgIGNhblByZXNlbnQ6IGZhbHNlLAogICAgbWF4TGF5ZXJzOiAxCiAgfSk7CiAgdGhpcy5zdGFnZVBhcmFtZXRlcnMgPSBudWxsOwogIHRoaXMud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7CiAgdGhpcy5sYXllcl8gPSBudWxsOwogIHRoaXMub3JpZ2luYWxQYXJlbnRfID0gbnVsbDsKICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IG51bGw7CiAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8gPSBudWxsOwogIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsOwogIHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XyA9IG51bGw7CiAgdGhpcy5mdWxsc2NyZWVuQ2hhbmdlSGFuZGxlcl8gPSBudWxsOwogIHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl8gPSBudWxsOwogIGlmIChVU0VfV0FLRUxPQ0sgJiYgaXNNb2JpbGUoKSkgewogICAgdGhpcy53YWtlbG9ja18gPSBuZXcgTm9TbGVlcCQxKCk7CiAgfQp9ClZSRGlzcGxheS5wcm90b3R5cGUuZ2V0RnJhbWVEYXRhID0gZnVuY3Rpb24gKGZyYW1lRGF0YSkgewogIHJldHVybiBmcmFtZURhdGFGcm9tUG9zZShmcmFtZURhdGEsIHRoaXMuX2dldFBvc2UoKSwgdGhpcyk7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUuZ2V0UG9zZSA9IGZ1bmN0aW9uICgpIHsKICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLmdldFBvc2UnLCAnVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRGcmFtZURhdGEnKTsKICByZXR1cm4gdGhpcy5fZ2V0UG9zZSgpOwp9OwpWUkRpc3BsYXkucHJvdG90eXBlLnJlc2V0UG9zZSA9IGZ1bmN0aW9uICgpIHsKICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLnJlc2V0UG9zZScpOwogIHJldHVybiB0aGlzLl9yZXNldFBvc2UoKTsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRJbW1lZGlhdGVQb3NlID0gZnVuY3Rpb24gKCkgewogIGRlcHJlY2F0ZVdhcm5pbmcoJ1ZSRGlzcGxheS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlUG9zZScsICdWUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YScpOwogIHJldHVybiB0aGlzLl9nZXRQb3NlKCk7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgcmV0dXJuIHJhZihjYWxsYmFjayk7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHsKICByZXR1cm4gY2FmKGlkKTsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS53cmFwRm9yRnVsbHNjcmVlbiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgaWYgKGlzSU9TKCkpIHsKICAgIHJldHVybiBlbGVtZW50OwogIH0KICBpZiAoIXRoaXMuZnVsbHNjcmVlbldyYXBwZXJfKSB7CiAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBbJ2hlaWdodDogJyArIE1hdGgubWluKHNjcmVlbi5oZWlnaHQsIHNjcmVlbi53aWR0aCkgKyAncHggIWltcG9ydGFudCcsICd0b3A6IDAgIWltcG9ydGFudCcsICdsZWZ0OiAwICFpbXBvcnRhbnQnLCAncmlnaHQ6IDAgIWltcG9ydGFudCcsICdib3JkZXI6IDAnLCAnbWFyZ2luOiAwJywgJ3BhZGRpbmc6IDAnLCAnei1pbmRleDogOTk5OTk5ICFpbXBvcnRhbnQnLCAncG9zaXRpb246IGZpeGVkJ107CiAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgY3NzUHJvcGVydGllcy5qb2luKCc7ICcpICsgJzsnKTsKICAgIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLmNsYXNzTGlzdC5hZGQoJ3dlYnZyLXBvbHlmaWxsLWZ1bGxzY3JlZW4td3JhcHBlcicpOwogIH0KICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPT0gZWxlbWVudCkgewogICAgcmV0dXJuIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfOwogIH0KICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8pIHsKICAgIGlmICh0aGlzLm9yaWdpbmFsUGFyZW50XykgewogICAgICB0aGlzLm9yaWdpbmFsUGFyZW50Xy5hcHBlbmRDaGlsZCh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfKTsKICAgIH0KICB9CiAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPSBlbGVtZW50OwogIHRoaXMub3JpZ2luYWxQYXJlbnRfID0gZWxlbWVudC5wYXJlbnRFbGVtZW50OwogIGlmICghdGhpcy5vcmlnaW5hbFBhcmVudF8pIHsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgfQogIGlmICghdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8ucGFyZW50RWxlbWVudCkgewogICAgdmFyIHBhcmVudCA9IHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfLnBhcmVudEVsZW1lbnQ7CiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7CiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8pOwogIH0KICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5pbnNlcnRCZWZvcmUodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8sIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLmZpcnN0Q2hpbGQpOwogIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7CiAgdmFyIHNlbGYgPSB0aGlzOwogIGZ1bmN0aW9uIGFwcGx5RnVsbHNjcmVlbkVsZW1lbnRTdHlsZSgpIHsKICAgIGlmICghc2VsZi5mdWxsc2NyZWVuRWxlbWVudF8pIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBbJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsICd0b3A6IDAnLCAnbGVmdDogMCcsICd3aWR0aDogJyArIE1hdGgubWF4KHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodCkgKyAncHgnLCAnaGVpZ2h0OiAnICsgTWF0aC5taW4oc2NyZWVuLmhlaWdodCwgc2NyZWVuLndpZHRoKSArICdweCcsICdib3JkZXI6IDAnLCAnbWFyZ2luOiAwJywgJ3BhZGRpbmc6IDAnXTsKICAgIHNlbGYuZnVsbHNjcmVlbkVsZW1lbnRfLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBjc3NQcm9wZXJ0aWVzLmpvaW4oJzsgJykgKyAnOycpOwogIH0KICBhcHBseUZ1bGxzY3JlZW5FbGVtZW50U3R5bGUoKTsKICByZXR1cm4gdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl87Cn07ClZSRGlzcGxheS5wcm90b3R5cGUucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKCF0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XykgewogICAgcmV0dXJuOwogIH0KICB2YXIgZWxlbWVudCA9IHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfOwogIGlmICh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfKSB7CiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfKTsKICB9IGVsc2UgewogICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7CiAgfQogIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfID0gbnVsbDsKICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfID0gbnVsbDsKICB2YXIgcGFyZW50ID0gdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8ucGFyZW50RWxlbWVudDsKICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5yZW1vdmVDaGlsZChlbGVtZW50KTsKICBpZiAodGhpcy5vcmlnaW5hbFBhcmVudF8gPT09IHBhcmVudCkgewogICAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7CiAgfQogIGVsc2UgaWYgKHRoaXMub3JpZ2luYWxQYXJlbnRfKSB7CiAgICAgIHRoaXMub3JpZ2luYWxQYXJlbnRfLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgfQogIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7CiAgcmV0dXJuIGVsZW1lbnQ7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUucmVxdWVzdFByZXNlbnQgPSBmdW5jdGlvbiAobGF5ZXJzKSB7CiAgdmFyIHdhc1ByZXNlbnRpbmcgPSB0aGlzLmlzUHJlc2VudGluZzsKICB2YXIgc2VsZiA9IHRoaXM7CiAgaWYgKCEobGF5ZXJzIGluc3RhbmNlb2YgQXJyYXkpKSB7CiAgICBkZXByZWNhdGVXYXJuaW5nKCdWUkRpc3BsYXkucHJvdG90eXBlLnJlcXVlc3RQcmVzZW50IHdpdGggbm9uLWFycmF5IGFyZ3VtZW50JywgJ2FuIGFycmF5IG9mIFZSTGF5ZXJzIGFzIHRoZSBmaXJzdCBhcmd1bWVudCcpOwogICAgbGF5ZXJzID0gW2xheWVyc107CiAgfQogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBpZiAoIXNlbGYuY2FwYWJpbGl0aWVzLmNhblByZXNlbnQpIHsKICAgICAgcmVqZWN0KG5ldyBFcnJvcignVlJEaXNwbGF5IGlzIG5vdCBjYXBhYmxlIG9mIHByZXNlbnRpbmcuJykpOwogICAgICByZXR1cm47CiAgICB9CiAgICBpZiAobGF5ZXJzLmxlbmd0aCA9PSAwIHx8IGxheWVycy5sZW5ndGggPiBzZWxmLmNhcGFiaWxpdGllcy5tYXhMYXllcnMpIHsKICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2YgbGF5ZXJzLicpKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGluY29taW5nTGF5ZXIgPSBsYXllcnNbMF07CiAgICBpZiAoIWluY29taW5nTGF5ZXIuc291cmNlKSB7CiAgICAgIHJlc29sdmUoKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGxlZnRCb3VuZHMgPSBpbmNvbWluZ0xheWVyLmxlZnRCb3VuZHMgfHwgZGVmYXVsdExlZnRCb3VuZHM7CiAgICB2YXIgcmlnaHRCb3VuZHMgPSBpbmNvbWluZ0xheWVyLnJpZ2h0Qm91bmRzIHx8IGRlZmF1bHRSaWdodEJvdW5kczsKICAgIGlmICh3YXNQcmVzZW50aW5nKSB7CiAgICAgIHZhciBsYXllciA9IHNlbGYubGF5ZXJfOwogICAgICBpZiAobGF5ZXIuc291cmNlICE9PSBpbmNvbWluZ0xheWVyLnNvdXJjZSkgewogICAgICAgIGxheWVyLnNvdXJjZSA9IGluY29taW5nTGF5ZXIuc291cmNlOwogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgbGF5ZXIubGVmdEJvdW5kc1tpXSA9IGxlZnRCb3VuZHNbaV07CiAgICAgICAgbGF5ZXIucmlnaHRCb3VuZHNbaV0gPSByaWdodEJvdW5kc1tpXTsKICAgICAgfQogICAgICBzZWxmLndyYXBGb3JGdWxsc2NyZWVuKHNlbGYubGF5ZXJfLnNvdXJjZSk7CiAgICAgIHNlbGYudXBkYXRlUHJlc2VudF8oKTsKICAgICAgcmVzb2x2ZSgpOwogICAgICByZXR1cm47CiAgICB9CiAgICBzZWxmLmxheWVyXyA9IHsKICAgICAgcHJlZGlzdG9ydGVkOiBpbmNvbWluZ0xheWVyLnByZWRpc3RvcnRlZCwKICAgICAgc291cmNlOiBpbmNvbWluZ0xheWVyLnNvdXJjZSwKICAgICAgbGVmdEJvdW5kczogbGVmdEJvdW5kcy5zbGljZSgwKSwKICAgICAgcmlnaHRCb3VuZHM6IHJpZ2h0Qm91bmRzLnNsaWNlKDApCiAgICB9OwogICAgc2VsZi53YWl0aW5nRm9yUHJlc2VudF8gPSBmYWxzZTsKICAgIGlmIChzZWxmLmxheWVyXyAmJiBzZWxmLmxheWVyXy5zb3VyY2UpIHsKICAgICAgdmFyIGZ1bGxzY3JlZW5FbGVtZW50ID0gc2VsZi53cmFwRm9yRnVsbHNjcmVlbihzZWxmLmxheWVyXy5zb3VyY2UpOwogICAgICB2YXIgb25GdWxsc2NyZWVuQ2hhbmdlID0gZnVuY3Rpb24gb25GdWxsc2NyZWVuQ2hhbmdlKCkgewogICAgICAgIHZhciBhY3R1YWxGdWxsc2NyZWVuRWxlbWVudCA9IGdldEZ1bGxzY3JlZW5FbGVtZW50KCk7CiAgICAgICAgc2VsZi5pc1ByZXNlbnRpbmcgPSBmdWxsc2NyZWVuRWxlbWVudCA9PT0gYWN0dWFsRnVsbHNjcmVlbkVsZW1lbnQ7CiAgICAgICAgaWYgKHNlbGYuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICBpZiAoc2NyZWVuLm9yaWVudGF0aW9uICYmIHNjcmVlbi5vcmllbnRhdGlvbi5sb2NrKSB7CiAgICAgICAgICAgIHNjcmVlbi5vcmllbnRhdGlvbi5sb2NrKCdsYW5kc2NhcGUtcHJpbWFyeScpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3NjcmVlbi5vcmllbnRhdGlvbi5sb2NrKCkgZmFpbGVkIGR1ZSB0bycsIGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7CiAgICAgICAgICBzZWxmLmJlZ2luUHJlc2VudF8oKTsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24udW5sb2NrKSB7CiAgICAgICAgICAgIHNjcmVlbi5vcmllbnRhdGlvbi51bmxvY2soKTsKICAgICAgICAgIH0KICAgICAgICAgIHNlbGYucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIoKTsKICAgICAgICAgIHNlbGYuZGlzYWJsZVdha2VMb2NrKCk7CiAgICAgICAgICBzZWxmLmVuZFByZXNlbnRfKCk7CiAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7CiAgICAgICAgfQogICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7CiAgICAgIH07CiAgICAgIHZhciBvbkZ1bGxzY3JlZW5FcnJvciA9IGZ1bmN0aW9uIG9uRnVsbHNjcmVlbkVycm9yKCkgewogICAgICAgIGlmICghc2VsZi53YWl0aW5nRm9yUHJlc2VudF8pIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlcigpOwogICAgICAgIHNlbGYucmVtb3ZlRnVsbHNjcmVlbkxpc3RlbmVyc18oKTsKICAgICAgICBzZWxmLmRpc2FibGVXYWtlTG9jaygpOwogICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7CiAgICAgICAgc2VsZi5pc1ByZXNlbnRpbmcgPSBmYWxzZTsKICAgICAgICByZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gcHJlc2VudC4nKSk7CiAgICAgIH07CiAgICAgIHNlbGYuYWRkRnVsbHNjcmVlbkxpc3RlbmVyc18oZnVsbHNjcmVlbkVsZW1lbnQsIG9uRnVsbHNjcmVlbkNoYW5nZSwgb25GdWxsc2NyZWVuRXJyb3IpOwogICAgICBpZiAocmVxdWVzdEZ1bGxzY3JlZW4oZnVsbHNjcmVlbkVsZW1lbnQpKSB7CiAgICAgICAgc2VsZi5lbmFibGVXYWtlTG9jaygpOwogICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmIChpc0lPUygpIHx8IGlzV2ViVmlld0FuZHJvaWQoKSkgewogICAgICAgIHNlbGYuZW5hYmxlV2FrZUxvY2soKTsKICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IHRydWU7CiAgICAgICAgc2VsZi5iZWdpblByZXNlbnRfKCk7CiAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTsKICAgICAgICByZXNvbHZlKCk7CiAgICAgIH0KICAgIH0KICAgIGlmICghc2VsZi53YWl0aW5nRm9yUHJlc2VudF8gJiYgIWlzSU9TKCkpIHsKICAgICAgZXhpdEZ1bGxzY3JlZW4oKTsKICAgICAgcmVqZWN0KG5ldyBFcnJvcignVW5hYmxlIHRvIHByZXNlbnQuJykpOwogICAgfQogIH0pOwp9OwpWUkRpc3BsYXkucHJvdG90eXBlLmV4aXRQcmVzZW50ID0gZnVuY3Rpb24gKCkgewogIHZhciB3YXNQcmVzZW50aW5nID0gdGhpcy5pc1ByZXNlbnRpbmc7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7CiAgdGhpcy5sYXllcl8gPSBudWxsOwogIHRoaXMuZGlzYWJsZVdha2VMb2NrKCk7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGlmICh3YXNQcmVzZW50aW5nKSB7CiAgICAgIGlmICghZXhpdEZ1bGxzY3JlZW4oKSAmJiBpc0lPUygpKSB7CiAgICAgICAgc2VsZi5lbmRQcmVzZW50XygpOwogICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7CiAgICAgIH0KICAgICAgaWYgKGlzV2ViVmlld0FuZHJvaWQoKSkgewogICAgICAgIHNlbGYucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIoKTsKICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7CiAgICAgICAgc2VsZi5lbmRQcmVzZW50XygpOwogICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7CiAgICAgIH0KICAgICAgcmVzb2x2ZSgpOwogICAgfSBlbHNlIHsKICAgICAgcmVqZWN0KG5ldyBFcnJvcignV2FzIG5vdCBwcmVzZW50aW5nIHRvIFZSRGlzcGxheS4nKSk7CiAgICB9CiAgfSk7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUuZ2V0TGF5ZXJzID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLmxheWVyXykgewogICAgcmV0dXJuIFt0aGlzLmxheWVyX107CiAgfQogIHJldHVybiBbXTsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8gPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgeyBkZXRhaWw6IHsgZGlzcGxheTogdGhpcyB9IH0pOwogIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5maXJlVlJEaXNwbGF5Q29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd2cmRpc3BsYXljb25uZWN0JywgeyBkZXRhaWw6IHsgZGlzcGxheTogdGhpcyB9IH0pOwogIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5hZGRGdWxsc2NyZWVuTGlzdGVuZXJzXyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjaGFuZ2VIYW5kbGVyLCBlcnJvckhhbmRsZXIpIHsKICB0aGlzLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7CiAgdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfID0gZWxlbWVudDsKICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXyA9IGNoYW5nZUhhbmRsZXI7CiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IGVycm9ySGFuZGxlcjsKICBpZiAoY2hhbmdlSGFuZGxlcikgewogICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbmFibGVkKSB7CiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQpIHsKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpOwogICAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pGdWxsU2NyZWVuRW5hYmxlZCkgewogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpOwogICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbmFibGVkKSB7CiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbXNmdWxsc2NyZWVuY2hhbmdlJywgY2hhbmdlSGFuZGxlciwgZmFsc2UpOwogICAgfQogIH0KICBpZiAoZXJyb3JIYW5kbGVyKSB7CiAgICBpZiAoZG9jdW1lbnQuZnVsbHNjcmVlbkVuYWJsZWQpIHsKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQpIHsKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQpIHsKICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7CiAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVuYWJsZWQpIHsKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpOwogICAgfQogIH0KfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXyA9IGZ1bmN0aW9uICgpIHsKICBpZiAoIXRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XykgcmV0dXJuOwogIHZhciBlbGVtZW50ID0gdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfOwogIGlmICh0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXykgewogICAgdmFyIGNoYW5nZUhhbmRsZXIgPSB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXzsKICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7CiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICB9CiAgaWYgKHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl8pIHsKICAgIHZhciBlcnJvckhhbmRsZXIgPSB0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfOwogICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbXNmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTsKICB9CiAgdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfID0gbnVsbDsKICB0aGlzLmZ1bGxzY3JlZW5DaGFuZ2VIYW5kbGVyXyA9IG51bGw7CiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IG51bGw7Cn07ClZSRGlzcGxheS5wcm90b3R5cGUuZW5hYmxlV2FrZUxvY2sgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMud2FrZWxvY2tfKSB7CiAgICB0aGlzLndha2Vsb2NrXy5lbmFibGUoKTsKICB9Cn07ClZSRGlzcGxheS5wcm90b3R5cGUuZGlzYWJsZVdha2VMb2NrID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLndha2Vsb2NrXykgewogICAgdGhpcy53YWtlbG9ja18uZGlzYWJsZSgpOwogIH0KfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5iZWdpblByZXNlbnRfID0gZnVuY3Rpb24gKCkgewp9OwpWUkRpc3BsYXkucHJvdG90eXBlLmVuZFByZXNlbnRfID0gZnVuY3Rpb24gKCkgewp9OwpWUkRpc3BsYXkucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKHBvc2UpIHsKfTsKVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRFeWVQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKHdoaWNoRXllKSB7CiAgcmV0dXJuIG51bGw7Cn07CnZhciBjb25maWcgPSB7CiAgQURESVRJT05BTF9WSUVXRVJTOiBbXSwKICBERUZBVUxUX1ZJRVdFUjogJycsCiAgTU9CSUxFX1dBS0VfTE9DSzogdHJ1ZSwKICBERUJVRzogZmFsc2UsCiAgRFBEQl9VUkw6ICdodHRwczovL2RwZGIud2VidnIucm9ja3MvZHBkYi5qc29uJywKICBLX0ZJTFRFUjogMC45OCwKICBQUkVESUNUSU9OX1RJTUVfUzogMC4wNDAsCiAgQ0FSREJPQVJEX1VJX0RJU0FCTEVEOiBmYWxzZSwKICBST1RBVEVfSU5TVFJVQ1RJT05TX0RJU0FCTEVEOiBmYWxzZSwKICBZQVdfT05MWTogZmFsc2UsCiAgQlVGRkVSX1NDQUxFOiAwLjUsCiAgRElSVFlfU1VCTUlUX0ZSQU1FX0JJTkRJTkdTOiBmYWxzZQp9Owp2YXIgRXllID0gewogIExFRlQ6ICdsZWZ0JywKICBSSUdIVDogJ3JpZ2h0Jwp9OwpmdW5jdGlvbiBDYXJkYm9hcmRWUkRpc3BsYXkoY29uZmlnJCQxKSB7CiAgdmFyIGRlZmF1bHRzID0gZXh0ZW5kKHt9LCBjb25maWcpOwogIGNvbmZpZyQkMSA9IGV4dGVuZChkZWZhdWx0cywgY29uZmlnJCQxIHx8IHt9KTsKICBWUkRpc3BsYXkuY2FsbCh0aGlzLCB7CiAgICB3YWtlbG9jazogY29uZmlnJCQxLk1PQklMRV9XQUtFX0xPQ0sKICB9KTsKICB0aGlzLmNvbmZpZyA9IGNvbmZpZyQkMTsKICB0aGlzLmRpc3BsYXlOYW1lID0gJ0NhcmRib2FyZCBWUkRpc3BsYXknOwogIHRoaXMuY2FwYWJpbGl0aWVzID0gbmV3IFZSRGlzcGxheUNhcGFiaWxpdGllcyh7CiAgICBoYXNQb3NpdGlvbjogZmFsc2UsCiAgICBoYXNPcmllbnRhdGlvbjogdHJ1ZSwKICAgIGhhc0V4dGVybmFsRGlzcGxheTogZmFsc2UsCiAgICBjYW5QcmVzZW50OiB0cnVlLAogICAgbWF4TGF5ZXJzOiAxCiAgfSk7CiAgdGhpcy5zdGFnZVBhcmFtZXRlcnMgPSBudWxsOwogIHRoaXMuYnVmZmVyU2NhbGVfID0gdGhpcy5jb25maWcuQlVGRkVSX1NDQUxFOwogIHRoaXMucG9zZVNlbnNvcl8gPSBuZXcgUG9zZVNlbnNvcih0aGlzLmNvbmZpZyk7CiAgdGhpcy5kaXN0b3J0ZXJfID0gbnVsbDsKICB0aGlzLmNhcmRib2FyZFVJXyA9IG51bGw7CiAgdGhpcy5kcGRiXyA9IG5ldyBEcGRiKHRoaXMuY29uZmlnLkRQREJfVVJMLCB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZF8uYmluZCh0aGlzKSk7CiAgdGhpcy5kZXZpY2VJbmZvXyA9IG5ldyBEZXZpY2VJbmZvKHRoaXMuZHBkYl8uZ2V0RGV2aWNlUGFyYW1zKCksIGNvbmZpZyQkMS5BRERJVElPTkFMX1ZJRVdFUlMpOwogIHRoaXMudmlld2VyU2VsZWN0b3JfID0gbmV3IFZpZXdlclNlbGVjdG9yKGNvbmZpZyQkMS5ERUZBVUxUX1ZJRVdFUik7CiAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8ub25DaGFuZ2UodGhpcy5vblZpZXdlckNoYW5nZWRfLmJpbmQodGhpcykpOwogIHRoaXMuZGV2aWNlSW5mb18uc2V0Vmlld2VyKHRoaXMudmlld2VyU2VsZWN0b3JfLmdldEN1cnJlbnRWaWV3ZXIoKSk7CiAgaWYgKCF0aGlzLmNvbmZpZy5ST1RBVEVfSU5TVFJVQ1RJT05TX0RJU0FCTEVEKSB7CiAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18gPSBuZXcgUm90YXRlSW5zdHJ1Y3Rpb25zKCk7CiAgfQogIGlmIChpc0lPUygpKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZV8uYmluZCh0aGlzKSk7CiAgfQp9CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFZSRGlzcGxheS5wcm90b3R5cGUpOwpDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLl9nZXRQb3NlID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB7CiAgICBwb3NpdGlvbjogbnVsbCwKICAgIG9yaWVudGF0aW9uOiB0aGlzLnBvc2VTZW5zb3JfLmdldE9yaWVudGF0aW9uKCksCiAgICBsaW5lYXJWZWxvY2l0eTogbnVsbCwKICAgIGxpbmVhckFjY2VsZXJhdGlvbjogbnVsbCwKICAgIGFuZ3VsYXJWZWxvY2l0eTogbnVsbCwKICAgIGFuZ3VsYXJBY2NlbGVyYXRpb246IG51bGwKICB9Owp9OwpDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLl9yZXNldFBvc2UgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMucG9zZVNlbnNvcl8ucmVzZXRQb3NlKSB7CiAgICB0aGlzLnBvc2VTZW5zb3JfLnJlc2V0UG9zZSgpOwogIH0KfTsKQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5fZ2V0RmllbGRPZlZpZXcgPSBmdW5jdGlvbiAod2hpY2hFeWUpIHsKICB2YXIgZmllbGRPZlZpZXc7CiAgaWYgKHdoaWNoRXllID09IEV5ZS5MRUZUKSB7CiAgICBmaWVsZE9mVmlldyA9IHRoaXMuZGV2aWNlSW5mb18uZ2V0RmllbGRPZlZpZXdMZWZ0RXllKCk7CiAgfSBlbHNlIGlmICh3aGljaEV5ZSA9PSBFeWUuUklHSFQpIHsKICAgIGZpZWxkT2ZWaWV3ID0gdGhpcy5kZXZpY2VJbmZvXy5nZXRGaWVsZE9mVmlld1JpZ2h0RXllKCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgZXllIHByb3ZpZGVkOiAlcycsIHdoaWNoRXllKTsKICAgIHJldHVybiBudWxsOwogIH0KICByZXR1cm4gZmllbGRPZlZpZXc7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuX2dldEV5ZU9mZnNldCA9IGZ1bmN0aW9uICh3aGljaEV5ZSkgewogIHZhciBvZmZzZXQ7CiAgaWYgKHdoaWNoRXllID09IEV5ZS5MRUZUKSB7CiAgICBvZmZzZXQgPSBbLXRoaXMuZGV2aWNlSW5mb18udmlld2VyLmludGVyTGVuc0Rpc3RhbmNlICogMC41LCAwLjAsIDAuMF07CiAgfSBlbHNlIGlmICh3aGljaEV5ZSA9PSBFeWUuUklHSFQpIHsKICAgIG9mZnNldCA9IFt0aGlzLmRldmljZUluZm9fLnZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAqIDAuNSwgMC4wLCAwLjBdOwogIH0gZWxzZSB7CiAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGV5ZSBwcm92aWRlZDogJXMnLCB3aGljaEV5ZSk7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIG9mZnNldDsKfTsKQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5nZXRFeWVQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKHdoaWNoRXllKSB7CiAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEV5ZU9mZnNldCh3aGljaEV5ZSk7CiAgdmFyIGZpZWxkT2ZWaWV3ID0gdGhpcy5fZ2V0RmllbGRPZlZpZXcod2hpY2hFeWUpOwogIHZhciBleWVQYXJhbXMgPSB7CiAgICBvZmZzZXQ6IG9mZnNldCwKICAgIHJlbmRlcldpZHRoOiB0aGlzLmRldmljZUluZm9fLmRldmljZS53aWR0aCAqIDAuNSAqIHRoaXMuYnVmZmVyU2NhbGVfLAogICAgcmVuZGVySGVpZ2h0OiB0aGlzLmRldmljZUluZm9fLmRldmljZS5oZWlnaHQgKiB0aGlzLmJ1ZmZlclNjYWxlXwogIH07CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV5ZVBhcmFtcywgJ2ZpZWxkT2ZWaWV3JywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBkZXByZWNhdGVXYXJuaW5nKCdWUkZpZWxkT2ZWaWV3JywgJ1ZSRnJhbWVEYXRhXCdzIHByb2plY3Rpb24gbWF0cmljZXMnKTsKICAgICAgcmV0dXJuIGZpZWxkT2ZWaWV3OwogICAgfQogIH0pOwogIHJldHVybiBleWVQYXJhbXM7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25EZXZpY2VQYXJhbXNVcGRhdGVkXyA9IGZ1bmN0aW9uIChuZXdQYXJhbXMpIHsKICBpZiAodGhpcy5jb25maWcuREVCVUcpIHsKICAgIGNvbnNvbGUubG9nKCdEUERCIHJlcG9ydGVkIHRoYXQgZGV2aWNlIHBhcmFtcyB3ZXJlIHVwZGF0ZWQuJyk7CiAgfQogIHRoaXMuZGV2aWNlSW5mb18udXBkYXRlRGV2aWNlUGFyYW1zKG5ld1BhcmFtcyk7CiAgaWYgKHRoaXMuZGlzdG9ydGVyXykgewogICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7CiAgfQp9OwpDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLnVwZGF0ZUJvdW5kc18gPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMubGF5ZXJfICYmIHRoaXMuZGlzdG9ydGVyXyAmJiAodGhpcy5sYXllcl8ubGVmdEJvdW5kcyB8fCB0aGlzLmxheWVyXy5yaWdodEJvdW5kcykpIHsKICAgIHRoaXMuZGlzdG9ydGVyXy5zZXRUZXh0dXJlQm91bmRzKHRoaXMubGF5ZXJfLmxlZnRCb3VuZHMsIHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKTsKICB9Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYmVnaW5QcmVzZW50XyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZ2wgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKTsKICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTsKICBpZiAoIWdsKSBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbDInKTsKICBpZiAoIWdsKSByZXR1cm47CiAgaWYgKHRoaXMubGF5ZXJfLnByZWRpc3RvcnRlZCkgewogICAgaWYgKCF0aGlzLmNvbmZpZy5DQVJEQk9BUkRfVUlfRElTQUJMRUQpIHsKICAgICAgZ2wuY2FudmFzLndpZHRoID0gZ2V0U2NyZWVuV2lkdGgoKSAqIHRoaXMuYnVmZmVyU2NhbGVfOwogICAgICBnbC5jYW52YXMuaGVpZ2h0ID0gZ2V0U2NyZWVuSGVpZ2h0KCkgKiB0aGlzLmJ1ZmZlclNjYWxlXzsKICAgICAgdGhpcy5jYXJkYm9hcmRVSV8gPSBuZXcgQ2FyZGJvYXJkVUkoZ2wpOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoIXRoaXMuY29uZmlnLkNBUkRCT0FSRF9VSV9ESVNBQkxFRCkgewogICAgICB0aGlzLmNhcmRib2FyZFVJXyA9IG5ldyBDYXJkYm9hcmRVSShnbCk7CiAgICB9CiAgICB0aGlzLmRpc3RvcnRlcl8gPSBuZXcgQ2FyZGJvYXJkRGlzdG9ydGVyKGdsLCB0aGlzLmNhcmRib2FyZFVJXywgdGhpcy5jb25maWcuQlVGRkVSX1NDQUxFLCB0aGlzLmNvbmZpZy5ESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1MpOwogICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7CiAgfQogIGlmICh0aGlzLmNhcmRib2FyZFVJXykgewogICAgdGhpcy5jYXJkYm9hcmRVSV8ubGlzdGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgIHRoaXMudmlld2VyU2VsZWN0b3JfLnNob3codGhpcy5sYXllcl8uc291cmNlLnBhcmVudEVsZW1lbnQpOwogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHRoaXMuZXhpdFByZXNlbnQoKTsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgfS5iaW5kKHRoaXMpKTsKICB9CiAgaWYgKHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXykgewogICAgaWYgKGlzTGFuZHNjYXBlTW9kZSgpICYmIGlzTW9iaWxlKCkpIHsKICAgICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfLnNob3dUZW1wb3JhcmlseSgzMDAwLCB0aGlzLmxheWVyXy5zb3VyY2UucGFyZW50RWxlbWVudCk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7CiAgICB9CiAgfQogIHRoaXMub3JpZW50YXRpb25IYW5kbGVyID0gdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlXy5iaW5kKHRoaXMpOwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMub3JpZW50YXRpb25IYW5kbGVyKTsKICB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyID0gdGhpcy51cGRhdGVCb3VuZHNfLmJpbmQodGhpcyk7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLnZyZGlzcGxheXByZXNlbnRjaGFuZ2VIYW5kbGVyKTsKICB0aGlzLmZpcmVWUkRpc3BsYXlEZXZpY2VQYXJhbXNDaGFuZ2VfKCk7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZW5kUHJlc2VudF8gPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMuZGlzdG9ydGVyXykgewogICAgdGhpcy5kaXN0b3J0ZXJfLmRlc3Ryb3koKTsKICAgIHRoaXMuZGlzdG9ydGVyXyA9IG51bGw7CiAgfQogIGlmICh0aGlzLmNhcmRib2FyZFVJXykgewogICAgdGhpcy5jYXJkYm9hcmRVSV8uZGVzdHJveSgpOwogICAgdGhpcy5jYXJkYm9hcmRVSV8gPSBudWxsOwogIH0KICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7CiAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18uaGlkZSgpOwogIH0KICB0aGlzLnZpZXdlclNlbGVjdG9yXy5oaWRlKCk7CiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5vcmllbnRhdGlvbkhhbmRsZXIpOwogIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgdGhpcy52cmRpc3BsYXlwcmVzZW50Y2hhbmdlSGFuZGxlcik7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUudXBkYXRlUHJlc2VudF8gPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5lbmRQcmVzZW50XygpOwogIHRoaXMuYmVnaW5QcmVzZW50XygpOwp9OwpDYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLnN1Ym1pdEZyYW1lID0gZnVuY3Rpb24gKHBvc2UpIHsKICBpZiAodGhpcy5kaXN0b3J0ZXJfKSB7CiAgICB0aGlzLnVwZGF0ZUJvdW5kc18oKTsKICAgIHRoaXMuZGlzdG9ydGVyXy5zdWJtaXRGcmFtZSgpOwogIH0gZWxzZSBpZiAodGhpcy5jYXJkYm9hcmRVSV8gJiYgdGhpcy5sYXllcl8pIHsKICAgIHZhciBjYW52YXMgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKS5jYW52YXM7CiAgICBpZiAoY2FudmFzLndpZHRoICE9IHRoaXMubGFzdFdpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT0gdGhpcy5sYXN0SGVpZ2h0KSB7CiAgICAgIHRoaXMuY2FyZGJvYXJkVUlfLm9uUmVzaXplKCk7CiAgICB9CiAgICB0aGlzLmxhc3RXaWR0aCA9IGNhbnZhcy53aWR0aDsKICAgIHRoaXMubGFzdEhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7CiAgICB0aGlzLmNhcmRib2FyZFVJXy5yZW5kZXIoKTsKICB9Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25PcmllbnRhdGlvbkNoYW5nZV8gPSBmdW5jdGlvbiAoZSkgewogIHRoaXMudmlld2VyU2VsZWN0b3JfLmhpZGUoKTsKICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7CiAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7CiAgfQogIHRoaXMub25SZXNpemVfKCk7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25SZXNpemVfID0gZnVuY3Rpb24gKGUpIHsKICBpZiAodGhpcy5sYXllcl8pIHsKICAgIHZhciBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbCcpOwogICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBbJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsICd0b3A6IDAnLCAnbGVmdDogMCcsCiAgICAnd2lkdGg6IDEwMHZ3JywgJ2hlaWdodDogMTAwdmgnLCAnYm9yZGVyOiAwJywgJ21hcmdpbjogMCcsCiAgICAncGFkZGluZzogMHB4JywgJ2JveC1zaXppbmc6IGNvbnRlbnQtYm94J107CiAgICBnbC5jYW52YXMuc2V0QXR0cmlidXRlKCdzdHlsZScsIGNzc1Byb3BlcnRpZXMuam9pbignOyAnKSArICc7Jyk7CiAgICBzYWZhcmlDc3NTaXplV29ya2Fyb3VuZChnbC5jYW52YXMpOwogIH0KfTsKQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vblZpZXdlckNoYW5nZWRfID0gZnVuY3Rpb24gKHZpZXdlcikgewogIHRoaXMuZGV2aWNlSW5mb18uc2V0Vmlld2VyKHZpZXdlcik7CiAgaWYgKHRoaXMuZGlzdG9ydGVyXykgewogICAgdGhpcy5kaXN0b3J0ZXJfLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7CiAgfQogIHRoaXMuZmlyZVZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8oKTsKfTsKQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5maXJlVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3ZyZGlzcGxheWRldmljZXBhcmFtc2NoYW5nZScsIHsKICAgIGRldGFpbDogewogICAgICB2cmRpc3BsYXk6IHRoaXMsCiAgICAgIGRldmljZUluZm86IHRoaXMuZGV2aWNlSW5mb18KICAgIH0KICB9KTsKICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7Cn07CkNhcmRib2FyZFZSRGlzcGxheS5WUkZyYW1lRGF0YSA9IFZSRnJhbWVEYXRhOwpDYXJkYm9hcmRWUkRpc3BsYXkuVlJEaXNwbGF5ID0gVlJEaXNwbGF5OwpyZXR1cm4gQ2FyZGJvYXJkVlJEaXNwbGF5Owp9KSkpOwp9KTsKdmFyIENhcmRib2FyZFZSRGlzcGxheSA9IHVud3JhcEV4cG9ydHMoY2FyZGJvYXJkVnJEaXNwbGF5KTsKCnZhciB2ZXJzaW9uID0gIjAuMTAuMTAiOwoKdmFyIERlZmF1bHRDb25maWcgPSB7CiAgQURESVRJT05BTF9WSUVXRVJTOiBbXSwKICBERUZBVUxUX1ZJRVdFUjogJycsCiAgUFJPVklERV9NT0JJTEVfVlJESVNQTEFZOiB0cnVlLAogIE1PQklMRV9XQUtFX0xPQ0s6IHRydWUsCiAgREVCVUc6IGZhbHNlLAogIERQREJfVVJMOiAnaHR0cHM6Ly9kcGRiLndlYnZyLnJvY2tzL2RwZGIuanNvbicsCiAgS19GSUxURVI6IDAuOTgsCiAgUFJFRElDVElPTl9USU1FX1M6IDAuMDQwLAogIENBUkRCT0FSRF9VSV9ESVNBQkxFRDogZmFsc2UsCiAgUk9UQVRFX0lOU1RSVUNUSU9OU19ESVNBQkxFRDogZmFsc2UsCiAgWUFXX09OTFk6IGZhbHNlLAogIEJVRkZFUl9TQ0FMRTogMC41LAogIERJUlRZX1NVQk1JVF9GUkFNRV9CSU5ESU5HUzogZmFsc2UKfTsKCmZ1bmN0aW9uIFdlYlZSUG9seWZpbGwoY29uZmlnKSB7CiAgdGhpcy5jb25maWcgPSBleHRlbmQoZXh0ZW5kKHt9LCBEZWZhdWx0Q29uZmlnKSwgY29uZmlnKTsKICB0aGlzLnBvbHlmaWxsRGlzcGxheXMgPSBbXTsKICB0aGlzLmVuYWJsZWQgPSBmYWxzZTsKICB0aGlzLmhhc05hdGl2ZSA9ICdnZXRWUkRpc3BsYXlzJyBpbiBuYXZpZ2F0b3I7CiAgdGhpcy5uYXRpdmUgPSB7fTsKICB0aGlzLm5hdGl2ZS5nZXRWUkRpc3BsYXlzID0gbmF2aWdhdG9yLmdldFZSRGlzcGxheXM7CiAgdGhpcy5uYXRpdmUuVlJGcmFtZURhdGEgPSB3aW5kb3cuVlJGcmFtZURhdGE7CiAgdGhpcy5uYXRpdmUuVlJEaXNwbGF5ID0gd2luZG93LlZSRGlzcGxheTsKICBpZiAoIXRoaXMuaGFzTmF0aXZlIHx8IHRoaXMuY29uZmlnLlBST1ZJREVfTU9CSUxFX1ZSRElTUExBWSAmJiBpc01vYmlsZSgpKSB7CiAgICB0aGlzLmVuYWJsZSgpOwogICAgdGhpcy5nZXRWUkRpc3BsYXlzKCkudGhlbihmdW5jdGlvbiAoZGlzcGxheXMpIHsKICAgICAgaWYgKGRpc3BsYXlzICYmIGRpc3BsYXlzWzBdICYmIGRpc3BsYXlzWzBdLmZpcmVWUkRpc3BsYXlDb25uZWN0XykgewogICAgICAgIGRpc3BsYXlzWzBdLmZpcmVWUkRpc3BsYXlDb25uZWN0XygpOwogICAgICB9CiAgICB9KTsKICB9Cn0KV2ViVlJQb2x5ZmlsbC5wcm90b3R5cGUuZ2V0UG9seWZpbGxEaXNwbGF5cyA9IGZ1bmN0aW9uICgpIHsKICBpZiAodGhpcy5fcG9seWZpbGxEaXNwbGF5c1BvcHVsYXRlZCkgewogICAgcmV0dXJuIHRoaXMucG9seWZpbGxEaXNwbGF5czsKICB9CiAgaWYgKGlzTW9iaWxlKCkpIHsKICAgIHZhciB2ckRpc3BsYXkgPSBuZXcgQ2FyZGJvYXJkVlJEaXNwbGF5KHsKICAgICAgQURESVRJT05BTF9WSUVXRVJTOiB0aGlzLmNvbmZpZy5BRERJVElPTkFMX1ZJRVdFUlMsCiAgICAgIERFRkFVTFRfVklFV0VSOiB0aGlzLmNvbmZpZy5ERUZBVUxUX1ZJRVdFUiwKICAgICAgTU9CSUxFX1dBS0VfTE9DSzogdGhpcy5jb25maWcuTU9CSUxFX1dBS0VfTE9DSywKICAgICAgREVCVUc6IHRoaXMuY29uZmlnLkRFQlVHLAogICAgICBEUERCX1VSTDogdGhpcy5jb25maWcuRFBEQl9VUkwsCiAgICAgIENBUkRCT0FSRF9VSV9ESVNBQkxFRDogdGhpcy5jb25maWcuQ0FSREJPQVJEX1VJX0RJU0FCTEVELAogICAgICBLX0ZJTFRFUjogdGhpcy5jb25maWcuS19GSUxURVIsCiAgICAgIFBSRURJQ1RJT05fVElNRV9TOiB0aGlzLmNvbmZpZy5QUkVESUNUSU9OX1RJTUVfUywKICAgICAgUk9UQVRFX0lOU1RSVUNUSU9OU19ESVNBQkxFRDogdGhpcy5jb25maWcuUk9UQVRFX0lOU1RSVUNUSU9OU19ESVNBQkxFRCwKICAgICAgWUFXX09OTFk6IHRoaXMuY29uZmlnLllBV19PTkxZLAogICAgICBCVUZGRVJfU0NBTEU6IHRoaXMuY29uZmlnLkJVRkZFUl9TQ0FMRSwKICAgICAgRElSVFlfU1VCTUlUX0ZSQU1FX0JJTkRJTkdTOiB0aGlzLmNvbmZpZy5ESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1MKICAgIH0pOwogICAgdGhpcy5wb2x5ZmlsbERpc3BsYXlzLnB1c2godnJEaXNwbGF5KTsKICB9CiAgdGhpcy5fcG9seWZpbGxEaXNwbGF5c1BvcHVsYXRlZCA9IHRydWU7CiAgcmV0dXJuIHRoaXMucG9seWZpbGxEaXNwbGF5czsKfTsKV2ViVlJQb2x5ZmlsbC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkgewogIHRoaXMuZW5hYmxlZCA9IHRydWU7CiAgaWYgKHRoaXMuaGFzTmF0aXZlICYmIHRoaXMubmF0aXZlLlZSRnJhbWVEYXRhKSB7CiAgICB2YXIgTmF0aXZlVlJGcmFtZURhdGEgPSB0aGlzLm5hdGl2ZS5WUkZyYW1lRGF0YTsKICAgIHZhciBuYXRpdmVGcmFtZURhdGEgPSBuZXcgdGhpcy5uYXRpdmUuVlJGcmFtZURhdGEoKTsKICAgIHZhciBuYXRpdmVHZXRGcmFtZURhdGEgPSB0aGlzLm5hdGl2ZS5WUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YTsKICAgIHdpbmRvdy5WUkRpc3BsYXkucHJvdG90eXBlLmdldEZyYW1lRGF0YSA9IGZ1bmN0aW9uIChmcmFtZURhdGEpIHsKICAgICAgaWYgKGZyYW1lRGF0YSBpbnN0YW5jZW9mIE5hdGl2ZVZSRnJhbWVEYXRhKSB7CiAgICAgICAgbmF0aXZlR2V0RnJhbWVEYXRhLmNhbGwodGhpcywgZnJhbWVEYXRhKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgbmF0aXZlR2V0RnJhbWVEYXRhLmNhbGwodGhpcywgbmF0aXZlRnJhbWVEYXRhKTsKICAgICAgZnJhbWVEYXRhLnBvc2UgPSBuYXRpdmVGcmFtZURhdGEucG9zZTsKICAgICAgY29weUFycmF5KG5hdGl2ZUZyYW1lRGF0YS5sZWZ0UHJvamVjdGlvbk1hdHJpeCwgZnJhbWVEYXRhLmxlZnRQcm9qZWN0aW9uTWF0cml4KTsKICAgICAgY29weUFycmF5KG5hdGl2ZUZyYW1lRGF0YS5yaWdodFByb2plY3Rpb25NYXRyaXgsIGZyYW1lRGF0YS5yaWdodFByb2plY3Rpb25NYXRyaXgpOwogICAgICBjb3B5QXJyYXkobmF0aXZlRnJhbWVEYXRhLmxlZnRWaWV3TWF0cml4LCBmcmFtZURhdGEubGVmdFZpZXdNYXRyaXgpOwogICAgICBjb3B5QXJyYXkobmF0aXZlRnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCwgZnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCk7CiAgICB9OwogIH0KICBuYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cyA9IHRoaXMuZ2V0VlJEaXNwbGF5cy5iaW5kKHRoaXMpOwogIHdpbmRvdy5WUkRpc3BsYXkgPSBDYXJkYm9hcmRWUkRpc3BsYXkuVlJEaXNwbGF5OwogIHdpbmRvdy5WUkZyYW1lRGF0YSA9IENhcmRib2FyZFZSRGlzcGxheS5WUkZyYW1lRGF0YTsKfTsKV2ViVlJQb2x5ZmlsbC5wcm90b3R5cGUuZ2V0VlJEaXNwbGF5cyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwogIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZzsKICBpZiAoIXRoaXMuaGFzTmF0aXZlKSB7CiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZ2V0UG9seWZpbGxEaXNwbGF5cygpKTsKICB9CiAgcmV0dXJuIHRoaXMubmF0aXZlLmdldFZSRGlzcGxheXMuY2FsbChuYXZpZ2F0b3IpLnRoZW4oZnVuY3Rpb24gKG5hdGl2ZURpc3BsYXlzKSB7CiAgICByZXR1cm4gbmF0aXZlRGlzcGxheXMubGVuZ3RoID4gMCA/IG5hdGl2ZURpc3BsYXlzIDogX3RoaXMuZ2V0UG9seWZpbGxEaXNwbGF5cygpOwogIH0pOwp9OwpXZWJWUlBvbHlmaWxsLnZlcnNpb24gPSB2ZXJzaW9uOwpXZWJWUlBvbHlmaWxsLlZSRnJhbWVEYXRhID0gQ2FyZGJvYXJkVlJEaXNwbGF5LlZSRnJhbWVEYXRhOwpXZWJWUlBvbHlmaWxsLlZSRGlzcGxheSA9IENhcmRib2FyZFZSRGlzcGxheS5WUkRpc3BsYXk7CgoKdmFyIHdlYnZyUG9seWZpbGwgPSBPYmplY3QuZnJlZXplKHsKCWRlZmF1bHQ6IFdlYlZSUG9seWZpbGwKfSk7Cgp2YXIgcmVxdWlyZSQkMCA9ICggd2VidnJQb2x5ZmlsbCAmJiBXZWJWUlBvbHlmaWxsICkgfHwgd2VidnJQb2x5ZmlsbDsKCmlmICh0eXBlb2YgY29tbW9uanNHbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGNvbW1vbmpzR2xvYmFsLndpbmRvdykgewogIGlmICghY29tbW9uanNHbG9iYWwuZG9jdW1lbnQpIHsKICAgIGNvbW1vbmpzR2xvYmFsLmRvY3VtZW50ID0gY29tbW9uanNHbG9iYWwud2luZG93LmRvY3VtZW50OwogIH0KICBpZiAoIWNvbW1vbmpzR2xvYmFsLm5hdmlnYXRvcikgewogICAgY29tbW9uanNHbG9iYWwubmF2aWdhdG9yID0gY29tbW9uanNHbG9iYWwud2luZG93Lm5hdmlnYXRvcjsKICB9Cn0KdmFyIHNyYyA9IHJlcXVpcmUkJDA7CgpyZXR1cm4gc3JjOwoKfSkpKTsKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoKfSx7fV0sNTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgbmV3bGluZSA9IC9cbi8KdmFyIG5ld2xpbmVDaGFyID0gJ1xuJwp2YXIgd2hpdGVzcGFjZSA9IC9ccy8KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGV4dCwgb3B0KSB7CiAgICB2YXIgbGluZXMgPSBtb2R1bGUuZXhwb3J0cy5saW5lcyh0ZXh0LCBvcHQpCiAgICByZXR1cm4gbGluZXMubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcobGluZS5zdGFydCwgbGluZS5lbmQpCiAgICB9KS5qb2luKCdcbicpCn0KCm1vZHVsZS5leHBvcnRzLmxpbmVzID0gZnVuY3Rpb24gd29yZHdyYXAodGV4dCwgb3B0KSB7CiAgICBvcHQgPSBvcHR8fHt9CgogICAgLy96ZXJvIHdpZHRoIHJlc3VsdHMgaW4gbm90aGluZyB2aXNpYmxlCiAgICBpZiAob3B0LndpZHRoID09PSAwICYmIG9wdC5tb2RlICE9PSAnbm93cmFwJykgCiAgICAgICAgcmV0dXJuIFtdCgogICAgdGV4dCA9IHRleHR8fCcnCiAgICB2YXIgd2lkdGggPSB0eXBlb2Ygb3B0LndpZHRoID09PSAnbnVtYmVyJyA/IG9wdC53aWR0aCA6IE51bWJlci5NQVhfVkFMVUUKICAgIHZhciBzdGFydCA9IE1hdGgubWF4KDAsIG9wdC5zdGFydHx8MCkKICAgIHZhciBlbmQgPSB0eXBlb2Ygb3B0LmVuZCA9PT0gJ251bWJlcicgPyBvcHQuZW5kIDogdGV4dC5sZW5ndGgKICAgIHZhciBtb2RlID0gb3B0Lm1vZGUKCiAgICB2YXIgbWVhc3VyZSA9IG9wdC5tZWFzdXJlIHx8IG1vbm9zcGFjZQogICAgaWYgKG1vZGUgPT09ICdwcmUnKQogICAgICAgIHJldHVybiBwcmUobWVhc3VyZSwgdGV4dCwgc3RhcnQsIGVuZCwgd2lkdGgpCiAgICBlbHNlCiAgICAgICAgcmV0dXJuIGdyZWVkeShtZWFzdXJlLCB0ZXh0LCBzdGFydCwgZW5kLCB3aWR0aCwgbW9kZSkKfQoKZnVuY3Rpb24gaWR4T2YodGV4dCwgY2hyLCBzdGFydCwgZW5kKSB7CiAgICB2YXIgaWR4ID0gdGV4dC5pbmRleE9mKGNociwgc3RhcnQpCiAgICBpZiAoaWR4ID09PSAtMSB8fCBpZHggPiBlbmQpCiAgICAgICAgcmV0dXJuIGVuZAogICAgcmV0dXJuIGlkeAp9CgpmdW5jdGlvbiBpc1doaXRlc3BhY2UoY2hyKSB7CiAgICByZXR1cm4gd2hpdGVzcGFjZS50ZXN0KGNocikKfQoKZnVuY3Rpb24gcHJlKG1lYXN1cmUsIHRleHQsIHN0YXJ0LCBlbmQsIHdpZHRoKSB7CiAgICB2YXIgbGluZXMgPSBbXQogICAgdmFyIGxpbmVTdGFydCA9IHN0YXJ0CiAgICBmb3IgKHZhciBpPXN0YXJ0OyBpPGVuZCAmJiBpPHRleHQubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgY2hyID0gdGV4dC5jaGFyQXQoaSkKICAgICAgICB2YXIgaXNOZXdsaW5lID0gbmV3bGluZS50ZXN0KGNocikKCiAgICAgICAgLy9JZiB3ZSd2ZSByZWFjaGVkIGEgbmV3bGluZSwgdGhlbiBzdGVwIGRvd24gYSBsaW5lCiAgICAgICAgLy9PciBpZiB3ZSd2ZSByZWFjaGVkIHRoZSBFT0YKICAgICAgICBpZiAoaXNOZXdsaW5lIHx8IGk9PT1lbmQtMSkgewogICAgICAgICAgICB2YXIgbGluZUVuZCA9IGlzTmV3bGluZSA/IGkgOiBpKzEKICAgICAgICAgICAgdmFyIG1lYXN1cmVkID0gbWVhc3VyZSh0ZXh0LCBsaW5lU3RhcnQsIGxpbmVFbmQsIHdpZHRoKQogICAgICAgICAgICBsaW5lcy5wdXNoKG1lYXN1cmVkKQogICAgICAgICAgICAKICAgICAgICAgICAgbGluZVN0YXJ0ID0gaSsxCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGxpbmVzCn0KCmZ1bmN0aW9uIGdyZWVkeShtZWFzdXJlLCB0ZXh0LCBzdGFydCwgZW5kLCB3aWR0aCwgbW9kZSkgewogICAgLy9BIGdyZWVkeSB3b3JkIHdyYXBwZXIgYmFzZWQgb24gTGliR0RYIGFsZ29yaXRobQogICAgLy9odHRwczovL2dpdGh1Yi5jb20vbGliZ2R4L2xpYmdkeC9ibG9iL21hc3Rlci9nZHgvc3JjL2NvbS9iYWRsb2dpYy9nZHgvZ3JhcGhpY3MvZzJkL0JpdG1hcEZvbnRDYWNoZS5qYXZhCiAgICB2YXIgbGluZXMgPSBbXQoKICAgIHZhciB0ZXN0V2lkdGggPSB3aWR0aAogICAgLy9pZiAnbm93cmFwJyBpcyBzcGVjaWZpZWQsIHdlIG9ubHkgd3JhcCBvbiBuZXdsaW5lIGNoYXJzCiAgICBpZiAobW9kZSA9PT0gJ25vd3JhcCcpCiAgICAgICAgdGVzdFdpZHRoID0gTnVtYmVyLk1BWF9WQUxVRQoKICAgIHdoaWxlIChzdGFydCA8IGVuZCAmJiBzdGFydCA8IHRleHQubGVuZ3RoKSB7CiAgICAgICAgLy9nZXQgbmV4dCBuZXdsaW5lIHBvc2l0aW9uCiAgICAgICAgdmFyIG5ld0xpbmUgPSBpZHhPZih0ZXh0LCBuZXdsaW5lQ2hhciwgc3RhcnQsIGVuZCkKCiAgICAgICAgLy9lYXQgd2hpdGVzcGFjZSBhdCBzdGFydCBvZiBsaW5lCiAgICAgICAgd2hpbGUgKHN0YXJ0IDwgbmV3TGluZSkgewogICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZSggdGV4dC5jaGFyQXQoc3RhcnQpICkpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBzdGFydCsrCiAgICAgICAgfQoKICAgICAgICAvL2RldGVybWluZSB2aXNpYmxlICMgb2YgZ2x5cGhzIGZvciB0aGUgYXZhaWxhYmxlIHdpZHRoCiAgICAgICAgdmFyIG1lYXN1cmVkID0gbWVhc3VyZSh0ZXh0LCBzdGFydCwgbmV3TGluZSwgdGVzdFdpZHRoKQoKICAgICAgICB2YXIgbGluZUVuZCA9IHN0YXJ0ICsgKG1lYXN1cmVkLmVuZC1tZWFzdXJlZC5zdGFydCkKICAgICAgICB2YXIgbmV4dFN0YXJ0ID0gbGluZUVuZCArIG5ld2xpbmVDaGFyLmxlbmd0aAoKICAgICAgICAvL2lmIHdlIGhhZCB0byBjdXQgdGhlIGxpbmUgYmVmb3JlIHRoZSBuZXh0IG5ld2xpbmUuLi4KICAgICAgICBpZiAobGluZUVuZCA8IG5ld0xpbmUpIHsKICAgICAgICAgICAgLy9maW5kIGNoYXIgdG8gYnJlYWsgb24KICAgICAgICAgICAgd2hpbGUgKGxpbmVFbmQgPiBzdGFydCkgewogICAgICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZSh0ZXh0LmNoYXJBdChsaW5lRW5kKSkpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGxpbmVFbmQtLQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChsaW5lRW5kID09PSBzdGFydCkgewogICAgICAgICAgICAgICAgaWYgKG5leHRTdGFydCA+IHN0YXJ0ICsgbmV3bGluZUNoYXIubGVuZ3RoKSBuZXh0U3RhcnQtLQogICAgICAgICAgICAgICAgbGluZUVuZCA9IG5leHRTdGFydCAvLyBJZiBubyBjaGFyYWN0ZXJzIHRvIGJyZWFrLCBzaG93IGFsbC4KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5leHRTdGFydCA9IGxpbmVFbmQKICAgICAgICAgICAgICAgIC8vZWF0IHdoaXRlc3BhY2UgYXQgZW5kIG9mIGxpbmUKICAgICAgICAgICAgICAgIHdoaWxlIChsaW5lRW5kID4gc3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZSh0ZXh0LmNoYXJBdChsaW5lRW5kIC0gbmV3bGluZUNoYXIubGVuZ3RoKSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgbGluZUVuZC0tCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGxpbmVFbmQgPj0gc3RhcnQpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1lYXN1cmUodGV4dCwgc3RhcnQsIGxpbmVFbmQsIHRlc3RXaWR0aCkKICAgICAgICAgICAgbGluZXMucHVzaChyZXN1bHQpCiAgICAgICAgfQogICAgICAgIHN0YXJ0ID0gbmV4dFN0YXJ0CiAgICB9CiAgICByZXR1cm4gbGluZXMKfQoKLy9kZXRlcm1pbmVzIHRoZSB2aXNpYmxlIG51bWJlciBvZiBnbHlwaHMgd2l0aGluIGEgZ2l2ZW4gd2lkdGgKZnVuY3Rpb24gbW9ub3NwYWNlKHRleHQsIHN0YXJ0LCBlbmQsIHdpZHRoKSB7CiAgICB2YXIgZ2x5cGhzID0gTWF0aC5taW4od2lkdGgsIGVuZC1zdGFydCkKICAgIHJldHVybiB7CiAgICAgICAgc3RhcnQ6IHN0YXJ0LAogICAgICAgIGVuZDogc3RhcnQrZ2x5cGhzCiAgICB9Cn0KfSx7fV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CnZhciB3aW5kb3cgPSBfZGVyZXFfKCJnbG9iYWwvd2luZG93IikKdmFyIGlzRnVuY3Rpb24gPSBfZGVyZXFfKCJpcy1mdW5jdGlvbiIpCnZhciBwYXJzZUhlYWRlcnMgPSBfZGVyZXFfKCJwYXJzZS1oZWFkZXJzIikKdmFyIHh0ZW5kID0gX2RlcmVxXygieHRlbmQiKQoKbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVYSFIKLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0Cm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVYSFI7CmNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCB8fCBub29wCmNyZWF0ZVhIUi5YRG9tYWluUmVxdWVzdCA9ICJ3aXRoQ3JlZGVudGlhbHMiIGluIChuZXcgY3JlYXRlWEhSLlhNTEh0dHBSZXF1ZXN0KCkpID8gY3JlYXRlWEhSLlhNTEh0dHBSZXF1ZXN0IDogd2luZG93LlhEb21haW5SZXF1ZXN0Cgpmb3JFYWNoQXJyYXkoWyJnZXQiLCAicHV0IiwgInBvc3QiLCAicGF0Y2giLCAiaGVhZCIsICJkZWxldGUiXSwgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBjcmVhdGVYSFJbbWV0aG9kID09PSAiZGVsZXRlIiA/ICJkZWwiIDogbWV0aG9kXSA9IGZ1bmN0aW9uKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spIHsKICAgICAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKQogICAgICAgIG9wdGlvbnMubWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCkKICAgICAgICByZXR1cm4gX2NyZWF0ZVhIUihvcHRpb25zKQogICAgfQp9KQoKZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvcikgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgIGl0ZXJhdG9yKGFycmF5W2ldKQogICAgfQp9CgpmdW5jdGlvbiBpc0VtcHR5KG9iail7CiAgICBmb3IodmFyIGkgaW4gb2JqKXsKICAgICAgICBpZihvYmouaGFzT3duUHJvcGVydHkoaSkpIHJldHVybiBmYWxzZQogICAgfQogICAgcmV0dXJuIHRydWUKfQoKZnVuY3Rpb24gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICB2YXIgcGFyYW1zID0gdXJpCgogICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHsKICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnMKICAgICAgICBpZiAodHlwZW9mIHVyaSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgcGFyYW1zID0ge3VyaTp1cml9CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBwYXJhbXMgPSB4dGVuZChvcHRpb25zLCB7dXJpOiB1cml9KQogICAgfQoKICAgIHBhcmFtcy5jYWxsYmFjayA9IGNhbGxiYWNrCiAgICByZXR1cm4gcGFyYW1zCn0KCmZ1bmN0aW9uIGNyZWF0ZVhIUih1cmksIG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKQogICAgcmV0dXJuIF9jcmVhdGVYSFIob3B0aW9ucykKfQoKZnVuY3Rpb24gX2NyZWF0ZVhIUihvcHRpb25zKSB7CiAgICBpZih0eXBlb2Ygb3B0aW9ucy5jYWxsYmFjayA9PT0gInVuZGVmaW5lZCIpewogICAgICAgIHRocm93IG5ldyBFcnJvcigiY2FsbGJhY2sgYXJndW1lbnQgbWlzc2luZyIpCiAgICB9CgogICAgdmFyIGNhbGxlZCA9IGZhbHNlCiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYk9uY2UoZXJyLCByZXNwb25zZSwgYm9keSl7CiAgICAgICAgaWYoIWNhbGxlZCl7CiAgICAgICAgICAgIGNhbGxlZCA9IHRydWUKICAgICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayhlcnIsIHJlc3BvbnNlLCBib2R5KQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZWFkeXN0YXRlY2hhbmdlKCkgewogICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICAgICAgICBzZXRUaW1lb3V0KGxvYWRGdW5jLCAwKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCb2R5KCkgewogICAgICAgIC8vIENocm9tZSB3aXRoIHJlcXVlc3RUeXBlPWJsb2IgdGhyb3dzIGVycm9ycyBhcnJvdW5kIHdoZW4gZXZlbiB0ZXN0aW5nIGFjY2VzcyB0byByZXNwb25zZVRleHQKICAgICAgICB2YXIgYm9keSA9IHVuZGVmaW5lZAoKICAgICAgICBpZiAoeGhyLnJlc3BvbnNlKSB7CiAgICAgICAgICAgIGJvZHkgPSB4aHIucmVzcG9uc2UKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBib2R5ID0geGhyLnJlc3BvbnNlVGV4dCB8fCBnZXRYbWwoeGhyKQogICAgICAgIH0KCiAgICAgICAgaWYgKGlzSnNvbikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSkKICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICB9CgogICAgICAgIHJldHVybiBib2R5CiAgICB9CgogICAgZnVuY3Rpb24gZXJyb3JGdW5jKGV2dCkgewogICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0VGltZXIpCiAgICAgICAgaWYoIShldnQgaW5zdGFuY2VvZiBFcnJvcikpewogICAgICAgICAgICBldnQgPSBuZXcgRXJyb3IoIiIgKyAoZXZ0IHx8ICJVbmtub3duIFhNTEh0dHBSZXF1ZXN0IEVycm9yIikgKQogICAgICAgIH0KICAgICAgICBldnQuc3RhdHVzQ29kZSA9IDAKICAgICAgICByZXR1cm4gY2FsbGJhY2soZXZ0LCBmYWlsdXJlUmVzcG9uc2UpCiAgICB9CgogICAgLy8gd2lsbCBsb2FkIHRoZSBkYXRhICYgcHJvY2VzcyB0aGUgcmVzcG9uc2UgaW4gYSBzcGVjaWFsIHJlc3BvbnNlIG9iamVjdAogICAgZnVuY3Rpb24gbG9hZEZ1bmMoKSB7CiAgICAgICAgaWYgKGFib3J0ZWQpIHJldHVybgogICAgICAgIHZhciBzdGF0dXMKICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFRpbWVyKQogICAgICAgIGlmKG9wdGlvbnMudXNlWERSICYmIHhoci5zdGF0dXM9PT11bmRlZmluZWQpIHsKICAgICAgICAgICAgLy9JRTggQ09SUyBHRVQgc3VjY2Vzc2Z1bCByZXNwb25zZSBkb2Vzbid0IGhhdmUgYSBzdGF0dXMgZmllbGQsIGJ1dCBib2R5IGlzIGZpbmUKICAgICAgICAgICAgc3RhdHVzID0gMjAwCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RhdHVzID0gKHhoci5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiB4aHIuc3RhdHVzKQogICAgICAgIH0KICAgICAgICB2YXIgcmVzcG9uc2UgPSBmYWlsdXJlUmVzcG9uc2UKICAgICAgICB2YXIgZXJyID0gbnVsbAoKICAgICAgICBpZiAoc3RhdHVzICE9PSAwKXsKICAgICAgICAgICAgcmVzcG9uc2UgPSB7CiAgICAgICAgICAgICAgICBib2R5OiBnZXRCb2R5KCksCiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXMsCiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LAogICAgICAgICAgICAgICAgdXJsOiB1cmksCiAgICAgICAgICAgICAgICByYXdSZXF1ZXN0OiB4aHIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKXsgLy9yZW1lbWJlciB4aHIgY2FuIGluIGZhY3QgYmUgWERSIGZvciBDT1JTIGluIElFCiAgICAgICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVyciA9IG5ldyBFcnJvcigiSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3IiKQogICAgICAgIH0KICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCByZXNwb25zZSwgcmVzcG9uc2UuYm9keSkKICAgIH0KCiAgICB2YXIgeGhyID0gb3B0aW9ucy54aHIgfHwgbnVsbAoKICAgIGlmICgheGhyKSB7CiAgICAgICAgaWYgKG9wdGlvbnMuY29ycyB8fCBvcHRpb25zLnVzZVhEUikgewogICAgICAgICAgICB4aHIgPSBuZXcgY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0KCkKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgeGhyID0gbmV3IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCgpCiAgICAgICAgfQogICAgfQoKICAgIHZhciBrZXkKICAgIHZhciBhYm9ydGVkCiAgICB2YXIgdXJpID0geGhyLnVybCA9IG9wdGlvbnMudXJpIHx8IG9wdGlvbnMudXJsCiAgICB2YXIgbWV0aG9kID0geGhyLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8ICJHRVQiCiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keSB8fCBvcHRpb25zLmRhdGEKICAgIHZhciBoZWFkZXJzID0geGhyLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge30KICAgIHZhciBzeW5jID0gISFvcHRpb25zLnN5bmMKICAgIHZhciBpc0pzb24gPSBmYWxzZQogICAgdmFyIHRpbWVvdXRUaW1lcgogICAgdmFyIGZhaWx1cmVSZXNwb25zZSA9IHsKICAgICAgICBib2R5OiB1bmRlZmluZWQsCiAgICAgICAgaGVhZGVyczoge30sCiAgICAgICAgc3RhdHVzQ29kZTogMCwKICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICB1cmw6IHVyaSwKICAgICAgICByYXdSZXF1ZXN0OiB4aHIKICAgIH0KCiAgICBpZiAoImpzb24iIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICE9PSBmYWxzZSkgewogICAgICAgIGlzSnNvbiA9IHRydWUKICAgICAgICBoZWFkZXJzWyJhY2NlcHQiXSB8fCBoZWFkZXJzWyJBY2NlcHQiXSB8fCAoaGVhZGVyc1siQWNjZXB0Il0gPSAiYXBwbGljYXRpb24vanNvbiIpIC8vRG9uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgYWNjZXB0IGhlYWRlciBkZWNsYXJlZCBieSB1c2VyCiAgICAgICAgaWYgKG1ldGhvZCAhPT0gIkdFVCIgJiYgbWV0aG9kICE9PSAiSEVBRCIpIHsKICAgICAgICAgICAgaGVhZGVyc1siY29udGVudC10eXBlIl0gfHwgaGVhZGVyc1siQ29udGVudC1UeXBlIl0gfHwgKGhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdID0gImFwcGxpY2F0aW9uL2pzb24iKSAvL0Rvbid0IG92ZXJyaWRlIGV4aXN0aW5nIGFjY2VwdCBoZWFkZXIgZGVjbGFyZWQgYnkgdXNlcgogICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5qc29uID09PSB0cnVlID8gYm9keSA6IG9wdGlvbnMuanNvbikKICAgICAgICB9CiAgICB9CgogICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHJlYWR5c3RhdGVjaGFuZ2UKICAgIHhoci5vbmxvYWQgPSBsb2FkRnVuYwogICAgeGhyLm9uZXJyb3IgPSBlcnJvckZ1bmMKICAgIC8vIElFOSBtdXN0IGhhdmUgb25wcm9ncmVzcyBiZSBzZXQgdG8gYSB1bmlxdWUgZnVuY3Rpb24uCiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBJRSBtdXN0IGRpZQogICAgfQogICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpewogICAgICAgIGFib3J0ZWQgPSB0cnVlOwogICAgfQogICAgeGhyLm9udGltZW91dCA9IGVycm9yRnVuYwogICAgeGhyLm9wZW4obWV0aG9kLCB1cmksICFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkKQogICAgLy9oYXMgdG8gYmUgYWZ0ZXIgb3BlbgogICAgaWYoIXN5bmMpIHsKICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRpb25zLndpdGhDcmVkZW50aWFscwogICAgfQogICAgLy8gQ2Fubm90IHNldCB0aW1lb3V0IHdpdGggc3luYyByZXF1ZXN0CiAgICAvLyBub3Qgc2V0dGluZyB0aW1lb3V0IG9uIHRoZSB4aHIgb2JqZWN0LCBiZWNhdXNlIG9mIG9sZCB3ZWJraXRzIGV0Yy4gbm90IGhhbmRsaW5nIHRoYXQgY29ycmVjdGx5CiAgICAvLyBib3RoIG5wbSdzIHJlcXVlc3QgYW5kIGpxdWVyeSAxLnggdXNlIHRoaXMga2luZCBvZiB0aW1lb3V0LCBzbyB0aGlzIGlzIGJlaW5nIGNvbnNpc3RlbnQKICAgIGlmICghc3luYyAmJiBvcHRpb25zLnRpbWVvdXQgPiAwICkgewogICAgICAgIHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgaWYgKGFib3J0ZWQpIHJldHVybgogICAgICAgICAgICBhYm9ydGVkID0gdHJ1ZS8vSUU5IG1heSBzdGlsbCBjYWxsIHJlYWR5c3RhdGVjaGFuZ2UKICAgICAgICAgICAgeGhyLmFib3J0KCJ0aW1lb3V0IikKICAgICAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoIlhNTEh0dHBSZXF1ZXN0IHRpbWVvdXQiKQogICAgICAgICAgICBlLmNvZGUgPSAiRVRJTUVET1VUIgogICAgICAgICAgICBlcnJvckZ1bmMoZSkKICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQgKQogICAgfQoKICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikgewogICAgICAgIGZvcihrZXkgaW4gaGVhZGVycyl7CiAgICAgICAgICAgIGlmKGhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSl7CiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oZWFkZXJzICYmICFpc0VtcHR5KG9wdGlvbnMuaGVhZGVycykpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkhlYWRlcnMgY2Fubm90IGJlIHNldCBvbiBhbiBYRG9tYWluUmVxdWVzdCBvYmplY3QiKQogICAgfQoKICAgIGlmICgicmVzcG9uc2VUeXBlIiBpbiBvcHRpb25zKSB7CiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlCiAgICB9CgogICAgaWYgKCJiZWZvcmVTZW5kIiBpbiBvcHRpb25zICYmCiAgICAgICAgdHlwZW9mIG9wdGlvbnMuYmVmb3JlU2VuZCA9PT0gImZ1bmN0aW9uIgogICAgKSB7CiAgICAgICAgb3B0aW9ucy5iZWZvcmVTZW5kKHhocikKICAgIH0KCiAgICAvLyBNaWNyb3NvZnQgRWRnZSBicm93c2VyIHNlbmRzICJ1bmRlZmluZWQiIHdoZW4gc2VuZCBpcyBjYWxsZWQgd2l0aCB1bmRlZmluZWQgdmFsdWUuCiAgICAvLyBYTUxIdHRwUmVxdWVzdCBzcGVjIHNheXMgdG8gcGFzcyBudWxsIGFzIGJvZHkgdG8gaW5kaWNhdGUgbm8gYm9keQogICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uYXVndHVyL3hoci9pc3N1ZXMvMTAwLgogICAgeGhyLnNlbmQoYm9keSB8fCBudWxsKQoKICAgIHJldHVybiB4aHIKCgp9CgpmdW5jdGlvbiBnZXRYbWwoeGhyKSB7CiAgICAvLyB4aHIucmVzcG9uc2VYTUwgd2lsbCB0aHJvdyBFeGNlcHRpb24gIkludmFsaWRTdGF0ZUVycm9yIiBvciAiRE9NRXhjZXB0aW9uIgogICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdC9yZXNwb25zZVhNTC4KICAgIHRyeSB7CiAgICAgICAgaWYgKHhoci5yZXNwb25zZVR5cGUgPT09ICJkb2N1bWVudCIpIHsKICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVhNTAogICAgICAgIH0KICAgICAgICB2YXIgZmlyZWZveEJ1Z1Rha2VuRWZmZWN0ID0geGhyLnJlc3BvbnNlWE1MICYmIHhoci5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgPT09ICJwYXJzZXJlcnJvciIKICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gIiIgJiYgIWZpcmVmb3hCdWdUYWtlbkVmZmVjdCkgewogICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlWE1MCiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkge30KCiAgICByZXR1cm4gbnVsbAp9CgpmdW5jdGlvbiBub29wKCkge30KCn0seyJnbG9iYWwvd2luZG93IjoxNywiaXMtZnVuY3Rpb24iOjIyLCJwYXJzZS1oZWFkZXJzIjozMiwieHRlbmQiOjUzfV0sNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiB4bWxwYXJzZXIoKSB7CiAgLy9jb21tb24gYnJvd3NlcnMKICBpZiAodHlwZW9mIHNlbGYuRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJykgewogICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikgewogICAgICB2YXIgcGFyc2VyID0gbmV3IHNlbGYuRE9NUGFyc2VyKCkKICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3RyLCAnYXBwbGljYXRpb24veG1sJykKICAgIH0KICB9IAoKICAvL0lFOCBmYWxsYmFjawogIGlmICh0eXBlb2Ygc2VsZi5BY3RpdmVYT2JqZWN0ICE9PSAndW5kZWZpbmVkJwogICAgICAmJiBuZXcgc2VsZi5BY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MRE9NJykpIHsKICAgIHJldHVybiBmdW5jdGlvbihzdHIpIHsKICAgICAgdmFyIHhtbERvYyA9IG5ldyBzZWxmLkFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxET00iKQogICAgICB4bWxEb2MuYXN5bmMgPSAiZmFsc2UiCiAgICAgIHhtbERvYy5sb2FkWE1MKHN0cikKICAgICAgcmV0dXJuIHhtbERvYwogICAgfQogIH0KCiAgLy9sYXN0IHJlc29ydCBmYWxsYmFjawogIHJldHVybiBmdW5jdGlvbihzdHIpIHsKICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgZGl2LmlubmVySFRNTCA9IHN0cgogICAgcmV0dXJuIGRpdgogIH0KfSkoKQoKfSx7fV0sNTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGV4dGVuZAoKdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCmZ1bmN0aW9uIGV4dGVuZCgpIHsKICAgIHZhciB0YXJnZXQgPSB7fQoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXQoKICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQKfQoKfSx7fV0sNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz17CiAgIm5hbWUiOiAiYWZyYW1lIiwKICAidmVyc2lvbiI6ICIxLjAuNCIsCiAgImRlc2NyaXB0aW9uIjogIkEgd2ViIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgdmlydHVhbCByZWFsaXR5IGV4cGVyaWVuY2VzLiIsCiAgImhvbWVwYWdlIjogImh0dHBzOi8vYWZyYW1lLmlvLyIsCiAgIm1haW4iOiAiZGlzdC9hZnJhbWUtbWFzdGVyLmpzIiwKICAic2NyaXB0cyI6IHsKICAgICJicm93c2VyaWZ5IjogImJyb3dzZXJpZnkgc3JjL2luZGV4LmpzIC1zICdBRlJBTUUnIC1wIGJyb3dzZXJpZnktZGVyZXF1aXJlIiwKICAgICJidWlsZCI6ICJzaHggbWtkaXIgLXAgYnVpbGQvICYmIG5wbSBydW4gYnJvd3NlcmlmeSAtLSAtLWRlYnVnIC10IFtlbnZpZnkgLS1JTlNQRUNUT1JfVkVSU0lPTiBkZXZdIC1vIGJ1aWxkL2FmcmFtZS5qcyIsCiAgICAiY29kZWNvdiI6ICJjb2RlY292IiwKICAgICJkZXYiOiAibnBtIHJ1biBidWlsZCAmJiBjcm9zcy1lbnYgSU5TUEVDVE9SX1ZFUlNJT049ZGV2IG5vZGUgLi9zY3JpcHRzL2J1ZG8gLXQgZW52aWZ5IiwKICAgICJkaXN0IjogIm5vZGUgc2NyaXB0cy91cGRhdGVWZXJzaW9uTG9nLmpzICYmIG5wbSBydW4gZGlzdDptaW4gJiYgbnBtIHJ1biBkaXN0Om1heCIsCiAgICAiZGlzdDptYXgiOiAibnBtIHJ1biBicm93c2VyaWZ5IC1zIC0tIC0tZGVidWcgfCBleG9yY2lzdCBkaXN0L2FmcmFtZS1tYXN0ZXIuanMubWFwID4gZGlzdC9hZnJhbWUtbWFzdGVyLmpzIiwKICAgICJkaXN0Om1pbiI6ICJucG0gcnVuIGJyb3dzZXJpZnkgLXMgLS0gLS1kZWJ1ZyAtcCBbbWluaWZ5aWZ5IC0tbWFwIGFmcmFtZS1tYXN0ZXIubWluLmpzLm1hcCAtLW91dHB1dCBkaXN0L2FmcmFtZS1tYXN0ZXIubWluLmpzLm1hcF0gLW8gZGlzdC9hZnJhbWUtbWFzdGVyLm1pbi5qcyIsCiAgICAiZG9jcyI6ICJtYXJrc2VydiAtLWRpciBkb2NzIC0tcG9ydCA5MDAxIiwKICAgICJwcmVnaHBhZ2VzIjogIm5vZGUgLi9zY3JpcHRzL3ByZWdocGFnZXMuanMiLAogICAgImdocGFnZXMiOiAiZ2hwYWdlcyAtcCBnaC1wYWdlcy8iLAogICAgImxpbnQiOiAic2VtaXN0YW5kYXJkIC12IHwgc25henp5IiwKICAgICJsaW50OmZpeCI6ICJzZW1pc3RhbmRhcmQgLS1maXgiLAogICAgInByZWNvbW1pdCI6ICJucG0gcnVuIGxpbnQiLAogICAgInByZXB1c2giOiAibm9kZSBzY3JpcHRzL3Rlc3RPbmx5Q2hlY2suanMiLAogICAgInByZXJlbGVhc2UiOiAibm9kZSBzY3JpcHRzL3JlbGVhc2UuanMgMS4wLjMgMS4wLjQiLAogICAgInN0YXJ0IjogIm5wbSBydW4gZGV2IiwKICAgICJzdGFydDpodHRwcyI6ICJjcm9zcy1lbnYgU1NMPXRydWUgbnBtIHJ1biBkZXYiLAogICAgInRlc3QiOiAia2FybWEgc3RhcnQgLi90ZXN0cy9rYXJtYS5jb25mLmpzIiwKICAgICJ0ZXN0OmRvY3MiOiAibm9kZSBzY3JpcHRzL2RvY3NMaW50LmpzIiwKICAgICJ0ZXN0OmZpcmVmb3giOiAibnBtIHRlc3QgLS0gLS1icm93c2VycyBGaXJlZm94IiwKICAgICJ0ZXN0OmNocm9tZSI6ICJucG0gdGVzdCAtLSAtLWJyb3dzZXJzIENocm9tZSIsCiAgICAidGVzdDpub2Jyb3dzZXIiOiAiTk9fQlJPV1NFUj10cnVlIG5wbSB0ZXN0IiwKICAgICJ0ZXN0Om5vZGUiOiAibW9jaGEgLS11aSB0ZGQgdGVzdHMvbm9kZSIKICB9LAogICJyZXBvc2l0b3J5IjogImFmcmFtZXZyL2FmcmFtZSIsCiAgImxpY2Vuc2UiOiAiTUlUIiwKICAiZmlsZXMiOiBbCiAgICAiZGlzdC8qIiwKICAgICJkb2NzLyoqLyoiLAogICAgInNyYy8qKi8qIiwKICAgICJ2ZW5kb3IvKiovKiIKICBdLAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiY3VzdG9tLWV2ZW50LXBvbHlmaWxsIjogIl4xLjAuNiIsCiAgICAiZGVidWciOiAibmdva2V2aW4vZGVidWcjbm9UaW1lc3RhbXAiLAogICAgImRlZXAtYXNzaWduIjogIl4yLjAuMCIsCiAgICAiZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudCI6ICJkbWFyY29zL2RvY3VtZW50LXJlZ2lzdGVyLWVsZW1lbnQjOGNjYzUzMmI3ZjM3NDRiZTk1NDU3NGNhZjMwNzJhNWZkMjYwY2E5MCIsCiAgICAibG9hZC1ibWZvbnQiOiAiXjEuMi4zIiwKICAgICJvYmplY3QtYXNzaWduIjogIl40LjAuMSIsCiAgICAicHJlc2VudCI6ICIwLjAuNiIsCiAgICAicHJvbWlzZS1wb2x5ZmlsbCI6ICJeMy4xLjAiLAogICAgInN1cGVyLWFuaW1lanMiOiAiXjMuMS4wIiwKICAgICJzdXBlci10aHJlZSI6ICJeMC4xMTEuNiIsCiAgICAidGhyZWUtYm1mb250LXRleHQiOiAiZG1hcmNvcy90aHJlZS1ibWZvbnQtdGV4dCMxYmFiZGY4NTA3YzczMWExOGY4YWYzYjgwNzI5MmUyYjk3NDA5NTVlIiwKICAgICJ3ZWJ2ci1wb2x5ZmlsbCI6ICJeMC4xMC4xMCIKICB9LAogICJkZXZEZXBlbmRlbmNpZXMiOiB7CiAgICAiYnJvd3NlcmlmeSI6ICJeMTMuMS4wIiwKICAgICJicm93c2VyaWZ5LWNzcyI6ICJeMC44LjQiLAogICAgImJyb3dzZXJpZnktZGVyZXF1aXJlIjogIl4wLjkuNCIsCiAgICAiYnJvd3NlcmlmeS1pc3RhbmJ1bCI6ICJeMi4wLjAiLAogICAgImJ1ZG8iOiAiXjkuMi4wIiwKICAgICJjaGFpIjogIl4zLjUuMCIsCiAgICAiY2hhaS1zaGFsbG93LWRlZXAtZXF1YWwiOiAiXjEuNC4wIiwKICAgICJjaGFsayI6ICJeMS4xLjMiLAogICAgImNvZGVjb3YiOiAiXjEuMC4xIiwKICAgICJjcm9zcy1lbnYiOiAiXjUuMC4xIiwKICAgICJlbnZpZnkiOiAiXjMuNC4xIiwKICAgICJleG9yY2lzdCI6ICJeMC40LjAiLAogICAgImdocGFnZXMiOiAiMC4wLjgiLAogICAgImdpdC1yZXYiOiAiXjAuMi4xIiwKICAgICJnbG9iIjogIl43LjEuMSIsCiAgICAiaHVza3kiOiAiXjAuMTEuNyIsCiAgICAiaXN0YW5idWwiOiAiXjAuNC41IiwKICAgICJqc2RvbSI6ICJeOS4xMS4wIiwKICAgICJrYXJtYSI6ICIxLjQuMSIsCiAgICAia2FybWEtYnJvd3NlcmlmeSI6ICJeNS4xLjAiLAogICAgImthcm1hLWNoYWktc2hhbGxvdy1kZWVwLWVxdWFsIjogIjAuMC40IiwKICAgICJrYXJtYS1jaHJvbWUtbGF1bmNoZXIiOiAiXjIuMC4wIiwKICAgICJrYXJtYS1jb3ZlcmFnZSI6ICJeMS4xLjEiLAogICAgImthcm1hLWVudi1wcmVwcm9jZXNzb3IiOiAiXjAuMS4xIiwKICAgICJrYXJtYS1maXJlZm94LWxhdW5jaGVyIjogIl4xLjIuMCIsCiAgICAia2FybWEtbW9jaGEiOiAiXjEuMS4xIiwKICAgICJrYXJtYS1tb2NoYS1yZXBvcnRlciI6ICJeMi4xLjAiLAogICAgImthcm1hLXNpbm9uLWNoYWkiOiAiMS4yLjQiLAogICAgImxvbGV4IjogIl4xLjUuMSIsCiAgICAibWFya3NlcnYiOiAiZ2l0aHViOnN1a2ltYS9tYXJrc2VydiNmZWF0dXJlL2ZpeC1icm9rZW4td2Vic29rZXRpby1saW5rIiwKICAgICJtaW5pZnlpZnkiOiAiXjcuMy4zIiwKICAgICJtb2NoYSI6ICJeMy4wLjIiLAogICAgIm1vemlsbGEtZG93bmxvYWQiOiAiXjEuMS4xIiwKICAgICJyZXBsYWNlLWluLWZpbGUiOiAiXjIuNS4zIiwKICAgICJzZW1pc3RhbmRhcmQiOiAiXjkuMC4wIiwKICAgICJzaGVsbGpzIjogIl4wLjcuNyIsCiAgICAic2h4IjogIl4wLjIuMiIsCiAgICAic2lub24iOiAiXjEuMTcuNSIsCiAgICAic2lub24tY2hhaSI6ICIyLjguMCIsCiAgICAic25henp5IjogIl41LjAuMCIsCiAgICAidG9vLXdvcmR5IjogIm5nb2tldmluL3Rvby13b3JkeSIsCiAgICAidWdsaWZ5anMiOiAiXjIuNC4xMCIsCiAgICAid3JpdGUtZ29vZCI6ICJeMC45LjEiCiAgfSwKICAibGluayI6IHRydWUsCiAgImJyb3dzZXJpZnkiOiB7CiAgICAidHJhbnNmb3JtIjogWwogICAgICAiYnJvd3NlcmlmeS1jc3MiLAogICAgICAiZW52aWZ5IgogICAgXQogIH0sCiAgInNlbWlzdGFuZGFyZCI6IHsKICAgICJpZ25vcmUiOiBbCiAgICAgICJidWlsZC8qKiIsCiAgICAgICJkaXN0LyoqIiwKICAgICAgImV4YW1wbGVzLyoqL3NoYWRlcnMvKi5qcyIsCiAgICAgICIqKi92ZW5kb3IvKioiCiAgICBdCiAgfSwKICAia2V5d29yZHMiOiBbCiAgICAiM2QiLAogICAgImFmcmFtZSIsCiAgICAiY2FyZGJvYXJkIiwKICAgICJjb21wb25lbnRzIiwKICAgICJvY3VsdXMiLAogICAgInRocmVlIiwKICAgICJ0aHJlZS5qcyIsCiAgICAicmlmdCIsCiAgICAidml2ZSIsCiAgICAidnIiLAogICAgIndlYi1jb21wb25lbnRzIiwKICAgICJ3ZWJ2ciIKICBdLAogICJicm93c2VyaWZ5LWNzcyI6IHsKICAgICJtaW5pZnkiOiB0cnVlCiAgfSwKICAiZW5naW5lcyI6IHsKICAgICJub2RlIjogIj49IDQuNi4wIiwKICAgICJucG0iOiAiXjIuMTUuOSIKICB9Cn0KCn0se31dLDU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGFuaW1lID0gX2RlcmVxXygnc3VwZXItYW5pbWVqcycpOwp2YXIgY29tcG9uZW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykuY29tcG9uZW50czsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzJyk7Cgp2YXIgY29sb3JIZWxwZXJGcm9tID0gbmV3IFRIUkVFLkNvbG9yKCk7CnZhciBjb2xvckhlbHBlclRvID0gbmV3IFRIUkVFLkNvbG9yKCk7Cgp2YXIgZ2V0Q29tcG9uZW50UHJvcGVydHkgPSB1dGlscy5lbnRpdHkuZ2V0Q29tcG9uZW50UHJvcGVydHk7CnZhciBzZXRDb21wb25lbnRQcm9wZXJ0eSA9IHV0aWxzLmVudGl0eS5zZXRDb21wb25lbnRQcm9wZXJ0eTsKdmFyIHNwbGl0Q2FjaGUgPSB7fTsKCnZhciBUWVBFX0NPTE9SID0gJ2NvbG9yJzsKdmFyIFBST1BfUE9TSVRJT04gPSAncG9zaXRpb24nOwp2YXIgUFJPUF9ST1RBVElPTiA9ICdyb3RhdGlvbic7CnZhciBQUk9QX1NDQUxFID0gJ3NjYWxlJzsKdmFyIFNUUklOR19DT01QT05FTlRTID0gJ2NvbXBvbmVudHMnOwp2YXIgU1RSSU5HX09CSkVDVDNEID0gJ29iamVjdDNEJzsKCi8qKgogKiBBbmltYXRpb24gY29tcG9uZW50IGZvciBBLUZyYW1lIHVzaW5nIGFuaW1lLmpzLgogKgogKiBUaGUgY29tcG9uZW50IG1hbnVhbGx5IGNvbnRyb2xzIHRoZSB0aWNrIGJ5IHNldHRpbmcgYGF1dG9wbGF5OiBmYWxzZWAgb24gYW5pbWUuanMgYW5kCiAqIG1hbnVhbGx5ICogY2FsbGluZyBgYW5pbWF0aW9uLnRpY2soKWAgaW4gdGhlIHRpY2sgaGFuZGxlci4gVG8gcGF1c2Ugb3IgcmVzdW1lLCB3ZSB0b2dnbGUgYQogKiBib29sZWFuICogZmxhZyAqIGBpc0FuaW1hdGlvblBsYXlpbmdgLgogKgogKiBhbmltZS5qcyBhbmltYXRpb24gY29uZmlnIGZvciB0d2VlbmluaW5nIEphdmFzY3JpcHQgb2JqZWN0cyBhbmQgdmFsdWVzIHdvcmtzIGFzOgogKgogKiAgY29uZmlnID0gewogKiAgICB0YXJnZXRzOiB7Zm9vOiAwLjAsIGJhcjogJyMwMDAnfSwKICogICAgZm9vOiAxLjAsCiAqICAgIGJhcjogJyNGRkYnCiAqICB9CiAqCiAqIFRoZSBhYm92ZSB3aWxsIHR3ZWVuIGVhY2ggcHJvcGVydHkgaW4gYHRhcmdldHNgLiBUaGUgYHRvYCB2YWx1ZXMgYXJlIHNldCBpbiB0aGUgcm9vdCBvZgogKiB0aGUgY29uZmlnLgogKgogKiBAbWVtYmVyIHtvYmplY3R9IGFuaW1hdGlvbiAtIGFuaW1lLmpzIGluc3RhbmNlLgogKiBAbWVtYmVyIHtib29sZWFufSBhbmltYXRpb25Jc1BsYXlpbmcgLSBDb250cm9sIGlmIGFuaW1hdGlvbiBpcyBwbGF5aW5nLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ2FuaW1hdGlvbicsIHsKICBzY2hlbWE6IHsKICAgIGF1dG9wbGF5OiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBkZWxheToge2RlZmF1bHQ6IDB9LAogICAgZGlyOiB7ZGVmYXVsdDogJyd9LAogICAgZHVyOiB7ZGVmYXVsdDogMTAwMH0sCiAgICBlYXNpbmc6IHtkZWZhdWx0OiAnZWFzZUluUXVhZCd9LAogICAgZWxhc3RpY2l0eToge2RlZmF1bHQ6IDQwMH0sCiAgICBlbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBmcm9tOiB7ZGVmYXVsdDogJyd9LAogICAgbG9vcDogewogICAgICBkZWZhdWx0OiAwLAogICAgICBwYXJzZTogZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgLy8gQm9vbGVhbiBvciBpbnRlZ2VyLgogICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJykgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTsKICAgICAgfQogICAgfSwKICAgIHByb3BlcnR5OiB7ZGVmYXVsdDogJyd9LAogICAgc3RhcnRFdmVudHM6IHt0eXBlOiAnYXJyYXknfSwKICAgIHBhdXNlRXZlbnRzOiB7dHlwZTogJ2FycmF5J30sCiAgICByZXN1bWVFdmVudHM6IHt0eXBlOiAnYXJyYXknfSwKICAgIHJvdW5kOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgdG86IHtkZWZhdWx0OiAnJ30sCiAgICB0eXBlOiB7ZGVmYXVsdDogJyd9LAogICAgaXNSYXdQcm9wZXJ0eToge2RlZmF1bHQ6IGZhbHNlfQogIH0sCgogIG11bHRpcGxlOiB0cnVlLAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgdGhpcy5ldmVudERldGFpbCA9IHtuYW1lOiB0aGlzLmF0dHJOYW1lfTsKICAgIHRoaXMudGltZSA9IDA7CgogICAgdGhpcy5hbmltYXRpb24gPSBudWxsOwogICAgdGhpcy5hbmltYXRpb25Jc1BsYXlpbmcgPSBmYWxzZTsKICAgIHRoaXMub25TdGFydEV2ZW50ID0gdGhpcy5vblN0YXJ0RXZlbnQuYmluZCh0aGlzKTsKICAgIHRoaXMuYmVnaW5BbmltYXRpb24gPSB0aGlzLmJlZ2luQW5pbWF0aW9uLmJpbmQodGhpcyk7CiAgICB0aGlzLnBhdXNlQW5pbWF0aW9uID0gdGhpcy5wYXVzZUFuaW1hdGlvbi5iaW5kKHRoaXMpOwogICAgdGhpcy5yZXN1bWVBbmltYXRpb24gPSB0aGlzLnJlc3VtZUFuaW1hdGlvbi5iaW5kKHRoaXMpOwoKICAgIHRoaXMuZnJvbUNvbG9yID0ge307CiAgICB0aGlzLnRvQ29sb3IgPSB7fTsKICAgIHRoaXMudGFyZ2V0cyA9IHt9OwogICAgdGhpcy50YXJnZXRzQXJyYXkgPSBbXTsKCiAgICB0aGlzLnVwZGF0ZUNvbmZpZ0ZvckRlZmF1bHQgPSB0aGlzLnVwZGF0ZUNvbmZpZ0ZvckRlZmF1bHQuYmluZCh0aGlzKTsKICAgIHRoaXMudXBkYXRlQ29uZmlnRm9yUmF3Q29sb3IgPSB0aGlzLnVwZGF0ZUNvbmZpZ0ZvclJhd0NvbG9yLmJpbmQodGhpcyk7CgogICAgdGhpcy5jb25maWcgPSB7CiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgc2VsZi5hbmltYXRpb25Jc1BsYXlpbmcgPSBmYWxzZTsKICAgICAgICBzZWxmLmVsLmVtaXQoJ2FuaW1hdGlvbmNvbXBsZXRlJywgc2VsZi5ldmVudERldGFpbCwgZmFsc2UpOwogICAgICAgIGlmIChzZWxmLmlkKSB7CiAgICAgICAgICBzZWxmLmVsLmVtaXQoJ2FuaW1hdGlvbmNvbXBsZXRlX18nICsgc2VsZi5pZCwgc2VsZi5ldmVudERldGFpbCwgZmFsc2UpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uIChvbGREYXRhKSB7CiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKCiAgICB0aGlzLmFuaW1hdGlvbklzUGxheWluZyA9IGZhbHNlOwoKICAgIGlmICghdGhpcy5kYXRhLmVuYWJsZWQpIHsgcmV0dXJuOyB9CgogICAgaWYgKCFkYXRhLnByb3BlcnR5KSB7IHJldHVybjsgfQoKICAgIC8vIEJhc2UgY29uZmlnLgogICAgY29uZmlnLmF1dG9wbGF5ID0gZmFsc2U7CiAgICBjb25maWcuZGlyZWN0aW9uID0gZGF0YS5kaXI7CiAgICBjb25maWcuZHVyYXRpb24gPSBkYXRhLmR1cjsKICAgIGNvbmZpZy5lYXNpbmcgPSBkYXRhLmVhc2luZzsKICAgIGNvbmZpZy5lbGFzdGljaXR5ID0gZGF0YS5lbGFzdGljaXR5OwogICAgY29uZmlnLmxvb3AgPSBkYXRhLmxvb3A7CiAgICBjb25maWcucm91bmQgPSBkYXRhLnJvdW5kOwoKICAgIC8vIFN0YXJ0IG5ldyBhbmltYXRpb24uCiAgICB0aGlzLmNyZWF0ZUFuZFN0YXJ0QW5pbWF0aW9uKCk7CiAgfSwKCiAgdGljazogZnVuY3Rpb24gKHQsIGR0KSB7CiAgICBpZiAoIXRoaXMuYW5pbWF0aW9uSXNQbGF5aW5nKSB7IHJldHVybjsgfQogICAgdGhpcy50aW1lICs9IGR0OwogICAgdGhpcy5hbmltYXRpb24udGljayh0aGlzLnRpbWUpOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5wYXVzZUFuaW1hdGlvbigpOwogICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnBhdXNlZCA9IHRydWU7CiAgICB0aGlzLnBhdXNlZFdhc1BsYXlpbmcgPSB0aGlzLmFuaW1hdGlvbklzUGxheWluZzsKICAgIHRoaXMucGF1c2VBbmltYXRpb24oKTsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICAvKioKICAgKiBgcGxheWAgaGFuZGxlciBvbmx5IGZvciByZXN1bWluZyBzY2VuZS4KICAgKi8KICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMucGF1c2VkKSB7IHJldHVybjsgfQogICAgdGhpcy5wYXVzZWQgPSBmYWxzZTsKICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTsKICAgIGlmICh0aGlzLnBhdXNlZFdhc1BsYXlpbmcpIHsKICAgICAgdGhpcy5yZXN1bWVBbmltYXRpb24oKTsKICAgICAgdGhpcy5wYXVzZWRXYXNQbGF5aW5nID0gZmFsc2U7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogU3RhcnQgYW5pbWF0aW9uIGZyb20gc2NyYXRjaC4KICAgKi8KICBjcmVhdGVBbmRTdGFydEFuaW1hdGlvbjogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CgogICAgdGhpcy51cGRhdGVDb25maWcoKTsKICAgIHRoaXMuYW5pbWF0aW9uSXNQbGF5aW5nID0gZmFsc2U7CiAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1lKHRoaXMuY29uZmlnKTsKICAgIHRoaXMuYW5pbWF0aW9uLmJlZ2FuID0gdHJ1ZTsKCiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7CgogICAgLy8gV2FpdCBmb3Igc3RhcnQgZXZlbnRzIGZvciBhbmltYXRpb24uCiAgICBpZiAoIWRhdGEuYXV0b3BsYXkgfHwgZGF0YS5zdGFydEV2ZW50cyAmJiBkYXRhLnN0YXJ0RXZlbnRzLmxlbmd0aCkgeyByZXR1cm47IH0KCiAgICAvLyBEZWxheSBhbmltYXRpb24uCiAgICBpZiAoZGF0YS5kZWxheSkgewogICAgICBzZXRUaW1lb3V0KHRoaXMuYmVnaW5BbmltYXRpb24sIGRhdGEuZGVsYXkpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gUGxheSBhbmltYXRpb24uCiAgICB0aGlzLmJlZ2luQW5pbWF0aW9uKCk7CiAgfSwKCiAgLyoqCiAgICogVGhpcyBpcyBiZWZvcmUgYW5pbWF0aW9uIHN0YXJ0IChpbmNsdWRpbmcgZnJvbSBzdGFydEV2ZW50cykuCiAgICogU2V0IHRvIGluaXRpYWwgc3RhdGUgKGNvbmZpZy5mcm9tLCB0aW1lID0gMCwgc2Vla1RpbWUgPSAwKS4KICAgKi8KICBiZWdpbkFuaW1hdGlvbjogZnVuY3Rpb24gKCkgewogICAgdGhpcy51cGRhdGVDb25maWcoKTsKICAgIHRoaXMuYW5pbWF0aW9uLmJlZ2FuID0gdHJ1ZTsKICAgIHRoaXMudGltZSA9IDA7CiAgICB0aGlzLmFuaW1hdGlvbklzUGxheWluZyA9IHRydWU7CiAgICB0aGlzLnN0b3BSZWxhdGVkQW5pbWF0aW9ucygpOwogICAgdGhpcy5lbC5lbWl0KCdhbmltYXRpb25iZWdpbicsIHRoaXMuZXZlbnREZXRhaWwsIGZhbHNlKTsKICB9LAoKICBwYXVzZUFuaW1hdGlvbjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5hbmltYXRpb25Jc1BsYXlpbmcgPSBmYWxzZTsKICB9LAoKICByZXN1bWVBbmltYXRpb246IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuYW5pbWF0aW9uSXNQbGF5aW5nID0gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBzdGFydEV2ZW50cyBjYWxsYmFjay4KICAgKi8KICBvblN0YXJ0RXZlbnQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5kYXRhLmVuYWJsZWQpIHsgcmV0dXJuOyB9CgogICAgdGhpcy51cGRhdGVDb25maWcoKTsKICAgIGlmICh0aGlzLmFuaW1hdGlvbikgewogICAgICB0aGlzLmFuaW1hdGlvbi5wYXVzZSgpOwogICAgfQogICAgdGhpcy5hbmltYXRpb24gPSBhbmltZSh0aGlzLmNvbmZpZyk7CgogICAgLy8gSW5jbHVkZSB0aGUgZGVsYXkgYmVmb3JlIGVhY2ggc3RhcnQgZXZlbnQuCiAgICBpZiAodGhpcy5kYXRhLmRlbGF5KSB7CiAgICAgIHNldFRpbWVvdXQodGhpcy5iZWdpbkFuaW1hdGlvbiwgdGhpcy5kYXRhLmRlbGF5KTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5iZWdpbkFuaW1hdGlvbigpOwogIH0sCgogIC8qKgogICAqIHJhd1Byb3BlcnR5OiB0cnVlIGFuZCB0eXBlOiBjb2xvcjsKICAgKi8KICB1cGRhdGVDb25maWdGb3JSYXdDb2xvcjogZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGZyb207CiAgICB2YXIga2V5OwogICAgdmFyIHRvOwoKICAgIGlmICh0aGlzLndhaXRDb21wb25lbnRJbml0UmF3UHJvcGVydHkodGhpcy51cGRhdGVDb25maWdGb3JSYXdDb2xvcikpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGZyb20gPSBkYXRhLmZyb20gPT09ICcnID8gZ2V0UmF3UHJvcGVydHkoZWwsIGRhdGEucHJvcGVydHkpIDogZGF0YS5mcm9tOwogICAgdG8gPSBkYXRhLnRvOwoKICAgIC8vIFVzZSByL2cvYiB2ZWN0b3IgZm9yIGNvbG9yIHR5cGUuCiAgICB0aGlzLnNldENvbG9yQ29uZmlnKGZyb20sIHRvKTsKICAgIGZyb20gPSB0aGlzLmZyb21Db2xvcjsKICAgIHRvID0gdGhpcy50b0NvbG9yOwoKICAgIHRoaXMudGFyZ2V0c0FycmF5Lmxlbmd0aCA9IDA7CiAgICB0aGlzLnRhcmdldHNBcnJheS5wdXNoKGZyb20pOwogICAgY29uZmlnLnRhcmdldHMgPSB0aGlzLnRhcmdldHNBcnJheTsKICAgIGZvciAoa2V5IGluIHRvKSB7IGNvbmZpZ1trZXldID0gdG9ba2V5XTsgfQoKICAgIGNvbmZpZy51cGRhdGUgPSAoZnVuY3Rpb24gKCkgewogICAgICB2YXIgbGFzdFZhbHVlID0ge307CiAgICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbSkgewogICAgICAgIHZhciB2YWx1ZTsKICAgICAgICB2YWx1ZSA9IGFuaW0uYW5pbWF0YWJsZXNbMF0udGFyZ2V0OwogICAgICAgIC8vIEZvciBhbmltYXRpb24gdGltZWxpbmUuCiAgICAgICAgaWYgKHZhbHVlLnIgPT09IGxhc3RWYWx1ZS5yICYmCiAgICAgICAgICAgIHZhbHVlLmcgPT09IGxhc3RWYWx1ZS5nICYmCiAgICAgICAgICAgIHZhbHVlLmIgPT09IGxhc3RWYWx1ZS5iKSB7IHJldHVybjsgfQoKICAgICAgICBzZXRSYXdQcm9wZXJ0eShlbCwgZGF0YS5wcm9wZXJ0eSwgdmFsdWUsIGRhdGEudHlwZSk7CiAgICAgIH07CiAgICB9KSgpOwogIH0sCgogIC8qKgogICAqIFN0dWZmIHByb3BlcnR5IGludG8gZ2VuZXJpYyBgcHJvcGVydHlgIGtleS4KICAgKi8KICB1cGRhdGVDb25maWdGb3JEZWZhdWx0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgZnJvbTsKICAgIHZhciBpc0Jvb2xlYW47CiAgICB2YXIgaXNOdW1iZXI7CiAgICB2YXIgdG87CgogICAgaWYgKHRoaXMud2FpdENvbXBvbmVudEluaXRSYXdQcm9wZXJ0eSh0aGlzLnVwZGF0ZUNvbmZpZ0ZvckRlZmF1bHQpKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZGF0YS5mcm9tID09PSAnJykgewogICAgICAvLyBJbmZlciBmcm9tLgogICAgICBmcm9tID0gaXNSYXdQcm9wZXJ0eShkYXRhKQogICAgICAgID8gZ2V0UmF3UHJvcGVydHkoZWwsIGRhdGEucHJvcGVydHkpCiAgICAgICAgOiBnZXRDb21wb25lbnRQcm9wZXJ0eShlbCwgZGF0YS5wcm9wZXJ0eSk7CiAgICB9IGVsc2UgewogICAgICAvLyBFeHBsaWNpdCBmcm9tLgogICAgICBmcm9tID0gZGF0YS5mcm9tOwogICAgfQoKICAgIHRvID0gZGF0YS50bzsKCiAgICBpc051bWJlciA9ICFpc05hTihmcm9tIHx8IHRvKTsKICAgIGlmIChpc051bWJlcikgewogICAgICBmcm9tID0gcGFyc2VGbG9hdChmcm9tKTsKICAgICAgdG8gPSBwYXJzZUZsb2F0KHRvKTsKICAgIH0gZWxzZSB7CiAgICAgIGZyb20gPSBmcm9tID8gZnJvbS50b1N0cmluZygpIDogZnJvbTsKICAgICAgdG8gPSB0byA/IHRvLnRvU3RyaW5nKCkgOiB0bzsKICAgIH0KCiAgICAvLyBDb252ZXJ0IGJvb2xlYW5zIHRvIGludGVnZXIgdG8gYWxsb3cgYm9vbGVhbiBmbGlwcGluZy4KICAgIGlzQm9vbGVhbiA9IGRhdGEudG8gPT09ICd0cnVlJyB8fCBkYXRhLnRvID09PSAnZmFsc2UnIHx8CiAgICAgICAgICAgICAgICBkYXRhLnRvID09PSB0cnVlIHx8IGRhdGEudG8gPT09IGZhbHNlOwogICAgaWYgKGlzQm9vbGVhbikgewogICAgICBmcm9tID0gZGF0YS5mcm9tID09PSAndHJ1ZScgfHwgZGF0YS5mcm9tID09PSB0cnVlID8gMSA6IDA7CiAgICAgIHRvID0gZGF0YS50byA9PT0gJ3RydWUnIHx8IGRhdGEudG8gPT09IHRydWUgPyAxIDogMDsKICAgIH0KCiAgICB0aGlzLnRhcmdldHMuYWZyYW1lUHJvcGVydHkgPSBmcm9tOwogICAgY29uZmlnLnRhcmdldHMgPSB0aGlzLnRhcmdldHM7CiAgICBjb25maWcuYWZyYW1lUHJvcGVydHkgPSB0bzsKICAgIGNvbmZpZy51cGRhdGUgPSAoZnVuY3Rpb24gKCkgewogICAgICB2YXIgbGFzdFZhbHVlOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltKSB7CiAgICAgICAgdmFyIHZhbHVlOwogICAgICAgIHZhbHVlID0gYW5pbS5hbmltYXRhYmxlc1swXS50YXJnZXQuYWZyYW1lUHJvcGVydHk7CgogICAgICAgIC8vIE5lZWQgdG8gZG8gYSBsYXN0IHZhbHVlIGNoZWNrIGZvciBhbmltYXRpb24gdGltZWxpbmUgc2luY2UgYWxsIHRoZSB0d2VlbmluZwogICAgICAgIC8vIGJlZ2lucyBzaW11bHRhZW5vdXNseSBldmVuIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuIEFsc28gYmV0dGVyIGZvciBwZXJmCiAgICAgICAgLy8gYW55d2F5cy4KICAgICAgICBpZiAodmFsdWUgPT09IGxhc3RWYWx1ZSkgeyByZXR1cm47IH0KICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTsKCiAgICAgICAgaWYgKGlzQm9vbGVhbikgeyB2YWx1ZSA9IHZhbHVlID49IDE7IH0KCiAgICAgICAgaWYgKGlzUmF3UHJvcGVydHkoZGF0YSkpIHsKICAgICAgICAgIHNldFJhd1Byb3BlcnR5KGVsLCBkYXRhLnByb3BlcnR5LCB2YWx1ZSwgZGF0YS50eXBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2V0Q29tcG9uZW50UHJvcGVydHkoZWwsIGRhdGEucHJvcGVydHksIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9KSgpOwogIH0sCgogIC8qKgogICAqIEV4dGVuZCB4L3kvei93IG9udG8gdGhlIGNvbmZpZy4KICAgKiBVcGRhdGUgdmVjdG9yIGJ5IG1vZGlmeWluZyBvYmplY3QzRC4KICAgKi8KICB1cGRhdGVDb25maWdGb3JWZWN0b3I6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZzsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBrZXk7CiAgICB2YXIgZnJvbTsKICAgIHZhciB0bzsKCiAgICAvLyBQYXJzZSBjb29yZGluYXRlcy4KICAgIGZyb20gPSBkYXRhLmZyb20gIT09ICcnCiAgICAgID8gdXRpbHMuY29vcmRpbmF0ZXMucGFyc2UoZGF0YS5mcm9tKSAgLy8gSWYgZGF0YS5mcm9tIGRlZmluZWQsIHVzZSB0aGF0LgogICAgICA6IGdldENvbXBvbmVudFByb3BlcnR5KGVsLCBkYXRhLnByb3BlcnR5KTsgIC8vIElmIGRhdGEuZnJvbSBub3QgZGVmaW5lZCwgZ2V0IG9uIHRoZSBmbHkuCiAgICB0byA9IHV0aWxzLmNvb3JkaW5hdGVzLnBhcnNlKGRhdGEudG8pOwoKICAgIGlmIChkYXRhLnByb3BlcnR5ID09PSBQUk9QX1JPVEFUSU9OKSB7CiAgICAgIHRvUmFkaWFucyhmcm9tKTsKICAgICAgdG9SYWRpYW5zKHRvKTsKICAgIH0KCiAgICAvLyBTZXQgdG8gYW5kIGZyb20uCiAgICB0aGlzLnRhcmdldHNBcnJheS5sZW5ndGggPSAwOwogICAgdGhpcy50YXJnZXRzQXJyYXkucHVzaChmcm9tKTsKICAgIGNvbmZpZy50YXJnZXRzID0gdGhpcy50YXJnZXRzQXJyYXk7CiAgICBmb3IgKGtleSBpbiB0bykgeyBjb25maWdba2V5XSA9IHRvW2tleV07IH0KCiAgICAvLyBJZiBhbmltYXRpbmcgb2JqZWN0M0QgdHJhbnNmb3JtYXRpb24sIHJ1biBtb3JlIG9wdGltaXplZCB1cGRhdGVyLgogICAgaWYgKGRhdGEucHJvcGVydHkgPT09IFBST1BfUE9TSVRJT04gfHwgZGF0YS5wcm9wZXJ0eSA9PT0gUFJPUF9ST1RBVElPTiB8fAogICAgICAgIGRhdGEucHJvcGVydHkgPT09IFBST1BfU0NBTEUpIHsKICAgICAgY29uZmlnLnVwZGF0ZSA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IHt9OwogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbSkgewogICAgICAgICAgdmFyIHZhbHVlID0gYW5pbS5hbmltYXRhYmxlc1swXS50YXJnZXQ7CgogICAgICAgICAgaWYgKGRhdGEucHJvcGVydHkgPT09IFBST1BfU0NBTEUpIHsKICAgICAgICAgICAgdmFsdWUueCA9IE1hdGgubWF4KDAuMDAwMSwgdmFsdWUueCk7CiAgICAgICAgICAgIHZhbHVlLnkgPSBNYXRoLm1heCgwLjAwMDEsIHZhbHVlLnkpOwogICAgICAgICAgICB2YWx1ZS56ID0gTWF0aC5tYXgoMC4wMDAxLCB2YWx1ZS56KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBGb3IgYW5pbWF0aW9uIHRpbWVsaW5lLgogICAgICAgICAgaWYgKHZhbHVlLnggPT09IGxhc3RWYWx1ZS54ICYmCiAgICAgICAgICAgICAgdmFsdWUueSA9PT0gbGFzdFZhbHVlLnkgJiYKICAgICAgICAgICAgICB2YWx1ZS56ID09PSBsYXN0VmFsdWUueikgeyByZXR1cm47IH0KCiAgICAgICAgICBsYXN0VmFsdWUueCA9IHZhbHVlLng7CiAgICAgICAgICBsYXN0VmFsdWUueSA9IHZhbHVlLnk7CiAgICAgICAgICBsYXN0VmFsdWUueiA9IHZhbHVlLno7CgogICAgICAgICAgZWwub2JqZWN0M0RbZGF0YS5wcm9wZXJ0eV0uc2V0KHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnopOwogICAgICAgIH07CiAgICAgIH0pKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBBbmltYXRpbmcgc29tZSB2ZWN0b3IuCiAgICBjb25maWcudXBkYXRlID0gKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGxhc3RWYWx1ZSA9IHt9OwogICAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW0pIHsKICAgICAgICB2YXIgdmFsdWUgPSBhbmltLmFuaW1hdGFibGVzWzBdLnRhcmdldDsKCiAgICAgICAgLy8gQW5pbWF0ZSByb3RhdGlvbiB0aHJvdWdoIHJhZGlhbnMuCiAgICAgICAgLy8gRm9yIGFuaW1hdGlvbiB0aW1lbGluZS4KICAgICAgICBpZiAodmFsdWUueCA9PT0gbGFzdFZhbHVlLnggJiYKICAgICAgICAgICAgdmFsdWUueSA9PT0gbGFzdFZhbHVlLnkgJiYKICAgICAgICAgICAgdmFsdWUueiA9PT0gbGFzdFZhbHVlLnopIHsgcmV0dXJuOyB9CiAgICAgICAgbGFzdFZhbHVlLnggPSB2YWx1ZS54OwogICAgICAgIGxhc3RWYWx1ZS55ID0gdmFsdWUueTsKICAgICAgICBsYXN0VmFsdWUueiA9IHZhbHVlLno7CiAgICAgICAgc2V0Q29tcG9uZW50UHJvcGVydHkoZWwsIGRhdGEucHJvcGVydHksIHZhbHVlKTsKICAgICAgfTsKICAgIH0pKCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjb25maWcgYmVmb3JlIGVhY2ggcnVuLgogICAqLwogIHVwZGF0ZUNvbmZpZzogZnVuY3Rpb24gKCkgewogICAgdmFyIHByb3BUeXBlOwoKICAgIC8vIFJvdXRlIGNvbmZpZyB0eXBlLgogICAgcHJvcFR5cGUgPSBnZXRQcm9wZXJ0eVR5cGUodGhpcy5lbCwgdGhpcy5kYXRhLnByb3BlcnR5KTsKICAgIGlmIChpc1Jhd1Byb3BlcnR5KHRoaXMuZGF0YSkgJiYgdGhpcy5kYXRhLnR5cGUgPT09IFRZUEVfQ09MT1IpIHsKICAgICAgdGhpcy51cGRhdGVDb25maWdGb3JSYXdDb2xvcigpOwogICAgfSBlbHNlIGlmIChwcm9wVHlwZSA9PT0gJ3ZlYzInIHx8IHByb3BUeXBlID09PSAndmVjMycgfHwgcHJvcFR5cGUgPT09ICd2ZWM0JykgewogICAgICB0aGlzLnVwZGF0ZUNvbmZpZ0ZvclZlY3RvcigpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy51cGRhdGVDb25maWdGb3JEZWZhdWx0KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogV2FpdCBmb3IgY29tcG9uZW50IHRvIGluaXRpYWxpemUuCiAgICovCiAgd2FpdENvbXBvbmVudEluaXRSYXdQcm9wZXJ0eTogZnVuY3Rpb24gKGNiKSB7CiAgICB2YXIgY29tcG9uZW50TmFtZTsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBpZiAoZGF0YS5mcm9tICE9PSAnJykgeyByZXR1cm4gZmFsc2U7IH0KCiAgICBpZiAoIWRhdGEucHJvcGVydHkuc3RhcnRzV2l0aChTVFJJTkdfQ09NUE9ORU5UUykpIHsgcmV0dXJuIGZhbHNlOyB9CgogICAgY29tcG9uZW50TmFtZSA9IHNwbGl0RG90KGRhdGEucHJvcGVydHkpWzFdOwogICAgaWYgKGVsLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0pIHsgcmV0dXJuIGZhbHNlOyB9CgogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9uZW50aW5pdGlhbGl6ZWQnLCBmdW5jdGlvbiB3YWl0IChldnQpIHsKICAgICAgaWYgKGV2dC5kZXRhaWwubmFtZSAhPT0gY29tcG9uZW50TmFtZSkgeyByZXR1cm47IH0KICAgICAgY2IoKTsKICAgICAgLy8gU2luY2UgdGhlIGNvbmZpZyB3YXMgY3JlYXRlZCBhc3luYywgY3JlYXRlIHRoZSBhbmltYXRpb24gbm93IHNpbmNlIHdlIG1pc3NlZCBpdAogICAgICAvLyBlYXJsaWVyLgogICAgICBzZWxmLmFuaW1hdGlvbiA9IGFuaW1lKHNlbGYuY29uZmlnKTsKICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcG9uZW50aW5pdGlhbGl6ZWQnLCB3YWl0KTsKICAgIH0pOwogICAgcmV0dXJuIHRydWU7CiAgfSwKCiAgLyoqCiAgICogTWFrZSBzdXJlIHR3byBhbmltYXRpb25zIG9uIHRoZSBzYW1lIHByb3BlcnR5IGRvbid0IGZpZ2h0IGVhY2ggb3RoZXIuCiAgICogZS5nLiwgYW5pbWF0aW9uX19tb3VzZWVudGVyPSJwcm9wZXJ0eTogbWF0ZXJpYWwub3BhY2l0eSIKICAgKiAgICAgICBhbmltYXRpb25fX21vdXNlbGVhdmU9InByb3BlcnR5OiBtYXRlcmlhbC5vcGFjaXR5IgogICAqLwogIHN0b3BSZWxhdGVkQW5pbWF0aW9uczogZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbXBvbmVudDsKICAgIHZhciBjb21wb25lbnROYW1lOwogICAgZm9yIChjb21wb25lbnROYW1lIGluIHRoaXMuZWwuY29tcG9uZW50cykgewogICAgICBjb21wb25lbnQgPSB0aGlzLmVsLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV07CiAgICAgIGlmIChjb21wb25lbnROYW1lID09PSB0aGlzLmF0dHJOYW1lKSB7IGNvbnRpbnVlOyB9CiAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gJ2FuaW1hdGlvbicpIHsgY29udGludWU7IH0KICAgICAgaWYgKCFjb21wb25lbnQuYW5pbWF0aW9uSXNQbGF5aW5nKSB7IGNvbnRpbnVlOyB9CiAgICAgIGlmIChjb21wb25lbnQuZGF0YS5wcm9wZXJ0eSAhPT0gdGhpcy5kYXRhLnByb3BlcnR5KSB7IGNvbnRpbnVlOyB9CiAgICAgIGNvbXBvbmVudC5hbmltYXRpb25Jc1BsYXlpbmcgPSBmYWxzZTsKICAgIH0KICB9LAoKICBhZGRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgYWRkRXZlbnRMaXN0ZW5lcnMoZWwsIGRhdGEuc3RhcnRFdmVudHMsIHRoaXMub25TdGFydEV2ZW50KTsKICAgIGFkZEV2ZW50TGlzdGVuZXJzKGVsLCBkYXRhLnBhdXNlRXZlbnRzLCB0aGlzLnBhdXNlQW5pbWF0aW9uKTsKICAgIGFkZEV2ZW50TGlzdGVuZXJzKGVsLCBkYXRhLnJlc3VtZUV2ZW50cywgdGhpcy5yZXN1bWVBbmltYXRpb24pOwogIH0sCgogIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICByZW1vdmVFdmVudExpc3RlbmVycyhlbCwgZGF0YS5zdGFydEV2ZW50cywgdGhpcy5vblN0YXJ0RXZlbnQpOwogICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZWwsIGRhdGEucGF1c2VFdmVudHMsIHRoaXMucGF1c2VBbmltYXRpb24pOwogICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZWwsIGRhdGEucmVzdW1lRXZlbnRzLCB0aGlzLnJlc3VtZUFuaW1hdGlvbik7CiAgfSwKCiAgc2V0Q29sb3JDb25maWc6IGZ1bmN0aW9uIChmcm9tLCB0bykgewogICAgY29sb3JIZWxwZXJGcm9tLnNldChmcm9tKTsKICAgIGNvbG9ySGVscGVyVG8uc2V0KHRvKTsKICAgIGZyb20gPSB0aGlzLmZyb21Db2xvcjsKICAgIHRvID0gdGhpcy50b0NvbG9yOwogICAgZnJvbS5yID0gY29sb3JIZWxwZXJGcm9tLnI7CiAgICBmcm9tLmcgPSBjb2xvckhlbHBlckZyb20uZzsKICAgIGZyb20uYiA9IGNvbG9ySGVscGVyRnJvbS5iOwogICAgdG8uciA9IGNvbG9ySGVscGVyVG8ucjsKICAgIHRvLmcgPSBjb2xvckhlbHBlclRvLmc7CiAgICB0by5iID0gY29sb3JIZWxwZXJUby5iOwogIH0KfSk7CgovKioKICogR2l2ZW4gcHJvcGVydHkgbmFtZSwgY2hlY2sgc2NoZW1hIHRvIHNlZSB3aGF0IHR5cGUgd2UgYXJlIGFuaW1hdGluZy4KICogV2UganVzdCBjYXJlIHdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGEgdmVjdG9yLgogKi8KZnVuY3Rpb24gZ2V0UHJvcGVydHlUeXBlIChlbCwgcHJvcGVydHkpIHsKICB2YXIgY29tcG9uZW50OwogIHZhciBjb21wb25lbnROYW1lOwogIHZhciBzcGxpdDsKICB2YXIgcHJvcGVydHlOYW1lOwoKICBzcGxpdCA9IHByb3BlcnR5LnNwbGl0KCcuJyk7CiAgY29tcG9uZW50TmFtZSA9IHNwbGl0WzBdOwogIHByb3BlcnR5TmFtZSA9IHNwbGl0WzFdOwogIGNvbXBvbmVudCA9IGVsLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0gfHwgY29tcG9uZW50c1tjb21wb25lbnROYW1lXTsKCiAgLy8gUHJpbWl0aXZlcy4KICBpZiAoIWNvbXBvbmVudCkgeyByZXR1cm4gbnVsbDsgfQoKICAvLyBEeW5hbWljIHNjaGVtYS4gV2Ugb25seSBjYXJlIGFib3V0IHZlY3RvcnMgYW55d2F5cy4KICBpZiAocHJvcGVydHlOYW1lICYmICFjb21wb25lbnQuc2NoZW1hW3Byb3BlcnR5TmFtZV0pIHsgcmV0dXJuIG51bGw7IH0KCiAgLy8gTXVsdGktcHJvcC4KICBpZiAocHJvcGVydHlOYW1lKSB7IHJldHVybiBjb21wb25lbnQuc2NoZW1hW3Byb3BlcnR5TmFtZV0udHlwZTsgfQoKICAvLyBTaW5nbGUtcHJvcC4KICByZXR1cm4gY29tcG9uZW50LnNjaGVtYS50eXBlOwp9CgovKioKICogQ29udmVydCBvYmplY3QgdG8gcmFkaWFucy4KICovCmZ1bmN0aW9uIHRvUmFkaWFucyAob2JqKSB7CiAgb2JqLnggPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKG9iai54KTsKICBvYmoueSA9IFRIUkVFLk1hdGguZGVnVG9SYWQob2JqLnkpOwogIG9iai56ID0gVEhSRUUuTWF0aC5kZWdUb1JhZChvYmoueik7Cn0KCmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzIChlbCwgZXZlbnROYW1lcywgaGFuZGxlcikgewogIHZhciBpOwogIGZvciAoaSA9IDA7IGkgPCBldmVudE5hbWVzLmxlbmd0aDsgaSsrKSB7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZXNbaV0sIGhhbmRsZXIpOwogIH0KfQoKZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgKGVsLCBldmVudE5hbWVzLCBoYW5kbGVyKSB7CiAgdmFyIGk7CiAgZm9yIChpID0gMDsgaSA8IGV2ZW50TmFtZXMubGVuZ3RoOyBpKyspIHsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lc1tpXSwgaGFuZGxlcik7CiAgfQp9CgpmdW5jdGlvbiBnZXRSYXdQcm9wZXJ0eSAoZWwsIHBhdGgpIHsKICB2YXIgaTsKICB2YXIgc3BsaXQ7CiAgdmFyIHZhbHVlOwogIHNwbGl0ID0gc3BsaXREb3QocGF0aCk7CiAgdmFsdWUgPSBlbDsKICBmb3IgKGkgPSAwOyBpIDwgc3BsaXQubGVuZ3RoOyBpKyspIHsKICAgIHZhbHVlID0gdmFsdWVbc3BsaXRbaV1dOwogIH0KICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgY29uc29sZS5sb2coZWwpOwogICAgdGhyb3cgbmV3IEVycm9yKCdbYW5pbWF0aW9uXSBwcm9wZXJ0eSAoJyArIHBhdGggKyAnKSBjb3VsZCBub3QgYmUgZm91bmQnKTsKICB9CiAgcmV0dXJuIHZhbHVlOwp9CgpmdW5jdGlvbiBzZXRSYXdQcm9wZXJ0eSAoZWwsIHBhdGgsIHZhbHVlLCB0eXBlKSB7CiAgdmFyIGk7CiAgdmFyIHNwbGl0OwogIHZhciBwcm9wZXJ0eU5hbWU7CiAgdmFyIHRhcmdldFZhbHVlOwoKICBpZiAocGF0aC5zdGFydHNXaXRoKCdvYmplY3QzRC5yb3RhdGlvbicpKSB7CiAgICB2YWx1ZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQodmFsdWUpOwogIH0KCiAgLy8gV2Fsay4KICBzcGxpdCA9IHNwbGl0RG90KHBhdGgpOwogIHRhcmdldFZhbHVlID0gZWw7CiAgZm9yIChpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aCAtIDE7IGkrKykgeyB0YXJnZXRWYWx1ZSA9IHRhcmdldFZhbHVlW3NwbGl0W2ldXTsgfQogIHByb3BlcnR5TmFtZSA9IHNwbGl0W3NwbGl0Lmxlbmd0aCAtIDFdOwoKICAvLyBSYXcgY29sb3IuCiAgaWYgKHR5cGUgPT09IFRZUEVfQ09MT1IpIHsKICAgIGlmICgncicgaW4gdGFyZ2V0VmFsdWVbcHJvcGVydHlOYW1lXSkgewogICAgICB0YXJnZXRWYWx1ZVtwcm9wZXJ0eU5hbWVdLnIgPSB2YWx1ZS5yOwogICAgICB0YXJnZXRWYWx1ZVtwcm9wZXJ0eU5hbWVdLmcgPSB2YWx1ZS5nOwogICAgICB0YXJnZXRWYWx1ZVtwcm9wZXJ0eU5hbWVdLmIgPSB2YWx1ZS5iOwogICAgfSBlbHNlIHsKICAgICAgdGFyZ2V0VmFsdWVbcHJvcGVydHlOYW1lXS54ID0gdmFsdWUucjsKICAgICAgdGFyZ2V0VmFsdWVbcHJvcGVydHlOYW1lXS55ID0gdmFsdWUuZzsKICAgICAgdGFyZ2V0VmFsdWVbcHJvcGVydHlOYW1lXS56ID0gdmFsdWUuYjsKICAgIH0KICAgIHJldHVybjsKICB9CgogIHRhcmdldFZhbHVlW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTsKfQoKZnVuY3Rpb24gc3BsaXREb3QgKHBhdGgpIHsKICBpZiAocGF0aCBpbiBzcGxpdENhY2hlKSB7IHJldHVybiBzcGxpdENhY2hlW3BhdGhdOyB9CiAgc3BsaXRDYWNoZVtwYXRoXSA9IHBhdGguc3BsaXQoJy4nKTsKICByZXR1cm4gc3BsaXRDYWNoZVtwYXRoXTsKfQoKZnVuY3Rpb24gaXNSYXdQcm9wZXJ0eSAoZGF0YSkgewogIHJldHVybiBkYXRhLmlzUmF3UHJvcGVydHkgfHwgZGF0YS5wcm9wZXJ0eS5zdGFydHNXaXRoKFNUUklOR19DT01QT05FTlRTKSB8fAogICAgICAgICBkYXRhLnByb3BlcnR5LnN0YXJ0c1dpdGgoU1RSSU5HX09CSkVDVDNEKTsKfQoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscyI6MTgyLCJzdXBlci1hbmltZWpzIjozNn1dLDU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CgovKioKICogQ2FtZXJhIGNvbXBvbmVudC4KICogUGFpcnMgYWxvbmcgd2l0aCBjYW1lcmEgc3lzdGVtIHRvIGhhbmRsZSB0cmFja2luZyB0aGUgYWN0aXZlIGNhbWVyYS4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdjYW1lcmEnLCB7CiAgc2NoZW1hOiB7CiAgICBhY3RpdmU6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGZhcjoge2RlZmF1bHQ6IDEwMDAwfSwKICAgIGZvdjoge2RlZmF1bHQ6IDgwLCBtaW46IDB9LAogICAgbmVhcjoge2RlZmF1bHQ6IDAuMDA1LCBtaW46IDB9LAogICAgc3BlY3RhdG9yOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgem9vbToge2RlZmF1bHQ6IDEsIG1pbjogMH0KICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplIHRocmVlLmpzIGNhbWVyYSBhbmQgYWRkIGl0IHRvIHRoZSBlbnRpdHkuCiAgICogQWRkIHJlZmVyZW5jZSBmcm9tIHNjZW5lIHRvIHRoaXMgZW50aXR5IGFzIHRoZSBjYW1lcmEuCiAgICovCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGNhbWVyYTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CgogICAgLy8gQ3JlYXRlIGNhbWVyYS4KICAgIGNhbWVyYSA9IHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCk7CiAgICBlbC5zZXRPYmplY3QzRCgnY2FtZXJhJywgY2FtZXJhKTsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgdGhyZWUuanMgY2FtZXJhLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhOwoKICAgIC8vIFVwZGF0ZSBwcm9wZXJ0aWVzLgogICAgY2FtZXJhLmFzcGVjdCA9IGRhdGEuYXNwZWN0IHx8ICh3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCk7CiAgICBjYW1lcmEuZmFyID0gZGF0YS5mYXI7CiAgICBjYW1lcmEuZm92ID0gZGF0YS5mb3Y7CiAgICBjYW1lcmEubmVhciA9IGRhdGEubmVhcjsKICAgIGNhbWVyYS56b29tID0gZGF0YS56b29tOwogICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKCiAgICB0aGlzLnVwZGF0ZUFjdGl2ZUNhbWVyYShvbGREYXRhKTsKICAgIHRoaXMudXBkYXRlU3BlY3RhdG9yQ2FtZXJhKG9sZERhdGEpOwogIH0sCgogIHVwZGF0ZUFjdGl2ZUNhbWVyYTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBzeXN0ZW0gPSB0aGlzLnN5c3RlbTsKICAgIC8vIEFjdGl2ZSBwcm9wZXJ0eSBkaWQgbm90IGNoYW5nZS4KICAgIGlmIChvbGREYXRhICYmIG9sZERhdGEuYWN0aXZlID09PSBkYXRhLmFjdGl2ZSB8fCBkYXRhLnNwZWN0YXRvcikgeyByZXR1cm47IH0KCiAgICAvLyBJZiBgYWN0aXZlYCBwcm9wZXJ0eSBjaGFuZ2VzLCBvciBmaXJzdCB1cGRhdGUsIGhhbmRsZSBhY3RpdmUgY2FtZXJhIHdpdGggc3lzdGVtLgogICAgaWYgKGRhdGEuYWN0aXZlICYmIHN5c3RlbS5hY3RpdmVDYW1lcmFFbCAhPT0gZWwpIHsKICAgICAgLy8gQ2FtZXJhIGVuYWJsZWQuIFNldCBjYW1lcmEgdG8gdGhpcyBjYW1lcmEuCiAgICAgIHN5c3RlbS5zZXRBY3RpdmVDYW1lcmEoZWwpOwogICAgfSBlbHNlIGlmICghZGF0YS5hY3RpdmUgJiYgc3lzdGVtLmFjdGl2ZUNhbWVyYUVsID09PSBlbCkgewogICAgICAvLyBDYW1lcmEgZGlzYWJsZWQuIFNldCBjYW1lcmEgdG8gYW5vdGhlciBjYW1lcmEuCiAgICAgIHN5c3RlbS5kaXNhYmxlQWN0aXZlQ2FtZXJhKCk7CiAgICB9CiAgfSwKCiAgdXBkYXRlU3BlY3RhdG9yQ2FtZXJhOiBmdW5jdGlvbiAob2xkRGF0YSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIHN5c3RlbSA9IHRoaXMuc3lzdGVtOwogICAgLy8gc3BlY3RhdG9yIHByb3BlcnR5IGRpZCBub3QgY2hhbmdlLgogICAgaWYgKG9sZERhdGEgJiYgb2xkRGF0YS5zcGVjdGF0b3IgPT09IGRhdGEuc3BlY3RhdG9yKSB7IHJldHVybjsgfQoKICAgIC8vIElmIGBzcGVjdGF0b3JgIHByb3BlcnR5IGNoYW5nZXMsIG9yIGZpcnN0IHVwZGF0ZSwgaGFuZGxlIHNwZWN0YXRvciBjYW1lcmEgd2l0aCBzeXN0ZW0uCiAgICBpZiAoZGF0YS5zcGVjdGF0b3IgJiYgc3lzdGVtLnNwZWN0YXRvckNhbWVyYUVsICE9PSBlbCkgewogICAgICAvLyBDYW1lcmEgZW5hYmxlZC4gU2V0IGNhbWVyYSB0byB0aGlzIGNhbWVyYS4KICAgICAgc3lzdGVtLnNldFNwZWN0YXRvckNhbWVyYShlbCk7CiAgICB9IGVsc2UgaWYgKCFkYXRhLnNwZWN0YXRvciAmJiBzeXN0ZW0uc3BlY3RhdG9yQ2FtZXJhRWwgPT09IGVsKSB7CiAgICAgIC8vIENhbWVyYSBkaXNhYmxlZC4gU2V0IGNhbWVyYSB0byBhbm90aGVyIGNhbWVyYS4KICAgICAgc3lzdGVtLmRpc2FibGVTcGVjdGF0b3JDYW1lcmEoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBSZW1vdmUgY2FtZXJhIG9uIHJlbW92ZSAoY2FsbGJhY2spLgogICAqLwogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5yZW1vdmVPYmplY3QzRCgnY2FtZXJhJyk7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1N31dLDU3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIFRIUkVFICovCnZhciByZWdpc3RlckNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzLycpOwoKdmFyIGJpbmQgPSB1dGlscy5iaW5kOwoKdmFyIEVWRU5UUyA9IHsKICBDTElDSzogJ2NsaWNrJywKICBGVVNJTkc6ICdmdXNpbmcnLAogIE1PVVNFRU5URVI6ICdtb3VzZWVudGVyJywKICBNT1VTRURPV046ICdtb3VzZWRvd24nLAogIE1PVVNFTEVBVkU6ICdtb3VzZWxlYXZlJywKICBNT1VTRVVQOiAnbW91c2V1cCcKfTsKCnZhciBTVEFURVMgPSB7CiAgRlVTSU5HOiAnY3Vyc29yLWZ1c2luZycsCiAgSE9WRVJJTkc6ICdjdXJzb3ItaG92ZXJpbmcnLAogIEhPVkVSRUQ6ICdjdXJzb3ItaG92ZXJlZCcKfTsKCnZhciBDQU5WQVNfRVZFTlRTID0gewogIERPV046IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwKICBVUDogWydtb3VzZXVwJywgJ3RvdWNoZW5kJ10KfTsKCnZhciBXRUJYUl9FVkVOVFMgPSB7CiAgRE9XTjogWydzZWxlY3RzdGFydCddLAogIFVQOiBbJ3NlbGVjdGVuZCddCn07Cgp2YXIgQ0FOVkFTX0hPVkVSX0NMQVNTID0gJ2EtbW91c2UtY3Vyc29yLWhvdmVyJzsKCi8qKgogKiBDdXJzb3IgY29tcG9uZW50LiBBcHBsaWVzIHRoZSByYXljYXN0ZXIgY29tcG9uZW50IHNwZWNpZmljYWxseSBmb3Igc3RhcnRpbmcgdGhlIHJheWNhc3RlcgogKiBmcm9tIHRoZSBjYW1lcmEgYW5kIHBvaW50aW5nIGZyb20gY2FtZXJhJ3MgZmFjaW5nIGRpcmVjdGlvbiwgYW5kIHRoZW4gb25seSByZXR1cm5pbmcgdGhlCiAqIGNsb3Nlc3QgaW50ZXJzZWN0aW9uLiBDdXJzb3IgY2FuIGJlIGZpbmUtdHVuZWQgYnkgc2V0dGluZyByYXljYXN0ZXIgcHJvcGVydGllcy4KICoKICogQG1lbWJlciB7b2JqZWN0fSBmdXNlVGltZW91dCAtIFRpbWVvdXQgdG8gdHJpZ2dlciBmdXNlLWNsaWNrLgogKiBAbWVtYmVyIHtFbGVtZW50fSBjdXJzb3JEb3duRWwgLSBFbnRpdHkgdGhhdCB3YXMgbGFzdCBtb3VzZWRvd25lZCBkdXJpbmcgY3VycmVudCBjbGljay4KICogQG1lbWJlciB7b2JqZWN0fSBpbnRlcnNlY3Rpb24gLSBBdHRyaWJ1dGVzIG9mIHRoZSBjdXJyZW50IGludGVyc2VjdGlvbiBldmVudCwgaW5jbHVkaW5nCiAqICAgICAgICAgM0QtIGFuZCAyRC1zcGFjZSBjb29yZGluYXRlcy4gU2VlOiBodHRwOi8vdGhyZWVqcy5vcmcvZG9jcy9hcGkvY29yZS9SYXljYXN0ZXIuaHRtbAogKiBAbWVtYmVyIHtFbGVtZW50fSBpbnRlcnNlY3RlZEVsIC0gQ3VycmVudGx5LWludGVyc2VjdGVkIGVudGl0eS4gVXNlZCB0byBrZWVwIHRyYWNrIHRvCiAqICAgICAgICAgZW1pdCBldmVudHMgd2hlbiB1bmludGVyc2VjdGluZy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdjdXJzb3InLCB7CiAgZGVwZW5kZW5jaWVzOiBbJ3JheWNhc3RlciddLAoKICBzY2hlbWE6IHsKICAgIGRvd25FdmVudHM6IHtkZWZhdWx0OiBbXX0sCiAgICBmdXNlOiB7ZGVmYXVsdDogdXRpbHMuZGV2aWNlLmlzTW9iaWxlKCl9LAogICAgZnVzZVRpbWVvdXQ6IHtkZWZhdWx0OiAxNTAwLCBtaW46IDB9LAogICAgbW91c2VDdXJzb3JTdHlsZXNFbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICB1cEV2ZW50czoge2RlZmF1bHQ6IFtdfSwKICAgIHJheU9yaWdpbjoge2RlZmF1bHQ6ICdlbnRpdHknLCBvbmVPZjogWydtb3VzZScsICdlbnRpdHknXX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgdGhpcy5mdXNlVGltZW91dCA9IHVuZGVmaW5lZDsKICAgIHRoaXMuY3Vyc29yRG93bkVsID0gbnVsbDsKICAgIHRoaXMuaW50ZXJzZWN0ZWRFbCA9IG51bGw7CiAgICB0aGlzLmNhbnZhc0JvdW5kcyA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICB0aGlzLmlzQ3Vyc29yRG93biA9IGZhbHNlOwoKICAgIC8vIERlYm91bmNlLgogICAgdGhpcy51cGRhdGVDYW52YXNCb3VuZHMgPSB1dGlscy5kZWJvdW5jZShmdW5jdGlvbiB1cGRhdGVDYW52YXNCb3VuZHMgKCkgewogICAgICBzZWxmLmNhbnZhc0JvdW5kcyA9IHNlbGYuZWwuc2NlbmVFbC5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICB9LCA1MDApOwoKICAgIHRoaXMuZXZlbnREZXRhaWwgPSB7fTsKICAgIHRoaXMuaW50ZXJzZWN0ZWRFdmVudERldGFpbCA9IHtjdXJzb3JFbDogdGhpcy5lbH07CgogICAgLy8gQmluZCBtZXRob2RzLgogICAgdGhpcy5vbkN1cnNvckRvd24gPSBiaW5kKHRoaXMub25DdXJzb3JEb3duLCB0aGlzKTsKICAgIHRoaXMub25DdXJzb3JVcCA9IGJpbmQodGhpcy5vbkN1cnNvclVwLCB0aGlzKTsKICAgIHRoaXMub25JbnRlcnNlY3Rpb24gPSBiaW5kKHRoaXMub25JbnRlcnNlY3Rpb24sIHRoaXMpOwogICAgdGhpcy5vbkludGVyc2VjdGlvbkNsZWFyZWQgPSBiaW5kKHRoaXMub25JbnRlcnNlY3Rpb25DbGVhcmVkLCB0aGlzKTsKICAgIHRoaXMub25Nb3VzZU1vdmUgPSBiaW5kKHRoaXMub25Nb3VzZU1vdmUsIHRoaXMpOwogICAgdGhpcy5vbkVudGVyVlIgPSBiaW5kKHRoaXMub25FbnRlclZSLCB0aGlzKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uIChvbGREYXRhKSB7CiAgICBpZiAodGhpcy5kYXRhLnJheU9yaWdpbiA9PT0gb2xkRGF0YS5yYXlPcmlnaW4pIHsgcmV0dXJuOyB9CiAgICB0aGlzLnVwZGF0ZU1vdXNlRXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVTdGF0ZShTVEFURVMuSE9WRVJJTkcpOwogICAgZWwucmVtb3ZlU3RhdGUoU1RBVEVTLkZVU0lORyk7CiAgICBjbGVhclRpbWVvdXQodGhpcy5mdXNlVGltZW91dCk7CiAgICBpZiAodGhpcy5pbnRlcnNlY3RlZEVsKSB7IHRoaXMuaW50ZXJzZWN0ZWRFbC5yZW1vdmVTdGF0ZShTVEFURVMuSE9WRVJFRCk7IH0KICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICBhZGRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGNhbnZhczsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBmdW5jdGlvbiBhZGRDYW52YXNMaXN0ZW5lcnMgKCkgewogICAgICBjYW52YXMgPSBlbC5zY2VuZUVsLmNhbnZhczsKICAgICAgaWYgKGRhdGEuZG93bkV2ZW50cy5sZW5ndGggfHwgZGF0YS51cEV2ZW50cy5sZW5ndGgpIHsgcmV0dXJuOyB9CiAgICAgIENBTlZBU19FVkVOVFMuRE9XTi5mb3JFYWNoKGZ1bmN0aW9uIChkb3duRXZlbnQpIHsKICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihkb3duRXZlbnQsIHNlbGYub25DdXJzb3JEb3duKTsKICAgICAgfSk7CiAgICAgIENBTlZBU19FVkVOVFMuVVAuZm9yRWFjaChmdW5jdGlvbiAodXBFdmVudCkgewogICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKHVwRXZlbnQsIHNlbGYub25DdXJzb3JVcCk7CiAgICAgIH0pOwogICAgfQoKICAgIGNhbnZhcyA9IGVsLnNjZW5lRWwuY2FudmFzOwogICAgaWYgKGNhbnZhcykgewogICAgICBhZGRDYW52YXNMaXN0ZW5lcnMoKTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigncmVuZGVyLXRhcmdldC1sb2FkZWQnLCBhZGRDYW52YXNMaXN0ZW5lcnMpOwogICAgfQoKICAgIGRhdGEuZG93bkV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb3duRXZlbnQpIHsKICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihkb3duRXZlbnQsIHNlbGYub25DdXJzb3JEb3duKTsKICAgIH0pOwogICAgZGF0YS51cEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh1cEV2ZW50KSB7CiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodXBFdmVudCwgc2VsZi5vbkN1cnNvclVwKTsKICAgIH0pOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigncmF5Y2FzdGVyLWludGVyc2VjdGlvbicsIHRoaXMub25JbnRlcnNlY3Rpb24pOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigncmF5Y2FzdGVyLWludGVyc2VjdGlvbi1jbGVhcmVkJywgdGhpcy5vbkludGVyc2VjdGlvbkNsZWFyZWQpOwoKICAgIGVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigncmVuZGVyZXJyZXNpemUnLCB0aGlzLnVwZGF0ZUNhbnZhc0JvdW5kcyk7CiAgICBlbC5zY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2VudGVyLXZyJywgdGhpcy5vbkVudGVyVlIpOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlQ2FudmFzQm91bmRzKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnVwZGF0ZUNhbnZhc0JvdW5kcyk7CgogICAgdGhpcy51cGRhdGVNb3VzZUV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjYW52YXM7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgY2FudmFzID0gZWwuc2NlbmVFbC5jYW52YXM7CiAgICBpZiAoY2FudmFzICYmICFkYXRhLmRvd25FdmVudHMubGVuZ3RoICYmICFkYXRhLnVwRXZlbnRzLmxlbmd0aCkgewogICAgICBDQU5WQVNfRVZFTlRTLkRPV04uZm9yRWFjaChmdW5jdGlvbiAoZG93bkV2ZW50KSB7CiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZG93bkV2ZW50LCBzZWxmLm9uQ3Vyc29yRG93bik7CiAgICAgIH0pOwogICAgICBDQU5WQVNfRVZFTlRTLlVQLmZvckVhY2goZnVuY3Rpb24gKHVwRXZlbnQpIHsKICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih1cEV2ZW50LCBzZWxmLm9uQ3Vyc29yVXApOwogICAgICB9KTsKICAgIH0KCiAgICBkYXRhLmRvd25FdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG93bkV2ZW50KSB7CiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZG93bkV2ZW50LCBzZWxmLm9uQ3Vyc29yRG93bik7CiAgICB9KTsKICAgIGRhdGEudXBFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAodXBFdmVudCkgewogICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHVwRXZlbnQsIHNlbGYub25DdXJzb3JVcCk7CiAgICB9KTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JheWNhc3Rlci1pbnRlcnNlY3Rpb24nLCB0aGlzLm9uSW50ZXJzZWN0aW9uKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JheWNhc3Rlci1pbnRlcnNlY3Rpb24tY2xlYXJlZCcsIHRoaXMub25JbnRlcnNlY3Rpb25DbGVhcmVkKTsKICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTsKICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbk1vdXNlTW92ZSk7CiAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7CgogICAgZWwuc2NlbmVFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdyZW5kZXJlcnJlc2l6ZScsIHRoaXMudXBkYXRlQ2FudmFzQm91bmRzKTsKICAgIGVsLnNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW50ZXItdnInLCB0aGlzLm9uRW50ZXJWUik7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy51cGRhdGVDYW52YXNCb3VuZHMpOwogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMudXBkYXRlQ2FudmFzQm91bmRzKTsKICB9LAoKICB1cGRhdGVNb3VzZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY2FudmFzOwogICAgdmFyIGVsID0gdGhpcy5lbDsKCiAgICBjYW52YXMgPSBlbC5zY2VuZUVsLmNhbnZhczsKICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTsKICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgncmF5Y2FzdGVyJywgJ3VzZVdvcmxkQ29vcmRpbmF0ZXMnLCBmYWxzZSk7CiAgICBpZiAodGhpcy5kYXRhLnJheU9yaWdpbiAhPT0gJ21vdXNlJykgeyByZXR1cm47IH0KICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlLCBmYWxzZSk7CiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSwgZmFsc2UpOwogICAgZWwuc2V0QXR0cmlidXRlKCdyYXljYXN0ZXInLCAndXNlV29ybGRDb29yZGluYXRlcycsIHRydWUpOwogICAgdGhpcy51cGRhdGVDYW52YXNCb3VuZHMoKTsKICB9LAoKICBvbk1vdXNlTW92ZTogKGZ1bmN0aW9uICgpIHsKICAgIHZhciBkaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpOwogICAgdmFyIG1vdXNlID0gbmV3IFRIUkVFLlZlY3RvcjIoKTsKICAgIHZhciBvcmlnaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpOwogICAgdmFyIHJheUNhc3RlckNvbmZpZyA9IHtvcmlnaW46IG9yaWdpbiwgZGlyZWN0aW9uOiBkaXJlY3Rpb259OwoKICAgIHJldHVybiBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgIHZhciBib3VuZHMgPSB0aGlzLmNhbnZhc0JvdW5kczsKICAgICAgdmFyIGNhbWVyYSA9IHRoaXMuZWwuc2NlbmVFbC5jYW1lcmE7CiAgICAgIHZhciBsZWZ0OwogICAgICB2YXIgcG9pbnQ7CiAgICAgIHZhciB0b3A7CgogICAgICBjYW1lcmEucGFyZW50LnVwZGF0ZU1hdHJpeFdvcmxkKCk7CgogICAgICAvLyBDYWxjdWxhdGUgbW91c2UgcG9zaXRpb24gYmFzZWQgb24gdGhlIGNhbnZhcyBlbGVtZW50CiAgICAgIGlmIChldnQudHlwZSA9PT0gJ3RvdWNobW92ZScgfHwgZXZ0LnR5cGUgPT09ICd0b3VjaHN0YXJ0JykgewogICAgICAgIC8vIFRyYWNrIHRoZSBmaXJzdCB0b3VjaCBmb3Igc2ltcGxpY2l0eS4KICAgICAgICBwb2ludCA9IGV2dC50b3VjaGVzLml0ZW0oMCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcG9pbnQgPSBldnQ7CiAgICAgIH0KCiAgICAgIGxlZnQgPSBwb2ludC5jbGllbnRYIC0gYm91bmRzLmxlZnQ7CiAgICAgIHRvcCA9IHBvaW50LmNsaWVudFkgLSBib3VuZHMudG9wOwogICAgICBtb3VzZS54ID0gKGxlZnQgLyBib3VuZHMud2lkdGgpICogMiAtIDE7CiAgICAgIG1vdXNlLnkgPSAtKHRvcCAvIGJvdW5kcy5oZWlnaHQpICogMiArIDE7CgogICAgICBvcmlnaW4uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGNhbWVyYS5tYXRyaXhXb3JsZCk7CiAgICAgIGRpcmVjdGlvbi5zZXQobW91c2UueCwgbW91c2UueSwgMC41KS51bnByb2plY3QoY2FtZXJhKS5zdWIob3JpZ2luKS5ub3JtYWxpemUoKTsKICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3JheWNhc3RlcicsIHJheUNhc3RlckNvbmZpZyk7CiAgICAgIGlmIChldnQudHlwZSA9PT0gJ3RvdWNobW92ZScpIHsgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH0KICAgIH07CiAgfSkoKSwKCiAgLyoqCiAgICogVHJpZ2dlciBtb3VzZWRvd24gYW5kIGtlZXAgdHJhY2sgb2YgdGhlIG1vdXNlZG93bmVkIGVudGl0eS4KICAgKi8KICBvbkN1cnNvckRvd246IGZ1bmN0aW9uIChldnQpIHsKICAgIHRoaXMuaXNDdXJzb3JEb3duID0gdHJ1ZTsKICAgIC8vIFJheWNhc3QgYWdhaW4gZm9yIHRvdWNoLgogICAgaWYgKHRoaXMuZGF0YS5yYXlPcmlnaW4gPT09ICdtb3VzZScgJiYgZXZ0LnR5cGUgPT09ICd0b3VjaHN0YXJ0JykgewogICAgICB0aGlzLm9uTW91c2VNb3ZlKGV2dCk7CiAgICAgIHRoaXMuZWwuY29tcG9uZW50cy5yYXljYXN0ZXIuY2hlY2tJbnRlcnNlY3Rpb25zKCk7CiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgfQoKICAgIHRoaXMudHdvV2F5RW1pdChFVkVOVFMuTU9VU0VET1dOKTsKICAgIHRoaXMuY3Vyc29yRG93bkVsID0gdGhpcy5pbnRlcnNlY3RlZEVsOwogIH0sCgogIC8qKgogICAqIFRyaWdnZXIgbW91c2V1cCBpZjoKICAgKiAtIE5vdCBmdXNpbmcgKG1vYmlsZSBoYXMgbm8gbW91c2UpLgogICAqIC0gQ3VycmVudGx5IGludGVyc2VjdGluZyBhbiBlbnRpdHkuCiAgICogLSBDdXJyZW50bHktaW50ZXJzZWN0ZWQgZW50aXR5IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgd2hlbiBtb3VzZWRvd24gd2FzIHRyaWdnZXJlZCwKICAgKiAgIGluIGNhc2UgdXNlciBtb3VzZWRvd25lZCBvbmUgZW50aXR5LCBkcmFnZ2VkIHRvIGFub3RoZXIsIGFuZCBtb3VzZXVwcGVkLgogICAqLwogIG9uQ3Vyc29yVXA6IGZ1bmN0aW9uIChldnQpIHsKICAgIGlmICghdGhpcy5pc0N1cnNvckRvd24pIHsgcmV0dXJuOyB9CgogICAgdGhpcy5pc0N1cnNvckRvd24gPSBmYWxzZTsKCiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHRoaXMudHdvV2F5RW1pdChFVkVOVFMuTU9VU0VVUCk7CgogICAgLy8gSWYgaW50ZXJzZWN0ZWQgZW50aXR5IGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBjdXJzb3JEb3duLCBzdGlsbCBlbWl0IG1vdXNlVXAgb24gdGhlCiAgICAvLyBwcmV2aW91c2x5IGN1cnNvclVwIGVudGl0eS4KICAgIGlmICh0aGlzLmN1cnNvckRvd25FbCAmJiB0aGlzLmN1cnNvckRvd25FbCAhPT0gdGhpcy5pbnRlcnNlY3RlZEVsKSB7CiAgICAgIHRoaXMuaW50ZXJzZWN0ZWRFdmVudERldGFpbC5pbnRlcnNlY3Rpb24gPSBudWxsOwogICAgICB0aGlzLmN1cnNvckRvd25FbC5lbWl0KEVWRU5UUy5NT1VTRVVQLCB0aGlzLmludGVyc2VjdGVkRXZlbnREZXRhaWwpOwogICAgfQoKICAgIGlmICgoIWRhdGEuZnVzZSB8fCBkYXRhLnJheU9yaWdpbiA9PT0gJ21vdXNlJykgJiYKICAgICAgICB0aGlzLmludGVyc2VjdGVkRWwgJiYgdGhpcy5jdXJzb3JEb3duRWwgPT09IHRoaXMuaW50ZXJzZWN0ZWRFbCkgewogICAgICB0aGlzLnR3b1dheUVtaXQoRVZFTlRTLkNMSUNLKTsKICAgIH0KCiAgICB0aGlzLmN1cnNvckRvd25FbCA9IG51bGw7CiAgICBpZiAoZXZ0LnR5cGUgPT09ICd0b3VjaGVuZCcpIHsgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH0KICB9LAoKICAvKioKICAgKiBIYW5kbGUgaW50ZXJzZWN0aW9uLgogICAqLwogIG9uSW50ZXJzZWN0aW9uOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgY3VycmVudEludGVyc2VjdGlvbjsKICAgIHZhciBjdXJzb3JFbCA9IHRoaXMuZWw7CiAgICB2YXIgaW5kZXg7CiAgICB2YXIgaW50ZXJzZWN0ZWRFbDsKICAgIHZhciBpbnRlcnNlY3Rpb247CgogICAgLy8gU2VsZWN0IGNsb3Nlc3Qgb2JqZWN0LCBleGNsdWRpbmcgdGhlIGN1cnNvci4KICAgIGluZGV4ID0gZXZ0LmRldGFpbC5lbHNbMF0gPT09IGN1cnNvckVsID8gMSA6IDA7CiAgICBpbnRlcnNlY3Rpb24gPSBldnQuZGV0YWlsLmludGVyc2VjdGlvbnNbaW5kZXhdOwogICAgaW50ZXJzZWN0ZWRFbCA9IGV2dC5kZXRhaWwuZWxzW2luZGV4XTsKCiAgICAvLyBJZiBjdXJzb3IgaXMgdGhlIG9ubHkgaW50ZXJzZWN0ZWQgb2JqZWN0LCBpZ25vcmUgdGhlIGV2ZW50LgogICAgaWYgKCFpbnRlcnNlY3RlZEVsKSB7IHJldHVybjsgfQoKICAgIC8vIEFscmVhZHkgaW50ZXJzZWN0aW5nIHRoaXMgZW50aXR5LgogICAgaWYgKHRoaXMuaW50ZXJzZWN0ZWRFbCA9PT0gaW50ZXJzZWN0ZWRFbCkgeyByZXR1cm47IH0KCiAgICAvLyBJZ25vcmUgZXZlbnRzIGZ1cnRoZXIgYXdheSB0aGFuIGFjdGl2ZSBpbnRlcnNlY3Rpb24uCiAgICBpZiAodGhpcy5pbnRlcnNlY3RlZEVsKSB7CiAgICAgIGN1cnJlbnRJbnRlcnNlY3Rpb24gPSB0aGlzLmVsLmNvbXBvbmVudHMucmF5Y2FzdGVyLmdldEludGVyc2VjdGlvbih0aGlzLmludGVyc2VjdGVkRWwpOwogICAgICBpZiAoY3VycmVudEludGVyc2VjdGlvbiAmJiBjdXJyZW50SW50ZXJzZWN0aW9uLmRpc3RhbmNlIDw9IGludGVyc2VjdGlvbi5kaXN0YW5jZSkgeyByZXR1cm47IH0KICAgIH0KCiAgICAvLyBVbnNldCBjdXJyZW50IGludGVyc2VjdGlvbi4KICAgIHRoaXMuY2xlYXJDdXJyZW50SW50ZXJzZWN0aW9uKHRydWUpOwoKICAgIHRoaXMuc2V0SW50ZXJzZWN0aW9uKGludGVyc2VjdGVkRWwsIGludGVyc2VjdGlvbik7CiAgfSwKCiAgLyoqCiAgICogSGFuZGxlIGludGVyc2VjdGlvbiBjbGVhcmVkLgogICAqLwogIG9uSW50ZXJzZWN0aW9uQ2xlYXJlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGNsZWFyZWRFbHMgPSBldnQuZGV0YWlsLmNsZWFyZWRFbHM7CiAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBpbnRlcnNlY3Rpb24gaGFzIGVuZGVkCiAgICBpZiAoY2xlYXJlZEVscy5pbmRleE9mKHRoaXMuaW50ZXJzZWN0ZWRFbCkgPT09IC0xKSB7IHJldHVybjsgfQogICAgdGhpcy5jbGVhckN1cnJlbnRJbnRlcnNlY3Rpb24oKTsKICB9LAoKICBvbkVudGVyVlI6IGZ1bmN0aW9uICgpIHsKICAgIHZhciB4clNlc3Npb24gPSB0aGlzLmVsLnhyU2Vzc2lvbjsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmICgheHJTZXNzaW9uKSB7IHJldHVybjsgfQogICAgV0VCWFJfRVZFTlRTLkRPV04uZm9yRWFjaChmdW5jdGlvbiAoZG93bkV2ZW50KSB7CiAgICAgIHhyU2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKGRvd25FdmVudCwgc2VsZi5vbkN1cnNvckRvd24pOwogICAgfSk7CiAgICBXRUJYUl9FVkVOVFMuVVAuZm9yRWFjaChmdW5jdGlvbiAodXBFdmVudCkgewogICAgICB4clNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcih1cEV2ZW50LCBzZWxmLm9uQ3Vyc29yVXApOwogICAgfSk7CiAgfSwKCiAgc2V0SW50ZXJzZWN0aW9uOiBmdW5jdGlvbiAoaW50ZXJzZWN0ZWRFbCwgaW50ZXJzZWN0aW9uKSB7CiAgICB2YXIgY3Vyc29yRWwgPSB0aGlzLmVsOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgLy8gQWxyZWFkeSBpbnRlcnNlY3RpbmcuCiAgICBpZiAodGhpcy5pbnRlcnNlY3RlZEVsID09PSBpbnRlcnNlY3RlZEVsKSB7IHJldHVybjsgfQoKICAgIC8vIFNldCBuZXcgaW50ZXJzZWN0aW9uLgogICAgdGhpcy5pbnRlcnNlY3RlZEVsID0gaW50ZXJzZWN0ZWRFbDsKCiAgICAvLyBIb3ZlcmluZy4KICAgIGN1cnNvckVsLmFkZFN0YXRlKFNUQVRFUy5IT1ZFUklORyk7CiAgICBpbnRlcnNlY3RlZEVsLmFkZFN0YXRlKFNUQVRFUy5IT1ZFUkVEKTsKICAgIHRoaXMudHdvV2F5RW1pdChFVkVOVFMuTU9VU0VFTlRFUik7CgogICAgaWYgKHRoaXMuZGF0YS5tb3VzZUN1cnNvclN0eWxlc0VuYWJsZWQgJiYgdGhpcy5kYXRhLnJheU9yaWdpbiA9PT0gJ21vdXNlJykgewogICAgICB0aGlzLmVsLnNjZW5lRWwuY2FudmFzLmNsYXNzTGlzdC5hZGQoQ0FOVkFTX0hPVkVSX0NMQVNTKTsKICAgIH0KCiAgICAvLyBCZWdpbiBmdXNlIGlmIG5lY2Vzc2FyeS4KICAgIGlmIChkYXRhLmZ1c2VUaW1lb3V0ID09PSAwIHx8ICFkYXRhLmZ1c2UpIHsgcmV0dXJuOyB9CiAgICBjdXJzb3JFbC5hZGRTdGF0ZShTVEFURVMuRlVTSU5HKTsKICAgIHRoaXMudHdvV2F5RW1pdChFVkVOVFMuRlVTSU5HKTsKICAgIHRoaXMuZnVzZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIGZ1c2UgKCkgewogICAgICBjdXJzb3JFbC5yZW1vdmVTdGF0ZShTVEFURVMuRlVTSU5HKTsKICAgICAgc2VsZi50d29XYXlFbWl0KEVWRU5UUy5DTElDSyk7CiAgICB9LCBkYXRhLmZ1c2VUaW1lb3V0KTsKICB9LAoKICBjbGVhckN1cnJlbnRJbnRlcnNlY3Rpb246IGZ1bmN0aW9uIChpZ25vcmVSZW1haW5pbmcpIHsKICAgIHZhciBpbmRleDsKICAgIHZhciBpbnRlcnNlY3Rpb247CiAgICB2YXIgaW50ZXJzZWN0aW9uczsKICAgIHZhciBjdXJzb3JFbCA9IHRoaXMuZWw7CgogICAgLy8gTm90aGluZyB0byBiZSBjbGVhcmVkLgogICAgaWYgKCF0aGlzLmludGVyc2VjdGVkRWwpIHsgcmV0dXJuOyB9CgogICAgLy8gTm8gbG9uZ2VyIGhvdmVyaW5nIChvciBmdXNpbmcpLgogICAgdGhpcy5pbnRlcnNlY3RlZEVsLnJlbW92ZVN0YXRlKFNUQVRFUy5IT1ZFUkVEKTsKICAgIGN1cnNvckVsLnJlbW92ZVN0YXRlKFNUQVRFUy5IT1ZFUklORyk7CiAgICBjdXJzb3JFbC5yZW1vdmVTdGF0ZShTVEFURVMuRlVTSU5HKTsKICAgIHRoaXMudHdvV2F5RW1pdChFVkVOVFMuTU9VU0VMRUFWRSk7CgogICAgaWYgKHRoaXMuZGF0YS5tb3VzZUN1cnNvclN0eWxlc0VuYWJsZWQgJiYgdGhpcy5kYXRhLnJheU9yaWdpbiA9PT0gJ21vdXNlJykgewogICAgICB0aGlzLmVsLnNjZW5lRWwuY2FudmFzLmNsYXNzTGlzdC5yZW1vdmUoQ0FOVkFTX0hPVkVSX0NMQVNTKTsKICAgIH0KCiAgICAvLyBVbnNldCBpbnRlcnNlY3RlZCBlbnRpdHkgKGFmdGVyIGVtaXR0aW5nIHRoZSBldmVudCkuCiAgICB0aGlzLmludGVyc2VjdGVkRWwgPSBudWxsOwoKICAgIC8vIENsZWFyIGZ1c2VUaW1lb3V0LgogICAgY2xlYXJUaW1lb3V0KHRoaXMuZnVzZVRpbWVvdXQpOwoKICAgIC8vIFNldCBpbnRlcnNlY3Rpb24gdG8gYW5vdGhlciByYXljYXN0ZWQgZWxlbWVudCBpZiBhbnkuCiAgICBpZiAoaWdub3JlUmVtYWluaW5nID09PSB0cnVlKSB7IHJldHVybjsgfQogICAgaW50ZXJzZWN0aW9ucyA9IHRoaXMuZWwuY29tcG9uZW50cy5yYXljYXN0ZXIuaW50ZXJzZWN0aW9uczsKICAgIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH0KICAgIC8vIEV4Y2x1ZGUgdGhlIGN1cnNvci4KICAgIGluZGV4ID0gaW50ZXJzZWN0aW9uc1swXS5vYmplY3QuZWwgPT09IGN1cnNvckVsID8gMSA6IDA7CiAgICBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25zW2luZGV4XTsKICAgIGlmICghaW50ZXJzZWN0aW9uKSB7IHJldHVybjsgfQogICAgdGhpcy5zZXRJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9uLm9iamVjdC5lbCwgaW50ZXJzZWN0aW9uKTsKICB9LAoKICAvKioKICAgKiBIZWxwZXIgdG8gZW1pdCBvbiBib3RoIHRoZSBjdXJzb3IgYW5kIHRoZSBpbnRlcnNlY3RlZCBlbnRpdHkgKGlmIGV4aXN0cykuCiAgICovCiAgdHdvV2F5RW1pdDogZnVuY3Rpb24gKGV2dE5hbWUpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgaW50ZXJzZWN0ZWRFbCA9IHRoaXMuaW50ZXJzZWN0ZWRFbDsKICAgIHZhciBpbnRlcnNlY3Rpb247CgogICAgaW50ZXJzZWN0aW9uID0gdGhpcy5lbC5jb21wb25lbnRzLnJheWNhc3Rlci5nZXRJbnRlcnNlY3Rpb24oaW50ZXJzZWN0ZWRFbCk7CiAgICB0aGlzLmV2ZW50RGV0YWlsLmludGVyc2VjdGVkRWwgPSBpbnRlcnNlY3RlZEVsOwogICAgdGhpcy5ldmVudERldGFpbC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247CiAgICBlbC5lbWl0KGV2dE5hbWUsIHRoaXMuZXZlbnREZXRhaWwpOwoKICAgIGlmICghaW50ZXJzZWN0ZWRFbCkgeyByZXR1cm47IH0KCiAgICB0aGlzLmludGVyc2VjdGVkRXZlbnREZXRhaWwuaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uOwogICAgaW50ZXJzZWN0ZWRFbC5lbWl0KGV2dE5hbWUsIHRoaXMuaW50ZXJzZWN0ZWRFdmVudERldGFpbCk7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi91dGlscy8iOjE4Mn1dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7Cgp2YXIgREFZRFJFQU1fQ09OVFJPTExFUl9NT0RFTF9CQVNFX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvZ29vZ2xlLyc7CnZhciBEQVlEUkVBTV9DT05UUk9MTEVSX01PREVMX09CSl9VUkwgPSBEQVlEUkVBTV9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ3ZyX2NvbnRyb2xsZXJfZGF5ZHJlYW0ub2JqJzsKdmFyIERBWURSRUFNX0NPTlRST0xMRVJfTU9ERUxfT0JKX01UTCA9IERBWURSRUFNX0NPTlRST0xMRVJfTU9ERUxfQkFTRV9VUkwgKyAndnJfY29udHJvbGxlcl9kYXlkcmVhbS5tdGwnOwoKdmFyIGlzV2ViWFJBdmFpbGFibGUgPSBfZGVyZXFfKCcuLi91dGlscy8nKS5kZXZpY2UuaXNXZWJYUkF2YWlsYWJsZTsKCnZhciBHQU1FUEFEX0lEX1dFQlhSID0gJ2dvb2dsZS1kYXlkcmVhbSc7CnZhciBHQU1FUEFEX0lEX1dFQlZSID0gJ0RheWRyZWFtIENvbnRyb2xsZXInOwoKdmFyIEdBTUVQQURfSURfUFJFRklYID0gaXNXZWJYUkF2YWlsYWJsZSA/IEdBTUVQQURfSURfV0VCWFIgOiBHQU1FUEFEX0lEX1dFQlZSOwoKLyoqCiAqIERheWRyZWFtIGNvbnRyb2xzLgogKiBJbnRlcmZhY2Ugd2l0aCBEYXlkcmVhbSBjb250cm9sbGVyIGFuZCBtYXAgR2FtZXBhZCBldmVudHMgdG8KICogY29udHJvbGxlciBidXR0b25zOiB0cmFja3BhZCwgbWVudSwgc3lzdGVtCiAqIExvYWQgYSBjb250cm9sbGVyIG1vZGVsIGFuZCBoaWdobGlnaHQgdGhlIHByZXNzZWQgYnV0dG9ucy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdkYXlkcmVhbS1jb250cm9scycsIHsKICBzY2hlbWE6IHsKICAgIGhhbmQ6IHtkZWZhdWx0OiAnJ30sICAvLyBUaGlzIGluZm9ybXMgdGhlIGRlZ2VuZXJhdGUgYXJtIG1vZGVsLgogICAgYnV0dG9uQ29sb3I6IHt0eXBlOiAnY29sb3InLCBkZWZhdWx0OiAnIzAwMDAwMCd9LAogICAgYnV0dG9uVG91Y2hlZENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyM3Nzc3NzcnfSwKICAgIGJ1dHRvbkhpZ2hsaWdodENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyNGRkZGRkYnfSwKICAgIG1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBvcmllbnRhdGlvbk9mZnNldDoge3R5cGU6ICd2ZWMzJ30sCiAgICBhcm1Nb2RlbDoge2RlZmF1bHQ6IHRydWV9CiAgfSwKCiAgLyoqCiAgICogQnV0dG9uIElEczoKICAgKiAwIC0gdHJhY2twYWQKICAgKiAxIC0gbWVudSAobmV2ZXIgZGlzcGF0Y2hlZCBvbiB0aGlzIGxheWVyKQogICAqIDIgLSBzeXN0ZW0gKG5ldmVyIGRpc3BhdGNoZWQgb24gdGhpcyBsYXllcikKICAgKi8KICBtYXBwaW5nOiB7CiAgICBheGVzOiB7dHJhY2twYWQ6IFswLCAxXX0sCiAgICBidXR0b25zOiBbJ3RyYWNrcGFkJywgJ21lbnUnLCAnc3lzdGVtJ10KICB9LAoKICBiaW5kTWV0aG9kczogZnVuY3Rpb24gKCkgewogICAgdGhpcy5vbk1vZGVsTG9hZGVkID0gYmluZCh0aGlzLm9uTW9kZWxMb2FkZWQsIHRoaXMpOwogICAgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlID0gYmluZCh0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIHRoaXMpOwogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQgPSBiaW5kKHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50LCB0aGlzKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciA9IGJpbmQodGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyLCB0aGlzKTsKICAgIHRoaXMub25BeGlzTW92ZWQgPSBiaW5kKHRoaXMub25BeGlzTW92ZWQsIHRoaXMpOwogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMub25CdXR0b25DaGFuZ2VkID0gYmluZCh0aGlzLm9uQnV0dG9uQ2hhbmdlZCwgdGhpcyk7CiAgICB0aGlzLm9uQnV0dG9uRG93biA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAnZG93bicsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblVwID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd1cCcsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoc3RhcnQnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaEVuZCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndG91Y2hlbmQnLCBzZWxmKTsgfTsKICAgIHRoaXMuY29udHJvbGxlclByZXNlbnQgPSBmYWxzZTsKICAgIHRoaXMubGFzdENvbnRyb2xsZXJDaGVjayA9IDA7CiAgICB0aGlzLmJpbmRNZXRob2RzKCk7CiAgfSwKCiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb2RlbC1sb2FkZWQnLCB0aGlzLm9uTW9kZWxMb2FkZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb2RlbC1sb2FkZWQnLCB0aGlzLm9uTW9kZWxMb2FkZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogIH0sCgogIGNoZWNrSWZDb250cm9sbGVyUHJlc2VudDogZnVuY3Rpb24gKCkgewogICAgY2hlY2tDb250cm9sbGVyUHJlc2VudEFuZFNldHVwKHRoaXMsIEdBTUVQQURfSURfUFJFRklYLCB7aGFuZDogdGhpcy5kYXRhLmhhbmR9KTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIGluamVjdFRyYWNrZWRDb250cm9sczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzJywgewogICAgICBhcm1Nb2RlbDogZGF0YS5hcm1Nb2RlbCwKICAgICAgaGFuZDogZGF0YS5oYW5kLAogICAgICBpZFByZWZpeDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0CiAgICB9KTsKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ29iai1tb2RlbCcsIHsKICAgICAgb2JqOiBEQVlEUkVBTV9DT05UUk9MTEVSX01PREVMX09CSl9VUkwsCiAgICAgIG10bDogREFZRFJFQU1fQ09OVFJPTExFUl9NT0RFTF9PQkpfTVRMCiAgICB9KTsKICB9LAoKICBhZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgcmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5zY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgZmFsc2UpOwogIH0sCgogIG9uQ29udHJvbGxlcnNVcGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50KCk7CiAgfSwKCiAgb25Nb2RlbExvYWRlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGNvbnRyb2xsZXJPYmplY3QzRCA9IGV2dC5kZXRhaWwubW9kZWw7CiAgICB2YXIgYnV0dG9uTWVzaGVzOwogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICBidXR0b25NZXNoZXMgPSB0aGlzLmJ1dHRvbk1lc2hlcyA9IHt9OwogICAgYnV0dG9uTWVzaGVzLm1lbnUgPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdBcHBCdXR0b25fQXBwQnV0dG9uX0N5bGluZGVyLjAwNCcpOwogICAgYnV0dG9uTWVzaGVzLnN5c3RlbSA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ0hvbWVCdXR0b25fSG9tZUJ1dHRvbl9DeWxpbmRlci4wMDUnKTsKICAgIGJ1dHRvbk1lc2hlcy50cmFja3BhZCA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ1RvdWNoUGFkX1RvdWNoUGFkX0N5bGluZGVyLjAwMycpOwogICAgLy8gT2Zmc2V0IHBpdm90IHBvaW50LgogICAgY29udHJvbGxlck9iamVjdDNELnBvc2l0aW9uLnNldCgwLCAwLCAtMC4wNCk7CiAgfSwKCiAgb25BeGlzTW92ZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIGVtaXRJZkF4ZXNDaGFuZ2VkKHRoaXMsIHRoaXMubWFwcGluZy5heGVzLCBldnQpOwogIH0sCgogIG9uQnV0dG9uQ2hhbmdlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGJ1dHRvbiA9IHRoaXMubWFwcGluZy5idXR0b25zW2V2dC5kZXRhaWwuaWRdOwogICAgaWYgKCFidXR0b24pIHJldHVybjsKICAgIC8vIFBhc3MgYWxvbmcgY2hhbmdlZCBldmVudCB3aXRoIGJ1dHRvbiBzdGF0ZSwgdXNpbmcgYnV0dG9uIG1hcHBpbmcgZm9yIGNvbnZlbmllbmNlLgogICAgdGhpcy5lbC5lbWl0KGJ1dHRvbiArICdjaGFuZ2VkJywgZXZ0LmRldGFpbC5zdGF0ZSk7CiAgfSwKCiAgdXBkYXRlTW9kZWw6IGZ1bmN0aW9uIChidXR0b25OYW1lLCBldnROYW1lKSB7CiAgICBpZiAoIXRoaXMuZGF0YS5tb2RlbCkgeyByZXR1cm47IH0KICAgIHRoaXMudXBkYXRlQnV0dG9uTW9kZWwoYnV0dG9uTmFtZSwgZXZ0TmFtZSk7CiAgfSwKCiAgdXBkYXRlQnV0dG9uTW9kZWw6IGZ1bmN0aW9uIChidXR0b25OYW1lLCBzdGF0ZSkgewogICAgdmFyIGJ1dHRvbk1lc2hlcyA9IHRoaXMuYnV0dG9uTWVzaGVzOwogICAgaWYgKCFidXR0b25NZXNoZXMgfHwgIWJ1dHRvbk1lc2hlc1tidXR0b25OYW1lXSkgeyByZXR1cm47IH0KICAgIHZhciBjb2xvcjsKICAgIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgY2FzZSAnZG93bic6CiAgICAgICAgY29sb3IgPSB0aGlzLmRhdGEuYnV0dG9uSGlnaGxpZ2h0Q29sb3I7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOgogICAgICAgIGNvbG9yID0gdGhpcy5kYXRhLmJ1dHRvblRvdWNoZWRDb2xvcjsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBjb2xvciA9IHRoaXMuZGF0YS5idXR0b25Db2xvcjsKICAgIH0KICAgIGJ1dHRvbk1lc2hlc1tidXR0b25OYW1lXS5tYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vdXRpbHMvIjoxODIsIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sNTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKCnZhciB0cmFja2VkQ29udHJvbHNVdGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMnKTsKdmFyIGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cDsKdmFyIGVtaXRJZkF4ZXNDaGFuZ2VkID0gdHJhY2tlZENvbnRyb2xzVXRpbHMuZW1pdElmQXhlc0NoYW5nZWQ7CnZhciBvbkJ1dHRvbkV2ZW50ID0gdHJhY2tlZENvbnRyb2xzVXRpbHMub25CdXR0b25FdmVudDsKdmFyIGlzV2ViWFJBdmFpbGFibGUgPSBfZGVyZXFfKCcuLi91dGlscy8nKS5kZXZpY2UuaXNXZWJYUkF2YWlsYWJsZTsKCnZhciBHRUFSVlJfQ09OVFJPTExFUl9NT0RFTF9CQVNFX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvc2Ftc3VuZy8nOwp2YXIgR0VBUlZSX0NPTlRST0xMRVJfTU9ERUxfT0JKX1VSTCA9IEdFQVJWUl9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ2dlYXJfdnJfY29udHJvbGxlci5vYmonOwp2YXIgR0VBUlZSX0NPTlRST0xMRVJfTU9ERUxfT0JKX01UTCA9IEdFQVJWUl9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ2dlYXJfdnJfY29udHJvbGxlci5tdGwnOwoKdmFyIEdBTUVQQURfSURfV0VCWFIgPSAnc2Ftc3VuZy1nZWFydnInOwp2YXIgR0FNRVBBRF9JRF9XRUJWUiA9ICdHZWFyIFZSJzsKCi8vIFByZWZpeCBmb3IgR2VuMSBhbmQgR2VuMiBPY3VsdXMgVG91Y2ggQ29udHJvbGxlcnMuCnZhciBHQU1FUEFEX0lEX1BSRUZJWCA9IGlzV2ViWFJBdmFpbGFibGUgPyBHQU1FUEFEX0lEX1dFQlhSIDogR0FNRVBBRF9JRF9XRUJWUjsKCi8qKgogKiBCdXR0b24gaW5kaWNlczoKICogMCAtIHRyYWNrcGFkCiAqIDEgLSB0cmlnZ2VyCiAqCiAqIEF4aXM6CiAqIDAgLSB0cmFja3BhZCB4CiAqIDEgLSB0cmFja3BhZCB5CiAqLwp2YXIgSU5QVVRfTUFQUElOR19XRUJWUiA9IHsKICBheGVzOiB7dHJhY2twYWQ6IFswLCAxXX0sCiAgYnV0dG9uczogWyd0cmFja3BhZCcsICd0cmlnZ2VyJ10KfTsKCi8qKgogKiBCdXR0b24gaW5kaWNlczoKICogMCAtIHRyaWdnZXIKICogMSAtIG5vbmUKICogMiAtIHRvdWNocGFkCiAqIDMgLSBtZW51CiAqCiAqIEF4aXM6CiAqIDAgLSB0b3VjaHBhZCB4CiAqIDEgLSB0b3VjaHBhZCB5CiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2ltbWVyc2l2ZS13ZWIvd2VieHItaW5wdXQtcHJvZmlsZXMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcmVnaXN0cnkvcHJvZmlsZXMvb2N1bHVzL29jdWx1cy1nby5qc29uCiAqLwp2YXIgSU5QVVRfTUFQUElOR19XRUJYUiA9IHsKICBsZWZ0OiB7CiAgICBheGVzOiB7dG91Y2hwYWQ6IFswLCAxXX0sCiAgICBidXR0b25zOiBbJ3RyaWdnZXInLCAnbm9uZScsICd0b3VjaHBhZCcsICdtZW51J10KICB9LAogIHJpZ2h0OiB7CiAgICBheGVzOiB7dG91Y2hwYWQ6IFswLCAxXX0sCiAgICBidXR0b25zOiBbJ3RyaWdnZXInLCAnbm9uZScsICd0b3VjaHBhZCcsICdtZW51J10KICB9Cn07Cgp2YXIgSU5QVVRfTUFQUElORyA9IGlzV2ViWFJBdmFpbGFibGUgPyBJTlBVVF9NQVBQSU5HX1dFQlhSIDogSU5QVVRfTUFQUElOR19XRUJWUjsKCi8qKgogKiBHZWFyIFZSIGNvbnRyb2xzLgogKiBJbnRlcmZhY2Ugd2l0aCBHZWFyIFZSIGNvbnRyb2xsZXIgYW5kIG1hcCBHYW1lcGFkIGV2ZW50cyB0bwogKiBjb250cm9sbGVyIGJ1dHRvbnM6IHRyYWNrcGFkLCB0cmlnZ2VyCiAqIExvYWQgYSBjb250cm9sbGVyIG1vZGVsIGFuZCBoaWdobGlnaHQgdGhlIHByZXNzZWQgYnV0dG9ucy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdnZWFydnItY29udHJvbHMnLCB7CiAgc2NoZW1hOiB7CiAgICBoYW5kOiB7ZGVmYXVsdDogJyd9LCAgLy8gVGhpcyBpbmZvcm1zIHRoZSBkZWdlbmVyYXRlIGFybSBtb2RlbC4KICAgIGJ1dHRvbkNvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyMwMDAwMDAnfSwKICAgIGJ1dHRvblRvdWNoZWRDb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjNzc3Nzc3J30sCiAgICBidXR0b25IaWdobGlnaHRDb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjRkZGRkZGJ30sCiAgICBtb2RlbDoge2RlZmF1bHQ6IHRydWV9LAogICAgb3JpZW50YXRpb25PZmZzZXQ6IHt0eXBlOiAndmVjMyd9LAogICAgYXJtTW9kZWw6IHtkZWZhdWx0OiB0cnVlfQogIH0sCgogIC8qKgogICAqIEJ1dHRvbiBJRHM6CiAgICogMCAtIHRyYWNrcGFkCiAgICogMSAtIHRyaWdnZXIKICAgKi8KICBtYXBwaW5nOiBJTlBVVF9NQVBQSU5HLAoKICBiaW5kTWV0aG9kczogZnVuY3Rpb24gKCkgewogICAgdGhpcy5vbk1vZGVsTG9hZGVkID0gYmluZCh0aGlzLm9uTW9kZWxMb2FkZWQsIHRoaXMpOwogICAgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlID0gYmluZCh0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIHRoaXMpOwogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQgPSBiaW5kKHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50LCB0aGlzKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciA9IGJpbmQodGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyLCB0aGlzKTsKICAgIHRoaXMub25BeGlzTW92ZWQgPSBiaW5kKHRoaXMub25BeGlzTW92ZWQsIHRoaXMpOwogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMub25CdXR0b25DaGFuZ2VkID0gYmluZCh0aGlzLm9uQnV0dG9uQ2hhbmdlZCwgdGhpcyk7CiAgICB0aGlzLm9uQnV0dG9uRG93biA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAnZG93bicsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblVwID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd1cCcsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoc3RhcnQnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaEVuZCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndG91Y2hlbmQnLCBzZWxmKTsgfTsKICAgIHRoaXMuY29udHJvbGxlclByZXNlbnQgPSBmYWxzZTsKICAgIHRoaXMubGFzdENvbnRyb2xsZXJDaGVjayA9IDA7CiAgICB0aGlzLmJpbmRNZXRob2RzKCk7CiAgfSwKCiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb2RlbC1sb2FkZWQnLCB0aGlzLm9uTW9kZWxMb2FkZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb2RlbC1sb2FkZWQnLCB0aGlzLm9uTW9kZWxMb2FkZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogIH0sCgogIGNoZWNrSWZDb250cm9sbGVyUHJlc2VudDogZnVuY3Rpb24gKCkgewogICAgY2hlY2tDb250cm9sbGVyUHJlc2VudEFuZFNldHVwKHRoaXMsIEdBTUVQQURfSURfUFJFRklYLAogICAgICB0aGlzLmRhdGEuaGFuZCA/IHtoYW5kOiB0aGlzLmRhdGEuaGFuZH0gOiB7fSk7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICAgIHRoaXMuYWRkQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIoKTsKICB9LAoKICBpbmplY3RUcmFja2VkQ29udHJvbHM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIGVsLnNldEF0dHJpYnV0ZSgndHJhY2tlZC1jb250cm9scycsIHsKICAgICAgYXJtTW9kZWw6IGRhdGEuYXJtTW9kZWwsCiAgICAgIGhhbmQ6IGRhdGEuaGFuZCwKICAgICAgaWRQcmVmaXg6IEdBTUVQQURfSURfUFJFRklYLAogICAgICBpZDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0CiAgICB9KTsKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ29iai1tb2RlbCcsIHsKICAgICAgb2JqOiBHRUFSVlJfQ09OVFJPTExFUl9NT0RFTF9PQkpfVVJMLAogICAgICBtdGw6IEdFQVJWUl9DT05UUk9MTEVSX01PREVMX09CSl9NVEwKICAgIH0pOwogIH0sCgogIGFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICByZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgb25Db250cm9sbGVyc1VwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICB9LAoKICAvLyBObyBuZWVkIGZvciBvbkJ1dHRvbkNoYW5nZWQsIHNpbmNlIEdlYXIgVlIgY29udHJvbGxlciBoYXMgbm8gYW5hbG9nIGJ1dHRvbnMuCgogIG9uTW9kZWxMb2FkZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIHZhciBjb250cm9sbGVyT2JqZWN0M0QgPSBldnQuZGV0YWlsLm1vZGVsOwogICAgdmFyIGJ1dHRvbk1lc2hlczsKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgYnV0dG9uTWVzaGVzID0gdGhpcy5idXR0b25NZXNoZXMgPSB7fTsKICAgIGJ1dHRvbk1lc2hlcy50cmlnZ2VyID0gY29udHJvbGxlck9iamVjdDNELmNoaWxkcmVuWzJdOwogICAgYnV0dG9uTWVzaGVzLnRyYWNrcGFkID0gY29udHJvbGxlck9iamVjdDNELmNoaWxkcmVuWzFdOwogIH0sCgogIG9uQnV0dG9uQ2hhbmdlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGJ1dHRvbiA9IHRoaXMubWFwcGluZy5idXR0b25zW2V2dC5kZXRhaWwuaWRdOwogICAgaWYgKCFidXR0b24pIHJldHVybjsKICAgIC8vIFBhc3MgYWxvbmcgY2hhbmdlZCBldmVudCB3aXRoIGJ1dHRvbiBzdGF0ZSwgdXNpbmcgYnV0dG9uIG1hcHBpbmcgZm9yIGNvbnZlbmllbmNlLgogICAgdGhpcy5lbC5lbWl0KGJ1dHRvbiArICdjaGFuZ2VkJywgZXZ0LmRldGFpbC5zdGF0ZSk7CiAgfSwKCiAgb25BeGlzTW92ZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIGVtaXRJZkF4ZXNDaGFuZ2VkKHRoaXMsIHRoaXMubWFwcGluZy5heGVzLCBldnQpOwogIH0sCgogIHVwZGF0ZU1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgZXZ0TmFtZSkgewogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLnVwZGF0ZUJ1dHRvbk1vZGVsKGJ1dHRvbk5hbWUsIGV2dE5hbWUpOwogIH0sCgogIHVwZGF0ZUJ1dHRvbk1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgc3RhdGUpIHsKICAgIHZhciBidXR0b25NZXNoZXMgPSB0aGlzLmJ1dHRvbk1lc2hlczsKICAgIGlmICghYnV0dG9uTWVzaGVzIHx8ICFidXR0b25NZXNoZXNbYnV0dG9uTmFtZV0pIHsgcmV0dXJuOyB9CiAgICB2YXIgY29sb3I7CiAgICBzd2l0Y2ggKHN0YXRlKSB7CiAgICAgIGNhc2UgJ2Rvd24nOgogICAgICAgIGNvbG9yID0gdGhpcy5kYXRhLmJ1dHRvbkhpZ2hsaWdodENvbG9yOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICd0b3VjaHN0YXJ0JzoKICAgICAgICBjb2xvciA9IHRoaXMuZGF0YS5idXR0b25Ub3VjaGVkQ29sb3I7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgY29sb3IgPSB0aGlzLmRhdGEuYnV0dG9uQ29sb3I7CiAgICB9CiAgICBidXR0b25NZXNoZXNbYnV0dG9uTmFtZV0ubWF0ZXJpYWwuY29sb3Iuc2V0KGNvbG9yKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL3V0aWxzLyI6MTgyLCIuLi91dGlscy9iaW5kIjoxNzYsIi4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMiOjE5MH1dLDYwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7Cgp2YXIgR0FNRVBBRF9JRF9QUkVGSVggPSAnZ2VuZXJpYyc7CgovKioKICogQnV0dG9uIGluZGljZXM6CiAqIDAgLSB0cmlnZ2VyCiAqIDEgLSBzcXVlZXplCiAqIDIgLSB0b3VjaHBhZAogKiAzIC0gdGh1bWJzdGljawogKgogKiBBeGlzOgogKiAwIC0gdG91Y2hwYWQKICogMSAtIHRodW1ic3RpY2sKICoKICovCnZhciBJTlBVVF9NQVBQSU5HID0gewogIGF4ZXM6IHsKICAgIHRvdWNocGFkOiBbMCwgMV0sCiAgICB0aHVtYnN0aWNrOiBbMiwgM10KICB9LAogIGJ1dHRvbnM6IFsndHJpZ2dlcicsICdzcXVlZXplJywgJ3RvdWNocGFkJywgJ3RodW1ic3RpY2snXQp9OwoKLyoqCiAqIE9jdWx1cyBHbyBjb250cm9scy4KICogSW50ZXJmYWNlIHdpdGggT2N1bHVzIEdvIGNvbnRyb2xsZXIgYW5kIG1hcCBHYW1lcGFkIGV2ZW50cyB0bwogKiBjb250cm9sbGVyIGJ1dHRvbnM6IHRyYWNrcGFkLCB0cmlnZ2VyCiAqIExvYWQgYSBjb250cm9sbGVyIG1vZGVsIGFuZCBoaWdobGlnaHQgdGhlIHByZXNzZWQgYnV0dG9ucy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdnZW5lcmljLXRyYWNrZWQtY29udHJvbGxlci1jb250cm9scycsIHsKICBzY2hlbWE6IHsKICAgIGhhbmQ6IHtkZWZhdWx0OiAnJ30sICAvLyBUaGlzIGluZm9ybXMgdGhlIGRlZ2VuZXJhdGUgYXJtIG1vZGVsLgogICAgZGVmYXVsdE1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBkZWZhdWx0TW9kZWxDb2xvcjoge2RlZmF1bHQ6ICdncmF5J30sCiAgICBvcmllbnRhdGlvbk9mZnNldDoge3R5cGU6ICd2ZWMzJ30KICB9LAoKICAvKioKICAgKiBCdXR0b24gSURzOgogICAqIDAgLSB0cmFja3BhZAogICAqIDEgLSB0cmlnZ2VyCiAgICovCiAgbWFwcGluZzogSU5QVVRfTUFQUElORywKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSA9IGJpbmQodGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCB0aGlzKTsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50ID0gYmluZCh0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCwgdGhpcyk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIgPSBiaW5kKHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciwgdGhpcyk7CiAgICB0aGlzLm9uQXhpc01vdmVkID0gYmluZCh0aGlzLm9uQXhpc01vdmVkLCB0aGlzKTsKICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB0aGlzLm9uQnV0dG9uQ2hhbmdlZCA9IGJpbmQodGhpcy5vbkJ1dHRvbkNoYW5nZWQsIHRoaXMpOwogICAgdGhpcy5vbkJ1dHRvbkRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ2Rvd24nLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25VcCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndXAnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaHN0YXJ0Jywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoZW5kJywgc2VsZik7IH07CiAgICB0aGlzLmNvbnRyb2xsZXJQcmVzZW50ID0gZmFsc2U7CiAgICB0aGlzLmxhc3RDb250cm9sbGVyQ2hlY2sgPSAwOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbSA9IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLnJlbmRlcmVyOwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwogIH0sCgogIGFkZEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uY2hhbmdlZCcsIHRoaXMub25CdXR0b25DaGFuZ2VkKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbmRvd24nLCB0aGlzLm9uQnV0dG9uRG93bik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b251cCcsIHRoaXMub25CdXR0b25VcCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgdGhpcy5jb250cm9sbGVyRXZlbnRzQWN0aXZlID0gZmFsc2U7CiAgfSwKCiAgY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBoYW5kID0gZGF0YS5oYW5kID8gZGF0YS5oYW5kIDogdW5kZWZpbmVkOwogICAgY2hlY2tDb250cm9sbGVyUHJlc2VudEFuZFNldHVwKAogICAgICB0aGlzLCBHQU1FUEFEX0lEX1BSRUZJWCwKICAgICAge2hhbmQ6IGhhbmQsIGl0ZXJhdGVDb250cm9sbGVyUHJvZmlsZXM6IHRydWV9KTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIGluamVjdFRyYWNrZWRDb250cm9sczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgLy8gRG8gbm90aGluZyBpZiB0cmFja2VkLWNvbnRyb2xzIGFscmVhZHkgc2V0LgogICAgLy8gR2VuZXJpYyBjb250cm9scyBoYXZlIHRoZSBsb3dlc3QgcHJlY2VkZW5jZS4KICAgIGlmICh0aGlzLmVsLmNvbXBvbmVudHNbJ3RyYWNrZWQtY29udHJvbHMnXSkgeyByZXR1cm47IH0KICAgIGVsLnNldEF0dHJpYnV0ZSgndHJhY2tlZC1jb250cm9scycsIHsKICAgICAgaGFuZDogZGF0YS5oYW5kLAogICAgICBpZFByZWZpeDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0LAogICAgICBpdGVyYXRlQ29udHJvbGxlclByb2ZpbGVzOiB0cnVlCiAgICB9KTsKICAgIGlmICghdGhpcy5kYXRhLmRlZmF1bHRNb2RlbCkgeyByZXR1cm47IH0KICAgIHRoaXMuaW5pdERlZmF1bHRNb2RlbCgpOwogIH0sCgogIGFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICByZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgb25Db250cm9sbGVyc1VwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICB9LAoKICBvbkJ1dHRvbkNoYW5nZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIHZhciBidXR0b24gPSB0aGlzLm1hcHBpbmcuYnV0dG9uc1tldnQuZGV0YWlsLmlkXTsKICAgIGlmICghYnV0dG9uKSByZXR1cm47CiAgICAvLyBQYXNzIGFsb25nIGNoYW5nZWQgZXZlbnQgd2l0aCBidXR0b24gc3RhdGUsIHVzaW5nIGJ1dHRvbiBtYXBwaW5nIGZvciBjb252ZW5pZW5jZS4KICAgIHRoaXMuZWwuZW1pdChidXR0b24gKyAnY2hhbmdlZCcsIGV2dC5kZXRhaWwuc3RhdGUpOwogIH0sCgogIG9uQXhpc01vdmVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICBlbWl0SWZBeGVzQ2hhbmdlZCh0aGlzLCB0aGlzLm1hcHBpbmcuYXhlcywgZXZ0KTsKICB9LAoKICBpbml0RGVmYXVsdE1vZGVsOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgbW9kZWxFbCA9IHRoaXMubW9kZWxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EtZW50aXR5Jyk7CiAgICBtb2RlbEVsLnNldEF0dHJpYnV0ZSgnZ2VvbWV0cnknLCB7CiAgICAgIHByaW1pdGl2ZTogJ3NwaGVyZScsCiAgICAgIHJhZGl1czogMC4wMwogICAgfSk7CiAgICBtb2RlbEVsLnNldEF0dHJpYnV0ZSgnbWF0ZXJpYWwnLCB7Y29sb3I6IHRoaXMuZGF0YS5jb2xvcn0pOwogICAgdGhpcy5lbC5hcHBlbmRDaGlsZChtb2RlbEVsKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sNjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2VvbWV0cmllcyA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5nZW9tZXRyaWVzOwp2YXIgZ2VvbWV0cnlOYW1lcyA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5nZW9tZXRyeU5hbWVzOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBkdW1teUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7CgovKioKICogR2VvbWV0cnkgY29tcG9uZW50LiBDb21iaW5lZCB3aXRoIG1hdGVyaWFsIGNvbXBvbmVudCB0byBtYWtlIGEgbWVzaCBpbiAzRCBvYmplY3QuCiAqIEV4dGVuZGVkIHdpdGggcmVnaXN0ZXJlZCBnZW9tZXRyaWVzLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ2dlb21ldHJ5JywgewogIHNjaGVtYTogewogICAgYnVmZmVyOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBwcmltaXRpdmU6IHtkZWZhdWx0OiAnYm94Jywgb25lT2Y6IGdlb21ldHJ5TmFtZXMsIHNjaGVtYUNoYW5nZTogdHJ1ZX0sCiAgICBza2lwQ2FjaGU6IHtkZWZhdWx0OiBmYWxzZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDsKICB9LAoKICAvKioKICAgKiBUYWxrIHRvIGdlb21ldHJ5IHN5c3RlbSB0byBnZXQgb3IgY3JlYXRlIGdlb21ldHJ5LgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKHByZXZpb3VzRGF0YSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIG1lc2g7CiAgICB2YXIgc3lzdGVtID0gdGhpcy5zeXN0ZW07CgogICAgLy8gRGlzcG9zZSBvbGQgZ2VvbWV0cnkgaWYgd2UgY3JlYXRlZCBvbmUuCiAgICBpZiAodGhpcy5nZW9tZXRyeSkgewogICAgICBzeXN0ZW0udW51c2VHZW9tZXRyeShwcmV2aW91c0RhdGEpOwogICAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDsKICAgIH0KCiAgICAvLyBDcmVhdGUgbmV3IGdlb21ldHJ5LgogICAgdGhpcy5nZW9tZXRyeSA9IHN5c3RlbS5nZXRPckNyZWF0ZUdlb21ldHJ5KGRhdGEpOwoKICAgIC8vIFNldCBvbiBtZXNoLiBJZiBtZXNoIGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXQuCiAgICBtZXNoID0gZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKTsKICAgIGlmIChtZXNoKSB7CiAgICAgIG1lc2guZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwogICAgfSBlbHNlIHsKICAgICAgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCk7CiAgICAgIG1lc2guZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwogICAgICBlbC5zZXRPYmplY3QzRCgnbWVzaCcsIG1lc2gpOwogICAgfQogIH0sCgogIC8qKgogICAqIFRlbGwgZ2VvbWV0cnkgc3lzdGVtIHRoYXQgZW50aXR5IGlzIG5vIGxvbmdlciB1c2luZyB0aGUgZ2VvbWV0cnkuCiAgICogVW5zZXQgdGhlIGdlb21ldHJ5IG9uIHRoZSBtZXNoCiAgICovCiAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnN5c3RlbS51bnVzZUdlb21ldHJ5KHRoaXMuZGF0YSk7CiAgICB0aGlzLmVsLmdldE9iamVjdDNEKCdtZXNoJykuZ2VvbWV0cnkgPSBkdW1teUdlb21ldHJ5OwogICAgdGhpcy5nZW9tZXRyeSA9IG51bGw7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIGdlb21ldHJ5IGNvbXBvbmVudCBzY2hlbWEgYmFzZWQgb24gZ2VvbWV0cnkgdHlwZS4KICAgKi8KICB1cGRhdGVTY2hlbWE6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgY3VycmVudEdlb21ldHJ5VHlwZSA9IHRoaXMub2xkRGF0YSAmJiB0aGlzLm9sZERhdGEucHJpbWl0aXZlOwogICAgdmFyIG5ld0dlb21ldHJ5VHlwZSA9IGRhdGEucHJpbWl0aXZlOwogICAgdmFyIHNjaGVtYSA9IGdlb21ldHJpZXNbbmV3R2VvbWV0cnlUeXBlXSAmJiBnZW9tZXRyaWVzW25ld0dlb21ldHJ5VHlwZV0uc2NoZW1hOwoKICAgIC8vIEdlb21ldHJ5IGhhcyBubyBzY2hlbWEuCiAgICBpZiAoIXNjaGVtYSkgeyB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZ2VvbWV0cnkgc2NoZW1hIGAnICsgbmV3R2VvbWV0cnlUeXBlICsgJ2AnKTsgfQogICAgLy8gTm90aGluZyBoYXMgY2hhbmdlZC4KICAgIGlmIChjdXJyZW50R2VvbWV0cnlUeXBlICYmIGN1cnJlbnRHZW9tZXRyeVR5cGUgPT09IG5ld0dlb21ldHJ5VHlwZSkgeyByZXR1cm47IH0KCiAgICB0aGlzLmV4dGVuZFNjaGVtYShzY2hlbWEpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi9saWIvdGhyZWUiOjE1N31dLDYyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzLycpOwp2YXIgd2FybiA9IHV0aWxzLmRlYnVnKCdjb21wb25lbnRzOmdsdGYtbW9kZWw6d2FybicpOwoKLyoqCiAqIGdsVEYgbW9kZWwgbG9hZGVyLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ2dsdGYtbW9kZWwnLCB7CiAgc2NoZW1hOiB7dHlwZTogJ21vZGVsJ30sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkcmFjb0xvYWRlciA9IHRoaXMuc3lzdGVtLmdldERSQUNPTG9hZGVyKCk7CiAgICB0aGlzLm1vZGVsID0gbnVsbDsKICAgIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLkdMVEZMb2FkZXIoKTsKICAgIGlmIChkcmFjb0xvYWRlcikgewogICAgICB0aGlzLmxvYWRlci5zZXREUkFDT0xvYWRlcihkcmFjb0xvYWRlcik7CiAgICB9CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIHNyYyA9IHRoaXMuZGF0YTsKCiAgICBpZiAoIXNyYykgeyByZXR1cm47IH0KCiAgICB0aGlzLnJlbW92ZSgpOwoKICAgIHRoaXMubG9hZGVyLmxvYWQoc3JjLCBmdW5jdGlvbiBnbHRmTG9hZGVkIChnbHRmTW9kZWwpIHsKICAgICAgc2VsZi5tb2RlbCA9IGdsdGZNb2RlbC5zY2VuZSB8fCBnbHRmTW9kZWwuc2NlbmVzWzBdOwogICAgICBzZWxmLm1vZGVsLmFuaW1hdGlvbnMgPSBnbHRmTW9kZWwuYW5pbWF0aW9uczsKICAgICAgZWwuc2V0T2JqZWN0M0QoJ21lc2gnLCBzZWxmLm1vZGVsKTsKICAgICAgZWwuZW1pdCgnbW9kZWwtbG9hZGVkJywge2Zvcm1hdDogJ2dsdGYnLCBtb2RlbDogc2VsZi5tb2RlbH0pOwogICAgfSwgdW5kZWZpbmVkIC8qIG9uUHJvZ3Jlc3MgKi8sIGZ1bmN0aW9uIGdsdGZGYWlsZWQgKGVycm9yKSB7CiAgICAgIHZhciBtZXNzYWdlID0gKGVycm9yICYmIGVycm9yLm1lc3NhZ2UpID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gbG9hZCBnbFRGIG1vZGVsJzsKICAgICAgd2FybihtZXNzYWdlKTsKICAgICAgZWwuZW1pdCgnbW9kZWwtZXJyb3InLCB7Zm9ybWF0OiAnZ2x0ZicsIHNyYzogc3JjfSk7CiAgICB9KTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5tb2RlbCkgeyByZXR1cm47IH0KICAgIHRoaXMuZWwucmVtb3ZlT2JqZWN0M0QoJ21lc2gnKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscy8iOjE4Mn1dLDYzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIFRIUkVFICovCnZhciByZWdpc3RlckNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CgovLyBGb3VuZCBhdCBodHRwczovL2dpdGh1Yi5jb20vYWZyYW1ldnIvYXNzZXRzLgp2YXIgTU9ERUxfVVJMUyA9IHsKICB0b29uTGVmdDogJ2h0dHBzOi8vY2RuLmFmcmFtZS5pby9jb250cm9sbGVycy9oYW5kcy9sZWZ0SGFuZC5nbGInLAogIHRvb25SaWdodDogJ2h0dHBzOi8vY2RuLmFmcmFtZS5pby9jb250cm9sbGVycy9oYW5kcy9yaWdodEhhbmQuZ2xiJywKICBsb3dQb2x5TGVmdDogJ2h0dHBzOi8vY2RuLmFmcmFtZS5pby9jb250cm9sbGVycy9oYW5kcy9sZWZ0SGFuZExvdy5nbGInLAogIGxvd1BvbHlSaWdodDogJ2h0dHBzOi8vY2RuLmFmcmFtZS5pby9jb250cm9sbGVycy9oYW5kcy9yaWdodEhhbmRMb3cuZ2xiJywKICBoaWdoUG9seUxlZnQ6ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvaGFuZHMvbGVmdEhhbmRIaWdoLmdsYicsCiAgaGlnaFBvbHlSaWdodDogJ2h0dHBzOi8vY2RuLmFmcmFtZS5pby9jb250cm9sbGVycy9oYW5kcy9yaWdodEhhbmRIaWdoLmdsYicKfTsKCi8vIFBvc2VzLgp2YXIgQU5JTUFUSU9OUyA9IHsKICBvcGVuOiAnT3BlbicsCiAgLy8gcG9pbnQ6IGdyaXAgYWN0aXZlLCB0cmFja3BhZCBzdXJmYWNlIGFjdGl2ZSwgdHJpZ2dlciBpbmFjdGl2ZS4KICBwb2ludDogJ1BvaW50JywKICAvLyBwb2ludFRodW1iOiBncmlwIGFjdGl2ZSwgdHJpZ2dlciBpbmFjdGl2ZSwgdHJhY2twYWQgc3VyZmFjZSBpbmFjdGl2ZS4KICBwb2ludFRodW1iOiAnUG9pbnQgKyBUaHVtYicsCiAgLy8gZmlzdDogZ3JpcCBhY3RpdmUsIHRyaWdnZXIgYWN0aXZlLCB0cmFja3BhZCBzdXJmYWNlIGFjdGl2ZS4KICBmaXN0OiAnRmlzdCcsCiAgLy8gaG9sZDogdHJpZ2dlciBhY3RpdmUsIGdyaXAgaW5hY3RpdmUuCiAgaG9sZDogJ0hvbGQnLAogIC8vIHRodW1iVXA6IGdyaXAgYWN0aXZlLCB0cmlnZ2VyIGFjdGl2ZSwgdHJhY2twYWQgc3VyZmFjZSBpbmFjdGl2ZS4KICB0aHVtYlVwOiAnVGh1bWIgVXAnCn07CgovLyBNYXAgYW5pbWF0aW9uIHRvIHB1YmxpYyBldmVudHMgZm9yIHRoZSBBUEkuCnZhciBFVkVOVFMgPSB7fTsKRVZFTlRTW0FOSU1BVElPTlMuZmlzdF0gPSAnZ3JpcCc7CkVWRU5UU1tBTklNQVRJT05TLnRodW1iVXBdID0gJ3Bpc3RvbCc7CkVWRU5UU1tBTklNQVRJT05TLnBvaW50XSA9ICdwb2ludGluZyc7CgovKioKICogSGFuZCBjb250cm9scyBjb21wb25lbnQgdGhhdCBhYnN0cmFjdHMgNkRvRiBjb250cm9sczoKICogICBvY3VsdXMtdG91Y2gtY29udHJvbHMsIHZpdmUtY29udHJvbHMsIHdpbmRvd3MtbW90aW9uLWNvbnRyb2xzLgogKgogKiBPcmlnaW5hbGx5IG1lYW50IHRvIGJlIGEgc2FtcGxlIGltcGxlbWVudGF0aW9uIG9mIGFwcGxpY2F0aW9ucy1zcGVjaWZpYyBjb250cm9scyB0aGF0CiAqIGFic3RyYWN0cyBtdWx0aXBsZSB0eXBlcyBvZiBjb250cm9sbGVycy4KICoKICogQXV0by1kZXRlY3QgYXBwcm9wcmlhdGUgY29udHJvbGxlci4KICogSGFuZGxlIGNvbW1vbiBldmVudHMgY29taW5nIGZyb20gdGhlIGRldGVjdGVkIHZlbmRvci1zcGVjaWZpYyBjb250cm9scy4KICogVHJhbnNsYXRlIGJ1dHRvbiBldmVudHMgdG8gc2VtYW50aWMgaGFuZC1yZWxhdGVkIGV2ZW50IG5hbWVzOgogKiAgIChncmlwY2xvc2UsIGdyaXBvcGVuLCB0aHVtYnVwLCB0aHVtYmRvd24sIHBvaW50dXAsIHBvaW50ZG93bikKICogTG9hZCBoYW5kIG1vZGVsIHdpdGggZ2VzdHVyZXMgdGhhdCBhcmUgYXBwbGllZCBiYXNlZCBvbiB0aGUgYnV0dG9uIHByZXNzZWQuCiAqCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBIYW5kIG1hcHBpbmcgKGBsZWZ0YCwgYHJpZ2h0YCkuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnaGFuZC1jb250cm9scycsIHsKICBzY2hlbWE6IHsKICAgIGNvbG9yOiB7ZGVmYXVsdDogJ3doaXRlJywgdHlwZTogJ2NvbG9yJ30sCiAgICBoYW5kOiB7IGRlZmF1bHQ6ICdsZWZ0JyB9LAogICAgaGFuZE1vZGVsU3R5bGU6IHtkZWZhdWx0OiAnbG93UG9seScsIG9uZU9mOiBbJ2xvd1BvbHknLCAnaGlnaFBvbHknLCAndG9vbiddfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICAvLyBDdXJyZW50IHBvc2UuCiAgICB0aGlzLmdlc3R1cmUgPSBBTklNQVRJT05TLm9wZW47CiAgICAvLyBBY3RpdmUgYnV0dG9ucyBwb3B1bGF0ZWQgYnkgZXZlbnRzIHByb3ZpZGVkIGJ5IHRoZSBhdHRhY2hlZCBjb250cm9scy4KICAgIHRoaXMucHJlc3NlZEJ1dHRvbnMgPSB7fTsKICAgIHRoaXMudG91Y2hlZEJ1dHRvbnMgPSB7fTsKICAgIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLkdMVEZMb2FkZXIoKTsKICAgIHRoaXMubG9hZGVyLnNldENyb3NzT3JpZ2luKCdhbm9ueW1vdXMnKTsKCiAgICB0aGlzLm9uR3JpcERvd24gPSBmdW5jdGlvbiAoKSB7IHNlbGYuaGFuZGxlQnV0dG9uKCdncmlwJywgJ2Rvd24nKTsgfTsKICAgIHRoaXMub25HcmlwVXAgPSBmdW5jdGlvbiAoKSB7IHNlbGYuaGFuZGxlQnV0dG9uKCdncmlwJywgJ3VwJyk7IH07CiAgICB0aGlzLm9uVHJhY2twYWREb3duID0gZnVuY3Rpb24gKCkgeyBzZWxmLmhhbmRsZUJ1dHRvbigndHJhY2twYWQnLCAnZG93bicpOyB9OwogICAgdGhpcy5vblRyYWNrcGFkVXAgPSBmdW5jdGlvbiAoKSB7IHNlbGYuaGFuZGxlQnV0dG9uKCd0cmFja3BhZCcsICd1cCcpOyB9OwogICAgdGhpcy5vblRyYWNrcGFkVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RyYWNrcGFkJywgJ3RvdWNoc3RhcnQnKTsgfTsKICAgIHRoaXMub25UcmFja3BhZFRvdWNoRW5kID0gZnVuY3Rpb24gKCkgeyBzZWxmLmhhbmRsZUJ1dHRvbigndHJhY2twYWQnLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25UcmlnZ2VyRG93biA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RyaWdnZXInLCAnZG93bicpOyB9OwogICAgdGhpcy5vblRyaWdnZXJVcCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RyaWdnZXInLCAndXAnKTsgfTsKICAgIHRoaXMub25UcmlnZ2VyVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RyaWdnZXInLCAndG91Y2hzdGFydCcpOyB9OwogICAgdGhpcy5vblRyaWdnZXJUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RyaWdnZXInLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25HcmlwVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ2dyaXAnLCAndG91Y2hzdGFydCcpOyB9OwogICAgdGhpcy5vbkdyaXBUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ2dyaXAnLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25UaHVtYnN0aWNrRG93biA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RodW1ic3RpY2snLCAnZG93bicpOyB9OwogICAgdGhpcy5vblRodW1ic3RpY2tVcCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3RodW1ic3RpY2snLCAndXAnKTsgfTsKICAgIHRoaXMub25Bb3JYVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ0FvclgnLCAndG91Y2hzdGFydCcpOyB9OwogICAgdGhpcy5vbkFvclhUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ0FvclgnLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25Cb3JZVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ0JvclknLCAndG91Y2hzdGFydCcpOyB9OwogICAgdGhpcy5vbkJvcllUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ0JvclknLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25TdXJmYWNlVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3N1cmZhY2UnLCAndG91Y2hzdGFydCcpOyB9OwogICAgdGhpcy5vblN1cmZhY2VUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5oYW5kbGVCdXR0b24oJ3N1cmZhY2UnLCAndG91Y2hlbmQnKTsgfTsKICAgIHRoaXMub25Db250cm9sbGVyQ29ubmVjdGVkID0gdGhpcy5vbkNvbnRyb2xsZXJDb25uZWN0ZWQuYmluZCh0aGlzKTsKICAgIHRoaXMub25Db250cm9sbGVyRGlzY29ubmVjdGVkID0gdGhpcy5vbkNvbnRyb2xsZXJEaXNjb25uZWN0ZWQuYmluZCh0aGlzKTsKCiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyY29ubmVjdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJDb25uZWN0ZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcmRpc2Nvbm5lY3RlZCcsIHRoaXMub25Db250cm9sbGVyRGlzY29ubmVjdGVkKTsKCiAgICAvLyBIaWRkZW4gYnkgZGVmYXVsdC4KICAgIGVsLm9iamVjdDNELnZpc2libGUgPSBmYWxzZTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICB0aWNrOiBmdW5jdGlvbiAodGltZSwgZGVsdGEpIHsKICAgIHZhciBtZXNoID0gdGhpcy5lbC5nZXRPYmplY3QzRCgnbWVzaCcpOwoKICAgIGlmICghbWVzaCB8fCAhbWVzaC5taXhlcikgeyByZXR1cm47IH0KCiAgICBtZXNoLm1peGVyLnVwZGF0ZShkZWx0YSAvIDEwMDApOwogIH0sCgogIG9uQ29udHJvbGxlckNvbm5lY3RlZDogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5vYmplY3QzRC52aXNpYmxlID0gdHJ1ZTsKICB9LAoKICBvbkNvbnRyb2xsZXJEaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwub2JqZWN0M0QudmlzaWJsZSA9IGZhbHNlOwogIH0sCgogIGFkZEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZ3JpcGRvd24nLCB0aGlzLm9uR3JpcERvd24pOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZ3JpcHVwJywgdGhpcy5vbkdyaXBVcCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFja3BhZGRvd24nLCB0aGlzLm9uVHJhY2twYWREb3duKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrcGFkdXAnLCB0aGlzLm9uVHJhY2twYWRVcCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFja3BhZHRvdWNoc3RhcnQnLCB0aGlzLm9uVHJhY2twYWRUb3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrcGFkdG91Y2hlbmQnLCB0aGlzLm9uVHJhY2twYWRUb3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmlnZ2VyZG93bicsIHRoaXMub25UcmlnZ2VyRG93bik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmlnZ2VydXAnLCB0aGlzLm9uVHJpZ2dlclVwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyaWdnZXJ0b3VjaHN0YXJ0JywgdGhpcy5vblRyaWdnZXJUb3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyaWdnZXJ0b3VjaGVuZCcsIHRoaXMub25UcmlnZ2VyVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZ3JpcHRvdWNoc3RhcnQnLCB0aGlzLm9uR3JpcFRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZ3JpcHRvdWNoZW5kJywgdGhpcy5vbkdyaXBUb3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0aHVtYnN0aWNrZG93bicsIHRoaXMub25UaHVtYnN0aWNrRG93bik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0aHVtYnN0aWNrdXAnLCB0aGlzLm9uVGh1bWJzdGlja1VwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2FidXR0b250b3VjaHN0YXJ0JywgdGhpcy5vbkFvclhUb3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2FidXR0b250b3VjaGVuZCcsIHRoaXMub25Bb3JYVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYmJ1dHRvbnRvdWNoc3RhcnQnLCB0aGlzLm9uQm9yWVRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYmJ1dHRvbnRvdWNoZW5kJywgdGhpcy5vbkJvcllUb3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd4YnV0dG9udG91Y2hzdGFydCcsIHRoaXMub25Bb3JYVG91Y2hTdGFydCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd4YnV0dG9udG91Y2hlbmQnLCB0aGlzLm9uQW9yWFRvdWNoRW5kKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3lidXR0b250b3VjaHN0YXJ0JywgdGhpcy5vbkJvcllUb3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3lidXR0b250b3VjaGVuZCcsIHRoaXMub25Cb3JZVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc3VyZmFjZXRvdWNoc3RhcnQnLCB0aGlzLm9uU3VyZmFjZVRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc3VyZmFjZXRvdWNoZW5kJywgdGhpcy5vblN1cmZhY2VUb3VjaEVuZCk7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdncmlwZG93bicsIHRoaXMub25HcmlwRG93bik7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdncmlwdXAnLCB0aGlzLm9uR3JpcFVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrcGFkZG93bicsIHRoaXMub25UcmFja3BhZERvd24pOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhY2twYWR1cCcsIHRoaXMub25UcmFja3BhZFVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrcGFkdG91Y2hzdGFydCcsIHRoaXMub25UcmFja3BhZFRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhY2twYWR0b3VjaGVuZCcsIHRoaXMub25UcmFja3BhZFRvdWNoRW5kKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyaWdnZXJkb3duJywgdGhpcy5vblRyaWdnZXJEb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyaWdnZXJ1cCcsIHRoaXMub25UcmlnZ2VyVXApOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJpZ2dlcnRvdWNoc3RhcnQnLCB0aGlzLm9uVHJpZ2dlclRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJpZ2dlcnRvdWNoZW5kJywgdGhpcy5vblRyaWdnZXJUb3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdncmlwdG91Y2hzdGFydCcsIHRoaXMub25HcmlwVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdncmlwdG91Y2hlbmQnLCB0aGlzLm9uR3JpcFRvdWNoRW5kKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RodW1ic3RpY2tkb3duJywgdGhpcy5vblRodW1ic3RpY2tEb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RodW1ic3RpY2t1cCcsIHRoaXMub25UaHVtYnN0aWNrVXApOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJ1dHRvbnRvdWNoc3RhcnQnLCB0aGlzLm9uQW9yWFRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJ1dHRvbnRvdWNoZW5kJywgdGhpcy5vbkFvclhUb3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdiYnV0dG9udG91Y2hzdGFydCcsIHRoaXMub25Cb3JZVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdiYnV0dG9udG91Y2hlbmQnLCB0aGlzLm9uQm9yWVRvdWNoRW5kKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3hidXR0b250b3VjaHN0YXJ0JywgdGhpcy5vbkFvclhUb3VjaFN0YXJ0KTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3hidXR0b250b3VjaGVuZCcsIHRoaXMub25Bb3JYVG91Y2hFbmQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigneWJ1dHRvbnRvdWNoc3RhcnQnLCB0aGlzLm9uQm9yWVRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigneWJ1dHRvbnRvdWNoZW5kJywgdGhpcy5vbkJvcllUb3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdXJmYWNldG91Y2hzdGFydCcsIHRoaXMub25TdXJmYWNlVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdXJmYWNldG91Y2hlbmQnLCB0aGlzLm9uU3VyZmFjZVRvdWNoRW5kKTsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgaGFuZGxlci4gTW9yZSBsaWtlIHRoZSBgaW5pdGAgaGFuZGxlciBzaW5jZSB0aGUgb25seSBwcm9wZXJ0eSBpcyB0aGUgaGFuZCwgYW5kCiAgICogdGhhdCB3b24ndCBiZSBjaGFuZ2luZyBtdWNoLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKHByZXZpb3VzSGFuZCkgewogICAgdmFyIGNvbnRyb2xDb25maWd1cmF0aW9uOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBoYW5kID0gdGhpcy5kYXRhLmhhbmQ7CiAgICB2YXIgaGFuZE1vZGVsU3R5bGUgPSB0aGlzLmRhdGEuaGFuZE1vZGVsU3R5bGU7CiAgICB2YXIgaGFuZENvbG9yID0gdGhpcy5kYXRhLmNvbG9yOwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIC8vIEdldCBjb21tb24gY29uZmlndXJhdGlvbiB0byBhYnN0cmFjdCBkaWZmZXJlbnQgdmVuZG9yIGNvbnRyb2xzLgogICAgY29udHJvbENvbmZpZ3VyYXRpb24gPSB7CiAgICAgIGhhbmQ6IGhhbmQsCiAgICAgIG1vZGVsOiBmYWxzZQogICAgfTsKCiAgICAvLyBTZXQgbW9kZWwuCiAgICBpZiAoaGFuZCAhPT0gcHJldmlvdXNIYW5kKSB7CiAgICAgIHZhciBoYW5kbW9kZWxVcmwgPSBNT0RFTF9VUkxTW2hhbmRNb2RlbFN0eWxlICsgaGFuZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGhhbmQuc2xpY2UoMSldOwogICAgICB0aGlzLmxvYWRlci5sb2FkKGhhbmRtb2RlbFVybCwgZnVuY3Rpb24gKGdsdGYpIHsKICAgICAgICB2YXIgbWVzaCA9IGdsdGYuc2NlbmUuY2hpbGRyZW5bMF07CiAgICAgICAgdmFyIGhhbmRNb2RlbE9yaWVudGF0aW9uID0gaGFuZCA9PT0gJ2xlZnQnID8gTWF0aC5QSSAvIDIgOiAtTWF0aC5QSSAvIDI7CiAgICAgICAgbWVzaC5taXhlciA9IG5ldyBUSFJFRS5BbmltYXRpb25NaXhlcihtZXNoKTsKICAgICAgICBzZWxmLmNsaXBzID0gZ2x0Zi5hbmltYXRpb25zOwogICAgICAgIGVsLnNldE9iamVjdDNEKCdtZXNoJywgbWVzaCk7CgogICAgICAgIHZhciBoYW5kTWF0ZXJpYWwgPSBtZXNoLmNoaWxkcmVuWzFdLm1hdGVyaWFsOwogICAgICAgIGhhbmRNYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcihoYW5kQ29sb3IpOwogICAgICAgIG1lc2gucG9zaXRpb24uc2V0KDAsIDAsIDApOwogICAgICAgIG1lc2gucm90YXRpb24uc2V0KDAsIDAsIGhhbmRNb2RlbE9yaWVudGF0aW9uKTsKICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ21hZ2ljbGVhcC1jb250cm9scycsIGNvbnRyb2xDb25maWd1cmF0aW9uKTsKICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3ZpdmUtY29udHJvbHMnLCBjb250cm9sQ29uZmlndXJhdGlvbik7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdvY3VsdXMtdG91Y2gtY29udHJvbHMnLCBjb250cm9sQ29uZmlndXJhdGlvbik7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd3aW5kb3dzLW1vdGlvbi1jb250cm9scycsIGNvbnRyb2xDb25maWd1cmF0aW9uKTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnJlbW92ZU9iamVjdDNEKCdtZXNoJyk7CiAgfSwKCiAgLyoqCiAgICogUGxheSBtb2RlbCBhbmltYXRpb24sIGJhc2VkIG9uIHdoaWNoIGJ1dHRvbiB3YXMgcHJlc3NlZCBhbmQgd2hpY2gga2luZCBvZiBldmVudC4KICAgKgogICAqIDEuIFByb2Nlc3MgYnV0dG9ucy4KICAgKiAyLiBEZXRlcm1pbmUgZ2VzdHVyZSAodGhpcy5kZXRlcm1pbmVHZXN0dXJlKCkpLgogICAqIDMuIEFuaW1hdGlvbiBnZXN0dXJlICh0aGlzLmFuaW1hdGlvbkdlc3R1cmUoKSkuCiAgICogNC4gRW1pdCBnZXN0dXJlIGV2ZW50cyAodGhpcy5lbWl0R2VzdHVyZUV2ZW50cygpKS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b24gLSBOYW1lIG9mIHRoZSBidXR0b24uCiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dCAtIFR5cGUgb2YgZXZlbnQgZm9yIHRoZSBidXR0b24gKGkuZS4sIGRvd24vdXAvdG91Y2hzdGFydC90b3VjaGVuZCkuCiAgICovCiAgaGFuZGxlQnV0dG9uOiBmdW5jdGlvbiAoYnV0dG9uLCBldnQpIHsKICAgIHZhciBsYXN0R2VzdHVyZTsKICAgIHZhciBpc1ByZXNzZWQgPSBldnQgPT09ICdkb3duJzsKICAgIHZhciBpc1RvdWNoZWQgPSBldnQgPT09ICd0b3VjaHN0YXJ0JzsKCiAgICAvLyBVcGRhdGUgb2JqZWN0cy4KICAgIGlmIChldnQuaW5kZXhPZigndG91Y2gnKSA9PT0gMCkgewogICAgICAvLyBVcGRhdGUgdG91Y2ggb2JqZWN0LgogICAgICBpZiAoaXNUb3VjaGVkID09PSB0aGlzLnRvdWNoZWRCdXR0b25zW2J1dHRvbl0pIHsgcmV0dXJuOyB9CiAgICAgIHRoaXMudG91Y2hlZEJ1dHRvbnNbYnV0dG9uXSA9IGlzVG91Y2hlZDsKICAgIH0gZWxzZSB7CiAgICAgIC8vIFVwZGF0ZSBidXR0b24gb2JqZWN0LgogICAgICBpZiAoaXNQcmVzc2VkID09PSB0aGlzLnByZXNzZWRCdXR0b25zW2J1dHRvbl0pIHsgcmV0dXJuOyB9CiAgICAgIHRoaXMucHJlc3NlZEJ1dHRvbnNbYnV0dG9uXSA9IGlzUHJlc3NlZDsKICAgIH0KCiAgICAvLyBEZXRlcm1pbmUgdGhlIGdlc3R1cmUuCiAgICBsYXN0R2VzdHVyZSA9IHRoaXMuZ2VzdHVyZTsKICAgIHRoaXMuZ2VzdHVyZSA9IHRoaXMuZGV0ZXJtaW5lR2VzdHVyZSgpOwoKICAgIC8vIFNhbWUgZ2VzdHVyZS4KICAgIGlmICh0aGlzLmdlc3R1cmUgPT09IGxhc3RHZXN0dXJlKSB7IHJldHVybjsgfQogICAgLy8gQW5pbWF0ZSBnZXN0dXJlLgogICAgdGhpcy5hbmltYXRlR2VzdHVyZSh0aGlzLmdlc3R1cmUsIGxhc3RHZXN0dXJlKTsKCiAgICAvLyBFbWl0IGV2ZW50cy4KICAgIHRoaXMuZW1pdEdlc3R1cmVFdmVudHModGhpcy5nZXN0dXJlLCBsYXN0R2VzdHVyZSk7CiAgfSwKCiAgLyoqCiAgICogRGV0ZXJtaW5lIHdoaWNoIHBvc2UgaGFuZCBzaG91bGQgYmUgaW4gY29uc2lkZXJpbmcgYWN0aXZlIGFuZCB0b3VjaGVkIGJ1dHRvbnMuCiAgICovCiAgZGV0ZXJtaW5lR2VzdHVyZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGdlc3R1cmU7CiAgICB2YXIgaXNHcmlwQWN0aXZlID0gdGhpcy5wcmVzc2VkQnV0dG9ucy5ncmlwOwogICAgdmFyIGlzU3VyZmFjZUFjdGl2ZSA9IHRoaXMucHJlc3NlZEJ1dHRvbnMuc3VyZmFjZSB8fCB0aGlzLnRvdWNoZWRCdXR0b25zLnN1cmZhY2U7CiAgICB2YXIgaXNUcmFja3BhZEFjdGl2ZSA9IHRoaXMucHJlc3NlZEJ1dHRvbnMudHJhY2twYWQgfHwgdGhpcy50b3VjaGVkQnV0dG9ucy50cmFja3BhZDsKICAgIHZhciBpc1RyaWdnZXJBY3RpdmUgPSB0aGlzLnByZXNzZWRCdXR0b25zLnRyaWdnZXIgfHwgdGhpcy50b3VjaGVkQnV0dG9ucy50cmlnZ2VyOwogICAgdmFyIGlzQUJYWUFjdGl2ZSA9IHRoaXMudG91Y2hlZEJ1dHRvbnMuQW9yWCB8fCB0aGlzLnRvdWNoZWRCdXR0b25zLkJvclk7CiAgICB2YXIgaXNWaXZlID0gaXNWaXZlQ29udHJvbGxlcih0aGlzLmVsLmNvbXBvbmVudHNbJ3RyYWNrZWQtY29udHJvbHMnXSk7CgogICAgLy8gV29ya3Mgd2VsbCB3aXRoIE9jdWx1cyBUb3VjaCBhbmQgV2luZG93cyBNb3Rpb24gQ29udHJvbHMsIGJ1dCBWaXZlIG5lZWRzIHR3ZWFrcy4KICAgIGlmIChpc1ZpdmUpIHsKICAgICAgaWYgKGlzR3JpcEFjdGl2ZSB8fCBpc1RyaWdnZXJBY3RpdmUpIHsKICAgICAgICBnZXN0dXJlID0gQU5JTUFUSU9OUy5maXN0OwogICAgICB9IGVsc2UgaWYgKGlzVHJhY2twYWRBY3RpdmUpIHsKICAgICAgICBnZXN0dXJlID0gQU5JTUFUSU9OUy5wb2ludDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKGlzR3JpcEFjdGl2ZSkgewogICAgICAgIGlmIChpc1N1cmZhY2VBY3RpdmUgfHwgaXNBQlhZQWN0aXZlIHx8IGlzVHJhY2twYWRBY3RpdmUpIHsKICAgICAgICAgIGdlc3R1cmUgPSBpc1RyaWdnZXJBY3RpdmUgPyBBTklNQVRJT05TLmZpc3QgOiBBTklNQVRJT05TLnBvaW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnZXN0dXJlID0gaXNUcmlnZ2VyQWN0aXZlID8gQU5JTUFUSU9OUy50aHVtYlVwIDogQU5JTUFUSU9OUy5wb2ludFRodW1iOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc1RyaWdnZXJBY3RpdmUpIHsKICAgICAgICBnZXN0dXJlID0gQU5JTUFUSU9OUy5ob2xkOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGdlc3R1cmU7CiAgfSwKCiAgLyoqCiAgICogUGxheSBjb3JyZXNwb25kaW5nIGNsaXAgdG8gYSBnZXN0dXJlCiAgICovCiAgZ2V0Q2xpcDogZnVuY3Rpb24gKGdlc3R1cmUpIHsKICAgIHZhciBjbGlwOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jbGlwcy5sZW5ndGg7IGkrKykgewogICAgICBjbGlwID0gdGhpcy5jbGlwc1tpXTsKICAgICAgaWYgKGNsaXAubmFtZSAhPT0gZ2VzdHVyZSkgeyBjb250aW51ZTsgfQogICAgICByZXR1cm4gY2xpcDsKICAgIH0KICB9LAoKICAvKioKICAgKiBQbGF5IGdlc3R1cmUgYW5pbWF0aW9uLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGdlc3R1cmUgLSBXaGljaCBwb3NlIHRvIGFuaW1hdGUgdG8uIElmIGFic2VudCwgdGhlbiBhbmltYXRlIHRvIG9wZW4uCiAgICogQHBhcmFtIHtzdHJpbmd9IGxhc3RHZXN0dXJlIC0gUHJldmlvdXMgZ2VzdHVyZSwgdG8gcmV2ZXJzZSBiYWNrIHRvIG9wZW4gaWYgbmVlZGVkLgogICAqLwogIGFuaW1hdGVHZXN0dXJlOiBmdW5jdGlvbiAoZ2VzdHVyZSwgbGFzdEdlc3R1cmUpIHsKICAgIGlmIChnZXN0dXJlKSB7CiAgICAgIHRoaXMucGxheUFuaW1hdGlvbihnZXN0dXJlIHx8IEFOSU1BVElPTlMub3BlbiwgbGFzdEdlc3R1cmUsIGZhbHNlKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIElmIG5vIGdlc3R1cmUsIHRoZW4gcmV2ZXJzZSB0aGUgY3VycmVudCBnZXN0dXJlIGJhY2sgdG8gb3BlbiBwb3NlLgogICAgdGhpcy5wbGF5QW5pbWF0aW9uKGxhc3RHZXN0dXJlLCBsYXN0R2VzdHVyZSwgdHJ1ZSk7CiAgfSwKCiAgLyoqCiAgICogRW1pdCBgaGFuZC1jb250cm9sc2Atc3BlY2lmaWMgZXZlbnRzLgogICAqLwogIGVtaXRHZXN0dXJlRXZlbnRzOiBmdW5jdGlvbiAoZ2VzdHVyZSwgbGFzdEdlc3R1cmUpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgZXZlbnROYW1lOwoKICAgIGlmIChsYXN0R2VzdHVyZSA9PT0gZ2VzdHVyZSkgeyByZXR1cm47IH0KCiAgICAvLyBFbWl0IGV2ZW50IGZvciBsYXN0R2VzdHVyZSBub3QgaW5hY3RpdmUuCiAgICBldmVudE5hbWUgPSBnZXRHZXN0dXJlRXZlbnROYW1lKGxhc3RHZXN0dXJlLCBmYWxzZSk7CiAgICBpZiAoZXZlbnROYW1lKSB7IGVsLmVtaXQoZXZlbnROYW1lKTsgfQoKICAgIC8vIEVtaXQgZXZlbnQgZm9yIGN1cnJlbnQgZ2VzdHVyZSBub3cgYWN0aXZlLgogICAgZXZlbnROYW1lID0gZ2V0R2VzdHVyZUV2ZW50TmFtZShnZXN0dXJlLCB0cnVlKTsKICAgIGlmIChldmVudE5hbWUpIHsgZWwuZW1pdChldmVudE5hbWUpOyB9CiAgfSwKCiAgLyoqCiAgKiBQbGF5IGhhbmQgYW5pbWF0aW9uIGJhc2VkIG9uIGJ1dHRvbiBzdGF0ZS4KICAqCiAgKiBAcGFyYW0ge3N0cmluZ30gZ2VzdHVyZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlIG1vZGVsLgogICogQHBhcmFtIHtzdHJpbmd9IGxhc3RHZXN0dXJlIC0gUHJldmlvdXMgcG9zZS4KICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmV2ZXJzZSAtIFdoZXRoZXIgYW5pbWF0aW9uIHNob3VsZCBwbGF5IGluIHJldmVyc2UuCiAgKi8KICBwbGF5QW5pbWF0aW9uOiBmdW5jdGlvbiAoZ2VzdHVyZSwgbGFzdEdlc3R1cmUsIHJldmVyc2UpIHsKICAgIHZhciBjbGlwOwogICAgdmFyIGZyb21BY3Rpb247CiAgICB2YXIgbWVzaCA9IHRoaXMuZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKTsKICAgIHZhciB0b0FjdGlvbjsKCiAgICBpZiAoIW1lc2gpIHsgcmV0dXJuOyB9CgogICAgLy8gU3RvcCBhbGwgY3VycmVudCBhbmltYXRpb25zLgogICAgbWVzaC5taXhlci5zdG9wQWxsQWN0aW9uKCk7CgogICAgLy8gR3JhYiBjbGlwIGFjdGlvbi4KICAgIGNsaXAgPSB0aGlzLmdldENsaXAoZ2VzdHVyZSk7CiAgICB0b0FjdGlvbiA9IG1lc2gubWl4ZXIuY2xpcEFjdGlvbihjbGlwKTsKICAgIHRvQWN0aW9uLmNsYW1wV2hlbkZpbmlzaGVkID0gdHJ1ZTsKICAgIHRvQWN0aW9uLmxvb3AgPSBUSFJFRS5Mb29wUmVwZWF0OwogICAgdG9BY3Rpb24ucmVwZXRpdGlvbnMgPSAwOwogICAgdG9BY3Rpb24udGltZVNjYWxlID0gcmV2ZXJzZSA/IC0xIDogMTsKICAgIHRvQWN0aW9uLnRpbWUgPSByZXZlcnNlID8gY2xpcC5kdXJhdGlvbiA6IDA7CiAgICB0b0FjdGlvbi53ZWlnaHQgPSAxOwoKICAgIC8vIE5vIGdlc3R1cmUgdG8gZ2VzdHVyZSBvciBnZXN0dXJlIHRvIG5vIGdlc3R1cmUuCiAgICBpZiAoIWxhc3RHZXN0dXJlIHx8IGdlc3R1cmUgPT09IGxhc3RHZXN0dXJlKSB7CiAgICAgIC8vIFN0b3AgYWxsIGN1cnJlbnQgYW5pbWF0aW9ucy4KICAgICAgbWVzaC5taXhlci5zdG9wQWxsQWN0aW9uKCk7CiAgICAgIC8vIFBsYXkgYW5pbWF0aW9uLgogICAgICB0b0FjdGlvbi5wbGF5KCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBBbmltYXRlIG9yIGNyb3NzZmFkZSBmcm9tIGdlc3R1cmUgdG8gZ2VzdHVyZS4KICAgIGNsaXAgPSB0aGlzLmdldENsaXAobGFzdEdlc3R1cmUpOwogICAgZnJvbUFjdGlvbiA9IG1lc2gubWl4ZXIuY2xpcEFjdGlvbihjbGlwKTsKICAgIGZyb21BY3Rpb24ud2VpZ2h0ID0gMC4xNTsKICAgIGZyb21BY3Rpb24ucGxheSgpOwogICAgdG9BY3Rpb24ucGxheSgpOwogICAgZnJvbUFjdGlvbi5jcm9zc0ZhZGVUbyh0b0FjdGlvbiwgMC4xNSwgdHJ1ZSk7CiAgfQp9KTsKCi8qKgogKiBTdWZmaXggZ2VzdHVyZXMgYmFzZWQgb24gdG9nZ2xlIHN0YXRlIChlLmcuLCBvcGVuL2Nsb3NlLCB1cC9kb3duLCBzdGFydC9lbmQpLgogKgogKiBAcGFyYW0ge3N0cmluZ30gZ2VzdHVyZQogKiBAcGFyYW0ge2Jvb2xlYW59IGFjdGl2ZQogKi8KZnVuY3Rpb24gZ2V0R2VzdHVyZUV2ZW50TmFtZSAoZ2VzdHVyZSwgYWN0aXZlKSB7CiAgdmFyIGV2ZW50TmFtZTsKCiAgaWYgKCFnZXN0dXJlKSB7IHJldHVybjsgfQoKICBldmVudE5hbWUgPSBFVkVOVFNbZ2VzdHVyZV07CiAgaWYgKGV2ZW50TmFtZSA9PT0gJ2dyaXAnKSB7CiAgICByZXR1cm4gZXZlbnROYW1lICsgKGFjdGl2ZSA/ICdjbG9zZScgOiAnb3BlbicpOwogIH0KICBpZiAoZXZlbnROYW1lID09PSAncG9pbnQnKSB7CiAgICByZXR1cm4gZXZlbnROYW1lICsgKGFjdGl2ZSA/ICd1cCcgOiAnZG93bicpOwogIH0KICBpZiAoZXZlbnROYW1lID09PSAncG9pbnRpbmcnIHx8IGV2ZW50TmFtZSA9PT0gJ3Bpc3RvbCcpIHsKICAgIHJldHVybiBldmVudE5hbWUgKyAoYWN0aXZlID8gJ3N0YXJ0JyA6ICdlbmQnKTsKICB9Cn0KCmZ1bmN0aW9uIGlzVml2ZUNvbnRyb2xsZXIgKHRyYWNrZWRDb250cm9scykgewogIHZhciBjb250cm9sbGVyID0gdHJhY2tlZENvbnRyb2xzICYmIHRyYWNrZWRDb250cm9scy5jb250cm9sbGVyOwogIHZhciBpc1ZpdmUgPSBjb250cm9sbGVyICYmIChjb250cm9sbGVyLmlkICYmIGNvbnRyb2xsZXIuaWQuaW5kZXhPZignT3BlblZSICcpID09PSAwIHx8CiAgICAoY29udHJvbGxlci5wcm9maWxlcyAmJgogICAgIGNvbnRyb2xsZXIucHJvZmlsZXNbMF0gJiYKICAgICBjb250cm9sbGVyLnByb2ZpbGVzWzBdID09PSAnaHRjLXZpdmUtY29udHJvbGxlci1tdicpKTsKICByZXR1cm4gaXNWaXZlOwp9Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOX1dLDY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygnLi9hbmltYXRpb24nKTsKX2RlcmVxXygnLi9jYW1lcmEnKTsKX2RlcmVxXygnLi9jdXJzb3InKTsKX2RlcmVxXygnLi9kYXlkcmVhbS1jb250cm9scycpOwpfZGVyZXFfKCcuL2dlYXJ2ci1jb250cm9scycpOwpfZGVyZXFfKCcuL2dlb21ldHJ5Jyk7Cl9kZXJlcV8oJy4vZ2VuZXJpYy10cmFja2VkLWNvbnRyb2xsZXItY29udHJvbHMnKTsKX2RlcmVxXygnLi9nbHRmLW1vZGVsJyk7Cl9kZXJlcV8oJy4vaGFuZC1jb250cm9scycpOwpfZGVyZXFfKCcuL2xhc2VyLWNvbnRyb2xzJyk7Cl9kZXJlcV8oJy4vbGlnaHQnKTsKX2RlcmVxXygnLi9saW5lJyk7Cl9kZXJlcV8oJy4vbGluaycpOwpfZGVyZXFfKCcuL2xvb2stY29udHJvbHMnKTsKX2RlcmVxXygnLi9tYWdpY2xlYXAtY29udHJvbHMnKTsKX2RlcmVxXygnLi9tYXRlcmlhbCcpOwpfZGVyZXFfKCcuL29iai1tb2RlbCcpOwpfZGVyZXFfKCcuL29jdWx1cy1nby1jb250cm9scycpOwpfZGVyZXFfKCcuL29jdWx1cy10b3VjaC1jb250cm9scycpOwpfZGVyZXFfKCcuL3Bvc2l0aW9uJyk7Cl9kZXJlcV8oJy4vcmF5Y2FzdGVyJyk7Cl9kZXJlcV8oJy4vcm90YXRpb24nKTsKX2RlcmVxXygnLi9zY2FsZScpOwpfZGVyZXFfKCcuL3NoYWRvdycpOwpfZGVyZXFfKCcuL3NvdW5kJyk7Cl9kZXJlcV8oJy4vdGV4dCcpOwpfZGVyZXFfKCcuL3RyYWNrZWQtY29udHJvbHMnKTsKX2RlcmVxXygnLi90cmFja2VkLWNvbnRyb2xzLXdlYnZyJyk7Cl9kZXJlcV8oJy4vdHJhY2tlZC1jb250cm9scy13ZWJ4cicpOwpfZGVyZXFfKCcuL3Zpc2libGUnKTsKX2RlcmVxXygnLi92aXZlLWNvbnRyb2xzJyk7Cl9kZXJlcV8oJy4vdml2ZS1mb2N1cy1jb250cm9scycpOwpfZGVyZXFfKCcuL3dhc2QtY29udHJvbHMnKTsKX2RlcmVxXygnLi93aW5kb3dzLW1vdGlvbi1jb250cm9scycpOwoKX2RlcmVxXygnLi9zY2VuZS9iYWNrZ3JvdW5kJyk7Cl9kZXJlcV8oJy4vc2NlbmUvZGVidWcnKTsKX2RlcmVxXygnLi9zY2VuZS9kZXZpY2Utb3JpZW50YXRpb24tcGVybWlzc2lvbi11aScpOwpfZGVyZXFfKCcuL3NjZW5lL2VtYmVkZGVkJyk7Cl9kZXJlcV8oJy4vc2NlbmUvaW5zcGVjdG9yJyk7Cl9kZXJlcV8oJy4vc2NlbmUvZm9nJyk7Cl9kZXJlcV8oJy4vc2NlbmUva2V5Ym9hcmQtc2hvcnRjdXRzJyk7Cl9kZXJlcV8oJy4vc2NlbmUvcG9vbCcpOwpfZGVyZXFfKCcuL3NjZW5lL3NjcmVlbnNob3QnKTsKX2RlcmVxXygnLi9zY2VuZS9zdGF0cycpOwpfZGVyZXFfKCcuL3NjZW5lL3ZyLW1vZGUtdWknKTsKCn0seyIuL2FuaW1hdGlvbiI6NTUsIi4vY2FtZXJhIjo1NiwiLi9jdXJzb3IiOjU3LCIuL2RheWRyZWFtLWNvbnRyb2xzIjo1OCwiLi9nZWFydnItY29udHJvbHMiOjU5LCIuL2dlbmVyaWMtdHJhY2tlZC1jb250cm9sbGVyLWNvbnRyb2xzIjo2MCwiLi9nZW9tZXRyeSI6NjEsIi4vZ2x0Zi1tb2RlbCI6NjIsIi4vaGFuZC1jb250cm9scyI6NjMsIi4vbGFzZXItY29udHJvbHMiOjY1LCIuL2xpZ2h0Ijo2NiwiLi9saW5lIjo2NywiLi9saW5rIjo2OCwiLi9sb29rLWNvbnRyb2xzIjo2OSwiLi9tYWdpY2xlYXAtY29udHJvbHMiOjcwLCIuL21hdGVyaWFsIjo3MSwiLi9vYmotbW9kZWwiOjcyLCIuL29jdWx1cy1nby1jb250cm9scyI6NzMsIi4vb2N1bHVzLXRvdWNoLWNvbnRyb2xzIjo3NCwiLi9wb3NpdGlvbiI6NzUsIi4vcmF5Y2FzdGVyIjo3NiwiLi9yb3RhdGlvbiI6NzcsIi4vc2NhbGUiOjc4LCIuL3NjZW5lL2JhY2tncm91bmQiOjc5LCIuL3NjZW5lL2RlYnVnIjo4MCwiLi9zY2VuZS9kZXZpY2Utb3JpZW50YXRpb24tcGVybWlzc2lvbi11aSI6ODEsIi4vc2NlbmUvZW1iZWRkZWQiOjgyLCIuL3NjZW5lL2ZvZyI6ODMsIi4vc2NlbmUvaW5zcGVjdG9yIjo4NCwiLi9zY2VuZS9rZXlib2FyZC1zaG9ydGN1dHMiOjg1LCIuL3NjZW5lL3Bvb2wiOjg2LCIuL3NjZW5lL3NjcmVlbnNob3QiOjg3LCIuL3NjZW5lL3N0YXRzIjo4OCwiLi9zY2VuZS92ci1tb2RlLXVpIjo4OSwiLi9zaGFkb3ciOjkwLCIuL3NvdW5kIjo5MSwiLi90ZXh0Ijo5MiwiLi90cmFja2VkLWNvbnRyb2xzIjo5NSwiLi90cmFja2VkLWNvbnRyb2xzLXdlYnZyIjo5MywiLi90cmFja2VkLWNvbnRyb2xzLXdlYnhyIjo5NCwiLi92aXNpYmxlIjo5NiwiLi92aXZlLWNvbnRyb2xzIjo5NywiLi92aXZlLWZvY3VzLWNvbnRyb2xzIjo5OCwiLi93YXNkLWNvbnRyb2xzIjo5OSwiLi93aW5kb3dzLW1vdGlvbi1jb250cm9scyI6MTAwfV0sNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKCnJlZ2lzdGVyQ29tcG9uZW50KCdsYXNlci1jb250cm9scycsIHsKICBzY2hlbWE6IHsKICAgIGhhbmQ6IHtkZWZhdWx0OiAncmlnaHQnfSwKICAgIG1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBkZWZhdWx0TW9kZWxDb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICdncmV5J30KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgY29udHJvbHNDb25maWd1cmF0aW9uID0ge2hhbmQ6IGRhdGEuaGFuZCwgbW9kZWw6IGRhdGEubW9kZWx9OwoKICAgIC8vIFNldCBhbGwgY29udHJvbGxlciBtb2RlbHMuCiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RheWRyZWFtLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnZ2VhcnZyLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnbWFnaWNsZWFwLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnb2N1bHVzLWdvLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnb2N1bHVzLXRvdWNoLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgndml2ZS1jb250cm9scycsIGNvbnRyb2xzQ29uZmlndXJhdGlvbik7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3ZpdmUtZm9jdXMtY29udHJvbHMnLCBjb250cm9sc0NvbmZpZ3VyYXRpb24pOwogICAgZWwuc2V0QXR0cmlidXRlKCd3aW5kb3dzLW1vdGlvbi1jb250cm9scycsIGNvbnRyb2xzQ29uZmlndXJhdGlvbik7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2dlbmVyaWMtdHJhY2tlZC1jb250cm9sbGVyLWNvbnRyb2xzJywgY29udHJvbHNDb25maWd1cmF0aW9uKTsKCiAgICAvLyBXYWl0IGZvciBjb250cm9sbGVyIHRvIGNvbm5lY3QsIG9yIGhhdmUgYSB2YWxpZCBwb2ludGluZyBwb3NlLCBiZWZvcmUgY3JlYXRpbmcgcmF5CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyY29ubmVjdGVkJywgY3JlYXRlUmF5KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJkaXNjb25uZWN0ZWQnLCBoaWRlUmF5KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJtb2RlbHJlYWR5JywgZnVuY3Rpb24gKGV2dCkgewogICAgICBjcmVhdGVSYXkoZXZ0KTsKICAgICAgc2VsZi5tb2RlbFJlYWR5ID0gdHJ1ZTsKICAgIH0pOwoKICAgIGZ1bmN0aW9uIGNyZWF0ZVJheSAoZXZ0KSB7CiAgICAgIHZhciBjb250cm9sbGVyQ29uZmlnID0gY29uZmlnW2V2dC5kZXRhaWwubmFtZV07CgogICAgICBpZiAoIWNvbnRyb2xsZXJDb25maWcpIHsgcmV0dXJuOyB9CgogICAgICAvLyBTaG93IHRoZSBsaW5lIHVubGVzcyBhIHBhcnRpY3VsYXIgY29uZmlnIG9wdHMgdG8gaGlkZSBpdCwgdW50aWwgYSBjb250cm9sbGVybW9kZWxyZWFkeQogICAgICAvLyBldmVudCBjb21lcyB0aHJvdWdoLgogICAgICB2YXIgcmF5Y2FzdGVyQ29uZmlnID0gdXRpbHMuZXh0ZW5kKHsKICAgICAgICBzaG93TGluZTogdHJ1ZQogICAgICB9LCBjb250cm9sbGVyQ29uZmlnLnJheWNhc3RlciB8fCB7fSk7CgogICAgICAvLyBUaGUgY29udHJvbGxlcm1vZGVscmVhZHkgZXZlbnQgY29udGFpbnMgYSByYXlPcmlnaW4gdGhhdCB0YWtlcyBpbnRvIGFjY291bnQKICAgICAgLy8gb2Zmc2V0cyBzcGVjaWZpYyB0byB0aGUgbG9hZGVkIG1vZGVsLgogICAgICBpZiAoZXZ0LmRldGFpbC5yYXlPcmlnaW4pIHsKICAgICAgICByYXljYXN0ZXJDb25maWcub3JpZ2luID0gZXZ0LmRldGFpbC5yYXlPcmlnaW4ub3JpZ2luOwogICAgICAgIHJheWNhc3RlckNvbmZpZy5kaXJlY3Rpb24gPSBldnQuZGV0YWlsLnJheU9yaWdpbi5kaXJlY3Rpb247CiAgICAgICAgcmF5Y2FzdGVyQ29uZmlnLnNob3dMaW5lID0gdHJ1ZTsKICAgICAgfQoKICAgICAgLy8gT25seSBhcHBseSBhIGRlZmF1bHQgcmF5Y2FzdGVyIGlmIGl0IGRvZXMgbm90IHlldCBleGlzdC4gVGhpcyBwcmV2ZW50cyBpdCBvdmVyd3JpdGluZwogICAgICAvLyBjb25maWcgYXBwbGllZCBmcm9tIGEgY29udHJvbGxlcm1vZGVscmVhZHkgZXZlbnQuCiAgICAgIGlmIChldnQuZGV0YWlsLnJheU9yaWdpbiB8fCAhc2VsZi5tb2RlbFJlYWR5KSB7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdyYXljYXN0ZXInLCByYXljYXN0ZXJDb25maWcpOwogICAgICB9IGVsc2UgewogICAgICAgIGVsLnNldEF0dHJpYnV0ZSgncmF5Y2FzdGVyJywgJ3Nob3dMaW5lJywgdHJ1ZSk7CiAgICAgIH0KCiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY3Vyc29yJywgdXRpbHMuZXh0ZW5kKHsKICAgICAgICBmdXNlOiBmYWxzZQogICAgICB9LCBjb250cm9sbGVyQ29uZmlnLmN1cnNvcikpOwogICAgfQoKICAgIGZ1bmN0aW9uIGhpZGVSYXkgKCkgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JheWNhc3RlcicsICdzaG93TGluZScsIGZhbHNlKTsKICAgIH0KICB9LAoKICBjb25maWc6IHsKICAgICdkYXlkcmVhbS1jb250cm9scyc6IHsKICAgICAgY3Vyc29yOiB7ZG93bkV2ZW50czogWyd0cmFja3BhZGRvd24nLCAndHJpZ2dlcmRvd24nXSwgdXBFdmVudHM6IFsndHJhY2twYWR1cCcsICd0cmlnZ2VydXAnXX0KICAgIH0sCgogICAgJ2dlYXJ2ci1jb250cm9scyc6IHsKICAgICAgY3Vyc29yOiB7ZG93bkV2ZW50czogWyd0cmlnZ2VyZG93biddLCB1cEV2ZW50czogWyd0cmlnZ2VydXAnXX0sCiAgICAgIHJheWNhc3Rlcjoge29yaWdpbjoge3g6IDAsIHk6IDAuMDAxMCwgejogMH19CiAgICB9LAoKICAgICdnZW5lcmljLXRyYWNrZWQtY29udHJvbGxlci1jb250cm9scyc6IHsKICAgICAgY3Vyc29yOiB7ZG93bkV2ZW50czogWyd0cmlnZ2VyZG93biddLCB1cEV2ZW50czogWyd0cmlnZ2VydXAnXX0KICAgIH0sCgogICAgJ21hZ2ljbGVhcC1jb250cm9scyc6IHsKICAgICAgY3Vyc29yOiB7ZG93bkV2ZW50czogWyd0cmFja3BhZGRvd24nLCAndHJpZ2dlcmRvd24nXSwgdXBFdmVudHM6IFsndHJhY2twYWR1cCcsICd0cmlnZ2VydXAnXX0KICAgIH0sCgogICAgJ29jdWx1cy1nby1jb250cm9scyc6IHsKICAgICAgY3Vyc29yOiB7ZG93bkV2ZW50czogWyd0cmlnZ2VyZG93biddLCB1cEV2ZW50czogWyd0cmlnZ2VydXAnXX0sCiAgICAgIHJheWNhc3Rlcjoge29yaWdpbjoge3g6IDAsIHk6IDAuMDAwNSwgejogMH19CiAgICB9LAoKICAgICdvY3VsdXMtdG91Y2gtY29udHJvbHMnOiB7CiAgICAgIGN1cnNvcjoge2Rvd25FdmVudHM6IFsndHJpZ2dlcmRvd24nXSwgdXBFdmVudHM6IFsndHJpZ2dlcnVwJ119LAogICAgICByYXljYXN0ZXI6IHtvcmlnaW46IHt4OiAwLCB5OiAwLCB6OiAwfX0KICAgIH0sCgogICAgJ3ZpdmUtY29udHJvbHMnOiB7CiAgICAgIGN1cnNvcjoge2Rvd25FdmVudHM6IFsndHJpZ2dlcmRvd24nXSwgdXBFdmVudHM6IFsndHJpZ2dlcnVwJ119CiAgICB9LAoKICAgICd2aXZlLWZvY3VzLWNvbnRyb2xzJzogewogICAgICBjdXJzb3I6IHtkb3duRXZlbnRzOiBbJ3RyYWNrcGFkZG93bicsICd0cmlnZ2VyZG93biddLCB1cEV2ZW50czogWyd0cmFja3BhZHVwJywgJ3RyaWdnZXJ1cCddfQogICAgfSwKCiAgICAnd2luZG93cy1tb3Rpb24tY29udHJvbHMnOiB7CiAgICAgIGN1cnNvcjoge2Rvd25FdmVudHM6IFsndHJpZ2dlcmRvd24nXSwgdXBFdmVudHM6IFsndHJpZ2dlcnVwJ119LAogICAgICByYXljYXN0ZXI6IHtzaG93TGluZTogZmFsc2V9CiAgICB9CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi91dGlscy8iOjE4Mn1dLDY2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7CnZhciBkaWZmID0gX2RlcmVxXygnLi4vdXRpbHMnKS5kaWZmOwp2YXIgZGVidWcgPSBfZGVyZXFfKCcuLi91dGlscy9kZWJ1ZycpOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBkZWdUb1JhZCA9IFRIUkVFLk1hdGguZGVnVG9SYWQ7CnZhciB3YXJuID0gZGVidWcoJ2NvbXBvbmVudHM6bGlnaHQ6d2FybicpOwoKLyoqCiAqIExpZ2h0IGNvbXBvbmVudC4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdsaWdodCcsIHsKICBzY2hlbWE6IHsKICAgIGFuZ2xlOiB7ZGVmYXVsdDogNjAsIGlmOiB7dHlwZTogWydzcG90J119fSwKICAgIGNvbG9yOiB7dHlwZTogJ2NvbG9yJ30sCiAgICBncm91bmRDb2xvcjoge3R5cGU6ICdjb2xvcicsIGlmOiB7dHlwZTogWydoZW1pc3BoZXJlJ119fSwKICAgIGRlY2F5OiB7ZGVmYXVsdDogMSwgaWY6IHt0eXBlOiBbJ3BvaW50JywgJ3Nwb3QnXX19LAogICAgZGlzdGFuY2U6IHtkZWZhdWx0OiAwLjAsIG1pbjogMCwgaWY6IHt0eXBlOiBbJ3BvaW50JywgJ3Nwb3QnXX19LAogICAgaW50ZW5zaXR5OiB7ZGVmYXVsdDogMS4wLCBtaW46IDAsIGlmOiB7dHlwZTogWydhbWJpZW50JywgJ2RpcmVjdGlvbmFsJywgJ2hlbWlzcGhlcmUnLCAncG9pbnQnLCAnc3BvdCddfX0sCiAgICBwZW51bWJyYToge2RlZmF1bHQ6IDAsIG1pbjogMCwgbWF4OiAxLCBpZjoge3R5cGU6IFsnc3BvdCddfX0sCiAgICB0eXBlOiB7CiAgICAgIGRlZmF1bHQ6ICdkaXJlY3Rpb25hbCcsCiAgICAgIG9uZU9mOiBbJ2FtYmllbnQnLCAnZGlyZWN0aW9uYWwnLCAnaGVtaXNwaGVyZScsICdwb2ludCcsICdzcG90J10sCiAgICAgIHNjaGVtYUNoYW5nZTogdHJ1ZQogICAgfSwKICAgIHRhcmdldDoge3R5cGU6ICdzZWxlY3RvcicsIGlmOiB7dHlwZTogWydzcG90JywgJ2RpcmVjdGlvbmFsJ119fSwKCiAgICAvLyBTaGFkb3dzLgogICAgY2FzdFNoYWRvdzoge2RlZmF1bHQ6IGZhbHNlLCBpZjoge3R5cGU6IFsncG9pbnQnLCAnc3BvdCcsICdkaXJlY3Rpb25hbCddfX0sCiAgICBzaGFkb3dCaWFzOiB7ZGVmYXVsdDogMCwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dDYW1lcmFGYXI6IHtkZWZhdWx0OiA1MDAsIGlmOiB7Y2FzdFNoYWRvdzogdHJ1ZX19LAogICAgc2hhZG93Q2FtZXJhRm92OiB7ZGVmYXVsdDogOTAsIGlmOiB7Y2FzdFNoYWRvdzogdHJ1ZX19LAogICAgc2hhZG93Q2FtZXJhTmVhcjoge2RlZmF1bHQ6IDAuNSwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dDYW1lcmFUb3A6IHtkZWZhdWx0OiA1LCBpZjoge2Nhc3RTaGFkb3c6IHRydWV9fSwKICAgIHNoYWRvd0NhbWVyYVJpZ2h0OiB7ZGVmYXVsdDogNSwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dDYW1lcmFCb3R0b206IHtkZWZhdWx0OiAtNSwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dDYW1lcmFMZWZ0OiB7ZGVmYXVsdDogLTUsIGlmOiB7Y2FzdFNoYWRvdzogdHJ1ZX19LAogICAgc2hhZG93Q2FtZXJhVmlzaWJsZToge2RlZmF1bHQ6IGZhbHNlLCBpZjoge2Nhc3RTaGFkb3c6IHRydWV9fSwKICAgIHNoYWRvd01hcEhlaWdodDoge2RlZmF1bHQ6IDUxMiwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dNYXBXaWR0aDoge2RlZmF1bHQ6IDUxMiwgaWY6IHtjYXN0U2hhZG93OiB0cnVlfX0sCiAgICBzaGFkb3dSYWRpdXM6IHtkZWZhdWx0OiAxLCBpZjoge2Nhc3RTaGFkb3c6IHRydWV9fQogIH0sCgogIC8qKgogICAqIE5vdGlmaWVzIHNjZW5lIGEgbGlnaHQgaGFzIGJlZW4gYWRkZWQgdG8gcmVtb3ZlIGRlZmF1bHQgbGlnaHRpbmcuCiAgICovCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHRoaXMubGlnaHQgPSBudWxsOwogICAgdGhpcy5kZWZhdWx0VGFyZ2V0ID0gbnVsbDsKICAgIHRoaXMucmVuZGVyZXJTeXN0ZW0gPSB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtcy5yZW5kZXJlcjsKICAgIHRoaXMuc3lzdGVtLnJlZ2lzdGVyTGlnaHQoZWwpOwogIH0sCgogIC8qKgogICAqIChSZSljcmVhdGUgb3IgdXBkYXRlIGxpZ2h0LgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGRpZmZEYXRhID0gZGlmZihkYXRhLCBvbGREYXRhKTsKICAgIHZhciBsaWdodCA9IHRoaXMubGlnaHQ7CiAgICB2YXIgcmVuZGVyZXJTeXN0ZW0gPSB0aGlzLnJlbmRlcmVyU3lzdGVtOwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIC8vIEV4aXN0aW5nIGxpZ2h0LgogICAgaWYgKGxpZ2h0ICYmICEoJ3R5cGUnIGluIGRpZmZEYXRhKSkgewogICAgICB2YXIgc2hhZG93c0xvYWRlZCA9IGZhbHNlOwogICAgICAvLyBMaWdodCB0eXBlIGhhcyBub3QgY2hhbmdlZC4gVXBkYXRlIGxpZ2h0LgogICAgICBPYmplY3Qua2V5cyhkaWZmRGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtrZXldOwoKICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgY2FzZSAnY29sb3InOiB7CiAgICAgICAgICAgIGxpZ2h0LmNvbG9yLnNldCh2YWx1ZSk7CiAgICAgICAgICAgIHJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKGxpZ2h0LmNvbG9yKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgY2FzZSAnZ3JvdW5kQ29sb3InOiB7CiAgICAgICAgICAgIGxpZ2h0Lmdyb3VuZENvbG9yLnNldCh2YWx1ZSk7CiAgICAgICAgICAgIHJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKGxpZ2h0Lmdyb3VuZENvbG9yKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgY2FzZSAnYW5nbGUnOiB7CiAgICAgICAgICAgIGxpZ2h0LmFuZ2xlID0gZGVnVG9SYWQodmFsdWUpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlICd0YXJnZXQnOiB7CiAgICAgICAgICAgIC8vIFJlc2V0IHRhcmdldCBpZiBzZWxlY3RvciBpcyBudWxsLgogICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnc3BvdCcgfHwgZGF0YS50eXBlID09PSAnZGlyZWN0aW9uYWwnKSB7CiAgICAgICAgICAgICAgICBsaWdodC50YXJnZXQgPSBzZWxmLmRlZmF1bHRUYXJnZXQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIFRhcmdldCBzcGVjaWZpZWQsIHNldCB0YXJnZXQgdG8gZW50aXR5J3MgYG9iamVjdDNEYCB3aGVuIGl0IGlzIGxvYWRlZC4KICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzTG9hZGVkKSB7CiAgICAgICAgICAgICAgICBzZWxmLm9uU2V0VGFyZ2V0KHZhbHVlLCBsaWdodCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGJpbmQoc2VsZi5vblNldFRhcmdldCwgc2VsZiwgdmFsdWUsIGxpZ2h0KSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIGNhc2UgJ2Nhc3RTaGFkb3cnOgogICAgICAgICAgY2FzZSAnc2hhZG93Qmlhcyc6CiAgICAgICAgICBjYXNlICdzaGFkb3dDYW1lcmFGYXInOgogICAgICAgICAgY2FzZSAnc2hhZG93Q2FtZXJhRm92JzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd0NhbWVyYU5lYXInOgogICAgICAgICAgY2FzZSAnc2hhZG93Q2FtZXJhVG9wJzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd0NhbWVyYVJpZ2h0JzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd0NhbWVyYUJvdHRvbSc6CiAgICAgICAgICBjYXNlICdzaGFkb3dDYW1lcmFMZWZ0JzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd0NhbWVyYVZpc2libGUnOgogICAgICAgICAgY2FzZSAnc2hhZG93TWFwSGVpZ2h0JzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd01hcFdpZHRoJzoKICAgICAgICAgIGNhc2UgJ3NoYWRvd1JhZGl1cyc6CiAgICAgICAgICAgIGlmICghc2hhZG93c0xvYWRlZCkgewogICAgICAgICAgICAgIHNlbGYudXBkYXRlU2hhZG93KCk7CiAgICAgICAgICAgICAgc2hhZG93c0xvYWRlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICBsaWdodFtrZXldID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIE5vIGxpZ2h0IHlldCBvciBsaWdodCB0eXBlIGhhcyBjaGFuZ2VkLiBDcmVhdGUgYW5kIGFkZCBsaWdodC4KICAgIHRoaXMuc2V0TGlnaHQodGhpcy5kYXRhKTsKICAgIHRoaXMudXBkYXRlU2hhZG93KCk7CiAgfSwKCiAgc2V0TGlnaHQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIG5ld0xpZ2h0ID0gdGhpcy5nZXRMaWdodChkYXRhKTsKICAgIGlmIChuZXdMaWdodCkgewogICAgICBpZiAodGhpcy5saWdodCkgewogICAgICAgIGVsLnJlbW92ZU9iamVjdDNEKCdsaWdodCcpOwogICAgICB9CgogICAgICB0aGlzLmxpZ2h0ID0gbmV3TGlnaHQ7CiAgICAgIHRoaXMubGlnaHQuZWwgPSBlbDsKICAgICAgZWwuc2V0T2JqZWN0M0QoJ2xpZ2h0JywgdGhpcy5saWdodCk7CgogICAgICAvLyBIQUNLIHNvbHV0aW9uIGZvciBpc3N1ZSAjMTYyNAogICAgICBpZiAoZGF0YS50eXBlID09PSAnc3BvdCcgfHwgZGF0YS50eXBlID09PSAnZGlyZWN0aW9uYWwnIHx8IGRhdGEudHlwZSA9PT0gJ2hlbWlzcGhlcmUnKSB7CiAgICAgICAgZWwuZ2V0T2JqZWN0M0QoJ2xpZ2h0JykudHJhbnNsYXRlWSgtMSk7CiAgICAgIH0KCiAgICAgIC8vIHNldCBhbmQgcG9zaXRpb24gZGVmYXVsdCBsaWdodHRhcmdldCBhcyBhIGNoaWxkIHRvIGVuYWJsZSBzcG90bGlnaHQgb3JpZW50YXRpb24KICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ3Nwb3QnKSB7CiAgICAgICAgZWwuc2V0T2JqZWN0M0QoJ2xpZ2h0LXRhcmdldCcsIHRoaXMuZGVmYXVsdFRhcmdldCk7CiAgICAgICAgZWwuZ2V0T2JqZWN0M0QoJ2xpZ2h0LXRhcmdldCcpLnBvc2l0aW9uLnNldCgwLCAwLCAtMSk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGVzIHNoYWRvdy1yZWxhdGVkIHByb3BlcnRpZXMgb24gdGhlIGN1cnJlbnQgbGlnaHQuCiAgICovCiAgdXBkYXRlU2hhZG93OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgbGlnaHQgPSB0aGlzLmxpZ2h0OwoKICAgIGxpZ2h0LmNhc3RTaGFkb3cgPSBkYXRhLmNhc3RTaGFkb3c7CgogICAgLy8gU2hhZG93IGNhbWVyYSBoZWxwZXIuCiAgICB2YXIgY2FtZXJhSGVscGVyID0gZWwuZ2V0T2JqZWN0M0QoJ2NhbWVyYUhlbHBlcicpOwogICAgaWYgKGRhdGEuc2hhZG93Q2FtZXJhVmlzaWJsZSAmJiAhY2FtZXJhSGVscGVyKSB7CiAgICAgIGVsLnNldE9iamVjdDNEKCdjYW1lcmFIZWxwZXInLCBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKGxpZ2h0LnNoYWRvdy5jYW1lcmEpKTsKICAgIH0gZWxzZSBpZiAoIWRhdGEuc2hhZG93Q2FtZXJhVmlzaWJsZSAmJiBjYW1lcmFIZWxwZXIpIHsKICAgICAgZWwucmVtb3ZlT2JqZWN0M0QoJ2NhbWVyYUhlbHBlcicpOwogICAgfQoKICAgIGlmICghZGF0YS5jYXN0U2hhZG93KSB7IHJldHVybiBsaWdodDsgfQoKICAgIC8vIFNoYWRvdyBhcHBlYXJhbmNlLgogICAgbGlnaHQuc2hhZG93LmJpYXMgPSBkYXRhLnNoYWRvd0JpYXM7CiAgICBsaWdodC5zaGFkb3cucmFkaXVzID0gZGF0YS5zaGFkb3dSYWRpdXM7CiAgICBsaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSBkYXRhLnNoYWRvd01hcEhlaWdodDsKICAgIGxpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gZGF0YS5zaGFkb3dNYXBXaWR0aDsKCiAgICAvLyBTaGFkb3cgY2FtZXJhLgogICAgbGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gZGF0YS5zaGFkb3dDYW1lcmFOZWFyOwogICAgbGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSBkYXRhLnNoYWRvd0NhbWVyYUZhcjsKICAgIGlmIChsaWdodC5zaGFkb3cuY2FtZXJhIGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7CiAgICAgIGxpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gZGF0YS5zaGFkb3dDYW1lcmFUb3A7CiAgICAgIGxpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSBkYXRhLnNoYWRvd0NhbWVyYVJpZ2h0OwogICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IGRhdGEuc2hhZG93Q2FtZXJhQm90dG9tOwogICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSBkYXRhLnNoYWRvd0NhbWVyYUxlZnQ7CiAgICB9IGVsc2UgewogICAgICBsaWdodC5zaGFkb3cuY2FtZXJhLmZvdiA9IGRhdGEuc2hhZG93Q2FtZXJhRm92OwogICAgfQogICAgbGlnaHQuc2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7CgogICAgaWYgKGNhbWVyYUhlbHBlcikgeyBjYW1lcmFIZWxwZXIudXBkYXRlKCk7IH0KICB9LAoKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IHRocmVlLmpzIGxpZ2h0IG9iamVjdCBnaXZlbiBkYXRhIG9iamVjdCBkZWZpbmluZyB0aGUgbGlnaHQuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YQogICAqLwogIGdldExpZ2h0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdmFyIGFuZ2xlID0gZGF0YS5hbmdsZTsKICAgIHZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcihkYXRhLmNvbG9yKTsKICAgIHRoaXMucmVuZGVyZXJTeXN0ZW0uYXBwbHlDb2xvckNvcnJlY3Rpb24oY29sb3IpOwogICAgY29sb3IgPSBjb2xvci5nZXRIZXgoKTsKICAgIHZhciBkZWNheSA9IGRhdGEuZGVjYXk7CiAgICB2YXIgZGlzdGFuY2UgPSBkYXRhLmRpc3RhbmNlOwogICAgdmFyIGdyb3VuZENvbG9yID0gbmV3IFRIUkVFLkNvbG9yKGRhdGEuZ3JvdW5kQ29sb3IpOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihncm91bmRDb2xvcik7CiAgICBncm91bmRDb2xvciA9IGdyb3VuZENvbG9yLmdldEhleCgpOwogICAgdmFyIGludGVuc2l0eSA9IGRhdGEuaW50ZW5zaXR5OwogICAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7CiAgICB2YXIgdGFyZ2V0ID0gZGF0YS50YXJnZXQ7CiAgICB2YXIgbGlnaHQgPSBudWxsOwoKICAgIHN3aXRjaCAodHlwZS50b0xvd2VyQ2FzZSgpKSB7CiAgICAgIGNhc2UgJ2FtYmllbnQnOiB7CiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoY29sb3IsIGludGVuc2l0eSk7CiAgICAgIH0KCiAgICAgIGNhc2UgJ2RpcmVjdGlvbmFsJzogewogICAgICAgIGxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoY29sb3IsIGludGVuc2l0eSk7CiAgICAgICAgdGhpcy5kZWZhdWx0VGFyZ2V0ID0gbGlnaHQudGFyZ2V0OwogICAgICAgIGlmICh0YXJnZXQpIHsKICAgICAgICAgIGlmICh0YXJnZXQuaGFzTG9hZGVkKSB7CiAgICAgICAgICAgIHRoaXMub25TZXRUYXJnZXQodGFyZ2V0LCBsaWdodCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkJywgYmluZCh0aGlzLm9uU2V0VGFyZ2V0LCB0aGlzLCB0YXJnZXQsIGxpZ2h0KSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBsaWdodDsKICAgICAgfQoKICAgICAgY2FzZSAnaGVtaXNwaGVyZSc6IHsKICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodChjb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSk7CiAgICAgIH0KCiAgICAgIGNhc2UgJ3BvaW50JzogewogICAgICAgIHJldHVybiBuZXcgVEhSRUUuUG9pbnRMaWdodChjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkpOwogICAgICB9CgogICAgICBjYXNlICdzcG90JzogewogICAgICAgIGxpZ2h0ID0gbmV3IFRIUkVFLlNwb3RMaWdodChjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVnVG9SYWQoYW5nbGUpLCBkYXRhLnBlbnVtYnJhLCBkZWNheSk7CiAgICAgICAgdGhpcy5kZWZhdWx0VGFyZ2V0ID0gbGlnaHQudGFyZ2V0OwogICAgICAgIGlmICh0YXJnZXQpIHsKICAgICAgICAgIGlmICh0YXJnZXQuaGFzTG9hZGVkKSB7CiAgICAgICAgICAgIHRoaXMub25TZXRUYXJnZXQodGFyZ2V0LCBsaWdodCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkJywgYmluZCh0aGlzLm9uU2V0VGFyZ2V0LCB0aGlzLCB0YXJnZXQsIGxpZ2h0KSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBsaWdodDsKICAgICAgfQoKICAgICAgZGVmYXVsdDogewogICAgICAgIHdhcm4oJyVzIGlzIG5vdCBhIHZhbGlkIGxpZ2h0IHR5cGUuICcgKwogICAgICAgICAgICdDaG9vc2UgZnJvbSBhbWJpZW50LCBkaXJlY3Rpb25hbCwgaGVtaXNwaGVyZSwgcG9pbnQsIHNwb3QuJywgdHlwZSk7CiAgICAgIH0KICAgIH0KICB9LAoKICBvblNldFRhcmdldDogZnVuY3Rpb24gKHRhcmdldEVsLCBsaWdodCkgewogICAgbGlnaHQudGFyZ2V0ID0gdGFyZ2V0RWwub2JqZWN0M0Q7CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIGxpZ2h0IG9uIHJlbW92ZSAoY2FsbGJhY2spLgogICAqLwogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIGVsLnJlbW92ZU9iamVjdDNEKCdsaWdodCcpOwogICAgaWYgKGVsLmdldE9iamVjdDNEKCdjYW1lcmFIZWxwZXInKSkgewogICAgICBlbC5yZW1vdmVPYmplY3QzRCgnY2FtZXJhSGVscGVyJyk7CiAgICB9CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMiOjE4MiwiLi4vdXRpbHMvYmluZCI6MTc2LCIuLi91dGlscy9kZWJ1ZyI6MTc4fV0sNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiBnbG9iYWwgVEhSRUUgKi8KdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdsaW5lJywgewogIHNjaGVtYTogewogICAgc3RhcnQ6IHt0eXBlOiAndmVjMycsIGRlZmF1bHQ6IHt4OiAwLCB5OiAwLCB6OiAwfX0sCiAgICBlbmQ6IHt0eXBlOiAndmVjMycsIGRlZmF1bHQ6IHt4OiAwLCB5OiAwLCB6OiAwfX0sCiAgICBjb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjNzRCRUMxJ30sCiAgICBvcGFjaXR5OiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDF9LAogICAgdmlzaWJsZToge2RlZmF1bHQ6IHRydWV9CiAgfSwKCiAgbXVsdGlwbGU6IHRydWUsCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGdlb21ldHJ5OwogICAgdmFyIG1hdGVyaWFsOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbSA9IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLnJlbmRlcmVyOwogICAgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsKICAgICAgY29sb3I6IGRhdGEuY29sb3IsCiAgICAgIG9wYWNpdHk6IGRhdGEub3BhY2l0eSwKICAgICAgdHJhbnNwYXJlbnQ6IGRhdGEub3BhY2l0eSA8IDEsCiAgICAgIHZpc2libGU6IGRhdGEudmlzaWJsZQogICAgfSk7CiAgICBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTsKICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoMiAqIDMpLCAzKSk7CgogICAgdGhpcy5yZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihtYXRlcmlhbC5jb2xvcik7CiAgICB0aGlzLmxpbmUgPSBuZXcgVEhSRUUuTGluZShnZW9tZXRyeSwgbWF0ZXJpYWwpOwogICAgdGhpcy5lbC5zZXRPYmplY3QzRCh0aGlzLmF0dHJOYW1lLCB0aGlzLmxpbmUpOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKICAgIHZhciBnZW9OZWVkc1VwZGF0ZSA9IGZhbHNlOwogICAgdmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDsKICAgIHZhciBwb3NpdGlvbkFycmF5ID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTsKCiAgICAvLyBVcGRhdGUgZ2VvbWV0cnkuCiAgICBpZiAoIWlzRXF1YWxWZWMzKGRhdGEuc3RhcnQsIG9sZERhdGEuc3RhcnQpKSB7CiAgICAgIHBvc2l0aW9uQXJyYXlbMF0gPSBkYXRhLnN0YXJ0Lng7CiAgICAgIHBvc2l0aW9uQXJyYXlbMV0gPSBkYXRhLnN0YXJ0Lnk7CiAgICAgIHBvc2l0aW9uQXJyYXlbMl0gPSBkYXRhLnN0YXJ0Lno7CiAgICAgIGdlb05lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIH0KCiAgICBpZiAoIWlzRXF1YWxWZWMzKGRhdGEuZW5kLCBvbGREYXRhLmVuZCkpIHsKICAgICAgcG9zaXRpb25BcnJheVszXSA9IGRhdGEuZW5kLng7CiAgICAgIHBvc2l0aW9uQXJyYXlbNF0gPSBkYXRhLmVuZC55OwogICAgICBwb3NpdGlvbkFycmF5WzVdID0gZGF0YS5lbmQuejsKICAgICAgZ2VvTmVlZHNVcGRhdGUgPSB0cnVlOwogICAgfQoKICAgIGlmIChnZW9OZWVkc1VwZGF0ZSkgewogICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgICAgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7CiAgICB9CgogICAgbWF0ZXJpYWwuY29sb3Iuc2V0U3R5bGUoZGF0YS5jb2xvcik7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKG1hdGVyaWFsLmNvbG9yKTsKICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBkYXRhLm9wYWNpdHk7CiAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGRhdGEub3BhY2l0eSA8IDE7CiAgICBtYXRlcmlhbC52aXNpYmxlID0gZGF0YS52aXNpYmxlOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5yZW1vdmVPYmplY3QzRCgnbGluZScsIHRoaXMubGluZSk7CiAgfQp9KTsKCmZ1bmN0aW9uIGlzRXF1YWxWZWMzIChhLCBiKSB7CiAgaWYgKCFhIHx8ICFiKSB7IHJldHVybiBmYWxzZTsgfQogIHJldHVybiAoYS54ID09PSBiLnggJiYgYS55ID09PSBiLnkgJiYgYS56ID09PSBiLnopOwp9Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOX1dLDY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIHJlZ2lzdGVyU2hhZGVyID0gX2RlcmVxXygnLi4vY29yZS9zaGFkZXInKS5yZWdpc3RlclNoYWRlcjsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CgovKioKICogTGluayBjb21wb25lbnQuIENvbm5lY3QgZXhwZXJpZW5jZXMgYW5kIHRyYXZlcnNlIGJldHdlZW4gdGhlbSBpbiBWUgogKgogKiBAbWVtYmVyIHtvYmplY3R9IGhpZGRlbkVscyAtIFN0b3JlIHRoZSBoaWRkZW4gZWxlbWVudHMgZHVyaW5nIHBlZWsgbW9kZS4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdsaW5rJywgewogIHNjaGVtYTogewogICAgYmFja2dyb3VuZENvbG9yOiB7ZGVmYXVsdDogJ3JlZCcsIHR5cGU6ICdjb2xvcid9LAogICAgYm9yZGVyQ29sb3I6IHtkZWZhdWx0OiAnd2hpdGUnLCB0eXBlOiAnY29sb3InfSwKICAgIGhpZ2hsaWdodGVkOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgaGlnaGxpZ2h0ZWRDb2xvcjoge2RlZmF1bHQ6ICcjMjRDQUZGJywgdHlwZTogJ2NvbG9yJ30sCiAgICBocmVmOiB7ZGVmYXVsdDogJyd9LAogICAgaW1hZ2U6IHt0eXBlOiAnYXNzZXQnfSwKICAgIG9uOiB7ZGVmYXVsdDogJ2NsaWNrJ30sCiAgICBwZWVrTW9kZToge2RlZmF1bHQ6IGZhbHNlfSwKICAgIHRpdGxlOiB7ZGVmYXVsdDogJyd9LAogICAgdGl0bGVDb2xvcjoge2RlZmF1bHQ6ICd3aGl0ZScsIHR5cGU6ICdjb2xvcid9LAogICAgdmlzdWFsQXNwZWN0RW5hYmxlZDoge2RlZmF1bHQ6IGZhbHNlfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlLmJpbmQodGhpcyk7CiAgICB0aGlzLnByZXZpb3VzUXVhdGVybmlvbiA9IHVuZGVmaW5lZDsKICAgIHRoaXMucXVhdGVybmlvbkNsb25lID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTsKICAgIC8vIFN0b3JlIGhpZGRlbiBlbGVtZW50cyBkdXJpbmcgcGVlayBtb2RlIHNvIHdlIGNhbiBzaG93IHRoZW0gYWdhaW4gbGF0ZXIuCiAgICB0aGlzLmhpZGRlbkVscyA9IFtdOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBiYWNrZ3JvdW5kQ29sb3I7CiAgICB2YXIgc3Ryb2tlQ29sb3I7CgogICAgaWYgKCFkYXRhLnZpc3VhbEFzcGVjdEVuYWJsZWQpIHsgcmV0dXJuOyB9CgogICAgdGhpcy5pbml0VmlzdWFsQXNwZWN0KCk7CgogICAgYmFja2dyb3VuZENvbG9yID0gZGF0YS5oaWdobGlnaHRlZCA/IGRhdGEuaGlnaGxpZ2h0ZWRDb2xvciA6IGRhdGEuYmFja2dyb3VuZENvbG9yOwogICAgc3Ryb2tlQ29sb3IgPSBkYXRhLmhpZ2hsaWdodGVkID8gZGF0YS5oaWdobGlnaHRlZENvbG9yIDogZGF0YS5ib3JkZXJDb2xvcjsKICAgIGVsLnNldEF0dHJpYnV0ZSgnbWF0ZXJpYWwnLCAnYmFja2dyb3VuZENvbG9yJywgYmFja2dyb3VuZENvbG9yKTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnbWF0ZXJpYWwnLCAnc3Ryb2tlQ29sb3InLCBzdHJva2VDb2xvcik7CgogICAgaWYgKGRhdGEub24gIT09IG9sZERhdGEub24pIHsgdGhpcy51cGRhdGVFdmVudExpc3RlbmVyKCk7IH0KCiAgICBpZiAob2xkRGF0YS5wZWVrTW9kZSAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgZGF0YS5wZWVrTW9kZSAhPT0gb2xkRGF0YS5wZWVrTW9kZSkgeyB0aGlzLnVwZGF0ZVBlZWtNb2RlKCk7IH0KCiAgICBpZiAoIWRhdGEuaW1hZ2UgfHwgb2xkRGF0YS5pbWFnZSA9PT0gZGF0YS5pbWFnZSkgeyByZXR1cm47IH0KCiAgICBlbC5zZXRBdHRyaWJ1dGUoJ21hdGVyaWFsJywgJ3Bhbm8nLAogICAgICAgICAgICAgICAgICAgIHR5cGVvZiBkYXRhLmltYWdlID09PSAnc3RyaW5nJyA/IGRhdGEuaW1hZ2UgOiBkYXRhLmltYWdlLnNyYyk7CiAgfSwKCiAgLyoKICAgKiBUb2dnbGUgYWxsIGVsZW1lbnRzIGFuZCBmdWxsIDM2MCBwcmV2aWV3IG9mIHRoZSBsaW5rZWQgcGFnZS4KICAgKi8KICB1cGRhdGVQZWVrTW9kZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBzcGhlcmVFbCA9IHRoaXMuc3BoZXJlRWw7CiAgICBpZiAodGhpcy5kYXRhLnBlZWtNb2RlKSB7CiAgICAgIHRoaXMuaGlkZUFsbCgpOwogICAgICBlbC5nZXRPYmplY3QzRCgnbWVzaCcpLnZpc2libGUgPSBmYWxzZTsKICAgICAgc3BoZXJlRWwuc2V0QXR0cmlidXRlKCd2aXNpYmxlJywgdHJ1ZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNob3dBbGwoKTsKICAgICAgZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKS52aXNpYmxlID0gdHJ1ZTsKICAgICAgc3BoZXJlRWwuc2V0QXR0cmlidXRlKCd2aXNpYmxlJywgZmFsc2UpOwogICAgfQogIH0sCgogIHBsYXk6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMudXBkYXRlRXZlbnRMaXN0ZW5lcigpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTsKICB9LAoKICB1cGRhdGVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgaWYgKCFlbC5pc1BsYXlpbmcpIHsgcmV0dXJuOyB9CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5kYXRhLm9uLCB0aGlzLm5hdmlnYXRlKTsKICB9LAoKICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgb24gPSB0aGlzLmRhdGEub247CiAgICBpZiAoIW9uKSB7IHJldHVybjsgfQogICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKG9uLCB0aGlzLm5hdmlnYXRlKTsKICB9LAoKICBpbml0VmlzdWFsQXNwZWN0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIHNlbWlTcGhlcmVFbDsKICAgIHZhciBzcGhlcmVFbDsKICAgIHZhciB0ZXh0RWw7CgogICAgaWYgKCF0aGlzLmRhdGEudmlzdWFsQXNwZWN0RW5hYmxlZCB8fCB0aGlzLnZpc3VhbEFzcGVjdEluaXRpYWxpemVkKSB7IHJldHVybjsgfQoKICAgIHRleHRFbCA9IHRoaXMudGV4dEVsID0gdGhpcy50ZXh0RWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYS1lbnRpdHknKTsKICAgIHNwaGVyZUVsID0gdGhpcy5zcGhlcmVFbCA9IHRoaXMuc3BoZXJlRWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYS1lbnRpdHknKTsKICAgIHNlbWlTcGhlcmVFbCA9IHRoaXMuc2VtaVNwaGVyZUVsID0gdGhpcy5zZW1pU3BoZXJlRWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYS1lbnRpdHknKTsKCiAgICAvLyBTZXQgcG9ydGFsLgogICAgZWwuc2V0QXR0cmlidXRlKCdnZW9tZXRyeScsIHtwcmltaXRpdmU6ICdjaXJjbGUnLCByYWRpdXM6IDEuMCwgc2VnbWVudHM6IDY0fSk7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ21hdGVyaWFsJywge3NoYWRlcjogJ3BvcnRhbCcsIHBhbm86IHRoaXMuZGF0YS5pbWFnZSwgc2lkZTogJ2RvdWJsZSd9KTsKCiAgICAvLyBTZXQgdGV4dCB0aGF0IGRpc3BsYXlzIHRoZSBsaW5rIHRpdGxlIGFuZCBVUkwuCiAgICB0ZXh0RWwuc2V0QXR0cmlidXRlKCd0ZXh0JywgewogICAgICBjb2xvcjogdGhpcy5kYXRhLnRpdGxlQ29sb3IsCiAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgZm9udDogJ2tlbHNvbnNhbnMnLAogICAgICB2YWx1ZTogdGhpcy5kYXRhLnRpdGxlIHx8IHRoaXMuZGF0YS5ocmVmLAogICAgICB3aWR0aDogNAogICAgfSk7CiAgICB0ZXh0RWwuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsICcwIDEuNSAwJyk7CiAgICBlbC5hcHBlbmRDaGlsZCh0ZXh0RWwpOwoKICAgIC8vIFNldCBzcGhlcmUgcmVuZGVyZWQgd2hlbiBjYW1lcmEgaXMgY2xvc2UgdG8gcG9ydGFsIHRvIGFsbG93IHVzZXIgdG8gcGVlayBpbnNpZGUuCiAgICBzZW1pU3BoZXJlRWwuc2V0QXR0cmlidXRlKCdnZW9tZXRyeScsIHsKICAgICAgcHJpbWl0aXZlOiAnc3BoZXJlJywKICAgICAgcmFkaXVzOiAxLjAsCiAgICAgIHBoaVN0YXJ0OiAwLAogICAgICBzZWdtZW50c1dpZHRoOiA2NCwKICAgICAgc2VnbWVudHNIZWlnaHQ6IDY0LAogICAgICBwaGlMZW5ndGg6IDE4MCwKICAgICAgdGhldGFTdGFydDogMCwKICAgICAgdGhldGFMZW5ndGg6IDM2MAogICAgfSk7CiAgICBzZW1pU3BoZXJlRWwuc2V0QXR0cmlidXRlKCdtYXRlcmlhbCcsIHsKICAgICAgc2hhZGVyOiAncG9ydGFsJywKICAgICAgYm9yZGVyRW5hYmxlZDogMC4wLAogICAgICBwYW5vOiB0aGlzLmRhdGEuaW1hZ2UsCiAgICAgIHNpZGU6ICdiYWNrJwogICAgfSk7CiAgICBzZW1pU3BoZXJlRWwuc2V0QXR0cmlidXRlKCdyb3RhdGlvbicsICcwIDE4MCAwJyk7CiAgICBzZW1pU3BoZXJlRWwuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsICcwIDAgMCcpOwogICAgc2VtaVNwaGVyZUVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsIGZhbHNlKTsKICAgIGVsLmFwcGVuZENoaWxkKHNlbWlTcGhlcmVFbCk7CgogICAgLy8gU2V0IHNwaGVyZSByZW5kZXJlZCB3aGVuIGNhbWVyYSBpcyBjbG9zZSB0byBwb3J0YWwgdG8gYWxsb3cgdXNlciB0byBwZWVrIGluc2lkZS4KICAgIHNwaGVyZUVsLnNldEF0dHJpYnV0ZSgnZ2VvbWV0cnknLCB7CiAgICAgIHByaW1pdGl2ZTogJ3NwaGVyZScsCiAgICAgIHJhZGl1czogMTAsCiAgICAgIHNlZ21lbnRzV2lkdGg6IDY0LAogICAgICBzZWdtZW50c0hlaWdodDogNjQKICAgIH0pOwogICAgc3BoZXJlRWwuc2V0QXR0cmlidXRlKCdtYXRlcmlhbCcsIHsKICAgICAgc2hhZGVyOiAncG9ydGFsJywKICAgICAgYm9yZGVyRW5hYmxlZDogMC4wLAogICAgICBwYW5vOiB0aGlzLmRhdGEuaW1hZ2UsCiAgICAgIHNpZGU6ICdiYWNrJwogICAgfSk7CiAgICBzcGhlcmVFbC5zZXRBdHRyaWJ1dGUoJ3Zpc2libGUnLCBmYWxzZSk7CiAgICBlbC5hcHBlbmRDaGlsZChzcGhlcmVFbCk7CgogICAgdGhpcy52aXN1YWxBc3BlY3RJbml0aWFsaXplZCA9IHRydWU7CiAgfSwKCiAgbmF2aWdhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRoaXMuZGF0YS5ocmVmOwogIH0sCgogIC8qKgogICAqIDEuIFN3YXAgcGxhbmUgdGhhdCByZXByZXNlbnRzIHBvcnRhbCB3aXRoIHNwaGVyZSB3aXRoIGEgaG9sZSB3aGVuIHRoZSBjYW1lcmEgaXMgY2xvc2UKICAgKiBzbyB1c2VyIGNhbiBwZWVrIGluc2lkZSBwb3J0YWwuIFNwaGVyZSBpcyByZW5kZXJlZCBvbiBvcG9zaXRlIHNpZGUgb2YgcG9ydGFsCiAgICogZnJvbSB3aGVyZSB1c2VyIGVudGVycy4KICAgKiAyLiBQbGFjZSB0aGUgdXJsL3RpdGxlIGFib3ZlIG9yIGluc2lkZSBwb3J0YWwgZGVwZW5kaW5nIG9uIGRpc3RhbmNlIHRvIGNhbWVyYS4KICAgKiAzLiBGYWNlIHBvcnRhbCB0byBjYW1lcmEgd2hlbiBmYXIgYXdheSBmcm9tIHVzZXIuCiAgICovCiAgdGljazogKGZ1bmN0aW9uICgpIHsKICAgIHZhciBjYW1lcmFXb3JsZFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIHZhciBlbFdvcmxkUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpOwogICAgdmFyIHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpOwogICAgdmFyIHNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgICB2YXIgb2JqZWN0M0QgPSBlbC5vYmplY3QzRDsKICAgICAgdmFyIGNhbWVyYSA9IGVsLnNjZW5lRWwuY2FtZXJhOwogICAgICB2YXIgY2FtZXJhUG9ydGFsT3JpZW50YXRpb247CiAgICAgIHZhciBkaXN0YW5jZTsKICAgICAgdmFyIHRleHRFbCA9IHRoaXMudGV4dEVsOwoKICAgICAgaWYgKCF0aGlzLmRhdGEudmlzdWFsQXNwZWN0RW5hYmxlZCkgeyByZXR1cm47IH0KCiAgICAgIC8vIFVwZGF0ZSBtYXRyaWNlcwogICAgICBvYmplY3QzRC51cGRhdGVNYXRyaXhXb3JsZCgpOwogICAgICBjYW1lcmEucGFyZW50LnVwZGF0ZU1hdHJpeFdvcmxkKCk7CiAgICAgIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpOwoKICAgICAgb2JqZWN0M0QubWF0cml4LmRlY29tcG9zZShlbFdvcmxkUG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlKTsKICAgICAgZWxXb3JsZFBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihvYmplY3QzRC5tYXRyaXhXb3JsZCk7CiAgICAgIGNhbWVyYVdvcmxkUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGNhbWVyYS5tYXRyaXhXb3JsZCk7CiAgICAgIGRpc3RhbmNlID0gZWxXb3JsZFBvc2l0aW9uLmRpc3RhbmNlVG8oY2FtZXJhV29ybGRQb3NpdGlvbik7CgogICAgICBpZiAoZGlzdGFuY2UgPiAyMCkgewogICAgICAgIC8vIFN0b3JlIG9yaWdpbmFsIG9yaWVudGF0aW9uIHRvIGJlIHJlc3RvcmVkIHdoZW4gdGhlIHBvcnRhbCBzdG9wcyBmYWNpbmcgdGhlIGNhbWVyYS4KICAgICAgICBpZiAoIXRoaXMucHJldmlvdXNRdWF0ZXJuaW9uKSB7CiAgICAgICAgICB0aGlzLnF1YXRlcm5pb25DbG9uZS5jb3B5KHF1YXRlcm5pb24pOwogICAgICAgICAgdGhpcy5wcmV2aW91c1F1YXRlcm5pb24gPSB0aGlzLnF1YXRlcm5pb25DbG9uZTsKICAgICAgICB9CiAgICAgICAgLy8gSWYgdGhlIHBvcnRhbCBpcyBmYXIgYXdheSBmcm9tIHRoZSB1c2VyLCBmYWNlIHBvcnRhbCB0byBjYW1lcmEuCiAgICAgICAgb2JqZWN0M0QubG9va0F0KGNhbWVyYVdvcmxkUG9zaXRpb24pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFdoZW4gcG9ydGFsIGlzIGNsb3NlIHRvIHRoZSB1c2VyL2NhbWVyYS4KICAgICAgICBjYW1lcmFQb3J0YWxPcmllbnRhdGlvbiA9IHRoaXMuY2FsY3VsYXRlQ2FtZXJhUG9ydGFsT3JpZW50YXRpb24oKTsKICAgICAgICAvLyBJZiB1c2VyIGdldHMgdmVyeSBjbG9zZSB0byBwb3J0YWwsIHJlcGxhY2Ugd2l0aCBob2xlZCBzcGhlcmUgdGhleSBjYW4gcGVlayBpbi4KICAgICAgICBpZiAoZGlzdGFuY2UgPCAwLjUpIHsKICAgICAgICAgIC8vIENvbmZpZ3VyZSB0ZXh0IHNpemUgYW5kIHNwaGVyZSBvcmllbnRhdGlvbiBkZXBlbmRpbmcgc2lkZSB1c2VyIGFwcHJvYWNoZXMgcG9ydGFsLgogICAgICAgICAgaWYgKHRoaXMuc2VtaVNwaGVyZUVsLmdldEF0dHJpYnV0ZSgndmlzaWJsZScpID09PSB0cnVlKSB7IHJldHVybjsgfQogICAgICAgICAgdGV4dEVsLnNldEF0dHJpYnV0ZSgndGV4dCcsICd3aWR0aCcsIDEuNSk7CiAgICAgICAgICBpZiAoY2FtZXJhUG9ydGFsT3JpZW50YXRpb24gPD0gMC4wKSB7CiAgICAgICAgICAgIHRleHRFbC5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgJzAgMCAwLjc1Jyk7CiAgICAgICAgICAgIHRleHRFbC5zZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJywgJzAgMTgwIDAnKTsKICAgICAgICAgICAgdGhpcy5zZW1pU3BoZXJlRWwuc2V0QXR0cmlidXRlKCdyb3RhdGlvbicsICcwIDAgMCcpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGV4dEVsLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCAnMCAwIC0wLjc1Jyk7CiAgICAgICAgICAgIHRleHRFbC5zZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJywgJzAgMCAwJyk7CiAgICAgICAgICAgIHRoaXMuc2VtaVNwaGVyZUVsLnNldEF0dHJpYnV0ZSgncm90YXRpb24nLCAnMCAxODAgMCcpOwogICAgICAgICAgfQogICAgICAgICAgZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKS52aXNpYmxlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnNlbWlTcGhlcmVFbC5zZXRBdHRyaWJ1dGUoJ3Zpc2libGUnLCB0cnVlKTsKICAgICAgICAgIHRoaXMucGVla0NhbWVyYVBvcnRhbE9yaWVudGF0aW9uID0gY2FtZXJhUG9ydGFsT3JpZW50YXRpb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIENhbGN1bGF0ZSB3aWNoIHNpZGUgdGhlIGNhbWVyYSBpcyBhcHByb2FjaGluZyB0aGUgY2FtZXJhIChiYWNrIC8gZnJvbnQpLgogICAgICAgICAgLy8gQWRqdXN0IHRleHQgb3JpZW50YXRpb24gYmFzZWQgb24gY2FtZXJhIHBvc2l0aW9uLgogICAgICAgICAgaWYgKGNhbWVyYVBvcnRhbE9yaWVudGF0aW9uIDw9IDAuMCkgewogICAgICAgICAgICB0ZXh0RWwuc2V0QXR0cmlidXRlKCdyb3RhdGlvbicsICcwIDE4MCAwJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ZXh0RWwuc2V0QXR0cmlidXRlKCdyb3RhdGlvbicsICcwIDAgMCcpOwogICAgICAgICAgfQogICAgICAgICAgdGV4dEVsLnNldEF0dHJpYnV0ZSgndGV4dCcsICd3aWR0aCcsIDUpOwogICAgICAgICAgdGV4dEVsLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCAnMCAxLjUgMCcpOwogICAgICAgICAgZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKS52aXNpYmxlID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuc2VtaVNwaGVyZUVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsIGZhbHNlKTsKICAgICAgICAgIHRoaXMucGVla0NhbWVyYVBvcnRhbE9yaWVudGF0aW9uID0gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5wcmV2aW91c1F1YXRlcm5pb24pIHsKICAgICAgICAgIG9iamVjdDNELnF1YXRlcm5pb24uY29weSh0aGlzLnByZXZpb3VzUXVhdGVybmlvbik7CiAgICAgICAgICB0aGlzLnByZXZpb3VzUXVhdGVybmlvbiA9IHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfSkoKSwKCiAgaGlkZUFsbDogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBoaWRkZW5FbHMgPSB0aGlzLmhpZGRlbkVsczsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmIChoaWRkZW5FbHMubGVuZ3RoID4gMCkgeyByZXR1cm47IH0KICAgIGVsLnNjZW5lRWwub2JqZWN0M0QudHJhdmVyc2UoZnVuY3Rpb24gKG9iamVjdCkgewogICAgICBpZiAob2JqZWN0ICYmIG9iamVjdC5lbCAmJiBvYmplY3QuZWwuaGFzQXR0cmlidXRlKCdsaW5rLWNvbnRyb2xzJykpIHsgcmV0dXJuOyB9CiAgICAgIGlmICghb2JqZWN0LmVsIHx8IG9iamVjdCA9PT0gZWwuc2NlbmVFbC5vYmplY3QzRCB8fCBvYmplY3QuZWwgPT09IGVsIHx8CiAgICAgICAgICBvYmplY3QuZWwgPT09IHNlbGYuc3BoZXJlRWwgfHwgb2JqZWN0LmVsID09PSBlbC5zY2VuZUVsLmNhbWVyYUVsIHx8CiAgICAgICAgICBvYmplY3QuZWwuZ2V0QXR0cmlidXRlKCd2aXNpYmxlJykgPT09IGZhbHNlIHx8IG9iamVjdC5lbCA9PT0gc2VsZi50ZXh0RWwgfHwKICAgICAgICAgIG9iamVjdC5lbCA9PT0gc2VsZi5zZW1pU3BoZXJlRWwpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgb2JqZWN0LmVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsIGZhbHNlKTsKICAgICAgaGlkZGVuRWxzLnB1c2gob2JqZWN0LmVsKTsKICAgIH0pOwogIH0sCgogIHNob3dBbGw6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuaGlkZGVuRWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IGVsLnNldEF0dHJpYnV0ZSgndmlzaWJsZScsIHRydWUpOyB9KTsKICAgIHRoaXMuaGlkZGVuRWxzID0gW107CiAgfSwKCiAgLyoqCiAgICogQ2FsY3VsYXRlIHdoZXRoZXIgdGhlIGNhbWVyYSBmYWNlcyB0aGUgZnJvbnQgb3IgYmFjayBmYWNlIG9mIHRoZSBwb3J0YWwuCiAgICogQHJldHVybnMge251bWJlcn0gPiAwIGlmIGNhbWVyYSBmYWNlcyBmcm9udCBvZiBwb3J0YWwsIDwgMCBpZiBpdCBmYWNlcyBiYWNrIG9mIHBvcnRhbC4KICAgKi8KICBjYWxjdWxhdGVDYW1lcmFQb3J0YWxPcmllbnRhdGlvbjogKGZ1bmN0aW9uICgpIHsKICAgIHZhciBtYXQ0ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTsKICAgIHZhciBjYW1lcmFQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICB2YXIgcG9ydGFsTm9ybWFsID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMSk7CiAgICB2YXIgcG9ydGFsUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgICB2YXIgY2FtZXJhID0gZWwuc2NlbmVFbC5jYW1lcmE7CgogICAgICAvLyBSZXNldCB0bXAgdmFyaWFibGVzLgogICAgICBjYW1lcmFQb3NpdGlvbi5zZXQoMCwgMCwgMCk7CiAgICAgIHBvcnRhbE5vcm1hbC5zZXQoMCwgMCwgMSk7CiAgICAgIHBvcnRhbFBvc2l0aW9uLnNldCgwLCAwLCAwKTsKCiAgICAgIC8vIEFwcGx5IHBvcnRhbCBvcmllbnRhdGlvbiB0byB0aGUgbm9ybWFsLgogICAgICBlbC5vYmplY3QzRC5tYXRyaXhXb3JsZC5leHRyYWN0Um90YXRpb24obWF0NCk7CiAgICAgIHBvcnRhbE5vcm1hbC5hcHBseU1hdHJpeDQobWF0NCk7CgogICAgICAvLyBDYWxjdWxhdGUgcG9ydGFsIHdvcmxkIHBvc2l0aW9uLgogICAgICBlbC5vYmplY3QzRC51cGRhdGVNYXRyaXhXb3JsZCgpOwogICAgICBlbC5vYmplY3QzRC5sb2NhbFRvV29ybGQocG9ydGFsUG9zaXRpb24pOwoKICAgICAgLy8gQ2FsY3VsYXRlIGNhbWVyYSB3b3JsZCBwb3NpdGlvbi4KICAgICAgY2FtZXJhLnBhcmVudC5wYXJlbnQudXBkYXRlTWF0cml4V29ybGQoKTsKICAgICAgY2FtZXJhLnBhcmVudC51cGRhdGVNYXRyaXhXb3JsZCgpOwogICAgICBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTsKICAgICAgY2FtZXJhLmxvY2FsVG9Xb3JsZChjYW1lcmFQb3NpdGlvbik7CgogICAgICAvLyBDYWxjdWxhdGUgdmVjdG9yIGZyb20gcG9ydGFsIHRvIGNhbWVyYS4KICAgICAgLy8gKHBvcnRhbCkgLS0tLS0tLT4gKGNhbWVyYSkKICAgICAgY2FtZXJhUG9zaXRpb24uc3ViKHBvcnRhbFBvc2l0aW9uKS5ub3JtYWxpemUoKTsKICAgICAgcG9ydGFsTm9ybWFsLm5vcm1hbGl6ZSgpOwoKICAgICAgLy8gU2lkZSB3aGVyZSBjYW1lcmEgYXBwcm9hY2hlcyBwb3J0YWwgaXMgZ2l2ZW4gYnkgc2lnbiBvZiBkb3QgcHJvZHVjdCBvZiBwb3J0YWwgbm9ybWFsCiAgICAgIC8vIGFuZCBwb3J0YWwgdG8gY2FtZXJhIHZlY3RvcnMuCiAgICAgIHJldHVybiBNYXRoLnNpZ24ocG9ydGFsTm9ybWFsLmRvdChjYW1lcmFQb3NpdGlvbikpOwogICAgfTsKICB9KSgpLAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigpOwogIH0KfSk7CgovKiBlc2xpbnQtZGlzYWJsZSAqLwpyZWdpc3RlclNoYWRlcigncG9ydGFsJywgewogIHNjaGVtYTogewogICAgYm9yZGVyRW5hYmxlZDoge2RlZmF1bHQ6IDEuMCwgdHlwZTogJ2ludCcsIGlzOiAndW5pZm9ybSd9LAogICAgYmFja2dyb3VuZENvbG9yOiB7ZGVmYXVsdDogJ3JlZCcsIHR5cGU6ICdjb2xvcicsIGlzOiAndW5pZm9ybSd9LAogICAgcGFubzoge3R5cGU6ICdtYXAnLCBpczogJ3VuaWZvcm0nfSwKICAgIHN0cm9rZUNvbG9yOiB7ZGVmYXVsdDogJ3doaXRlJywgdHlwZTogJ2NvbG9yJywgaXM6ICd1bmlmb3JtJ30KICB9LAoKICB2ZXJ0ZXhTaGFkZXI6IFsKICAgICd2ZWMzIHBvcnRhbFBvc2l0aW9uOycsCiAgICAndmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uOycsCiAgICAndmFyeWluZyBmbG9hdCB2RGlzdGFuY2VUb0NlbnRlcjsnLAogICAgJ3ZhcnlpbmcgZmxvYXQgdkRpc3RhbmNlOycsCiAgICAndm9pZCBtYWluKCkgeycsCiAgICAndkRpc3RhbmNlVG9DZW50ZXIgPSBjbGFtcChsZW5ndGgocG9zaXRpb24gLSB2ZWMzKDAuMCwgMC4wLCAwLjApKSwgMC4wLCAxLjApOycsCiAgICAncG9ydGFsUG9zaXRpb24gPSAobW9kZWxNYXRyaXggKiB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCkpLnh5ejsnLAogICAgJ3ZEaXN0YW5jZSA9IGxlbmd0aChwb3J0YWxQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uKTsnLAogICAgJ3ZXb3JsZFBvc2l0aW9uID0gKG1vZGVsTWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKSkueHl6OycsCiAgICAnZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTsnLAogICAgJ30nCiAgXS5qb2luKCdcbicpLAoKICBmcmFnbWVudFNoYWRlcjogWwogICAgJyNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NCcsCiAgICAndW5pZm9ybSBzYW1wbGVyMkQgcGFubzsnLAogICAgJ3VuaWZvcm0gdmVjMyBzdHJva2VDb2xvcjsnLAogICAgJ3VuaWZvcm0gdmVjMyBiYWNrZ3JvdW5kQ29sb3I7JywKICAgICd1bmlmb3JtIGZsb2F0IGJvcmRlckVuYWJsZWQ7JywKICAgICd2YXJ5aW5nIGZsb2F0IHZEaXN0YW5jZVRvQ2VudGVyOycsCiAgICAndmFyeWluZyBmbG9hdCB2RGlzdGFuY2U7JywKICAgICd2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247JywKICAgICd2b2lkIG1haW4oKSB7JywKICAgICd2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSh2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uKTsnLAogICAgJ3ZlYzIgc2FtcGxlVVY7JywKICAgICdmbG9hdCBib3JkZXJUaGlja25lc3MgPSBjbGFtcChleHAoLXZEaXN0YW5jZSAvIDUwLjApLCAwLjYsIDAuOTUpOycsCiAgICAnc2FtcGxlVVYueSA9IHNhdHVyYXRlKGRpcmVjdGlvbi55ICogMC41ICArIDAuNSk7JywKICAgICdzYW1wbGVVVi54ID0gYXRhbihkaXJlY3Rpb24ueiwgLWRpcmVjdGlvbi54KSAqIC1SRUNJUFJPQ0FMX1BJMiArIDAuNTsnLAogICAgJ2lmICh2RGlzdGFuY2VUb0NlbnRlciA+IGJvcmRlclRoaWNrbmVzcyAmJiBib3JkZXJFbmFibGVkID09IDEuMCkgeycsCiAgICAnZ2xfRnJhZ0NvbG9yID0gdmVjNChzdHJva2VDb2xvciwgMS4wKTsnLAogICAgJ30gZWxzZSB7JywKICAgICdnbF9GcmFnQ29sb3IgPSBtaXgodGV4dHVyZTJEKHBhbm8sIHNhbXBsZVVWKSwgdmVjNChiYWNrZ3JvdW5kQ29sb3IsIDEuMCksIGNsYW1wKHBvdygodkRpc3RhbmNlIC8gMTUuMCksIDIuMCksIDAuMCwgMS4wKSk7JywKICAgICd9JywKICAgICd9JwogIF0uam9pbignXG4nKQp9KTsKLyogZXNsaW50LWVuYWJsZSAqLwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2NvcmUvc2hhZGVyIjoxMTksIi4uL2xpYi90aHJlZSI6MTU3fV0sNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiBnbG9iYWwgRGV2aWNlT3JpZW50YXRpb25FdmVudCAgKi8KdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzLycpOwp2YXIgYmluZCA9IHV0aWxzLmJpbmQ7CgovLyBUbyBhdm9pZCByZWNhbGN1bGF0aW9uIGF0IGV2ZXJ5IG1vdXNlIG1vdmVtZW50IHRpY2sKdmFyIFBJXzIgPSBNYXRoLlBJIC8gMjsKCi8qKgogKiBsb29rLWNvbnRyb2xzLiBVcGRhdGUgZW50aXR5IHBvc2UsIGZhY3RvcmluZyBtb3VzZSwgdG91Y2gsIGFuZCBXZWJWUiBBUEkgZGF0YS4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdsb29rLWNvbnRyb2xzJywgewogIGRlcGVuZGVuY2llczogWydwb3NpdGlvbicsICdyb3RhdGlvbiddLAoKICBzY2hlbWE6IHsKICAgIGVuYWJsZWQ6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGhtZEVuYWJsZWQ6IHtkZWZhdWx0OiB0cnVlfSwKICAgIHBvaW50ZXJMb2NrRW5hYmxlZDoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIHJldmVyc2VNb3VzZURyYWc6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICByZXZlcnNlVG91Y2hEcmFnOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgdG91Y2hFbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRlbHRhWWF3ID0gMDsKICAgIHRoaXMucHJldmlvdXNITURQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICB0aGlzLmhtZFF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpOwogICAgdGhpcy5tYWdpY1dpbmRvd0Fic29sdXRlRXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoKTsKICAgIHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyID0gbmV3IFRIUkVFLkV1bGVyKCk7CiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIC8vIFRvIHNhdmUgLyByZXN0b3JlIGNhbWVyYSBwb3NlCiAgICB0aGlzLnNhdmVkUm90YXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpOwogICAgdGhpcy5zYXZlZFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIHRoaXMubWFnaWNXaW5kb3dPYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTsKICAgIHRoaXMucm90YXRpb24gPSB7fTsKICAgIHRoaXMuZGVsdGFSb3RhdGlvbiA9IHt9OwogICAgdGhpcy5zYXZlZFBvc2UgPSBudWxsOwogICAgdGhpcy5wb2ludGVyTG9ja2VkID0gZmFsc2U7CiAgICB0aGlzLnNldHVwTW91c2VDb250cm9scygpOwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwoKICAgIHRoaXMuc2V0dXBNYWdpY1dpbmRvd0NvbnRyb2xzKCk7CgogICAgdGhpcy5zYXZlZFBvc2UgPSB7CiAgICAgIHBvc2l0aW9uOiBuZXcgVEhSRUUuVmVjdG9yMygpLAogICAgICByb3RhdGlvbjogbmV3IFRIUkVFLkV1bGVyKCkKICAgIH07CgogICAgLy8gQ2FsbCBlbnRlciBWUiBoYW5kbGVyIGlmIHRoZSBzY2VuZSBoYXMgZW50ZXJlZCBWUiBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZC4KICAgIGlmICh0aGlzLmVsLnNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSkgeyB0aGlzLm9uRW50ZXJWUigpOyB9CiAgfSwKCiAgc2V0dXBNYWdpY1dpbmRvd0NvbnRyb2xzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgbWFnaWNXaW5kb3dDb250cm9sczsKCiAgICAvLyBPbmx5IG9uIG1vYmlsZSBkZXZpY2VzIGFuZCBvbmx5IGVuYWJsZWQgaWYgRGV2aWNlT3JpZW50YXRpb24gcGVybWlzc2lvbiBoYXMgYmVlbiBncmFudGVkLgogICAgaWYgKHV0aWxzLmRldmljZS5pc01vYmlsZSgpKSB7CiAgICAgIG1hZ2ljV2luZG93Q29udHJvbHMgPSB0aGlzLm1hZ2ljV2luZG93Q29udHJvbHMgPSBuZXcgVEhSRUUuRGV2aWNlT3JpZW50YXRpb25Db250cm9scyh0aGlzLm1hZ2ljV2luZG93T2JqZWN0KTsKICAgICAgaWYgKHR5cGVvZiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKSB7CiAgICAgICAgbWFnaWNXaW5kb3dDb250cm9scy5lbmFibGVkID0gZmFsc2U7CiAgICAgICAgaWYgKHRoaXMuZWwuc2NlbmVFbC5jb21wb25lbnRzWydkZXZpY2Utb3JpZW50YXRpb24tcGVybWlzc2lvbi11aSddLnBlcm1pc3Npb25HcmFudGVkKSB7CiAgICAgICAgICBtYWdpY1dpbmRvd0NvbnRyb2xzLmVuYWJsZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb25wZXJtaXNzaW9uZ3JhbnRlZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgbWFnaWNXaW5kb3dDb250cm9scy5lbmFibGVkID0gdHJ1ZTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwoKICAgIC8vIERpc2FibGUgZ3JhYiBjdXJzb3IgY2xhc3NlcyBpZiBubyBsb25nZXIgZW5hYmxlZC4KICAgIGlmIChkYXRhLmVuYWJsZWQgIT09IG9sZERhdGEuZW5hYmxlZCkgewogICAgICB0aGlzLnVwZGF0ZUdyYWJDdXJzb3IoZGF0YS5lbmFibGVkKTsKICAgIH0KCiAgICAvLyBSZXNldCBwaXRjaCBhbmQgeWF3IGlmIGRpc2FibGluZyBITUQuCiAgICBpZiAob2xkRGF0YSAmJiAhZGF0YS5obWRFbmFibGVkICYmICFvbGREYXRhLmhtZEVuYWJsZWQpIHsKICAgICAgdGhpcy5waXRjaE9iamVjdC5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7CiAgICAgIHRoaXMueWF3T2JqZWN0LnJvdGF0aW9uLnNldCgwLCAwLCAwKTsKICAgIH0KCiAgICBpZiAob2xkRGF0YSAmJiAhZGF0YS5wb2ludGVyTG9ja0VuYWJsZWQgIT09IG9sZERhdGEucG9pbnRlckxvY2tFbmFibGVkKSB7CiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpOwogICAgICBpZiAodGhpcy5wb2ludGVyTG9ja2VkKSB7IHRoaXMuZXhpdFBvaW50ZXJMb2NrKCk7IH0KICAgIH0KICB9LAoKICB0aWNrOiBmdW5jdGlvbiAodCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICBpZiAoIWRhdGEuZW5hYmxlZCkgeyByZXR1cm47IH0KICAgIHRoaXMudXBkYXRlT3JpZW50YXRpb24oKTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIGlmICh0aGlzLnBvaW50ZXJMb2NrZWQpIHsgdGhpcy5leGl0UG9pbnRlckxvY2soKTsgfQogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpOwogICAgaWYgKHRoaXMucG9pbnRlckxvY2tlZCkgeyB0aGlzLmV4aXRQb2ludGVyTG9jaygpOyB9CiAgfSwKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Nb3VzZURvd24gPSBiaW5kKHRoaXMub25Nb3VzZURvd24sIHRoaXMpOwogICAgdGhpcy5vbk1vdXNlTW92ZSA9IGJpbmQodGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7CiAgICB0aGlzLm9uTW91c2VVcCA9IGJpbmQodGhpcy5vbk1vdXNlVXAsIHRoaXMpOwogICAgdGhpcy5vblRvdWNoU3RhcnQgPSBiaW5kKHRoaXMub25Ub3VjaFN0YXJ0LCB0aGlzKTsKICAgIHRoaXMub25Ub3VjaE1vdmUgPSBiaW5kKHRoaXMub25Ub3VjaE1vdmUsIHRoaXMpOwogICAgdGhpcy5vblRvdWNoRW5kID0gYmluZCh0aGlzLm9uVG91Y2hFbmQsIHRoaXMpOwogICAgdGhpcy5vbkVudGVyVlIgPSBiaW5kKHRoaXMub25FbnRlclZSLCB0aGlzKTsKICAgIHRoaXMub25FeGl0VlIgPSBiaW5kKHRoaXMub25FeGl0VlIsIHRoaXMpOwogICAgdGhpcy5vblBvaW50ZXJMb2NrQ2hhbmdlID0gYmluZCh0aGlzLm9uUG9pbnRlckxvY2tDaGFuZ2UsIHRoaXMpOwogICAgdGhpcy5vblBvaW50ZXJMb2NrRXJyb3IgPSBiaW5kKHRoaXMub25Qb2ludGVyTG9ja0Vycm9yLCB0aGlzKTsKICB9LAoKIC8qKgogICogU2V0IHVwIHN0YXRlcyBhbmQgT2JqZWN0M0RzIG5lZWRlZCB0byBzdG9yZSByb3RhdGlvbiBkYXRhLgogICovCiAgc2V0dXBNb3VzZUNvbnRyb2xzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlOwogICAgdGhpcy5waXRjaE9iamVjdCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpOwogICAgdGhpcy55YXdPYmplY3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTsKICAgIHRoaXMueWF3T2JqZWN0LnBvc2l0aW9uLnkgPSAxMDsKICAgIHRoaXMueWF3T2JqZWN0LmFkZCh0aGlzLnBpdGNoT2JqZWN0KTsKICB9LAoKICAvKioKICAgKiBBZGQgbW91c2UgYW5kIHRvdWNoIGV2ZW50IGxpc3RlbmVycyB0byBjYW52YXMuCiAgICovCiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsOwogICAgdmFyIGNhbnZhc0VsID0gc2NlbmVFbC5jYW52YXM7CgogICAgLy8gV2FpdCBmb3IgY2FudmFzIHRvIGxvYWQuCiAgICBpZiAoIWNhbnZhc0VsKSB7CiAgICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigncmVuZGVyLXRhcmdldC1sb2FkZWQnLCBiaW5kKHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMsIHRoaXMpKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIE1vdXNlIGV2ZW50cy4KICAgIGNhbnZhc0VsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24sIGZhbHNlKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlLCBmYWxzZSk7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwLCBmYWxzZSk7CgogICAgLy8gVG91Y2ggZXZlbnRzLgogICAgY2FudmFzRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0KTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCk7CgogICAgLy8gc2NlbmVFbCBldmVudHMuCiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2VudGVyLXZyJywgdGhpcy5vbkVudGVyVlIpOwogICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdleGl0LXZyJywgdGhpcy5vbkV4aXRWUik7CgogICAgLy8gUG9pbnRlciBMb2NrIGV2ZW50cy4KICAgIGlmICh0aGlzLmRhdGEucG9pbnRlckxvY2tFbmFibGVkKSB7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrY2hhbmdlJywgdGhpcy5vblBvaW50ZXJMb2NrQ2hhbmdlLCBmYWxzZSk7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21venBvaW50ZXJsb2NrY2hhbmdlJywgdGhpcy5vblBvaW50ZXJMb2NrQ2hhbmdlLCBmYWxzZSk7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrZXJyb3InLCB0aGlzLm9uUG9pbnRlckxvY2tFcnJvciwgZmFsc2UpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlbW92ZSBtb3VzZSBhbmQgdG91Y2ggZXZlbnQgbGlzdGVuZXJzIGZyb20gY2FudmFzLgogICAqLwogIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIHZhciBjYW52YXNFbCA9IHNjZW5lRWwgJiYgc2NlbmVFbC5jYW52YXM7CgogICAgaWYgKCFjYW52YXNFbCkgeyByZXR1cm47IH0KCiAgICAvLyBNb3VzZSBldmVudHMuCiAgICBjYW52YXNFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApOwoKICAgIC8vIFRvdWNoIGV2ZW50cy4KICAgIGNhbnZhc0VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSk7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpOwoKICAgIC8vIHNjZW5lRWwgZXZlbnRzLgogICAgc2NlbmVFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlci12cicsIHRoaXMub25FbnRlclZSKTsKICAgIHNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXhpdC12cicsIHRoaXMub25FeGl0VlIpOwoKICAgIC8vIFBvaW50ZXIgTG9jayBldmVudHMuCiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybG9ja2NoYW5nZScsIHRoaXMub25Qb2ludGVyTG9ja0NoYW5nZSwgZmFsc2UpOwogICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96cG9pbnRlcmxvY2tjaGFuZ2UnLCB0aGlzLm9uUG9pbnRlckxvY2tDaGFuZ2UsIGZhbHNlKTsKICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrZXJyb3InLCB0aGlzLm9uUG9pbnRlckxvY2tFcnJvciwgZmFsc2UpOwogIH0sCgogIC8qKgogICAqIFVwZGF0ZSBvcmllbnRhdGlvbiBmb3IgbW9iaWxlLCBtb3VzZSBkcmFnLCBhbmQgaGVhZHNldC4KICAgKiBNb3VzZS1kcmFnIG9ubHkgZW5hYmxlZCBpZiBITUQgaXMgbm90IGFjdGl2ZS4KICAgKi8KICB1cGRhdGVPcmllbnRhdGlvbjogKGZ1bmN0aW9uICgpIHsKICAgIHZhciBwb3NlTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmVsLm9iamVjdDNEOwogICAgICB2YXIgcGl0Y2hPYmplY3QgPSB0aGlzLnBpdGNoT2JqZWN0OwogICAgICB2YXIgeWF3T2JqZWN0ID0gdGhpcy55YXdPYmplY3Q7CiAgICAgIHZhciBwb3NlOwogICAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKCiAgICAgIC8vIEluIFZSIG1vZGUsIFRIUkVFIGlzIGluIGNoYXJnZSBvZiB1cGRhdGluZyB0aGUgY2FtZXJhIHBvc2UuCiAgICAgIGlmIChzY2VuZUVsLmlzKCd2ci1tb2RlJykgJiYgc2NlbmVFbC5jaGVja0hlYWRzZXRDb25uZWN0ZWQoKSkgewogICAgICAgIC8vIFdpdGggV2ViWFIgVEhSRUUgYXBwbGllcyBoZWFkc2V0IHBvc2UgdG8gdGhlIG9iamVjdDNEIG1hdHJpeFdvcmxkIGludGVybmFsbHkuCiAgICAgICAgLy8gUmVmbGVjdCB2YWx1ZXMgYmFjayBvbiBwb3NpdGlvbiwgcm90YXRpb24sIHNjYWxlIGZvciBnZXRBdHRyaWJ1dGUgdG8gcmV0dXJuIHRoZSBleHBlY3RlZCB2YWx1ZXMuCiAgICAgICAgaWYgKHNjZW5lRWwuaGFzV2ViWFIpIHsKICAgICAgICAgIHBvc2UgPSBzY2VuZUVsLnJlbmRlcmVyLnhyLmdldENhbWVyYVBvc2UoKTsKICAgICAgICAgIGlmIChwb3NlKSB7CiAgICAgICAgICAgIHBvc2VNYXRyaXguZWxlbWVudHMgPSBwb3NlLnRyYW5zZm9ybS5tYXRyaXg7CiAgICAgICAgICAgIHBvc2VNYXRyaXguZGVjb21wb3NlKG9iamVjdDNELnBvc2l0aW9uLCBvYmplY3QzRC5yb3RhdGlvbiwgb2JqZWN0M0Quc2NhbGUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMudXBkYXRlTWFnaWNXaW5kb3dPcmllbnRhdGlvbigpOwoKICAgICAgLy8gT24gbW9iaWxlLCBkbyBjYW1lcmEgcm90YXRpb24gd2l0aCB0b3VjaCBldmVudHMgYW5kIHNlbnNvcnMuCiAgICAgIG9iamVjdDNELnJvdGF0aW9uLnggPSB0aGlzLm1hZ2ljV2luZG93RGVsdGFFdWxlci54ICsgcGl0Y2hPYmplY3Qucm90YXRpb24ueDsKICAgICAgb2JqZWN0M0Qucm90YXRpb24ueSA9IHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyLnkgKyB5YXdPYmplY3Qucm90YXRpb24ueTsKICAgICAgb2JqZWN0M0Qucm90YXRpb24ueiA9IHRoaXMubWFnaWNXaW5kb3dEZWx0YUV1bGVyLno7CiAgICB9OwogIH0pKCksCgogIHVwZGF0ZU1hZ2ljV2luZG93T3JpZW50YXRpb246IGZ1bmN0aW9uICgpIHsKICAgIHZhciBtYWdpY1dpbmRvd0Fic29sdXRlRXVsZXIgPSB0aGlzLm1hZ2ljV2luZG93QWJzb2x1dGVFdWxlcjsKICAgIHZhciBtYWdpY1dpbmRvd0RlbHRhRXVsZXIgPSB0aGlzLm1hZ2ljV2luZG93RGVsdGFFdWxlcjsKICAgIC8vIENhbGN1bGF0ZSBtYWdpYyB3aW5kb3cgSE1EIHF1YXRlcm5pb24uCiAgICBpZiAodGhpcy5tYWdpY1dpbmRvd0NvbnRyb2xzICYmIHRoaXMubWFnaWNXaW5kb3dDb250cm9scy5lbmFibGVkKSB7CiAgICAgIHRoaXMubWFnaWNXaW5kb3dDb250cm9scy51cGRhdGUoKTsKICAgICAgbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKHRoaXMubWFnaWNXaW5kb3dPYmplY3QucXVhdGVybmlvbiwgJ1lYWicpOwogICAgICBpZiAoIXRoaXMucHJldmlvdXNNYWdpY1dpbmRvd1lhdyAmJiBtYWdpY1dpbmRvd0Fic29sdXRlRXVsZXIueSAhPT0gMCkgewogICAgICAgIHRoaXMucHJldmlvdXNNYWdpY1dpbmRvd1lhdyA9IG1hZ2ljV2luZG93QWJzb2x1dGVFdWxlci55OwogICAgICB9CiAgICAgIGlmICh0aGlzLnByZXZpb3VzTWFnaWNXaW5kb3dZYXcpIHsKICAgICAgICBtYWdpY1dpbmRvd0RlbHRhRXVsZXIueCA9IG1hZ2ljV2luZG93QWJzb2x1dGVFdWxlci54OwogICAgICAgIG1hZ2ljV2luZG93RGVsdGFFdWxlci55ICs9IG1hZ2ljV2luZG93QWJzb2x1dGVFdWxlci55IC0gdGhpcy5wcmV2aW91c01hZ2ljV2luZG93WWF3OwogICAgICAgIG1hZ2ljV2luZG93RGVsdGFFdWxlci56ID0gbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLno7CiAgICAgICAgdGhpcy5wcmV2aW91c01hZ2ljV2luZG93WWF3ID0gbWFnaWNXaW5kb3dBYnNvbHV0ZUV1bGVyLnk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBUcmFuc2xhdGUgbW91c2UgZHJhZyBpbnRvIHJvdGF0aW9uLgogICAqCiAgICogRHJhZ2dpbmcgdXAgYW5kIGRvd24gcm90YXRlcyB0aGUgY2FtZXJhIGFyb3VuZCB0aGUgWC1heGlzICh5YXcpLgogICAqIERyYWdnaW5nIGxlZnQgYW5kIHJpZ2h0IHJvdGF0ZXMgdGhlIGNhbWVyYSBhcm91bmQgdGhlIFktYXhpcyAocGl0Y2gpLgogICAqLwogIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHsKICAgIHZhciBkaXJlY3Rpb247CiAgICB2YXIgbW92ZW1lbnRYOwogICAgdmFyIG1vdmVtZW50WTsKICAgIHZhciBwaXRjaE9iamVjdCA9IHRoaXMucGl0Y2hPYmplY3Q7CiAgICB2YXIgcHJldmlvdXNNb3VzZUV2ZW50ID0gdGhpcy5wcmV2aW91c01vdXNlRXZlbnQ7CiAgICB2YXIgeWF3T2JqZWN0ID0gdGhpcy55YXdPYmplY3Q7CgogICAgLy8gTm90IGRyYWdnaW5nIG9yIG5vdCBlbmFibGVkLgogICAgaWYgKCF0aGlzLmRhdGEuZW5hYmxlZCB8fCAoIXRoaXMubW91c2VEb3duICYmICF0aGlzLnBvaW50ZXJMb2NrZWQpKSB7IHJldHVybjsgfQoKICAgIC8vIENhbGN1bGF0ZSBkZWx0YS4KICAgIGlmICh0aGlzLnBvaW50ZXJMb2NrZWQpIHsKICAgICAgbW92ZW1lbnRYID0gZXZlbnQubW92ZW1lbnRYIHx8IGV2ZW50Lm1vek1vdmVtZW50WCB8fCAwOwogICAgICBtb3ZlbWVudFkgPSBldmVudC5tb3ZlbWVudFkgfHwgZXZlbnQubW96TW92ZW1lbnRZIHx8IDA7CiAgICB9IGVsc2UgewogICAgICBtb3ZlbWVudFggPSBldmVudC5zY3JlZW5YIC0gcHJldmlvdXNNb3VzZUV2ZW50LnNjcmVlblg7CiAgICAgIG1vdmVtZW50WSA9IGV2ZW50LnNjcmVlblkgLSBwcmV2aW91c01vdXNlRXZlbnQuc2NyZWVuWTsKICAgIH0KICAgIHRoaXMucHJldmlvdXNNb3VzZUV2ZW50ID0gZXZlbnQ7CgogICAgLy8gQ2FsY3VsYXRlIHJvdGF0aW9uLgogICAgZGlyZWN0aW9uID0gdGhpcy5kYXRhLnJldmVyc2VNb3VzZURyYWcgPyAxIDogLTE7CiAgICB5YXdPYmplY3Qucm90YXRpb24ueSArPSBtb3ZlbWVudFggKiAwLjAwMiAqIGRpcmVjdGlvbjsKICAgIHBpdGNoT2JqZWN0LnJvdGF0aW9uLnggKz0gbW92ZW1lbnRZICogMC4wMDIgKiBkaXJlY3Rpb247CiAgICBwaXRjaE9iamVjdC5yb3RhdGlvbi54ID0gTWF0aC5tYXgoLVBJXzIsIE1hdGgubWluKFBJXzIsIHBpdGNoT2JqZWN0LnJvdGF0aW9uLngpKTsKICB9LAoKICAvKioKICAgKiBSZWdpc3RlciBtb3VzZSBkb3duIHRvIGRldGVjdCBtb3VzZSBkcmFnLgogICAqLwogIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIGlmICghdGhpcy5kYXRhLmVuYWJsZWQgfHwgKHNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSAmJiBzY2VuZUVsLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpKSkgeyByZXR1cm47IH0KICAgIC8vIEhhbmRsZSBvbmx5IHByaW1hcnkgYnV0dG9uLgogICAgaWYgKGV2dC5idXR0b24gIT09IDApIHsgcmV0dXJuOyB9CgogICAgdmFyIGNhbnZhc0VsID0gc2NlbmVFbCAmJiBzY2VuZUVsLmNhbnZhczsKCiAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7CiAgICB0aGlzLnByZXZpb3VzTW91c2VFdmVudCA9IGV2dDsKICAgIHRoaXMuc2hvd0dyYWJiaW5nQ3Vyc29yKCk7CgogICAgaWYgKHRoaXMuZGF0YS5wb2ludGVyTG9ja0VuYWJsZWQgJiYgIXRoaXMucG9pbnRlckxvY2tlZCkgewogICAgICBpZiAoY2FudmFzRWwucmVxdWVzdFBvaW50ZXJMb2NrKSB7CiAgICAgICAgY2FudmFzRWwucmVxdWVzdFBvaW50ZXJMb2NrKCk7CiAgICAgIH0gZWxzZSBpZiAoY2FudmFzRWwubW96UmVxdWVzdFBvaW50ZXJMb2NrKSB7CiAgICAgICAgY2FudmFzRWwubW96UmVxdWVzdFBvaW50ZXJMb2NrKCk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBTaG93cyBncmFiYmluZyBjdXJzb3Igb24gc2NlbmUKICAgKi8KICBzaG93R3JhYmJpbmdDdXJzb3I6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJzsKICB9LAoKICAvKioKICAgKiBIaWRlcyBncmFiYmluZyBjdXJzb3Igb24gc2NlbmUKICAgKi8KICBoaWRlR3JhYmJpbmdDdXJzb3I6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5jYW52YXMuc3R5bGUuY3Vyc29yID0gJyc7CiAgfSwKCiAgLyoqCiAgICogUmVnaXN0ZXIgbW91c2UgdXAgdG8gZGV0ZWN0IHJlbGVhc2Ugb2YgbW91c2UgZHJhZy4KICAgKi8KICBvbk1vdXNlVXA6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7CiAgICB0aGlzLmhpZGVHcmFiYmluZ0N1cnNvcigpOwogIH0sCgogIC8qKgogICAqIFJlZ2lzdGVyIHRvdWNoIGRvd24gdG8gZGV0ZWN0IHRvdWNoIGRyYWcuCiAgICovCiAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiAoZXZ0KSB7CiAgICBpZiAoZXZ0LnRvdWNoZXMubGVuZ3RoICE9PSAxIHx8CiAgICAgICAgIXRoaXMuZGF0YS50b3VjaEVuYWJsZWQgfHwKICAgICAgICB0aGlzLmVsLnNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSkgeyByZXR1cm47IH0KICAgIHRoaXMudG91Y2hTdGFydCA9IHsKICAgICAgeDogZXZ0LnRvdWNoZXNbMF0ucGFnZVgsCiAgICAgIHk6IGV2dC50b3VjaGVzWzBdLnBhZ2VZCiAgICB9OwogICAgdGhpcy50b3VjaFN0YXJ0ZWQgPSB0cnVlOwogIH0sCgogIC8qKgogICAqIFRyYW5zbGF0ZSB0b3VjaCBtb3ZlIHRvIFktYXhpcyByb3RhdGlvbi4KICAgKi8KICBvblRvdWNoTW92ZTogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGRpcmVjdGlvbjsKICAgIHZhciBjYW52YXMgPSB0aGlzLmVsLnNjZW5lRWwuY2FudmFzOwogICAgdmFyIGRlbHRhWTsKICAgIHZhciB5YXdPYmplY3QgPSB0aGlzLnlhd09iamVjdDsKCiAgICBpZiAoIXRoaXMudG91Y2hTdGFydGVkIHx8ICF0aGlzLmRhdGEudG91Y2hFbmFibGVkKSB7IHJldHVybjsgfQoKICAgIGRlbHRhWSA9IDIgKiBNYXRoLlBJICogKGV2dC50b3VjaGVzWzBdLnBhZ2VYIC0gdGhpcy50b3VjaFN0YXJ0LngpIC8gY2FudmFzLmNsaWVudFdpZHRoOwoKICAgIGRpcmVjdGlvbiA9IHRoaXMuZGF0YS5yZXZlcnNlVG91Y2hEcmFnID8gMSA6IC0xOwogICAgLy8gTGltaXQgdG91Y2ggb3JpZW50YWlvbiB0byB0byB5YXcgKHkgYXhpcykuCiAgICB5YXdPYmplY3Qucm90YXRpb24ueSAtPSBkZWx0YVkgKiAwLjUgKiBkaXJlY3Rpb247CiAgICB0aGlzLnRvdWNoU3RhcnQgPSB7CiAgICAgIHg6IGV2dC50b3VjaGVzWzBdLnBhZ2VYLAogICAgICB5OiBldnQudG91Y2hlc1swXS5wYWdlWQogICAgfTsKICB9LAoKICAvKioKICAgKiBSZWdpc3RlciB0b3VjaCBlbmQgdG8gZGV0ZWN0IHJlbGVhc2Ugb2YgdG91Y2ggZHJhZy4KICAgKi8KICBvblRvdWNoRW5kOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnRvdWNoU3RhcnRlZCA9IGZhbHNlOwogIH0sCgogIC8qKgogICAqIFNhdmUgcG9zZS4KICAgKi8KICBvbkVudGVyVlI6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsOwogICAgaWYgKCFzY2VuZUVsLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpKSB7IHJldHVybjsgfQogICAgdGhpcy5zYXZlQ2FtZXJhUG9zZSgpOwogICAgdGhpcy5lbC5vYmplY3QzRC5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7CiAgICB0aGlzLmVsLm9iamVjdDNELnJvdGF0aW9uLnNldCgwLCAwLCAwKTsKICAgIGlmIChzY2VuZUVsLmhhc1dlYlhSKSB7CiAgICAgIHRoaXMuZWwub2JqZWN0M0QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOwogICAgICB0aGlzLmVsLm9iamVjdDNELnVwZGF0ZU1hdHJpeCgpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlc3RvcmUgdGhlIHBvc2UuCiAgICovCiAgb25FeGl0VlI6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5lbC5zY2VuZUVsLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpKSB7IHJldHVybjsgfQogICAgdGhpcy5yZXN0b3JlQ2FtZXJhUG9zZSgpOwogICAgdGhpcy5wcmV2aW91c0hNRFBvc2l0aW9uLnNldCgwLCAwLCAwKTsKICAgIHRoaXMuZWwub2JqZWN0M0QubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIFBvaW50ZXIgTG9jayBzdGF0ZS4KICAgKi8KICBvblBvaW50ZXJMb2NrQ2hhbmdlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnBvaW50ZXJMb2NrZWQgPSAhIShkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgfHwgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50KTsKICB9LAoKICAvKioKICAgKiBSZWNvdmVyIGZyb20gUG9pbnRlciBMb2NrIGVycm9yLgogICAqLwogIG9uUG9pbnRlckxvY2tFcnJvcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5wb2ludGVyTG9ja2VkID0gZmFsc2U7CiAgfSwKCiAgLy8gRXhpdHMgcG9pbnRlci1sb2NrZWQgbW9kZS4KICBleGl0UG9pbnRlckxvY2s6IGZ1bmN0aW9uICgpIHsKICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpOwogICAgdGhpcy5wb2ludGVyTG9ja2VkID0gZmFsc2U7CiAgfSwKCiAgLyoqCiAgICogVG9nZ2xlIHRoZSBmZWF0dXJlIG9mIHNob3dpbmcvaGlkaW5nIHRoZSBncmFiIGN1cnNvci4KICAgKi8KICB1cGRhdGVHcmFiQ3Vyc29yOiBmdW5jdGlvbiAoZW5hYmxlZCkgewogICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7CgogICAgZnVuY3Rpb24gZW5hYmxlR3JhYkN1cnNvciAoKSB7IHNjZW5lRWwuY2FudmFzLmNsYXNzTGlzdC5hZGQoJ2EtZ3JhYi1jdXJzb3InKTsgfQogICAgZnVuY3Rpb24gZGlzYWJsZUdyYWJDdXJzb3IgKCkgeyBzY2VuZUVsLmNhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKCdhLWdyYWItY3Vyc29yJyk7IH0KCiAgICBpZiAoIXNjZW5lRWwuY2FudmFzKSB7CiAgICAgIGlmIChlbmFibGVkKSB7CiAgICAgICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdyZW5kZXItdGFyZ2V0LWxvYWRlZCcsIGVuYWJsZUdyYWJDdXJzb3IpOwogICAgICB9IGVsc2UgewogICAgICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigncmVuZGVyLXRhcmdldC1sb2FkZWQnLCBkaXNhYmxlR3JhYkN1cnNvcik7CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChlbmFibGVkKSB7CiAgICAgIGVuYWJsZUdyYWJDdXJzb3IoKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgZGlzYWJsZUdyYWJDdXJzb3IoKTsKICB9LAoKICAvKioKICAgKiBTYXZlIGNhbWVyYSBwb3NlIGJlZm9yZSBlbnRlcmluZyBWUiB0byByZXN0b3JlIGxhdGVyIGlmIGV4aXRpbmcuCiAgICovCiAgc2F2ZUNhbWVyYVBvc2U6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CgogICAgdGhpcy5zYXZlZFBvc2UucG9zaXRpb24uY29weShlbC5vYmplY3QzRC5wb3NpdGlvbik7CiAgICB0aGlzLnNhdmVkUG9zZS5yb3RhdGlvbi5jb3B5KGVsLm9iamVjdDNELnJvdGF0aW9uKTsKICAgIHRoaXMuaGFzU2F2ZWRQb3NlID0gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBSZXNldCBjYW1lcmEgcG9zZSB0byBiZWZvcmUgZW50ZXJpbmcgVlIuCiAgICovCiAgcmVzdG9yZUNhbWVyYVBvc2U6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgc2F2ZWRQb3NlID0gdGhpcy5zYXZlZFBvc2U7CgogICAgaWYgKCF0aGlzLmhhc1NhdmVkUG9zZSkgeyByZXR1cm47IH0KCiAgICAvLyBSZXNldCBjYW1lcmEgb3JpZW50YXRpb24uCiAgICBlbC5vYmplY3QzRC5wb3NpdGlvbi5jb3B5KHNhdmVkUG9zZS5wb3NpdGlvbik7CiAgICBlbC5vYmplY3QzRC5yb3RhdGlvbi5jb3B5KHNhdmVkUG9zZS5yb3RhdGlvbik7CiAgICB0aGlzLmhhc1NhdmVkUG9zZSA9IGZhbHNlOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vbGliL3RocmVlIjoxNTcsIi4uL3V0aWxzLyI6MTgyfV0sNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKCnZhciB0cmFja2VkQ29udHJvbHNVdGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMnKTsKdmFyIGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cDsKdmFyIGVtaXRJZkF4ZXNDaGFuZ2VkID0gdHJhY2tlZENvbnRyb2xzVXRpbHMuZW1pdElmQXhlc0NoYW5nZWQ7CnZhciBvbkJ1dHRvbkV2ZW50ID0gdHJhY2tlZENvbnRyb2xzVXRpbHMub25CdXR0b25FdmVudDsKCi8vIFNlZSBQcm9maWxlcyBSZWdpc3RyeToKLy8gaHR0cHM6Ly9naXRodWIuY29tL2ltbWVyc2l2ZS13ZWIvd2VieHItaW5wdXQtcHJvZmlsZXMvdHJlZS9tYXN0ZXIvcGFja2FnZXMvcmVnaXN0cnkKLy8gVE9ETzogQWRkIGEgbW9yZSByb2J1c3Qgc3lzdGVtIGZvciBkZXJpdmluZyBnYW1lcGFkIG5hbWUuCnZhciBHQU1FUEFEX0lEX1BSRUZJWCA9ICdtYWdpY2xlYXAnOwp2YXIgR0FNRVBBRF9JRF9TVUZGSVggPSAnLW9uZSc7CnZhciBHQU1FUEFEX0lEX0NPTVBPU0lURSA9IEdBTUVQQURfSURfUFJFRklYICsgR0FNRVBBRF9JRF9TVUZGSVg7Cgp2YXIgTUFHSUNMRUFQX0NPTlRST0xMRVJfTU9ERUxfR0xCX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvbWFnaWNsZWFwL21hZ2ljbGVhcC1vbmUtY29udHJvbGxlci5nbGInOwoKLyoqCiAqIEJ1dHRvbiBJRHM6CiAqIDAgLSB0cmlnZ2VyCiAqIDEgLSBncmlwCiAqIDIgLSB0b3VjaHBhZAogKiAzIC0gbWVudSAobmV2ZXIgZGlzcGF0Y2hlZCBvbiB0aGlzIGxheWVyKQogKgogKiBBeGlzOgogKiAwIC0gdG91Y2hwYWQgeCBheGlzCiAqIDEgLSB0b3VjaHBhZCB5IGF4aXMKICovCnZhciBJTlBVVF9NQVBQSU5HX1dFQlhSID0gewogIGF4ZXM6IHt0b3VjaHBhZDogWzAsIDFdfSwKICBidXR0b25zOiBbJ3RyaWdnZXInLCAnZ3JpcCcsICd0b3VjaHBhZCcsICdtZW51J10KfTsKCi8qKgogKiBNYWdpYyBMZWFwIENvbnRyb2xzCiAqIEludGVyZmFjZSB3aXRoIE1hZ2ljIExlYXAgY29udHJvbCBhbmQgbWFwIEdhbWVwYWQgZXZlbnRzIHRvIGNvbnRyb2xsZXIKICogYnV0dG9uczogdHJpZ2dlciwgZ3JpcCwgdG91Y2hwYWQsIGFuZCBtZW51LgogKiBMb2FkIGEgY29udHJvbGxlciBtb2RlbC4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdtYWdpY2xlYXAtY29udHJvbHMnLCB7CiAgc2NoZW1hOiB7CiAgICBoYW5kOiB7ZGVmYXVsdDogJ25vbmUnfSwKICAgIG1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBvcmllbnRhdGlvbk9mZnNldDoge3R5cGU6ICd2ZWMzJ30KICB9LAoKICBtYXBwaW5nOiBJTlBVVF9NQVBQSU5HX1dFQlhSLAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB0aGlzLmNvbnRyb2xsZXJQcmVzZW50ID0gZmFsc2U7CiAgICB0aGlzLmxhc3RDb250cm9sbGVyQ2hlY2sgPSAwOwogICAgdGhpcy5vbkJ1dHRvbkNoYW5nZWQgPSBiaW5kKHRoaXMub25CdXR0b25DaGFuZ2VkLCB0aGlzKTsKICAgIHRoaXMub25CdXR0b25Eb3duID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICdkb3duJywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVXAgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3VwJywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoZW5kJywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndG91Y2hzdGFydCcsIHNlbGYpOyB9OwogICAgdGhpcy5wcmV2aW91c0J1dHRvblZhbHVlcyA9IHt9OwogICAgdGhpcy5yZW5kZXJlclN5c3RlbSA9IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLnJlbmRlcmVyOwoKICAgIHRoaXMuYmluZE1ldGhvZHMoKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdGhpcy5jb250cm9sbGVySW5kZXggPSBkYXRhLmhhbmQgPT09ICdyaWdodCcgPyAwIDogZGF0YS5oYW5kID09PSAnbGVmdCcgPyAxIDogMjsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIGJpbmRNZXRob2RzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm9uTW9kZWxMb2FkZWQgPSBiaW5kKHRoaXMub25Nb2RlbExvYWRlZCwgdGhpcyk7CiAgICB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUgPSBiaW5kKHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgdGhpcyk7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCA9IGJpbmQodGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQsIHRoaXMpOwogICAgdGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyID0gYmluZCh0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIsIHRoaXMpOwogICAgdGhpcy5vbkF4aXNNb3ZlZCA9IGJpbmQodGhpcy5vbkF4aXNNb3ZlZCwgdGhpcyk7CiAgfSwKCiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogIH0sCgogIGNoZWNrSWZDb250cm9sbGVyUHJlc2VudDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAodGhpcywgR0FNRVBBRF9JRF9DT01QT1NJVEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2luZGV4OiB0aGlzLmNvbnRyb2xsZXJJbmRleCwgaGFuZDogZGF0YS5oYW5kfSk7CiAgfSwKCiAgaW5qZWN0VHJhY2tlZENvbnRyb2xzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CgogICAgZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzJywgewogICAgICAvLyBUT0RPOiB2ZXJpZnkgZXhwZWN0ZWQgYmVoYXZpb3IgYmV0d2VlbiByZXNlcnZlZCBwcmVmaXhlcy4KICAgICAgaWRQcmVmaXg6IEdBTUVQQURfSURfQ09NUE9TSVRFLAogICAgICBoYW5kOiBkYXRhLmhhbmQsCiAgICAgIGNvbnRyb2xsZXI6IHRoaXMuY29udHJvbGxlckluZGV4LAogICAgICBvcmllbnRhdGlvbk9mZnNldDogZGF0YS5vcmllbnRhdGlvbk9mZnNldAogICAgfSk7CgogICAgLy8gTG9hZCBtb2RlbC4KICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2dsdGYtbW9kZWwnLCBNQUdJQ0xFQVBfQ09OVFJPTExFUl9NT0RFTF9HTEJfVVJMKTsKICB9LAoKICBhZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgcmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5zY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgZmFsc2UpOwogIH0sCgogIG9uQ29udHJvbGxlcnNVcGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIC8vIE5vdGUgdGhhdCBkdWUgdG8gZ2FtZXBhZGNvbm5lY3RlZCBldmVudCBwcm9wYWdhdGlvbiBpc3N1ZXMsIHdlIGRvbid0IHJlbHkgb24gZXZlbnRzLgogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICB9LAoKICAvKioKICAgKiBSb3RhdGUgdGhlIHRyaWdnZXIgYnV0dG9uIGJhc2VkIG9uIGhvdyBoYXJkIHRoZSB0cmlnZ2VyIGlzIHByZXNzZWQuCiAgICovCiAgb25CdXR0b25DaGFuZ2VkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgYnV0dG9uID0gdGhpcy5tYXBwaW5nLmJ1dHRvbnNbZXZ0LmRldGFpbC5pZF07CiAgICB2YXIgYW5hbG9nVmFsdWU7CgogICAgaWYgKCFidXR0b24pIHsgcmV0dXJuOyB9CiAgICBpZiAoYnV0dG9uID09PSAndHJpZ2dlcicpIHsKICAgICAgYW5hbG9nVmFsdWUgPSBldnQuZGV0YWlsLnN0YXRlLnZhbHVlOwogICAgICBjb25zb2xlLmxvZygnYW5hbG9nIHZhbHVlIG9mIHRyaWdnZXIgcHJlc3M6ICcgKyBhbmFsb2dWYWx1ZSk7CiAgICB9CgogICAgLy8gUGFzcyBhbG9uZyBjaGFuZ2VkIGV2ZW50IHdpdGggYnV0dG9uIHN0YXRlLCB1c2luZyBidXR0b24gbWFwcGluZyBmb3IgY29udmVuaWVuY2UuCiAgICB0aGlzLmVsLmVtaXQoYnV0dG9uICsgJ2NoYW5nZWQnLCBldnQuZGV0YWlsLnN0YXRlKTsKICB9LAoKICBvbk1vZGVsTG9hZGVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgY29udHJvbGxlck9iamVjdDNEID0gZXZ0LmRldGFpbC5tb2RlbDsKICAgIC8vIG91ciBnbGIgc2NhbGUgaXMgdG9vIGxhcmdlLgogICAgY29udHJvbGxlck9iamVjdDNELnNjYWxlLnNldCgwLjAxLCAwLjAxLCAwLjAxKTsKICB9LAoKICBvbkF4aXNNb3ZlZDogZnVuY3Rpb24gKGV2dCkgewogICAgZW1pdElmQXhlc0NoYW5nZWQodGhpcywgdGhpcy5tYXBwaW5nLmF4ZXMsIGV2dCk7CiAgfSwKCiAgdXBkYXRlTW9kZWw6IGZ1bmN0aW9uIChidXR0b25OYW1lLCBldnROYW1lKSB7fSwKCiAgc2V0QnV0dG9uQ29sb3I6IGZ1bmN0aW9uIChidXR0b25OYW1lLCBjb2xvcikge30KCn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiBnbG9iYWwgUHJvbWlzZSAqLwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKdmFyIGNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50Jyk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwp2YXIgc2hhZGVyID0gX2RlcmVxXygnLi4vY29yZS9zaGFkZXInKTsKCnZhciBlcnJvciA9IHV0aWxzLmRlYnVnKCdjb21wb25lbnRzOm1hdGVyaWFsOmVycm9yJyk7CnZhciByZWdpc3RlckNvbXBvbmVudCA9IGNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudDsKdmFyIHNoYWRlcnMgPSBzaGFkZXIuc2hhZGVyczsKdmFyIHNoYWRlck5hbWVzID0gc2hhZGVyLnNoYWRlck5hbWVzOwoKLyoqCiAqIE1hdGVyaWFsIGNvbXBvbmVudC4KICoKICogQG1lbWJlciB7b2JqZWN0fSBzaGFkZXIgLSBEZXRlcm1pbmVzIGhvdyBtYXRlcmlhbCBpcyBzaGFkZWQuIERlZmF1bHRzIHRvIGBzdGFuZGFyZGAsCiAqICAgICAgICAgdGhyZWUuanMncyBpbXBsZW1lbnRhdGlvbiBvZiBQQlIuIEFub3RoZXIgc3RhbmRhcmQgc2hhZGluZyBtb2RlbCBpcyBgZmxhdGAgd2hpY2gKICogICAgICAgICB1c2VzIE1lc2hCYXNpY01hdGVyaWFsLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ21hdGVyaWFsJywgewogIHNjaGVtYTogewogICAgYWxwaGFUZXN0OiB7ZGVmYXVsdDogMC4wLCBtaW46IDAuMCwgbWF4OiAxLjB9LAogICAgZGVwdGhUZXN0OiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBkZXB0aFdyaXRlOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBmbGF0U2hhZGluZzoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIG5wb3Q6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICBvZmZzZXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAwLCB5OiAwfX0sCiAgICBvcGFjaXR5OiB7ZGVmYXVsdDogMS4wLCBtaW46IDAuMCwgbWF4OiAxLjB9LAogICAgcmVwZWF0OiB7dHlwZTogJ3ZlYzInLCBkZWZhdWx0OiB7eDogMSwgeTogMX19LAogICAgc2hhZGVyOiB7ZGVmYXVsdDogJ3N0YW5kYXJkJywgb25lT2Y6IHNoYWRlck5hbWVzLCBzY2hlbWFDaGFuZ2U6IHRydWV9LAogICAgc2lkZToge2RlZmF1bHQ6ICdmcm9udCcsIG9uZU9mOiBbJ2Zyb250JywgJ2JhY2snLCAnZG91YmxlJ119LAogICAgdHJhbnNwYXJlbnQ6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICB2ZXJ0ZXhDb2xvcnM6IHt0eXBlOiAnc3RyaW5nJywgZGVmYXVsdDogJ25vbmUnLCBvbmVPZjogWydmYWNlJywgJ3ZlcnRleCddfSwKICAgIHZpc2libGU6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGJsZW5kaW5nOiB7ZGVmYXVsdDogJ25vcm1hbCcsIG9uZU9mOiBbJ25vbmUnLCAnbm9ybWFsJywgJ2FkZGl0aXZlJywgJ3N1YnRyYWN0aXZlJywgJ211bHRpcGx5J119LAogICAgZGl0aGVyaW5nOiB7ZGVmYXVsdDogdHJ1ZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgb3IgY3JlYXRlIG1hdGVyaWFsLgogICAqCiAgICogQHBhcmFtIHtvYmplY3R8bnVsbH0gb2xkRGF0YQogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgaWYgKCF0aGlzLnNoYWRlciB8fCBkYXRhLnNoYWRlciAhPT0gb2xkRGF0YS5zaGFkZXIpIHsKICAgICAgdGhpcy51cGRhdGVTaGFkZXIoZGF0YS5zaGFkZXIpOwogICAgfQogICAgdGhpcy5zaGFkZXIudXBkYXRlKHRoaXMuZGF0YSk7CiAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsKG9sZERhdGEpOwogIH0sCgogIHVwZGF0ZVNjaGVtYTogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBjdXJyZW50U2hhZGVyOwogICAgdmFyIG5ld1NoYWRlcjsKICAgIHZhciBzY2hlbWE7CiAgICB2YXIgc2hhZGVyOwoKICAgIG5ld1NoYWRlciA9IGRhdGEgJiYgZGF0YS5zaGFkZXI7CiAgICBjdXJyZW50U2hhZGVyID0gdGhpcy5vbGREYXRhICYmIHRoaXMub2xkRGF0YS5zaGFkZXI7CiAgICBzaGFkZXIgPSBuZXdTaGFkZXIgfHwgY3VycmVudFNoYWRlcjsKICAgIHNjaGVtYSA9IHNoYWRlcnNbc2hhZGVyXSAmJiBzaGFkZXJzW3NoYWRlcl0uc2NoZW1hOwoKICAgIGlmICghc2NoZW1hKSB7IGVycm9yKCdVbmtub3duIHNoYWRlciBzY2hlbWEgJyArIHNoYWRlcik7IH0KICAgIGlmIChjdXJyZW50U2hhZGVyICYmIG5ld1NoYWRlciA9PT0gY3VycmVudFNoYWRlcikgeyByZXR1cm47IH0KICAgIHRoaXMuZXh0ZW5kU2NoZW1hKHNjaGVtYSk7CiAgICB0aGlzLnVwZGF0ZUJlaGF2aW9yKCk7CiAgfSwKCiAgdXBkYXRlQmVoYXZpb3I6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBrZXk7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIHZhciBzY2hlbWEgPSB0aGlzLnNjaGVtYTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciB0aWNrUHJvcGVydGllczsKCiAgICBmdW5jdGlvbiB0aWNrVGltZSAodGltZSwgZGVsdGEpIHsKICAgICAgdmFyIGtleTsKICAgICAgZm9yIChrZXkgaW4gdGlja1Byb3BlcnRpZXMpIHsKICAgICAgICB0aWNrUHJvcGVydGllc1trZXldID0gdGltZTsKICAgICAgfQogICAgICBzZWxmLnNoYWRlci51cGRhdGUodGlja1Byb3BlcnRpZXMpOwogICAgfQoKICAgIHRoaXMudGljayA9IHVuZGVmaW5lZDsKCiAgICB0aWNrUHJvcGVydGllcyA9IHt9OwogICAgZm9yIChrZXkgaW4gc2NoZW1hKSB7CiAgICAgIGlmIChzY2hlbWFba2V5XS50eXBlID09PSAndGltZScpIHsKICAgICAgICB0aGlzLnRpY2sgPSB0aWNrVGltZTsKICAgICAgICB0aWNrUHJvcGVydGllc1trZXldID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIGlmICghc2NlbmVFbCkgeyByZXR1cm47IH0KICAgIGlmICh0aGlzLnRpY2spIHsKICAgICAgc2NlbmVFbC5hZGRCZWhhdmlvcih0aGlzKTsKICAgIH0gZWxzZSB7CiAgICAgIHNjZW5lRWwucmVtb3ZlQmVoYXZpb3IodGhpcyk7CiAgICB9CiAgfSwKCiAgdXBkYXRlU2hhZGVyOiBmdW5jdGlvbiAoc2hhZGVyTmFtZSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgU2hhZGVyID0gc2hhZGVyc1tzaGFkZXJOYW1lXSAmJiBzaGFkZXJzW3NoYWRlck5hbWVdLlNoYWRlcjsKICAgIHZhciBzaGFkZXJJbnN0YW5jZTsKCiAgICBpZiAoIVNoYWRlcikgeyB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc2hhZGVyICcgKyBzaGFkZXJOYW1lKTsgfQoKICAgIC8vIEdldCBtYXRlcmlhbCBmcm9tIEEtRnJhbWUgc2hhZGVyLgogICAgc2hhZGVySW5zdGFuY2UgPSB0aGlzLnNoYWRlciA9IG5ldyBTaGFkZXIoKTsKICAgIHNoYWRlckluc3RhbmNlLmVsID0gdGhpcy5lbDsKICAgIHNoYWRlckluc3RhbmNlLmluaXQoZGF0YSk7CiAgICB0aGlzLnNldE1hdGVyaWFsKHNoYWRlckluc3RhbmNlLm1hdGVyaWFsKTsKICAgIHRoaXMudXBkYXRlU2NoZW1hKGRhdGEpOwogIH0sCgogIC8qKgogICAqIFNldCBhbmQgdXBkYXRlIGJhc2UgbWF0ZXJpYWwgcHJvcGVydGllcy4KICAgKiBTZXQgYG5lZWRzVXBkYXRlYCB3aGVuIG5lZWRlZC4KICAgKi8KICB1cGRhdGVNYXRlcmlhbDogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDsKICAgIHZhciBvbGREYXRhSGFzS2V5czsKCiAgICAvLyBCYXNlIG1hdGVyaWFsIHByb3BlcnRpZXMuCiAgICBtYXRlcmlhbC5hbHBoYVRlc3QgPSBkYXRhLmFscGhhVGVzdDsKICAgIG1hdGVyaWFsLmRlcHRoVGVzdCA9IGRhdGEuZGVwdGhUZXN0ICE9PSBmYWxzZTsKICAgIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBkYXRhLmRlcHRoV3JpdGUgIT09IGZhbHNlOwogICAgbWF0ZXJpYWwub3BhY2l0eSA9IGRhdGEub3BhY2l0eTsKICAgIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0gZGF0YS5mbGF0U2hhZGluZzsKICAgIG1hdGVyaWFsLnNpZGUgPSBwYXJzZVNpZGUoZGF0YS5zaWRlKTsKICAgIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gZGF0YS50cmFuc3BhcmVudCAhPT0gZmFsc2UgfHwgZGF0YS5vcGFjaXR5IDwgMS4wOwogICAgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0gcGFyc2VWZXJ0ZXhDb2xvcnMoZGF0YS52ZXJ0ZXhDb2xvcnMpOwogICAgbWF0ZXJpYWwudmlzaWJsZSA9IGRhdGEudmlzaWJsZTsKICAgIG1hdGVyaWFsLmJsZW5kaW5nID0gcGFyc2VCbGVuZGluZyhkYXRhLmJsZW5kaW5nKTsKICAgIG1hdGVyaWFsLmRpdGhlcmluZyA9IGRhdGEuZGl0aGVyaW5nOwoKICAgIC8vIENoZWNrIGlmIG1hdGVyaWFsIG5lZWRzIHVwZGF0ZS4KICAgIGZvciAob2xkRGF0YUhhc0tleXMgaW4gb2xkRGF0YSkgeyBicmVhazsgfQogICAgaWYgKG9sZERhdGFIYXNLZXlzICYmCiAgICAgICAgKG9sZERhdGEuYWxwaGFUZXN0ICE9PSBkYXRhLmFscGhhVGVzdCB8fAogICAgICAgICBvbGREYXRhLnNpZGUgIT09IGRhdGEuc2lkZSB8fAogICAgICAgICBvbGREYXRhLnZlcnRleENvbG9ycyAhPT0gZGF0YS52ZXJ0ZXhDb2xvcnMpKSB7CiAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIH0KICB9LAoKICAvKioKICAgKiBSZW1vdmUgbWF0ZXJpYWwgb24gcmVtb3ZlIChjYWxsYmFjaykuCiAgICogRGlzcG9zZSBvZiBpdCBmcm9tIG1lbW9yeSBhbmQgdW5zdWJzY3JpYmUgZnJvbSBzY2VuZSB1cGRhdGVzLgogICAqLwogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZmF1bHRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgpOwogICAgdmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDsKICAgIHZhciBvYmplY3QzRCA9IHRoaXMuZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKTsKICAgIGlmIChvYmplY3QzRCkgeyBvYmplY3QzRC5tYXRlcmlhbCA9IGRlZmF1bHRNYXRlcmlhbDsgfQogICAgZGlzcG9zZU1hdGVyaWFsKG1hdGVyaWFsLCB0aGlzLnN5c3RlbSk7CiAgfSwKCiAgLyoqCiAgICogKFJlKWNyZWF0ZSBuZXcgbWF0ZXJpYWwuIEhhcyBzaWRlLWVmZmVjdHMgb2Ygc2V0dGluZyBgdGhpcy5tYXRlcmlhbGAgYW5kIHVwZGF0aW5nCiAgICogbWF0ZXJpYWwgcmVnaXN0cmF0aW9uIGluIHNjZW5lLgogICAqCiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBNYXRlcmlhbCBjb21wb25lbnQgZGF0YS4KICAgKiBAcGFyYW0ge29iamVjdH0gdHlwZSAtIE1hdGVyaWFsIHR5cGUgdG8gY3JlYXRlLgogICAqIEByZXR1cm5zIHtvYmplY3R9IE1hdGVyaWFsLgogICAqLwogIHNldE1hdGVyaWFsOiBmdW5jdGlvbiAobWF0ZXJpYWwpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgbWVzaDsKICAgIHZhciBzeXN0ZW0gPSB0aGlzLnN5c3RlbTsKCiAgICBpZiAodGhpcy5tYXRlcmlhbCkgeyBkaXNwb3NlTWF0ZXJpYWwodGhpcy5tYXRlcmlhbCwgc3lzdGVtKTsgfQoKICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDsKICAgIHN5c3RlbS5yZWdpc3Rlck1hdGVyaWFsKG1hdGVyaWFsKTsKCiAgICAvLyBTZXQgb24gbWVzaC4gSWYgbWVzaCBkb2VzIG5vdCBleGlzdCwgd2FpdCBmb3IgaXQuCiAgICBtZXNoID0gZWwuZ2V0T2JqZWN0M0QoJ21lc2gnKTsKICAgIGlmIChtZXNoKSB7CiAgICAgIG1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDsKICAgIH0gZWxzZSB7CiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ29iamVjdDNkc2V0JywgZnVuY3Rpb24gd2FpdEZvck1lc2ggKGV2dCkgewogICAgICAgIGlmIChldnQuZGV0YWlsLnR5cGUgIT09ICdtZXNoJyB8fCBldnQudGFyZ2V0ICE9PSBlbCkgeyByZXR1cm47IH0KICAgICAgICBlbC5nZXRPYmplY3QzRCgnbWVzaCcpLm1hdGVyaWFsID0gbWF0ZXJpYWw7CiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2JqZWN0M2RzZXQnLCB3YWl0Rm9yTWVzaCk7CiAgICAgIH0pOwogICAgfQogIH0KfSk7CgovKioKICogUmV0dXJuIGEgdGhyZWUuanMgY29uc3RhbnQgZGV0ZXJtaW5pbmcgd2hpY2ggbWF0ZXJpYWwgZmFjZSBzaWRlcyB0byByZW5kZXIKICogYmFzZWQgb24gdGhlIHNpZGUgcGFyYW1ldGVyIChwYXNzZWQgYXMgYSBjb21wb25lbnQgcHJvcGVydHkpLgogKgogKiBAcGFyYW0ge3N0cmluZ30gW3NpZGU9ZnJvbnRdIC0gYGZyb250YCwgYGJhY2tgLCBvciBgZG91YmxlYC4KICogQHJldHVybnMge251bWJlcn0gVEhSRUUuRnJvbnRTaWRlLCBUSFJFRS5CYWNrU2lkZSwgb3IgVEhSRUUuRG91YmxlU2lkZS4KICovCmZ1bmN0aW9uIHBhcnNlU2lkZSAoc2lkZSkgewogIHN3aXRjaCAoc2lkZSkgewogICAgY2FzZSAnYmFjayc6IHsKICAgICAgcmV0dXJuIFRIUkVFLkJhY2tTaWRlOwogICAgfQogICAgY2FzZSAnZG91YmxlJzogewogICAgICByZXR1cm4gVEhSRUUuRG91YmxlU2lkZTsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgLy8gSW5jbHVkaW5nIGNhc2UgYGZyb250YC4KICAgICAgcmV0dXJuIFRIUkVFLkZyb250U2lkZTsKICAgIH0KICB9Cn0KCi8qKgogKiBSZXR1cm4gYSB0aHJlZS5qcyBjb25zdGFudCBkZXRlcm1pbmluZyB2ZXJ0ZXggY29sb3JpbmcuCiAqLwpmdW5jdGlvbiBwYXJzZVZlcnRleENvbG9ycyAoY29sb3JpbmcpIHsKICBzd2l0Y2ggKGNvbG9yaW5nKSB7CiAgICBjYXNlICdmYWNlJzogewogICAgICByZXR1cm4gVEhSRUUuRmFjZUNvbG9yczsKICAgIH0KICAgIGNhc2UgJ3ZlcnRleCc6IHsKICAgICAgcmV0dXJuIFRIUkVFLlZlcnRleENvbG9yczsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgcmV0dXJuIFRIUkVFLk5vQ29sb3JzOwogICAgfQogIH0KfQoKLyoqCiAqIFJldHVybiBhIHRocmVlLmpzIGNvbnN0YW50IGRldGVybWluaW5nIGJsZW5kaW5nCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBbYmxlbmRpbmc9bm9ybWFsXQogKiAtIGBub25lYCwgYWRkaXRpdmVgLCBgc3VidHJhY3RpdmVgLGBtdWx0aXBseWAgb3IgYG5vcm1hbGAuCiAqIEByZXR1cm5zIHtudW1iZXJ9CiAqLwpmdW5jdGlvbiBwYXJzZUJsZW5kaW5nIChibGVuZGluZykgewogIHN3aXRjaCAoYmxlbmRpbmcpIHsKICAgIGNhc2UgJ25vbmUnOiB7CiAgICAgIHJldHVybiBUSFJFRS5Ob0JsZW5kaW5nOwogICAgfQogICAgY2FzZSAnYWRkaXRpdmUnOiB7CiAgICAgIHJldHVybiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nOwogICAgfQogICAgY2FzZSAnc3VidHJhY3RpdmUnOiB7CiAgICAgIHJldHVybiBUSFJFRS5TdWJ0cmFjdGl2ZUJsZW5kaW5nOwogICAgfQogICAgY2FzZSAnbXVsdGlwbHknOiB7CiAgICAgIHJldHVybiBUSFJFRS5NdWx0aXBseUJsZW5kaW5nOwogICAgfQogICAgZGVmYXVsdDogewogICAgICByZXR1cm4gVEhSRUUuTm9ybWFsQmxlbmRpbmc7CiAgICB9CiAgfQp9CgovKioKICogRGlzcG9zZSBvZiBtYXRlcmlhbCBmcm9tIG1lbW9yeSBhbmQgdW5zdWJzY3JpYmUgbWF0ZXJpYWwgZnJvbSBzY2VuZSB1cGRhdGVzIGxpa2UgZm9nLgogKi8KZnVuY3Rpb24gZGlzcG9zZU1hdGVyaWFsIChtYXRlcmlhbCwgc3lzdGVtKSB7CiAgbWF0ZXJpYWwuZGlzcG9zZSgpOwogIHN5c3RlbS51bnJlZ2lzdGVyTWF0ZXJpYWwobWF0ZXJpYWwpOwp9Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vY29yZS9zaGFkZXIiOjExOSwiLi4vbGliL3RocmVlIjoxNTcsIi4uL3V0aWxzLyI6MTgyfV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZGVidWcgPSBfZGVyZXFfKCcuLi91dGlscy9kZWJ1ZycpOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciB3YXJuID0gZGVidWcoJ2NvbXBvbmVudHM6b2JqLW1vZGVsOndhcm4nKTsKCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdvYmotbW9kZWwnLCB7CiAgc2NoZW1hOiB7CiAgICBtdGw6IHt0eXBlOiAnbW9kZWwnfSwKICAgIG9iajoge3R5cGU6ICdtb2RlbCd9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHRoaXMubW9kZWwgPSBudWxsOwogICAgdGhpcy5vYmpMb2FkZXIgPSBuZXcgVEhSRUUuT0JKTG9hZGVyKCk7CiAgICB0aGlzLm10bExvYWRlciA9IG5ldyBUSFJFRS5NVExMb2FkZXIodGhpcy5vYmpMb2FkZXIubWFuYWdlcik7CiAgICAvLyBBbGxvdyBjcm9zcy1vcmlnaW4gaW1hZ2VzIHRvIGJlIGxvYWRlZC4KICAgIHRoaXMubXRsTG9hZGVyLmNyb3NzT3JpZ2luID0gJyc7CgogICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb25lbnRpbml0aWFsaXplZCcsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgaWYgKCFzZWxmLm1vZGVsKSB7IHJldHVybjsgfQogICAgICBpZiAoZXZ0LmRldGFpbC5uYW1lICE9PSAnbWF0ZXJpYWwnKSB7IHJldHVybjsgfQogICAgICBzZWxmLmFwcGx5TWF0ZXJpYWwoKTsKICAgIH0pOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICBpZiAoIWRhdGEub2JqKSB7IHJldHVybjsgfQogICAgdGhpcy5yZXNldE1lc2goKTsKICAgIHRoaXMubG9hZE9iaihkYXRhLm9iaiwgZGF0YS5tdGwpOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgaWYgKCF0aGlzLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy5yZXNldE1lc2goKTsKICB9LAoKICByZXNldE1lc2g6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwucmVtb3ZlT2JqZWN0M0QoJ21lc2gnKTsKICB9LAoKICBsb2FkT2JqOiBmdW5jdGlvbiAob2JqVXJsLCBtdGxVcmwpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgbXRsTG9hZGVyID0gdGhpcy5tdGxMb2FkZXI7CiAgICB2YXIgb2JqTG9hZGVyID0gdGhpcy5vYmpMb2FkZXI7CiAgICB2YXIgcmVuZGVyZXJTeXN0ZW0gPSB0aGlzLmVsLnNjZW5lRWwuc3lzdGVtcy5yZW5kZXJlcjsKICAgIHZhciBCQVNFX1BBVEggPSBtdGxVcmwuc3Vic3RyKDAsIG10bFVybC5sYXN0SW5kZXhPZignLycpICsgMSk7CgogICAgaWYgKG10bFVybCkgewogICAgICAvLyAuT0JKIHdpdGggYW4gLk1UTC4KICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnbWF0ZXJpYWwnKSkgewogICAgICAgIHdhcm4oJ01hdGVyaWFsIGNvbXBvbmVudCBwcm9wZXJ0aWVzIGFyZSBpZ25vcmVkIHdoZW4gYSAuTVRMIGlzIHByb3ZpZGVkJyk7CiAgICAgIH0KICAgICAgbXRsTG9hZGVyLnNldFJlc291cmNlUGF0aChCQVNFX1BBVEgpOwogICAgICBtdGxMb2FkZXIubG9hZChtdGxVcmwsIGZ1bmN0aW9uIChtYXRlcmlhbHMpIHsKICAgICAgICBtYXRlcmlhbHMucHJlbG9hZCgpOwogICAgICAgIG9iakxvYWRlci5zZXRNYXRlcmlhbHMobWF0ZXJpYWxzKTsKICAgICAgICBvYmpMb2FkZXIubG9hZChvYmpVcmwsIGZ1bmN0aW9uIChvYmpNb2RlbCkgewogICAgICAgICAgc2VsZi5tb2RlbCA9IG9iak1vZGVsOwogICAgICAgICAgc2VsZi5tb2RlbC50cmF2ZXJzZShmdW5jdGlvbiAob2JqZWN0KSB7CiAgICAgICAgICAgIGlmIChvYmplY3QuaXNNZXNoKSB7CiAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsOwogICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5jb2xvcikgcmVuZGVyZXJTeXN0ZW0uYXBwbHlDb2xvckNvcnJlY3Rpb24obWF0ZXJpYWwuY29sb3IpOwogICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5tYXApIHJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKG1hdGVyaWFsLm1hcCk7CiAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLmVtaXNzaXZlKSByZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihtYXRlcmlhbC5lbWlzc2l2ZSk7CiAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSByZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihtYXRlcmlhbC5lbWlzc2l2ZU1hcCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgZWwuc2V0T2JqZWN0M0QoJ21lc2gnLCBvYmpNb2RlbCk7CiAgICAgICAgICBlbC5lbWl0KCdtb2RlbC1sb2FkZWQnLCB7Zm9ybWF0OiAnb2JqJywgbW9kZWw6IG9iak1vZGVsfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gLk9CSiBvbmx5LgogICAgb2JqTG9hZGVyLmxvYWQob2JqVXJsLCBmdW5jdGlvbiBsb2FkT2JqT25seSAob2JqTW9kZWwpIHsKICAgICAgc2VsZi5tb2RlbCA9IG9iak1vZGVsOwogICAgICBzZWxmLmFwcGx5TWF0ZXJpYWwoKTsKICAgICAgZWwuc2V0T2JqZWN0M0QoJ21lc2gnLCBvYmpNb2RlbCk7CiAgICAgIGVsLmVtaXQoJ21vZGVsLWxvYWRlZCcsIHtmb3JtYXQ6ICdvYmonLCBtb2RlbDogb2JqTW9kZWx9KTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEFwcGx5IG1hdGVyaWFsIGZyb20gbWF0ZXJpYWwgY29tcG9uZW50IHJlY3Vyc2l2ZWx5LgogICAqLwogIGFwcGx5TWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuZWwuY29tcG9uZW50cy5tYXRlcmlhbDsKICAgIGlmICghbWF0ZXJpYWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLm1vZGVsLnRyYXZlcnNlKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSB7CiAgICAgICAgY2hpbGQubWF0ZXJpYWwgPSBtYXRlcmlhbC5tYXRlcmlhbDsKICAgICAgfQogICAgfSk7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvZGVidWciOjE3OH1dLDczOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7CnZhciBpc1dlYlhSQXZhaWxhYmxlID0gX2RlcmVxXygnLi4vdXRpbHMvJykuZGV2aWNlLmlzV2ViWFJBdmFpbGFibGU7Cgp2YXIgR0FNRVBBRF9JRF9XRUJYUiA9ICdvY3VsdXMtZ28nOwp2YXIgR0FNRVBBRF9JRF9XRUJWUiA9ICdPY3VsdXMgR28nOwoKdmFyIE9DVUxVU19HT19DT05UUk9MTEVSX01PREVMX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvb2N1bHVzL2dvL29jdWx1cy1nby1jb250cm9sbGVyLmdsdGYnOwoKLy8gUHJlZml4IGZvciBHZW4xIGFuZCBHZW4yIE9jdWx1cyBUb3VjaCBDb250cm9sbGVycy4KdmFyIEdBTUVQQURfSURfUFJFRklYID0gaXNXZWJYUkF2YWlsYWJsZSA/IEdBTUVQQURfSURfV0VCWFIgOiBHQU1FUEFEX0lEX1dFQlZSOwoKLyoqCiAqIEJ1dHRvbiBpbmRpY2VzOgogKiAwIC0gdHJhY2twYWQKICogMSAtIHRyaWdnZXIKICoKICogQXhpczoKICogMCAtIHRyYWNrcGFkIHgKICogMSAtIHRyYWNrcGFkIHkKICovCnZhciBJTlBVVF9NQVBQSU5HX1dFQlZSID0gewogIGF4ZXM6IHt0cmFja3BhZDogWzAsIDFdfSwKICBidXR0b25zOiBbJ3RyYWNrcGFkJywgJ3RyaWdnZXInXQp9OwoKLyoqCiAqIEJ1dHRvbiBpbmRpY2VzOgogKiAwIC0gdHJpZ2dlcgogKiAxIC0gbm9uZQogKiAyIC0gdG91Y2hwYWQKICoKICogQXhpczoKICogMCAtIHRvdWNocGFkIHgKICogMSAtIHRvdWNocGFkIHkKICogUmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vaW1tZXJzaXZlLXdlYi93ZWJ4ci1pbnB1dC1wcm9maWxlcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9yZWdpc3RyeS9wcm9maWxlcy9vY3VsdXMvb2N1bHVzLWdvLmpzb24KICovCnZhciBJTlBVVF9NQVBQSU5HX1dFQlhSID0gewogIGF4ZXM6IHt0b3VjaHBhZDogWzAsIDFdfSwKICBidXR0b25zOiBbJ3RyaWdnZXInLCAnbm9uZScsICd0b3VjaHBhZCddCn07Cgp2YXIgSU5QVVRfTUFQUElORyA9IGlzV2ViWFJBdmFpbGFibGUgPyBJTlBVVF9NQVBQSU5HX1dFQlhSIDogSU5QVVRfTUFQUElOR19XRUJWUjsKCi8qKgogKiBPY3VsdXMgR28gY29udHJvbHMuCiAqIEludGVyZmFjZSB3aXRoIE9jdWx1cyBHbyBjb250cm9sbGVyIGFuZCBtYXAgR2FtZXBhZCBldmVudHMgdG8KICogY29udHJvbGxlciBidXR0b25zOiB0cmFja3BhZCwgdHJpZ2dlcgogKiBMb2FkIGEgY29udHJvbGxlciBtb2RlbCBhbmQgaGlnaGxpZ2h0IHRoZSBwcmVzc2VkIGJ1dHRvbnMuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnb2N1bHVzLWdvLWNvbnRyb2xzJywgewogIHNjaGVtYTogewogICAgaGFuZDoge2RlZmF1bHQ6ICcnfSwgIC8vIFRoaXMgaW5mb3JtcyB0aGUgZGVnZW5lcmF0ZSBhcm0gbW9kZWwuCiAgICBidXR0b25Db2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjRkZGRkZGJ30sCiAgICBidXR0b25Ub3VjaGVkQ29sb3I6IHt0eXBlOiAnY29sb3InLCBkZWZhdWx0OiAnI0JCQkJCQid9LAogICAgYnV0dG9uSGlnaGxpZ2h0Q29sb3I6IHt0eXBlOiAnY29sb3InLCBkZWZhdWx0OiAnIzdBN0E3QSd9LAogICAgbW9kZWw6IHtkZWZhdWx0OiB0cnVlfSwKICAgIG9yaWVudGF0aW9uT2Zmc2V0OiB7dHlwZTogJ3ZlYzMnfSwKICAgIGFybU1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0KICB9LAoKICAvKioKICAgKiBCdXR0b24gSURzOgogICAqIDAgLSB0cmFja3BhZAogICAqIDEgLSB0cmlnZ2VyCiAgICovCiAgbWFwcGluZzogSU5QVVRfTUFQUElORywKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Nb2RlbExvYWRlZCA9IGJpbmQodGhpcy5vbk1vZGVsTG9hZGVkLCB0aGlzKTsKICAgIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSA9IGJpbmQodGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCB0aGlzKTsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50ID0gYmluZCh0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCwgdGhpcyk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIgPSBiaW5kKHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciwgdGhpcyk7CiAgICB0aGlzLm9uQXhpc01vdmVkID0gYmluZCh0aGlzLm9uQXhpc01vdmVkLCB0aGlzKTsKICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB0aGlzLm9uQnV0dG9uQ2hhbmdlZCA9IGJpbmQodGhpcy5vbkJ1dHRvbkNoYW5nZWQsIHRoaXMpOwogICAgdGhpcy5vbkJ1dHRvbkRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ2Rvd24nLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25VcCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndXAnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaHN0YXJ0Jywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoZW5kJywgc2VsZik7IH07CiAgICB0aGlzLmNvbnRyb2xsZXJQcmVzZW50ID0gZmFsc2U7CiAgICB0aGlzLmxhc3RDb250cm9sbGVyQ2hlY2sgPSAwOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbSA9IHRoaXMuZWwuc2NlbmVFbC5zeXN0ZW1zLnJlbmRlcmVyOwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwogIH0sCgogIGFkZEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uY2hhbmdlZCcsIHRoaXMub25CdXR0b25DaGFuZ2VkKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbmRvd24nLCB0aGlzLm9uQnV0dG9uRG93bik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b251cCcsIHRoaXMub25CdXR0b25VcCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2F4aXNtb3ZlJywgdGhpcy5vbkF4aXNNb3ZlZCk7CiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHNBY3RpdmUgPSB0cnVlOwogIH0sCgogIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uY2hhbmdlZCcsIHRoaXMub25CdXR0b25DaGFuZ2VkKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbmRvd24nLCB0aGlzLm9uQnV0dG9uRG93bik7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b251cCcsIHRoaXMub25CdXR0b25VcCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2F4aXNtb3ZlJywgdGhpcy5vbkF4aXNNb3ZlZCk7CiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHNBY3RpdmUgPSBmYWxzZTsKICB9LAoKICBjaGVja0lmQ29udHJvbGxlclByZXNlbnQ6IGZ1bmN0aW9uICgpIHsKICAgIGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCh0aGlzLCBHQU1FUEFEX0lEX1BSRUZJWCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oYW5kID8ge2hhbmQ6IHRoaXMuZGF0YS5oYW5kfSA6IHt9KTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIGluamVjdFRyYWNrZWRDb250cm9sczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzJywgewogICAgICBhcm1Nb2RlbDogZGF0YS5hcm1Nb2RlbCwKICAgICAgaGFuZDogZGF0YS5oYW5kLAogICAgICBpZFByZWZpeDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0CiAgICB9KTsKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2dsdGYtbW9kZWwnLCBPQ1VMVVNfR09fQ09OVFJPTExFUl9NT0RFTF9VUkwpOwogIH0sCgogIGFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICByZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgb25Db250cm9sbGVyc1VwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICB9LAoKICAvLyBObyBuZWVkIGZvciBvbkJ1dHRvbkNoYW5nZWQsIHNpbmNlIE9jdWx1cyBHbyBjb250cm9sbGVyIGhhcyBubyBhbmFsb2cgYnV0dG9ucy4KCiAgb25Nb2RlbExvYWRlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGNvbnRyb2xsZXJPYmplY3QzRCA9IGV2dC5kZXRhaWwubW9kZWw7CiAgICB2YXIgYnV0dG9uTWVzaGVzOwoKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgYnV0dG9uTWVzaGVzID0gdGhpcy5idXR0b25NZXNoZXMgPSB7fTsKICAgIGJ1dHRvbk1lc2hlcy50cmlnZ2VyID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnb2N1bHVzX2dvX2J1dHRvbl90cmlnZ2VyJyk7CiAgICBidXR0b25NZXNoZXMudHJhY2twYWQgPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdvY3VsdXNfZ29fdG91Y2hwYWQnKTsKICB9LAoKICBvbkJ1dHRvbkNoYW5nZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIHZhciBidXR0b24gPSB0aGlzLm1hcHBpbmcuYnV0dG9uc1tldnQuZGV0YWlsLmlkXTsKICAgIGlmICghYnV0dG9uKSByZXR1cm47CiAgICAvLyBQYXNzIGFsb25nIGNoYW5nZWQgZXZlbnQgd2l0aCBidXR0b24gc3RhdGUsIHVzaW5nIGJ1dHRvbiBtYXBwaW5nIGZvciBjb252ZW5pZW5jZS4KICAgIHRoaXMuZWwuZW1pdChidXR0b24gKyAnY2hhbmdlZCcsIGV2dC5kZXRhaWwuc3RhdGUpOwogIH0sCgogIG9uQXhpc01vdmVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICBlbWl0SWZBeGVzQ2hhbmdlZCh0aGlzLCB0aGlzLm1hcHBpbmcuYXhlcywgZXZ0KTsKICB9LAoKICB1cGRhdGVNb2RlbDogZnVuY3Rpb24gKGJ1dHRvbk5hbWUsIGV2dE5hbWUpIHsKICAgIGlmICghdGhpcy5kYXRhLm1vZGVsKSB7IHJldHVybjsgfQogICAgdGhpcy51cGRhdGVCdXR0b25Nb2RlbChidXR0b25OYW1lLCBldnROYW1lKTsKICB9LAoKICB1cGRhdGVCdXR0b25Nb2RlbDogZnVuY3Rpb24gKGJ1dHRvbk5hbWUsIHN0YXRlKSB7CiAgICB2YXIgYnV0dG9uTWVzaGVzID0gdGhpcy5idXR0b25NZXNoZXM7CiAgICBpZiAoIWJ1dHRvbk1lc2hlcyB8fCAhYnV0dG9uTWVzaGVzW2J1dHRvbk5hbWVdKSB7IHJldHVybjsgfQogICAgdmFyIGNvbG9yOwogICAgdmFyIGJ1dHRvbjsKICAgIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgY2FzZSAnZG93bic6CiAgICAgICAgY29sb3IgPSB0aGlzLmRhdGEuYnV0dG9uSGlnaGxpZ2h0Q29sb3I7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOgogICAgICAgIGNvbG9yID0gdGhpcy5kYXRhLmJ1dHRvblRvdWNoZWRDb2xvcjsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBjb2xvciA9IHRoaXMuZGF0YS5idXR0b25Db2xvcjsKICAgIH0KICAgIGJ1dHRvbiA9IGJ1dHRvbk1lc2hlc1tidXR0b25OYW1lXTsKICAgIGJ1dHRvbi5tYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihidXR0b24ubWF0ZXJpYWwuY29sb3IpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vdXRpbHMvIjoxODIsIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7Cgp2YXIgaXNPY3VsdXNCcm93c2VyID0gX2RlcmVxXygnLi4vdXRpbHMvJykuZGV2aWNlLmlzT2N1bHVzQnJvd3NlcigpOwp2YXIgaXNXZWJYUkF2YWlsYWJsZSA9IF9kZXJlcV8oJy4uL3V0aWxzLycpLmRldmljZS5pc1dlYlhSQXZhaWxhYmxlOwoKdmFyIEdBTUVQQURfSURfV0VCWFIgPSAnb2N1bHVzLXRvdWNoJzsKdmFyIEdBTUVQQURfSURfV0VCVlIgPSAnT2N1bHVzIFRvdWNoJzsKCi8vIFByZWZpeCBmb3IgR2VuMSBhbmQgR2VuMiBPY3VsdXMgVG91Y2ggQ29udHJvbGxlcnMuCnZhciBHQU1FUEFEX0lEX1BSRUZJWCA9IGlzV2ViWFJBdmFpbGFibGUgPyBHQU1FUEFEX0lEX1dFQlhSIDogR0FNRVBBRF9JRF9XRUJWUjsKCi8vIEZpcnN0IGdlbmVyYXRpb24gbW9kZWwgVVJMLgp2YXIgVE9VQ0hfQ09OVFJPTExFUl9NT0RFTF9CQVNFX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvb2N1bHVzL29jdWx1cy10b3VjaC1jb250cm9sbGVyLSc7Ci8vIEZvciBub3cgdGhlIGdlbmVyYXRpb24gMiBtb2RlbCBpcyB0aGUgc2FtZSBhcyB0aGUgb3JpZ2luYWwgdW50aWwgYSBuZXcgb25lIGlzIHByZXBhcmVkIGZvciB1cGxvYWQuCnZhciBUT1VDSF9HRU4yX0NPTlRST0xMRVJfTU9ERUxfQkFTRV9VUkwgPSBUT1VDSF9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMOwoKdmFyIE9DVUxVU19UT1VDSF9XRUJWUiA9IHsKICBsZWZ0OiB7CiAgICBtb2RlbFVybDogVE9VQ0hfQ09OVFJPTExFUl9NT0RFTF9CQVNFX1VSTCArICdsZWZ0LmdsdGYnLAogICAgcmF5T3JpZ2luOiB7b3JpZ2luOiB7eDogMC4wMDgsIHk6IC0wLjAxLCB6OiAwfSwgZGlyZWN0aW9uOiB7eDogMCwgeTogLTAuOCwgejogLTF9fSwKICAgIG1vZGVsUGl2b3RPZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKC0wLjAwNSwgMC4wMDMsIC0wLjA1NSksCiAgICBtb2RlbFBpdm90Um90YXRpb246IG5ldyBUSFJFRS5FdWxlcigwLCAwLCAwKQogIH0sCiAgcmlnaHQ6IHsKICAgIG1vZGVsVXJsOiBUT1VDSF9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ3JpZ2h0LmdsdGYnLAogICAgcmF5T3JpZ2luOiB7b3JpZ2luOiB7eDogLTAuMDA4LCB5OiAtMC4wMSwgejogMH0sIGRpcmVjdGlvbjoge3g6IDAsIHk6IC0wLjgsIHo6IC0xfX0sCiAgICBtb2RlbFBpdm90T2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMygwLjAwNSwgMC4wMDMsIC0wLjA1NSksCiAgICBtb2RlbFBpdm90Um90YXRpb246IG5ldyBUSFJFRS5FdWxlcigwLCAwLCAwKQogIH0KfTsKCnZhciBPQ1VMVVNfVE9VQ0hfV0VCWFIgPSB7CiAgbGVmdDogewogICAgbW9kZWxVcmw6IFRPVUNIX0NPTlRST0xMRVJfTU9ERUxfQkFTRV9VUkwgKyAnbGVmdC5nbHRmJywKICAgIHJheU9yaWdpbjoge29yaWdpbjoge3g6IDAuMDAyLCB5OiAtMC4wMDUsIHo6IC0wLjAzfSwgZGlyZWN0aW9uOiB7eDogMCwgeTogLTAuOCwgejogLTF9fSwKICAgIG1vZGVsUGl2b3RPZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKC0wLjAwNSwgMC4wMzYsIC0wLjAzNyksCiAgICBtb2RlbFBpdm90Um90YXRpb246IG5ldyBUSFJFRS5FdWxlcihNYXRoLlBJIC8gNC41LCAwLCAwKQogIH0sCiAgcmlnaHQ6IHsKICAgIG1vZGVsVXJsOiBUT1VDSF9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ3JpZ2h0LmdsdGYnLAogICAgcmF5T3JpZ2luOiB7b3JpZ2luOiB7eDogLTAuMDAyLCB5OiAtMC4wMDUsIHo6IC0wLjAzfSwgZGlyZWN0aW9uOiB7eDogMCwgeTogLTAuOCwgejogLTF9fSwKICAgIG1vZGVsUGl2b3RPZmZzZXQ6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMDA1LCAwLjAzNiwgLTAuMDM3KSwKICAgIG1vZGVsUGl2b3RSb3RhdGlvbjogbmV3IFRIUkVFLkV1bGVyKE1hdGguUEkgLyA0LjUsIDAsIDApCiAgfQp9OwoKdmFyIE9DVUxVU19UT1VDSF9DT05GSUcgPSBpc1dlYlhSQXZhaWxhYmxlID8gT0NVTFVTX1RPVUNIX1dFQlhSIDogT0NVTFVTX1RPVUNIX1dFQlZSOwoKdmFyIENPTlRST0xMRVJfREVGQVVMVCA9ICdvY3VsdXMtdG91Y2gnOwp2YXIgQ09OVFJPTExFUl9QUk9QRVJUSUVTID0gewogICdvY3VsdXMtdG91Y2gnOiBPQ1VMVVNfVE9VQ0hfQ09ORklHLAogICdvY3VsdXMtdG91Y2gtdjInOiB7CiAgICBsZWZ0OiB7CiAgICAgIG1vZGVsVXJsOiBUT1VDSF9HRU4yX0NPTlRST0xMRVJfTU9ERUxfQkFTRV9VUkwgKyAnZ2VuMi1sZWZ0LmdsdGYnLAogICAgICByYXlPcmlnaW46IHtvcmlnaW46IHt4OiAtMC4wMSwgeTogMCwgejogLTAuMDJ9LCBkaXJlY3Rpb246IHt4OiAwLCB5OiAtMC41LCB6OiAtMX19LAogICAgICBtb2RlbFBpdm90T2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKSwKICAgICAgbW9kZWxQaXZvdFJvdGF0aW9uOiBuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCkKICAgIH0sCiAgICByaWdodDogewogICAgICBtb2RlbFVybDogVE9VQ0hfR0VOMl9DT05UUk9MTEVSX01PREVMX0JBU0VfVVJMICsgJ2dlbjItcmlnaHQuZ2x0ZicsCiAgICAgIHJheU9yaWdpbjoge29yaWdpbjoge3g6IDAuMDEsIHk6IDAsIHo6IC0wLjAyfSwgZGlyZWN0aW9uOiB7eDogMCwgeTogLTAuNSwgejogLTF9fSwKICAgICAgbW9kZWxQaXZvdE9mZnNldDogbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCksCiAgICAgIG1vZGVsUGl2b3RSb3RhdGlvbjogbmV3IFRIUkVFLkV1bGVyKDAsIDAsIDApCiAgICB9CiAgfQp9OwoKLyoqCiAqIEJ1dHRvbiBpbmRpY2VzOgogKiAwIC0gdGh1bWJzdGljayAod2hpY2ggaGFzIHNlcGFyYXRlIGF4aXNtb3ZlIC8gdGh1bWJzdGlja21vdmVkIGV2ZW50cykKICogMSAtIHRyaWdnZXIgKHdpdGggYW5hbG9nIHZhbHVlLCB3aGljaCBnb2VzIHVwIHRvIDEpCiAqIDIgLSBncmlwICh3aXRoIGFuYWxvZyB2YWx1ZSwgd2hpY2ggZ29lcyB1cCB0byAxKQogKiAzIC0gWCAobGVmdCkgb3IgQSAocmlnaHQpCiAqIDQgLSBZIChsZWZ0KSBvciBCIChyaWdodCkKICogNSAtIHN1cmZhY2UgKHRvdWNoIG9ubHkpCiAqLwp2YXIgSU5QVVRfTUFQUElOR19XRUJWUiA9IHsKICBsZWZ0OiB7CiAgICBheGVzOiB7dGh1bWJzdGljazogWzAsIDFdfSwKICAgIGJ1dHRvbnM6IFsndGh1bWJzdGljaycsICd0cmlnZ2VyJywgJ2dyaXAnLCAneGJ1dHRvbicsICd5YnV0dG9uJywgJ3N1cmZhY2UnXQogIH0sCiAgcmlnaHQ6IHsKICAgIGF4ZXM6IHt0aHVtYnN0aWNrOiBbMCwgMV19LAogICAgYnV0dG9uczogWyd0aHVtYnN0aWNrJywgJ3RyaWdnZXInLCAnZ3JpcCcsICdhYnV0dG9uJywgJ2JidXR0b24nLCAnc3VyZmFjZSddCiAgfQp9OwoKLyoqCiAqIEJ1dHRvbiBpbmRpY2VzOgogKiAwIC0gdHJpZ2dlcgogKiAxIC0gZ3JpcAogKiAyIC0gbm9uZQogKiAzIC0gdGh1bWJzdGljawogKiA0IC0gWCBvciBBIGJ1dHRvbgogKiA1IC0gWSBvciBCIGJ1dHRvbgogKiA2IC0gc3VyZmFjZQogKgogKiBBeGlzOgogKiAwIC0gbm9uZQogKiAxIC0gbm9uZQogKiAyIC0gdGh1bWJzdGljawogKiAzIC0gdGh1bWJzdGljawogKiBSZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9pbW1lcnNpdmUtd2ViL3dlYnhyLWlucHV0LXByb2ZpbGVzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3JlZ2lzdHJ5L3Byb2ZpbGVzL29jdWx1cy9vY3VsdXMtdG91Y2guanNvbgogKi8KdmFyIElOUFVUX01BUFBJTkdfV0VCWFIgPSB7CiAgbGVmdDogewogICAgYXhlczoge3RodW1ic3RpY2s6IFsyLCAzXX0sCiAgICBidXR0b25zOiBbJ3RyaWdnZXInLCAnZ3JpcCcsICdub25lJywgJ3RodW1ic3RpY2snLCAneGJ1dHRvbicsICd5YnV0dG9uJywgJ3N1cmZhY2UnXQogIH0sCiAgcmlnaHQ6IHsKICAgIGF4ZXM6IHt0aHVtYnN0aWNrOiBbMiwgM119LAogICAgYnV0dG9uczogWyd0cmlnZ2VyJywgJ2dyaXAnLCAnbm9uZScsICd0aHVtYnN0aWNrJywgJ2FidXR0b24nLCAnYmJ1dHRvbicsICdzdXJmYWNlJ10KICB9Cn07Cgp2YXIgSU5QVVRfTUFQUElORyA9IGlzV2ViWFJBdmFpbGFibGUgPyBJTlBVVF9NQVBQSU5HX1dFQlhSIDogSU5QVVRfTUFQUElOR19XRUJWUjsKCi8qKgogKiBPY3VsdXMgVG91Y2ggY29udHJvbHMuCiAqIEludGVyZmFjZSB3aXRoIE9jdWx1cyBUb3VjaCBjb250cm9sbGVycyBhbmQgbWFwIEdhbWVwYWQgZXZlbnRzIHRvCiAqIGNvbnRyb2xsZXIgYnV0dG9uczogdGh1bWJzdGljaywgdHJpZ2dlciwgZ3JpcCwgeGJ1dHRvbiwgeWJ1dHRvbiwgc3VyZmFjZQogKiBMb2FkIGEgY29udHJvbGxlciBtb2RlbCBhbmQgaGlnaGxpZ2h0IHRoZSBwcmVzc2VkIGJ1dHRvbnMuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnb2N1bHVzLXRvdWNoLWNvbnRyb2xzJywgewogIHNjaGVtYTogewogICAgaGFuZDoge2RlZmF1bHQ6ICdsZWZ0J30sCiAgICBidXR0b25Db2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjOTk5J30sICAvLyBPZmYtd2hpdGUuCiAgICBidXR0b25Ub3VjaENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyM4QUInfSwKICAgIGJ1dHRvbkhpZ2hsaWdodENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyMyREYnfSwgIC8vIExpZ2h0IGJsdWUuCiAgICBtb2RlbDoge2RlZmF1bHQ6IHRydWV9LAogICAgY29udHJvbGxlclR5cGU6IHtkZWZhdWx0OiAnYXV0bycsIG9uZU9mOiBbJ2F1dG8nLCAnb2N1bHVzLXRvdWNoJywgJ29jdWx1cy10b3VjaC12MiddfSwKICAgIG9yaWVudGF0aW9uT2Zmc2V0OiB7dHlwZTogJ3ZlYzMnLCBkZWZhdWx0OiB7eDogNDMsIHk6IDAsIHo6IDB9fQogIH0sCgogIG1hcHBpbmc6IElOUFVUX01BUFBJTkcsCgogIGJpbmRNZXRob2RzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm9uTW9kZWxMb2FkZWQgPSBiaW5kKHRoaXMub25Nb2RlbExvYWRlZCwgdGhpcyk7CiAgICB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUgPSBiaW5kKHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgdGhpcyk7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCA9IGJpbmQodGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQsIHRoaXMpOwogICAgdGhpcy5vbkF4aXNNb3ZlZCA9IGJpbmQodGhpcy5vbkF4aXNNb3ZlZCwgdGhpcyk7CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdGhpcy5vbkJ1dHRvbkNoYW5nZWQgPSBiaW5kKHRoaXMub25CdXR0b25DaGFuZ2VkLCB0aGlzKTsKICAgIHRoaXMub25CdXR0b25Eb3duID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICdkb3duJywgc2VsZiwgc2VsZi5kYXRhLmhhbmQpOyB9OwogICAgdGhpcy5vbkJ1dHRvblVwID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd1cCcsIHNlbGYsIHNlbGYuZGF0YS5oYW5kKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaHN0YXJ0Jywgc2VsZiwgc2VsZi5kYXRhLmhhbmQpOyB9OwogICAgdGhpcy5vbkJ1dHRvblRvdWNoRW5kID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaGVuZCcsIHNlbGYsIHNlbGYuZGF0YS5oYW5kKTsgfTsKICAgIHRoaXMuY29udHJvbGxlclByZXNlbnQgPSBmYWxzZTsKICAgIHRoaXMubGFzdENvbnRyb2xsZXJDaGVjayA9IDA7CiAgICB0aGlzLnByZXZpb3VzQnV0dG9uVmFsdWVzID0ge307CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtID0gdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMucmVuZGVyZXI7CiAgICB0aGlzLmJpbmRNZXRob2RzKCk7CiAgfSwKCiAgYWRkRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogIH0sCgogIGNoZWNrSWZDb250cm9sbGVyUHJlc2VudDogZnVuY3Rpb24gKCkgewogICAgY2hlY2tDb250cm9sbGVyUHJlc2VudEFuZFNldHVwKHRoaXMsIEdBTUVQQURfSURfUFJFRklYLCB7CiAgICAgIGhhbmQ6IHRoaXMuZGF0YS5oYW5kCiAgICB9KTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIGxvYWRNb2RlbDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICBpZiAoIWRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CgogICAgLy8gU2V0IHRoZSBjb250cm9sbGVyIGRpc3BsYXkgbW9kZWwgYmFzZWQgb24gdGhlIGRhdGEgcGFzc2VkIGluLgogICAgdGhpcy5kaXNwbGF5TW9kZWwgPSBDT05UUk9MTEVSX1BST1BFUlRJRVNbZGF0YS5jb250cm9sbGVyVHlwZV0gfHwgQ09OVFJPTExFUl9QUk9QRVJUSUVTW0NPTlRST0xMRVJfREVGQVVMVF07CiAgICAvLyBJZiB0aGUgZGV2ZWxvcGVyIGlzIGFza2luZyBmb3IgYXV0by1kZXRlY3Rpb24sIHNlZSBpZiB0aGUgZGlzcGxheU5hbWUgY2FuIGJlIHJldHJpZXZlZCB0byBpZGVudGlmeSB0aGUgc3BlY2lmaWMgdW5pdC4KICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgV2ViVlIgY3VycmVudGx5LgogICAgaWYgKGRhdGEuY29udHJvbGxlclR5cGUgPT09ICdhdXRvJykgewogICAgICB2YXIgdHJhY2tlZENvbnRyb2xzU3lzdGVtID0gdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXNbJ3RyYWNrZWQtY29udHJvbHMtd2VidnInXTsKICAgICAgaWYgKHRyYWNrZWRDb250cm9sc1N5c3RlbSAmJiB0cmFja2VkQ29udHJvbHNTeXN0ZW0udnJEaXNwbGF5KSB7CiAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHJhY2tlZENvbnRyb2xzU3lzdGVtLnZyRGlzcGxheS5kaXNwbGF5TmFtZTsKICAgICAgICAvLyBUaGUgT2N1bHVzIFF1ZXN0IHVzZXMgdGhlIHVwZGF0ZWQgZ2VuZXJhdGlvbiAyIGluc2lkZS1vdXQgdHJhY2tlZCBjb250cm9sbGVycyBzbyB1cGRhdGUgdGhlIGRpc3BsYXlNb2RlbC4KICAgICAgICBpZiAoL15PY3VsdXMgUXVlc3QkLy50ZXN0KGRpc3BsYXlOYW1lKSkgewogICAgICAgICAgdGhpcy5kaXNwbGF5TW9kZWwgPSBDT05UUk9MTEVSX1BST1BFUlRJRVNbJ29jdWx1cy10b3VjaC12MiddOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaXNPY3VsdXNCcm93c2VyKSB7IHRoaXMuZGlzcGxheU1vZGVsID0gQ09OVFJPTExFUl9QUk9QRVJUSUVTWydvY3VsdXMtdG91Y2gtdjInXTsgfQogICAgfQogICAgdmFyIG1vZGVsVXJsID0gdGhpcy5kaXNwbGF5TW9kZWxbZGF0YS5oYW5kXS5tb2RlbFVybDsKICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdnbHRmLW1vZGVsJywgbW9kZWxVcmwpOwogIH0sCgogIGluamVjdFRyYWNrZWRDb250cm9sczogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgd2ViWFJJZCA9IEdBTUVQQURfSURfV0VCWFI7CiAgICB2YXIgd2ViVlJJZCA9IGRhdGEuaGFuZCA9PT0gJ3JpZ2h0JyA/ICdPY3VsdXMgVG91Y2ggKFJpZ2h0KScgOiAnT2N1bHVzIFRvdWNoIChMZWZ0KSc7CiAgICB2YXIgaWQgPSBpc1dlYlhSQXZhaWxhYmxlID8gd2ViWFJJZCA6IHdlYlZSSWQ7CiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgndHJhY2tlZC1jb250cm9scycsIHsKICAgICAgaWQ6IGlkLAogICAgICBoYW5kOiBkYXRhLmhhbmQsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0CiAgICB9KTsKICAgIHRoaXMubG9hZE1vZGVsKCk7CiAgfSwKCiAgYWRkQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5zY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgZmFsc2UpOwogIH0sCgogIHJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICBvbkNvbnRyb2xsZXJzVXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICAvLyBOb3RlIHRoYXQgZHVlIHRvIGdhbWVwYWRjb25uZWN0ZWQgZXZlbnQgcHJvcGFnYXRpb24gaXNzdWVzLCB3ZSBkb24ndCByZWx5IG9uIGV2ZW50cy4KICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50KCk7CiAgfSwKCiAgb25CdXR0b25DaGFuZ2VkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgYnV0dG9uID0gdGhpcy5tYXBwaW5nW3RoaXMuZGF0YS5oYW5kXS5idXR0b25zW2V2dC5kZXRhaWwuaWRdOwogICAgdmFyIGJ1dHRvbk1lc2hlcyA9IHRoaXMuYnV0dG9uTWVzaGVzOwogICAgdmFyIGFuYWxvZ1ZhbHVlOwogICAgaWYgKCFidXR0b24pIHsgcmV0dXJuOyB9CgogICAgaWYgKGJ1dHRvbiA9PT0gJ3RyaWdnZXInIHx8IGJ1dHRvbiA9PT0gJ2dyaXAnKSB7IGFuYWxvZ1ZhbHVlID0gZXZ0LmRldGFpbC5zdGF0ZS52YWx1ZTsgfQoKICAgIC8vIFVwZGF0ZSB0cmlnZ2VyIGFuZC9vciBncmlwIG1lc2hlcywgaWYgYW55LgogICAgaWYgKGJ1dHRvbk1lc2hlcykgewogICAgICBpZiAoYnV0dG9uID09PSAndHJpZ2dlcicgJiYgYnV0dG9uTWVzaGVzLnRyaWdnZXIpIHsKICAgICAgICBidXR0b25NZXNoZXMudHJpZ2dlci5yb3RhdGlvbi54ID0gdGhpcy5vcmlnaW5hbFhSb3RhdGlvblRyaWdnZXIgLSBhbmFsb2dWYWx1ZSAqIChNYXRoLlBJIC8gMjYpOwogICAgICB9CiAgICAgIGlmIChidXR0b24gPT09ICdncmlwJyAmJiBidXR0b25NZXNoZXMuZ3JpcCkgewogICAgICAgIGJ1dHRvbk1lc2hlcy5ncmlwLnBvc2l0aW9uLnggPSB0aGlzLm9yaWdpbmFsWFBvc2l0aW9uR3JpcCArICh0aGlzLmRhdGEuaGFuZCA9PT0gJ2xlZnQnID8gLTEgOiAxKSAqIGFuYWxvZ1ZhbHVlICogMC4wMDQ7CiAgICAgIH0KICAgIH0KCiAgICAvLyBQYXNzIGFsb25nIGNoYW5nZWQgZXZlbnQgd2l0aCBidXR0b24gc3RhdGUsIHVzaW5nIHRoZSBidXR0b20gbWFwcGluZyBmb3IgY29udmVuaWVuY2UuCiAgICB0aGlzLmVsLmVtaXQoYnV0dG9uICsgJ2NoYW5nZWQnLCBldnQuZGV0YWlsLnN0YXRlKTsKICB9LAoKICBvbk1vZGVsTG9hZGVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgY29udHJvbGxlck9iamVjdDNEID0gZXZ0LmRldGFpbC5tb2RlbDsKICAgIHZhciBidXR0b25NZXNoZXM7CgogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CgogICAgYnV0dG9uTWVzaGVzID0gdGhpcy5idXR0b25NZXNoZXMgPSB7fTsKCiAgICBidXR0b25NZXNoZXMuZ3JpcCA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ2J1dHRvbkhhbmQnKTsKICAgIHRoaXMub3JpZ2luYWxYUG9zaXRpb25HcmlwID0gYnV0dG9uTWVzaGVzLmdyaXAucG9zaXRpb24ueDsKICAgIGJ1dHRvbk1lc2hlcy50aHVtYnN0aWNrID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnc3RpY2snKTsKICAgIGJ1dHRvbk1lc2hlcy50cmlnZ2VyID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnYnV0dG9uVHJpZ2dlcicpOwogICAgdGhpcy5vcmlnaW5hbFhSb3RhdGlvblRyaWdnZXIgPSBidXR0b25NZXNoZXMudHJpZ2dlci5yb3RhdGlvbi54OwogICAgYnV0dG9uTWVzaGVzLnhidXR0b24gPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdidXR0b25YJyk7CiAgICBidXR0b25NZXNoZXMuYWJ1dHRvbiA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ2J1dHRvbkEnKTsKICAgIGJ1dHRvbk1lc2hlcy55YnV0dG9uID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnYnV0dG9uWScpOwogICAgYnV0dG9uTWVzaGVzLmJidXR0b24gPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdidXR0b25CJyk7CgogICAgLy8gT2Zmc2V0IHBpdm90IHBvaW50CiAgICBjb250cm9sbGVyT2JqZWN0M0QucG9zaXRpb24uY29weSh0aGlzLmRpc3BsYXlNb2RlbFt0aGlzLmRhdGEuaGFuZF0ubW9kZWxQaXZvdE9mZnNldCk7CiAgICBjb250cm9sbGVyT2JqZWN0M0Qucm90YXRpb24uY29weSh0aGlzLmRpc3BsYXlNb2RlbFt0aGlzLmRhdGEuaGFuZF0ubW9kZWxQaXZvdFJvdGF0aW9uKTsKCiAgICB0aGlzLmVsLmVtaXQoJ2NvbnRyb2xsZXJtb2RlbHJlYWR5JywgewogICAgICBuYW1lOiAnb2N1bHVzLXRvdWNoLWNvbnRyb2xzJywKICAgICAgbW9kZWw6IHRoaXMuZGF0YS5tb2RlbCwKICAgICAgcmF5T3JpZ2luOiB0aGlzLmRpc3BsYXlNb2RlbFt0aGlzLmRhdGEuaGFuZF0ucmF5T3JpZ2luCiAgICB9KTsKICB9LAoKICBvbkF4aXNNb3ZlZDogZnVuY3Rpb24gKGV2dCkgewogICAgZW1pdElmQXhlc0NoYW5nZWQodGhpcywgdGhpcy5tYXBwaW5nW3RoaXMuZGF0YS5oYW5kXS5heGVzLCBldnQpOwogIH0sCgogIHVwZGF0ZU1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgZXZ0TmFtZSkgewogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLnVwZGF0ZUJ1dHRvbk1vZGVsKGJ1dHRvbk5hbWUsIGV2dE5hbWUpOwogIH0sCgogIHVwZGF0ZUJ1dHRvbk1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgc3RhdGUpIHsKICAgIHZhciBidXR0b247CiAgICB2YXIgY29sb3IgPSAoc3RhdGUgPT09ICd1cCcgfHwgc3RhdGUgPT09ICd0b3VjaGVuZCcpID8gdGhpcy5kYXRhLmJ1dHRvbkNvbG9yIDogc3RhdGUgPT09ICd0b3VjaHN0YXJ0JyA/IHRoaXMuZGF0YS5idXR0b25Ub3VjaENvbG9yIDogdGhpcy5kYXRhLmJ1dHRvbkhpZ2hsaWdodENvbG9yOwogICAgdmFyIGJ1dHRvbk1lc2hlcyA9IHRoaXMuYnV0dG9uTWVzaGVzOwogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICBpZiAoYnV0dG9uTWVzaGVzICYmIGJ1dHRvbk1lc2hlc1tidXR0b25OYW1lXSkgewogICAgICBidXR0b24gPSBidXR0b25NZXNoZXNbYnV0dG9uTmFtZV07CiAgICAgIGJ1dHRvbi5tYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpOwogICAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKGJ1dHRvbi5tYXRlcmlhbC5jb2xvcik7CiAgICB9CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvIjoxODIsIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3Bvc2l0aW9uJywgewogIHNjaGVtYToge3R5cGU6ICd2ZWMzJ30sCgogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIG9iamVjdDNEID0gdGhpcy5lbC5vYmplY3QzRDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgb2JqZWN0M0QucG9zaXRpb24uc2V0KGRhdGEueCwgZGF0YS55LCBkYXRhLnopOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgLy8gUHJldHR5IG11Y2ggZm9yIG1peGlucy4KICAgIHRoaXMuZWwub2JqZWN0M0QucG9zaXRpb24uc2V0KDAsIDAsIDApOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOX1dLDc2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIE11dGF0aW9uT2JzZXJ2ZXIgKi8KCnZhciByZWdpc3RlckNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKCnZhciB3YXJuID0gdXRpbHMuZGVidWcoJ2NvbXBvbmVudHM6cmF5Y2FzdGVyOndhcm4nKTsKCi8vIERlZmluZXMgc2VsZWN0b3JzIHRoYXQgc2hvdWxkIGJlICdzYWZlJyBmb3IgdGhlIE11dGF0aW9uT2JzZXJ2ZXIgdXNlZCB0bwovLyByZWZyZXNoIHRoZSB3aGl0ZWxpc3QuIE1hdGNoZXMgY2xhc3NuYW1lcywgSURzLCBhbmQgcHJlc2VuY2Ugb2YgYXR0cmlidXRlcy4KLy8gU2VsZWN0b3JzIGZvciB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLCBsaWtlIFtwb3NpdGlvbj0wIDIgMF0sIGNhbm5vdCBiZQovLyByZWxpYWJseSBkZXRlY3RlZCBhbmQgYXJlIHRoZXJlZm9yZSBkaXNhbGxvd2VkLgp2YXIgT0JTRVJWRVJfU0VMRUNUT1JfUkUgPSAvXltcd1xzLS4sW1xdI10qJC87CgovLyBDb25maWd1cmF0aW9uIGZvciB0aGUgTXV0YXRpb25PYnNlcnZlciB1c2VkIHRvIHJlZnJlc2ggdGhlIHdoaXRlbGlzdC4KLy8gTGlzdGVucyBmb3IgYWRkaXRpb24vcmVtb3ZhbCBvZiBlbGVtZW50cyBhbmQgYXR0cmlidXRlcyB3aXRoaW4gdGhlIHNjZW5lLgp2YXIgT0JTRVJWRVJfQ09ORklHID0gewogIGNoaWxkTGlzdDogdHJ1ZSwKICBhdHRyaWJ1dGVzOiB0cnVlLAogIHN1YnRyZWU6IHRydWUKfTsKCnZhciBFVkVOVFMgPSB7CiAgSU5URVJTRUNUOiAncmF5Y2FzdGVyLWludGVyc2VjdGVkJywKICBJTlRFUlNFQ1RJT046ICdyYXljYXN0ZXItaW50ZXJzZWN0aW9uJywKICBJTlRFUlNFQ1RfQ0xFQVI6ICdyYXljYXN0ZXItaW50ZXJzZWN0ZWQtY2xlYXJlZCcsCiAgSU5URVJTRUNUSU9OX0NMRUFSOiAncmF5Y2FzdGVyLWludGVyc2VjdGlvbi1jbGVhcmVkJwp9OwoKLyoqCiAqIFJheWNhc3RlciBjb21wb25lbnQuCiAqCiAqIFBhc3Mgb3B0aW9ucyB0byB0aHJlZS5qcyBSYXljYXN0ZXIgaW5jbHVkaW5nIHdoaWNoIG9iamVjdHMgdG8gdGVzdC4KICogUG9sbCBmb3IgaW50ZXJzZWN0aW9ucy4KICogRW1pdCBldmVudCBvbiBvcmlnaW4gZW50aXR5IGFuZCBvbiB0YXJnZXQgZW50aXR5IG9uIGludGVyc2VjdC4KICoKICogQG1lbWJlciB7YXJyYXl9IGludGVyc2VjdGVkRWxzIC0gTGlzdCBvZiBjdXJyZW50bHkgaW50ZXJzZWN0ZWQgZW50aXRpZXMuCiAqIEBtZW1iZXIge2FycmF5fSBvYmplY3RzIC0gQ2FjaGVkIGxpc3Qgb2YgbWVzaGVzIHRvIGludGVyc2VjdC4KICogQG1lbWJlciB7bnVtYmVyfSBwcmV2Q2hlY2tUaW1lIC0gUHJldmlvdXMgdGltZSBpbnRlcnNlY3Rpb24gd2FzIGNoZWNrZWQuIFRvIGhlbHAgaW50ZXJ2YWwuCiAqIEBtZW1iZXIge29iamVjdH0gcmF5Y2FzdGVyIC0gdGhyZWUuanMgUmF5Y2FzdGVyLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3JheWNhc3RlcicsIHsKICBzY2hlbWE6IHsKICAgIGF1dG9SZWZyZXNoOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBkaXJlY3Rpb246IHt0eXBlOiAndmVjMycsIGRlZmF1bHQ6IHt4OiAwLCB5OiAwLCB6OiAtMX19LAogICAgZW5hYmxlZDoge2RlZmF1bHQ6IHRydWV9LAogICAgZmFyOiB7ZGVmYXVsdDogMTAwMH0sCiAgICBpbnRlcnZhbDoge2RlZmF1bHQ6IDB9LAogICAgbmVhcjoge2RlZmF1bHQ6IDB9LAogICAgb2JqZWN0czoge2RlZmF1bHQ6ICcnfSwKICAgIG9yaWdpbjoge3R5cGU6ICd2ZWMzJ30sCiAgICBzaG93TGluZToge2RlZmF1bHQ6IGZhbHNlfSwKICAgIHVzZVdvcmxkQ29vcmRpbmF0ZXM6IHtkZWZhdWx0OiBmYWxzZX0KICB9LAoKICBtdWx0aXBsZTogdHJ1ZSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jbGVhcmVkSW50ZXJzZWN0ZWRFbHMgPSBbXTsKICAgIHRoaXMudW5pdExpbmVFbmRWZWMzID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIHRoaXMuaW50ZXJzZWN0ZWRFbHMgPSBbXTsKICAgIHRoaXMuaW50ZXJzZWN0aW9ucyA9IFtdOwogICAgdGhpcy5uZXdJbnRlcnNlY3RlZEVscyA9IFtdOwogICAgdGhpcy5uZXdJbnRlcnNlY3Rpb25zID0gW107CiAgICB0aGlzLm9iamVjdHMgPSBbXTsKICAgIHRoaXMucHJldkNoZWNrVGltZSA9IHVuZGVmaW5lZDsKICAgIHRoaXMucHJldkludGVyc2VjdGVkRWxzID0gW107CiAgICB0aGlzLnJhd0ludGVyc2VjdGlvbnMgPSBbXTsKICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpOwogICAgdGhpcy51cGRhdGVPcmlnaW5EaXJlY3Rpb24oKTsKICAgIHRoaXMuc2V0RGlydHkgPSB0aGlzLnNldERpcnR5LmJpbmQodGhpcyk7CiAgICB0aGlzLnVwZGF0ZUxpbmUgPSB0aGlzLnVwZGF0ZUxpbmUuYmluZCh0aGlzKTsKICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnNldERpcnR5KTsKICAgIHRoaXMuZGlydHkgPSB0cnVlOwogICAgdGhpcy5saW5lRW5kVmVjMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICB0aGlzLm90aGVyTGluZUVuZFZlYzMgPSBuZXcgVEhSRUUuVmVjdG9yMygpOwogICAgdGhpcy5saW5lRGF0YSA9IHtlbmQ6IHRoaXMubGluZUVuZFZlYzN9OwoKICAgIHRoaXMuZ2V0SW50ZXJzZWN0aW9uID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24uYmluZCh0aGlzKTsKICAgIHRoaXMuaW50ZXJzZWN0ZWREZXRhaWwgPSB7ZWw6IHRoaXMuZWwsIGdldEludGVyc2VjdGlvbjogdGhpcy5nZXRJbnRlcnNlY3Rpb259OwogICAgdGhpcy5pbnRlcnNlY3RlZENsZWFyZWREZXRhaWwgPSB7ZWw6IHRoaXMuZWx9OwogICAgdGhpcy5pbnRlcnNlY3Rpb25DbGVhcmVkRGV0YWlsID0ge2NsZWFyZWRFbHM6IHRoaXMuY2xlYXJlZEludGVyc2VjdGVkRWxzfTsKICAgIHRoaXMuaW50ZXJzZWN0aW9uRGV0YWlsID0ge307CiAgfSwKCiAgLyoqCiAgICogQ3JlYXRlIG9yIHVwZGF0ZSByYXljYXN0ZXIgb2JqZWN0LgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKG9sZERhdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciByYXljYXN0ZXIgPSB0aGlzLnJheWNhc3RlcjsKCiAgICAvLyBTZXQgcmF5Y2FzdGVyIHByb3BlcnRpZXMuCiAgICByYXljYXN0ZXIuZmFyID0gZGF0YS5mYXI7CiAgICByYXljYXN0ZXIubmVhciA9IGRhdGEubmVhcjsKCiAgICAvLyBEcmF3IGxpbmUuCiAgICBpZiAoZGF0YS5zaG93TGluZSAmJgogICAgICAgIChkYXRhLmZhciAhPT0gb2xkRGF0YS5mYXIgfHwgZGF0YS5vcmlnaW4gIT09IG9sZERhdGEub3JpZ2luIHx8CiAgICAgICAgIGRhdGEuZGlyZWN0aW9uICE9PSBvbGREYXRhLmRpcmVjdGlvbiB8fCAhb2xkRGF0YS5zaG93TGluZSkpIHsKICAgICAgLy8gQ2FsY3VsYXRlIHVuaXQgdmVjdG9yIGZvciBsaW5lIGRpcmVjdGlvbi4gQ2FuIGJlIG11bHRpcGxpZWQgdmlhIHNjYWxhciB0byBwZXJmb3JtYW50bHkKICAgICAgLy8gYWRqdXN0IGxpbmUgbGVuZ3RoLgogICAgICB0aGlzLnVuaXRMaW5lRW5kVmVjMy5jb3B5KGRhdGEub3JpZ2luKS5hZGQoZGF0YS5kaXJlY3Rpb24pLm5vcm1hbGl6ZSgpOwogICAgICB0aGlzLmRyYXdMaW5lKCk7CiAgICB9CgogICAgaWYgKCFkYXRhLnNob3dMaW5lICYmIG9sZERhdGEuc2hvd0xpbmUpIHsKICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdsaW5lJyk7CiAgICB9CgogICAgaWYgKGRhdGEub2JqZWN0cyAhPT0gb2xkRGF0YS5vYmplY3RzICYmICFPQlNFUlZFUl9TRUxFQ1RPUl9SRS50ZXN0KGRhdGEub2JqZWN0cykpIHsKICAgICAgd2FybignW3JheWNhc3Rlcl0gU2VsZWN0b3IgIicgKyBkYXRhLm9iamVjdHMgKwogICAgICAgICAgICciIG1heSBub3QgdXBkYXRlIGF1dG9tYXRpY2FsbHkgd2l0aCBET00gY2hhbmdlcy4nKTsKICAgIH0KCiAgICBpZiAoIWRhdGEub2JqZWN0cykgewogICAgICB3YXJuKCdbcmF5Y2FzdGVyXSBGb3IgcGVyZm9ybWFuY2UsIHBsZWFzZSBkZWZpbmUgcmF5Y2FzdGVyLm9iamVjdHMgd2hlbiB1c2luZyAnICsKICAgICAgICAgICAncmF5Y2FzdGVyIG9yIGN1cnNvciBjb21wb25lbnRzIHRvIHdoaXRlbGlzdCB3aGljaCBlbnRpdGllcyB0byBpbnRlcnNlY3Qgd2l0aC4gJyArCiAgICAgICAgICAgJ2UuZy4sIHJheWNhc3Rlcj0ib2JqZWN0czogW2RhdGEtcmF5Y2FzdGFibGVdIi4nKTsKICAgIH0KCiAgICBpZiAoZGF0YS5hdXRvUmVmcmVzaCAhPT0gb2xkRGF0YS5hdXRvUmVmcmVzaCAmJiBlbC5pc1BsYXlpbmcpIHsKICAgICAgZGF0YS5hdXRvUmVmcmVzaAogICAgICAgID8gdGhpcy5hZGRFdmVudExpc3RlbmVycygpCiAgICAgICAgOiB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB9CgogICAgaWYgKG9sZERhdGEuZW5hYmxlZCAmJiAhZGF0YS5lbmFibGVkKSB7IHRoaXMuY2xlYXJBbGxJbnRlcnNlY3Rpb25zKCk7IH0KCiAgICB0aGlzLnNldERpcnR5KCk7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5kYXRhLnNob3dMaW5lKSB7CiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCdsaW5lJyk7CiAgICB9CiAgICB0aGlzLmNsZWFyQWxsSW50ZXJzZWN0aW9ucygpOwogIH0sCgogIGFkZEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMuZGF0YS5hdXRvUmVmcmVzaCkgeyByZXR1cm47IH0KICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsLnNjZW5lRWwsIE9CU0VSVkVSX0NPTkZJRyk7CiAgICB0aGlzLmVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignb2JqZWN0M2RzZXQnLCB0aGlzLnNldERpcnR5KTsKICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdvYmplY3QzZHJlbW92ZScsIHRoaXMuc2V0RGlydHkpOwogIH0sCgogIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgIHRoaXMuZWwuc2NlbmVFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdvYmplY3QzZHNldCcsIHRoaXMuc2V0RGlydHkpOwogICAgdGhpcy5lbC5zY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29iamVjdDNkcmVtb3ZlJywgdGhpcy5zZXREaXJ0eSk7CiAgfSwKCiAgLyoqCiAgICogTWFyayB0aGUgb2JqZWN0IGxpc3QgYXMgZGlydHksIHRvIGJlIHJlZnJlc2hlZCBiZWZvcmUgbmV4dCByYXljYXN0LgogICAqLwogIHNldERpcnR5OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgbGlzdCBvZiBvYmplY3RzIHRvIHRlc3QgZm9yIGludGVyc2VjdGlvbi4KICAgKi8KICByZWZyZXNoT2JqZWN0czogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWxzOwoKICAgIC8vIElmIG9iamVjdHMgbm90IGRlZmluZWQsIGludGVyc2VjdCB3aXRoIGV2ZXJ5dGhpbmcuCiAgICBlbHMgPSBkYXRhLm9iamVjdHMKICAgICAgPyB0aGlzLmVsLnNjZW5lRWwucXVlcnlTZWxlY3RvckFsbChkYXRhLm9iamVjdHMpCiAgICAgIDogdGhpcy5lbC5zY2VuZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTsKICAgIHRoaXMub2JqZWN0cyA9IHRoaXMuZmxhdHRlbk9iamVjdDNETWFwcyhlbHMpOwogICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogIH0sCgogIC8qKgogICAqIENoZWNrIGZvciBpbnRlcnNlY3Rpb25zIGFuZCBjbGVhcmVkIGludGVyc2VjdGlvbnMgb24gYW4gaW50ZXJ2YWwuCiAgICovCiAgdGljazogZnVuY3Rpb24gKHRpbWUpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIHByZXZDaGVja1RpbWUgPSB0aGlzLnByZXZDaGVja1RpbWU7CgogICAgaWYgKCFkYXRhLmVuYWJsZWQpIHsgcmV0dXJuOyB9CgogICAgLy8gT25seSBjaGVjayBmb3IgaW50ZXJzZWN0aW9uIGlmIGludGVydmFsIHRpbWUgaGFzIHBhc3NlZC4KICAgIGlmIChwcmV2Q2hlY2tUaW1lICYmICh0aW1lIC0gcHJldkNoZWNrVGltZSA8IGRhdGEuaW50ZXJ2YWwpKSB7IHJldHVybjsgfQoKICAgIC8vIFVwZGF0ZSBjaGVjayB0aW1lLgogICAgdGhpcy5wcmV2Q2hlY2tUaW1lID0gdGltZTsKICAgIHRoaXMuY2hlY2tJbnRlcnNlY3Rpb25zKCk7CiAgfSwKCiAgLyoqCiAgICogUmF5Y2FzdCBmb3IgaW50ZXJzZWN0aW9ucyBhbmQgZW1pdCBldmVudHMgZm9yIGN1cnJlbnQgYW5kIGNsZWFyZWQgaW5lcnNlY3Rpb25zLgogICAqLwogIGNoZWNrSW50ZXJzZWN0aW9uczogZnVuY3Rpb24gKCkgewogICAgdmFyIGNsZWFyZWRJbnRlcnNlY3RlZEVscyA9IHRoaXMuY2xlYXJlZEludGVyc2VjdGVkRWxzOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGk7CiAgICB2YXIgaW50ZXJzZWN0ZWRFbHMgPSB0aGlzLmludGVyc2VjdGVkRWxzOwogICAgdmFyIGludGVyc2VjdGlvbjsKICAgIHZhciBpbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3Rpb25zOwogICAgdmFyIG5ld0ludGVyc2VjdGVkRWxzID0gdGhpcy5uZXdJbnRlcnNlY3RlZEVsczsKICAgIHZhciBuZXdJbnRlcnNlY3Rpb25zID0gdGhpcy5uZXdJbnRlcnNlY3Rpb25zOwogICAgdmFyIHByZXZJbnRlcnNlY3RlZEVscyA9IHRoaXMucHJldkludGVyc2VjdGVkRWxzOwogICAgdmFyIHJhd0ludGVyc2VjdGlvbnMgPSB0aGlzLnJhd0ludGVyc2VjdGlvbnM7CgogICAgLy8gUmVmcmVzaCB0aGUgb2JqZWN0IHdoaXRlbGlzdCBpZiBuZWVkZWQuCiAgICBpZiAodGhpcy5kaXJ0eSkgeyB0aGlzLnJlZnJlc2hPYmplY3RzKCk7IH0KCiAgICAvLyBTdG9yZSBvbGQgcHJldmlvdXNseSBpbnRlcnNlY3RlZCBlbnRpdGllcy4KICAgIGNvcHlBcnJheSh0aGlzLnByZXZJbnRlcnNlY3RlZEVscywgdGhpcy5pbnRlcnNlY3RlZEVscyk7CgogICAgLy8gUmF5Y2FzdC4KICAgIHRoaXMudXBkYXRlT3JpZ2luRGlyZWN0aW9uKCk7CiAgICByYXdJbnRlcnNlY3Rpb25zLmxlbmd0aCA9IDA7CiAgICB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMub2JqZWN0cywgdHJ1ZSwgcmF3SW50ZXJzZWN0aW9ucyk7CgogICAgLy8gT25seSBrZWVwIGludGVyc2VjdGlvbnMgYWdhaW5zdCBvYmplY3RzIHRoYXQgaGF2ZSBhIHJlZmVyZW5jZSB0byBhbiBlbnRpdHkuCiAgICBpbnRlcnNlY3Rpb25zLmxlbmd0aCA9IDA7CiAgICBpbnRlcnNlY3RlZEVscy5sZW5ndGggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IHJhd0ludGVyc2VjdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgaW50ZXJzZWN0aW9uID0gcmF3SW50ZXJzZWN0aW9uc1tpXTsKICAgICAgLy8gRG9uJ3QgaW50ZXJzZWN0IHdpdGggb3duIGxpbmUuCiAgICAgIGlmIChkYXRhLnNob3dMaW5lICYmIGludGVyc2VjdGlvbi5vYmplY3QgPT09IGVsLmdldE9iamVjdDNEKCdsaW5lJykpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZiAoaW50ZXJzZWN0aW9uLm9iamVjdC5lbCkgewogICAgICAgIGludGVyc2VjdGlvbnMucHVzaChpbnRlcnNlY3Rpb24pOwogICAgICAgIGludGVyc2VjdGVkRWxzLnB1c2goaW50ZXJzZWN0aW9uLm9iamVjdC5lbCk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBHZXQgbmV3bHkgaW50ZXJzZWN0ZWQgZW50aXRpZXMuCiAgICBuZXdJbnRlcnNlY3Rpb25zLmxlbmd0aCA9IDA7CiAgICBuZXdJbnRlcnNlY3RlZEVscy5sZW5ndGggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGludGVyc2VjdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHByZXZJbnRlcnNlY3RlZEVscy5pbmRleE9mKGludGVyc2VjdGlvbnNbaV0ub2JqZWN0LmVsKSA9PT0gLTEpIHsKICAgICAgICBuZXdJbnRlcnNlY3Rpb25zLnB1c2goaW50ZXJzZWN0aW9uc1tpXSk7CiAgICAgICAgbmV3SW50ZXJzZWN0ZWRFbHMucHVzaChpbnRlcnNlY3Rpb25zW2ldLm9iamVjdC5lbCk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBFbWl0IGludGVyc2VjdGlvbiBjbGVhcmVkIG9uIGJvdGggZW50aXRpZXMgcGVyIGZvcm1lcmx5IGludGVyc2VjdGVkIGVudGl0eS4KICAgIGNsZWFyZWRJbnRlcnNlY3RlZEVscy5sZW5ndGggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IHByZXZJbnRlcnNlY3RlZEVscy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoaW50ZXJzZWN0ZWRFbHMuaW5kZXhPZihwcmV2SW50ZXJzZWN0ZWRFbHNbaV0pICE9PSAtMSkgeyBjb250aW51ZTsgfQogICAgICBwcmV2SW50ZXJzZWN0ZWRFbHNbaV0uZW1pdChFVkVOVFMuSU5URVJTRUNUX0NMRUFSLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyc2VjdGVkQ2xlYXJlZERldGFpbCk7CiAgICAgIGNsZWFyZWRJbnRlcnNlY3RlZEVscy5wdXNoKHByZXZJbnRlcnNlY3RlZEVsc1tpXSk7CiAgICB9CiAgICBpZiAoY2xlYXJlZEludGVyc2VjdGVkRWxzLmxlbmd0aCkgewogICAgICBlbC5lbWl0KEVWRU5UUy5JTlRFUlNFQ1RJT05fQ0xFQVIsIHRoaXMuaW50ZXJzZWN0aW9uQ2xlYXJlZERldGFpbCk7CiAgICB9CgogICAgLy8gRW1pdCBpbnRlcnNlY3RlZCBvbiBpbnRlcnNlY3RlZCBlbnRpdHkgcGVyIGludGVyc2VjdGVkIGVudGl0eS4KICAgIGZvciAoaSA9IDA7IGkgPCBuZXdJbnRlcnNlY3RlZEVscy5sZW5ndGg7IGkrKykgewogICAgICBuZXdJbnRlcnNlY3RlZEVsc1tpXS5lbWl0KEVWRU5UUy5JTlRFUlNFQ1QsIHRoaXMuaW50ZXJzZWN0ZWREZXRhaWwpOwogICAgfQoKICAgIC8vIEVtaXQgYWxsIGludGVyc2VjdGlvbnMgYXQgb25jZSBvbiByYXljYXN0aW5nIGVudGl0eS4KICAgIGlmIChuZXdJbnRlcnNlY3Rpb25zLmxlbmd0aCkgewogICAgICB0aGlzLmludGVyc2VjdGlvbkRldGFpbC5lbHMgPSBuZXdJbnRlcnNlY3RlZEVsczsKICAgICAgdGhpcy5pbnRlcnNlY3Rpb25EZXRhaWwuaW50ZXJzZWN0aW9ucyA9IG5ld0ludGVyc2VjdGlvbnM7CiAgICAgIGVsLmVtaXQoRVZFTlRTLklOVEVSU0VDVElPTiwgdGhpcy5pbnRlcnNlY3Rpb25EZXRhaWwpOwogICAgfQoKICAgIC8vIFVwZGF0ZSBsaW5lIGxlbmd0aC4KICAgIGlmIChkYXRhLnNob3dMaW5lKSB7IHNldFRpbWVvdXQodGhpcy51cGRhdGVMaW5lKTsgfQogIH0sCgogIHVwZGF0ZUxpbmU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IHRoaXMuaW50ZXJzZWN0aW9uczsKICAgIHZhciBsaW5lTGVuZ3RoOwoKICAgIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCkgewogICAgICBpZiAoaW50ZXJzZWN0aW9uc1swXS5vYmplY3QuZWwgPT09IGVsICYmIGludGVyc2VjdGlvbnNbMV0pIHsKICAgICAgICBsaW5lTGVuZ3RoID0gaW50ZXJzZWN0aW9uc1sxXS5kaXN0YW5jZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsaW5lTGVuZ3RoID0gaW50ZXJzZWN0aW9uc1swXS5kaXN0YW5jZTsKICAgICAgfQogICAgfQogICAgdGhpcy5kcmF3TGluZShsaW5lTGVuZ3RoKTsKICB9LAoKICAvKioKICAgKiBSZXR1cm4gdGhlIG1vc3QgcmVjZW50IGludGVyc2VjdGlvbiBkZXRhaWxzIGZvciBhIGdpdmVuIGVudGl0eSwgaWYgYW55LgogICAqIEBwYXJhbSB7QUVudGl0eX0gZWwKICAgKiBAcmV0dXJuIHtPYmplY3R9CiAgICovCiAgZ2V0SW50ZXJzZWN0aW9uOiBmdW5jdGlvbiAoZWwpIHsKICAgIHZhciBpOwogICAgdmFyIGludGVyc2VjdGlvbjsKICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmludGVyc2VjdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgaW50ZXJzZWN0aW9uID0gdGhpcy5pbnRlcnNlY3Rpb25zW2ldOwogICAgICBpZiAoaW50ZXJzZWN0aW9uLm9iamVjdC5lbCA9PT0gZWwpIHsgcmV0dXJuIGludGVyc2VjdGlvbjsgfQogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIG9yaWdpbiBhbmQgZGlyZWN0aW9uIG9mIHJheWNhc3RlciB1c2luZyBlbnRpdHkgdHJhbnNmb3JtcyBhbmQgc3VwcGxpZWQgb3JpZ2luIG9yCiAgICogZGlyZWN0aW9uIG9mZnNldHMuCiAgICovCiAgdXBkYXRlT3JpZ2luRGlyZWN0aW9uOiAoZnVuY3Rpb24gKCkgewogICAgdmFyIGRpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICB2YXIgb3JpZ2luVmVjMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CgogICAgLy8gQ2xvc3VyZSB0byBtYWtlIHF1YXRlcm5pb24vdmVjdG9yMyBvYmplY3RzIHByaXZhdGUuCiAgICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlT3JpZ2luRGlyZWN0aW9uICgpIHsKICAgICAgdmFyIGVsID0gdGhpcy5lbDsKICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CgogICAgICBpZiAoZGF0YS51c2VXb3JsZENvb3JkaW5hdGVzKSB7CiAgICAgICAgdGhpcy5yYXljYXN0ZXIuc2V0KGRhdGEub3JpZ2luLCBkYXRhLmRpcmVjdGlvbik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvLyBHcmFiIHRoZSBwb3NpdGlvbiBhbmQgcm90YXRpb24uIChBcyBhIHNpZGUgZWZmZWN0LCB0aGlzIHVwZGF0ZXMgZWwub2JqZWN0M0QubWF0cml4V29ybGQuKQogICAgICBlbC5vYmplY3QzRC5nZXRXb3JsZFBvc2l0aW9uKG9yaWdpblZlYzMpOwoKICAgICAgLy8gSWYgbm9uLXplcm8gb3JpZ2luLCB0cmFuc2xhdGUgdGhlIG9yaWdpbiBpbnRvIHdvcmxkIHNwYWNlLgogICAgICBpZiAoZGF0YS5vcmlnaW4ueCAhPT0gMCB8fCBkYXRhLm9yaWdpbi55ICE9PSAwIHx8IGRhdGEub3JpZ2luLnogIT09IDApIHsKICAgICAgICBvcmlnaW5WZWMzID0gZWwub2JqZWN0M0QubG9jYWxUb1dvcmxkKG9yaWdpblZlYzMuY29weShkYXRhLm9yaWdpbikpOwogICAgICB9CgogICAgICAvLyB0aHJlZS5qcyByYXljYXN0ZXIgZGlyZWN0aW9uIGlzIHJlbGF0aXZlIHRvIDAsIDAsIDAgTk9UIHRoZSBvcmlnaW4gLyBvZmZzZXQgd2UKICAgICAgLy8gcHJvdmlkZS4gQXBwbHkgdGhlIG9mZnNldCB0byB0aGUgZGlyZWN0aW9uLCB0aGVuIHJvdGF0aW9uIGZyb20gdGhlIG9iamVjdCwKICAgICAgLy8gYW5kIG5vcm1hbGl6ZS4KICAgICAgZGlyZWN0aW9uLmNvcHkoZGF0YS5kaXJlY3Rpb24pLnRyYW5zZm9ybURpcmVjdGlvbihlbC5vYmplY3QzRC5tYXRyaXhXb3JsZCkubm9ybWFsaXplKCk7CgogICAgICAvLyBBcHBseSBvZmZzZXQgYW5kIGRpcmVjdGlvbiwgaW4gd29ybGQgY29vcmRpbmF0ZXMuCiAgICAgIHRoaXMucmF5Y2FzdGVyLnNldChvcmlnaW5WZWMzLCBkaXJlY3Rpb24pOwogICAgfTsKICB9KSgpLAoKICAvKioKICAgKiBDcmVhdGUgb3IgdXBkYXRlIGxpbmUgdG8gZ2l2ZSByYXljYXN0ZXIgdmlzdWFsIHJlcHJlc2VudGF0aW9uLgogICAqIEN1c3RvbWl6ZSB0aGUgbGluZSB0aHJvdWdoIHRocm91Z2ggbGluZSBjb21wb25lbnQuCiAgICogV2UgZHJhdyB0aGUgbGluZSBpbiB0aGUgcmF5Y2FzdGVyIGNvbXBvbmVudCB0byBjdXN0b21pemUgdGhlIGxpbmUgdG8gdGhlCiAgICogcmF5Y2FzdGVyJ3Mgb3JpZ2luLCBkaXJlY3Rpb24sIGFuZCBmYXIuCiAgICoKICAgKiBVbmxpa2UgdGhlIHJheWNhc3Rlciwgd2UgY3JlYXRlIHRoZSBsaW5lIGFzIGEgY2hpbGQgb2YgdGhlIG9iamVjdC4gVGhlIGxpbmUgd2lsbAogICAqIGJlIGFmZmVjdGVkIGJ5IHRoZSB0cmFuc2Zvcm1zIG9mIHRoZSBvYmplY3RzLCBzbyB3ZSBkb24ndCBoYXZlIHRvIGNhbGN1bGF0ZSB0cmFuc2Zvcm1zCiAgICogbGlrZSB3ZSBkbyB3aXRoIHRoZSByYXljYXN0ZXIuCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gTGVuZ3RoIG9mIGxpbmUuIFBhc3MgaW4gdG8gc2hvcnRlbiB0aGUgbGluZSB0byB0aGUgaW50ZXJzZWN0aW9uCiAgICogICBwb2ludC4gSWYgbm90IHByb3ZpZGVkLCBsZW5ndGggd2lsbCBkZWZhdWx0IHRvIHRoZSBtYXggbGVuZ3RoLCBgcmF5Y2FzdGVyLmZhcmAuCiAgICovCiAgZHJhd0xpbmU6IGZ1bmN0aW9uIChsZW5ndGgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBlbmRWZWMzOwoKICAgIC8vIFN3aXRjaCBlYWNoIHRpbWUgdmVjdG9yIHNvIGxpbmUgdXBkYXRlIHRyaWdnZXJlZCBhbmQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdmVjdG9yIGNsb25lLgogICAgZW5kVmVjMyA9IHRoaXMubGluZURhdGEuZW5kID09PSB0aGlzLmxpbmVFbmRWZWMzCiAgICAgID8gdGhpcy5vdGhlckxpbmVFbmRWZWMzCiAgICAgIDogdGhpcy5saW5lRW5kVmVjMzsKCiAgICAvLyBUcmVhdCBJbmZpbml0eSBhcyAxMDAwbSBmb3IgdGhlIGxpbmUuCiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgICAgbGVuZ3RoID0gZGF0YS5mYXIgPT09IEluZmluaXR5ID8gMTAwMCA6IGRhdGEuZmFyOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgbGVuZ3RoIG9mIHRoZSBsaW5lIGlmIGdpdmVuLiBgdW5pdExpbmVFbmRWZWMzYCBpcyB0aGUgZGlyZWN0aW9uCiAgICAvLyBnaXZlbiBieSBkYXRhLmRpcmVjdGlvbiwgdGhlbiB3ZSBhcHBseSBhIHNjYWxhciB0byBnaXZlIGl0IGEgbGVuZ3RoLgogICAgdGhpcy5saW5lRGF0YS5zdGFydCA9IGRhdGEub3JpZ2luOwogICAgdGhpcy5saW5lRGF0YS5lbmQgPSBlbmRWZWMzLmNvcHkodGhpcy51bml0TGluZUVuZFZlYzMpLm11bHRpcGx5U2NhbGFyKGxlbmd0aCk7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2xpbmUnLCB0aGlzLmxpbmVEYXRhKTsKICB9LAoKICAvKioKICAgKiBSZXR1cm4gQS1GcmFtZSBhdHRhY2htZW50cyBvZiBlYWNoIGVsZW1lbnQncyBvYmplY3QzRCBncm91cCAoZS5nLiwgbWVzaCkuCiAgICogQ2hpbGRyZW4gYXJlIGZsYXR0ZW5lZCBieSBvbmUgbGV2ZWwsIHJlbW92aW5nIHRoZSBUSFJFRS5Hcm91cCB3cmFwcGVyLAogICAqIHNvIHRoYXQgbm9uLXJlY3Vyc2l2ZSByYXljYXN0aW5nIHJlbWFpbnMgdXNlZnVsLgogICAqCiAgICogT25seSBwdXNoIGNoaWxkcmVuIGRlZmluZWQgYXMgY29tcG9uZW50IGF0dGFjaGVtbnRzIChlLmcuLCBzZXRPYmplY3QzRCksCiAgICogTk9UIGFjdHVhbCBjaGlsZHJlbiBpbiB0aGUgc2NlbmUgZ3JhcGggaGllcmFyY2h5LgogICAqCiAgICogQHBhcmFtICB7QXJyYXk8RWxlbWVudD59IGVscwogICAqIEByZXR1cm4ge0FycmF5PFRIUkVFLk9iamVjdDNEPn0KICAgKi8KICBmbGF0dGVuT2JqZWN0M0RNYXBzOiBmdW5jdGlvbiAoZWxzKSB7CiAgICB2YXIga2V5OwogICAgdmFyIGk7CiAgICB2YXIgb2JqZWN0cyA9IHRoaXMub2JqZWN0czsKCiAgICAvLyBQdXNoIG1lc2hlcyBhbmQgb3RoZXIgYXR0YWNobWVudHMgb250byBsaXN0IG9mIG9iamVjdHMgdG8gaW50ZXJzZWN0LgogICAgb2JqZWN0cy5sZW5ndGggPSAwOwogICAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoZWxzW2ldLmlzRW50aXR5ICYmIGVsc1tpXS5vYmplY3QzRCkgewogICAgICAgIGZvciAoa2V5IGluIGVsc1tpXS5vYmplY3QzRE1hcCkgewogICAgICAgICAgb2JqZWN0cy5wdXNoKGVsc1tpXS5nZXRPYmplY3QzRChrZXkpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gb2JqZWN0czsKICB9LAoKICBjbGVhckFsbEludGVyc2VjdGlvbnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IHRoaXMuaW50ZXJzZWN0ZWRFbHMubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy5pbnRlcnNlY3RlZEVsc1tpXS5lbWl0KEVWRU5UUy5JTlRFUlNFQ1RfQ0xFQVIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyc2VjdGVkQ2xlYXJlZERldGFpbCk7CiAgICB9CiAgICBjb3B5QXJyYXkodGhpcy5jbGVhcmVkSW50ZXJzZWN0ZWRFbHMsIHRoaXMuaW50ZXJzZWN0ZWRFbHMpOwogICAgdGhpcy5pbnRlcnNlY3RlZEVscy5sZW5ndGggPSAwOwogICAgdGhpcy5pbnRlcnNlY3Rpb25zLmxlbmd0aCA9IDA7CiAgICB0aGlzLmVsLmVtaXQoRVZFTlRTLklOVEVSU0VDVElPTl9DTEVBUiwgdGhpcy5pbnRlcnNlY3Rpb25DbGVhcmVkRGV0YWlsKTsKICB9Cn0pOwoKLyoqCiAqIENvcHkgY29udGVudHMgb2Ygb25lIGFycmF5IHRvIGFub3RoZXIgd2l0aG91dCBhbGxvY2F0aW5nIG5ldyBhcnJheS4KICovCmZ1bmN0aW9uIGNvcHlBcnJheSAoYSwgYikgewogIHZhciBpOwogIGEubGVuZ3RoID0gYi5sZW5ndGg7CiAgZm9yIChpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAgIGFbaV0gPSBiW2ldOwogIH0KfQoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscy8iOjE4Mn1dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRlZ1RvUmFkID0gX2RlcmVxXygnLi4vbGliL3RocmVlJykuTWF0aC5kZWdUb1JhZDsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdyb3RhdGlvbicsIHsKICBzY2hlbWE6IHt0eXBlOiAndmVjMyd9LAoKICAvKioKICAgKiBVcGRhdGVzIG9iamVjdDNEIHJvdGF0aW9uLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmVsLm9iamVjdDNEOwogICAgb2JqZWN0M0Qucm90YXRpb24uc2V0KGRlZ1RvUmFkKGRhdGEueCksIGRlZ1RvUmFkKGRhdGEueSksIGRlZ1RvUmFkKGRhdGEueikpOwogICAgb2JqZWN0M0Qucm90YXRpb24ub3JkZXIgPSAnWVhaJzsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIC8vIFByZXR0eSBtdWNoIGZvciBtaXhpbnMuCiAgICB0aGlzLmVsLm9iamVjdDNELnJvdGF0aW9uLnNldCgwLCAwLCAwKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3fV0sNzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKLy8gQXZvaWRzIHRyaWdnZXJpbmcgYSB6ZXJvLWRldGVybWluYW50IHdoaWNoIG1ha2VzIG9iamVjdDNEIG1hdHJpeCBub24taW52ZXJ0aWJsZS4KdmFyIHplcm9TY2FsZSA9IDAuMDAwMDE7Cgptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnc2NhbGUnLCB7CiAgc2NoZW1hOiB7CiAgICB0eXBlOiAndmVjMycsCiAgICBkZWZhdWx0OiB7eDogMSwgeTogMSwgejogMX0KICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIG9iamVjdDNEID0gdGhpcy5lbC5vYmplY3QzRDsKICAgIHZhciB4ID0gZGF0YS54ID09PSAwID8gemVyb1NjYWxlIDogZGF0YS54OwogICAgdmFyIHkgPSBkYXRhLnkgPT09IDAgPyB6ZXJvU2NhbGUgOiBkYXRhLnk7CiAgICB2YXIgeiA9IGRhdGEueiA9PT0gMCA/IHplcm9TY2FsZSA6IGRhdGEuejsKICAgIG9iamVjdDNELnNjYWxlLnNldCh4LCB5LCB6KTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIC8vIFByZXR0eSBtdWNoIGZvciBtaXhpbnMuCiAgICB0aGlzLmVsLm9iamVjdDNELnNjYWxlLnNldCgxLCAxLCAxKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDl9XSw3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBUSFJFRSAqLwp2YXIgcmVnaXN0ZXIgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXIoJ2JhY2tncm91bmQnLCB7CiAgc2NoZW1hOiB7CiAgICBjb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICdibGFjayd9LAogICAgdHJhbnNwYXJlbnQ6IHtkZWZhdWx0OiBmYWxzZX0KICB9LAogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmVsLm9iamVjdDNEOwogICAgaWYgKGRhdGEudHJhbnNwYXJlbnQpIHsKICAgICAgb2JqZWN0M0QuYmFja2dyb3VuZCA9IG51bGw7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG9iamVjdDNELmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoZGF0YS5jb2xvcik7CiAgfQp9KTsKCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5fV0sODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXIgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXIoJ2RlYnVnJywgewogIHNjaGVtYToge2RlZmF1bHQ6IHRydWV9Cn0pOwoKfSx7Ii4uLy4uL2NvcmUvY29tcG9uZW50IjoxMDl9XSw4MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LCBsb2NhdGlvbiAgKi8KdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJyk7CnZhciBiaW5kID0gdXRpbHMuYmluZDsKCnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi8uLi9jb25zdGFudHMvJyk7Cgp2YXIgTU9EQUxfQ0xBU1MgPSAnYS1tb2RhbCc7CnZhciBESUFMT0dfQ0xBU1MgPSAnYS1kaWFsb2cnOwp2YXIgRElBTE9HX1RFWFRfQ0xBU1MgPSAnYS1kaWFsb2ctdGV4dCc7CnZhciBESUFMT0dfVEVYVF9DT05UQUlORVJfQ0xBU1MgPSAnYS1kaWFsb2ctdGV4dC1jb250YWluZXInOwp2YXIgRElBTE9HX0JVVFRPTlNfQ09OVEFJTkVSX0NMQVNTID0gJ2EtZGlhbG9nLWJ1dHRvbnMtY29udGFpbmVyJzsKdmFyIERJQUxPR19CVVRUT05fQ0xBU1MgPSAnYS1kaWFsb2ctYnV0dG9uJzsKdmFyIERJQUxPR19BTExPV19CVVRUT05fQ0xBU1MgPSAnYS1kaWFsb2ctYWxsb3ctYnV0dG9uJzsKdmFyIERJQUxPR19ERU5ZX0JVVFRPTl9DTEFTUyA9ICdhLWRpYWxvZy1kZW55LWJ1dHRvbic7CnZhciBESUFMT0dfT0tfQlVUVE9OX0NMQVNTID0gJ2EtZGlhbG9nLW9rLWJ1dHRvbic7CgovKioKICogVUkgZm9yIGVuYWJsaW5nIGRldmljZSBtb3Rpb24gcGVybWlzc2lvbgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ2RldmljZS1vcmllbnRhdGlvbi1wZXJtaXNzaW9uLXVpJywgewogIHNjaGVtYToge2VuYWJsZWQ6IHtkZWZhdWx0OiB0cnVlfX0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBpZiAoIXRoaXMuZGF0YS5lbmFibGVkKSB7IHJldHVybjsgfQoKICAgIGlmIChsb2NhdGlvbi5ob3N0bmFtZSAhPT0gJ2xvY2FsaG9zdCcgJiYKICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSAhPT0gJzEyNy4wLjAuMScgJiYKICAgICAgICBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHA6JykgewogICAgICB0aGlzLnNob3dIVFRQQWxlcnQoKTsKICAgIH0KCiAgICAvLyBTaG93IGFsZXJ0IG9uIGlQYWQgaWYgU2FmYXJpIGlzIG9uIGRlc2t0b3AgbW9kZS4KICAgIGlmICh1dGlscy5kZXZpY2UuaXNNb2JpbGVEZXZpY2VSZXF1ZXN0aW5nRGVza3RvcFNpdGUoKSkgewogICAgICB0aGlzLnNob3dNb2JpbGVEZXNrdG9wTW9kZUFsZXJ0KCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBvciBkb2Vzbid0IHJlcXVpcmUgcGVybWlzc2lvbiB0byBEZXZpY2VPcmllbnRhdGlvbkV2ZW50IEFQSS4KICAgIGlmICh0eXBlb2YgRGV2aWNlT3JpZW50YXRpb25FdmVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIURldmljZU9yaWVudGF0aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24pIHsKICAgICAgdGhpcy5wZXJtaXNzaW9uR3JhbnRlZCA9IHRydWU7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB0aGlzLm9uRGV2aWNlTW90aW9uRGlhbG9nQWxsb3dDbGlja2VkID0gYmluZCh0aGlzLm9uRGV2aWNlTW90aW9uRGlhbG9nQWxsb3dDbGlja2VkLCB0aGlzKTsKICAgIHRoaXMub25EZXZpY2VNb3Rpb25EaWFsb2dEZW55Q2xpY2tlZCA9IGJpbmQodGhpcy5vbkRldmljZU1vdGlvbkRpYWxvZ0RlbnlDbGlja2VkLCB0aGlzKTsKICAgIC8vIFNob3cgZGlhbG9nIG9ubHkgaWYgcGVybWlzc2lvbiBoYXMgbm90IHlldCBiZWVuIGdyYW50ZWQuCiAgICBEZXZpY2VPcmllbnRhdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKCkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICBzZWxmLmRldmljZVBlcm1pc3Npb25EaWFsb2dFbCA9IGNyZWF0ZVBlcm1pc3Npb25EaWFsb2coCiAgICAgICAgJ1RoaXMgaW1tZXJzaXZlIHdlYnNpdGUgcmVxdWlyZXMgYWNjZXNzIHRvIHlvdXIgZGV2aWNlIG1vdGlvbiBzZW5zb3JzLicsCiAgICAgICAgc2VsZi5vbkRldmljZU1vdGlvbkRpYWxvZ0FsbG93Q2xpY2tlZCwKICAgICAgICBzZWxmLm9uRGV2aWNlTW90aW9uRGlhbG9nRGVueUNsaWNrZWQpOwogICAgICBzZWxmLmVsLmFwcGVuZENoaWxkKHNlbGYuZGV2aWNlUGVybWlzc2lvbkRpYWxvZ0VsKTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICBzZWxmLmVsLmVtaXQoJ2RldmljZW9yaWVudGF0aW9ucGVybWlzc2lvbmdyYW50ZWQnKTsKICAgICAgc2VsZi5wZXJtaXNzaW9uR3JhbnRlZCA9IHRydWU7CiAgICB9KTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIC8vIFRoaXMgcmVtb3ZlcyB0aGUgbW9kYWwgc2NyZWVuCiAgICBpZiAodGhpcy5kZXZpY2VQZXJtaXNzaW9uRGlhbG9nRWwpIHsgdGhpcy5lbC5yZW1vdmVDaGlsZCh0aGlzLmRldmljZVBlcm1pc3Npb25EaWFsb2dFbCk7IH0KICB9LAoKICBvbkRldmljZU1vdGlvbkRpYWxvZ0RlbnlDbGlja2VkOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZSgpOwogIH0sCgogIHNob3dNb2JpbGVEZXNrdG9wTW9kZUFsZXJ0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgc2FmYXJpSXBhZEFsZXJ0RWwgPSBjcmVhdGVBbGVydERpYWxvZygKICAgICAgJ1NldCB5b3VyIGJyb3dzZXIgdG8gcmVxdWVzdCB0aGUgbW9iaWxlIHZlcnNpb24gb2YgdGhlIHNpdGUgYW5kIHJlbG9hZCB0aGUgcGFnZSB0byBlbmpveSBpbW1lcnNpdmUgbW9kZS4nLAogICAgICBmdW5jdGlvbiAoKSB7IHNlbGYuZWwucmVtb3ZlQ2hpbGQoc2FmYXJpSXBhZEFsZXJ0RWwpOyB9KTsKICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQoc2FmYXJpSXBhZEFsZXJ0RWwpOwogIH0sCgogIHNob3dIVFRQQWxlcnQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBodHRwQWxlcnRFbCA9IGNyZWF0ZUFsZXJ0RGlhbG9nKAogICAgICAnQWNjZXNzIHRoaXMgc2l0ZSBvdmVyIEhUVFBTIHRvIGVudGVyIFZSIG1vZGUgYW5kIGdyYW50IGFjY2VzcyB0byB0aGUgZGV2aWNlIHNlbnNvcnMuJywKICAgICAgZnVuY3Rpb24gKCkgeyBzZWxmLmVsLnJlbW92ZUNoaWxkKGh0dHBBbGVydEVsKTsgfSk7CiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGh0dHBBbGVydEVsKTsKICB9LAoKICAvKioKICAgKiBFbmFibGUgZGV2aWNlIG1vdGlvbiBwZXJtaXNzaW9uIHdoZW4gY2xpY2tlZC4KICAgKi8KICBvbkRldmljZU1vdGlvbkRpYWxvZ0FsbG93Q2xpY2tlZDogZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdGhpcy5lbC5lbWl0KCdkZXZpY2VvcmllbnRhdGlvbnBlcm1pc3Npb25yZXF1ZXN0ZWQnKTsKICAgIERldmljZU9yaWVudGF0aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpZiAocmVzcG9uc2UgPT09ICdncmFudGVkJykgewogICAgICAgIHNlbGYuZWwuZW1pdCgnZGV2aWNlb3JpZW50YXRpb25wZXJtaXNzaW9uZ3JhbnRlZCcpOwogICAgICAgIHNlbGYucGVybWlzc2lvbkdyYW50ZWQgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHNlbGYuZWwuZW1pdCgnZGV2aWNlb3JpZW50YXRpb25wZXJtaXNzaW9ucmVqZWN0ZWQnKTsKICAgICAgfQogICAgICBzZWxmLnJlbW92ZSgpOwogICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7CiAgfQp9KTsKCi8qKgogKiBDcmVhdGUgYSBtb2RhbCBkaWFsb2cgdGhhdCByZXF1ZXN0IHVzZXJzIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoZSBEZXZpY2UgTW90aW9uIEFQSS4KICoKICogQHBhcmFtIHtmdW5jdGlvbn0gb25BbGxvd0NsaWNrZWQgLSBjbGljayBldmVudCBoYW5kbGVyCiAqIEByZXR1cm5zIHtFbGVtZW50fSBXcmFwcGVyIDxkaXY+LgogKi8KZnVuY3Rpb24gY3JlYXRlUGVybWlzc2lvbkRpYWxvZyAodGV4dCwgb25BbGxvd0NsaWNrZWQsIG9uRGVueUNsaWNrZWQpIHsKICB2YXIgYnV0dG9uc0NvbnRhaW5lcjsKICB2YXIgZGVueUJ1dHRvbjsKICB2YXIgYWNjZXB0QnV0dG9uOwoKICBidXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgYnV0dG9uc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKERJQUxPR19CVVRUT05TX0NPTlRBSU5FUl9DTEFTUyk7CgogIC8vIEJ1dHRvbnMKICBkZW55QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgZGVueUJ1dHRvbi5jbGFzc0xpc3QuYWRkKERJQUxPR19CVVRUT05fQ0xBU1MsIERJQUxPR19ERU5ZX0JVVFRPTl9DTEFTUyk7CiAgZGVueUJ1dHRvbi5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwogIGRlbnlCdXR0b24uaW5uZXJIVE1MID0gJ0RlbnknOwogIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoZGVueUJ1dHRvbik7CgogIGFjY2VwdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGFjY2VwdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKERJQUxPR19CVVRUT05fQ0xBU1MsIERJQUxPR19BTExPV19CVVRUT05fQ0xBU1MpOwogIGFjY2VwdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwogIGFjY2VwdEJ1dHRvbi5pbm5lckhUTUwgPSAnQWxsb3cnOwogIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYWNjZXB0QnV0dG9uKTsKCiAgLy8gQXNrIGZvciBzZW5zb3IgZXZlbnRzIHRvIGJlIHVzZWQKICBhY2NlcHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICBvbkFsbG93Q2xpY2tlZCgpOwogIH0pOwoKICBkZW55QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkgewogICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgb25EZW55Q2xpY2tlZCgpOwogIH0pOwoKICByZXR1cm4gY3JlYXRlRGlhbG9nKHRleHQsIGJ1dHRvbnNDb250YWluZXIpOwp9CgpmdW5jdGlvbiBjcmVhdGVBbGVydERpYWxvZyAodGV4dCwgb25Pa0NsaWNrZWQpIHsKICB2YXIgYnV0dG9uc0NvbnRhaW5lcjsKICB2YXIgb2tCdXR0b247CgogIGJ1dHRvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBidXR0b25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoRElBTE9HX0JVVFRPTlNfQ09OVEFJTkVSX0NMQVNTKTsKCiAgLy8gQnV0dG9ucwogIG9rQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgb2tCdXR0b24uY2xhc3NMaXN0LmFkZChESUFMT0dfQlVUVE9OX0NMQVNTLCBESUFMT0dfT0tfQlVUVE9OX0NMQVNTKTsKICBva0J1dHRvbi5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwogIG9rQnV0dG9uLmlubmVySFRNTCA9ICdDbG9zZSc7CiAgYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChva0J1dHRvbik7CgogIC8vIEFzayBmb3Igc2Vuc29yIGV2ZW50cyB0byBiZSB1c2VkCiAgb2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICBvbk9rQ2xpY2tlZCgpOwogIH0pOwoKICByZXR1cm4gY3JlYXRlRGlhbG9nKHRleHQsIGJ1dHRvbnNDb250YWluZXIpOwp9CgpmdW5jdGlvbiBjcmVhdGVEaWFsb2cgKHRleHQsIGJ1dHRvbnNDb250YWluZXJFbCkgewogIHZhciBtb2RhbENvbnRhaW5lcjsKICB2YXIgZGlhbG9nOwogIHZhciBkaWFsb2dUZXh0Q29udGFpbmVyOwogIHZhciBkaWFsb2dUZXh0OwoKICBtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIG1vZGFsQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoTU9EQUxfQ0xBU1MpOwogIG1vZGFsQ29udGFpbmVyLnNldEF0dHJpYnV0ZShjb25zdGFudHMuQUZSQU1FX0lOSkVDVEVELCAnJyk7CgogIGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIGRpYWxvZy5jbGFzc05hbWUgPSBESUFMT0dfQ0xBU1M7CiAgZGlhbG9nLnNldEF0dHJpYnV0ZShjb25zdGFudHMuQUZSQU1FX0lOSkVDVEVELCAnJyk7CiAgbW9kYWxDb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nKTsKCiAgZGlhbG9nVGV4dENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIGRpYWxvZ1RleHRDb250YWluZXIuY2xhc3NMaXN0LmFkZChESUFMT0dfVEVYVF9DT05UQUlORVJfQ0xBU1MpOwogIGRpYWxvZy5hcHBlbmRDaGlsZChkaWFsb2dUZXh0Q29udGFpbmVyKTsKCiAgZGlhbG9nVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIGRpYWxvZ1RleHQuY2xhc3NMaXN0LmFkZChESUFMT0dfVEVYVF9DTEFTUyk7CiAgZGlhbG9nVGV4dC5pbm5lckhUTUwgPSB0ZXh0OwogIGRpYWxvZ1RleHRDb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhbG9nVGV4dCk7CgogIGRpYWxvZy5hcHBlbmRDaGlsZChidXR0b25zQ29udGFpbmVyRWwpOwoKICByZXR1cm4gbW9kYWxDb250YWluZXI7Cn0KCn0seyIuLi8uLi9jb25zdGFudHMvIjoxMDEsIi4uLy4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uLy4uL3V0aWxzLyI6MTgyfV0sODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKLyoqCiAqIENvbXBvbmVudCB0byBlbWJlZCBhbiBhLWZyYW1lIHNjZW5lIHdpdGhpbiB0aGUgbGF5b3V0IG9mIGEgMkQgcGFnZS4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdlbWJlZGRlZCcsIHsKICBkZXBlbmRlbmNpZXM6IFsndnItbW9kZS11aSddLAoKICBzY2hlbWE6IHtkZWZhdWx0OiB0cnVlfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWw7CiAgICB2YXIgZW50ZXJWUkVsID0gc2NlbmVFbC5xdWVyeVNlbGVjdG9yKCcuYS1lbnRlci12cicpOwogICAgaWYgKHRoaXMuZGF0YSA9PT0gdHJ1ZSkgewogICAgICBpZiAoZW50ZXJWUkVsKSB7IGVudGVyVlJFbC5jbGFzc0xpc3QuYWRkKCdlbWJlZGRlZCcpOyB9CiAgICAgIHNjZW5lRWwucmVtb3ZlRnVsbFNjcmVlblN0eWxlcygpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGVudGVyVlJFbCkgeyBlbnRlclZSRWwuY2xhc3NMaXN0LnJlbW92ZSgnZW1iZWRkZWQnKTsgfQogICAgICBzY2VuZUVsLmFkZEZ1bGxTY3JlZW5TdHlsZXMoKTsKICAgIH0KICB9Cgp9KTsKCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5fV0sODM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXIgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi8uLi9saWIvdGhyZWUnKTsKdmFyIGRlYnVnID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvZGVidWcnKTsKCnZhciB3YXJuID0gZGVidWcoJ2NvbXBvbmVudHM6Zm9nOndhcm4nKTsKCi8qKgogKiBGb2cgY29tcG9uZW50LgogKiBBcHBsaWVzIG9ubHkgdG8gdGhlIHNjZW5lIGVudGl0eS4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyKCdmb2cnLCB7CiAgc2NoZW1hOiB7CiAgICBjb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjMDAwJ30sCiAgICBkZW5zaXR5OiB7ZGVmYXVsdDogMC4wMDAyNX0sCiAgICBmYXI6IHtkZWZhdWx0OiAxMDAwLCBtaW46IDB9LAogICAgbmVhcjoge2RlZmF1bHQ6IDEsIG1pbjogMH0sCiAgICB0eXBlOiB7ZGVmYXVsdDogJ2xpbmVhcicsIG9uZU9mOiBbJ2xpbmVhcicsICdleHBvbmVudGlhbCddfQogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGZvZyA9IHRoaXMuZWwub2JqZWN0M0QuZm9nOwoKICAgIGlmICghZWwuaXNTY2VuZSkgewogICAgICB3YXJuKCdGb2cgY29tcG9uZW50IGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gPGEtc2NlbmU+Jyk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyAoUmUpY3JlYXRlIGZvZyBpZiBmb2cgZG9lc24ndCBleGlzdCBvciBmb2cgdHlwZSBjaGFuZ2VkLgogICAgaWYgKCFmb2cgfHwgZGF0YS50eXBlICE9PSBmb2cubmFtZSkgewogICAgICBlbC5vYmplY3QzRC5mb2cgPSBnZXRGb2coZGF0YSk7CiAgICAgIGVsLnN5c3RlbXMubWF0ZXJpYWwudXBkYXRlTWF0ZXJpYWxzKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBGb2cgZGF0YSBjaGFuZ2VkLiBVcGRhdGUgZm9nLgogICAgT2JqZWN0LmtleXModGhpcy5zY2hlbWEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICB2YXIgdmFsdWUgPSBkYXRhW2tleV07CiAgICAgIGlmIChrZXkgPT09ICdjb2xvcicpIHsgdmFsdWUgPSBuZXcgVEhSRUUuQ29sb3IodmFsdWUpOyB9CiAgICAgIGZvZ1trZXldID0gdmFsdWU7CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBSZW1vdmUgZm9nIG9uIHJlbW92ZSAoY2FsbGJhY2spLgogICAqLwogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGZvZyA9IHRoaXMuZWwub2JqZWN0M0QuZm9nOwogICAgaWYgKCFmb2cpIHsgcmV0dXJuOyB9CiAgICBmb2cuZmFyID0gMDsKICAgIGZvZy5uZWFyID0gMC4xOwogIH0KfSk7CgovKioKICogQ3JlYXRlcyBhIGZvZyBvYmplY3QuIFNldHMgZm9nLm5hbWUgdG8gYmUgYWJsZSB0byBkZXRlY3QgZm9nIHR5cGUgY2hhbmdlcy4KICoKICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBGb2cgZGF0YS4KICogQHJldHVybnMge29iamVjdH0gZm9nCiAqLwpmdW5jdGlvbiBnZXRGb2cgKGRhdGEpIHsKICB2YXIgZm9nOwogIGlmIChkYXRhLnR5cGUgPT09ICdleHBvbmVudGlhbCcpIHsKICAgIGZvZyA9IG5ldyBUSFJFRS5Gb2dFeHAyKGRhdGEuY29sb3IsIGRhdGEuZGVuc2l0eSk7CiAgfSBlbHNlIHsKICAgIGZvZyA9IG5ldyBUSFJFRS5Gb2coZGF0YS5jb2xvciwgZGF0YS5uZWFyLCBkYXRhLmZhcik7CiAgfQogIGZvZy5uYW1lID0gZGF0YS50eXBlOwogIHJldHVybiBmb2c7Cn0KCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi8uLi9saWIvdGhyZWUiOjE1NywiLi4vLi4vdXRpbHMvZGVidWciOjE3OH1dLDg0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKLyogZ2xvYmFsIEFGUkFNRSAqLwp2YXIgQUZSQU1FX0lOSkVDVEVEID0gX2RlcmVxXygnLi4vLi4vY29uc3RhbnRzJykuQUZSQU1FX0lOSkVDVEVEOwp2YXIgcGtnID0gX2RlcmVxXygnLi4vLi4vLi4vcGFja2FnZScpOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi8uLi91dGlscy8nKTsKCi8qKgogKiAwLjQuMiB0byAwLjQueAogKiBXaWxsIG5lZWQgdG8gdXBkYXRlIHRoaXMgd2hlbiBBLUZyYW1lIGdvZXMgdG8gMS54LnguCiAqLwpmdW5jdGlvbiBnZXRGdXp6eVBhdGNoVmVyc2lvbiAodmVyc2lvbikgewogIHZhciBzcGxpdCA9IHZlcnNpb24uc3BsaXQoJy4nKTsKICBzcGxpdFsyXSA9ICd4JzsKICByZXR1cm4gc3BsaXQuam9pbignLicpOwp9Cgp2YXIgSU5TUEVDVE9SX0RFVl9VUkwgPSAnaHR0cHM6Ly9hZnJhbWUuaW8vYWZyYW1lLWluc3BlY3Rvci9kaXN0L2FmcmFtZS1pbnNwZWN0b3IuanMnOwp2YXIgSU5TUEVDVE9SX1JFTEVBU0VfVVJMID0gJ2h0dHBzOi8vdW5wa2cuY29tL2FmcmFtZS1pbnNwZWN0b3JAJyArIGdldEZ1enp5UGF0Y2hWZXJzaW9uKHBrZy52ZXJzaW9uKSArICcvZGlzdC9hZnJhbWUtaW5zcGVjdG9yLm1pbi5qcyc7CnZhciBJTlNQRUNUT1JfVVJMID0gcHJvY2Vzcy5lbnYuSU5TUEVDVE9SX1ZFUlNJT04gPT09ICdkZXYnID8gSU5TUEVDVE9SX0RFVl9VUkwgOiBJTlNQRUNUT1JfUkVMRUFTRV9VUkw7CnZhciBMT0FESU5HX01FU1NBR0UgPSAnTG9hZGluZyBJbnNwZWN0b3InOwp2YXIgTE9BRElOR19FUlJPUl9NRVNTQUdFID0gJ0Vycm9yIGxvYWRpbmcgSW5zcGVjdG9yJzsKCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdpbnNwZWN0b3InLCB7CiAgc2NoZW1hOiB7CiAgICB1cmw6IHtkZWZhdWx0OiBJTlNQRUNUT1JfVVJMfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZmlyc3RQbGF5ID0gdHJ1ZTsKICAgIHRoaXMub25LZXlkb3duID0gdGhpcy5vbktleWRvd24uYmluZCh0aGlzKTsKICAgIHRoaXMub25NZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKTsKICAgIHRoaXMuaW5pdE92ZXJsYXkoKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleWRvd24pOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLm9uTWVzc2FnZSk7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24gKCkgewogICAgdmFyIHVybFBhcmFtOwogICAgaWYgKCF0aGlzLmZpcnN0UGxheSkgeyByZXR1cm47IH0KICAgIHVybFBhcmFtID0gdXRpbHMuZ2V0VXJsUGFyYW1ldGVyKCdpbnNwZWN0b3InKTsKICAgIGlmICh1cmxQYXJhbSAhPT0gJ2ZhbHNlJyAmJiAhIXVybFBhcmFtKSB7CiAgICAgIHRoaXMub3Blbkluc3BlY3RvcigpOwogICAgICB0aGlzLmZpcnN0UGxheSA9IGZhbHNlOwogICAgfQogIH0sCgogIGluaXRPdmVybGF5OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZG90c0hUTUwgPSAnPHNwYW4gY2xhc3M9ImRvdHMiPjxzcGFuPi48L3NwYW4+PHNwYW4+Ljwvc3Bhbj48c3Bhbj4uPC9zcGFuPjwvc3Bhbj4nOwogICAgdGhpcy5sb2FkaW5nTWVzc2FnZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICB0aGlzLmxvYWRpbmdNZXNzYWdlRWwuY2xhc3NMaXN0LmFkZCgnYS1pbnNwZWN0b3ItbG9hZGVyJyk7CiAgICB0aGlzLmxvYWRpbmdNZXNzYWdlRWwuaW5uZXJIVE1MID0gTE9BRElOR19NRVNTQUdFICsgZG90c0hUTUw7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgLyoqCiAgICogPGN0cmw+ICsgPGFsdD4gKyBpIGtleWJvYXJkIHNob3J0Y3V0LgogICAqLwogIG9uS2V5ZG93bjogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIHNob3J0Y3V0UHJlc3NlZCA9IGV2dC5rZXlDb2RlID09PSA3MyAmJiBldnQuY3RybEtleSAmJiBldnQuYWx0S2V5OwogICAgaWYgKCFzaG9ydGN1dFByZXNzZWQpIHsgcmV0dXJuOyB9CiAgICB0aGlzLm9wZW5JbnNwZWN0b3IoKTsKICB9LAoKICBzaG93TG9hZGVyOiBmdW5jdGlvbiAoKSB7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMubG9hZGluZ01lc3NhZ2VFbCk7CiAgfSwKCiAgaGlkZUxvYWRlcjogZnVuY3Rpb24gKCkgewogICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmxvYWRpbmdNZXNzYWdlRWwpOwogIH0sCgogIC8qKgogICAqIHBvc3RNZXNzYWdlLiBhZnJhbWUuaW8gdXNlcyB0aGlzIHRvIGNyZWF0ZSBhIGJ1dHRvbiBvbiBleGFtcGxlcyB0byBvcGVuIEluc3BlY3Rvci4KICAgKi8KICBvbk1lc3NhZ2U6IGZ1bmN0aW9uIChldnQpIHsKICAgIGlmIChldnQuZGF0YSA9PT0gJ0lOSkVDVF9BRlJBTUVfSU5TUEVDVE9SJykgeyB0aGlzLm9wZW5JbnNwZWN0b3IoKTsgfQogIH0sCgogIG9wZW5JbnNwZWN0b3I6IGZ1bmN0aW9uIChmb2N1c0VsKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgc2NyaXB0OwoKICAgIC8vIEFscmVhZHkgaW5qZWN0ZWQuIE9wZW4uCiAgICBpZiAoQUZSQU1FLklOU1BFQ1RPUiB8fCBBRlJBTUUuaW5zcGVjdG9ySW5qZWN0ZWQpIHsKICAgICAgQUZSQU1FLklOU1BFQ1RPUi5vcGVuKGZvY3VzRWwpOwogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5zaG93TG9hZGVyKCk7CgogICAgLy8gSW5qZWN0LgogICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICBzY3JpcHQuc3JjID0gdGhpcy5kYXRhLnVybDsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsICdhZnJhbWUtaW5zcGVjdG9yJyk7CiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKEFGUkFNRV9JTkpFQ1RFRCwgJycpOwogICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgQUZSQU1FLklOU1BFQ1RPUi5vcGVuKGZvY3VzRWwpOwogICAgICBzZWxmLmhpZGVMb2FkZXIoKTsKICAgICAgc2VsZi5yZW1vdmVFdmVudExpc3RlbmVycygpOwogICAgfTsKICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICBzZWxmLmxvYWRpbmdNZXNzYWdlRWwuaW5uZXJIVE1MID0gTE9BRElOR19FUlJPUl9NRVNTQUdFOwogICAgfTsKICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgIEFGUkFNRS5pbnNwZWN0b3JJbmplY3RlZCA9IHRydWU7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleWRvd24pOwogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLm9uTWVzc2FnZSk7CiAgfQp9KTsKCn0pLmNhbGwodGhpcyxfZGVyZXFfKCdfcHJvY2VzcycpKQoKfSx7Ii4uLy4uLy4uL3BhY2thZ2UiOjU0LCIuLi8uLi9jb25zdGFudHMiOjEwMSwiLi4vLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vLi4vdXRpbHMvIjoxODIsIl9wcm9jZXNzIjo1fV0sODU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgc2hvdWxkQ2FwdHVyZUtleUV2ZW50ID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJykuc2hvdWxkQ2FwdHVyZUtleUV2ZW50OwoKbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ2tleWJvYXJkLXNob3J0Y3V0cycsIHsKICBzY2hlbWE6IHsKICAgIGVudGVyVlI6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGV4aXRWUjoge2RlZmF1bHQ6IHRydWV9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdGhpcy5vbktleXVwID0gdGhpcy5vbktleXVwLmJpbmQodGhpcyk7CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAob2xkRGF0YSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB0aGlzLmVudGVyVlJFbmFibGVkID0gZGF0YS5lbnRlclZSOwogIH0sCgogIHBsYXk6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXl1cCwgZmFsc2UpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLm9uS2V5dXApOwogIH0sCgogIG9uS2V5dXA6IGZ1bmN0aW9uIChldnQpIHsKICAgIHZhciBzY2VuZSA9IHRoaXMuZWw7CiAgICBpZiAoIXNob3VsZENhcHR1cmVLZXlFdmVudChldnQpKSB7IHJldHVybjsgfQogICAgaWYgKHRoaXMuZW50ZXJWUkVuYWJsZWQgJiYgZXZ0LmtleUNvZGUgPT09IDcwKSB7ICAvLyBmLgogICAgICBzY2VuZS5lbnRlclZSKCk7CiAgICB9CiAgICBpZiAodGhpcy5lbnRlclZSRW5hYmxlZCAmJiBldnQua2V5Q29kZSA9PT0gMjcpIHsgIC8vIGVzY2FwZS4KICAgICAgc2NlbmUuZXhpdFZSKCk7CiAgICB9CiAgfQp9KTsKCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi8uLi91dGlscy8iOjE4Mn1dLDg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRlYnVnID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvZGVidWcnKTsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKCnZhciB3YXJuID0gZGVidWcoJ2NvbXBvbmVudHM6cG9vbDp3YXJuJyk7CgovKioKICogUG9vbCBjb21wb25lbnQgdG8gcmV1c2UgZW50aXRpZXMuCiAqIEF2b2lkcyBjcmVhdGluZyBhbmQgZGVzdHJveWluZyB0aGUgc2FtZSBraW5kIG9mIGVudGl0aWVzLgogKiBIZWxwcyByZWR1Y2UgR0MgcGF1c2VzLiBGb3IgZXhhbXBsZSBpbiBhIGdhbWUgdG8gcmV1c2UgZW5lbWllcyBlbnRpdGllcy4KICoKICogQG1lbWJlciB7YXJyYXl9IGF2YWlsYWJsZUVscyAtIEF2YWlsYWJsZSBlbnRpdGllcyBpbiB0aGUgcG9vbC4KICogQG1lbWJlciB7YXJyYXl9IHVzZWRFbHMgLSBFbnRpdGllcyBvZiB0aGUgcG9vbCBpbiB1c2UuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgncG9vbCcsIHsKICBzY2hlbWE6IHsKICAgIGNvbnRhaW5lcjoge2RlZmF1bHQ6ICcnfSwKICAgIG1peGluOiB7ZGVmYXVsdDogJyd9LAogICAgc2l6ZToge2RlZmF1bHQ6IDB9LAogICAgZHluYW1pYzoge2RlZmF1bHQ6IGZhbHNlfQogIH0sCgogIG11bHRpcGxlOiB0cnVlLAoKICBpbml0UG9vbDogZnVuY3Rpb24gKCkgewogICAgdmFyIGk7CgogICAgdGhpcy5hdmFpbGFibGVFbHMgPSBbXTsKICAgIHRoaXMudXNlZEVscyA9IFtdOwoKICAgIGlmICghdGhpcy5kYXRhLm1peGluKSB7CiAgICAgIHdhcm4oJ05vIG1peGluIHByb3ZpZGVkIGZvciBwb29sIGNvbXBvbmVudC4nKTsKICAgIH0KCiAgICBpZiAodGhpcy5kYXRhLmNvbnRhaW5lcikgewogICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5kYXRhLmNvbnRhaW5lcik7CiAgICAgIGlmICghdGhpcy5jb250YWluZXIpIHsKICAgICAgICB3YXJuKCdDb250YWluZXIgJyArIHRoaXMuZGF0YS5jb250YWluZXIgKyAnIG5vdCBmb3VuZC4nKTsKICAgICAgfQogICAgfQogICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbnRhaW5lciB8fCB0aGlzLmVsOwoKICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRhdGEuc2l6ZTsgKytpKSB7CiAgICAgIHRoaXMuY3JlYXRlRW50aXR5KCk7CiAgICB9CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAob2xkRGF0YSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICBpZiAob2xkRGF0YS5taXhpbiAhPT0gZGF0YS5taXhpbiB8fCBvbGREYXRhLnNpemUgIT09IGRhdGEuc2l6ZSkgewogICAgICB0aGlzLmluaXRQb29sKCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQWRkIGEgbmV3IGVudGl0eSB0byB0aGUgbGlzdCBvZiBhdmFpbGFibGUgZW50aXRpZXMuCiAgICovCiAgY3JlYXRlRW50aXR5OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWw7CiAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EtZW50aXR5Jyk7CiAgICBlbC5wbGF5ID0gdGhpcy53cmFwUGxheShlbC5wbGF5KTsKICAgIGVsLnNldEF0dHJpYnV0ZSgnbWl4aW4nLCB0aGlzLmRhdGEubWl4aW4pOwogICAgZWwub2JqZWN0M0QudmlzaWJsZSA9IGZhbHNlOwogICAgZWwucGF1c2UoKTsKICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsKTsKICAgIHRoaXMuYXZhaWxhYmxlRWxzLnB1c2goZWwpOwogIH0sCgogIC8qKgogICAqIFBsYXkgd3JhcHBlciBmb3IgcG9vbGVkIGVudGl0aWVzLiBXaGVuIHBhdXNpbmcgYW5kIHBsYXlpbmcgYSBzY2VuZSwgZG9uJ3Qgd2FudCB0byBwbGF5CiAgICogZW50aXRpZXMgdGhhdCBhcmUgbm90IGluIHVzZS4KICAgKi8KICB3cmFwUGxheTogZnVuY3Rpb24gKHBsYXlNZXRob2QpIHsKICAgIHZhciB1c2VkRWxzID0gdGhpcy51c2VkRWxzOwogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHVzZWRFbHMuaW5kZXhPZih0aGlzKSA9PT0gLTEpIHsgcmV0dXJuOyB9CiAgICAgIHBsYXlNZXRob2QuY2FsbCh0aGlzKTsKICAgIH07CiAgfSwKCiAgLyoqCiAgICogVXNlZCB0byByZXF1ZXN0IG9uZSBvZiB0aGUgYXZhaWxhYmxlIGVudGl0aWVzIG9mIHRoZSBwb29sLgogICAqLwogIHJlcXVlc3RFbnRpdHk6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbDsKICAgIGlmICh0aGlzLmF2YWlsYWJsZUVscy5sZW5ndGggPT09IDApIHsKICAgICAgaWYgKHRoaXMuZGF0YS5keW5hbWljID09PSBmYWxzZSkgewogICAgICAgIHdhcm4oJ1JlcXVlc3RlZCBlbnRpdHkgZnJvbSBlbXB0eSBwb29sOiAnICsgdGhpcy5hdHRyTmFtZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oJ1JlcXVlc3RlZCBlbnRpdHkgZnJvbSBlbXB0eSBwb29sLiBUaGlzIHBvb2wgaXMgZHluYW1pYyBhbmQgd2lsbCByZXNpemUgJyArCiAgICAgICAgICAgICAnYXV0b21hdGljYWxseS4gWW91IG1pZ2h0IHdhbnQgdG8gaW5jcmVhc2UgaXRzIGluaXRpYWwgc2l6ZTogJyArIHRoaXMuYXR0ck5hbWUpOwogICAgICB9CiAgICAgIHRoaXMuY3JlYXRlRW50aXR5KCk7CiAgICB9CiAgICBlbCA9IHRoaXMuYXZhaWxhYmxlRWxzLnNoaWZ0KCk7CiAgICB0aGlzLnVzZWRFbHMucHVzaChlbCk7CiAgICBlbC5vYmplY3QzRC52aXNpYmxlID0gdHJ1ZTsKICAgIHJldHVybiBlbDsKICB9LAoKICAvKioKICAgKiBVc2VkIHRvIHJldHVybiBhIHVzZWQgZW50aXR5IHRvIHRoZSBwb29sLgogICAqLwogIHJldHVybkVudGl0eTogZnVuY3Rpb24gKGVsKSB7CiAgICB2YXIgaW5kZXggPSB0aGlzLnVzZWRFbHMuaW5kZXhPZihlbCk7CiAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgIHdhcm4oJ1RoZSByZXR1cm5lZCBlbnRpdHkgd2FzIG5vdCBwcmV2aW91c2x5IHBvb2xlZCBmcm9tICcgKyB0aGlzLmF0dHJOYW1lKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy51c2VkRWxzLnNwbGljZShpbmRleCwgMSk7CiAgICB0aGlzLmF2YWlsYWJsZUVscy5wdXNoKGVsKTsKICAgIGVsLm9iamVjdDNELnZpc2libGUgPSBmYWxzZTsKICAgIGVsLnBhdXNlKCk7CiAgICByZXR1cm4gZWw7CiAgfQp9KTsKCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi8uLi91dGlscy9kZWJ1ZyI6MTc4fV0sODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiBnbG9iYWwgSW1hZ2VEYXRhLCBVUkwgKi8KdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vLi4vbGliL3RocmVlJyk7Cgp2YXIgVkVSVEVYX1NIQURFUiA9IFsKICAnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247JywKICAnYXR0cmlidXRlIHZlYzIgdXY7JywKICAndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7JywKICAndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDsnLAogICd2YXJ5aW5nIHZlYzIgdlV2OycsCiAgJ3ZvaWQgbWFpbigpICB7JywKICAnICB2VXYgPSB2ZWMyKCAxLi0gdXYueCwgdXYueSApOycsCiAgJyAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApOycsCiAgJ30nCl0uam9pbignXG4nKTsKCnZhciBGUkFHTUVOVF9TSEFERVIgPSBbCiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsCiAgJ3VuaWZvcm0gc2FtcGxlckN1YmUgbWFwOycsCiAgJ3ZhcnlpbmcgdmVjMiB2VXY7JywKICAnI2RlZmluZSBNX1BJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5JywKICAndm9pZCBtYWluKCkgeycsCiAgJyAgdmVjMiB1diA9IHZVdjsnLAogICcgIGZsb2F0IGxvbmdpdHVkZSA9IHV2LnggKiAyLiAqIE1fUEkgLSBNX1BJICsgTV9QSSAvIDIuOycsCiAgJyAgZmxvYXQgbGF0aXR1ZGUgPSB1di55ICogTV9QSTsnLAogICcgIHZlYzMgZGlyID0gdmVjMygnLAogICcgICAgLSBzaW4oIGxvbmdpdHVkZSApICogc2luKCBsYXRpdHVkZSApLCcsCiAgJyAgICBjb3MoIGxhdGl0dWRlICksJywKICAnICAgIC0gY29zKCBsb25naXR1ZGUgKSAqIHNpbiggbGF0aXR1ZGUgKScsCiAgJyAgKTsnLAogICcgIG5vcm1hbGl6ZSggZGlyICk7JywKICAnICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCB0ZXh0dXJlQ3ViZSggbWFwLCBkaXIgKS5yZ2IsIDEuMCApOycsCiAgJ30nCl0uam9pbignXG4nKTsKCi8qKgogKiBDb21wb25lbnQgdG8gdGFrZSBzY3JlZW5zaG90cyBvZiB0aGUgc2NlbmUgdXNpbmcgYSBrZWJvYXJkIHNob3J0Y3V0IChhbHQrcykuCiAqIEl0IGNhbiBiZSBjb25maWd1cmVkIHRvIGVpdGhlciB0YWtlIDM2MCZkZWc7IGNhcHR1cmVzIChgZXF1aXJlY3Rhbmd1bGFyYCkKICogb3IgcmVndWxhciBzY3JlZW5zaG90cyAoYHByb2plY3Rpb25gKQogKgogKiBUaGlzIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zcGl0ZS9USFJFRS5DdWJlbWFwVG9FcXVpcmVjdGFuZ3VsYXIKICogVG8gY2FwdHVyZSBhbiBlcXVpcmVjdGFuZ3VsYXIgcHJvamVjdGlvbiBvZiB0aGUgc2NlbmUgYSBUSFJFRS5DdWJlQ2FtZXJhIGlzIHVzZWQKICogVGhlIGN1YmUgbWFwIHByb2R1Y2VkIGJ5IHRoZSBDdWJlQ2FtZXJhIGlzIHByb2plY3RlZCBvbiBhIHF1YWQgYW5kIHRoZW4gcmVuZGVyZWQgdG8KICogV2ViR0xSZW5kZXJUYXJnZXQgd2l0aCBhbiBvcnRvZ3JhcGhpYyBjYW1lcmEuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnc2NyZWVuc2hvdCcsIHsKICBzY2hlbWE6IHsKICAgIHdpZHRoOiB7ZGVmYXVsdDogNDA5Nn0sCiAgICBoZWlnaHQ6IHtkZWZhdWx0OiAyMDQ4fSwKICAgIGNhbWVyYToge3R5cGU6ICdzZWxlY3Rvcid9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBpZiAoZWwucmVuZGVyZXIpIHsKICAgICAgc2V0dXAoKTsKICAgIH0gZWxzZSB7CiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbmRlci10YXJnZXQtbG9hZGVkJywgc2V0dXApOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldHVwICgpIHsKICAgICAgdmFyIGdsID0gZWwucmVuZGVyZXIuZ2V0Q29udGV4dCgpOwogICAgICBpZiAoIWdsKSB7IHJldHVybjsgfQogICAgICBzZWxmLmN1YmVNYXBTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUpOwogICAgICBzZWxmLm1hdGVyaWFsID0gbmV3IFRIUkVFLlJhd1NoYWRlck1hdGVyaWFsKHsKICAgICAgICB1bmlmb3Jtczoge21hcDoge3R5cGU6ICd0JywgdmFsdWU6IG51bGx9fSwKICAgICAgICB2ZXJ0ZXhTaGFkZXI6IFZFUlRFWF9TSEFERVIsCiAgICAgICAgZnJhZ21lbnRTaGFkZXI6IEZSQUdNRU5UX1NIQURFUiwKICAgICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlCiAgICAgIH0pOwogICAgICBzZWxmLnF1YWQgPSBuZXcgVEhSRUUuTWVzaCgKICAgICAgICBuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSgxLCAxKSwKICAgICAgICBzZWxmLm1hdGVyaWFsCiAgICAgICk7CiAgICAgIHNlbGYucXVhZC52aXNpYmxlID0gZmFsc2U7CiAgICAgIHNlbGYuY2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSgtMSAvIDIsIDEgLyAyLCAxIC8gMiwgLTEgLyAyLCAtMTAwMDAsIDEwMDAwKTsKICAgICAgc2VsZi5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgc2VsZi5jdHggPSBzZWxmLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICBlbC5vYmplY3QzRC5hZGQoc2VsZi5xdWFkKTsKICAgICAgc2VsZi5vbktleURvd24gPSBzZWxmLm9uS2V5RG93bi5iaW5kKHNlbGYpOwogICAgfQogIH0sCgogIGdldFJlbmRlclRhcmdldDogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHsKICAgIHJldHVybiBuZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQod2lkdGgsIGhlaWdodCwgewogICAgICBtaW5GaWx0ZXI6IFRIUkVFLkxpbmVhckZpbHRlciwKICAgICAgbWFnRmlsdGVyOiBUSFJFRS5MaW5lYXJGaWx0ZXIsCiAgICAgIHdyYXBTOiBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLAogICAgICB3cmFwVDogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZywKICAgICAgZm9ybWF0OiBUSFJFRS5SR0JBRm9ybWF0LAogICAgICB0eXBlOiBUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlCiAgICB9KTsKICB9LAoKICByZXNpemU6IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7CiAgICAvLyBSZXNpemUgcXVhZC4KICAgIHRoaXMucXVhZC5zY2FsZS5zZXQod2lkdGgsIGhlaWdodCwgMSk7CgogICAgLy8gUmVzaXplIGNhbWVyYS4KICAgIHRoaXMuY2FtZXJhLmxlZnQgPSAtMSAqIHdpZHRoIC8gMjsKICAgIHRoaXMuY2FtZXJhLnJpZ2h0ID0gd2lkdGggLyAyOwogICAgdGhpcy5jYW1lcmEudG9wID0gaGVpZ2h0IC8gMjsKICAgIHRoaXMuY2FtZXJhLmJvdHRvbSA9IC0xICogaGVpZ2h0IC8gMjsKICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKCiAgICAvLyBSZXNpemUgY2FudmFzLgogICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDsKICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodDsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKTsKICB9LAoKICAvKioKICAgKiA8Y3RybD4gKyA8YWx0PiArIHMgPSBSZWd1bGFyIHNjcmVlbnNob3QuCiAgICogPGN0cmw+ICsgPGFsdD4gKyA8c2hpZnQ+ICsgcyA9IEVxdWlyZWN0YW5ndWxhciBzY3JlZW5zaG90LgogICovCiAgb25LZXlEb3duOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgc2hvcnRjdXRQcmVzc2VkID0gZXZ0LmtleUNvZGUgPT09IDgzICYmIGV2dC5jdHJsS2V5ICYmIGV2dC5hbHRLZXk7CiAgICBpZiAoIXRoaXMuZGF0YSB8fCAhc2hvcnRjdXRQcmVzc2VkKSB7IHJldHVybjsgfQogICAgdmFyIHByb2plY3Rpb24gPSBldnQuc2hpZnRLZXkgPyAnZXF1aXJlY3Rhbmd1bGFyJyA6ICdwZXJzcGVjdGl2ZSc7CiAgICB0aGlzLmNhcHR1cmUocHJvamVjdGlvbik7CiAgfSwKCiAgLyoqCiAgICogQ2FwdHVyZSBhIHNjcmVlbnNob3Qgb2YgdGhlIHNjZW5lLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2plY3Rpb24gLSBTY3JlZW5zaG90IHByb2plY3Rpb24gKGVxdWlyZWN0YW5ndWxhciBvciBwZXJzcGVjdGl2ZSkuCiAgICovCiAgc2V0Q2FwdHVyZTogZnVuY3Rpb24gKHByb2plY3Rpb24pIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgc2l6ZTsKICAgIHZhciBjYW1lcmE7CiAgICB2YXIgY3ViZUNhbWVyYTsKICAgIC8vIENvbmZpZ3VyZSBjYW1lcmEuCiAgICBpZiAocHJvamVjdGlvbiA9PT0gJ3BlcnNwZWN0aXZlJykgewogICAgICAvLyBRdWFkIGlzIG9ubHkgdXNlZCBpbiBlcXVpcmVjdGFuZ3VsYXIgbW9kZS4gSGlkZSBpdCBpbiB0aGlzIGNhc2UuCiAgICAgIHRoaXMucXVhZC52aXNpYmxlID0gZmFsc2U7CiAgICAgIC8vIFVzZSBzY2VuZSBjYW1lcmEuCiAgICAgIGNhbWVyYSA9ICh0aGlzLmRhdGEuY2FtZXJhICYmIHRoaXMuZGF0YS5jYW1lcmEuY29tcG9uZW50cy5jYW1lcmEuY2FtZXJhKSB8fCBlbC5jYW1lcmE7CiAgICAgIHNpemUgPSB7d2lkdGg6IHRoaXMuZGF0YS53aWR0aCwgaGVpZ2h0OiB0aGlzLmRhdGEuaGVpZ2h0fTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIFVzZSBvcnRobyBjYW1lcmEuCiAgICAgIGNhbWVyYSA9IHRoaXMuY2FtZXJhOwogICAgICAvLyBDcmVhdGUgY3ViZSBjYW1lcmEgYW5kIGNvcHkgcG9zaXRpb24gZnJvbSBzY2VuZSBjYW1lcmEuCiAgICAgIGN1YmVDYW1lcmEgPSBuZXcgVEhSRUUuQ3ViZUNhbWVyYShlbC5jYW1lcmEubmVhciwgZWwuY2FtZXJhLmZhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKHRoaXMuY3ViZU1hcFNpemUsIDIwNDgpKTsKICAgICAgLy8gQ29weSBjYW1lcmEgcG9zaXRpb24gaW50byBjdWJlIGNhbWVyYTsKICAgICAgZWwuY2FtZXJhLmdldFdvcmxkUG9zaXRpb24oY3ViZUNhbWVyYS5wb3NpdGlvbik7CiAgICAgIGVsLmNhbWVyYS5nZXRXb3JsZFF1YXRlcm5pb24oY3ViZUNhbWVyYS5xdWF0ZXJuaW9uKTsKICAgICAgLy8gUmVuZGVyIHNjZW5lIHdpdGggY3ViZSBjYW1lcmEuCiAgICAgIGN1YmVDYW1lcmEudXBkYXRlKGVsLnJlbmRlcmVyLCBlbC5vYmplY3QzRCk7CiAgICAgIHRoaXMucXVhZC5tYXRlcmlhbC51bmlmb3Jtcy5tYXAudmFsdWUgPSBjdWJlQ2FtZXJhLnJlbmRlclRhcmdldC50ZXh0dXJlOwogICAgICBzaXplID0ge3dpZHRoOiB0aGlzLmRhdGEud2lkdGgsIGhlaWdodDogdGhpcy5kYXRhLmhlaWdodH07CiAgICAgIC8vIFVzZSBxdWFkIHRvIHByb2plY3QgaW1hZ2UgdGFrZW4gYnkgdGhlIGN1YmUgY2FtZXJhLgogICAgICB0aGlzLnF1YWQudmlzaWJsZSA9IHRydWU7CiAgICB9CiAgICByZXR1cm4gewogICAgICBjYW1lcmE6IGNhbWVyYSwKICAgICAgc2l6ZTogc2l6ZSwKICAgICAgcHJvamVjdGlvbjogcHJvamVjdGlvbgogICAgfTsKICB9LAoKICAvKioKICAgKiBNYWludGFpbmVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KICAgKi8KICBjYXB0dXJlOiBmdW5jdGlvbiAocHJvamVjdGlvbikgewogICAgdmFyIGlzVlJFbmFibGVkID0gdGhpcy5lbC5yZW5kZXJlci54ci5lbmFibGVkOwogICAgdmFyIHJlbmRlcmVyID0gdGhpcy5lbC5yZW5kZXJlcjsKICAgIHZhciBwYXJhbXM7CiAgICAvLyBEaXNhYmxlIFZSLgogICAgcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlOwogICAgcGFyYW1zID0gdGhpcy5zZXRDYXB0dXJlKHByb2plY3Rpb24pOwogICAgdGhpcy5yZW5kZXJDYXB0dXJlKHBhcmFtcy5jYW1lcmEsIHBhcmFtcy5zaXplLCBwYXJhbXMucHJvamVjdGlvbik7CiAgICAvLyBUcmlnZ2VyIGZpbGUgZG93bmxvYWQuCiAgICB0aGlzLnNhdmVDYXB0dXJlKCk7CiAgICAvLyBSZXN0b3JlIFZSLgogICAgcmVuZGVyZXIueHIuZW5hYmxlZCA9IGlzVlJFbmFibGVkOwogIH0sCgogIC8qKgogICAqIFJldHVybiBjYW52YXMgaW5zdGVhZCBvZiB0cmlnZ2VyaW5nIGRvd25sb2FkIChlLmcuLCBmb3IgdXBsb2FkaW5nIGJsb2IgdG8gc2VydmVyKS4KICAgKi8KICBnZXRDYW52YXM6IGZ1bmN0aW9uIChwcm9qZWN0aW9uKSB7CiAgICB2YXIgaXNWUkVuYWJsZWQgPSB0aGlzLmVsLnJlbmRlcmVyLnhyLmVuYWJsZWQ7CiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLmVsLnJlbmRlcmVyOwogICAgLy8gRGlzYWJsZSBWUi4KICAgIHZhciBwYXJhbXMgPSB0aGlzLnNldENhcHR1cmUocHJvamVjdGlvbik7CiAgICByZW5kZXJlci54ci5lbmFibGVkID0gZmFsc2U7CiAgICB0aGlzLnJlbmRlckNhcHR1cmUocGFyYW1zLmNhbWVyYSwgcGFyYW1zLnNpemUsIHBhcmFtcy5wcm9qZWN0aW9uKTsKICAgIC8vIFJlc3RvcmUgVlIuCiAgICByZW5kZXJlci54ci5lbmFibGVkID0gaXNWUkVuYWJsZWQ7CiAgICByZXR1cm4gdGhpcy5jYW52YXM7CiAgfSwKCiAgcmVuZGVyQ2FwdHVyZTogZnVuY3Rpb24gKGNhbWVyYSwgc2l6ZSwgcHJvamVjdGlvbikgewogICAgdmFyIGF1dG9DbGVhciA9IHRoaXMuZWwucmVuZGVyZXIuYXV0b0NsZWFyOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBpbWFnZURhdGE7CiAgICB2YXIgb3V0cHV0OwogICAgdmFyIHBpeGVsczsKICAgIHZhciByZW5kZXJlciA9IGVsLnJlbmRlcmVyOwogICAgLy8gQ3JlYXRlIHJlbmRlcmluZyB0YXJnZXQgYW5kIGJ1ZmZlciB0byBzdG9yZSB0aGUgcmVhZCBwaXhlbHMuCiAgICBvdXRwdXQgPSB0aGlzLmdldFJlbmRlclRhcmdldChzaXplLndpZHRoLCBzaXplLmhlaWdodCk7CiAgICBwaXhlbHMgPSBuZXcgVWludDhBcnJheSg0ICogc2l6ZS53aWR0aCAqIHNpemUuaGVpZ2h0KTsKICAgIC8vIFJlc2l6ZSBxdWFkLCBjYW1lcmEsIGFuZCBjYW52YXMuCiAgICB0aGlzLnJlc2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodCk7CiAgICAvLyBSZW5kZXIgc2NlbmUgdG8gcmVuZGVyIHRhcmdldC4KICAgIHJlbmRlcmVyLmF1dG9DbGVhciA9IHRydWU7CiAgICByZW5kZXJlci5jbGVhcigpOwogICAgcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KG91dHB1dCk7CiAgICByZW5kZXJlci5yZW5kZXIoZWwub2JqZWN0M0QsIGNhbWVyYSk7CiAgICByZW5kZXJlci5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7CiAgICAvLyBSZWFkIGltYWdlIHBpemVscyBiYWNrLgogICAgcmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVscyhvdXRwdXQsIDAsIDAsIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBwaXhlbHMpOwogICAgcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KG51bGwpOwogICAgaWYgKHByb2plY3Rpb24gPT09ICdwZXJzcGVjdGl2ZScpIHsKICAgICAgcGl4ZWxzID0gdGhpcy5mbGlwUGl4ZWxzVmVydGljYWxseShwaXhlbHMsIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTsKICAgIH0KICAgIGltYWdlRGF0YSA9IG5ldyBJbWFnZURhdGEobmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHBpeGVscyksIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTsKICAgIC8vIEhpZGUgcXVhZCBhZnRlciBwcm9qZWN0aW5nIHRoZSBpbWFnZS4KICAgIHRoaXMucXVhZC52aXNpYmxlID0gZmFsc2U7CiAgICAvLyBDb3B5IHBpeGVscyBpbnRvIGNhbnZhcy4KICAgIHRoaXMuY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApOwogIH0sCgogIGZsaXBQaXhlbHNWZXJ0aWNhbGx5OiBmdW5jdGlvbiAocGl4ZWxzLCB3aWR0aCwgaGVpZ2h0KSB7CiAgICB2YXIgZmxpcHBlZFBpeGVscyA9IHBpeGVscy5zbGljZSgwKTsKICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7ICsreCkgewogICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgKyt5KSB7CiAgICAgICAgZmxpcHBlZFBpeGVsc1t4ICogNCArIHkgKiB3aWR0aCAqIDRdID0gcGl4ZWxzW3ggKiA0ICsgKGhlaWdodCAtIHkpICogd2lkdGggKiA0XTsKICAgICAgICBmbGlwcGVkUGl4ZWxzW3ggKiA0ICsgMSArIHkgKiB3aWR0aCAqIDRdID0gcGl4ZWxzW3ggKiA0ICsgMSArIChoZWlnaHQgLSB5KSAqIHdpZHRoICogNF07CiAgICAgICAgZmxpcHBlZFBpeGVsc1t4ICogNCArIDIgKyB5ICogd2lkdGggKiA0XSA9IHBpeGVsc1t4ICogNCArIDIgKyAoaGVpZ2h0IC0geSkgKiB3aWR0aCAqIDRdOwogICAgICAgIGZsaXBwZWRQaXhlbHNbeCAqIDQgKyAzICsgeSAqIHdpZHRoICogNF0gPSBwaXhlbHNbeCAqIDQgKyAzICsgKGhlaWdodCAtIHkpICogd2lkdGggKiA0XTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZsaXBwZWRQaXhlbHM7CiAgfSwKCiAgLyoqCiAgICogRG93bmxvYWQgY2FwdHVyZSB0byBmaWxlLgogICAqLwogIHNhdmVDYXB0dXJlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNhbnZhcy50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHsKICAgICAgdmFyIGZpbGVOYW1lID0gJ3NjcmVlbnNob3QtJyArIGRvY3VtZW50LnRpdGxlLnRvTG93ZXJDYXNlKCkgKyAnLScgKyBEYXRlLm5vdygpICsgJy5wbmcnOwogICAgICB2YXIgbGlua0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgbGlua0VsLmhyZWYgPSB1cmw7CiAgICAgIGxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZU5hbWUpOwogICAgICBsaW5rRWwuaW5uZXJIVE1MID0gJ2Rvd25sb2FkaW5nLi4uJzsKICAgICAgbGlua0VsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGlua0VsKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgbGlua0VsLmNsaWNrKCk7CiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rRWwpOwogICAgICB9LCAxKTsKICAgIH0sICdpbWFnZS9wbmcnKTsKICB9Cn0pOwoKfSx7Ii4uLy4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uLy4uL2xpYi90aHJlZSI6MTU3fV0sODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgUlN0YXRzID0gX2RlcmVxXygnLi4vLi4vLi4vdmVuZG9yL3JTdGF0cycpOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi8uLi91dGlscycpOwpfZGVyZXFfKCcuLi8uLi8uLi92ZW5kb3IvclN0YXRzLmV4dHJhcycpOwpfZGVyZXFfKCcuLi8uLi9saWIvclN0YXRzQWZyYW1lJyk7Cgp2YXIgQUZyYW1lU3RhdHMgPSB3aW5kb3cuYWZyYW1lU3RhdHM7CnZhciBiaW5kID0gdXRpbHMuYmluZDsKdmFyIEhJRERFTl9DTEFTUyA9ICdhLWhpZGRlbic7CnZhciBUaHJlZVN0YXRzID0gd2luZG93LnRocmVlU3RhdHM7CgovKioKICogU3RhdHMgYXBwZW5kZWQgdG8gZG9jdW1lbnQuYm9keSBieSBSU3RhdHMuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnc3RhdHMnLCB7CiAgc2NoZW1hOiB7ZGVmYXVsdDogdHJ1ZX0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZSA9IHRoaXMuZWw7CgogICAgaWYgKHV0aWxzLmdldFVybFBhcmFtZXRlcignc3RhdHMnKSA9PT0gJ2ZhbHNlJykgeyByZXR1cm47IH0KCiAgICB0aGlzLnN0YXRzID0gY3JlYXRlU3RhdHMoc2NlbmUpOwogICAgdGhpcy5zdGF0c0VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJzLWJhc2UnKTsKCiAgICB0aGlzLmhpZGVCb3VuZCA9IGJpbmQodGhpcy5oaWRlLCB0aGlzKTsKICAgIHRoaXMuc2hvd0JvdW5kID0gYmluZCh0aGlzLnNob3csIHRoaXMpOwoKICAgIHNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoJ2VudGVyLXZyJywgdGhpcy5oaWRlQm91bmQpOwogICAgc2NlbmUuYWRkRXZlbnRMaXN0ZW5lcignZXhpdC12cicsIHRoaXMuc2hvd0JvdW5kKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5zdGF0cykgeyByZXR1cm47IH0KICAgIHJldHVybiAoIXRoaXMuZGF0YSkgPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdygpOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlci12cicsIHRoaXMuaGlkZUJvdW5kKTsKICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXhpdC12cicsIHRoaXMuc2hvd0JvdW5kKTsKICAgIGlmICghdGhpcy5zdGF0c0VsKSB7IHJldHVybjsgfSAgLy8gU2NlbmUgZGV0YWNoZWQuCiAgICB0aGlzLnN0YXRzRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnN0YXRzRWwpOwogIH0sCgogIHRpY2s6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzdGF0cyA9IHRoaXMuc3RhdHM7CgogICAgaWYgKCFzdGF0cykgeyByZXR1cm47IH0KCiAgICBzdGF0cygnckFGJykudGljaygpOwogICAgc3RhdHMoJ0ZQUycpLmZyYW1lKCk7CiAgICBzdGF0cygpLnVwZGF0ZSgpOwogIH0sCgogIGhpZGU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc3RhdHNFbC5jbGFzc0xpc3QuYWRkKEhJRERFTl9DTEFTUyk7CiAgfSwKCiAgc2hvdzogZnVuY3Rpb24gKCkgewogICAgdGhpcy5zdGF0c0VsLmNsYXNzTGlzdC5yZW1vdmUoSElEREVOX0NMQVNTKTsKICB9Cn0pOwoKZnVuY3Rpb24gY3JlYXRlU3RhdHMgKHNjZW5lKSB7CiAgdmFyIHRocmVlU3RhdHMgPSBuZXcgVGhyZWVTdGF0cyhzY2VuZS5yZW5kZXJlcik7CiAgdmFyIGFmcmFtZVN0YXRzID0gbmV3IEFGcmFtZVN0YXRzKHNjZW5lKTsKICB2YXIgcGx1Z2lucyA9IHNjZW5lLmlzTW9iaWxlID8gW10gOiBbdGhyZWVTdGF0cywgYWZyYW1lU3RhdHNdOwogIHJldHVybiBuZXcgUlN0YXRzKHsKICAgIGNzczogW10sICAvLyBPdXIgc3R5bGVzaGVldCBpcyBpbmplY3RlZCBmcm9tIGBzcmMvaW5kZXguanNgLgogICAgdmFsdWVzOiB7CiAgICAgIGZwczoge2NhcHRpb246ICdmcHMnLCBiZWxvdzogMzB9CiAgICB9LAogICAgZ3JvdXBzOiBbCiAgICAgIHtjYXB0aW9uOiAnRnJhbWVyYXRlJywgdmFsdWVzOiBbJ2ZwcycsICdyYWYnXX0KICAgIF0sCiAgICBwbHVnaW5zOiBwbHVnaW5zCiAgfSk7Cn0KCn0seyIuLi8uLi8uLi92ZW5kb3IvclN0YXRzIjoxOTMsIi4uLy4uLy4uL3ZlbmRvci9yU3RhdHMuZXh0cmFzIjoxOTIsIi4uLy4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uLy4uL2xpYi9yU3RhdHNBZnJhbWUiOjE1NiwiLi4vLi4vdXRpbHMiOjE4Mn1dLDg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uLy4uL2NvbnN0YW50cy8nKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJyk7CnZhciBiaW5kID0gdXRpbHMuYmluZDsKCnZhciBFTlRFUl9WUl9DTEFTUyA9ICdhLWVudGVyLXZyJzsKdmFyIEVOVEVSX0FSX0NMQVNTID0gJ2EtZW50ZXItYXInOwp2YXIgRU5URVJfVlJfQlROX0NMQVNTID0gJ2EtZW50ZXItdnItYnV0dG9uJzsKdmFyIEVOVEVSX0FSX0JUTl9DTEFTUyA9ICdhLWVudGVyLWFyLWJ1dHRvbic7CnZhciBISURERU5fQ0xBU1MgPSAnYS1oaWRkZW4nOwp2YXIgT1JJRU5UQVRJT05fTU9EQUxfQ0xBU1MgPSAnYS1vcmllbnRhdGlvbi1tb2RhbCc7CgovKioKICogVUkgZm9yIGVudGVyaW5nIFZSIG1vZGUuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgndnItbW9kZS11aScsIHsKICBkZXBlbmRlbmNpZXM6IFsnY2FudmFzJ10sCgogIHNjaGVtYTogewogICAgZW5hYmxlZDoge2RlZmF1bHQ6IHRydWV9LAogICAgZW50ZXJWUkJ1dHRvbjoge2RlZmF1bHQ6ICcnfSwKICAgIGVudGVyQVJCdXR0b246IHtkZWZhdWx0OiAnJ30KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWw7CgogICAgaWYgKHV0aWxzLmdldFVybFBhcmFtZXRlcigndWknKSA9PT0gJ2ZhbHNlJykgeyByZXR1cm47IH0KCiAgICB0aGlzLmluc2lkZUxvYWRlciA9IGZhbHNlOwogICAgdGhpcy5lbnRlclZSRWwgPSBudWxsOwogICAgdGhpcy5lbnRlckFSRWwgPSBudWxsOwogICAgdGhpcy5vcmllbnRhdGlvbk1vZGFsRWwgPSBudWxsOwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwoKICAgIC8vIEhpZGUvc2hvdyBWUiBVSSB3aGVuIGVudGVyaW5nL2V4aXRpbmcgVlIgbW9kZS4KICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXItdnInLCB0aGlzLnVwZGF0ZUVudGVySW50ZXJmYWNlcyk7CiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2V4aXQtdnInLCB0aGlzLnVwZGF0ZUVudGVySW50ZXJmYWNlcyk7CiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZS12ci1kZXZpY2VzJywgdGhpcy51cGRhdGVFbnRlckludGVyZmFjZXMpOwoKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmIChldmVudC5kYXRhLnR5cGUgPT09ICdsb2FkZXJSZWFkeScpIHsKICAgICAgICBzZWxmLmluc2lkZUxvYWRlciA9IHRydWU7CiAgICAgICAgc2VsZi5yZW1vdmUoKTsKICAgICAgfQogICAgfSk7CgogICAgLy8gTW9kYWwgdGhhdCB0ZWxscyB0aGUgdXNlciB0byBjaGFuZ2Ugb3JpZW50YXRpb24gaWYgaW4gcG9ydHJhaXQuCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLnRvZ2dsZU9yaWVudGF0aW9uTW9kYWxJZk5lZWRlZCk7CiAgfSwKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25FbnRlclZSQnV0dG9uQ2xpY2sgPSBiaW5kKHRoaXMub25FbnRlclZSQnV0dG9uQ2xpY2ssIHRoaXMpOwogICAgdGhpcy5vbkVudGVyQVJCdXR0b25DbGljayA9IGJpbmQodGhpcy5vbkVudGVyQVJCdXR0b25DbGljaywgdGhpcyk7CiAgICB0aGlzLm9uTW9kYWxDbGljayA9IGJpbmQodGhpcy5vbk1vZGFsQ2xpY2ssIHRoaXMpOwogICAgdGhpcy50b2dnbGVPcmllbnRhdGlvbk1vZGFsSWZOZWVkZWQgPSBiaW5kKHRoaXMudG9nZ2xlT3JpZW50YXRpb25Nb2RhbElmTmVlZGVkLCB0aGlzKTsKICAgIHRoaXMudXBkYXRlRW50ZXJJbnRlcmZhY2VzID0gYmluZCh0aGlzLnVwZGF0ZUVudGVySW50ZXJmYWNlcywgdGhpcyk7CiAgfSwKCiAgLyoqCiAgICogRXhpdCBWUiB3aGVuIG1vZGFsIGNsaWNrZWQuCiAgICovCiAgb25Nb2RhbENsaWNrOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLmV4aXRWUigpOwogIH0sCgogIC8qKgogICAqIEVudGVyIFZSIHdoZW4gY2xpY2tlZC4KICAgKi8KICBvbkVudGVyVlJCdXR0b25DbGljazogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5lbnRlclZSKCk7CiAgfSwKCiAgLyoqCiAgICogRW50ZXIgQVIgd2hlbiBjbGlja2VkLgogICAqLwogIG9uRW50ZXJBUkJ1dHRvbkNsaWNrOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLmVudGVyQVIoKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsOwoKICAgIGlmICghZGF0YS5lbmFibGVkIHx8IHRoaXMuaW5zaWRlTG9hZGVyIHx8IHV0aWxzLmdldFVybFBhcmFtZXRlcigndWknKSA9PT0gJ2ZhbHNlJykgewogICAgICByZXR1cm4gdGhpcy5yZW1vdmUoKTsKICAgIH0KCiAgICBpZiAodGhpcy5lbnRlclZSRWwgfHwgdGhpcy5lbnRlckFSRWwgfHwgdGhpcy5vcmllbnRhdGlvbk1vZGFsRWwpIHsgcmV0dXJuOyB9CgogICAgLy8gQWRkIFVJIGlmIGVuYWJsZWQgYW5kIG5vdCBhbHJlYWR5IHByZXNlbnQuCiAgICBpZiAoZGF0YS5lbnRlclZSQnV0dG9uKSB7CiAgICAgIC8vIEN1c3RvbSBidXR0b24uCiAgICAgIHRoaXMuZW50ZXJWUkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkYXRhLmVudGVyVlJCdXR0b24pOwogICAgICB0aGlzLmVudGVyVlJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25FbnRlclZSQnV0dG9uQ2xpY2spOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5lbnRlclZSRWwgPSBjcmVhdGVFbnRlclZSQnV0dG9uKHRoaXMub25FbnRlclZSQnV0dG9uQ2xpY2spOwogICAgICBzY2VuZUVsLmFwcGVuZENoaWxkKHRoaXMuZW50ZXJWUkVsKTsKICAgIH0KICAgIGlmIChkYXRhLmVudGVyQVJCdXR0b24pIHsKICAgICAgLy8gQ3VzdG9tIGJ1dHRvbi4KICAgICAgdGhpcy5lbnRlckFSRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRhdGEuZW50ZXJBUkJ1dHRvbik7CiAgICAgIHRoaXMuZW50ZXJBUkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkVudGVyQVJCdXR0b25DbGljayk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmVudGVyQVJFbCA9IGNyZWF0ZUVudGVyQVJCdXR0b24odGhpcy5vbkVudGVyQVJCdXR0b25DbGljayk7CiAgICAgIHNjZW5lRWwuYXBwZW5kQ2hpbGQodGhpcy5lbnRlckFSRWwpOwogICAgfQoKICAgIHRoaXMub3JpZW50YXRpb25Nb2RhbEVsID0gY3JlYXRlT3JpZW50YXRpb25Nb2RhbCh0aGlzLm9uTW9kYWxDbGljayk7CiAgICBzY2VuZUVsLmFwcGVuZENoaWxkKHRoaXMub3JpZW50YXRpb25Nb2RhbEVsKTsKCiAgICB0aGlzLnVwZGF0ZUVudGVySW50ZXJmYWNlcygpOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgW3RoaXMuZW50ZXJWUkVsLCB0aGlzLmVudGVyQVJFbCwgdGhpcy5vcmllbnRhdGlvbk1vZGFsRWxdLmZvckVhY2goZnVuY3Rpb24gKHVpRWxlbWVudCkgewogICAgICBpZiAodWlFbGVtZW50ICYmIHVpRWxlbWVudC5wYXJlbnROb2RlKSB7CiAgICAgICAgdWlFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodWlFbGVtZW50KTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgdXBkYXRlRW50ZXJJbnRlcmZhY2VzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnRvZ2dsZUVudGVyVlJCdXR0b25JZk5lZWRlZCgpOwogICAgdGhpcy50b2dnbGVFbnRlckFSQnV0dG9uSWZOZWVkZWQoKTsKICAgIHRoaXMudG9nZ2xlT3JpZW50YXRpb25Nb2RhbElmTmVlZGVkKCk7CiAgfSwKCiAgdG9nZ2xlRW50ZXJWUkJ1dHRvbklmTmVlZGVkOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWw7CiAgICBpZiAoIXRoaXMuZW50ZXJWUkVsKSB7IHJldHVybjsgfQogICAgaWYgKHNjZW5lRWwuaXMoJ3ZyLW1vZGUnKSkgewogICAgICB0aGlzLmVudGVyVlJFbC5jbGFzc0xpc3QuYWRkKEhJRERFTl9DTEFTUyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmVudGVyVlJFbC5jbGFzc0xpc3QucmVtb3ZlKEhJRERFTl9DTEFTUyk7CiAgICB9CiAgfSwKCiAgdG9nZ2xlRW50ZXJBUkJ1dHRvbklmTmVlZGVkOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWw7CiAgICBpZiAoIXRoaXMuZW50ZXJBUkVsKSB7IHJldHVybjsgfQogICAgLy8gSGlkZSB0aGUgYnV0dG9uIHdoaWxlIGluIGEgc2Vzc2lvbiwgb3IgaWYgQVIgaXMgbm90IHN1cHBvcnRlZC4KICAgIGlmIChzY2VuZUVsLmlzKCd2ci1tb2RlJykgfHwgIXV0aWxzLmRldmljZS5jaGVja0FSU3VwcG9ydCgpKSB7CiAgICAgIHRoaXMuZW50ZXJBUkVsLmNsYXNzTGlzdC5hZGQoSElEREVOX0NMQVNTKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZW50ZXJBUkVsLmNsYXNzTGlzdC5yZW1vdmUoSElEREVOX0NMQVNTKTsKICAgIH0KICB9LAoKICB0b2dnbGVPcmllbnRhdGlvbk1vZGFsSWZOZWVkZWQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbDsKICAgIHZhciBvcmllbnRhdGlvbk1vZGFsRWwgPSB0aGlzLm9yaWVudGF0aW9uTW9kYWxFbDsKICAgIGlmICghb3JpZW50YXRpb25Nb2RhbEVsIHx8ICFzY2VuZUVsLmlzTW9iaWxlKSB7IHJldHVybjsgfQogICAgaWYgKCF1dGlscy5kZXZpY2UuaXNMYW5kc2NhcGUoKSAmJiBzY2VuZUVsLmlzKCd2ci1tb2RlJykpIHsKICAgICAgLy8gU2hvdyBpZiBpbiBWUiBtb2RlIG9uIHBvcnRyYWl0LgogICAgICBvcmllbnRhdGlvbk1vZGFsRWwuY2xhc3NMaXN0LnJlbW92ZShISURERU5fQ0xBU1MpOwogICAgfSBlbHNlIHsKICAgICAgb3JpZW50YXRpb25Nb2RhbEVsLmNsYXNzTGlzdC5hZGQoSElEREVOX0NMQVNTKTsKICAgIH0KICB9Cn0pOwoKLyoqCiAqIENyZWF0ZSBhIGJ1dHRvbiB0aGF0IHdoZW4gY2xpY2tlZCB3aWxsIGVudGVyIGludG8gc3RlcmVvLXJlbmRlcmluZyBtb2RlIGZvciBWUi4KICoKICogU3RydWN0dXJlOiA8ZGl2PjxidXR0b24+PC9kaXY+CiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uQ2xpY2sgLSBjbGljayBldmVudCBoYW5kbGVyCiAqIEByZXR1cm5zIHtFbGVtZW50fSBXcmFwcGVyIDxkaXY+LgogKi8KZnVuY3Rpb24gY3JlYXRlRW50ZXJWUkJ1dHRvbiAob25DbGljaykgewogIHZhciB2ckJ1dHRvbjsKICB2YXIgd3JhcHBlcjsKCiAgLy8gQ3JlYXRlIGVsZW1lbnRzLgogIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoRU5URVJfVlJfQ0xBU1MpOwogIHdyYXBwZXIuc2V0QXR0cmlidXRlKGNvbnN0YW50cy5BRlJBTUVfSU5KRUNURUQsICcnKTsKICB2ckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIHZyQnV0dG9uLmNsYXNzTmFtZSA9IEVOVEVSX1ZSX0JUTl9DTEFTUzsKICB2ckJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywKICAgICdFbnRlciBWUiBtb2RlIHdpdGggYSBoZWFkc2V0IG9yIGZ1bGxzY3JlZW4gbW9kZSBvbiBhIGRlc2t0b3AuICcgKwogICAgJ1Zpc2l0IGh0dHBzOi8vd2VidnIucm9ja3Mgb3IgaHR0cHM6Ly93ZWJ2ci5pbmZvIGZvciBtb3JlIGluZm9ybWF0aW9uLicpOwogIHZyQnV0dG9uLnNldEF0dHJpYnV0ZShjb25zdGFudHMuQUZSQU1FX0lOSkVDVEVELCAnJyk7CiAgaWYgKHV0aWxzLmRldmljZS5pc01vYmlsZSgpKSB7IGFwcGx5U3RpY2t5SG92ZXJGaXgodnJCdXR0b24pOyB9CiAgLy8gSW5zZXJ0IGVsZW1lbnRzLgogIHdyYXBwZXIuYXBwZW5kQ2hpbGQodnJCdXR0b24pOwogIHZyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkgewogICAgb25DbGljaygpOwogICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogIH0pOwogIHJldHVybiB3cmFwcGVyOwp9CgovKioKICogQ3JlYXRlIGEgYnV0dG9uIHRoYXQgd2hlbiBjbGlja2VkIHdpbGwgZW50ZXIgaW50byBBUiBtb2RlCiAqCiAqIFN0cnVjdHVyZTogPGRpdj48YnV0dG9uPjwvZGl2PgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbkNsaWNrIC0gY2xpY2sgZXZlbnQgaGFuZGxlcgogKiBAcmV0dXJucyB7RWxlbWVudH0gV3JhcHBlciA8ZGl2Pi4KICovCmZ1bmN0aW9uIGNyZWF0ZUVudGVyQVJCdXR0b24gKG9uQ2xpY2spIHsKICB2YXIgYXJCdXR0b247CiAgdmFyIHdyYXBwZXI7CgogIC8vIENyZWF0ZSBlbGVtZW50cy4KICB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKEVOVEVSX0FSX0NMQVNTKTsKICB3cmFwcGVyLnNldEF0dHJpYnV0ZShjb25zdGFudHMuQUZSQU1FX0lOSkVDVEVELCAnJyk7CiAgYXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICBhckJ1dHRvbi5jbGFzc05hbWUgPSBFTlRFUl9BUl9CVE5fQ0xBU1M7CiAgYXJCdXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsCiAgICAnRW50ZXIgQVIgbW9kZSB3aXRoIGEgaGVhZHNldCBvciBoYW5kaGVsZCBkZXZpY2UuICcgKwogICAgJ1Zpc2l0IGh0dHBzOi8vd2VidnIucm9ja3Mgb3IgaHR0cHM6Ly93ZWJ2ci5pbmZvIGZvciBtb3JlIGluZm9ybWF0aW9uLicpOwogIGFyQnV0dG9uLnNldEF0dHJpYnV0ZShjb25zdGFudHMuQUZSQU1FX0lOSkVDVEVELCAnJyk7CiAgaWYgKHV0aWxzLmRldmljZS5pc01vYmlsZSgpKSB7IGFwcGx5U3RpY2t5SG92ZXJGaXgoYXJCdXR0b24pOyB9CiAgLy8gSW5zZXJ0IGVsZW1lbnRzLgogIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYXJCdXR0b24pOwogIGFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkgewogICAgb25DbGljaygpOwogICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogIH0pOwogIHJldHVybiB3cmFwcGVyOwp9CgovKioKICogQ3JlYXRlcyBhIG1vZGFsIGRpYWxvZyB0byByZXF1ZXN0IHRoZSB1c2VyIHRvIHN3aXRjaCB0byBsYW5kc2NhcGUgb3JpZW50YXRpb24uCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uQ2xpY2sgLSBjbGljayBldmVudCBoYW5kbGVyCiAqIEByZXR1cm5zIHtFbGVtZW50fSBXcmFwcGVyIDxkaXY+LgogKi8KZnVuY3Rpb24gY3JlYXRlT3JpZW50YXRpb25Nb2RhbCAob25DbGljaykgewogIHZhciBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIG1vZGFsLmNsYXNzTmFtZSA9IE9SSUVOVEFUSU9OX01PREFMX0NMQVNTOwogIG1vZGFsLmNsYXNzTGlzdC5hZGQoSElEREVOX0NMQVNTKTsKICBtb2RhbC5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwoKICB2YXIgZXhpdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGV4aXQuc2V0QXR0cmlidXRlKGNvbnN0YW50cy5BRlJBTUVfSU5KRUNURUQsICcnKTsKICBleGl0LmlubmVySFRNTCA9ICdFeGl0IFZSJzsKCiAgLy8gRXhpdCBWUiBvbiBjbG9zZS4KICBleGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7CgogIG1vZGFsLmFwcGVuZENoaWxkKGV4aXQpOwoKICByZXR1cm4gbW9kYWw7Cn0KCi8qKgogKiBDU1MgaG92ZXIgc3RhdGUgaXMgc3RpY2t5IGluIGlPUyAoYXMgaW4gMTIvMTgvMjAxOSkKICogVGhleSBhcmUgbm90IHJlbW92ZWQgb24gbW91c2VsZWF2ZSBhbmQgdGhpcyBmdW5jdGlvbiBhcHBsaWVzIGEgY2xhc3MKICogdG8gcmVzZXRzIHRoZSBzdHlsZS4KICoKICogQHBhcmFtIHtmdW5jdGlvbn0gYnV0dG9uRWwgLSBCdXR0b24gZWxlbWVudAogKi8KZnVuY3Rpb24gYXBwbHlTdGlja3lIb3ZlckZpeCAoYnV0dG9uRWwpIHsKICBidXR0b25FbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKCkgewogICAgYnV0dG9uRWwuY2xhc3NMaXN0LnJlbW92ZSgncmVzZXRob3ZlcicpOwogIH0pOwogIGJ1dHRvbkVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgZnVuY3Rpb24gKCkgewogICAgYnV0dG9uRWwuY2xhc3NMaXN0LmFkZCgncmVzZXRob3ZlcicpOwogIH0pOwp9Cgp9LHsiLi4vLi4vY29uc3RhbnRzLyI6MTAxLCIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi8uLi91dGlscy8iOjE4Mn1dLDkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50Jyk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gY29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50OwoKLyoqCiAqIFNoYWRvdyBjb21wb25lbnQuCiAqCiAqIFdoZW4gYXBwbGllZCB0byBhbiBlbnRpdHksIHRoYXQgZW50aXR5J3MgZ2VvbWV0cnkgYW5kIGFueSBkZXNjZW5kYW50cyB3aWxsIGNhc3Qgb3IgcmVjZWl2ZQogKiBzaGFkb3dzIGFzIHNwZWNpZmllZCBieSB0aGUgYGNhc3RgIGFuZCBgcmVjZWl2ZWAgcHJvcGVydGllcy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCdzaGFkb3cnLCB7CiAgc2NoZW1hOiB7CiAgICBjYXN0OiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICByZWNlaXZlOiB7ZGVmYXVsdDogdHJ1ZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm9uTWVzaENoYW5nZWQgPSBiaW5kKHRoaXMudXBkYXRlLCB0aGlzKTsKICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignb2JqZWN0M2RzZXQnLCB0aGlzLm9uTWVzaENoYW5nZWQpOwogICAgdGhpcy5zeXN0ZW0uc2V0U2hhZG93TWFwRW5hYmxlZCh0cnVlKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdGhpcy51cGRhdGVEZXNjZW5kYW50cyhkYXRhLmNhc3QsIGRhdGEucmVjZWl2ZSk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2JqZWN0M2RzZXQnLCB0aGlzLm9uTWVzaENoYW5nZWQpOwogICAgdGhpcy51cGRhdGVEZXNjZW5kYW50cyhmYWxzZSwgZmFsc2UpOwogIH0sCgogIHVwZGF0ZURlc2NlbmRhbnRzOiBmdW5jdGlvbiAoY2FzdCwgcmVjZWl2ZSkgewogICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7CiAgICB0aGlzLmVsLm9iamVjdDNELnRyYXZlcnNlKGZ1bmN0aW9uIChub2RlKSB7CiAgICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSkgeyByZXR1cm47IH0KCiAgICAgIG5vZGUuY2FzdFNoYWRvdyA9IGNhc3Q7CiAgICAgIG5vZGUucmVjZWl2ZVNoYWRvdyA9IHJlY2VpdmU7CgogICAgICAvLyBJZiBzY2VuZSBoYXMgYWxyZWFkeSByZW5kZXJlZCwgbWF0ZXJpYWxzIG11c3QgYmUgdXBkYXRlZC4KICAgICAgaWYgKHNjZW5lRWwuaGFzTG9hZGVkICYmIG5vZGUubWF0ZXJpYWwpIHsKICAgICAgICB2YXIgbWF0ZXJpYWxzID0gQXJyYXkuaXNBcnJheShub2RlLm1hdGVyaWFsKSA/IG5vZGUubWF0ZXJpYWwgOiBbbm9kZS5tYXRlcmlhbF07CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRlcmlhbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIG1hdGVyaWFsc1tpXS5uZWVkc1VwZGF0ZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscy9iaW5kIjoxNzZ9XSw5MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3RlckNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CnZhciBkZWJ1ZyA9IF9kZXJlcV8oJy4uL3V0aWxzL2RlYnVnJyk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIHdhcm4gPSBkZWJ1ZygnY29tcG9uZW50czpzb3VuZDp3YXJuJyk7CgovKioKICogU291bmQgY29tcG9uZW50LgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3NvdW5kJywgewogIHNjaGVtYTogewogICAgYXV0b3BsYXk6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICBkaXN0YW5jZU1vZGVsOiB7ZGVmYXVsdDogJ2ludmVyc2UnLCBvbmVPZjogWydsaW5lYXInLCAnaW52ZXJzZScsICdleHBvbmVudGlhbCddfSwKICAgIGxvb3A6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICBtYXhEaXN0YW5jZToge2RlZmF1bHQ6IDEwMDAwfSwKICAgIG9uOiB7ZGVmYXVsdDogJyd9LAogICAgcG9vbFNpemU6IHtkZWZhdWx0OiAxfSwKICAgIHBvc2l0aW9uYWw6IHtkZWZhdWx0OiB0cnVlfSwKICAgIHJlZkRpc3RhbmNlOiB7ZGVmYXVsdDogMX0sCiAgICByb2xsb2ZmRmFjdG9yOiB7ZGVmYXVsdDogMX0sCiAgICBzcmM6IHt0eXBlOiAnYXVkaW8nfSwKICAgIHZvbHVtZToge2RlZmF1bHQ6IDF9CiAgfSwKCiAgbXVsdGlwbGU6IHRydWUsCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICB0aGlzLmxpc3RlbmVyID0gbnVsbDsKICAgIHRoaXMuYXVkaW9Mb2FkZXIgPSBuZXcgVEhSRUUuQXVkaW9Mb2FkZXIoKTsKICAgIHRoaXMucG9vbCA9IG5ldyBUSFJFRS5Hcm91cCgpOwogICAgdGhpcy5sb2FkZWQgPSBmYWxzZTsKICAgIHRoaXMubXVzdFBsYXkgPSBmYWxzZTsKCiAgICAvLyBEb24ndCBwYXNzIGV2dCBiZWNhdXNlIHBsYXlTb3VuZCB0YWtlcyBhIGZ1bmN0aW9uIGFzIHBhcmFtZXRlci4KICAgIHRoaXMucGxheVNvdW5kQm91bmQgPSBmdW5jdGlvbiAoKSB7IHNlbGYucGxheVNvdW5kKCk7IH07CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAob2xkRGF0YSkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgaTsKICAgIHZhciBzb3VuZDsKICAgIHZhciBzcmNDaGFuZ2VkID0gZGF0YS5zcmMgIT09IG9sZERhdGEuc3JjOwoKICAgIC8vIENyZWF0ZSBuZXcgc291bmQgaWYgbm90IHlldCBjcmVhdGVkIG9yIGNoYW5naW5nIGBzcmNgLgogICAgaWYgKHNyY0NoYW5nZWQpIHsKICAgICAgaWYgKCFkYXRhLnNyYykgeyByZXR1cm47IH0KICAgICAgdGhpcy5zZXR1cFNvdW5kKCk7CiAgICB9CgogICAgZm9yIChpID0gMDsgaSA8IHRoaXMucG9vbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBzb3VuZCA9IHRoaXMucG9vbC5jaGlsZHJlbltpXTsKICAgICAgaWYgKGRhdGEucG9zaXRpb25hbCkgewogICAgICAgIHNvdW5kLnNldERpc3RhbmNlTW9kZWwoZGF0YS5kaXN0YW5jZU1vZGVsKTsKICAgICAgICBzb3VuZC5zZXRNYXhEaXN0YW5jZShkYXRhLm1heERpc3RhbmNlKTsKICAgICAgICBzb3VuZC5zZXRSZWZEaXN0YW5jZShkYXRhLnJlZkRpc3RhbmNlKTsKICAgICAgICBzb3VuZC5zZXRSb2xsb2ZmRmFjdG9yKGRhdGEucm9sbG9mZkZhY3Rvcik7CiAgICAgIH0KICAgICAgc291bmQuc2V0TG9vcChkYXRhLmxvb3ApOwogICAgICBzb3VuZC5zZXRWb2x1bWUoZGF0YS52b2x1bWUpOwogICAgICBzb3VuZC5pc1BhdXNlZCA9IGZhbHNlOwogICAgfQoKICAgIGlmIChkYXRhLm9uICE9PSBvbGREYXRhLm9uKSB7CiAgICAgIHRoaXMudXBkYXRlRXZlbnRMaXN0ZW5lcihvbGREYXRhLm9uKTsKICAgIH0KCiAgICAvLyBBbGwgc291bmQgdmFsdWVzIHNldC4gTG9hZCBpbiBgc3JjYC4KICAgIGlmIChzcmNDaGFuZ2VkKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7CiAgICAgIHRoaXMuYXVkaW9Mb2FkZXIubG9hZChkYXRhLnNyYywgZnVuY3Rpb24gKGJ1ZmZlcikgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxmLnBvb2wuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHNvdW5kID0gc2VsZi5wb29sLmNoaWxkcmVuW2ldOwogICAgICAgICAgc291bmQuc2V0QnVmZmVyKGJ1ZmZlcik7CiAgICAgICAgfQogICAgICAgIHNlbGYubG9hZGVkID0gdHJ1ZTsKCiAgICAgICAgLy8gUmVtb3ZlIHRoaXMga2V5IGZyb20gY2FjaGUsIG90aGVyd2lzZSB3ZSBjYW4ndCBwbGF5IGl0IGFnYWluCiAgICAgICAgVEhSRUUuQ2FjaGUucmVtb3ZlKGRhdGEuc3JjKTsKICAgICAgICBpZiAoc2VsZi5kYXRhLmF1dG9wbGF5IHx8IHNlbGYubXVzdFBsYXkpIHsgc2VsZi5wbGF5U291bmQoKTsgfQogICAgICAgIHNlbGYuZWwuZW1pdCgnc291bmQtbG9hZGVkJywgc2VsZi5ldnREZXRhaWwsIGZhbHNlKTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc3RvcFNvdW5kKCk7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5kYXRhLmF1dG9wbGF5KSB7IHRoaXMucGxheVNvdW5kKCk7IH0KICAgIHRoaXMudXBkYXRlRXZlbnRMaXN0ZW5lcigpOwogIH0sCgogIHJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGk7CiAgICB2YXIgc291bmQ7CgogICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCk7CgogICAgaWYgKHRoaXMuZWwuZ2V0T2JqZWN0M0QodGhpcy5hdHRyTmFtZSkpIHsKICAgICAgdGhpcy5lbC5yZW1vdmVPYmplY3QzRCh0aGlzLmF0dHJOYW1lKTsKICAgIH0KCiAgICB0cnkgewogICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5wb29sLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgc291bmQgPSB0aGlzLnBvb2wuY2hpbGRyZW5baV07CiAgICAgICAgc291bmQuZGlzY29ubmVjdCgpOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIC8vIGRpc2Nvbm5lY3QoKSB3aWxsIHRocm93IGlmIGl0IHdhcyBuZXZlciBjb25uZWN0ZWQgaW5pdGlhbGx5LgogICAgICB3YXJuKCdBdWRpbyBzb3VyY2Ugbm90IHByb3Blcmx5IGRpc2Nvbm5lY3RlZCcpOwogICAgfQogIH0sCgogIC8qKgogICogIFVwZGF0ZSBsaXN0ZW5lciBhdHRhY2hlZCB0byB0aGUgdXNlciBkZWZpbmVkIG9uIGV2ZW50LgogICovCiAgdXBkYXRlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKG9sZEV2dCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIGlmIChvbGRFdnQpIHsgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihvbGRFdnQsIHRoaXMucGxheVNvdW5kQm91bmQpOyB9CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZGF0YS5vbiwgdGhpcy5wbGF5U291bmRCb3VuZCk7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZGF0YS5vbiwgdGhpcy5wbGF5U291bmRCb3VuZCk7CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlcyBjdXJyZW50IHNvdW5kIG9iamVjdCwgY3JlYXRlcyBuZXcgc291bmQgb2JqZWN0LCBhZGRzIHRvIGVudGl0eS4KICAgKgogICAqIEByZXR1cm5zIHtvYmplY3R9IHNvdW5kCiAgICovCiAgc2V0dXBTb3VuZDogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBpOwogICAgdmFyIHNjZW5lRWwgPSBlbC5zY2VuZUVsOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHNvdW5kOwoKICAgIGlmICh0aGlzLnBvb2wuY2hpbGRyZW4ubGVuZ3RoID4gMCkgewogICAgICB0aGlzLnN0b3BTb3VuZCgpOwogICAgICBlbC5yZW1vdmVPYmplY3QzRCgnc291bmQnKTsKICAgIH0KCiAgICAvLyBPbmx5IHdhbnQgb25lIEF1ZGlvTGlzdGVuZXIuIENhY2hlIGl0IG9uIHRoZSBzY2VuZS4KICAgIHZhciBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXIgPSBzY2VuZUVsLmF1ZGlvTGlzdGVuZXIgfHwgbmV3IFRIUkVFLkF1ZGlvTGlzdGVuZXIoKTsKICAgIHNjZW5lRWwuYXVkaW9MaXN0ZW5lciA9IGxpc3RlbmVyOwoKICAgIGlmIChzY2VuZUVsLmNhbWVyYSkgewogICAgICBzY2VuZUVsLmNhbWVyYS5hZGQobGlzdGVuZXIpOwogICAgfQoKICAgIC8vIFdhaXQgZm9yIGNhbWVyYSBpZiBuZWNlc3NhcnkuCiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbWVyYS1zZXQtYWN0aXZlJywgZnVuY3Rpb24gKGV2dCkgewogICAgICBldnQuZGV0YWlsLmNhbWVyYUVsLmdldE9iamVjdDNEKCdjYW1lcmEnKS5hZGQobGlzdGVuZXIpOwogICAgfSk7CgogICAgLy8gQ3JlYXRlIFtwb29sU2l6ZV0gYXVkaW8gaW5zdGFuY2VzIGFuZCBhdHRhY2ggdGhlbSB0byBwb29sCiAgICB0aGlzLnBvb2wgPSBuZXcgVEhSRUUuR3JvdXAoKTsKICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRhdGEucG9vbFNpemU7IGkrKykgewogICAgICBzb3VuZCA9IHRoaXMuZGF0YS5wb3NpdGlvbmFsCiAgICAgICAgPyBuZXcgVEhSRUUuUG9zaXRpb25hbEF1ZGlvKGxpc3RlbmVyKQogICAgICAgIDogbmV3IFRIUkVFLkF1ZGlvKGxpc3RlbmVyKTsKICAgICAgdGhpcy5wb29sLmFkZChzb3VuZCk7CiAgICB9CiAgICBlbC5zZXRPYmplY3QzRCh0aGlzLmF0dHJOYW1lLCB0aGlzLnBvb2wpOwoKICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnBvb2wuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgc291bmQgPSB0aGlzLnBvb2wuY2hpbGRyZW5baV07CiAgICAgIHNvdW5kLm9uRW5kZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTsKICAgICAgICBzZWxmLmVsLmVtaXQoJ3NvdW5kLWVuZGVkJywgc2VsZi5ldnREZXRhaWwsIGZhbHNlKTsKICAgICAgfTsKICAgIH0KICB9LAoKICAvKioKICAgKiBQYXVzZSBhbGwgdGhlIHNvdW5kcyBpbiB0aGUgcG9vbC4KICAgKi8KICBwYXVzZVNvdW5kOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaTsKICAgIHZhciBzb3VuZDsKCiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlOwogICAgZm9yIChpID0gMDsgaSA8IHRoaXMucG9vbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBzb3VuZCA9IHRoaXMucG9vbC5jaGlsZHJlbltpXTsKICAgICAgaWYgKCFzb3VuZC5zb3VyY2UgfHwgIXNvdW5kLnNvdXJjZS5idWZmZXIgfHwgIXNvdW5kLmlzUGxheWluZyB8fCBzb3VuZC5pc1BhdXNlZCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHNvdW5kLmlzUGF1c2VkID0gdHJ1ZTsKICAgICAgc291bmQucGF1c2UoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBMb29rIGZvciBhbiB1bnVzZWQgc291bmQgaW4gdGhlIHBvb2wgYW5kIHBsYXkgaXQgaWYgZm91bmQuCiAgICovCiAgcGxheVNvdW5kOiBmdW5jdGlvbiAocHJvY2Vzc1NvdW5kKSB7CiAgICB2YXIgZm91bmQ7CiAgICB2YXIgaTsKICAgIHZhciBzb3VuZDsKCiAgICBpZiAoIXRoaXMubG9hZGVkKSB7CiAgICAgIHdhcm4oJ1NvdW5kIG5vdCBsb2FkZWQgeWV0LiBJdCB3aWxsIGJlIHBsYXllZCBvbmNlIGl0IGZpbmlzaGVkIGxvYWRpbmcnKTsKICAgICAgdGhpcy5tdXN0UGxheSA9IHRydWU7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBmb3VuZCA9IGZhbHNlOwogICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlOwogICAgZm9yIChpID0gMDsgaSA8IHRoaXMucG9vbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBzb3VuZCA9IHRoaXMucG9vbC5jaGlsZHJlbltpXTsKICAgICAgaWYgKCFzb3VuZC5pc1BsYXlpbmcgJiYgc291bmQuYnVmZmVyICYmICFmb3VuZCkgewogICAgICAgIGlmIChwcm9jZXNzU291bmQpIHsgcHJvY2Vzc1NvdW5kKHNvdW5kKTsgfQogICAgICAgIHNvdW5kLnBsYXkoKTsKICAgICAgICBzb3VuZC5pc1BhdXNlZCA9IGZhbHNlOwogICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQoKICAgIGlmICghZm91bmQpIHsKICAgICAgd2FybignQWxsIHRoZSBzb3VuZHMgYXJlIHBsYXlpbmcuIElmIHlvdSBuZWVkIHRvIHBsYXkgbW9yZSBzb3VuZHMgc2ltdWx0YW5lb3VzbHkgJyArCiAgICAgICAgICAgJ2NvbnNpZGVyIGluY3JlYXNpbmcgdGhlIHNpemUgb2YgcG9vbCB3aXRoIHRoZSBgcG9vbFNpemVgIGF0dHJpYnV0ZS4nLCB0aGlzLmVsKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHRoaXMubXVzdFBsYXkgPSBmYWxzZTsKICB9LAoKICAvKioKICAgKiBTdG9wIGFsbCB0aGUgc291bmRzIGluIHRoZSBwb29sLgogICAqLwogIHN0b3BTb3VuZDogZnVuY3Rpb24gKCkgewogICAgdmFyIGk7CiAgICB2YXIgc291bmQ7CiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlOwogICAgZm9yIChpID0gMDsgaSA8IHRoaXMucG9vbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBzb3VuZCA9IHRoaXMucG9vbC5jaGlsZHJlbltpXTsKICAgICAgaWYgKCFzb3VuZC5zb3VyY2UgfHwgIXNvdW5kLnNvdXJjZS5idWZmZXIpIHsgcmV0dXJuOyB9CiAgICAgIHNvdW5kLnN0b3AoKTsKICAgIH0KICB9Cn0pOwoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscy9kZWJ1ZyI6MTc4fV0sOTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY3JlYXRlVGV4dEdlb21ldHJ5ID0gX2RlcmVxXygndGhyZWUtYm1mb250LXRleHQnKTsKdmFyIGxvYWRCTUZvbnQgPSBfZGVyZXFfKCdsb2FkLWJtZm9udCcpOwoKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGNvcmVTaGFkZXIgPSBfZGVyZXFfKCcuLi9jb3JlL3NoYWRlcicpOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7Cgp2YXIgZXJyb3IgPSB1dGlscy5kZWJ1ZygnY29tcG9uZW50czp0ZXh0OmVycm9yJyk7CnZhciBzaGFkZXJzID0gY29yZVNoYWRlci5zaGFkZXJzOwp2YXIgd2FybiA9IHV0aWxzLmRlYnVnKCdjb21wb25lbnRzOnRleHQ6d2FybicpOwoKLy8gMSB0byBtYXRjaCBvdGhlciBBLUZyYW1lIGRlZmF1bHQgd2lkdGhzLgp2YXIgREVGQVVMVF9XSURUSCA9IDE7CgovLyBAYnJ5aWsgc2V0IGFuaXNvdHJvcHkgdG8gMTYuIEltcHJvdmVzIGxvb2sgb2YgbGFyZ2UgYW1vdW50cyBvZiB0ZXh0IHdoZW4gdmlld2VkIGZyb20gYW5nbGUuCnZhciBNQVhfQU5JU09UUk9QWSA9IDE2OwoKdmFyIEZPTlRfQkFTRV9VUkwgPSAnaHR0cHM6Ly9jZG4uYWZyYW1lLmlvL2ZvbnRzLyc7CnZhciBGT05UUyA9IHsKICBhaWxlcm9uc2VtaWJvbGQ6IEZPTlRfQkFTRV9VUkwgKyAnQWlsZXJvbi1TZW1pYm9sZC5mbnQnLAogIGRlamF2dTogRk9OVF9CQVNFX1VSTCArICdEZWphVnUtc2RmLmZudCcsCiAgZXhvMmJvbGQ6IEZPTlRfQkFTRV9VUkwgKyAnRXhvMkJvbGQuZm50JywKICBleG8yc2VtaWJvbGQ6IEZPTlRfQkFTRV9VUkwgKyAnRXhvMlNlbWlCb2xkLmZudCcsCiAga2Vsc29uc2FuczogRk9OVF9CQVNFX1VSTCArICdLZWxzb25TYW5zLmZudCcsCiAgbW9ub2lkOiBGT05UX0JBU0VfVVJMICsgJ01vbm9pZC5mbnQnLAogIG1vemlsbGF2cjogRk9OVF9CQVNFX1VSTCArICdtb3ppbGxhdnIuZm50JywKICByb2JvdG86IEZPTlRfQkFTRV9VUkwgKyAnUm9ib3RvLW1zZGYuanNvbicsCiAgc291cmNlY29kZXBybzogRk9OVF9CQVNFX1VSTCArICdTb3VyY2VDb2RlUHJvLmZudCcKfTsKdmFyIE1TREZfRk9OVFMgPSBbJ3JvYm90byddOwp2YXIgREVGQVVMVF9GT05UID0gJ3JvYm90byc7Cm1vZHVsZS5leHBvcnRzLkZPTlRTID0gRk9OVFM7Cgp2YXIgY2FjaGUgPSBuZXcgUHJvbWlzZUNhY2hlKCk7CnZhciBmb250V2lkdGhGYWN0b3JzID0ge307CnZhciB0ZXh0dXJlcyA9IHt9OwoKLy8gUmVndWxhciBleHByZXNzaW9uIGZvciBkZXRlY3RpbmcgYSBVUkxzIHdpdGggYSBwcm90b2NvbCBwcmVmaXguCnZhciBwcm90b2NvbFJlID0gL15cdys6LzsKCi8qKgogKiBTREYtYmFzZWQgdGV4dCBjb21wb25lbnQuCiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9KYW0zL3RocmVlLWJtZm9udC10ZXh0LgogKgogKiBBbGwgdGhlIHN0b2NrIGZvbnRzIGFyZSBmb3IgdGhlIGBzZGZgIHJlZ2lzdGVyZWQgc2hhZGVyLCBhbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIGphbTMncwogKiBvcmlnaW5hbCBgc2RmYCBzaGFkZXIuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgndGV4dCcsIHsKICBtdWx0aXBsZTogdHJ1ZSwKCiAgc2NoZW1hOiB7CiAgICBhbGlnbjoge3R5cGU6ICdzdHJpbmcnLCBkZWZhdWx0OiAnbGVmdCcsIG9uZU9mOiBbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ119LAogICAgYWxwaGFUZXN0OiB7ZGVmYXVsdDogMC41fSwKICAgIC8vIGBhbmNob3JgIGRlZmF1bHRzIHRvIGNlbnRlciB0byBtYXRjaCBnZW9tZXRyaWVzLgogICAgYW5jaG9yOiB7ZGVmYXVsdDogJ2NlbnRlcicsIG9uZU9mOiBbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJywgJ2FsaWduJ119LAogICAgYmFzZWxpbmU6IHtkZWZhdWx0OiAnY2VudGVyJywgb25lT2Y6IFsndG9wJywgJ2NlbnRlcicsICdib3R0b20nXX0sCiAgICBjb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjRkZGJ30sCiAgICBmb250OiB7dHlwZTogJ3N0cmluZycsIGRlZmF1bHQ6IERFRkFVTFRfRk9OVH0sCiAgICAvLyBgZm9udEltYWdlYCBkZWZhdWx0cyB0byB0aGUgZm9udCBuYW1lIGFzIGEgLnBuZyAoZS5nLiwgbW96aWxsYXZyLmZudCAtPiBtb3ppbGxhdnIucG5nKS4KICAgIGZvbnRJbWFnZToge3R5cGU6ICdzdHJpbmcnfSwKICAgIC8vIGBoZWlnaHRgIGhhcyBubyBkZWZhdWx0LCB3aWxsIGJlIHBvcHVsYXRlZCBhdCBsYXlvdXQuCiAgICBoZWlnaHQ6IHt0eXBlOiAnbnVtYmVyJ30sCiAgICBsZXR0ZXJTcGFjaW5nOiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDB9LAogICAgLy8gYGxpbmVIZWlnaHRgIGRlZmF1bHRzIHRvIGZvbnQncyBgbGluZUhlaWdodGAgdmFsdWUuCiAgICBsaW5lSGVpZ2h0OiB7dHlwZTogJ251bWJlcid9LAogICAgLy8gYG5lZ2F0ZWAgbXVzdCBiZSB0cnVlIGZvciBmb250cyBnZW5lcmF0ZWQgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBtc2RmZ2VuICh3aGl0ZSBiYWNrZ3JvdW5kKS4KICAgIG5lZ2F0ZToge3R5cGU6ICdib29sZWFuJywgZGVmYXVsdDogdHJ1ZX0sCiAgICBvcGFjaXR5OiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDEuMH0sCiAgICBzaGFkZXI6IHtkZWZhdWx0OiAnc2RmJywgb25lT2Y6IHNoYWRlcnN9LAogICAgc2lkZToge2RlZmF1bHQ6ICdmcm9udCcsIG9uZU9mOiBbJ2Zyb250JywgJ2JhY2snLCAnZG91YmxlJ119LAogICAgdGFiU2l6ZToge2RlZmF1bHQ6IDR9LAogICAgdHJhbnNwYXJlbnQ6IHtkZWZhdWx0OiB0cnVlfSwKICAgIHZhbHVlOiB7dHlwZTogJ3N0cmluZyd9LAogICAgd2hpdGVTcGFjZToge2RlZmF1bHQ6ICdub3JtYWwnLCBvbmVPZjogWydub3JtYWwnLCAncHJlJywgJ25vd3JhcCddfSwKICAgIC8vIGB3aWR0aGAgZGVmYXVsdHMgdG8gZ2VvbWV0cnkgd2lkdGggaWYgcHJlc2VudCwgZWxzZSBgREVGQVVMVF9XSURUSGAuCiAgICB3aWR0aDoge3R5cGU6ICdudW1iZXInfSwKICAgIC8vIGB3cmFwQ291bnRgIHVuaXRzIGFyZSBhYm91dCBvbmUgZGVmYXVsdCBmb250IGNoYXJhY3Rlci4gV3JhcCByb3VnaGx5IGF0IHRoaXMgbnVtYmVyLgogICAgd3JhcENvdW50OiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDQwfSwKICAgIC8vIGB3cmFwUGl4ZWxzYCB3aWxsIHdyYXAgdXNpbmcgYm1mb250IHBpeGVsIHVuaXRzIChlLmcuLCBkZWphdnUncyBpcyAzMiBwaXhlbHMpLgogICAgd3JhcFBpeGVsczoge3R5cGU6ICdudW1iZXInfSwKICAgIC8vIGB4T2Zmc2V0YCB0byBhZGQgcGFkZGluZy4KICAgIHhPZmZzZXQ6IHt0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMH0sCiAgICAvLyBgeU9mZnNldGAgdG8gYWRqdXN0IGdlbmVyYXRlZCBmb250cyBmcm9tIHRvb2xzIHRoYXQgbWF5IGhhdmUgaW5jb3JyZWN0IG1ldHJpY3MuCiAgICB5T2Zmc2V0OiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDB9LAogICAgLy8gYHpPZmZzZXRgIHdpbGwgcHJvdmlkZSBhIHNtYWxsIHogb2Zmc2V0IHRvIGF2b2lkIHotZmlnaHRpbmcuCiAgICB6T2Zmc2V0OiB7dHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDAuMDAxfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc2hhZGVyRGF0YSA9IHt9OwogICAgdGhpcy5nZW9tZXRyeSA9IGNyZWF0ZVRleHRHZW9tZXRyeSgpOwogICAgdGhpcy5jcmVhdGVPclVwZGF0ZU1hdGVyaWFsKCk7CiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKTsKICAgIHRoaXMuZWwuc2V0T2JqZWN0M0QodGhpcy5hdHRyTmFtZSwgdGhpcy5tZXNoKTsKICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uIChvbGREYXRhKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBmb250ID0gdGhpcy5jdXJyZW50Rm9udDsKCiAgICBpZiAodGV4dHVyZXNbZGF0YS5mb250XSkgewogICAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlc1tkYXRhLmZvbnRdOwogICAgfSBlbHNlIHsKICAgICAgLy8gQ3JlYXRlIHRleHR1cmUgcGVyIGZvbnQuCiAgICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmVzW2RhdGEuZm9udF0gPSBuZXcgVEhSRUUuVGV4dHVyZSgpOwogICAgICB0aGlzLnRleHR1cmUuYW5pc290cm9weSA9IE1BWF9BTklTT1RST1BZOwogICAgfQoKICAgIC8vIFVwZGF0ZSBtYXRlcmlhbC4KICAgIHRoaXMuY3JlYXRlT3JVcGRhdGVNYXRlcmlhbCgpOwoKICAgIC8vIE5ldyBmb250LiBgdXBkYXRlRm9udGAgd2lsbCBsYXRlciBjaGFuZ2UgZGF0YSBhbmQgbGF5b3V0LgogICAgaWYgKG9sZERhdGEuZm9udCAhPT0gZGF0YS5mb250KSB7CiAgICAgIHRoaXMudXBkYXRlRm9udCgpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gVXBkYXRlIGdlb21ldHJ5IGFuZCBsYXlvdXQuCiAgICBpZiAoZm9udCkgewogICAgICB0aGlzLnVwZGF0ZUdlb21ldHJ5KHRoaXMuZ2VvbWV0cnksIGZvbnQpOwogICAgICB0aGlzLnVwZGF0ZUxheW91dCgpOwogICAgfQogIH0sCgogIC8qKgogICAqIENsZWFuIHVwIGdlb21ldHJ5LCBtYXRlcmlhbCwgdGV4dHVyZSwgbWVzaCwgb2JqZWN0cy4KICAgKi8KICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpOwogICAgdGhpcy5nZW9tZXRyeSA9IG51bGw7CiAgICB0aGlzLmVsLnJlbW92ZU9iamVjdDNEKHRoaXMuYXR0ck5hbWUpOwogICAgdGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7CiAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDsKICAgIHRoaXMudGV4dHVyZS5kaXNwb3NlKCk7CiAgICB0aGlzLnRleHR1cmUgPSBudWxsOwogICAgaWYgKHRoaXMuc2hhZGVyT2JqZWN0KSB7CiAgICAgIGRlbGV0ZSB0aGlzLnNoYWRlck9iamVjdDsKICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGUgdGhlIHNoYWRlciBvZiB0aGUgbWF0ZXJpYWwuCiAgICovCiAgY3JlYXRlT3JVcGRhdGVNYXRlcmlhbDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgaGFzQ2hhbmdlZFNoYWRlcjsKICAgIHZhciBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7CiAgICB2YXIgTmV3U2hhZGVyOwogICAgdmFyIHNoYWRlckRhdGEgPSB0aGlzLnNoYWRlckRhdGE7CiAgICB2YXIgc2hhZGVyTmFtZTsKCiAgICAvLyBJbmZlciBzaGFkZXIgaWYgdXNpbmcgYSBzdG9jayBmb250IChvciBmcm9tIGAtbXNkZmAgZmlsZW5hbWUgY29udmVudGlvbikuCiAgICBzaGFkZXJOYW1lID0gZGF0YS5zaGFkZXI7CiAgICBpZiAoTVNERl9GT05UUy5pbmRleE9mKGRhdGEuZm9udCkgIT09IC0xIHx8IGRhdGEuZm9udC5pbmRleE9mKCctbXNkZi4nKSA+PSAwKSB7CiAgICAgIHNoYWRlck5hbWUgPSAnbXNkZic7CiAgICB9IGVsc2UgaWYgKGRhdGEuZm9udCBpbiBGT05UUyAmJiBNU0RGX0ZPTlRTLmluZGV4T2YoZGF0YS5mb250KSA9PT0gLTEpIHsKICAgICAgc2hhZGVyTmFtZSA9ICdzZGYnOwogICAgfQoKICAgIGhhc0NoYW5nZWRTaGFkZXIgPSAodGhpcy5zaGFkZXJPYmplY3QgJiYgdGhpcy5zaGFkZXJPYmplY3QubmFtZSkgIT09IHNoYWRlck5hbWU7CgogICAgc2hhZGVyRGF0YS5hbHBoYVRlc3QgPSBkYXRhLmFscGhhVGVzdDsKICAgIHNoYWRlckRhdGEuY29sb3IgPSBkYXRhLmNvbG9yOwogICAgc2hhZGVyRGF0YS5tYXAgPSB0aGlzLnRleHR1cmU7CiAgICBzaGFkZXJEYXRhLm9wYWNpdHkgPSBkYXRhLm9wYWNpdHk7CiAgICBzaGFkZXJEYXRhLnNpZGUgPSBwYXJzZVNpZGUoZGF0YS5zaWRlKTsKICAgIHNoYWRlckRhdGEudHJhbnNwYXJlbnQgPSBkYXRhLnRyYW5zcGFyZW50OwogICAgc2hhZGVyRGF0YS5uZWdhdGUgPSBkYXRhLm5lZ2F0ZTsKCiAgICAvLyBTaGFkZXIgaGFzIG5vdCBjaGFuZ2VkLCBkbyBhbiB1cGRhdGUuCiAgICBpZiAoIWhhc0NoYW5nZWRTaGFkZXIpIHsKICAgICAgLy8gVXBkYXRlIHNoYWRlciBtYXRlcmlhbC4KICAgICAgdGhpcy5zaGFkZXJPYmplY3QudXBkYXRlKHNoYWRlckRhdGEpOwogICAgICAvLyBBcHBhcmVudGx5LCB3YXMgbm90IHNldCBvbiBgaW5pdGAgbm9yIGB1cGRhdGVgLgogICAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IHNoYWRlckRhdGEudHJhbnNwYXJlbnQ7CiAgICAgIG1hdGVyaWFsLnNpZGUgPSBzaGFkZXJEYXRhLnNpZGU7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBTaGFkZXIgaGFzIGNoYW5nZWQuIENyZWF0ZSBhIHNoYWRlciBtYXRlcmlhbC4KICAgIE5ld1NoYWRlciA9IGNyZWF0ZVNoYWRlcih0aGlzLmVsLCBzaGFkZXJOYW1lLCBzaGFkZXJEYXRhKTsKICAgIHRoaXMubWF0ZXJpYWwgPSBOZXdTaGFkZXIubWF0ZXJpYWw7CiAgICB0aGlzLnNoYWRlck9iamVjdCA9IE5ld1NoYWRlci5zaGFkZXI7CgogICAgLy8gU2V0IG5ldyBzaGFkZXIgbWF0ZXJpYWwuCiAgICB0aGlzLm1hdGVyaWFsLnNpZGUgPSBzaGFkZXJEYXRhLnNpZGU7CiAgICBpZiAodGhpcy5tZXNoKSB7IHRoaXMubWVzaC5tYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7IH0KICB9LAoKICAvKioKICAgKiBMb2FkIGZvbnQgZm9yIGdlb21ldHJ5LCBsb2FkIGZvbnQgaW1hZ2UgZm9yIG1hdGVyaWFsLCBhbmQgYXBwbHkuCiAgICovCiAgdXBkYXRlRm9udDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGZvbnRTcmM7CiAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5OwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIGlmICghZGF0YS5mb250KSB7IHdhcm4oJ05vIGZvbnQgc3BlY2lmaWVkLiBVc2luZyB0aGUgZGVmYXVsdCBmb250LicpOyB9CgogICAgLy8gTWFrZSBpbnZpc2libGUgZHVyaW5nIGZvbnQgc3dhcC4KICAgIHRoaXMubWVzaC52aXNpYmxlID0gZmFsc2U7CgogICAgLy8gTG9vayB1cCBmb250IFVSTCB0byB1c2UsIGFuZCBwZXJmb3JtIGNhY2hlZCBsb2FkLgogICAgZm9udFNyYyA9IHRoaXMubG9va3VwRm9udChkYXRhLmZvbnQgfHwgREVGQVVMVF9GT05UKSB8fCBkYXRhLmZvbnQ7CiAgICBjYWNoZS5nZXQoZm9udFNyYywgZnVuY3Rpb24gZG9Mb2FkRm9udCAoKSB7CiAgICAgIHJldHVybiBsb2FkRm9udChmb250U3JjLCBkYXRhLnlPZmZzZXQpOwogICAgfSkudGhlbihmdW5jdGlvbiBzZXRGb250IChmb250KSB7CiAgICAgIHZhciBmb250SW1nU3JjOwoKICAgICAgaWYgKGZvbnQucGFnZXMubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXJyZW50bHkgb25seSBzaW5nbGUtcGFnZSBiaXRtYXAgZm9udHMgYXJlIHN1cHBvcnRlZC4nKTsKICAgICAgfQoKICAgICAgaWYgKCFmb250V2lkdGhGYWN0b3JzW2ZvbnRTcmNdKSB7CiAgICAgICAgZm9udC53aWR0aEZhY3RvciA9IGZvbnRXaWR0aEZhY3RvcnNbZm9udF0gPSBjb21wdXRlRm9udFdpZHRoRmFjdG9yKGZvbnQpOwogICAgICB9CgogICAgICAvLyBVcGRhdGUgZ2VvbWV0cnkgZ2l2ZW4gZm9udCBtZXRyaWNzLgogICAgICBzZWxmLnVwZGF0ZUdlb21ldHJ5KGdlb21ldHJ5LCBmb250KTsKCiAgICAgIC8vIFNldCBmb250IGFuZCB1cGRhdGUgbGF5b3V0LgogICAgICBzZWxmLmN1cnJlbnRGb250ID0gZm9udDsKICAgICAgc2VsZi51cGRhdGVMYXlvdXQoKTsKCiAgICAgIC8vIExvb2sgdXAgZm9udCBpbWFnZSBVUkwgdG8gdXNlLCBhbmQgcGVyZm9ybSBjYWNoZWQgbG9hZC4KICAgICAgZm9udEltZ1NyYyA9IHNlbGYuZ2V0Rm9udEltYWdlU3JjKCk7CiAgICAgIGNhY2hlLmdldChmb250SW1nU3JjLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGxvYWRUZXh0dXJlKGZvbnRJbWdTcmMpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbWFnZSkgewogICAgICAgIC8vIE1ha2UgbWVzaCB2aXNpYmxlIGFuZCBhcHBseSBmb250IGltYWdlIGFzIHRleHR1cmUuCiAgICAgICAgdmFyIHRleHR1cmUgPSBzZWxmLnRleHR1cmU7CiAgICAgICAgdGV4dHVyZS5pbWFnZSA9IGltYWdlOwogICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgICAgIHRleHR1cmVzW2RhdGEuZm9udF0gPSB0ZXh0dXJlOwogICAgICAgIHNlbGYudGV4dHVyZSA9IHRleHR1cmU7CiAgICAgICAgc2VsZi5tZXNoLnZpc2libGUgPSB0cnVlOwogICAgICAgIGVsLmVtaXQoJ3RleHRmb250c2V0Jywge2ZvbnQ6IGRhdGEuZm9udCwgZm9udE9iajogZm9udH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgZXJyb3IoZXJyLm1lc3NhZ2UpOwogICAgICAgIGVycm9yKGVyci5zdGFjayk7CiAgICAgIH0pOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICBlcnJvcihlcnIubWVzc2FnZSk7CiAgICAgIGVycm9yKGVyci5zdGFjayk7CiAgICB9KTsKICB9LAoKICBnZXRGb250SW1hZ2VTcmM6IGZ1bmN0aW9uICgpIHsKICAgIGlmICh0aGlzLmRhdGEuZm9udEltYWdlKSB7IHJldHVybiB0aGlzLmRhdGEuZm9udEltYWdlOyB9CiAgICB2YXIgZm9udFNyYyA9IHRoaXMubG9va3VwRm9udCh0aGlzLmRhdGEuZm9udCB8fCBERUZBVUxUX0ZPTlQpIHx8IHRoaXMuZGF0YS5mb250OwogICAgdmFyIGltYWdlU3JjID0gdGhpcy5jdXJyZW50Rm9udC5wYWdlc1swXTsKICAgIC8vIElmIHRoZSBpbWFnZSBVUkwgY29udGFpbnMgYSBub24tSFRUUChTKSBwcm90b2NvbCwgYXNzdW1lIGl0J3MgYW4gYWJzb2x1dGUKICAgIC8vIHBhdGggb24gZGlzayBhbmQgdHJ5IHRvIGluZmVyIHRoZSBwYXRoIGZyb20gdGhlIGZvbnQgc291cmNlIGluc3RlYWQuCiAgICBpZiAoaW1hZ2VTcmMubWF0Y2gocHJvdG9jb2xSZSkgJiYgaW1hZ2VTcmMuaW5kZXhPZignaHR0cCcpICE9PSAwKSB7CiAgICAgIHJldHVybiBmb250U3JjLnJlcGxhY2UoLyhcLmZudCl8KFwuanNvbikvLCAnLnBuZycpOwogICAgfQogICAgcmV0dXJuIFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKGZvbnRTcmMpICsgaW1hZ2VTcmM7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIGxheW91dCB3aXRoIGFuY2hvciwgYWxpZ25tZW50LCBiYXNlbGluZSwgYW5kIGNvbnNpZGVyaW5nIGFueSBtZXNoZXMuCiAgICovCiAgdXBkYXRlTGF5b3V0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYW5jaG9yOwogICAgdmFyIGJhc2VsaW5lOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTsKICAgIHZhciBnZW9tZXRyeUNvbXBvbmVudDsKICAgIHZhciBoZWlnaHQ7CiAgICB2YXIgbGF5b3V0OwogICAgdmFyIG1lc2ggPSB0aGlzLm1lc2g7CiAgICB2YXIgdGV4dFJlbmRlcldpZHRoOwogICAgdmFyIHRleHRTY2FsZTsKICAgIHZhciB3aWR0aDsKICAgIHZhciB4OwogICAgdmFyIHk7CgogICAgaWYgKCFnZW9tZXRyeS5sYXlvdXQpIHsgcmV0dXJuOyB9CgogICAgLy8gRGV0ZXJtaW5lIHdpZHRoIHRvIHVzZSAoZGVmaW5lZCB3aWR0aCwgZ2VvbWV0cnkncyB3aWR0aCwgb3IgZGVmYXVsdCB3aWR0aCkuCiAgICBnZW9tZXRyeUNvbXBvbmVudCA9IGVsLmdldEF0dHJpYnV0ZSgnZ2VvbWV0cnknKTsKICAgIHdpZHRoID0gZGF0YS53aWR0aCB8fCAoZ2VvbWV0cnlDb21wb25lbnQgJiYgZ2VvbWV0cnlDb21wb25lbnQud2lkdGgpIHx8IERFRkFVTFRfV0lEVEg7CgogICAgLy8gRGV0ZXJtaW5lIHdyYXAgcGl4ZWwgY291bnQuIEVpdGhlciBzcGVjaWZpZWQgb3IgYnkgZXhwZXJpbWVudGFsIGZ1ZGdlIGZhY3Rvci4KICAgIC8vIE5vdGUgdGhhdCBleHBlcmltZW50YWwgZmFjdG9yIHdpbGwgbmV2ZXIgYmUgY29ycmVjdCBmb3IgdmFyaWFibGUgd2lkdGggZm9udHMuCiAgICB0ZXh0UmVuZGVyV2lkdGggPSBjb21wdXRlV2lkdGgoZGF0YS53cmFwUGl4ZWxzLCBkYXRhLndyYXBDb3VudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGb250LndpZHRoRmFjdG9yKTsKICAgIHRleHRTY2FsZSA9IHdpZHRoIC8gdGV4dFJlbmRlcldpZHRoOwoKICAgIC8vIERldGVybWluZSBoZWlnaHQgdG8gdXNlLgogICAgbGF5b3V0ID0gZ2VvbWV0cnkubGF5b3V0OwogICAgaGVpZ2h0ID0gdGV4dFNjYWxlICogKGxheW91dC5oZWlnaHQgKyBsYXlvdXQuZGVzY2VuZGVyKTsKCiAgICAvLyBVcGRhdGUgZ2VvbWV0cnkgZGltZW5zaW9ucyB0byBtYXRjaCB0ZXh0IGxheW91dCBpZiB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBzZXQgdG8gMC4KICAgIC8vIEZvciBleGFtcGxlLCBzY2FsZXMgYSBwbGFuZSB0byBmaXQgdGV4dC4KICAgIGlmIChnZW9tZXRyeUNvbXBvbmVudCAmJiBnZW9tZXRyeUNvbXBvbmVudC5wcmltaXRpdmUgPT09ICdwbGFuZScpIHsKICAgICAgaWYgKCFnZW9tZXRyeUNvbXBvbmVudC53aWR0aCkgeyBlbC5zZXRBdHRyaWJ1dGUoJ2dlb21ldHJ5JywgJ3dpZHRoJywgd2lkdGgpOyB9CiAgICAgIGlmICghZ2VvbWV0cnlDb21wb25lbnQuaGVpZ2h0KSB7IGVsLnNldEF0dHJpYnV0ZSgnZ2VvbWV0cnknLCAnaGVpZ2h0JywgaGVpZ2h0KTsgfQogICAgfQoKICAgIC8vIENhbGN1bGF0ZSBYIHBvc2l0aW9uIHRvIGFuY2hvciB0ZXh0IGxlZnQsIGNlbnRlciwgb3IgcmlnaHQuCiAgICBhbmNob3IgPSBkYXRhLmFuY2hvciA9PT0gJ2FsaWduJyA/IGRhdGEuYWxpZ24gOiBkYXRhLmFuY2hvcjsKICAgIGlmIChhbmNob3IgPT09ICdsZWZ0JykgewogICAgICB4ID0gMDsKICAgIH0gZWxzZSBpZiAoYW5jaG9yID09PSAncmlnaHQnKSB7CiAgICAgIHggPSAtMSAqIGxheW91dC53aWR0aDsKICAgIH0gZWxzZSBpZiAoYW5jaG9yID09PSAnY2VudGVyJykgewogICAgICB4ID0gLTEgKiBsYXlvdXQud2lkdGggLyAyOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0ZXh0LmFuY2hvciBwcm9wZXJ0eSB2YWx1ZScsIGFuY2hvcik7CiAgICB9CgogICAgLy8gQ2FsY3VsYXRlIFkgcG9zaXRpb24gdG8gYW5jaG9yIHRleHQgdG9wLCBjZW50ZXIsIG9yIGJvdHRvbS4KICAgIGJhc2VsaW5lID0gZGF0YS5iYXNlbGluZTsKICAgIGlmIChiYXNlbGluZSA9PT0gJ2JvdHRvbScpIHsKICAgICAgeSA9IDA7CiAgICB9IGVsc2UgaWYgKGJhc2VsaW5lID09PSAndG9wJykgewogICAgICB5ID0gLTEgKiBsYXlvdXQuaGVpZ2h0ICsgbGF5b3V0LmFzY2VuZGVyOwogICAgfSBlbHNlIGlmIChiYXNlbGluZSA9PT0gJ2NlbnRlcicpIHsKICAgICAgeSA9IC0xICogbGF5b3V0LmhlaWdodCAvIDI7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRleHQuYmFzZWxpbmUgcHJvcGVydHkgdmFsdWUnLCBiYXNlbGluZSk7CiAgICB9CgogICAgLy8gUG9zaXRpb24gYW5kIHNjYWxlIG1lc2ggdG8gYXBwbHkgbGF5b3V0LgogICAgbWVzaC5wb3NpdGlvbi54ID0geCAqIHRleHRTY2FsZSArIGRhdGEueE9mZnNldDsKICAgIG1lc2gucG9zaXRpb24ueSA9IHkgKiB0ZXh0U2NhbGU7CiAgICAvLyBQbGFjZSB0ZXh0IHNsaWdodGx5IGluIGZyb250IHRvIGF2b2lkIFotZmlnaHRpbmcuCiAgICBtZXNoLnBvc2l0aW9uLnogPSBkYXRhLnpPZmZzZXQ7CiAgICBtZXNoLnNjYWxlLnNldCh0ZXh0U2NhbGUsIC0xICogdGV4dFNjYWxlLCB0ZXh0U2NhbGUpOwogIH0sCgogIC8qKgogICAqIEdyYWIgZm9udCBmcm9tIHRoZSBjb25zdGFudC4KICAgKiBTZXQgYXMgYSBtZXRob2QgZm9yIHRlc3Qgc3R1YmJpbmcgcHVycG9zZXMuCiAgICovCiAgbG9va3VwRm9udDogZnVuY3Rpb24gKGtleSkgewogICAgcmV0dXJuIEZPTlRTW2tleV07CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSB0ZXh0IGdlb21ldHJ5IHVzaW5nIGB0aHJlZS1ibWZvbnQtdGV4dC51cGRhdGVgLgogICAqLwogIHVwZGF0ZUdlb21ldHJ5OiAoZnVuY3Rpb24gKCkgewogICAgdmFyIGdlb21ldHJ5VXBkYXRlQmFzZSA9IHt9OwogICAgdmFyIGdlb21ldHJ5VXBkYXRlRGF0YSA9IHt9OwogICAgdmFyIG5ld0xpbmVSZWdleCA9IC9cXG4vZzsKICAgIHZhciB0YWJSZWdleCA9IC9cXHQvZzsKCiAgICByZXR1cm4gZnVuY3Rpb24gKGdlb21ldHJ5LCBmb250KSB7CiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwoKICAgICAgZ2VvbWV0cnlVcGRhdGVEYXRhLmZvbnQgPSBmb250OwogICAgICBnZW9tZXRyeVVwZGF0ZURhdGEubGluZUhlaWdodCA9IGRhdGEubGluZUhlaWdodCAmJiBpc0Zpbml0ZShkYXRhLmxpbmVIZWlnaHQpCiAgICAgICAgPyBkYXRhLmxpbmVIZWlnaHQKICAgICAgICA6IGZvbnQuY29tbW9uLmxpbmVIZWlnaHQ7CiAgICAgIGdlb21ldHJ5VXBkYXRlRGF0YS50ZXh0ID0gZGF0YS52YWx1ZS50b1N0cmluZygpLnJlcGxhY2UobmV3TGluZVJlZ2V4LCAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHRhYlJlZ2V4LCAnXHQnKTsKICAgICAgZ2VvbWV0cnlVcGRhdGVEYXRhLndpZHRoID0gY29tcHV0ZVdpZHRoKGRhdGEud3JhcFBpeGVscywgZGF0YS53cmFwQ291bnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LndpZHRoRmFjdG9yKTsKICAgICAgZ2VvbWV0cnkudXBkYXRlKHV0aWxzLmV4dGVuZChnZW9tZXRyeVVwZGF0ZUJhc2UsIGRhdGEsIGdlb21ldHJ5VXBkYXRlRGF0YSkpOwogICAgfTsKICB9KSgpCn0pOwoKLyoqCiAqIER1ZSB0byB1c2luZyBuZWdhdGl2ZSBzY2FsZSwgd2UgcmV0dXJuIHRoZSBvcHBvc2l0ZSBzaWRlIHNwZWNpZmllZC4KICogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzEyNzg3LwogKi8KZnVuY3Rpb24gcGFyc2VTaWRlIChzaWRlKSB7CiAgc3dpdGNoIChzaWRlKSB7CiAgICBjYXNlICdiYWNrJzogewogICAgICByZXR1cm4gVEhSRUUuRnJvbnRTaWRlOwogICAgfQogICAgY2FzZSAnZG91YmxlJzogewogICAgICByZXR1cm4gVEhSRUUuRG91YmxlU2lkZTsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgcmV0dXJuIFRIUkVFLkJhY2tTaWRlOwogICAgfQogIH0KfQoKLyoqCiAqIEByZXR1cm5zIHtQcm9taXNlfQogKi8KZnVuY3Rpb24gbG9hZEZvbnQgKHNyYywgeU9mZnNldCkgewogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBsb2FkQk1Gb250KHNyYywgZnVuY3Rpb24gKGVyciwgZm9udCkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZm9udCcsIHNyYyk7CiAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvLyBGaXggbmVnYXRpdmUgWSBvZmZzZXRzIGZvciBSb2JvdG8gTVNERiBmb250IGZyb20gdG9vbC4gRXhwZXJpbWVudGFsbHkgZGV0ZXJtaW5lZC4KICAgICAgaWYgKHNyYy5pbmRleE9mKCcvUm9ib3RvLW1zZGYuanNvbicpID49IDApIHsgeU9mZnNldCA9IDMwOyB9CiAgICAgIGlmICh5T2Zmc2V0KSB7IGZvbnQuY2hhcnMubWFwKGZ1bmN0aW9uIGRvT2Zmc2V0IChjaCkgeyBjaC55b2Zmc2V0ICs9IHlPZmZzZXQ7IH0pOyB9CgogICAgICByZXNvbHZlKGZvbnQpOwogICAgfSk7CiAgfSk7Cn0KCi8qKgogKiBAcmV0dXJucyB7UHJvbWlzZX0KICovCmZ1bmN0aW9uIGxvYWRUZXh0dXJlIChzcmMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgbmV3IFRIUkVFLkltYWdlTG9hZGVyKCkubG9hZChzcmMsIGZ1bmN0aW9uIChpbWFnZSkgewogICAgICByZXNvbHZlKGltYWdlKTsKICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkgewogICAgICBlcnJvcignRXJyb3IgbG9hZGluZyBmb250IGltYWdlJywgc3JjKTsKICAgICAgcmVqZWN0KG51bGwpOwogICAgfSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVNoYWRlciAoZWwsIHNoYWRlck5hbWUsIGRhdGEpIHsKICB2YXIgc2hhZGVyOwogIHZhciBzaGFkZXJPYmplY3Q7CgogIC8vIFNldCB1cCBTaGFkZXIuCiAgc2hhZGVyT2JqZWN0ID0gbmV3IHNoYWRlcnNbc2hhZGVyTmFtZV0uU2hhZGVyKCk7CiAgc2hhZGVyT2JqZWN0LmVsID0gZWw7CiAgc2hhZGVyT2JqZWN0LmluaXQoZGF0YSk7CiAgc2hhZGVyT2JqZWN0LnVwZGF0ZShkYXRhKTsKCiAgLy8gR2V0IG1hdGVyaWFsLgogIHNoYWRlciA9IHNoYWRlck9iamVjdC5tYXRlcmlhbDsKICAvLyBBcHBhcmVudGx5LCB3YXMgbm90IHNldCBvbiBgaW5pdGAgbm9yIGB1cGRhdGVgLgogIHNoYWRlci50cmFuc3BhcmVudCA9IGRhdGEudHJhbnNwYXJlbnQ7CgogIHJldHVybiB7CiAgICBtYXRlcmlhbDogc2hhZGVyLAogICAgc2hhZGVyOiBzaGFkZXJPYmplY3QKICB9Owp9CgovKioKICogRGV0ZXJtaW5lIHdyYXAgcGl4ZWwgY291bnQuIEVpdGhlciBzcGVjaWZpZWQgb3IgYnkgZXhwZXJpbWVudGFsIGZ1ZGdlIGZhY3Rvci4KICogTm90ZSB0aGF0IGV4cGVyaW1lbnRhbCBmYWN0b3Igd2lsbCBuZXZlciBiZSBjb3JyZWN0IGZvciB2YXJpYWJsZSB3aWR0aCBmb250cy4KICovCmZ1bmN0aW9uIGNvbXB1dGVXaWR0aCAod3JhcFBpeGVscywgd3JhcENvdW50LCB3aWR0aEZhY3RvcikgewogIHJldHVybiB3cmFwUGl4ZWxzIHx8ICgoMC41ICsgd3JhcENvdW50KSAqIHdpZHRoRmFjdG9yKTsKfQoKLyoqCiAqIENvbXB1dGUgZGVmYXVsdCBmb250IHdpZHRoIGZhY3RvciB0byB1c2UuCiAqLwpmdW5jdGlvbiBjb21wdXRlRm9udFdpZHRoRmFjdG9yIChmb250KSB7CiAgdmFyIHN1bSA9IDA7CiAgdmFyIGRpZ2l0c3VtID0gMDsKICB2YXIgZGlnaXRzID0gMDsKICBmb250LmNoYXJzLm1hcChmdW5jdGlvbiAoY2gpIHsKICAgIHN1bSArPSBjaC54YWR2YW5jZTsKICAgIGlmIChjaC5pZCA+PSA0OCAmJiBjaC5pZCA8PSA1NykgewogICAgICBkaWdpdHMrKzsKICAgICAgZGlnaXRzdW0gKz0gY2gueGFkdmFuY2U7CiAgICB9CiAgfSk7CiAgcmV0dXJuIGRpZ2l0cyA/IGRpZ2l0c3VtIC8gZGlnaXRzIDogc3VtIC8gZm9udC5jaGFycy5sZW5ndGg7Cn0KCi8qKgogKiBHZXQgb3IgY3JlYXRlIGEgcHJvbWlzZSBnaXZlbiBhIGtleSBhbmQgcHJvbWlzZSBnZW5lcmF0b3IuCiAqIEB0b2RvIE1vdmUgdG8gYSB1dGlsaXR5IGFuZCB1c2UgaW4gb3RoZXIgcGFydHMgb2YgQS1GcmFtZS4KICovCmZ1bmN0aW9uIFByb21pc2VDYWNoZSAoKSB7CiAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZSA9IHt9OwoKICB0aGlzLmdldCA9IGZ1bmN0aW9uIChrZXksIHByb21pc2VHZW5lcmF0b3IpIHsKICAgIGlmIChrZXkgaW4gY2FjaGUpIHsKICAgICAgcmV0dXJuIGNhY2hlW2tleV07CiAgICB9CiAgICBjYWNoZVtrZXldID0gcHJvbWlzZUdlbmVyYXRvcigpOwogICAgcmV0dXJuIGNhY2hlW2tleV07CiAgfTsKfQoKfSx7Ii4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL2NvcmUvc2hhZGVyIjoxMTksIi4uL2xpYi90aHJlZSI6MTU3LCIuLi91dGlscy8iOjE4MiwibG9hZC1ibWZvbnQiOjI1LCJ0aHJlZS1ibWZvbnQtdGV4dCI6NDJ9XSw5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3RlckNvbXBvbmVudCA9IF9kZXJlcV8oJy4uL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CnZhciBjb250cm9sbGVyVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBERUZBVUxUX0NBTUVSQV9IRUlHSFQgPSBfZGVyZXFfKCcuLi9jb25zdGFudHMnKS5ERUZBVUxUX0NBTUVSQV9IRUlHSFQ7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIERFRkFVTFRfSEFOREVETkVTUyA9IF9kZXJlcV8oJy4uL2NvbnN0YW50cycpLkRFRkFVTFRfSEFOREVETkVTUzsKLy8gVmVjdG9yIGZyb20gZXllcyB0byBlbGJvdyAoZGl2aWRlZCBieSB1c2VyIGhlaWdodCkuCnZhciBFWUVTX1RPX0VMQk9XID0ge3g6IDAuMTc1LCB5OiAtMC4zLCB6OiAtMC4wM307Ci8vIFZlY3RvciBmcm9tIGV5ZXMgdG8gZWxib3cgKGRpdmlkZWQgYnkgdXNlciBoZWlnaHQpLgp2YXIgRk9SRUFSTSA9IHt4OiAwLCB5OiAwLCB6OiAtMC4xNzV9OwoKLy8gRHVlIHRvIHVuZm9ydHVuYXRlIG5hbWUgY29sbGlzaW9uLCBhZGQgZW1wdHkgdG91Y2hlcyBhcnJheSB0byBhdm9pZCBEYXlkcmVhbSBlcnJvci4KdmFyIEVNUFRZX0RBWURSRUFNX1RPVUNIRVMgPSB7dG91Y2hlczogW119OwoKdmFyIEVWRU5UUyA9IHsKICBBWElTTU9WRTogJ2F4aXNtb3ZlJywKICBCVVRUT05DSEFOR0VEOiAnYnV0dG9uY2hhbmdlZCcsCiAgQlVUVE9ORE9XTjogJ2J1dHRvbmRvd24nLAogIEJVVFRPTlVQOiAnYnV0dG9udXAnLAogIFRPVUNIU1RBUlQ6ICd0b3VjaHN0YXJ0JywKICBUT1VDSEVORDogJ3RvdWNoZW5kJwp9OwoKLyoqCiAqIFRyYWNrZWQgY29udHJvbHMgY29tcG9uZW50LgogKiBXcmFwIHRoZSBnYW1lcGFkIEFQSSBmb3IgcG9zZSBhbmQgYnV0dG9uIHN0YXRlcy4KICogU2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBjb250cm9sbGVyIGFuZCBhcHBseSBwb3NlIHRvIHRoZSBlbnRpdHkuCiAqIE9ic2VydmUgYnV0dG9uIHN0YXRlcyBhbmQgZW1pdCBhcHByb3ByaWF0ZSBldmVudHMuCiAqCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb250cm9sbGVyIC0gSW5kZXggb2YgY29udHJvbGxlciBpbiBhcnJheSByZXR1cm5lZCBieSBHYW1lcGFkIEFQSS4KICogIE9ubHkgdXNlZCBpZiBoYW5kIHByb3BlcnR5IGlzIG5vdCBzZXQuCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCAtIFNlbGVjdGVkIGNvbnRyb2xsZXIgYW1vbmcgdGhvc2UgcmV0dXJuZWQgYnkgR2FtZXBhZCBBUEkuCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoYW5kIC0gSWYgbXVsdGlwbGUgY29udHJvbGxlcnMgZm91bmQgd2l0aCBpZCwgY2hvb3NlIHRoZSBvbmUgd2l0aCB0aGUKICogIGdpdmVuIHZhbHVlIGZvciBoYW5kLiBJZiBzZXQsIHdlIGlnbm9yZSAnY29udHJvbGxlcicgcHJvcGVydHkKICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCd0cmFja2VkLWNvbnRyb2xzLXdlYnZyJywgewogIHNjaGVtYTogewogICAgYXV0b0hpZGU6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGNvbnRyb2xsZXI6IHtkZWZhdWx0OiAwfSwKICAgIGlkOiB7dHlwZTogJ3N0cmluZycsIGRlZmF1bHQ6ICcnfSwKICAgIGhhbmQ6IHt0eXBlOiAnc3RyaW5nJywgZGVmYXVsdDogJyd9LAogICAgaWRQcmVmaXg6IHt0eXBlOiAnc3RyaW5nJywgZGVmYXVsdDogJyd9LAogICAgb3JpZW50YXRpb25PZmZzZXQ6IHt0eXBlOiAndmVjMyd9LAogICAgLy8gQXJtIG1vZGVsIHBhcmFtZXRlcnMgd2hlbiBub3QgNkRvRi4KICAgIGFybU1vZGVsOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgaGVhZEVsZW1lbnQ6IHt0eXBlOiAnc2VsZWN0b3InfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIC8vIENvcHkgdmFyaWFibGVzIGJhY2sgdG8gdHJhY2tlZC1jb250cm9scyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuCiAgICAvLyBTb21lIDNyZCBjb21wb25lbnRzIHJlbHkgb24gdGhlbS4KICAgIHRoaXMuYXhpcyA9IHRoaXMuZWwuY29tcG9uZW50c1sndHJhY2tlZC1jb250cm9scyddLmF4aXMgPSBbMCwgMCwgMF07CiAgICB0aGlzLmJ1dHRvblN0YXRlcyA9IHRoaXMuZWwuY29tcG9uZW50c1sndHJhY2tlZC1jb250cm9scyddLmJ1dHRvblN0YXRlcyA9IHt9OwogICAgdGhpcy5jaGFuZ2VkQXhlcyA9IFtdOwogICAgdGhpcy50YXJnZXRDb250cm9sbGVyTnVtYmVyID0gdGhpcy5kYXRhLmNvbnRyb2xsZXI7CgogICAgdGhpcy5heGlzTW92ZUV2ZW50RGV0YWlsID0ge2F4aXM6IHRoaXMuYXhpcywgY2hhbmdlZDogdGhpcy5jaGFuZ2VkQXhlc307CiAgICB0aGlzLmRlbHRhQ29udHJvbGxlclBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIHRoaXMuY29udHJvbGxlclF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpOwogICAgdGhpcy5jb250cm9sbGVyRXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoKTsKCiAgICB0aGlzLnVwZGF0ZUdhbWVwYWQoKTsKCiAgICB0aGlzLmJ1dHRvbkV2ZW50RGV0YWlscyA9IHt9OwogIH0sCgogIHRpY2s6IGZ1bmN0aW9uICh0aW1lLCBkZWx0YSkgewogICAgdmFyIG1lc2ggPSB0aGlzLmVsLmdldE9iamVjdDNEKCdtZXNoJyk7CiAgICAvLyBVcGRhdGUgbWVzaCBhbmltYXRpb25zLgogICAgaWYgKG1lc2ggJiYgbWVzaC51cGRhdGUpIHsgbWVzaC51cGRhdGUoZGVsdGEgLyAxMDAwKTsgfQogICAgdGhpcy51cGRhdGVHYW1lcGFkKCk7CiAgICB0aGlzLnVwZGF0ZVBvc2UoKTsKICAgIHRoaXMudXBkYXRlQnV0dG9ucygpOwogIH0sCgogIC8qKgogICAqIFJldHVybiBkZWZhdWx0IHVzZXIgaGVpZ2h0IHRvIHVzZSBmb3Igbm9uLTZET0YgYXJtIG1vZGVsLgogICAqLwogIGRlZmF1bHRVc2VySGVpZ2h0OiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gREVGQVVMVF9DQU1FUkFfSEVJR0hUOwogIH0sCgogIC8qKgogICAqIFJldHVybiBoZWFkIGVsZW1lbnQgdG8gdXNlIGZvciBub24tNkRPRiBhcm0gbW9kZWwuCiAgICovCiAgZ2V0SGVhZEVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmRhdGEuaGVhZEVsZW1lbnQgfHwgdGhpcy5lbC5zY2VuZUVsLmNhbWVyYS5lbDsKICB9LAoKICAvKioKICAgKiBIYW5kbGUgdXBkYXRlIGNvbnRyb2xsZXIgbWF0Y2ggY3JpdGVyaWEgKHN1Y2ggYXMgYGlkYCwgYGlkUHJlZml4YCwgYGhhbmRgLCBgY29udHJvbGxlcmApCiAgICovCiAgdXBkYXRlR2FtZXBhZDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJVdGlscy5maW5kTWF0Y2hpbmdDb250cm9sbGVyV2ViVlIoCiAgICAgIHRoaXMuc3lzdGVtLmNvbnRyb2xsZXJzLAogICAgICBkYXRhLmlkLAogICAgICBkYXRhLmlkUHJlZml4LAogICAgICBkYXRhLmhhbmQsCiAgICAgIGRhdGEuY29udHJvbGxlcgogICAgKTsKCiAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyOwogICAgLy8gTGVnYWN5IGhhbmRsZSB0byB0aGUgY29udHJvbGxlciBmb3Igb2xkIGNvbXBvbmVudHMuCiAgICB0aGlzLmVsLmNvbXBvbmVudHNbJ3RyYWNrZWQtY29udHJvbHMnXS5jb250cm9sbGVyID0gY29udHJvbGxlcjsKCiAgICBpZiAodGhpcy5kYXRhLmF1dG9IaWRlKSB7IHRoaXMuZWwub2JqZWN0M0QudmlzaWJsZSA9ICEhdGhpcy5jb250cm9sbGVyOyB9CiAgfSwKCiAgLyoqCiAgICogQXBwbGllcyBhbiBhcnRpZmljaWFsIGFybSBtb2RlbCB0byBzaW11bGF0ZSBlbGJvdyB0byB3cmlzdCBwb3NpdGlvbmluZwogICAqIGJhc2VkIG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgY29udHJvbGxlci4KICAgKgogICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sbGVyUG9zaXRpb24gLSBFeGlzdGluZyB2ZWN0b3IgdG8gdXBkYXRlIHdpdGggY29udHJvbGxlciBwb3NpdGlvbi4KICAgKi8KICBhcHBseUFybU1vZGVsOiBmdW5jdGlvbiAoY29udHJvbGxlclBvc2l0aW9uKSB7CiAgICAvLyBVc2UgY29udHJvbGxlclBvc2l0aW9uIGFuZCBkZWx0YUNvbnRyb2xsZXJQb3NpdGlvbiB0byBhdm9pZCBjcmVhdGluZyB2YXJpYWJsZXMuCiAgICB2YXIgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcjsKICAgIHZhciBjb250cm9sbGVyRXVsZXIgPSB0aGlzLmNvbnRyb2xsZXJFdWxlcjsKICAgIHZhciBjb250cm9sbGVyUXVhdGVybmlvbiA9IHRoaXMuY29udHJvbGxlclF1YXRlcm5pb247CiAgICB2YXIgZGVsdGFDb250cm9sbGVyUG9zaXRpb24gPSB0aGlzLmRlbHRhQ29udHJvbGxlclBvc2l0aW9uOwogICAgdmFyIGhhbmQ7CiAgICB2YXIgaGVhZEVsOwogICAgdmFyIGhlYWRPYmplY3QzRDsKICAgIHZhciBwb3NlOwogICAgdmFyIHVzZXJIZWlnaHQ7CgogICAgaGVhZEVsID0gdGhpcy5nZXRIZWFkRWxlbWVudCgpOwogICAgaGVhZE9iamVjdDNEID0gaGVhZEVsLm9iamVjdDNEOwogICAgdXNlckhlaWdodCA9IHRoaXMuZGVmYXVsdFVzZXJIZWlnaHQoKTsKCiAgICBwb3NlID0gY29udHJvbGxlci5wb3NlOwogICAgaGFuZCA9IChjb250cm9sbGVyID8gY29udHJvbGxlci5oYW5kIDogdW5kZWZpbmVkKSB8fCBERUZBVUxUX0hBTkRFRE5FU1M7CgogICAgLy8gVXNlIGNhbWVyYSBwb3NpdGlvbiBhcyBoZWFkIHBvc2l0aW9uLgogICAgY29udHJvbGxlclBvc2l0aW9uLmNvcHkoaGVhZE9iamVjdDNELnBvc2l0aW9uKTsKICAgIC8vIFNldCBvZmZzZXQgZm9yIGRlZ2VuZXJhdGUgImFybSBtb2RlbCIgdG8gZWxib3cuCiAgICBkZWx0YUNvbnRyb2xsZXJQb3NpdGlvbi5zZXQoCiAgICAgIEVZRVNfVE9fRUxCT1cueCAqIChoYW5kID09PSAnbGVmdCcgPyAtMSA6IGhhbmQgPT09ICdyaWdodCcgPyAxIDogMCksCiAgICAgIEVZRVNfVE9fRUxCT1cueSwgIC8vIExvd2VyIHRoYW4gb3VyIGV5ZXMuCiAgICAgIEVZRVNfVE9fRUxCT1cueik7ICAvLyBTbGlnaHRseSBvdXQgaW4gZnJvbnQuCiAgICAvLyBTY2FsZSBvZmZzZXQgYnkgdXNlciBoZWlnaHQuCiAgICBkZWx0YUNvbnRyb2xsZXJQb3NpdGlvbi5tdWx0aXBseVNjYWxhcih1c2VySGVpZ2h0KTsKICAgIC8vIEFwcGx5IGNhbWVyYSBZIHJvdGF0aW9uIChub3QgWCBvciBaLCBzbyB5b3UgY2FuIGxvb2sgZG93biBhdCB5b3VyIGhhbmQpLgogICAgZGVsdGFDb250cm9sbGVyUG9zaXRpb24uYXBwbHlBeGlzQW5nbGUoaGVhZE9iamVjdDNELnVwLCBoZWFkT2JqZWN0M0Qucm90YXRpb24ueSk7CiAgICAvLyBBcHBseSByb3RhdGVkIG9mZnNldCB0byBwb3NpdGlvbi4KICAgIGNvbnRyb2xsZXJQb3NpdGlvbi5hZGQoZGVsdGFDb250cm9sbGVyUG9zaXRpb24pOwoKICAgIC8vIFNldCBvZmZzZXQgZm9yIGRlZ2VuZXJhdGUgImFybSBtb2RlbCIgZm9yZWFybS4gRm9yZWFybSBzdGlja2luZyBvdXQgZnJvbSBlbGJvdy4KICAgIGRlbHRhQ29udHJvbGxlclBvc2l0aW9uLnNldChGT1JFQVJNLngsIEZPUkVBUk0ueSwgRk9SRUFSTS56KTsKICAgIC8vIFNjYWxlIG9mZnNldCBieSB1c2VyIGhlaWdodC4KICAgIGRlbHRhQ29udHJvbGxlclBvc2l0aW9uLm11bHRpcGx5U2NhbGFyKHVzZXJIZWlnaHQpOwogICAgLy8gQXBwbHkgY29udHJvbGxlciBYL1kgcm90YXRpb24gKHRpbHRpbmcgdXAvZG93bi9sZWZ0L3JpZ2h0IGlzIHVzdWFsbHkgbW92aW5nIHRoZSBhcm0pLgogICAgaWYgKHBvc2Uub3JpZW50YXRpb24pIHsKICAgICAgY29udHJvbGxlclF1YXRlcm5pb24uZnJvbUFycmF5KHBvc2Uub3JpZW50YXRpb24pOwogICAgfSBlbHNlIHsKICAgICAgY29udHJvbGxlclF1YXRlcm5pb24uY29weShoZWFkT2JqZWN0M0QucXVhdGVybmlvbik7CiAgICB9CiAgICBjb250cm9sbGVyRXVsZXIuc2V0RnJvbVF1YXRlcm5pb24oY29udHJvbGxlclF1YXRlcm5pb24pOwogICAgY29udHJvbGxlckV1bGVyLnNldChjb250cm9sbGVyRXVsZXIueCwgY29udHJvbGxlckV1bGVyLnksIDApOwogICAgZGVsdGFDb250cm9sbGVyUG9zaXRpb24uYXBwbHlFdWxlcihjb250cm9sbGVyRXVsZXIpOwogICAgLy8gQXBwbHkgcm90YXRlZCBvZmZzZXQgdG8gcG9zaXRpb24uCiAgICBjb250cm9sbGVyUG9zaXRpb24uYWRkKGRlbHRhQ29udHJvbGxlclBvc2l0aW9uKTsKICB9LAoKICAvKioKICAgKiBSZWFkIHBvc2UgZnJvbSBjb250cm9sbGVyIChmcm9tIEdhbWVwYWQgQVBJKSwgYXBwbHkgdHJhbnNmb3JtcywgYXBwbHkgdG8gZW50aXR5LgogICAqLwogIHVwZGF0ZVBvc2U6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmVsLm9iamVjdDNEOwogICAgdmFyIHBvc2U7CiAgICB2YXIgdnJEaXNwbGF5ID0gdGhpcy5zeXN0ZW0udnJEaXNwbGF5OwogICAgdmFyIHN0YW5kaW5nTWF0cml4OwoKICAgIGlmICghY29udHJvbGxlcikgeyByZXR1cm47IH0KCiAgICAvLyBDb21wb3NlIHBvc2UgZnJvbSBHYW1lcGFkLgogICAgcG9zZSA9IGNvbnRyb2xsZXIucG9zZTsKCiAgICBpZiAocG9zZS5wb3NpdGlvbikgewogICAgICBvYmplY3QzRC5wb3NpdGlvbi5mcm9tQXJyYXkocG9zZS5wb3NpdGlvbik7CiAgICB9IGVsc2UgewogICAgICAvLyBDb250cm9sbGVyIG5vdCA2RE9GLCBhcHBseSBhcm0gbW9kZWwuCiAgICAgIGlmIChkYXRhLmFybU1vZGVsKSB7IHRoaXMuYXBwbHlBcm1Nb2RlbChvYmplY3QzRC5wb3NpdGlvbik7IH0KICAgIH0KCiAgICBpZiAocG9zZS5vcmllbnRhdGlvbikgewogICAgICBvYmplY3QzRC5xdWF0ZXJuaW9uLmZyb21BcnJheShwb3NlLm9yaWVudGF0aW9uKTsKICAgIH0KCiAgICAvLyBBcHBseSB0cmFuc2Zvcm1zLCBpZiA2RE9GIGFuZCBpbiBWUi4KICAgIGlmICh2ckRpc3BsYXkgJiYgcG9zZS5wb3NpdGlvbikgewogICAgICBzdGFuZGluZ01hdHJpeCA9IHRoaXMuZWwuc2NlbmVFbC5yZW5kZXJlci54ci5nZXRTdGFuZGluZ01hdHJpeCgpOwogICAgICBvYmplY3QzRC5tYXRyaXguY29tcG9zZShvYmplY3QzRC5wb3NpdGlvbiwgb2JqZWN0M0QucXVhdGVybmlvbiwgb2JqZWN0M0Quc2NhbGUpOwogICAgICBvYmplY3QzRC5tYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhzdGFuZGluZ01hdHJpeCwgb2JqZWN0M0QubWF0cml4KTsKICAgICAgb2JqZWN0M0QubWF0cml4LmRlY29tcG9zZShvYmplY3QzRC5wb3NpdGlvbiwgb2JqZWN0M0QucXVhdGVybmlvbiwgb2JqZWN0M0Quc2NhbGUpOwogICAgfQoKICAgIG9iamVjdDNELnJvdGF0ZVgodGhpcy5kYXRhLm9yaWVudGF0aW9uT2Zmc2V0LnggKiBUSFJFRS5NYXRoLkRFRzJSQUQpOwogICAgb2JqZWN0M0Qucm90YXRlWSh0aGlzLmRhdGEub3JpZW50YXRpb25PZmZzZXQueSAqIFRIUkVFLk1hdGguREVHMlJBRCk7CiAgICBvYmplY3QzRC5yb3RhdGVaKHRoaXMuZGF0YS5vcmllbnRhdGlvbk9mZnNldC56ICogVEhSRUUuTWF0aC5ERUcyUkFEKTsKICB9LAoKICAvKioKICAgKiBIYW5kbGUgYnV0dG9uIGNoYW5nZXMgaW5jbHVkaW5nIGF4ZXMsIHByZXNzZXMsIHRvdWNoZXMsIHZhbHVlcy4KICAgKi8KICB1cGRhdGVCdXR0b25zOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYnV0dG9uU3RhdGU7CiAgICB2YXIgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcjsKICAgIHZhciBpZDsKCiAgICBpZiAoIWNvbnRyb2xsZXIpIHsgcmV0dXJuOyB9CgogICAgLy8gQ2hlY2sgZXZlcnkgYnV0dG9uLgogICAgZm9yIChpZCA9IDA7IGlkIDwgY29udHJvbGxlci5idXR0b25zLmxlbmd0aDsgKytpZCkgewogICAgICAvLyBJbml0aWFsaXplIGJ1dHRvbiBzdGF0ZS4KICAgICAgaWYgKCF0aGlzLmJ1dHRvblN0YXRlc1tpZF0pIHsKICAgICAgICB0aGlzLmJ1dHRvblN0YXRlc1tpZF0gPSB7cHJlc3NlZDogZmFsc2UsIHRvdWNoZWQ6IGZhbHNlLCB2YWx1ZTogMH07CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLmJ1dHRvbkV2ZW50RGV0YWlsc1tpZF0pIHsKICAgICAgICB0aGlzLmJ1dHRvbkV2ZW50RGV0YWlsc1tpZF0gPSB7aWQ6IGlkLCBzdGF0ZTogdGhpcy5idXR0b25TdGF0ZXNbaWRdfTsKICAgICAgfQoKICAgICAgYnV0dG9uU3RhdGUgPSBjb250cm9sbGVyLmJ1dHRvbnNbaWRdOwogICAgICB0aGlzLmhhbmRsZUJ1dHRvbihpZCwgYnV0dG9uU3RhdGUpOwogICAgfQogICAgLy8gQ2hlY2sgYXhlcy4KICAgIHRoaXMuaGFuZGxlQXhlcygpOwogIH0sCgogIC8qKgogICAqIEhhbmRsZSBwcmVzc2VzIGFuZCB0b3VjaGVzIGZvciBhIHNpbmdsZSBidXR0b24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBJbmRleCBvZiBidXR0b24gaW4gR2FtZXBhZCBidXR0b24gYXJyYXkuCiAgICogQHBhcmFtIHtudW1iZXJ9IGJ1dHRvblN0YXRlIC0gVmFsdWUgb2YgYnV0dG9uIHN0YXRlIGZyb20gMCB0byAxLgogICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIGJ1dHRvbiBoYXMgY2hhbmdlZCBpbiBhbnkgd2F5LgogICAqLwogIGhhbmRsZUJ1dHRvbjogZnVuY3Rpb24gKGlkLCBidXR0b25TdGF0ZSkgewogICAgdmFyIGNoYW5nZWQ7CiAgICBjaGFuZ2VkID0gdGhpcy5oYW5kbGVQcmVzcyhpZCwgYnV0dG9uU3RhdGUpIHwKICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRvdWNoKGlkLCBidXR0b25TdGF0ZSkgfAogICAgICAgICAgICAgIHRoaXMuaGFuZGxlVmFsdWUoaWQsIGJ1dHRvblN0YXRlKTsKICAgIGlmICghY2hhbmdlZCkgeyByZXR1cm4gZmFsc2U7IH0KICAgIHRoaXMuZWwuZW1pdChFVkVOVFMuQlVUVE9OQ0hBTkdFRCwgdGhpcy5idXR0b25FdmVudERldGFpbHNbaWRdLCBmYWxzZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBBbiBheGlzIGlzIGFuIGFycmF5IG9mIHZhbHVlcyBmcm9tIC0xICh1cCwgbGVmdCkgdG8gMSAoZG93biwgcmlnaHQpLgogICAqIENvbXBhcmUgZWFjaCBjb21wb25lbnQgb2YgdGhlIGF4aXMgdG8gdGhlIHByZXZpb3VzIHZhbHVlIHRvIGRldGVybWluZSBjaGFuZ2UuCiAgICoKICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBheGVzIGNoYW5nZWQuCiAgICovCiAgaGFuZGxlQXhlczogZnVuY3Rpb24gKCkgewogICAgdmFyIGNoYW5nZWQgPSBmYWxzZTsKICAgIHZhciBjb250cm9sbGVyQXhlcyA9IHRoaXMuY29udHJvbGxlci5heGVzOwogICAgdmFyIGk7CiAgICB2YXIgcHJldmlvdXNBeGlzID0gdGhpcy5heGlzOwogICAgdmFyIGNoYW5nZWRBeGVzID0gdGhpcy5jaGFuZ2VkQXhlczsKCiAgICAvLyBDaGVjayBpZiBheGlzIGNoYW5nZWQuCiAgICB0aGlzLmNoYW5nZWRBeGVzLmxlbmd0aCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlckF4ZXMubGVuZ3RoOyArK2kpIHsKICAgICAgY2hhbmdlZEF4ZXMucHVzaChwcmV2aW91c0F4aXNbaV0gIT09IGNvbnRyb2xsZXJBeGVzW2ldKTsKICAgICAgaWYgKGNoYW5nZWRBeGVzW2ldKSB7IGNoYW5nZWQgPSB0cnVlOyB9CiAgICB9CiAgICBpZiAoIWNoYW5nZWQpIHsgcmV0dXJuIGZhbHNlOyB9CgogICAgdGhpcy5heGlzLmxlbmd0aCA9IDA7CiAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlckF4ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy5heGlzLnB1c2goY29udHJvbGxlckF4ZXNbaV0pOwogICAgfQogICAgdGhpcy5lbC5lbWl0KEVWRU5UUy5BWElTTU9WRSwgdGhpcy5heGlzTW92ZUV2ZW50RGV0YWlsLCBmYWxzZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBEZXRlcm1pbmUgd2hldGhlciBhIGJ1dHRvbiBwcmVzcyBoYXMgb2NjdXJlZCBhbmQgZW1pdCBldmVudHMgYXMgYXBwcm9wcmlhdGUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBJRCBvZiB0aGUgYnV0dG9uIHRvIGNoZWNrLgogICAqIEBwYXJhbSB7b2JqZWN0fSBidXR0b25TdGF0ZSAtIFN0YXRlIG9mIHRoZSBidXR0b24gdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgYnV0dG9uIHByZXNzIHN0YXRlIGNoYW5nZWQuCiAgICovCiAgaGFuZGxlUHJlc3M6IGZ1bmN0aW9uIChpZCwgYnV0dG9uU3RhdGUpIHsKICAgIHZhciBldnROYW1lOwogICAgdmFyIHByZXZpb3VzQnV0dG9uU3RhdGUgPSB0aGlzLmJ1dHRvblN0YXRlc1tpZF07CgogICAgLy8gTm90IGNoYW5nZWQuCiAgICBpZiAoYnV0dG9uU3RhdGUucHJlc3NlZCA9PT0gcHJldmlvdXNCdXR0b25TdGF0ZS5wcmVzc2VkKSB7IHJldHVybiBmYWxzZTsgfQoKICAgIGV2dE5hbWUgPSBidXR0b25TdGF0ZS5wcmVzc2VkID8gRVZFTlRTLkJVVFRPTkRPV04gOiBFVkVOVFMuQlVUVE9OVVA7CiAgICB0aGlzLmVsLmVtaXQoZXZ0TmFtZSwgdGhpcy5idXR0b25FdmVudERldGFpbHNbaWRdLCBmYWxzZSk7CiAgICBwcmV2aW91c0J1dHRvblN0YXRlLnByZXNzZWQgPSBidXR0b25TdGF0ZS5wcmVzc2VkOwogICAgcmV0dXJuIHRydWU7CiAgfSwKCiAgLyoqCiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBidXR0b24gdG91Y2ggaGFzIG9jY3VyZWQgYW5kIGVtaXQgZXZlbnRzIGFzIGFwcHJvcHJpYXRlLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gSUQgb2YgdGhlIGJ1dHRvbiB0byBjaGVjay4KICAgKiBAcGFyYW0ge29iamVjdH0gYnV0dG9uU3RhdGUgLSBTdGF0ZSBvZiB0aGUgYnV0dG9uIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIGJ1dHRvbiB0b3VjaCBzdGF0ZSBjaGFuZ2VkLgogICAqLwogIGhhbmRsZVRvdWNoOiBmdW5jdGlvbiAoaWQsIGJ1dHRvblN0YXRlKSB7CiAgICB2YXIgZXZ0TmFtZTsKICAgIHZhciBwcmV2aW91c0J1dHRvblN0YXRlID0gdGhpcy5idXR0b25TdGF0ZXNbaWRdOwoKICAgIC8vIE5vdCBjaGFuZ2VkLgogICAgaWYgKGJ1dHRvblN0YXRlLnRvdWNoZWQgPT09IHByZXZpb3VzQnV0dG9uU3RhdGUudG91Y2hlZCkgeyByZXR1cm4gZmFsc2U7IH0KCiAgICBldnROYW1lID0gYnV0dG9uU3RhdGUudG91Y2hlZCA/IEVWRU5UUy5UT1VDSFNUQVJUIDogRVZFTlRTLlRPVUNIRU5EOwogICAgdGhpcy5lbC5lbWl0KGV2dE5hbWUsIHRoaXMuYnV0dG9uRXZlbnREZXRhaWxzW2lkXSwgZmFsc2UsIEVNUFRZX0RBWURSRUFNX1RPVUNIRVMpOwogICAgcHJldmlvdXNCdXR0b25TdGF0ZS50b3VjaGVkID0gYnV0dG9uU3RhdGUudG91Y2hlZDsKICAgIHJldHVybiB0cnVlOwogIH0sCgogIC8qKgogICAqIERldGVybWluZSB3aGV0aGVyIGEgYnV0dG9uIHZhbHVlIGhhcyBjaGFuZ2VkLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gSWQgb2YgdGhlIGJ1dHRvbiB0byBjaGVjay4KICAgKiBAcGFyYW0ge29iamVjdH0gYnV0dG9uU3RhdGUgLSBTdGF0ZSBvZiB0aGUgYnV0dG9uIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIGJ1dHRvbiB2YWx1ZSBjaGFuZ2VkLgogICAqLwogIGhhbmRsZVZhbHVlOiBmdW5jdGlvbiAoaWQsIGJ1dHRvblN0YXRlKSB7CiAgICB2YXIgcHJldmlvdXNCdXR0b25TdGF0ZSA9IHRoaXMuYnV0dG9uU3RhdGVzW2lkXTsKCiAgICAvLyBOb3QgY2hhbmdlZC4KICAgIGlmIChidXR0b25TdGF0ZS52YWx1ZSA9PT0gcHJldmlvdXNCdXR0b25TdGF0ZS52YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH0KCiAgICBwcmV2aW91c0J1dHRvblN0YXRlLnZhbHVlID0gYnV0dG9uU3RhdGUudmFsdWU7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0pOwoKfSx7Ii4uL2NvbnN0YW50cyI6MTAxLCIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY29udHJvbGxlclV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scycpOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKdmFyIEVWRU5UUyA9IHsKICBBWElTTU9WRTogJ2F4aXNtb3ZlJywKICBCVVRUT05DSEFOR0VEOiAnYnV0dG9uY2hhbmdlZCcsCiAgQlVUVE9ORE9XTjogJ2J1dHRvbmRvd24nLAogIEJVVFRPTlVQOiAnYnV0dG9udXAnLAogIFRPVUNIU1RBUlQ6ICd0b3VjaHN0YXJ0JywKICBUT1VDSEVORDogJ3RvdWNoZW5kJwp9OwoKbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3RyYWNrZWQtY29udHJvbHMtd2VieHInLCB7CiAgc2NoZW1hOiB7CiAgICBpZDoge3R5cGU6ICdzdHJpbmcnLCBkZWZhdWx0OiAnJ30sCiAgICBoYW5kOiB7dHlwZTogJ3N0cmluZycsIGRlZmF1bHQ6ICcnfSwKICAgIGluZGV4OiB7dHlwZTogJ2ludCcsIGRlZmF1bHQ6IC0xfSwKICAgIGl0ZXJhdGVDb250cm9sbGVyUHJvZmlsZXM6IHtkZWZhdWx0OiBmYWxzZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmFkZFNlc3Npb25FdmVudExpc3RlbmVycyA9IHRoaXMuYWRkU2Vzc2lvbkV2ZW50TGlzdGVuZXJzLmJpbmQodGhpcyk7CiAgICB0aGlzLnVwZGF0ZUNvbnRyb2xsZXIgPSB0aGlzLnVwZGF0ZUNvbnRyb2xsZXIuYmluZCh0aGlzKTsKICAgIHRoaXMuZW1pdEJ1dHRvblVwRXZlbnQgPSB0aGlzLmVtaXRCdXR0b25VcEV2ZW50LmJpbmQodGhpcyk7CiAgICB0aGlzLmVtaXRCdXR0b25Eb3duRXZlbnQgPSB0aGlzLmVtaXRCdXR0b25Eb3duRXZlbnQuYmluZCh0aGlzKTsKCiAgICB0aGlzLnNlbGVjdEV2ZW50RGV0YWlscyA9IHtpZDogJ3RyaWdnZXInLCBzdGF0ZToge3ByZXNzZWQ6IGZhbHNlfX07CiAgICB0aGlzLmJ1dHRvbkV2ZW50RGV0YWlscyA9IHt9OwogICAgdGhpcy5idXR0b25TdGF0ZXMgPSB0aGlzLmVsLmNvbXBvbmVudHNbJ3RyYWNrZWQtY29udHJvbHMnXS5idXR0b25TdGF0ZXMgPSB7fTsKICAgIHRoaXMuYXhpcyA9IHRoaXMuZWwuY29tcG9uZW50c1sndHJhY2tlZC1jb250cm9scyddLmF4aXMgPSBbMCwgMCwgMF07CiAgICB0aGlzLmNoYW5nZWRBeGVzID0gW107CiAgICB0aGlzLmF4aXNNb3ZlRXZlbnREZXRhaWwgPSB7YXhpczogdGhpcy5heGlzLCBjaGFuZ2VkOiB0aGlzLmNoYW5nZWRBeGVzfTsKICB9LAoKICBwbGF5OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIHRoaXMudXBkYXRlQ29udHJvbGxlcigpOwogICAgdGhpcy5hZGRTZXNzaW9uRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXItdnInLCB0aGlzLmFkZFNlc3Npb25FdmVudExpc3RlbmVycyk7CiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMudXBkYXRlQ29udHJvbGxlcik7CiAgfSwKCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsOwogICAgdGhpcy5yZW1vdmVTZXNzaW9uRXZlbnRMaXN0ZW5lcnMoKTsKICAgIHNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW50ZXItdnInLCB0aGlzLmFkZFNlc3Npb25FdmVudExpc3RlbmVycyk7CiAgICBzY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMudXBkYXRlQ29udHJvbGxlcik7CiAgfSwKCiAgYWRkU2Vzc2lvbkV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIGlmICghc2NlbmVFbC54clNlc3Npb24pIHsgcmV0dXJuOyB9CiAgICBzY2VuZUVsLnhyU2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIHRoaXMuZW1pdEJ1dHRvbkRvd25FdmVudCk7CiAgICBzY2VuZUVsLnhyU2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlbmQnLCB0aGlzLmVtaXRCdXR0b25VcEV2ZW50KTsKICB9LAoKICByZW1vdmVTZXNzaW9uRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsOwogICAgaWYgKCFzY2VuZUVsLnhyU2Vzc2lvbikgeyByZXR1cm47IH0KICAgIHNjZW5lRWwueHJTZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgdGhpcy5lbWl0QnV0dG9uRG93bkV2ZW50KTsKICAgIHNjZW5lRWwueHJTZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlbGVjdGVuZCcsIHRoaXMuZW1pdEJ1dHRvblVwRXZlbnQpOwogIH0sCgogIGlzQ29udHJvbGxlclByZXNlbnQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIGlmICghdGhpcy5jb250cm9sbGVyIHx8IHRoaXMuY29udHJvbGxlci5nYW1lcGFkKSB7IHJldHVybiBmYWxzZTsgfQogICAgaWYgKGV2dC5pbnB1dFNvdXJjZS5oYW5kZWRuZXNzICE9PSAnbm9uZScgJiYKICAgICAgICBldnQuaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyAhPT0gdGhpcy5kYXRhLmhhbmQpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfSwKCiAgZW1pdEJ1dHRvbkRvd25FdmVudDogZnVuY3Rpb24gKGV2dCkgewogICAgaWYgKCF0aGlzLmlzQ29udHJvbGxlclByZXNlbnQoZXZ0KSkgeyByZXR1cm47IH0KCiAgICB0aGlzLnNlbGVjdEV2ZW50RGV0YWlscy5zdGF0ZS5wcmVzc2VkID0gdHJ1ZTsKICAgIHRoaXMuZWwuZW1pdCgnYnV0dG9uZG93bicsIHRoaXMuc2VsZWN0RXZlbnREZXRhaWxzKTsKICAgIHRoaXMuZWwuZW1pdCgnYnV0dG9uY2hhbmdlZCcsIHRoaXMuc2VsZWN0RXZlbnREZXRhaWxzKTsKICAgIHRoaXMuZWwuZW1pdCgndHJpZ2dlcmRvd24nKTsKICB9LAoKICBlbWl0QnV0dG9uVXBFdmVudDogZnVuY3Rpb24gKGV2dCkgewogICAgaWYgKCF0aGlzLmlzQ29udHJvbGxlclByZXNlbnQoZXZ0KSkgeyByZXR1cm47IH0KCiAgICB0aGlzLnNlbGVjdEV2ZW50RGV0YWlscy5zdGF0ZS5wcmVzc2VkID0gZmFsc2U7CiAgICB0aGlzLmVsLmVtaXQoJ2J1dHRvbnVwJywgdGhpcy5zZWxlY3RFdmVudERldGFpbHMpOwogICAgdGhpcy5lbC5lbWl0KCdidXR0b25jaGFuZ2VkJywgdGhpcy5zZWxlY3RFdmVudERldGFpbHMpOwogICAgdGhpcy5lbC5lbWl0KCd0cmlnZ2VydXAnKTsKICB9LAoKICAvKioKICAgKiBIYW5kbGUgdXBkYXRlIGNvbnRyb2xsZXIgbWF0Y2ggY3JpdGVyaWEgKHN1Y2ggYXMgYGlkYCwgYGlkUHJlZml4YCwgYGhhbmRgLCBgY29udHJvbGxlcmApCiAgICovCiAgdXBkYXRlQ29udHJvbGxlcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlclV0aWxzLmZpbmRNYXRjaGluZ0NvbnRyb2xsZXJXZWJYUigKICAgICAgdGhpcy5zeXN0ZW0uY29udHJvbGxlcnMsCiAgICAgIHRoaXMuZGF0YS5pZCwKICAgICAgdGhpcy5kYXRhLmhhbmQsCiAgICAgIHRoaXMuZGF0YS5pbmRleCwKICAgICAgdGhpcy5kYXRhLml0ZXJhdGVDb250cm9sbGVyUHJvZmlsZXMKICAgICk7CiAgICAvLyBMZWdhY3kgaGFuZGxlIHRvIHRoZSBjb250cm9sbGVyIGZvciBvbGQgY29tcG9uZW50cy4KICAgIHRoaXMuZWwuY29tcG9uZW50c1sndHJhY2tlZC1jb250cm9scyddLmNvbnRyb2xsZXIgPSB0aGlzLmNvbnRyb2xsZXI7CgogICAgaWYgKHRoaXMuZGF0YS5hdXRvSGlkZSkgeyB0aGlzLmVsLm9iamVjdDNELnZpc2libGUgPSAhIXRoaXMuY29udHJvbGxlcjsgfQogIH0sCgogIHRpY2s6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5lbC5zY2VuZUVsOwogICAgaWYgKCF0aGlzLmNvbnRyb2xsZXIgfHwgIXNjZW5lRWwuZnJhbWUgfHwgIXRoaXMuc3lzdGVtLnJlZmVyZW5jZVNwYWNlKSB7IHJldHVybjsgfQogICAgdGhpcy5wb3NlID0gc2NlbmVFbC5mcmFtZS5nZXRQb3NlKHRoaXMuY29udHJvbGxlci50YXJnZXRSYXlTcGFjZSwgdGhpcy5zeXN0ZW0ucmVmZXJlbmNlU3BhY2UpOwogICAgdGhpcy51cGRhdGVQb3NlKCk7CiAgICB0aGlzLnVwZGF0ZUJ1dHRvbnMoKTsKICB9LAoKICB1cGRhdGVQb3NlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmVsLm9iamVjdDNEOwogICAgdmFyIHBvc2UgPSB0aGlzLnBvc2U7CiAgICBpZiAoIXBvc2UpIHsgcmV0dXJuOyB9CiAgICBvYmplY3QzRC5tYXRyaXguZWxlbWVudHMgPSBwb3NlLnRyYW5zZm9ybS5tYXRyaXg7CiAgICBvYmplY3QzRC5tYXRyaXguZGVjb21wb3NlKG9iamVjdDNELnBvc2l0aW9uLCBvYmplY3QzRC5yb3RhdGlvbiwgb2JqZWN0M0Quc2NhbGUpOwogIH0sCgogIC8qKgogICAqIEhhbmRsZSBidXR0b24gY2hhbmdlcyBpbmNsdWRpbmcgYXhlcywgcHJlc3NlcywgdG91Y2hlcywgdmFsdWVzLgogICAqLwogIHVwZGF0ZUJ1dHRvbnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBidXR0b25TdGF0ZTsKICAgIHZhciBpZDsKICAgIHZhciBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyOwogICAgdmFyIGdhbWVwYWQ7CiAgICBpZiAoIWNvbnRyb2xsZXIgfHwgIWNvbnRyb2xsZXIuZ2FtZXBhZCkgeyByZXR1cm47IH0KCiAgICBnYW1lcGFkID0gY29udHJvbGxlci5nYW1lcGFkOwogICAgLy8gQ2hlY2sgZXZlcnkgYnV0dG9uLgogICAgZm9yIChpZCA9IDA7IGlkIDwgZ2FtZXBhZC5idXR0b25zLmxlbmd0aDsgKytpZCkgewogICAgICAvLyBJbml0aWFsaXplIGJ1dHRvbiBzdGF0ZS4KICAgICAgaWYgKCF0aGlzLmJ1dHRvblN0YXRlc1tpZF0pIHsKICAgICAgICB0aGlzLmJ1dHRvblN0YXRlc1tpZF0gPSB7cHJlc3NlZDogZmFsc2UsIHRvdWNoZWQ6IGZhbHNlLCB2YWx1ZTogMH07CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLmJ1dHRvbkV2ZW50RGV0YWlsc1tpZF0pIHsKICAgICAgICB0aGlzLmJ1dHRvbkV2ZW50RGV0YWlsc1tpZF0gPSB7aWQ6IGlkLCBzdGF0ZTogdGhpcy5idXR0b25TdGF0ZXNbaWRdfTsKICAgICAgfQoKICAgICAgYnV0dG9uU3RhdGUgPSBnYW1lcGFkLmJ1dHRvbnNbaWRdOwogICAgICB0aGlzLmhhbmRsZUJ1dHRvbihpZCwgYnV0dG9uU3RhdGUpOwogICAgfQogICAgLy8gQ2hlY2sgYXhlcy4KICAgIHRoaXMuaGFuZGxlQXhlcygpOwogIH0sCgogIC8qKgogICAqIEhhbmRsZSBwcmVzc2VzIGFuZCB0b3VjaGVzIGZvciBhIHNpbmdsZSBidXR0b24uCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBJbmRleCBvZiBidXR0b24gaW4gR2FtZXBhZCBidXR0b24gYXJyYXkuCiAgICogQHBhcmFtIHtudW1iZXJ9IGJ1dHRvblN0YXRlIC0gVmFsdWUgb2YgYnV0dG9uIHN0YXRlIGZyb20gMCB0byAxLgogICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIGJ1dHRvbiBoYXMgY2hhbmdlZCBpbiBhbnkgd2F5LgogICAqLwogIGhhbmRsZUJ1dHRvbjogZnVuY3Rpb24gKGlkLCBidXR0b25TdGF0ZSkgewogICAgdmFyIGNoYW5nZWQ7CiAgICBjaGFuZ2VkID0gdGhpcy5oYW5kbGVQcmVzcyhpZCwgYnV0dG9uU3RhdGUpIHwKICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRvdWNoKGlkLCBidXR0b25TdGF0ZSkgfAogICAgICAgICAgICAgIHRoaXMuaGFuZGxlVmFsdWUoaWQsIGJ1dHRvblN0YXRlKTsKICAgIGlmICghY2hhbmdlZCkgeyByZXR1cm4gZmFsc2U7IH0KICAgIHRoaXMuZWwuZW1pdChFVkVOVFMuQlVUVE9OQ0hBTkdFRCwgdGhpcy5idXR0b25FdmVudERldGFpbHNbaWRdLCBmYWxzZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBBbiBheGlzIGlzIGFuIGFycmF5IG9mIHZhbHVlcyBmcm9tIC0xICh1cCwgbGVmdCkgdG8gMSAoZG93biwgcmlnaHQpLgogICAqIENvbXBhcmUgZWFjaCBjb21wb25lbnQgb2YgdGhlIGF4aXMgdG8gdGhlIHByZXZpb3VzIHZhbHVlIHRvIGRldGVybWluZSBjaGFuZ2UuCiAgICoKICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBheGVzIGNoYW5nZWQuCiAgICovCiAgaGFuZGxlQXhlczogZnVuY3Rpb24gKCkgewogICAgdmFyIGNoYW5nZWQgPSBmYWxzZTsKICAgIHZhciBjb250cm9sbGVyQXhlcyA9IHRoaXMuY29udHJvbGxlci5nYW1lcGFkLmF4ZXM7CiAgICB2YXIgaTsKICAgIHZhciBwcmV2aW91c0F4aXMgPSB0aGlzLmF4aXM7CiAgICB2YXIgY2hhbmdlZEF4ZXMgPSB0aGlzLmNoYW5nZWRBeGVzOwoKICAgIC8vIENoZWNrIGlmIGF4aXMgY2hhbmdlZC4KICAgIHRoaXMuY2hhbmdlZEF4ZXMubGVuZ3RoID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVyQXhlcy5sZW5ndGg7ICsraSkgewogICAgICBjaGFuZ2VkQXhlcy5wdXNoKHByZXZpb3VzQXhpc1tpXSAhPT0gY29udHJvbGxlckF4ZXNbaV0pOwogICAgICBpZiAoY2hhbmdlZEF4ZXNbaV0pIHsgY2hhbmdlZCA9IHRydWU7IH0KICAgIH0KICAgIGlmICghY2hhbmdlZCkgeyByZXR1cm4gZmFsc2U7IH0KCiAgICB0aGlzLmF4aXMubGVuZ3RoID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVyQXhlcy5sZW5ndGg7IGkrKykgewogICAgICB0aGlzLmF4aXMucHVzaChjb250cm9sbGVyQXhlc1tpXSk7CiAgICB9CiAgICB0aGlzLmVsLmVtaXQoRVZFTlRTLkFYSVNNT1ZFLCB0aGlzLmF4aXNNb3ZlRXZlbnREZXRhaWwsIGZhbHNlKTsKICAgIHJldHVybiB0cnVlOwogIH0sCgogIC8qKgogICAqIERldGVybWluZSB3aGV0aGVyIGEgYnV0dG9uIHByZXNzIGhhcyBvY2N1cmVkIGFuZCBlbWl0IGV2ZW50cyBhcyBhcHByb3ByaWF0ZS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIElEIG9mIHRoZSBidXR0b24gdG8gY2hlY2suCiAgICogQHBhcmFtIHtvYmplY3R9IGJ1dHRvblN0YXRlIC0gU3RhdGUgb2YgdGhlIGJ1dHRvbiB0byBjaGVjay4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBidXR0b24gcHJlc3Mgc3RhdGUgY2hhbmdlZC4KICAgKi8KICBoYW5kbGVQcmVzczogZnVuY3Rpb24gKGlkLCBidXR0b25TdGF0ZSkgewogICAgdmFyIGV2dE5hbWU7CiAgICB2YXIgcHJldmlvdXNCdXR0b25TdGF0ZSA9IHRoaXMuYnV0dG9uU3RhdGVzW2lkXTsKCiAgICAvLyBOb3QgY2hhbmdlZC4KICAgIGlmIChidXR0b25TdGF0ZS5wcmVzc2VkID09PSBwcmV2aW91c0J1dHRvblN0YXRlLnByZXNzZWQpIHsgcmV0dXJuIGZhbHNlOyB9CgogICAgZXZ0TmFtZSA9IGJ1dHRvblN0YXRlLnByZXNzZWQgPyBFVkVOVFMuQlVUVE9ORE9XTiA6IEVWRU5UUy5CVVRUT05VUDsKICAgIHRoaXMuZWwuZW1pdChldnROYW1lLCB0aGlzLmJ1dHRvbkV2ZW50RGV0YWlsc1tpZF0sIGZhbHNlKTsKICAgIHByZXZpb3VzQnV0dG9uU3RhdGUucHJlc3NlZCA9IGJ1dHRvblN0YXRlLnByZXNzZWQ7CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICAvKioKICAgKiBEZXRlcm1pbmUgd2hldGhlciBhIGJ1dHRvbiB0b3VjaCBoYXMgb2NjdXJlZCBhbmQgZW1pdCBldmVudHMgYXMgYXBwcm9wcmlhdGUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBJRCBvZiB0aGUgYnV0dG9uIHRvIGNoZWNrLgogICAqIEBwYXJhbSB7b2JqZWN0fSBidXR0b25TdGF0ZSAtIFN0YXRlIG9mIHRoZSBidXR0b24gdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgYnV0dG9uIHRvdWNoIHN0YXRlIGNoYW5nZWQuCiAgICovCiAgaGFuZGxlVG91Y2g6IGZ1bmN0aW9uIChpZCwgYnV0dG9uU3RhdGUpIHsKICAgIHZhciBldnROYW1lOwogICAgdmFyIHByZXZpb3VzQnV0dG9uU3RhdGUgPSB0aGlzLmJ1dHRvblN0YXRlc1tpZF07CgogICAgLy8gTm90IGNoYW5nZWQuCiAgICBpZiAoYnV0dG9uU3RhdGUudG91Y2hlZCA9PT0gcHJldmlvdXNCdXR0b25TdGF0ZS50b3VjaGVkKSB7IHJldHVybiBmYWxzZTsgfQoKICAgIGV2dE5hbWUgPSBidXR0b25TdGF0ZS50b3VjaGVkID8gRVZFTlRTLlRPVUNIU1RBUlQgOiBFVkVOVFMuVE9VQ0hFTkQ7CiAgICB0aGlzLmVsLmVtaXQoZXZ0TmFtZSwgdGhpcy5idXR0b25FdmVudERldGFpbHNbaWRdLCBmYWxzZSk7CiAgICBwcmV2aW91c0J1dHRvblN0YXRlLnRvdWNoZWQgPSBidXR0b25TdGF0ZS50b3VjaGVkOwogICAgcmV0dXJuIHRydWU7CiAgfSwKCiAgLyoqCiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBidXR0b24gdmFsdWUgaGFzIGNoYW5nZWQuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBJZCBvZiB0aGUgYnV0dG9uIHRvIGNoZWNrLgogICAqIEBwYXJhbSB7b2JqZWN0fSBidXR0b25TdGF0ZSAtIFN0YXRlIG9mIHRoZSBidXR0b24gdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgYnV0dG9uIHZhbHVlIGNoYW5nZWQuCiAgICovCiAgaGFuZGxlVmFsdWU6IGZ1bmN0aW9uIChpZCwgYnV0dG9uU3RhdGUpIHsKICAgIHZhciBwcmV2aW91c0J1dHRvblN0YXRlID0gdGhpcy5idXR0b25TdGF0ZXNbaWRdOwoKICAgIC8vIE5vdCBjaGFuZ2VkLgogICAgaWYgKGJ1dHRvblN0YXRlLnZhbHVlID09PSBwcmV2aW91c0J1dHRvblN0YXRlLnZhbHVlKSB7IHJldHVybiBmYWxzZTsgfQoKICAgIHByZXZpb3VzQnV0dG9uU3RhdGUudmFsdWUgPSBidXR0b25TdGF0ZS52YWx1ZTsKICAgIHJldHVybiB0cnVlOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKLyoqCiAqIFRyYWNrZWQgY29udHJvbHMuCiAqIEFic3RyYWN0IGNvbnRyb2xzIHRoYXQgZGVjaWRlIGlmIHRoZSBXZWJWUiBvciBXZWJYUiB2ZXJzaW9uIGlzIGdvaW5nIHRvIGJlIGFwcGxpZWQuCiAqCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb250cm9sbGVyIC0gSW5kZXggb2YgY29udHJvbGxlciBpbiBhcnJheSByZXR1cm5lZCBieSBHYW1lcGFkIEFQSS4KICogIE9ubHkgdXNlZCBpZiBoYW5kIHByb3BlcnR5IGlzIG5vdCBzZXQuCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCAtIFNlbGVjdGVkIGNvbnRyb2xsZXIgYW1vbmcgdGhvc2UgcmV0dXJuZWQgYnkgR2FtZXBhZCBBUEkuCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoYW5kIC0gSWYgbXVsdGlwbGUgY29udHJvbGxlcnMgZm91bmQgd2l0aCBpZCwgY2hvb3NlIHRoZSBvbmUgd2l0aCB0aGUKICogIGdpdmVuIHZhbHVlIGZvciBoYW5kLiBJZiBzZXQsIHdlIGlnbm9yZSAnY29udHJvbGxlcicgcHJvcGVydHkKICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCd0cmFja2VkLWNvbnRyb2xzJywgewogIHNjaGVtYTogewogICAgYXV0b0hpZGU6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGNvbnRyb2xsZXI6IHtkZWZhdWx0OiAtMX0sCiAgICBpZDoge3R5cGU6ICdzdHJpbmcnLCBkZWZhdWx0OiAnJ30sCiAgICBoYW5kOiB7dHlwZTogJ3N0cmluZycsIGRlZmF1bHQ6ICcnfSwKICAgIGlkUHJlZml4OiB7dHlwZTogJ3N0cmluZycsIGRlZmF1bHQ6ICcnfSwKICAgIG9yaWVudGF0aW9uT2Zmc2V0OiB7dHlwZTogJ3ZlYzMnfSwKICAgIC8vIEFybSBtb2RlbCBwYXJhbWV0ZXJzIHdoZW4gbm90IDZEb0YuCiAgICBhcm1Nb2RlbDoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIGhlYWRFbGVtZW50OiB7dHlwZTogJ3NlbGVjdG9yJ30sCiAgICBpdGVyYXRlQ29udHJvbGxlclByb2ZpbGVzOiB7ZGVmYXVsdDogZmFsc2V9CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBpZiAoZWwuc2NlbmVFbC5oYXNXZWJYUikgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RyYWNrZWQtY29udHJvbHMtd2VieHInLCB7CiAgICAgICAgaWQ6IGRhdGEuaWQsCiAgICAgICAgaGFuZDogZGF0YS5oYW5kLAogICAgICAgIGluZGV4OiBkYXRhLmNvbnRyb2xsZXIsCiAgICAgICAgaXRlcmF0ZUNvbnRyb2xsZXJQcm9maWxlczogZGF0YS5pdGVyYXRlQ29udHJvbGxlclByb2ZpbGVzCiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzLXdlYnZyJywgZGF0YSk7CiAgICB9CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5fV0sOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50OwoKLyoqCiAqIFZpc2liaWxpdHkgY29tcG9uZW50LgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3Zpc2libGUnLCB7CiAgc2NoZW1hOiB7ZGVmYXVsdDogdHJ1ZX0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5vYmplY3QzRC52aXNpYmxlID0gdGhpcy5kYXRhOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOX1dLDk3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7Cgp2YXIgVklWRV9DT05UUk9MTEVSX01PREVMX09CSl9VUkwgPSAnaHR0cHM6Ly9jZG4uYWZyYW1lLmlvL2NvbnRyb2xsZXJzL3ZpdmUvdnJfY29udHJvbGxlcl92aXZlLm9iaic7CnZhciBWSVZFX0NPTlRST0xMRVJfTU9ERUxfT0JKX01UTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvdml2ZS92cl9jb250cm9sbGVyX3ZpdmUubXRsJzsKCnZhciBpc1dlYlhSQXZhaWxhYmxlID0gX2RlcmVxXygnLi4vdXRpbHMvJykuZGV2aWNlLmlzV2ViWFJBdmFpbGFibGU7Cgp2YXIgR0FNRVBBRF9JRF9XRUJYUiA9ICdodGMtdml2ZS1jb250cm9sbGVyLW12JzsKdmFyIEdBTUVQQURfSURfV0VCVlIgPSAnT3BlblZSICc7CgovLyBQcmVmaXggZm9yIEdlbjEgYW5kIEdlbjIgT2N1bHVzIFRvdWNoIENvbnRyb2xsZXJzLgp2YXIgR0FNRVBBRF9JRF9QUkVGSVggPSBpc1dlYlhSQXZhaWxhYmxlID8gR0FNRVBBRF9JRF9XRUJYUiA6IEdBTUVQQURfSURfV0VCVlI7CgovKioKICogQnV0dG9uIElEczoKICogMCAtIHRyYWNrcGFkCiAqIDEgLSB0cmlnZ2VyIChpbnRlbnNpdHkgdmFsdWUgZnJvbSAwLjUgdG8gMSkKICogMiAtIGdyaXAKICogMyAtIG1lbnUgKGRpc3BhdGNoIGJ1dCBiZXR0ZXIgZm9yIG1lbnUgb3B0aW9ucykKICogNCAtIHN5c3RlbSAobmV2ZXIgZGlzcGF0Y2hlZCBvbiB0aGlzIGxheWVyKQogKi8KdmFyIElOUFVUX01BUFBJTkdfV0VCVlIgPSB7CiAgYXhlczoge3RyYWNrcGFkOiBbMCwgMV19LAogIGJ1dHRvbnM6IFsndHJhY2twYWQnLCAndHJpZ2dlcicsICdncmlwJywgJ21lbnUnLCAnc3lzdGVtJ10KfTsKCi8qKgogKiBCdXR0b24gSURzOgogKiAwIC0gdHJpZ2dlcgogKiAxIC0gc3F1ZWV6ZQogKiAyIC0gdG91Y2hwYWQKICogMyAtIG5vbmUgKGRpc3BhdGNoIGJ1dCBiZXR0ZXIgZm9yIG1lbnUgb3B0aW9ucykKICogNCAtIG1lbnUgKG5ldmVyIGRpc3BhdGNoZWQgb24gdGhpcyBsYXllcikKICoKICogQXhpczoKICogMCAtIHRvdWNocGFkIHggYXhpcwogKiAxIC0gdG91Y2hwYWQgeSBheGlzCiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2ltbWVyc2l2ZS13ZWIvd2VieHItaW5wdXQtcHJvZmlsZXMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcmVnaXN0cnkvcHJvZmlsZXMvaHRjL2h0Yy12aXZlLmpzb24KICovCnZhciBJTlBVVF9NQVBQSU5HX1dFQlhSID0gewogIGF4ZXM6IHt0aHVtYnN0aWNrOiBbMCwgMV19LAogIGJ1dHRvbnM6IFsndHJpZ2dlcicsICdncmlwJywgJ3RyYWNrcGFkJywgJ25vbmUnLCAnbWVudSddCn07Cgp2YXIgSU5QVVRfTUFQUElORyA9IGlzV2ViWFJBdmFpbGFibGUgPyBJTlBVVF9NQVBQSU5HX1dFQlhSIDogSU5QVVRfTUFQUElOR19XRUJWUjsKCi8qKgogKiBWaXZlIGNvbnRyb2xzLgogKiBJbnRlcmZhY2Ugd2l0aCBWaXZlIGNvbnRyb2xsZXJzIGFuZCBtYXAgR2FtZXBhZCBldmVudHMgdG8gY29udHJvbGxlciBidXR0b25zOgogKiB0cmFja3BhZCwgdHJpZ2dlciwgZ3JpcCwgbWVudSwgc3lzdGVtCiAqIExvYWQgYSBjb250cm9sbGVyIG1vZGVsIGFuZCBoaWdobGlnaHQgdGhlIHByZXNzZWQgYnV0dG9ucy4KICovCm1vZHVsZS5leHBvcnRzLkNvbXBvbmVudCA9IHJlZ2lzdGVyQ29tcG9uZW50KCd2aXZlLWNvbnRyb2xzJywgewogIHNjaGVtYTogewogICAgaGFuZDoge2RlZmF1bHQ6ICdsZWZ0J30sCiAgICBidXR0b25Db2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjRkFGQUZBJ30sICAvLyBPZmYtd2hpdGUuCiAgICBidXR0b25IaWdobGlnaHRDb2xvcjoge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjMjJEMUVFJ30sICAvLyBMaWdodCBibHVlLgogICAgbW9kZWw6IHtkZWZhdWx0OiB0cnVlfSwKICAgIG9yaWVudGF0aW9uT2Zmc2V0OiB7dHlwZTogJ3ZlYzMnfQogIH0sCgogIG1hcHBpbmc6IElOUFVUX01BUFBJTkcsCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMuY29udHJvbGxlclByZXNlbnQgPSBmYWxzZTsKICAgIHRoaXMubGFzdENvbnRyb2xsZXJDaGVjayA9IDA7CiAgICB0aGlzLm9uQnV0dG9uQ2hhbmdlZCA9IGJpbmQodGhpcy5vbkJ1dHRvbkNoYW5nZWQsIHRoaXMpOwogICAgdGhpcy5vbkJ1dHRvbkRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ2Rvd24nLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25VcCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndXAnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaEVuZCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndG91Y2hlbmQnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaHN0YXJ0Jywgc2VsZik7IH07CiAgICB0aGlzLnByZXZpb3VzQnV0dG9uVmFsdWVzID0ge307CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtID0gdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMucmVuZGVyZXI7CgogICAgdGhpcy5iaW5kTWV0aG9kcygpOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB0aGlzLmNvbnRyb2xsZXJJbmRleCA9IGRhdGEuaGFuZCA9PT0gJ3JpZ2h0JyA/IDAgOiBkYXRhLmhhbmQgPT09ICdsZWZ0JyA/IDEgOiAyOwogIH0sCgogIHBsYXk6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50KCk7CiAgICB0aGlzLmFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIoKTsKICB9LAoKICBwYXVzZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpOwogICAgdGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Nb2RlbExvYWRlZCA9IGJpbmQodGhpcy5vbk1vZGVsTG9hZGVkLCB0aGlzKTsKICAgIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSA9IGJpbmQodGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCB0aGlzKTsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50ID0gYmluZCh0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCwgdGhpcyk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIgPSBiaW5kKHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciwgdGhpcyk7CiAgICB0aGlzLm9uQXhpc01vdmVkID0gYmluZCh0aGlzLm9uQXhpc01vdmVkLCB0aGlzKTsKICB9LAoKICBhZGRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbmNoYW5nZWQnLCB0aGlzLm9uQnV0dG9uQ2hhbmdlZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25kb3duJywgdGhpcy5vbkJ1dHRvbkRvd24pOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9udXAnLCB0aGlzLm9uQnV0dG9uVXApOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVsLWxvYWRlZCcsIHRoaXMub25Nb2RlbExvYWRlZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgdGhpcy5jb250cm9sbGVyRXZlbnRzQWN0aXZlID0gdHJ1ZTsKICB9LAoKICByZW1vdmVFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbmNoYW5nZWQnLCB0aGlzLm9uQnV0dG9uQ2hhbmdlZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25kb3duJywgdGhpcy5vbkJ1dHRvbkRvd24pOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9udXAnLCB0aGlzLm9uQnV0dG9uVXApOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0KTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vZGVsLWxvYWRlZCcsIHRoaXMub25Nb2RlbExvYWRlZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdheGlzbW92ZScsIHRoaXMub25BeGlzTW92ZWQpOwogICAgdGhpcy5jb250cm9sbGVyRXZlbnRzQWN0aXZlID0gZmFsc2U7CiAgfSwKCiAgLyoqCiAgICogT25jZSBPcGVuVlIgcmV0dXJucyBjb3JyZWN0IGhhbmQgZGF0YSBpbiBzdXBwb3J0aW5nIGJyb3dzZXJzLCB3ZSBjYW4gdXNlIGhhbmQgcHJvcGVydHkuCiAgICogdmFyIGlzUHJlc2VudCA9IGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCh0aGlzLmVsLnNjZW5lRWwsIEdBTUVQQURfSURfUFJFRklYLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaGFuZDogZGF0YS5oYW5kIH0pOwogICAqIFVudGlsIHRoZW4sIHVzZSBoYXJkY29kZWQgaW5kZXguCiAgICovCiAgY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCh0aGlzLCBHQU1FUEFEX0lEX1BSRUZJWCwge2luZGV4OiB0aGlzLmNvbnRyb2xsZXJJbmRleCwgaGFuZDogZGF0YS5oYW5kfSk7CiAgfSwKCiAgaW5qZWN0VHJhY2tlZENvbnRyb2xzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CgogICAgLy8gSWYgd2UgaGF2ZSBhbiBPcGVuVlIgR2FtZXBhZCwgdXNlIHRoZSBmaXhlZCBtYXBwaW5nLgogICAgZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzJywgewogICAgICBpZFByZWZpeDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIGhhbmQ6IGRhdGEuaGFuZCwKICAgICAgY29udHJvbGxlcjogdGhpcy5jb250cm9sbGVySW5kZXgsCiAgICAgIG9yaWVudGF0aW9uT2Zmc2V0OiBkYXRhLm9yaWVudGF0aW9uT2Zmc2V0CiAgICB9KTsKCiAgICAvLyBMb2FkIG1vZGVsLgogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnb2JqLW1vZGVsJywgewogICAgICBvYmo6IFZJVkVfQ09OVFJPTExFUl9NT0RFTF9PQkpfVVJMLAogICAgICBtdGw6IFZJVkVfQ09OVFJPTExFUl9NT0RFTF9PQkpfTVRMCiAgICB9KTsKICB9LAoKICBhZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgcmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5zY2VuZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgZmFsc2UpOwogIH0sCgogIG9uQ29udHJvbGxlcnNVcGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50KCk7CiAgfSwKCiAgLyoqCiAgICogUm90YXRlIHRoZSB0cmlnZ2VyIGJ1dHRvbiBiYXNlZCBvbiBob3cgaGFyZCB0aGUgdHJpZ2dlciBpcyBwcmVzc2VkLgogICAqLwogIG9uQnV0dG9uQ2hhbmdlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGJ1dHRvbiA9IHRoaXMubWFwcGluZy5idXR0b25zW2V2dC5kZXRhaWwuaWRdOwogICAgdmFyIGJ1dHRvbk1lc2hlcyA9IHRoaXMuYnV0dG9uTWVzaGVzOwogICAgdmFyIGFuYWxvZ1ZhbHVlOwoKICAgIGlmICghYnV0dG9uKSB7IHJldHVybjsgfQoKICAgIGlmIChidXR0b24gPT09ICd0cmlnZ2VyJykgewogICAgICBhbmFsb2dWYWx1ZSA9IGV2dC5kZXRhaWwuc3RhdGUudmFsdWU7CiAgICAgIC8vIFVwZGF0ZSB0cmlnZ2VyIHJvdGF0aW9uIGRlcGVuZGluZyBvbiBidXR0b24gdmFsdWUuCiAgICAgIGlmIChidXR0b25NZXNoZXMgJiYgYnV0dG9uTWVzaGVzLnRyaWdnZXIpIHsKICAgICAgICBidXR0b25NZXNoZXMudHJpZ2dlci5yb3RhdGlvbi54ID0gLWFuYWxvZ1ZhbHVlICogKE1hdGguUEkgLyAxMik7CiAgICAgIH0KICAgIH0KCiAgICAvLyBQYXNzIGFsb25nIGNoYW5nZWQgZXZlbnQgd2l0aCBidXR0b24gc3RhdGUsIHVzaW5nIGJ1dHRvbiBtYXBwaW5nIGZvciBjb252ZW5pZW5jZS4KICAgIHRoaXMuZWwuZW1pdChidXR0b24gKyAnY2hhbmdlZCcsIGV2dC5kZXRhaWwuc3RhdGUpOwogIH0sCgogIG9uTW9kZWxMb2FkZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIHZhciBidXR0b25NZXNoZXM7CiAgICB2YXIgY29udHJvbGxlck9iamVjdDNEID0gZXZ0LmRldGFpbC5tb2RlbDsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBpZiAoIXRoaXMuZGF0YS5tb2RlbCkgeyByZXR1cm47IH0KCiAgICAvLyBTdG9yZSBidXR0b24gbWVzaGVzIG9iamVjdCB0byBiZSBhYmxlIHRvIGNoYW5nZSB0aGVpciBjb2xvcnMuCiAgICBidXR0b25NZXNoZXMgPSB0aGlzLmJ1dHRvbk1lc2hlcyA9IHt9OwogICAgYnV0dG9uTWVzaGVzLmdyaXAgPSB7CiAgICAgIGxlZnQ6IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ2xlZnRncmlwJyksCiAgICAgIHJpZ2h0OiBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdyaWdodGdyaXAnKQogICAgfTsKICAgIGJ1dHRvbk1lc2hlcy5tZW51ID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnbWVudWJ1dHRvbicpOwogICAgYnV0dG9uTWVzaGVzLnN5c3RlbSA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ3N5c3RlbWJ1dHRvbicpOwogICAgYnV0dG9uTWVzaGVzLnRyYWNrcGFkID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgndG91Y2hwYWQnKTsKICAgIGJ1dHRvbk1lc2hlcy50cmlnZ2VyID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgndHJpZ2dlcicpOwoKICAgIC8vIFNldCBkZWZhdWx0IGNvbG9ycy4KICAgIE9iamVjdC5rZXlzKGJ1dHRvbk1lc2hlcykuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uTmFtZSkgewogICAgICBzZWxmLnNldEJ1dHRvbkNvbG9yKGJ1dHRvbk5hbWUsIHNlbGYuZGF0YS5idXR0b25Db2xvcik7CiAgICB9KTsKCiAgICAvLyBPZmZzZXQgcGl2b3QgcG9pbnQuCiAgICBjb250cm9sbGVyT2JqZWN0M0QucG9zaXRpb24uc2V0KDAsIC0wLjAxNSwgMC4wNCk7CiAgfSwKCiAgb25BeGlzTW92ZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIGVtaXRJZkF4ZXNDaGFuZ2VkKHRoaXMsIHRoaXMubWFwcGluZy5heGVzLCBldnQpOwogIH0sCgogIHVwZGF0ZU1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgZXZ0TmFtZSkgewogICAgdmFyIGNvbG9yOwogICAgdmFyIGlzVG91Y2g7CiAgICBpZiAoIXRoaXMuZGF0YS5tb2RlbCkgeyByZXR1cm47IH0KCiAgICBpc1RvdWNoID0gZXZ0TmFtZS5pbmRleE9mKCd0b3VjaCcpICE9PSAtMTsKICAgIC8vIERvbid0IGNoYW5nZSBjb2xvciBmb3IgdHJhY2twYWQgdG91Y2guCiAgICBpZiAoaXNUb3VjaCkgeyByZXR1cm47IH0KCiAgICAvLyBVcGRhdGUgY29sb3JzLgogICAgY29sb3IgPSBldnROYW1lID09PSAndXAnID8gdGhpcy5kYXRhLmJ1dHRvbkNvbG9yIDogdGhpcy5kYXRhLmJ1dHRvbkhpZ2hsaWdodENvbG9yOwogICAgdGhpcy5zZXRCdXR0b25Db2xvcihidXR0b25OYW1lLCBjb2xvcik7CiAgfSwKCiAgc2V0QnV0dG9uQ29sb3I6IGZ1bmN0aW9uIChidXR0b25OYW1lLCBjb2xvcikgewogICAgdmFyIGJ1dHRvbk1lc2hlcyA9IHRoaXMuYnV0dG9uTWVzaGVzOwogICAgdmFyIHJlbmRlcmVyU3lzdGVtID0gdGhpcy5yZW5kZXJlclN5c3RlbTsKCiAgICBpZiAoIWJ1dHRvbk1lc2hlcykgeyByZXR1cm47IH0KCiAgICAvLyBOZWVkIHRvIGRvIGJvdGggbGVmdCBhbmQgcmlnaHQgc2lkZXMgZm9yIGdyaXAuCiAgICBpZiAoYnV0dG9uTmFtZSA9PT0gJ2dyaXAnKSB7CiAgICAgIGJ1dHRvbk1lc2hlcy5ncmlwLmxlZnQubWF0ZXJpYWwuY29sb3Iuc2V0KGNvbG9yKTsKICAgICAgYnV0dG9uTWVzaGVzLmdyaXAucmlnaHQubWF0ZXJpYWwuY29sb3Iuc2V0KGNvbG9yKTsKICAgICAgcmVuZGVyZXJTeXN0ZW0uYXBwbHlDb2xvckNvcnJlY3Rpb24oYnV0dG9uTWVzaGVzLmdyaXAubGVmdC5tYXRlcmlhbC5jb2xvcik7CiAgICAgIHJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKGJ1dHRvbk1lc2hlcy5ncmlwLnJpZ2h0Lm1hdGVyaWFsLmNvbG9yKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgYnV0dG9uTWVzaGVzW2J1dHRvbk5hbWVdLm1hdGVyaWFsLmNvbG9yLnNldChjb2xvcik7CiAgICByZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbihidXR0b25NZXNoZXNbYnV0dG9uTmFtZV0ubWF0ZXJpYWwuY29sb3IpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vdXRpbHMvIjoxODIsIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvdHJhY2tlZC1jb250cm9scyI6MTkwfV0sOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKCnZhciB0cmFja2VkQ29udHJvbHNVdGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMnKTsKdmFyIGNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cDsKdmFyIGVtaXRJZkF4ZXNDaGFuZ2VkID0gdHJhY2tlZENvbnRyb2xzVXRpbHMuZW1pdElmQXhlc0NoYW5nZWQ7CnZhciBvbkJ1dHRvbkV2ZW50ID0gdHJhY2tlZENvbnRyb2xzVXRpbHMub25CdXR0b25FdmVudDsKCnZhciBHQU1FUEFEX0lEX1BSRUZJWCA9ICdIVEMgVml2ZSBGb2N1cyc7Cgp2YXIgVklWRV9GT0NVU19DT05UUk9MTEVSX01PREVMX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvdml2ZS9mb2N1cy1jb250cm9sbGVyL2ZvY3VzLWNvbnRyb2xsZXIuZ2x0Zic7CgovKioKICogVml2ZSBGb2N1cyBjb250cm9scy4KICogSW50ZXJmYWNlIHdpdGggVml2ZSBGb2N1cyBjb250cm9sbGVyIGFuZCBtYXAgR2FtZXBhZCBldmVudHMgdG8KICogY29udHJvbGxlciBidXR0b25zOiB0cmFja3BhZCwgdHJpZ2dlcgogKiBMb2FkIGEgY29udHJvbGxlciBtb2RlbCBhbmQgaGlnaGxpZ2h0IHRoZSBwcmVzc2VkIGJ1dHRvbnMuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgndml2ZS1mb2N1cy1jb250cm9scycsIHsKICBzY2hlbWE6IHsKICAgIGhhbmQ6IHtkZWZhdWx0OiAnJ30sICAvLyBUaGlzIGluZm9ybXMgdGhlIGRlZ2VuZXJhdGUgYXJtIG1vZGVsLgogICAgYnV0dG9uVG91Y2hlZENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyNCQkJCQkInfSwKICAgIGJ1dHRvbkhpZ2hsaWdodENvbG9yOiB7dHlwZTogJ2NvbG9yJywgZGVmYXVsdDogJyM3QTdBN0EnfSwKICAgIG1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBvcmllbnRhdGlvbk9mZnNldDoge3R5cGU6ICd2ZWMzJ30sCiAgICBhcm1Nb2RlbDoge2RlZmF1bHQ6IHRydWV9CiAgfSwKCiAgLyoqCiAgICogQnV0dG9uIElEczoKICAgKiAwIC0gdHJhY2twYWQKICAgKiAxIC0gdHJpZ2dlcgogICAqLwogIG1hcHBpbmc6IHsKICAgIGF4ZXM6IHt0cmFja3BhZDogWzAsIDFdfSwKICAgIGJ1dHRvbnM6IFsndHJhY2twYWQnLCAndHJpZ2dlciddCiAgfSwKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Nb2RlbExvYWRlZCA9IGJpbmQodGhpcy5vbk1vZGVsTG9hZGVkLCB0aGlzKTsKICAgIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSA9IGJpbmQodGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCB0aGlzKTsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50ID0gYmluZCh0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCwgdGhpcyk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIgPSBiaW5kKHRoaXMucmVtb3ZlQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lciwgdGhpcyk7CiAgICB0aGlzLm9uQXhpc01vdmVkID0gYmluZCh0aGlzLm9uQXhpc01vdmVkLCB0aGlzKTsKICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB0aGlzLm9uQnV0dG9uQ2hhbmdlZCA9IGJpbmQodGhpcy5vbkJ1dHRvbkNoYW5nZWQsIHRoaXMpOwogICAgdGhpcy5vbkJ1dHRvbkRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ2Rvd24nLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25VcCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndXAnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd0b3VjaHN0YXJ0Jywgc2VsZik7IH07CiAgICB0aGlzLm9uQnV0dG9uVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoZW5kJywgc2VsZik7IH07CiAgICB0aGlzLmNvbnRyb2xsZXJQcmVzZW50ID0gZmFsc2U7CiAgICB0aGlzLmxhc3RDb250cm9sbGVyQ2hlY2sgPSAwOwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwogIH0sCgogIGFkZEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9uY2hhbmdlZCcsIHRoaXMub25CdXR0b25DaGFuZ2VkKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbmRvd24nLCB0aGlzLm9uQnV0dG9uRG93bik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b251cCcsIHRoaXMub25CdXR0b25VcCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2F4aXNtb3ZlJywgdGhpcy5vbkF4aXNNb3ZlZCk7CiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHNBY3RpdmUgPSB0cnVlOwogICAgdGhpcy5hZGRDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b25jaGFuZ2VkJywgdGhpcy5vbkJ1dHRvbkNoYW5nZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uZG93bicsIHRoaXMub25CdXR0b25Eb3duKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbnVwJywgdGhpcy5vbkJ1dHRvblVwKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQnV0dG9uVG91Y2hTdGFydCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25CdXR0b25Ub3VjaEVuZCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb2RlbC1sb2FkZWQnLCB0aGlzLm9uTW9kZWxMb2FkZWQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogICAgdGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50OiBmdW5jdGlvbiAoKSB7CiAgICBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAodGhpcywgR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGFuZCA/IHtoYW5kOiB0aGlzLmRhdGEuaGFuZH0gOiB7fSk7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICAgIHRoaXMuYWRkQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcigpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7CiAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIoKTsKICB9LAoKICBpbmplY3RUcmFja2VkQ29udHJvbHM6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbCA9IHRoaXMuZWw7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIGVsLnNldEF0dHJpYnV0ZSgndHJhY2tlZC1jb250cm9scycsIHsKICAgICAgYXJtTW9kZWw6IGRhdGEuYXJtTW9kZWwsCiAgICAgIGlkUHJlZml4OiBHQU1FUEFEX0lEX1BSRUZJWCwKICAgICAgb3JpZW50YXRpb25PZmZzZXQ6IGRhdGEub3JpZW50YXRpb25PZmZzZXQKICAgIH0pOwogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnZ2x0Zi1tb2RlbCcsIFZJVkVfRk9DVVNfQ09OVFJPTExFUl9NT0RFTF9VUkwpOwogIH0sCgogIGFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICByZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVsLnNjZW5lRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcnN1cGRhdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJzVXBkYXRlLCBmYWxzZSk7CiAgfSwKCiAgb25Db250cm9sbGVyc1VwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQoKTsKICB9LAoKICBvbk1vZGVsTG9hZGVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgY29udHJvbGxlck9iamVjdDNEID0gZXZ0LmRldGFpbC5tb2RlbDsKICAgIHZhciBidXR0b25NZXNoZXM7CgogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICBidXR0b25NZXNoZXMgPSB0aGlzLmJ1dHRvbk1lc2hlcyA9IHt9OwogICAgYnV0dG9uTWVzaGVzLnRyaWdnZXIgPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdCdW1wZXJLZXknKTsKICAgIGJ1dHRvbk1lc2hlcy50cmlnZ2VyUHJlc3NlZCA9IGNvbnRyb2xsZXJPYmplY3QzRC5nZXRPYmplY3RCeU5hbWUoJ0J1bXBlcktleV9QcmVzcycpOwogICAgaWYgKGJ1dHRvbk1lc2hlcy50cmlnZ2VyUHJlc3NlZCkgewogICAgICBidXR0b25NZXNoZXMudHJpZ2dlclByZXNzZWQudmlzaWJsZSA9IGZhbHNlOwogICAgfQogICAgYnV0dG9uTWVzaGVzLnRyYWNrcGFkID0gY29udHJvbGxlck9iamVjdDNELmdldE9iamVjdEJ5TmFtZSgnVG91Y2hQYWQnKTsKICAgIGJ1dHRvbk1lc2hlcy50cmFja3BhZFByZXNzZWQgPSBjb250cm9sbGVyT2JqZWN0M0QuZ2V0T2JqZWN0QnlOYW1lKCdUb3VjaFBhZF9QcmVzcycpOwogICAgaWYgKGJ1dHRvbk1lc2hlcy50cmFja3BhZFByZXNzZWQpIHsKICAgICAgYnV0dG9uTWVzaGVzLnRyYWNrcGFkUHJlc3NlZC52aXNpYmxlID0gZmFsc2U7CiAgICB9CiAgfSwKCiAgLy8gTm8gYW5hbG9nIGJ1dHRvbnMsIG9ubHkgZW1pdHMgMC8xIHZhbHVlcwogIG9uQnV0dG9uQ2hhbmdlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGJ1dHRvbiA9IHRoaXMubWFwcGluZy5idXR0b25zW2V2dC5kZXRhaWwuaWRdOwogICAgaWYgKCFidXR0b24pIHJldHVybjsKICAgIC8vIFBhc3MgYWxvbmcgY2hhbmdlZCBldmVudCB3aXRoIGJ1dHRvbiBzdGF0ZSwgdXNpbmcgYnV0dG9uIG1hcHBpbmcgZm9yIGNvbnZlbmllbmNlLgogICAgdGhpcy5lbC5lbWl0KGJ1dHRvbiArICdjaGFuZ2VkJywgZXZ0LmRldGFpbC5zdGF0ZSk7CiAgfSwKCiAgb25BeGlzTW92ZWQ6IGZ1bmN0aW9uIChldnQpIHsKICAgIGVtaXRJZkF4ZXNDaGFuZ2VkKHRoaXMsIHRoaXMubWFwcGluZy5heGVzLCBldnQpOwogIH0sCgogIHVwZGF0ZU1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgZXZ0TmFtZSkgewogICAgaWYgKCF0aGlzLmRhdGEubW9kZWwpIHsgcmV0dXJuOyB9CiAgICB0aGlzLnVwZGF0ZUJ1dHRvbk1vZGVsKGJ1dHRvbk5hbWUsIGV2dE5hbWUpOwogIH0sCgogIHVwZGF0ZUJ1dHRvbk1vZGVsOiBmdW5jdGlvbiAoYnV0dG9uTmFtZSwgc3RhdGUpIHsKICAgIHZhciBidXR0b25NZXNoZXMgPSB0aGlzLmJ1dHRvbk1lc2hlczsKICAgIHZhciBwcmVzc2VkTmFtZSA9IGJ1dHRvbk5hbWUgKyAnUHJlc3NlZCc7CiAgICBpZiAoIWJ1dHRvbk1lc2hlcyB8fCAhYnV0dG9uTWVzaGVzW2J1dHRvbk5hbWVdIHx8ICFidXR0b25NZXNoZXNbcHJlc3NlZE5hbWVdKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciBjb2xvcjsKICAgIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgY2FzZSAnZG93bic6CiAgICAgICAgY29sb3IgPSB0aGlzLmRhdGEuYnV0dG9uSGlnaGxpZ2h0Q29sb3I7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOgogICAgICAgIGNvbG9yID0gdGhpcy5kYXRhLmJ1dHRvblRvdWNoZWRDb2xvcjsKICAgICAgICBicmVhazsKICAgIH0KICAgIGlmIChjb2xvcikgewogICAgICBidXR0b25NZXNoZXNbcHJlc3NlZE5hbWVdLm1hdGVyaWFsLmNvbG9yLnNldChjb2xvcik7CiAgICB9CiAgICBidXR0b25NZXNoZXNbcHJlc3NlZE5hbWVdLnZpc2libGUgPSAhIWNvbG9yOwogICAgYnV0dG9uTWVzaGVzW2J1dHRvbk5hbWVdLnZpc2libGUgPSAhY29sb3I7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi91dGlscy9iaW5kIjoxNzYsIi4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMiOjE5MH1dLDk5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIEtFWUNPREVfVE9fQ09ERSA9IF9kZXJlcV8oJy4uL2NvbnN0YW50cycpLmtleWJvYXJkZXZlbnQuS0VZQ09ERV9UT19DT0RFOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbXBvbmVudCcpLnJlZ2lzdGVyQ29tcG9uZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7Cgp2YXIgYmluZCA9IHV0aWxzLmJpbmQ7CnZhciBzaG91bGRDYXB0dXJlS2V5RXZlbnQgPSB1dGlscy5zaG91bGRDYXB0dXJlS2V5RXZlbnQ7Cgp2YXIgQ0xBTVBfVkVMT0NJVFkgPSAwLjAwMDAxOwp2YXIgTUFYX0RFTFRBID0gMC4yOwp2YXIgS0VZUyA9IFsKICAnS2V5VycsICdLZXlBJywgJ0tleVMnLCAnS2V5RCcsCiAgJ0Fycm93VXAnLCAnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnLCAnQXJyb3dEb3duJwpdOwoKLyoqCiAqIFdBU0QgY29tcG9uZW50IHRvIGNvbnRyb2wgZW50aXRpZXMgdXNpbmcgV0FTRCBrZXlzLgogKi8KbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gcmVnaXN0ZXJDb21wb25lbnQoJ3dhc2QtY29udHJvbHMnLCB7CiAgc2NoZW1hOiB7CiAgICBhY2NlbGVyYXRpb246IHtkZWZhdWx0OiA2NX0sCiAgICBhZEF4aXM6IHtkZWZhdWx0OiAneCcsIG9uZU9mOiBbJ3gnLCAneScsICd6J119LAogICAgYWRFbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBhZEludmVydGVkOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgZW5hYmxlZDoge2RlZmF1bHQ6IHRydWV9LAogICAgZmx5OiB7ZGVmYXVsdDogZmFsc2V9LAogICAgd3NBeGlzOiB7ZGVmYXVsdDogJ3onLCBvbmVPZjogWyd4JywgJ3knLCAneiddfSwKICAgIHdzRW5hYmxlZDoge2RlZmF1bHQ6IHRydWV9LAogICAgd3NJbnZlcnRlZDoge2RlZmF1bHQ6IGZhbHNlfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIC8vIFRvIGtlZXAgdHJhY2sgb2YgdGhlIHByZXNzZWQga2V5cy4KICAgIHRoaXMua2V5cyA9IHt9OwogICAgdGhpcy5lYXNpbmcgPSAxLjE7CgogICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CgogICAgLy8gQmluZCBtZXRob2RzIGFuZCBhZGQgZXZlbnQgbGlzdGVuZXJzLgogICAgdGhpcy5vbkJsdXIgPSBiaW5kKHRoaXMub25CbHVyLCB0aGlzKTsKICAgIHRoaXMub25Gb2N1cyA9IGJpbmQodGhpcy5vbkZvY3VzLCB0aGlzKTsKICAgIHRoaXMub25LZXlEb3duID0gYmluZCh0aGlzLm9uS2V5RG93biwgdGhpcyk7CiAgICB0aGlzLm9uS2V5VXAgPSBiaW5kKHRoaXMub25LZXlVcCwgdGhpcyk7CiAgICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSA9IGJpbmQodGhpcy5vblZpc2liaWxpdHlDaGFuZ2UsIHRoaXMpOwogICAgdGhpcy5hdHRhY2hWaXNpYmlsaXR5RXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICB0aWNrOiBmdW5jdGlvbiAodGltZSwgZGVsdGEpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciB2ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHk7CgogICAgaWYgKCF2ZWxvY2l0eVtkYXRhLmFkQXhpc10gJiYgIXZlbG9jaXR5W2RhdGEud3NBeGlzXSAmJgogICAgICAgIGlzRW1wdHlPYmplY3QodGhpcy5rZXlzKSkgeyByZXR1cm47IH0KCiAgICAvLyBVcGRhdGUgdmVsb2NpdHkuCiAgICBkZWx0YSA9IGRlbHRhIC8gMTAwMDsKICAgIHRoaXMudXBkYXRlVmVsb2NpdHkoZGVsdGEpOwoKICAgIGlmICghdmVsb2NpdHlbZGF0YS5hZEF4aXNdICYmICF2ZWxvY2l0eVtkYXRhLndzQXhpc10pIHsgcmV0dXJuOyB9CgogICAgLy8gR2V0IG1vdmVtZW50IHZlY3RvciBhbmQgdHJhbnNsYXRlIHBvc2l0aW9uLgogICAgZWwub2JqZWN0M0QucG9zaXRpb24uYWRkKHRoaXMuZ2V0TW92ZW1lbnRWZWN0b3IoZGVsdGEpKTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVtb3ZlS2V5RXZlbnRMaXN0ZW5lcnMoKTsKICAgIHRoaXMucmVtb3ZlVmlzaWJpbGl0eUV2ZW50TGlzdGVuZXJzKCk7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5hdHRhY2hLZXlFdmVudExpc3RlbmVycygpOwogIH0sCgogIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmtleXMgPSB7fTsKICAgIHRoaXMucmVtb3ZlS2V5RXZlbnRMaXN0ZW5lcnMoKTsKICB9LAoKICB1cGRhdGVWZWxvY2l0eTogZnVuY3Rpb24gKGRlbHRhKSB7CiAgICB2YXIgYWNjZWxlcmF0aW9uOwogICAgdmFyIGFkQXhpczsKICAgIHZhciBhZFNpZ247CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHZhciBrZXlzID0gdGhpcy5rZXlzOwogICAgdmFyIHZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eTsKICAgIHZhciB3c0F4aXM7CiAgICB2YXIgd3NTaWduOwoKICAgIGFkQXhpcyA9IGRhdGEuYWRBeGlzOwogICAgd3NBeGlzID0gZGF0YS53c0F4aXM7CgogICAgLy8gSWYgRlBTIHRvbyBsb3csIHJlc2V0IHZlbG9jaXR5LgogICAgaWYgKGRlbHRhID4gTUFYX0RFTFRBKSB7CiAgICAgIHZlbG9jaXR5W2FkQXhpc10gPSAwOwogICAgICB2ZWxvY2l0eVt3c0F4aXNdID0gMDsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIGh0dHBzOi8vZ2FtZWRldi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTUxMzgzL2ZyYW1lLXJhdGUtaW5kZXBlbmRhbnQtbW92ZW1lbnQtd2l0aC1hY2NlbGVyYXRpb24KICAgIHZhciBzY2FsZWRFYXNpbmcgPSBNYXRoLnBvdygxIC8gdGhpcy5lYXNpbmcsIGRlbHRhICogNjApOwogICAgLy8gVmVsb2NpdHkgRWFzaW5nLgogICAgaWYgKHZlbG9jaXR5W2FkQXhpc10gIT09IDApIHsKICAgICAgdmVsb2NpdHlbYWRBeGlzXSAtPSB2ZWxvY2l0eVthZEF4aXNdICogc2NhbGVkRWFzaW5nOwogICAgfQogICAgaWYgKHZlbG9jaXR5W3dzQXhpc10gIT09IDApIHsKICAgICAgdmVsb2NpdHlbd3NBeGlzXSAtPSB2ZWxvY2l0eVt3c0F4aXNdICogc2NhbGVkRWFzaW5nOwogICAgfQoKICAgIC8vIENsYW1wIHZlbG9jaXR5IGVhc2luZy4KICAgIGlmIChNYXRoLmFicyh2ZWxvY2l0eVthZEF4aXNdKSA8IENMQU1QX1ZFTE9DSVRZKSB7IHZlbG9jaXR5W2FkQXhpc10gPSAwOyB9CiAgICBpZiAoTWF0aC5hYnModmVsb2NpdHlbd3NBeGlzXSkgPCBDTEFNUF9WRUxPQ0lUWSkgeyB2ZWxvY2l0eVt3c0F4aXNdID0gMDsgfQoKICAgIGlmICghZGF0YS5lbmFibGVkKSB7IHJldHVybjsgfQoKICAgIC8vIFVwZGF0ZSB2ZWxvY2l0eSB1c2luZyBrZXlzIHByZXNzZWQuCiAgICBhY2NlbGVyYXRpb24gPSBkYXRhLmFjY2VsZXJhdGlvbjsKICAgIGlmIChkYXRhLmFkRW5hYmxlZCkgewogICAgICBhZFNpZ24gPSBkYXRhLmFkSW52ZXJ0ZWQgPyAtMSA6IDE7CiAgICAgIGlmIChrZXlzLktleUEgfHwga2V5cy5BcnJvd0xlZnQpIHsgdmVsb2NpdHlbYWRBeGlzXSAtPSBhZFNpZ24gKiBhY2NlbGVyYXRpb24gKiBkZWx0YTsgfQogICAgICBpZiAoa2V5cy5LZXlEIHx8IGtleXMuQXJyb3dSaWdodCkgeyB2ZWxvY2l0eVthZEF4aXNdICs9IGFkU2lnbiAqIGFjY2VsZXJhdGlvbiAqIGRlbHRhOyB9CiAgICB9CiAgICBpZiAoZGF0YS53c0VuYWJsZWQpIHsKICAgICAgd3NTaWduID0gZGF0YS53c0ludmVydGVkID8gLTEgOiAxOwogICAgICBpZiAoa2V5cy5LZXlXIHx8IGtleXMuQXJyb3dVcCkgeyB2ZWxvY2l0eVt3c0F4aXNdIC09IHdzU2lnbiAqIGFjY2VsZXJhdGlvbiAqIGRlbHRhOyB9CiAgICAgIGlmIChrZXlzLktleVMgfHwga2V5cy5BcnJvd0Rvd24pIHsgdmVsb2NpdHlbd3NBeGlzXSArPSB3c1NpZ24gKiBhY2NlbGVyYXRpb24gKiBkZWx0YTsgfQogICAgfQogIH0sCgogIGdldE1vdmVtZW50VmVjdG9yOiAoZnVuY3Rpb24gKCkgewogICAgdmFyIGRpcmVjdGlvblZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApOwogICAgdmFyIHJvdGF0aW9uRXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoMCwgMCwgMCwgJ1lYWicpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoZGVsdGEpIHsKICAgICAgdmFyIHJvdGF0aW9uID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ3JvdGF0aW9uJyk7CiAgICAgIHZhciB2ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHk7CiAgICAgIHZhciB4Um90YXRpb247CgogICAgICBkaXJlY3Rpb25WZWN0b3IuY29weSh2ZWxvY2l0eSk7CiAgICAgIGRpcmVjdGlvblZlY3Rvci5tdWx0aXBseVNjYWxhcihkZWx0YSk7CgogICAgICAvLyBBYnNvbHV0ZS4KICAgICAgaWYgKCFyb3RhdGlvbikgeyByZXR1cm4gZGlyZWN0aW9uVmVjdG9yOyB9CgogICAgICB4Um90YXRpb24gPSB0aGlzLmRhdGEuZmx5ID8gcm90YXRpb24ueCA6IDA7CgogICAgICAvLyBUcmFuc2Zvcm0gZGlyZWN0aW9uIHJlbGF0aXZlIHRvIGhlYWRpbmcuCiAgICAgIHJvdGF0aW9uRXVsZXIuc2V0KFRIUkVFLk1hdGguZGVnVG9SYWQoeFJvdGF0aW9uKSwgVEhSRUUuTWF0aC5kZWdUb1JhZChyb3RhdGlvbi55KSwgMCk7CiAgICAgIGRpcmVjdGlvblZlY3Rvci5hcHBseUV1bGVyKHJvdGF0aW9uRXVsZXIpOwogICAgICByZXR1cm4gZGlyZWN0aW9uVmVjdG9yOwogICAgfTsKICB9KSgpLAoKICBhdHRhY2hWaXNpYmlsaXR5RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5vbkJsdXIpOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5vbkZvY3VzKTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7CiAgfSwKCiAgcmVtb3ZlVmlzaWJpbGl0eUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25CbHVyKTsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMub25Gb2N1cyk7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UpOwogIH0sCgogIGF0dGFjaEtleUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXlVcCk7CiAgfSwKCiAgcmVtb3ZlS2V5RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pOwogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbktleVVwKTsKICB9LAoKICBvbkJsdXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucGF1c2UoKTsKICB9LAoKICBvbkZvY3VzOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnBsYXkoKTsKICB9LAoKICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHsKICAgICAgdGhpcy5vbkJsdXIoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMub25Gb2N1cygpOwogICAgfQogIH0sCgogIG9uS2V5RG93bjogZnVuY3Rpb24gKGV2ZW50KSB7CiAgICB2YXIgY29kZTsKICAgIGlmICghc2hvdWxkQ2FwdHVyZUtleUV2ZW50KGV2ZW50KSkgeyByZXR1cm47IH0KICAgIGNvZGUgPSBldmVudC5jb2RlIHx8IEtFWUNPREVfVE9fQ09ERVtldmVudC5rZXlDb2RlXTsKICAgIGlmIChLRVlTLmluZGV4T2YoY29kZSkgIT09IC0xKSB7IHRoaXMua2V5c1tjb2RlXSA9IHRydWU7IH0KICB9LAoKICBvbktleVVwOiBmdW5jdGlvbiAoZXZlbnQpIHsKICAgIHZhciBjb2RlOwogICAgY29kZSA9IGV2ZW50LmNvZGUgfHwgS0VZQ09ERV9UT19DT0RFW2V2ZW50LmtleUNvZGVdOwogICAgZGVsZXRlIHRoaXMua2V5c1tjb2RlXTsKICB9Cn0pOwoKZnVuY3Rpb24gaXNFbXB0eU9iamVjdCAoa2V5cykgewogIHZhciBrZXk7CiAgZm9yIChrZXkgaW4ga2V5cykgeyByZXR1cm4gZmFsc2U7IH0KICByZXR1cm4gdHJ1ZTsKfQoKfSx7Ii4uL2NvbnN0YW50cyI6MTAxLCIuLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvIjoxODJ9XSwxMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKiBnbG9iYWwgVEhSRUUgKi8KdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi91dGlscy9iaW5kJyk7Cgp2YXIgdHJhY2tlZENvbnRyb2xzVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy90cmFja2VkLWNvbnRyb2xzJyk7CnZhciBjaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXAgPSB0cmFja2VkQ29udHJvbHNVdGlscy5jaGVja0NvbnRyb2xsZXJQcmVzZW50QW5kU2V0dXA7CnZhciBlbWl0SWZBeGVzQ2hhbmdlZCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLmVtaXRJZkF4ZXNDaGFuZ2VkOwp2YXIgb25CdXR0b25FdmVudCA9IHRyYWNrZWRDb250cm9sc1V0aWxzLm9uQnV0dG9uRXZlbnQ7Cgp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKCnZhciBkZWJ1ZyA9IHV0aWxzLmRlYnVnKCdjb21wb25lbnRzOndpbmRvd3MtbW90aW9uLWNvbnRyb2xzOmRlYnVnJyk7CnZhciB3YXJuID0gdXRpbHMuZGVidWcoJ2NvbXBvbmVudHM6d2luZG93cy1tb3Rpb24tY29udHJvbHM6d2FybicpOwoKdmFyIERFRkFVTFRfSEFOREVETkVTUyA9IF9kZXJlcV8oJy4uL2NvbnN0YW50cycpLkRFRkFVTFRfSEFOREVETkVTUzsKCnZhciBNT0RFTF9CQVNFX1VSTCA9ICdodHRwczovL2Nkbi5hZnJhbWUuaW8vY29udHJvbGxlcnMvbWljcm9zb2Z0Lyc7CnZhciBNT0RFTF9GSUxFTkFNRVMgPSB7IGxlZnQ6ICdsZWZ0LmdsYicsIHJpZ2h0OiAncmlnaHQuZ2xiJywgZGVmYXVsdDogJ3VuaXZlcnNhbC5nbGInIH07Cgp2YXIgaXNXZWJYUkF2YWlsYWJsZSA9IF9kZXJlcV8oJy4uL3V0aWxzLycpLmRldmljZS5pc1dlYlhSQXZhaWxhYmxlOwoKdmFyIEdBTUVQQURfSURfV0VCWFIgPSAnd2luZG93cy1taXhlZC1yZWFsaXR5JzsKdmFyIEdBTUVQQURfSURfV0VCVlIgPSAnU3BhdGlhbCBDb250cm9sbGVyIChTcGF0aWFsIEludGVyYWN0aW9uIFNvdXJjZSkgJzsKdmFyIEdBTUVQQURfSURfUEFUVEVSTiA9IC8oWzAtOWEtekEtWl0rLVswLTlhLXpBLVpdKykkLzsKCnZhciBHQU1FUEFEX0lEX1BSRUZJWCA9IGlzV2ViWFJBdmFpbGFibGUgPyBHQU1FUEFEX0lEX1dFQlhSIDogR0FNRVBBRF9JRF9XRUJWUjsKCnZhciBJTlBVVF9NQVBQSU5HX1dFQlZSID0gewogIC8vIEEtRnJhbWUgc3BlY2lmaWMgc2VtYW50aWMgYXhpcyBuYW1lcwogIGF4ZXM6IHsndGh1bWJzdGljayc6IFswLCAxXSwgJ3RyYWNrcGFkJzogWzIsIDNdfSwKICAvLyBBLUZyYW1lIHNwZWNpZmljIHNlbWFudGljIGJ1dHRvbiBuYW1lcwogIGJ1dHRvbnM6IFsndGh1bWJzdGljaycsICd0cmlnZ2VyJywgJ2dyaXAnLCAnbWVudScsICd0cmFja3BhZCddLAogIC8vIEEgbWFwcGluZyBvZiB0aGUgc2VtYW50aWMgbmFtZSB0byBub2RlIG5hbWUgaW4gdGhlIGdsVEYgbW9kZWwgZmlsZSwKICAvLyB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZCBieSBheGlzIHZhbHVlLgogIC8vIFRoaXMgYXJyYXkgbWlycm9ycyB0aGUgYnJvd3NlciBHYW1lcGFkLmF4ZXMgYXJyYXksIHN1Y2ggdGhhdAogIC8vIHRoZSBtZXNoIGNvcnJlc3BvbmRpbmcgdG8gYXhpcyAwIGlzIGluIHRoaXMgYXJyYXkgaW5kZXggMC4KICBheGlzTWVzaE5hbWVzOiBbCiAgICAnVEhVTUJTVElDS19YJywKICAgICdUSFVNQlNUSUNLX1knLAogICAgJ1RPVUNIUEFEX1RPVUNIX1gnLAogICAgJ1RPVUNIUEFEX1RPVUNIX1knCiAgXSwKICAvLyBBIG1hcHBpbmcgb2YgdGhlIHNlbWFudGljIG5hbWUgdG8gYnV0dG9uIG5vZGUgbmFtZSBpbiB0aGUgZ2xURiBtb2RlbCBmaWxlLAogIC8vIHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIGJ5IGJ1dHRvbiB2YWx1ZS4KICBidXR0b25NZXNoTmFtZXM6IHsKICAgICd0cmlnZ2VyJzogJ1NFTEVDVCcsCiAgICAnbWVudSc6ICdNRU5VJywKICAgICdncmlwJzogJ0dSQVNQJywKICAgICd0aHVtYnN0aWNrJzogJ1RIVU1CU1RJQ0tfUFJFU1MnLAogICAgJ3RyYWNrcGFkJzogJ1RPVUNIUEFEX1BSRVNTJwogIH0sCiAgcG9pbnRpbmdQb3NlTWVzaE5hbWU6ICdQT0lOVElOR19QT1NFJwp9OwoKdmFyIElOUFVUX01BUFBJTkdfV0VCWFIgPSB7CiAgLy8gQS1GcmFtZSBzcGVjaWZpYyBzZW1hbnRpYyBheGlzIG5hbWVzCiAgYXhlczogeyd0b3VjaHBhZCc6IFswLCAxXSwgJ3RodW1ic3RpY2snOiBbMiwgM119LAogIC8vIEEtRnJhbWUgc3BlY2lmaWMgc2VtYW50aWMgYnV0dG9uIG5hbWVzCiAgYnV0dG9uczogWyd0cmlnZ2VyJywgJ3NxdWVlemUnLCAndG91Y2hwYWQnLCAndGh1bWJzdGljaycsICdtZW51J10sCiAgLy8gQSBtYXBwaW5nIG9mIHRoZSBzZW1hbnRpYyBuYW1lIHRvIG5vZGUgbmFtZSBpbiB0aGUgZ2xURiBtb2RlbCBmaWxlLAogIC8vIHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIGJ5IGF4aXMgdmFsdWUuCiAgLy8gVGhpcyBhcnJheSBtaXJyb3JzIHRoZSBicm93c2VyIEdhbWVwYWQuYXhlcyBhcnJheSwgc3VjaCB0aGF0CiAgLy8gdGhlIG1lc2ggY29ycmVzcG9uZGluZyB0byBheGlzIDAgaXMgaW4gdGhpcyBhcnJheSBpbmRleCAwLgogIGF4aXNNZXNoTmFtZXM6IFsKICAgICdUT1VDSFBBRF9UT1VDSF9YJywKICAgICdUT1VDSFBBRF9UT1VDSF9YJywKICAgICdUSFVNQlNUSUNLX1gnLAogICAgJ1RIVU1CU1RJQ0tfWScKICBdLAogIC8vIEEgbWFwcGluZyBvZiB0aGUgc2VtYW50aWMgbmFtZSB0byBidXR0b24gbm9kZSBuYW1lIGluIHRoZSBnbFRGIG1vZGVsIGZpbGUsCiAgLy8gdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQgYnkgYnV0dG9uIHZhbHVlLgogIGJ1dHRvbk1lc2hOYW1lczogewogICAgJ3RyaWdnZXInOiAnU0VMRUNUJywKICAgICdtZW51JzogJ01FTlUnLAogICAgJ3NxdWVlemUnOiAnR1JBU1AnLAogICAgJ3RodW1ic3RpY2snOiAnVEhVTUJTVElDS19QUkVTUycsCiAgICAndG91Y2hwYWQnOiAnVE9VQ0hQQURfUFJFU1MnCiAgfSwKICBwb2ludGluZ1Bvc2VNZXNoTmFtZTogJ1BPSU5USU5HX1BPU0UnCn07Cgp2YXIgSU5QVVRfTUFQUElORyA9IGlzV2ViWFJBdmFpbGFibGUgPyBJTlBVVF9NQVBQSU5HX1dFQlhSIDogSU5QVVRfTUFQUElOR19XRUJWUjsKCi8qKgogKiBXaW5kb3dzIE1vdGlvbiBDb250cm9sbGVyIGNvbnRyb2xzLgogKiBJbnRlcmZhY2Ugd2l0aCBXaW5kb3dzIE1vdGlvbiBDb250cm9sbGVyIGNvbnRyb2xsZXJzIGFuZCBtYXAgR2FtZXBhZCBldmVudHMgdG8KICogY29udHJvbGxlciBidXR0b25zOiB0cmFja3BhZCwgdHJpZ2dlciwgZ3JpcCwgbWVudSwgdGh1bWJzdGljawogKiBMb2FkIGEgY29udHJvbGxlciBtb2RlbCBhbmQgdHJhbnNmb3JtIHRoZSBwcmVzc2VkIGJ1dHRvbnMuCiAqLwptb2R1bGUuZXhwb3J0cy5Db21wb25lbnQgPSByZWdpc3RlckNvbXBvbmVudCgnd2luZG93cy1tb3Rpb24tY29udHJvbHMnLCB7CiAgc2NoZW1hOiB7CiAgICBoYW5kOiB7ZGVmYXVsdDogREVGQVVMVF9IQU5ERURORVNTfSwKICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgbXVsdGlwbGUgcGFpcnMgb2YgY29udHJvbGxlcnMgYXR0YWNoZWQgKGEgcGFpciBoYXMgYm90aCBsZWZ0IGFuZCByaWdodCkuCiAgICAvLyBTZXQgdGhpcyB0byAxIHRvIHVzZSBhIGNvbnRyb2xsZXIgZnJvbSB0aGUgc2Vjb25kIHBhaXIsIDIgZnJvbSB0aGUgdGhpcmQgcGFpciwgZXRjLgogICAgcGFpcjoge2RlZmF1bHQ6IDB9LAogICAgLy8gSWYgdHJ1ZSwgbG9hZHMgdGhlIGNvbnRyb2xsZXIgZ2xURiBhc3NldC4KICAgIG1vZGVsOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICAvLyBJZiB0cnVlLCB3aWxsIGhpZGUgdGhlIG1vZGVsIGZyb20gdGhlIHNjZW5lIGlmIG5vIG1hdGNoaW5nIGdhbWVwYWQgKGJhc2VkIG9uIElEICYgaGFuZCkgaXMgY29ubmVjdGVkLgogICAgaGlkZURpc2Nvbm5lY3RlZDoge2RlZmF1bHQ6IHRydWV9CiAgfSwKCiAgbWFwcGluZzogSU5QVVRfTUFQUElORywKCiAgYmluZE1ldGhvZHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub25Nb2RlbEVycm9yID0gYmluZCh0aGlzLm9uTW9kZWxFcnJvciwgdGhpcyk7CiAgICB0aGlzLm9uTW9kZWxMb2FkZWQgPSBiaW5kKHRoaXMub25Nb2RlbExvYWRlZCwgdGhpcyk7CiAgICB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUgPSBiaW5kKHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgdGhpcyk7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCA9IGJpbmQodGhpcy5jaGVja0lmQ29udHJvbGxlclByZXNlbnQsIHRoaXMpOwogICAgdGhpcy5vbkF4aXNNb3ZlZCA9IGJpbmQodGhpcy5vbkF4aXNNb3ZlZCwgdGhpcyk7CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHRoaXMub25CdXR0b25DaGFuZ2VkID0gYmluZCh0aGlzLm9uQnV0dG9uQ2hhbmdlZCwgdGhpcyk7CiAgICB0aGlzLm9uQnV0dG9uRG93biA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAnZG93bicsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblVwID0gZnVuY3Rpb24gKGV2dCkgeyBvbkJ1dHRvbkV2ZW50KGV2dC5kZXRhaWwuaWQsICd1cCcsIHNlbGYpOyB9OwogICAgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7IG9uQnV0dG9uRXZlbnQoZXZ0LmRldGFpbC5pZCwgJ3RvdWNoc3RhcnQnLCBzZWxmKTsgfTsKICAgIHRoaXMub25CdXR0b25Ub3VjaEVuZCA9IGZ1bmN0aW9uIChldnQpIHsgb25CdXR0b25FdmVudChldnQuZGV0YWlsLmlkLCAndG91Y2hlbmQnLCBzZWxmKTsgfTsKICAgIHRoaXMub25Db250cm9sbGVyQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkgeyBzZWxmLnNldE1vZGVsVmlzaWJpbGl0eSh0cnVlKTsgfTsKICAgIHRoaXMub25Db250cm9sbGVyRGlzY29ubmVjdGVkID0gZnVuY3Rpb24gKCkgeyBzZWxmLnNldE1vZGVsVmlzaWJpbGl0eShmYWxzZSk7IH07CiAgICB0aGlzLmNvbnRyb2xsZXJQcmVzZW50ID0gZmFsc2U7CiAgICB0aGlzLmxhc3RDb250cm9sbGVyQ2hlY2sgPSAwOwogICAgdGhpcy5wcmV2aW91c0J1dHRvblZhbHVlcyA9IHt9OwogICAgdGhpcy5iaW5kTWV0aG9kcygpOwoKICAgIC8vIENhY2hlIGZvciBzdWJtZXNoZXMgdGhhdCB3ZSBoYXZlIGxvb2tlZCB1cCBieSBuYW1lLgogICAgdGhpcy5sb2FkZWRNZXNoSW5mbyA9IHsKICAgICAgYnV0dG9uTWVzaGVzOiBudWxsLAogICAgICBheGlzTWVzaGVzOiBudWxsCiAgICB9OwoKICAgIC8vIFBvaW50aW5nIHBvc2VzCiAgICB0aGlzLnJheU9yaWdpbiA9IHsKICAgICAgb3JpZ2luOiBuZXcgVEhSRUUuVmVjdG9yMygpLAogICAgICBkaXJlY3Rpb246IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIC0xKSwKICAgICAgY3JlYXRlZEZyb21NZXNoOiBmYWxzZQogICAgfTsKCiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyY29ubmVjdGVkJywgdGhpcy5vbkNvbnRyb2xsZXJDb25uZWN0ZWQpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbGxlcmRpc2Nvbm5lY3RlZCcsIHRoaXMub25Db250cm9sbGVyRGlzY29ubmVjdGVkKTsKICB9LAoKICBhZGRFdmVudExpc3RlbmVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1dHRvbmNoYW5nZWQnLCB0aGlzLm9uQnV0dG9uQ2hhbmdlZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdidXR0b25kb3duJywgdGhpcy5vbkJ1dHRvbkRvd24pOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYnV0dG9udXAnLCB0aGlzLm9uQnV0dG9uVXApOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25CdXR0b25Ub3VjaFN0YXJ0KTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbkJ1dHRvblRvdWNoRW5kKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2F4aXNtb3ZlJywgdGhpcy5vbkF4aXNNb3ZlZCk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb2RlbC1lcnJvcicsIHRoaXMub25Nb2RlbEVycm9yKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVsLWxvYWRlZCcsIHRoaXMub25Nb2RlbExvYWRlZCk7CiAgICB0aGlzLmNvbnRyb2xsZXJFdmVudHNBY3RpdmUgPSB0cnVlOwogIH0sCgogIHJlbW92ZUV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWwgPSB0aGlzLmVsOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYnV0dG9uY2hhbmdlZCcsIHRoaXMub25CdXR0b25DaGFuZ2VkKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2J1dHRvbmRvd24nLCB0aGlzLm9uQnV0dG9uRG93bik7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdidXR0b251cCcsIHRoaXMub25CdXR0b25VcCk7CiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJ1dHRvblRvdWNoU3RhcnQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uQnV0dG9uVG91Y2hFbmQpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYXhpc21vdmUnLCB0aGlzLm9uQXhpc01vdmVkKTsKICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vZGVsLWVycm9yJywgdGhpcy5vbk1vZGVsRXJyb3IpOwogICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW9kZWwtbG9hZGVkJywgdGhpcy5vbk1vZGVsTG9hZGVkKTsKICAgIHRoaXMuY29udHJvbGxlckV2ZW50c0FjdGl2ZSA9IGZhbHNlOwogIH0sCgogIGNoZWNrSWZDb250cm9sbGVyUHJlc2VudDogZnVuY3Rpb24gKCkgewogICAgY2hlY2tDb250cm9sbGVyUHJlc2VudEFuZFNldHVwKHRoaXMsIEdBTUVQQURfSURfUFJFRklYLCB7CiAgICAgIGhhbmQ6IHRoaXMuZGF0YS5oYW5kLAogICAgICBpbmRleDogdGhpcy5kYXRhLnBhaXIKICAgIH0pOwogIH0sCgogIHBsYXk6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2hlY2tJZkNvbnRyb2xsZXJQcmVzZW50KCk7CiAgICB0aGlzLmFkZENvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXIoKTsKICB9LAoKICBwYXVzZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpOwogICAgdGhpcy5yZW1vdmVDb250cm9sbGVyc1VwZGF0ZUxpc3RlbmVyKCk7CiAgfSwKCiAgdXBkYXRlQ29udHJvbGxlck1vZGVsOiBmdW5jdGlvbiAoKSB7CiAgICAvLyBJZiB3ZSBkbyBub3Qgd2FudCB0byBsb2FkIGEgbW9kZWwsIG9yLCBoYXZlIGFscmVhZHkgbG9hZGVkIHRoZSBtb2RlbCwgZW1pdCB0aGUgY29udHJvbGxlcm1vZGVscmVhZHkgZXZlbnQuCiAgICBpZiAoIXRoaXMuZGF0YS5tb2RlbCB8fCB0aGlzLnJheU9yaWdpbi5jcmVhdGVkRnJvbU1lc2gpIHsKICAgICAgdGhpcy5tb2RlbFJlYWR5KCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgc291cmNlVXJsID0gdGhpcy5jcmVhdGVDb250cm9sbGVyTW9kZWxVcmwoKTsKICAgIHRoaXMubG9hZE1vZGVsKHNvdXJjZVVybCk7CiAgfSwKCiAgLyoqCiAgICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgY29uc3RydWN0cyBhIFVSTCBmcm9tIHRoZSBjb250cm9sbGVyIElEIHN1ZmZpeCwgZm9yIGZ1dHVyZSBwcm9vZmVkCiAgICogYXJ0IGFzc2V0cy4KICAgKi8KICBjcmVhdGVDb250cm9sbGVyTW9kZWxVcmw6IGZ1bmN0aW9uIChmb3JjZURlZmF1bHQpIHsKICAgIC8vIERldGVybWluZSB0aGUgZGV2aWNlIHNwZWNpZmljIGZvbGRlciBiYXNlZCBvbiB0aGUgSUQgc3VmZml4CiAgICB2YXIgdHJhY2tlZENvbnRyb2xzQ29tcG9uZW50ID0gdGhpcy5lbC5jb21wb25lbnRzWyd0cmFja2VkLWNvbnRyb2xzJ107CiAgICB2YXIgY29udHJvbGxlciA9IHRyYWNrZWRDb250cm9sc0NvbXBvbmVudCA/IHRyYWNrZWRDb250cm9sc0NvbXBvbmVudC5jb250cm9sbGVyIDogbnVsbDsKICAgIHZhciBkZXZpY2UgPSAnZGVmYXVsdCc7CiAgICB2YXIgaGFuZCA9IHRoaXMuZGF0YS5oYW5kOwogICAgdmFyIGZpbGVuYW1lOwoKICAgIGlmIChjb250cm9sbGVyICYmICF3aW5kb3cuaGFzTmF0aXZlV2ViWFJJbXBsZW1lbnRhdGlvbikgewogICAgICAvLyBSZWFkIGhhbmQgZGlyZWN0bHkgZnJvbSB0aGUgY29udHJvbGxlciwgcmF0aGVyIHRoYW4gdGhpcy5kYXRhLCBhcyBpbiB0aGUgY2FzZSB0aGF0IHRoZSBjb250cm9sbGVyCiAgICAgIC8vIGlzIHVuaGFuZGVkIHRoaXMuZGF0YSB3aWxsIHN0aWxsIGhhdmUgJ2xlZnQnIG9yICdyaWdodCcgKGRlcGVuZGluZyBvbiB3aGF0IHRoZSB1c2VyIGluc2VydGVkIGluIHRvIHRoZSBzY2VuZSkuCiAgICAgIC8vIEluIHRoaXMgY2FzZSwgd2Ugd2FudCB0byBsb2FkIHRoZSB1bml2ZXJzYWwgbW9kZWwsIHNvIG5lZWQgdG8gZ2V0IHRoZSAnJyBmcm9tIHRoZSBjb250cm9sbGVyLgogICAgICBoYW5kID0gY29udHJvbGxlci5oYW5kOwoKICAgICAgaWYgKCFmb3JjZURlZmF1bHQpIHsKICAgICAgICB2YXIgbWF0Y2ggPSBjb250cm9sbGVyLmlkLm1hdGNoKEdBTUVQQURfSURfUEFUVEVSTik7CiAgICAgICAgZGV2aWNlID0gKChtYXRjaCAmJiBtYXRjaFswXSkgfHwgZGV2aWNlKTsKICAgICAgfQogICAgfQoKICAgIC8vIEhhbmQKICAgIGZpbGVuYW1lID0gTU9ERUxfRklMRU5BTUVTW2hhbmRdIHx8IE1PREVMX0ZJTEVOQU1FUy5kZWZhdWx0OwoKICAgIC8vIEZpbmFsIHVybAogICAgcmV0dXJuIE1PREVMX0JBU0VfVVJMICsgZGV2aWNlICsgJy8nICsgZmlsZW5hbWU7CiAgfSwKCiAgaW5qZWN0VHJhY2tlZENvbnRyb2xzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCd0cmFja2VkLWNvbnRyb2xzJywgewogICAgICBpZFByZWZpeDogR0FNRVBBRF9JRF9QUkVGSVgsCiAgICAgIGNvbnRyb2xsZXI6IGRhdGEucGFpciwKICAgICAgaGFuZDogZGF0YS5oYW5kLAogICAgICBhcm1Nb2RlbDogZmFsc2UKICAgIH0pOwoKICAgIHRoaXMudXBkYXRlQ29udHJvbGxlck1vZGVsKCk7CiAgfSwKCiAgYWRkQ29udHJvbGxlcnNVcGRhdGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkgewogICAgdGhpcy5lbC5zY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHRoaXMub25Db250cm9sbGVyc1VwZGF0ZSwgZmFsc2UpOwogIH0sCgogIHJlbW92ZUNvbnRyb2xsZXJzVXBkYXRlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuc2NlbmVFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250cm9sbGVyc3VwZGF0ZWQnLCB0aGlzLm9uQ29udHJvbGxlcnNVcGRhdGUsIGZhbHNlKTsKICB9LAoKICBvbkNvbnRyb2xsZXJzVXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoZWNrSWZDb250cm9sbGVyUHJlc2VudCgpOwogIH0sCgogIG9uTW9kZWxFcnJvcjogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGRlZmF1bHRVcmwgPSB0aGlzLmNyZWF0ZUNvbnRyb2xsZXJNb2RlbFVybCh0cnVlKTsKICAgIGlmIChldnQuZGV0YWlsLnNyYyAhPT0gZGVmYXVsdFVybCkgewogICAgICB3YXJuKCdGYWlsZWQgdG8gbG9hZCBjb250cm9sbGVyIG1vZGVsIGZvciBkZXZpY2UsIGF0dGVtcHRpbmcgdG8gbG9hZCBkZWZhdWx0LicpOwogICAgICB0aGlzLmxvYWRNb2RlbChkZWZhdWx0VXJsKTsKICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oJ0ZhaWxlZCB0byBsb2FkIGRlZmF1bHQgY29udHJvbGxlciBtb2RlbC4nKTsKICAgIH0KICB9LAoKICBsb2FkTW9kZWw6IGZ1bmN0aW9uICh1cmwpIHsKICAgIC8vIFRoZSBtb2RlbCBpcyBsb2FkZWQgYnkgdGhlIGdsdGYtbW9kZWwgY29tcG9lbnQgd2hlbiB0aGlzIGF0dHJpYnV0ZSBpcyBpbml0aWFsbHkgc2V0LAogICAgLy8gcmVtb3ZlZCBhbmQgcmUtbG9hZGVkIGlmIHRoZSBnaXZlbiB1cmwgY2hhbmdlcy4KICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdnbHRmLW1vZGVsJywgJ3VybCgnICsgdXJsICsgJyknKTsKICB9LAoKICBvbk1vZGVsTG9hZGVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmNvbnRyb2xsZXJNb2RlbCA9IGV2dC5kZXRhaWwubW9kZWw7CiAgICB2YXIgbG9hZGVkTWVzaEluZm8gPSB0aGlzLmxvYWRlZE1lc2hJbmZvOwogICAgdmFyIGk7CiAgICB2YXIgbWVzaE5hbWU7CiAgICB2YXIgbWVzaDsKICAgIHZhciBtZXNoSW5mbzsKCiAgICBkZWJ1ZygnUHJvY2Vzc2luZyBtb2RlbCcpOwoKICAgIC8vIFJlc2V0IHRoZSBjYWNoZXMKICAgIGxvYWRlZE1lc2hJbmZvLmJ1dHRvbk1lc2hlcyA9IHt9OwogICAgbG9hZGVkTWVzaEluZm8uYXhpc01lc2hlcyA9IHt9OwoKICAgIC8vIENhY2hlIG91ciBtZXNoZXMgc28gd2UgYXJlbid0IHRyYXZlcnNpbmcgdGhlIGhpZXJhcmNoeSBwZXIgZnJhbWUKICAgIGlmIChyb290Tm9kZSkgewogICAgICAvLyBCdXR0b24gTWVzaGVzCiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLm1hcHBpbmcuYnV0dG9ucy5sZW5ndGg7IGkrKykgewogICAgICAgIG1lc2hOYW1lID0gdGhpcy5tYXBwaW5nLmJ1dHRvbk1lc2hOYW1lc1t0aGlzLm1hcHBpbmcuYnV0dG9uc1tpXV07CiAgICAgICAgaWYgKCFtZXNoTmFtZSkgewogICAgICAgICAgZGVidWcoJ1NraXBwaW5nIHVua25vd24gYnV0dG9uIGF0IGluZGV4OiAnICsgaSArICcgd2l0aCBtYXBwZWQgbmFtZTogJyArIHRoaXMubWFwcGluZy5idXR0b25zW2ldKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgbWVzaCA9IHJvb3ROb2RlLmdldE9iamVjdEJ5TmFtZShtZXNoTmFtZSk7CiAgICAgICAgaWYgKCFtZXNoKSB7CiAgICAgICAgICB3YXJuKCdNaXNzaW5nIGJ1dHRvbiBtZXNoIHdpdGggbmFtZTogJyArIG1lc2hOYW1lKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgbWVzaEluZm8gPSB7CiAgICAgICAgICBpbmRleDogaSwKICAgICAgICAgIHZhbHVlOiBnZXRJbW1lZGlhdGVDaGlsZEJ5TmFtZShtZXNoLCAnVkFMVUUnKSwKICAgICAgICAgIHByZXNzZWQ6IGdldEltbWVkaWF0ZUNoaWxkQnlOYW1lKG1lc2gsICdQUkVTU0VEJyksCiAgICAgICAgICB1bnByZXNzZWQ6IGdldEltbWVkaWF0ZUNoaWxkQnlOYW1lKG1lc2gsICdVTlBSRVNTRUQnKQogICAgICAgIH07CiAgICAgICAgaWYgKG1lc2hJbmZvLnZhbHVlICYmIG1lc2hJbmZvLnByZXNzZWQgJiYgbWVzaEluZm8udW5wcmVzc2VkKSB7CiAgICAgICAgICBsb2FkZWRNZXNoSW5mby5idXR0b25NZXNoZXNbdGhpcy5tYXBwaW5nLmJ1dHRvbnNbaV1dID0gbWVzaEluZm87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIHRoZSBtZXNoLCBpdCBzaW1wbHkgbWVhbnMgdGhpcyBidXR0b24gd29uJ3QgaGF2ZSB0cmFuc2Zvcm1zIGFwcGxpZWQgYXMgbWFwcGVkIGJ1dHRvbiB2YWx1ZSBjaGFuZ2VzLgogICAgICAgICAgd2FybignTWlzc2luZyBidXR0b24gc3VibWVzaCB1bmRlciBtZXNoIHdpdGggbmFtZTogJyArIG1lc2hOYW1lICsKICAgICAgICAgICAgJyhWQUxVRTogJyArICEhbWVzaEluZm8udmFsdWUgKwogICAgICAgICAgICAnLCBQUkVTU0VEOiAnICsgISFtZXNoSW5mby5wcmVzc2VkICsKICAgICAgICAgICAgJywgVU5QUkVTU0VEOicgKyAhIW1lc2hJbmZvLnVucHJlc3NlZCArCiAgICAgICAgICAgICcpJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBBeGlzIE1lc2hlcwogICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5tYXBwaW5nLmF4aXNNZXNoTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBtZXNoTmFtZSA9IHRoaXMubWFwcGluZy5heGlzTWVzaE5hbWVzW2ldOwogICAgICAgIGlmICghbWVzaE5hbWUpIHsKICAgICAgICAgIGRlYnVnKCdTa2lwcGluZyB1bmtub3duIGF4aXMgYXQgaW5kZXg6ICcgKyBpKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgbWVzaCA9IHJvb3ROb2RlLmdldE9iamVjdEJ5TmFtZShtZXNoTmFtZSk7CiAgICAgICAgaWYgKCFtZXNoKSB7CiAgICAgICAgICB3YXJuKCdNaXNzaW5nIGF4aXMgbWVzaCB3aXRoIG5hbWU6ICcgKyBtZXNoTmFtZSk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIG1lc2hJbmZvID0gewogICAgICAgICAgaW5kZXg6IGksCiAgICAgICAgICB2YWx1ZTogZ2V0SW1tZWRpYXRlQ2hpbGRCeU5hbWUobWVzaCwgJ1ZBTFVFJyksCiAgICAgICAgICBtaW46IGdldEltbWVkaWF0ZUNoaWxkQnlOYW1lKG1lc2gsICdNSU4nKSwKICAgICAgICAgIG1heDogZ2V0SW1tZWRpYXRlQ2hpbGRCeU5hbWUobWVzaCwgJ01BWCcpCiAgICAgICAgfTsKICAgICAgICBpZiAobWVzaEluZm8udmFsdWUgJiYgbWVzaEluZm8ubWluICYmIG1lc2hJbmZvLm1heCkgewogICAgICAgICAgbG9hZGVkTWVzaEluZm8uYXhpc01lc2hlc1tpXSA9IG1lc2hJbmZvOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3QgZmluZCB0aGUgbWVzaCwgaXQgc2ltcGx5IG1lYW5zIHRoaXMgYXhpcyB3b24ndCBoYXZlIHRyYW5zZm9ybXMgYXBwbGllZCBhcyBtYXBwZWQgYXhpcyB2YWx1ZXMgY2hhbmdlLgogICAgICAgICAgd2FybignTWlzc2luZyBheGlzIHN1Ym1lc2ggdW5kZXIgbWVzaCB3aXRoIG5hbWU6ICcgKyBtZXNoTmFtZSArCiAgICAgICAgICAgICcoVkFMVUU6ICcgKyAhIW1lc2hJbmZvLnZhbHVlICsKICAgICAgICAgICAgJywgTUlOOiAnICsgISFtZXNoSW5mby5taW4gKwogICAgICAgICAgICAnLCBNQVg6JyArICEhbWVzaEluZm8ubWF4ICsKICAgICAgICAgICAgJyknKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuY2FsY3VsYXRlUmF5T3JpZ2luRnJvbU1lc2gocm9vdE5vZGUpOwogICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyB0byBiZSB2aXNpYmxlIG9yIG5vdC4KICAgICAgdGhpcy5zZXRNb2RlbFZpc2liaWxpdHkoKTsKICAgIH0KCiAgICBkZWJ1ZygnTW9kZWwgbG9hZCBjb21wbGV0ZS4nKTsKCiAgICAvLyBMb29rIHRocm91Z2ggb25seSBpbW1lZGlhdGUgY2hpbGRyZW4uIFRoaXMgd2lsbCByZXR1cm4gbnVsbCBpZiBubyBtZXNoIGV4aXN0cyB3aXRoIHRoZSBnaXZlbiBuYW1lLgogICAgZnVuY3Rpb24gZ2V0SW1tZWRpYXRlQ2hpbGRCeU5hbWUgKG9iamVjdDNkLCB2YWx1ZSkgewogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iamVjdDNkLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBvYmogPSBvYmplY3QzZC5jaGlsZHJlbltpXTsKICAgICAgICBpZiAob2JqICYmIG9ialsnbmFtZSddID09PSB2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9LAoKICBjYWxjdWxhdGVSYXlPcmlnaW5Gcm9tTWVzaDogKGZ1bmN0aW9uICgpIHsKICAgIHZhciBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTsKICAgIHJldHVybiBmdW5jdGlvbiAocm9vdE5vZGUpIHsKICAgICAgdmFyIG1lc2g7CgogICAgICAvLyBDYWxjdWxhdGUgdGhlIHBvaW50ZXIgcG9zZSAodXNlZCBmb3IgcmF5cyksIGJ5IGFwcGx5aW5nIHRoZSB3b3JsZCB0cmFuc2Zvcm0gb2YgdGggUE9JTlRFUl9QT1NFIG5vZGUKICAgICAgLy8gaW4gdGhlIGdsVEYgKGFzc3VtZXMgdGhhdCByb290IG5vZGUgaXMgYXQgd29ybGQgb3JpZ2luKQogICAgICB0aGlzLnJheU9yaWdpbi5vcmlnaW4uc2V0KDAsIDAsIDApOwogICAgICB0aGlzLnJheU9yaWdpbi5kaXJlY3Rpb24uc2V0KDAsIDAsIC0xKTsKICAgICAgdGhpcy5yYXlPcmlnaW4uY3JlYXRlZEZyb21NZXNoID0gdHJ1ZTsKCiAgICAgIC8vIFRyeSB0byByZWFkIFBvaW50aW5nIHBvc2UgZnJvbSB0aGUgc291cmNlIG1vZGVsCiAgICAgIG1lc2ggPSByb290Tm9kZS5nZXRPYmplY3RCeU5hbWUodGhpcy5tYXBwaW5nLnBvaW50aW5nUG9zZU1lc2hOYW1lKTsKICAgICAgaWYgKG1lc2gpIHsKICAgICAgICB2YXIgcGFyZW50ID0gcm9vdE5vZGUucGFyZW50OwoKICAgICAgICAvLyBXZSBuZWVkIHRvIHJlYWQgcG9zZSB0cmFuc2Zvcm1zIGFjY3VtdWxhdGVkIGZyb20gdGhlIHJvb3Qgb2YgdGhlIGdsVEYsIG5vdCB0aGUgc2NlbmUuCiAgICAgICAgaWYgKHBhcmVudCkgewogICAgICAgICAgcm9vdE5vZGUucGFyZW50ID0gbnVsbDsKICAgICAgICAgIHJvb3ROb2RlLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpOwogICAgICAgICAgcm9vdE5vZGUucGFyZW50ID0gcGFyZW50OwogICAgICAgIH0KCiAgICAgICAgbWVzaC5nZXRXb3JsZFBvc2l0aW9uKHRoaXMucmF5T3JpZ2luLm9yaWdpbik7CiAgICAgICAgbWVzaC5nZXRXb3JsZFF1YXRlcm5pb24ocXVhdGVybmlvbik7CiAgICAgICAgdGhpcy5yYXlPcmlnaW4uZGlyZWN0aW9uLmFwcGx5UXVhdGVybmlvbihxdWF0ZXJuaW9uKTsKCiAgICAgICAgLy8gUmVjYWxjdWxhdGUgdGhlIHdvcmxkIG1hdHJpY2VzIG5vdyB0aGF0IHRoZSByb290Tm9kZSBpcyByZS1hdHRhY2hlZCB0byB0aGUgcGFyZW50LgogICAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICAgIHJvb3ROb2RlLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBkZWJ1ZygnTWVzaCBkb2VzIG5vdCBjb250YWluIHBvaW50aW5nIG9yaWdpbiBkYXRhLCBkZWZhdWx0aW5nIHRvIG5vbmUuJyk7CiAgICAgIH0KCiAgICAgIC8vIEVtaXQgZXZlbnQgc3RhdGluZyB0aGF0IG91ciBwb2ludGluZyByYXkgaXMgbm93IGFjY3VyYXRlLgogICAgICB0aGlzLm1vZGVsUmVhZHkoKTsKICAgIH07CiAgfSkoKSwKCiAgbGVycEF4aXNUcmFuc2Zvcm06IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7CiAgICByZXR1cm4gZnVuY3Rpb24gKGF4aXMsIGF4aXNWYWx1ZSkgewogICAgICB2YXIgYXhpc01lc2hJbmZvID0gdGhpcy5sb2FkZWRNZXNoSW5mby5heGlzTWVzaGVzW2F4aXNdOwogICAgICBpZiAoIWF4aXNNZXNoSW5mbykgcmV0dXJuOwoKICAgICAgdmFyIG1pbiA9IGF4aXNNZXNoSW5mby5taW47CiAgICAgIHZhciBtYXggPSBheGlzTWVzaEluZm8ubWF4OwogICAgICB2YXIgdGFyZ2V0ID0gYXhpc01lc2hJbmZvLnZhbHVlOwoKICAgICAgLy8gQ29udmVydCBmcm9tIGdhbWVwYWQgdmFsdWUgcmFuZ2UgKC0xIHRvICsxKSB0byBsZXJwIHJhbmdlICgwIHRvIDEpCiAgICAgIHZhciBsZXJwVmFsdWUgPSBheGlzVmFsdWUgKiAwLjUgKyAwLjU7CiAgICAgIHRhcmdldC5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb24uY29weShtaW4ucXVhdGVybmlvbikuc2xlcnAobWF4LnF1YXRlcm5pb24sIGxlcnBWYWx1ZSkpOwogICAgICB0YXJnZXQucG9zaXRpb24ubGVycFZlY3RvcnMobWluLnBvc2l0aW9uLCBtYXgucG9zaXRpb24sIGxlcnBWYWx1ZSk7CiAgICB9OwogIH0pKCksCgogIGxlcnBCdXR0b25UcmFuc2Zvcm06IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgcXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7CiAgICByZXR1cm4gZnVuY3Rpb24gKGJ1dHRvbk5hbWUsIGJ1dHRvblZhbHVlKSB7CiAgICAgIHZhciBidXR0b25NZXNoSW5mbyA9IHRoaXMubG9hZGVkTWVzaEluZm8uYnV0dG9uTWVzaGVzW2J1dHRvbk5hbWVdOwogICAgICBpZiAoIWJ1dHRvbk1lc2hJbmZvKSByZXR1cm47CgogICAgICB2YXIgbWluID0gYnV0dG9uTWVzaEluZm8udW5wcmVzc2VkOwogICAgICB2YXIgbWF4ID0gYnV0dG9uTWVzaEluZm8ucHJlc3NlZDsKICAgICAgdmFyIHRhcmdldCA9IGJ1dHRvbk1lc2hJbmZvLnZhbHVlOwoKICAgICAgdGFyZ2V0LnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24ocXVhdGVybmlvbi5jb3B5KG1pbi5xdWF0ZXJuaW9uKS5zbGVycChtYXgucXVhdGVybmlvbiwgYnV0dG9uVmFsdWUpKTsKICAgICAgdGFyZ2V0LnBvc2l0aW9uLmxlcnBWZWN0b3JzKG1pbi5wb3NpdGlvbiwgbWF4LnBvc2l0aW9uLCBidXR0b25WYWx1ZSk7CiAgICB9OwogIH0pKCksCgogIG1vZGVsUmVhZHk6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZWwuZW1pdCgnY29udHJvbGxlcm1vZGVscmVhZHknLCB7CiAgICAgIG5hbWU6ICd3aW5kb3dzLW1vdGlvbi1jb250cm9scycsCiAgICAgIG1vZGVsOiB0aGlzLmRhdGEubW9kZWwsCiAgICAgIHJheU9yaWdpbjogdGhpcy5yYXlPcmlnaW4KICAgIH0pOwogIH0sCgogIG9uQnV0dG9uQ2hhbmdlZDogZnVuY3Rpb24gKGV2dCkgewogICAgdmFyIGJ1dHRvbk5hbWUgPSB0aGlzLm1hcHBpbmcuYnV0dG9uc1tldnQuZGV0YWlsLmlkXTsKCiAgICBpZiAoYnV0dG9uTmFtZSkgewogICAgICAvLyBVcGRhdGUgdGhlIGJ1dHRvbiBtZXNoIHRyYW5zZm9ybQogICAgICBpZiAodGhpcy5sb2FkZWRNZXNoSW5mbyAmJiB0aGlzLmxvYWRlZE1lc2hJbmZvLmJ1dHRvbk1lc2hlcykgewogICAgICAgIHRoaXMubGVycEJ1dHRvblRyYW5zZm9ybShidXR0b25OYW1lLCBldnQuZGV0YWlsLnN0YXRlLnZhbHVlKTsKICAgICAgfQoKICAgICAgLy8gT25seSBlbWl0IGV2ZW50cyBmb3IgYnV0dG9ucyB0aGF0IHdlIGtub3cgaG93IHRvIG1hcCBmcm9tIGluZGV4IHRvIG5hbWUKICAgICAgdGhpcy5lbC5lbWl0KGJ1dHRvbk5hbWUgKyAnY2hhbmdlZCcsIGV2dC5kZXRhaWwuc3RhdGUpOwogICAgfQogIH0sCgogIG9uQXhpc01vdmVkOiBmdW5jdGlvbiAoZXZ0KSB7CiAgICB2YXIgbnVtQXhlcyA9IHRoaXMubWFwcGluZy5heGlzTWVzaE5hbWVzLmxlbmd0aDsKCiAgICAvLyBPbmx5IGF0dGVtcHQgdG8gdXBkYXRlIG1lc2hlcyBpZiB3ZSBoYXZlIHZhbGlkIGRhdGEuCiAgICBpZiAodGhpcy5sb2FkZWRNZXNoSW5mbyAmJiB0aGlzLmxvYWRlZE1lc2hJbmZvLmF4aXNNZXNoZXMpIHsKICAgICAgZm9yICh2YXIgYXhpcyA9IDA7IGF4aXMgPCBudW1BeGVzOyBheGlzKyspIHsKICAgICAgICAvLyBVcGRhdGUgdGhlIGJ1dHRvbiBtZXNoIHRyYW5zZm9ybQogICAgICAgIHRoaXMubGVycEF4aXNUcmFuc2Zvcm0oYXhpcywgZXZ0LmRldGFpbC5heGlzW2F4aXNdIHx8IDAuMCk7CiAgICAgIH0KICAgIH0KCiAgICBlbWl0SWZBeGVzQ2hhbmdlZCh0aGlzLCB0aGlzLm1hcHBpbmcuYXhlcywgZXZ0KTsKICB9LAoKICBzZXRNb2RlbFZpc2liaWxpdHk6IGZ1bmN0aW9uICh2aXNpYmxlKSB7CiAgICB2YXIgbW9kZWwgPSB0aGlzLmVsLmdldE9iamVjdDNEKCdtZXNoJyk7CiAgICB2aXNpYmxlID0gdmlzaWJsZSAhPT0gdW5kZWZpbmVkID8gdmlzaWJsZSA6IHRoaXMubW9kZWxWaXNpYmxlOwogICAgdGhpcy5tb2RlbFZpc2libGUgPSB2aXNpYmxlOwogICAgaWYgKCFtb2RlbCkgeyByZXR1cm47IH0KICAgIG1vZGVsLnZpc2libGUgPSB2aXNpYmxlOwogIH0KfSk7Cgp9LHsiLi4vY29uc3RhbnRzIjoxMDEsIi4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uL3V0aWxzLyI6MTgyLCIuLi91dGlscy9iaW5kIjoxNzYsIi4uL3V0aWxzL3RyYWNrZWQtY29udHJvbHMiOjE5MH1dLDEwMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gewogIEFGUkFNRV9JTkpFQ1RFRDogJ2FmcmFtZS1pbmplY3RlZCcsCiAgREVGQVVMVF9DQU1FUkFfSEVJR0hUOiAxLjYsCiAgREVGQVVMVF9IQU5ERURORVNTOiAncmlnaHQnLAogIGtleWJvYXJkZXZlbnQ6IF9kZXJlcV8oJy4va2V5Ym9hcmRldmVudCcpCn07Cgp9LHsiLi9rZXlib2FyZGV2ZW50IjoxMDJ9XSwxMDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsKICAvLyBUaW55IEtleWJvYXJkRXZlbnQuY29kZSBwb2x5ZmlsbC4KICBLRVlDT0RFX1RPX0NPREU6IHsKICAgICczOCc6ICdBcnJvd1VwJywKICAgICczNyc6ICdBcnJvd0xlZnQnLAogICAgJzQwJzogJ0Fycm93RG93bicsCiAgICAnMzknOiAnQXJyb3dSaWdodCcsCiAgICAnODcnOiAnS2V5VycsCiAgICAnNjUnOiAnS2V5QScsCiAgICAnODMnOiAnS2V5UycsCiAgICAnNjgnOiAnS2V5RCcKICB9Cn07Cgp9LHt9XSwxMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgQU5vZGUgPSBfZGVyZXFfKCcuL2Etbm9kZScpOwp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKdmFyIGRlYnVnID0gX2RlcmVxXygnLi4vdXRpbHMvZGVidWcnKTsKdmFyIHJlZ2lzdGVyRWxlbWVudCA9IF9kZXJlcV8oJy4vYS1yZWdpc3Rlci1lbGVtZW50JykucmVnaXN0ZXJFbGVtZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBmaWxlTG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoKTsKdmFyIHdhcm4gPSBkZWJ1ZygnY29yZTphLWFzc2V0czp3YXJuJyk7CgovKioKICogQXNzZXQgbWFuYWdlbWVudCBzeXN0ZW0uIEhhbmRsZXMgYmxvY2tpbmcgb24gYXNzZXQgbG9hZGluZy4KICovCm1vZHVsZS5leHBvcnRzID0gcmVnaXN0ZXJFbGVtZW50KCdhLWFzc2V0cycsIHsKICBwcm90b3R5cGU6IE9iamVjdC5jcmVhdGUoQU5vZGUucHJvdG90eXBlLCB7CiAgICBjcmVhdGVkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLmlzQXNzZXRzID0gdHJ1ZTsKICAgICAgICB0aGlzLmZpbGVMb2FkZXIgPSBmaWxlTG9hZGVyOwogICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7CiAgICAgIH0KICAgIH0sCgogICAgYXR0YWNoZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgaTsKICAgICAgICB2YXIgbG9hZGVkID0gW107CiAgICAgICAgdmFyIG1lZGlhRWw7CiAgICAgICAgdmFyIG1lZGlhRWxzOwogICAgICAgIHZhciBpbWdFbDsKICAgICAgICB2YXIgaW1nRWxzOwogICAgICAgIHZhciB0aW1lb3V0OwoKICAgICAgICBpZiAoIXRoaXMucGFyZW50Tm9kZS5pc1NjZW5lKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxhLWFzc2V0cz4gbXVzdCBiZSBhIGNoaWxkIG9mIGEgPGEtc2NlbmU+LicpOwogICAgICAgIH0KCiAgICAgICAgLy8gV2FpdCBmb3IgPGltZz5zLgogICAgICAgIGltZ0VscyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGltZ0Vscy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaW1nRWwgPSBmaXhVcE1lZGlhRWxlbWVudChpbWdFbHNbaV0pOwogICAgICAgICAgbG9hZGVkLnB1c2gobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAvLyBTZXQgaW4gY2FjaGUgYmVjYXVzZSB3ZSB3b24ndCBiZSBuZWVkaW5nIHRvIGNhbGwgdGhyZWUuanMgbG9hZGVyIGlmIHdlIGhhdmUuCiAgICAgICAgICAgIC8vIGEgbG9hZGVkIG1lZGlhIGVsZW1lbnQuCiAgICAgICAgICAgIFRIUkVFLkNhY2hlLmZpbGVzW2ltZ0Vsc1tpXS5nZXRBdHRyaWJ1dGUoJ3NyYycpXSA9IGltZ0VsOwogICAgICAgICAgICBpbWdFbC5vbmxvYWQgPSByZXNvbHZlOwogICAgICAgICAgICBpbWdFbC5vbmVycm9yID0gcmVqZWN0OwogICAgICAgICAgfSkpOwogICAgICAgIH0KCiAgICAgICAgLy8gV2FpdCBmb3IgPGF1ZGlvPnMgYW5kIDx2aWRlbz5zLgogICAgICAgIG1lZGlhRWxzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCdhdWRpbywgdmlkZW8nKTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWVkaWFFbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIG1lZGlhRWwgPSBmaXhVcE1lZGlhRWxlbWVudChtZWRpYUVsc1tpXSk7CiAgICAgICAgICBpZiAoIW1lZGlhRWwuc3JjICYmICFtZWRpYUVsLnNyY09iamVjdCkgewogICAgICAgICAgICB3YXJuKCdBdWRpby92aWRlbyBhc3NldCBoYXMgbmVpdGhlciBgc3JjYCBub3IgYHNyY09iamVjdGAgYXR0cmlidXRlcy4nKTsKICAgICAgICAgIH0KICAgICAgICAgIGxvYWRlZC5wdXNoKG1lZGlhRWxlbWVudExvYWRlZChtZWRpYUVsKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBUcmlnZ2VyIGxvYWRlZCBmb3Igc2NlbmUgdG8gc3RhcnQgcmVuZGVyaW5nLgogICAgICAgIFByb21pc2UuYWxsKGxvYWRlZCkudGhlbihiaW5kKHRoaXMubG9hZCwgdGhpcykpOwoKICAgICAgICAvLyBUaW1lb3V0IHRvIHN0YXJ0IGxvYWRpbmcgYW55d2F5cy4KICAgICAgICB0aW1lb3V0ID0gcGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoJ3RpbWVvdXQnKSwgMTApIHx8IDMwMDA7CiAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoc2VsZi5oYXNMb2FkZWQpIHsgcmV0dXJuOyB9CiAgICAgICAgICB3YXJuKCdBc3NldCBsb2FkaW5nIHRpbWVkIG91dCBpbiAnLCB0aW1lb3V0LCAnbXMnKTsKICAgICAgICAgIHNlbGYuZW1pdCgndGltZW91dCcpOwogICAgICAgICAgc2VsZi5sb2FkKCk7CiAgICAgICAgfSwgdGltZW91dCk7CiAgICAgIH0KICAgIH0sCgogICAgZGV0YWNoZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7IH0KICAgICAgfQogICAgfSwKCiAgICBsb2FkOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgQU5vZGUucHJvdG90eXBlLmxvYWQuY2FsbCh0aGlzLCBudWxsLCBmdW5jdGlvbiB3YWl0T25GaWx0ZXIgKGVsKSB7CiAgICAgICAgICByZXR1cm4gZWwuaXNBc3NldEl0ZW0gJiYgZWwuaGFzQXR0cmlidXRlKCdzcmMnKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0pCn0pOwoKLyoqCiAqIFByZWxvYWQgdXNpbmcgWEhSTG9hZGVyIGZvciBhbnkgdHlwZSBvZiBhc3NldC4KICovCnJlZ2lzdGVyRWxlbWVudCgnYS1hc3NldC1pdGVtJywgewogIHByb3RvdHlwZTogT2JqZWN0LmNyZWF0ZShBTm9kZS5wcm90b3R5cGUsIHsKICAgIGNyZWF0ZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuZGF0YSA9IG51bGw7CiAgICAgICAgdGhpcy5pc0Fzc2V0SXRlbSA9IHRydWU7CiAgICAgIH0KICAgIH0sCgogICAgYXR0YWNoZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgc3JjID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3NyYycpOwogICAgICAgIGZpbGVMb2FkZXIuc2V0UmVzcG9uc2VUeXBlKAogICAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoJ3Jlc3BvbnNlLXR5cGUnKSB8fCBpbmZlclJlc3BvbnNlVHlwZShzcmMpKTsKICAgICAgICBmaWxlTG9hZGVyLmxvYWQoc3JjLCBmdW5jdGlvbiBoYW5kbGVPbkxvYWQgKHJlc3BvbnNlKSB7CiAgICAgICAgICBzZWxmLmRhdGEgPSByZXNwb25zZTsKICAgICAgICAgIC8qCiAgICAgICAgICAgIFdvcmthcm91bmQgZm9yIGEgQ2hyb21lIGJ1Zy4gSWYgYW5vdGhlciBYSFIgaXMgc2VudCB0byB0aGUgc2FtZSB1cmwgYmVmb3JlIHRoZQogICAgICAgICAgICBwcmV2aW91cyBvbmUgY2xvc2VzLCB0aGUgc2Vjb25kIHJlcXVlc3QgbmV2ZXIgZmluaXNoZXMuCiAgICAgICAgICAgIHNldFRpbWVvdXQgZmluaXNoZXMgdGhlIGZpcnN0IHJlcXVlc3QgYW5kIGxldHMgdGhlIGxvZ2ljIHRyaWdnZXJlZCBieSBsb2FkIG9wZW4KICAgICAgICAgICAgc3Vic2VxdWVudCByZXF1ZXN0cy4KICAgICAgICAgICAgc2V0VGltZW91dCBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBmaXggZm9yIHRoZSBidWcgYmVsb3cgc2hpcHM6CiAgICAgICAgICAgIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTYzMzY5NiZxPWNvbXBvbmVudCUzQUJsaW5rJTNFTmV0d29yayUzRVhIUiUyMCZjb2xzcGVjPUlEJTIwUHJpJTIwTSUyMFN0YXJzJTIwUmVsZWFzZUJsb2NrJTIwQ29tcG9uZW50JTIwU3RhdHVzJTIwT3duZXIlMjBTdW1tYXJ5JTIwT1MlMjBNb2RpZmllZAogICAgICAgICAgKi8KICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gbG9hZCAoKSB7IEFOb2RlLnByb3RvdHlwZS5sb2FkLmNhbGwoc2VsZik7IH0pOwogICAgICAgIH0sIGZ1bmN0aW9uIGhhbmRsZU9uUHJvZ3Jlc3MgKHhocikgewogICAgICAgICAgc2VsZi5lbWl0KCdwcm9ncmVzcycsIHsKICAgICAgICAgICAgbG9hZGVkQnl0ZXM6IHhoci5sb2FkZWQsCiAgICAgICAgICAgIHRvdGFsQnl0ZXM6IHhoci50b3RhbCwKICAgICAgICAgICAgeGhyOiB4aHIKICAgICAgICAgIH0pOwogICAgICAgIH0sIGZ1bmN0aW9uIGhhbmRsZU9uRXJyb3IgKHhocikgewogICAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIHt4aHI6IHhocn0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSkKfSk7CgovKioKICogQ3JlYXRlIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIG1lZGlhIGVsZW1lbnQgaGFzIGZpbmlzaGVkIGJ1ZmZlcmluZy4KICoKICogQHBhcmFtIHtFbGVtZW50fSBlbCAtIEhUTUxNZWRpYUVsZW1lbnQuCiAqIEByZXR1cm5zIHtQcm9taXNlfQogKi8KZnVuY3Rpb24gbWVkaWFFbGVtZW50TG9hZGVkIChlbCkgewogIGlmICghZWwuaGFzQXR0cmlidXRlKCdhdXRvcGxheScpICYmIGVsLmdldEF0dHJpYnV0ZSgncHJlbG9hZCcpICE9PSAnYXV0bycpIHsKICAgIHJldHVybjsKICB9CgogIC8vIElmIG1lZGlhIHNwZWNpZmllcyBhdXRvcGxheSBvciBwcmVsb2FkLCB3YWl0IHVudGlsIG1lZGlhIGlzIGNvbXBsZXRlbHkgYnVmZmVyZWQuCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGlmIChlbC5yZWFkeVN0YXRlID09PSA0KSB7IHJldHVybiByZXNvbHZlKCk7IH0gIC8vIEFscmVhZHkgbG9hZGVkLgogICAgaWYgKGVsLmVycm9yKSB7IHJldHVybiByZWplY3QoKTsgfSAgLy8gRXJyb3IuCgogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkZGF0YScsIGNoZWNrUHJvZ3Jlc3MsIGZhbHNlKTsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY2hlY2tQcm9ncmVzcywgZmFsc2UpOwogICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCByZWplY3QsIGZhbHNlKTsKCiAgICBmdW5jdGlvbiBjaGVja1Byb2dyZXNzICgpIHsKICAgICAgLy8gQWRkIHVwIHRoZSBzZWNvbmRzIGJ1ZmZlcmVkLgogICAgICB2YXIgc2Vjb25kc0J1ZmZlcmVkID0gMDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5idWZmZXJlZC5sZW5ndGg7IGkrKykgewogICAgICAgIHNlY29uZHNCdWZmZXJlZCArPSBlbC5idWZmZXJlZC5lbmQoaSkgLSBlbC5idWZmZXJlZC5zdGFydChpKTsKICAgICAgfQoKICAgICAgLy8gQ29tcGFyZSBzZWNvbmRzIGJ1ZmZlcmVkIHRvIG1lZGlhIGR1cmF0aW9uLgogICAgICBpZiAoc2Vjb25kc0J1ZmZlcmVkID49IGVsLmR1cmF0aW9uKSB7CiAgICAgICAgLy8gU2V0IGluIGNhY2hlIGJlY2F1c2Ugd2Ugd29uJ3QgYmUgbmVlZGluZyB0byBjYWxsIHRocmVlLmpzIGxvYWRlciBpZiB3ZSBoYXZlLgogICAgICAgIC8vIGEgbG9hZGVkIG1lZGlhIGVsZW1lbnQuCiAgICAgICAgLy8gU3RvcmUgdmlkZW8gZWxlbWVudHMgb25seS4gdGhyZWUuanMgbG9hZGVyIGlzIHVzZWQgZm9yIGF1ZGlvIGVsZW1lbnRzLgogICAgICAgIC8vIFNlZSBhc3NldFBhcnNlIHRvby4KICAgICAgICBpZiAoZWwudGFnTmFtZSA9PT0gJ1ZJREVPJykgewogICAgICAgICAgVEhSRUUuQ2FjaGUuZmlsZXNbZWwuZ2V0QXR0cmlidXRlKCdzcmMnKV0gPSBlbDsKICAgICAgICB9CiAgICAgICAgcmVzb2x2ZSgpOwogICAgICB9CiAgICB9CiAgfSk7Cn0KCi8qKgogKiBBdXRvbWF0aWNhbGx5IGFkZCBhdHRyaWJ1dGVzIHRvIG1lZGlhIGVsZW1lbnRzIHdoZXJlIGNvbnZlbmllbnQuCiAqIGNyb3Nzb3JpZ2luLCBwbGF5c2lubGluZS4KICovCmZ1bmN0aW9uIGZpeFVwTWVkaWFFbGVtZW50IChtZWRpYUVsKSB7CiAgLy8gQ3Jvc3Mtb3JpZ2luLgogIHZhciBuZXdNZWRpYUVsID0gc2V0Q3Jvc3NPcmlnaW4obWVkaWFFbCk7CgogIC8vIFBsYXlzIGlubGluZSBmb3IgbW9iaWxlLgogIGlmIChuZXdNZWRpYUVsLnRhZ05hbWUgJiYgbmV3TWVkaWFFbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd2aWRlbycpIHsKICAgIG5ld01lZGlhRWwuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTsKICAgIG5ld01lZGlhRWwuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnJyk7CiAgfQoKICBpZiAobmV3TWVkaWFFbCAhPT0gbWVkaWFFbCkgewogICAgbWVkaWFFbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld01lZGlhRWwpOwogICAgbWVkaWFFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1lZGlhRWwpOwogIH0KICByZXR1cm4gbmV3TWVkaWFFbDsKfQoKLyoqCiAqIEF1dG9tYXRpY2FsbHkgc2V0IGBjcm9zc29yaWdpbmAgaWYgbm90IGRlZmluZWQgb24gdGhlIG1lZGlhIGVsZW1lbnQuCiAqIElmIGl0IGlzIG5vdCBkZWZpbmVkLCB3ZSBtdXN0IGNyZWF0ZSBhbmQgcmUtYXBwZW5kIGEgbmV3IG1lZGlhIGVsZW1lbnQgPGltZz4gYW5kCiAqIGhhdmUgdGhlIGJyb3dzZXIgcmUtcmVxdWVzdCBpdCB3aXRoIGBjcm9zc29yaWdpbmAgc2V0LgogKgogKiBAcGFyYW0ge0VsZW1lbnR9IE1lZGlhIGVsZW1lbnQgKGUuZy4sIDxpbWc+LCA8YXVkaW8+LCA8dmlkZW8+KS4KICogQHJldHVybnMge0VsZW1lbnR9IE1lZGlhIGVsZW1lbnQgdG8gYmUgdXNlZCB0byBsaXN0ZW4gdG8gZm9yIGxvYWRlZCBldmVudHMuCiAqLwpmdW5jdGlvbiBzZXRDcm9zc09yaWdpbiAobWVkaWFFbCkgewogIHZhciBuZXdNZWRpYUVsOwogIHZhciBzcmM7CgogIC8vIEFscmVhZHkgaGFzIGNyb3Nzb3JpZ2luIHNldC4KICBpZiAobWVkaWFFbC5oYXNBdHRyaWJ1dGUoJ2Nyb3Nzb3JpZ2luJykpIHsgcmV0dXJuIG1lZGlhRWw7IH0KCiAgc3JjID0gbWVkaWFFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpOwoKICBpZiAoc3JjICE9PSBudWxsKSB7CiAgICAvLyBEb2VzIG5vdCBoYXZlIHByb3RvY29sLgogICAgaWYgKHNyYy5pbmRleE9mKCc6Ly8nKSA9PT0gLTEpIHsgcmV0dXJuIG1lZGlhRWw7IH0KCiAgICAvLyBEZXRlcm1pbmUgaWYgY3Jvc3Mgb3JpZ2luIGlzIGFjdHVhbGx5IG5lZWRlZC4KICAgIGlmIChleHRyYWN0RG9tYWluKHNyYykgPT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0KSB7IHJldHVybiBtZWRpYUVsOyB9CiAgfQoKICB3YXJuKCdDcm9zcy1vcmlnaW4gZWxlbWVudCAoZS5nLiwgPGltZz4pIHdhcyByZXF1ZXN0ZWQgd2l0aG91dCBgY3Jvc3NvcmlnaW5gIHNldC4gJyArCiAgICAgICAnQS1GcmFtZSB3aWxsIHJlLXJlcXVlc3QgdGhlIGFzc2V0IHdpdGggYGNyb3Nzb3JpZ2luYCBhdHRyaWJ1dGUgc2V0LiAnICsKICAgICAgICdQbGVhc2Ugc2V0IGBjcm9zc29yaWdpbmAgb24gdGhlIGVsZW1lbnQgKGUuZy4sIDxpbWcgY3Jvc3NvcmlnaW49ImFub255bW91cyI+KScsIHNyYyk7CiAgbWVkaWFFbC5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnOwogIG5ld01lZGlhRWwgPSBtZWRpYUVsLmNsb25lTm9kZSh0cnVlKTsKICByZXR1cm4gbmV3TWVkaWFFbDsKfQoKLyoqCiAqIEV4dHJhY3QgZG9tYWluIG91dCBvZiBVUkwuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwKICogQHJldHVybnMge3N0cmluZ30KICovCmZ1bmN0aW9uIGV4dHJhY3REb21haW4gKHVybCkgewogIC8vIEZpbmQgYW5kIHJlbW92ZSBwcm90b2NvbCAoZS5nLiwgaHR0cCwgZnRwLCBldGMuKSB0byBnZXQgZG9tYWluLgogIHZhciBkb21haW4gPSB1cmwuaW5kZXhPZignOi8vJykgPiAtMSA/IHVybC5zcGxpdCgnLycpWzJdIDogdXJsLnNwbGl0KCcvJylbMF07CgogIC8vIEZpbmQgYW5kIHJlbW92ZSBwb3J0IG51bWJlci4KICByZXR1cm4gZG9tYWluLnN1YnN0cmluZygwLCBkb21haW4uaW5kZXhPZignOicpKTsKfQoKLyoqCiAqIEluZmVyIHJlc3BvbnNlLXR5cGUgYXR0cmlidXRlIGZyb20gc3JjLgogKiBEZWZhdWx0IGlzIHRleHQgKGRlZmF1bHQgWE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlKQogKiBhbmQgYXJyYXlidWZmZXIgZm9yIC5nbGIgZmlsZXMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMKICogQHJldHVybnMge3N0cmluZ30KICovCmZ1bmN0aW9uIGluZmVyUmVzcG9uc2VUeXBlIChzcmMpIHsKICB2YXIgZmlsZU5hbWUgPSBnZXRGaWxlTmFtZUZyb21VUkwoc3JjKTsKICB2YXIgZG90TGFzdEluZGV4ID0gZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKTsKICBpZiAoZG90TGFzdEluZGV4ID49IDApIHsKICAgIHZhciBleHRlbnNpb24gPSBmaWxlTmFtZS5zbGljZShkb3RMYXN0SW5kZXgsIHNyYy5zZWFyY2goL1w/fCN8JC8pKTsKICAgIGlmIChleHRlbnNpb24gPT09ICcuZ2xiJykgewogICAgICByZXR1cm4gJ2FycmF5YnVmZmVyJzsKICAgIH0KICB9CiAgcmV0dXJuICd0ZXh0JzsKfQptb2R1bGUuZXhwb3J0cy5pbmZlclJlc3BvbnNlVHlwZSA9IGluZmVyUmVzcG9uc2VUeXBlOwoKLyoqCiAqIEV4dHJhY3QgZmlsZW5hbWUgZnJvbSBVUkwKICoKICogQHBhcmFtIHtzdHJpbmd9IHVybAogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZ2V0RmlsZU5hbWVGcm9tVVJMICh1cmwpIHsKICB2YXIgcGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIHBhcnNlci5ocmVmID0gdXJsOwogIHZhciBxdWVyeSA9IHBhcnNlci5zZWFyY2gucmVwbGFjZSgvXlw/LywgJycpOwogIHZhciBmaWxlUGF0aCA9IHVybC5yZXBsYWNlKHF1ZXJ5LCAnJykucmVwbGFjZSgnPycsICcnKTsKICByZXR1cm4gZmlsZVBhdGguc3Vic3RyaW5nKGZpbGVQYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKfQptb2R1bGUuZXhwb3J0cy5nZXRGaWxlTmFtZUZyb21VUkwgPSBnZXRGaWxlTmFtZUZyb21VUkw7Cgp9LHsiLi4vbGliL3RocmVlIjoxNTcsIi4uL3V0aWxzL2JpbmQiOjE3NiwiLi4vdXRpbHMvZGVidWciOjE3OCwiLi9hLW5vZGUiOjEwNywiLi9hLXJlZ2lzdGVyLWVsZW1lbnQiOjEwOH1dLDEwNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBkZWJ1ZyA9IF9kZXJlcV8oJy4uL3V0aWxzL2RlYnVnJyk7CnZhciByZWdpc3RlckVsZW1lbnQgPSBfZGVyZXFfKCcuL2EtcmVnaXN0ZXItZWxlbWVudCcpLnJlZ2lzdGVyRWxlbWVudDsKCnZhciB3YXJuID0gZGVidWcoJ2NvcmU6Y3ViZW1hcDp3YXJuJyk7CgovKioKICogQ3ViZW1hcCBlbGVtZW50IHRoYXQgaGFuZGxlcyB2YWxpZGF0aW9uIGFuZCBleHBvc2VzIGxpc3Qgb2YgVVJMcy4KICogRG9lcyBub3QgbGlzdGVuIHRvIHVwZGF0ZXMuCiAqLwptb2R1bGUuZXhwb3J0cyA9IHJlZ2lzdGVyRWxlbWVudCgnYS1jdWJlbWFwJywgewogIHByb3RvdHlwZTogT2JqZWN0LmNyZWF0ZSh3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLCB7CiAgICAvKioKICAgICAqIENhbGN1bGF0ZXMgdGhpcy5zcmNzLgogICAgICovCiAgICBhdHRhY2hlZENhbGxiYWNrOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5zcmNzID0gdGhpcy52YWxpZGF0ZSgpOwogICAgICB9LAogICAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgICB9LAoKICAgIC8qKgogICAgICogQ2hlY2tzIGZvciBleGFjdGx5IHNpeCBlbGVtZW50cyB3aXRoIFtzcmNdLgogICAgICogRG9lcyBub3QgY2hlY2sgZXhwbGljaXRseSBmb3IgPGltZz5zIGluIGNhc2UgdXNlciBkb2VzIG5vdCB3YW50CiAgICAgKiBwcmVmZXRjaGluZy4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7QXJyYXl8bnVsbH0gLSBzaXggVVJMcyBpZiB2YWxpZCwgZWxzZSBudWxsLgogICAgICovCiAgICB2YWxpZGF0ZTogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnW3NyY10nKTsKICAgICAgICB2YXIgaTsKICAgICAgICB2YXIgc3JjcyA9IFtdOwogICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDYpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBzcmNzLnB1c2goZWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKCdzcmMnKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3JjczsKICAgICAgICB9CiAgICAgICAgLy8gRWxzZSBpZiB0aGVyZSBhcmUgbm90IHNpeCBlbGVtZW50cywgdGhyb3cgYSB3YXJuaW5nLgogICAgICAgIHdhcm4oCiAgICAgICAgICAnPGEtY3ViZW1hcD4gZGlkIG5vdCBjb250YWluIGV4YWN0bHkgc2l4IGVsZW1lbnRzIGVhY2ggd2l0aCBhICcgKwogICAgICAgICAgJ2BzcmNgIGF0dHJpYnV0ZS4nKTsKICAgICAgfSwKICAgICAgd3JpdGFibGU6IHdpbmRvdy5kZWJ1ZwogICAgfQogIH0pCn0pOwoKfSx7Ii4uL3V0aWxzL2RlYnVnIjoxNzgsIi4vYS1yZWdpc3Rlci1lbGVtZW50IjoxMDh9XSwxMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgQU5vZGUgPSBfZGVyZXFfKCcuL2Etbm9kZScpOwp2YXIgQ09NUE9ORU5UUyA9IF9kZXJlcV8oJy4vY29tcG9uZW50JykuY29tcG9uZW50czsKdmFyIHJlZ2lzdGVyRWxlbWVudCA9IF9kZXJlcV8oJy4vYS1yZWdpc3Rlci1lbGVtZW50JykucmVnaXN0ZXJFbGVtZW50Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7Cgp2YXIgQUVudGl0eTsKdmFyIGRlYnVnID0gdXRpbHMuZGVidWcoJ2NvcmU6YS1lbnRpdHk6ZGVidWcnKTsKdmFyIHdhcm4gPSB1dGlscy5kZWJ1ZygnY29yZTphLWVudGl0eTp3YXJuJyk7Cgp2YXIgTVVMVElQTEVfQ09NUE9ORU5UX0RFTElNSVRFUiA9ICdfXyc7CnZhciBPQkpFQ1QzRF9DT01QT05FTlRTID0gWydwb3NpdGlvbicsICdyb3RhdGlvbicsICdzY2FsZScsICd2aXNpYmxlJ107CnZhciBPTkNFID0ge29uY2U6IHRydWV9OwoKLyoqCiAqIEVudGl0eSBpcyBhIGNvbnRhaW5lciBvYmplY3QgdGhhdCBjb21wb25lbnRzIGFyZSBwbHVnZ2VkIGludG8gdG8gY29tcHJpc2UgZXZlcnl0aGluZyBpbgogKiB0aGUgc2NlbmUuIEluIEEtRnJhbWUsIHRoZXkgaW5oZXJlbnRseSBoYXZlIHBvc2l0aW9uLCByb3RhdGlvbiwgYW5kIHNjYWxlLgogKgogKiBUbyBiZSBhYmxlIHRvIHRha2UgY29tcG9uZW50cywgdGhlIHNjZW5lIGVsZW1lbnQgaW5oZXJpdHMgZnJvbSB0aGUgZW50aXR5IGRlZmluaXRpb24uCiAqCiAqIEBtZW1iZXIge29iamVjdH0gY29tcG9uZW50cyAtIGVudGl0eSdzIGN1cnJlbnRseSBpbml0aWFsaXplZCBjb21wb25lbnRzLgogKiBAbWVtYmVyIHtvYmplY3R9IG9iamVjdDNEIC0gdGhyZWUuanMgb2JqZWN0LgogKiBAbWVtYmVyIHthcnJheX0gc3RhdGVzCiAqIEBtZW1iZXIge2Jvb2xlYW59IGlzUGxheWluZyAtIGZhbHNlIGlmIGR5bmFtaWMgYmVoYXZpb3Igb2YgdGhlIGVudGl0eSBpcyBwYXVzZWQuCiAqLwp2YXIgcHJvdG8gPSBPYmplY3QuY3JlYXRlKEFOb2RlLnByb3RvdHlwZSwgewogIGNyZWF0ZWRDYWxsYmFjazogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5jb21wb25lbnRzID0ge307CiAgICAgIC8vIFRvIGF2b2lkIGRvdWJsZSBpbml0aWFsaXphdGlvbnMgYW5kIGluZmluaXRlIGxvb3BzLgogICAgICB0aGlzLmluaXRpYWxpemluZ0NvbXBvbmVudHMgPSB7fTsKICAgICAgdGhpcy5jb21wb25lbnRzVG9VcGRhdGUgPSB7fTsKICAgICAgdGhpcy5pc0VudGl0eSA9IHRydWU7CiAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7CiAgICAgIHRoaXMub2JqZWN0M0QgPSBuZXcgVEhSRUUuR3JvdXAoKTsKICAgICAgdGhpcy5vYmplY3QzRC5lbCA9IHRoaXM7CiAgICAgIHRoaXMub2JqZWN0M0RNYXAgPSB7fTsKICAgICAgdGhpcy5wYXJlbnRFbCA9IG51bGw7CiAgICAgIHRoaXMucm90YXRpb25PYmogPSB7fTsKICAgICAgdGhpcy5zdGF0ZXMgPSBbXTsKICAgIH0KICB9LAoKICAvKioKICAgKiBIYW5kbGUgY2hhbmdlcyBjb21pbmcgZnJvbSB0aGUgYnJvd3NlciBET00gaW5zcGVjdG9yLgogICAqLwogIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazogewogICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyLCBvbGRWYWwsIG5ld1ZhbCkgewogICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2F0dHJdOwogICAgICAvLyBJZiB0aGUgZW1wdHkgc3RyaW5nIGlzIHBhc3NlZCBieSB0aGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uCiAgICAgIC8vIGxvZ2ljIHdlIGlnbm9yZSB0aGUgY29tcG9uZW50IHVwZGF0ZS4KICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuanVzdEluaXRpYWxpemVkICYmIG5ld1ZhbCA9PT0gJycpIHsKICAgICAgICBkZWxldGUgY29tcG9uZW50Lmp1c3RJbml0aWFsaXplZDsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgLy8gV2hlbiBhIGNvbXBvbmVudCBpcyByZW1vdmVkIGFmdGVyIGNhbGxpbmcgZWwucmVtb3ZlQXR0cmlidXRlKCdtYXRlcmlhbCcpCiAgICAgIGlmICghY29tcG9uZW50ICYmIG5ld1ZhbCA9PT0gbnVsbCkgeyByZXR1cm47IH0KICAgICAgdGhpcy5zZXRFbnRpdHlBdHRyaWJ1dGUoYXR0ciwgb2xkVmFsLCBuZXdWYWwpOwogICAgfQogIH0sCgogIC8qKgogICAqIEFkZCB0byBwYXJlbnQsIGxvYWQsIHBsYXkuCiAgICovCiAgYXR0YWNoZWRDYWxsYmFjazogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGFzc2V0c0VsOyAgLy8gQXNzZXQgbWFuYWdlbWVudCBzeXN0ZW0gZWxlbWVudC4KICAgICAgdmFyIHNjZW5lRWwgPSB0aGlzLnNjZW5lRWw7CiAgICAgIHZhciBzZWxmID0gdGhpczsgIC8vIENvbXBvbmVudC4KCiAgICAgIHRoaXMuYWRkVG9QYXJlbnQoKTsKCiAgICAgIC8vIERvbid0IC5sb2FkKCkgc2NlbmUgb24gYXR0YWNoZWRDYWxsYmFjay4KICAgICAgaWYgKHRoaXMuaXNTY2VuZSkgeyByZXR1cm47IH0KCiAgICAgIC8vIEdyYWNlZnVsbHkgbm90IGVycm9yIHdoZW4gb3V0c2lkZSBvZiA8YS1zY2VuZT4gKGUuZy4sIHRlc3RzKS4KICAgICAgaWYgKCFzY2VuZUVsKSB7CiAgICAgICAgdGhpcy5sb2FkKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvLyBXYWl0IGZvciBhc3NldCBtYW5hZ2VtZW50IHN5c3RlbSB0byBmaW5pc2ggYmVmb3JlIGxvYWRpbmcuCiAgICAgIGFzc2V0c0VsID0gc2NlbmVFbC5xdWVyeVNlbGVjdG9yKCdhLWFzc2V0cycpOwogICAgICBpZiAoYXNzZXRzRWwgJiYgIWFzc2V0c0VsLmhhc0xvYWRlZCkgewogICAgICAgIGFzc2V0c0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGZ1bmN0aW9uICgpIHsgc2VsZi5sb2FkKCk7IH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmxvYWQoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBUZWxsIHBhcmVudCB0byByZW1vdmUgdGhpcyBlbGVtZW50J3Mgb2JqZWN0M0QgZnJvbSBpdHMgb2JqZWN0M0QuCiAgICogRG8gbm90IGNhbGwgb24gc2NlbmUgZWxlbWVudCBiZWNhdXNlIHRoYXQgd2lsbCBjYXVzZSBhIGNhbGwgdG8gZG9jdW1lbnQuYm9keS5yZW1vdmUoKS4KICAgKi8KICBkZXRhY2hlZENhbGxiYWNrOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgY29tcG9uZW50TmFtZTsKCiAgICAgIGlmICghdGhpcy5wYXJlbnRFbCkgeyByZXR1cm47IH0KCiAgICAgIC8vIFJlbW92ZSBjb21wb25lbnRzLgogICAgICBmb3IgKGNvbXBvbmVudE5hbWUgaW4gdGhpcy5jb21wb25lbnRzKSB7CiAgICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQoY29tcG9uZW50TmFtZSwgZmFsc2UpOwogICAgICB9CgogICAgICBpZiAodGhpcy5pc1NjZW5lKSB7IHJldHVybjsgfQoKICAgICAgdGhpcy5yZW1vdmVGcm9tUGFyZW50KCk7CiAgICAgIEFOb2RlLnByb3RvdHlwZS5kZXRhY2hlZENhbGxiYWNrLmNhbGwodGhpcyk7CgogICAgICAvLyBSZW1vdmUgY3ljbGljIHJlZmVyZW5jZS4KICAgICAgdGhpcy5vYmplY3QzRC5lbCA9IG51bGw7CiAgICB9CiAgfSwKCiAgZ2V0T2JqZWN0M0Q6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAodHlwZSkgewogICAgICByZXR1cm4gdGhpcy5vYmplY3QzRE1hcFt0eXBlXTsKICAgIH0KICB9LAoKICAvKioKICAgKiBTZXQgYSBUSFJFRS5PYmplY3QzRCBpbnRvIHRoZSBtYXAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIERldmVsb3Blci1zZXQgbmFtZSBvZiB0aGUgdHlwZSBvZiBvYmplY3QsIHdpbGwgYmUgdW5pcXVlIHBlciB0eXBlLgogICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBBIFRIUkVFLk9iamVjdDNELgogICAqLwogIHNldE9iamVjdDNEOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKHR5cGUsIG9iaikgewogICAgICB2YXIgb2xkT2JqOwogICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICBpZiAoIShvYmogaW5zdGFuY2VvZiBUSFJFRS5PYmplY3QzRCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAnYEVudGl0eS5zZXRPYmplY3QzRGAgd2FzIGNhbGxlZCB3aXRoIGFuIG9iamVjdCB0aGF0IHdhcyBub3QgYW4gaW5zdGFuY2Ugb2YgJyArCiAgICAgICAgICAnVEhSRUUuT2JqZWN0M0QuJwogICAgICAgICk7CiAgICAgIH0KCiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBvYmplY3Qgb2YgdGhlIHR5cGUuCiAgICAgIG9sZE9iaiA9IHRoaXMuZ2V0T2JqZWN0M0QodHlwZSk7CiAgICAgIGlmIChvbGRPYmopIHsgdGhpcy5vYmplY3QzRC5yZW1vdmUob2xkT2JqKTsgfQoKICAgICAgLy8gU2V0IHJlZmVyZW5jZXMgdG8gQS1GcmFtZSBlbnRpdHkuCiAgICAgIG9iai5lbCA9IHRoaXM7CiAgICAgIGlmIChvYmouY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgICAgb2JqLnRyYXZlcnNlKGZ1bmN0aW9uIGJpbmRFbCAoY2hpbGQpIHsKICAgICAgICAgIGNoaWxkLmVsID0gc2VsZjsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLy8gQWRkLgogICAgICB0aGlzLm9iamVjdDNELmFkZChvYmopOwogICAgICB0aGlzLm9iamVjdDNETWFwW3R5cGVdID0gb2JqOwogICAgICB0aGlzLmVtaXQoJ29iamVjdDNkc2V0Jywge29iamVjdDogb2JqLCB0eXBlOiB0eXBlfSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIG9iamVjdCBmcm9tIHNjZW5lIGFuZCBlbnRpdHkgb2JqZWN0M0QgbWFwLgogICAqLwogIHJlbW92ZU9iamVjdDNEOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgdmFyIG9iaiA9IHRoaXMuZ2V0T2JqZWN0M0QodHlwZSk7CiAgICAgIGlmICghb2JqKSB7CiAgICAgICAgd2FybignVHJpZWQgdG8gcmVtb3ZlIGBPYmplY3QzRGAgb2YgdHlwZTonLCB0eXBlLCAnd2hpY2ggd2FzIG5vdCBkZWZpbmVkLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLm9iamVjdDNELnJlbW92ZShvYmopOwogICAgICBkZWxldGUgdGhpcy5vYmplY3QzRE1hcFt0eXBlXTsKICAgICAgdGhpcy5lbWl0KCdvYmplY3QzZHJlbW92ZScsIHt0eXBlOiB0eXBlfSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogR2V0cyBvciBjcmVhdGVzIGFuIG9iamVjdDNEIG9mIGEgZ2l2ZW4gdHlwZS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVHlwZSBvZiB0aGUgb2JqZWN0M0QuCiAgICogQHBhcmFtIHtzdHJpbmd9IENvbnN0cnVjdG9yIC0gQ29uc3RydWN0b3IgdG8gdXNlIHRvIGNyZWF0ZSB0aGUgb2JqZWN0M0QgaWYgbmVlZGVkLgogICAqIEByZXR1cm5zIHtvYmplY3R9CiAgICovCiAgZ2V0T3JDcmVhdGVPYmplY3QzRDogewogICAgdmFsdWU6IGZ1bmN0aW9uICh0eXBlLCBDb25zdHJ1Y3RvcikgewogICAgICB2YXIgb2JqZWN0M0QgPSB0aGlzLmdldE9iamVjdDNEKHR5cGUpOwogICAgICBpZiAoIW9iamVjdDNEICYmIENvbnN0cnVjdG9yKSB7CiAgICAgICAgb2JqZWN0M0QgPSBuZXcgQ29uc3RydWN0b3IoKTsKICAgICAgICB0aGlzLnNldE9iamVjdDNEKHR5cGUsIG9iamVjdDNEKTsKICAgICAgfQogICAgICB3YXJuKCdgZ2V0T3JDcmVhdGVPYmplY3QzRGAgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIGBzZXRPYmplY3QzRCgpYCAnICsKICAgICAgICAgICAnYW5kIGBvYmplY3QzZHNldGAgZXZlbnQgaW5zdGVhZC4nKTsKICAgICAgcmV0dXJuIG9iamVjdDNEOwogICAgfQogIH0sCgogIC8qKgogICAqIEFkZCBjaGlsZCBlbnRpdHkuCiAgICoKICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIC0gQ2hpbGQgZW50aXR5LgogICAqLwogIGFkZDogewogICAgdmFsdWU6IGZ1bmN0aW9uIChlbCkgewogICAgICBpZiAoIWVsLm9iamVjdDNEKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUcnlpbmcgdG8gYWRkIGFuIGVsZW1lbnQgdGhhdCBkb2Vzbid0IGhhdmUgYW4gYG9iamVjdDNEYCIpOwogICAgICB9CiAgICAgIHRoaXMub2JqZWN0M0QuYWRkKGVsLm9iamVjdDNEKTsKICAgICAgdGhpcy5lbWl0KCdjaGlsZC1hdHRhY2hlZCcsIHtlbDogZWx9KTsKICAgIH0KICB9LAoKICAvKioKICAgKiBUZWxsIHBhcmVudE5vZGUgdG8gYWRkIHRoaXMgZW50aXR5IHRvIGl0c2VsZi4KICAgKi8KICBhZGRUb1BhcmVudDogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLnBhcmVudEVsID0gdGhpcy5wYXJlbnROb2RlOwoKICAgICAgLy8gYCFwYXJlbnROb2RlYCBjaGVjayBwcmltYXJpbHkgZm9yIHVuaXQgdGVzdHMuCiAgICAgIGlmICghcGFyZW50Tm9kZSB8fCAhcGFyZW50Tm9kZS5hZGQgfHwgdGhpcy5hdHRhY2hlZFRvUGFyZW50KSB7IHJldHVybjsgfQoKICAgICAgcGFyZW50Tm9kZS5hZGQodGhpcyk7CiAgICAgIHRoaXMuYXR0YWNoZWRUb1BhcmVudCA9IHRydWU7ICAvLyBUbyBwcmV2ZW50IG11bHRpcGxlIGF0dGFjaG1lbnRzIHRvIHNhbWUgcGFyZW50LgogICAgfQogIH0sCgogIC8qKgogICAqIFRlbGwgcGFyZW50Tm9kZSB0byByZW1vdmUgdGhpcyBlbnRpdHkgZnJvbSBpdHNlbGYuCiAgICovCiAgcmVtb3ZlRnJvbVBhcmVudDogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHBhcmVudEVsID0gdGhpcy5wYXJlbnRFbDsKICAgICAgdGhpcy5wYXJlbnRFbC5yZW1vdmUodGhpcyk7CiAgICAgIHRoaXMuYXR0YWNoZWRUb1BhcmVudCA9IGZhbHNlOwogICAgICB0aGlzLnBhcmVudEVsID0gbnVsbDsKICAgICAgcGFyZW50RWwuZW1pdCgnY2hpbGQtZGV0YWNoZWQnLCB7ZWw6IHRoaXN9KTsKICAgIH0KICB9LAoKICBsb2FkOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICBpZiAodGhpcy5oYXNMb2FkZWQgfHwgIXRoaXMucGFyZW50RWwpIHsgcmV0dXJuOyB9CgogICAgICBBTm9kZS5wcm90b3R5cGUubG9hZC5jYWxsKHRoaXMsIGZ1bmN0aW9uIGVudGl0eUxvYWRDYWxsYmFjayAoKSB7CiAgICAgICAgLy8gQ2hlY2sgaWYgZW50aXR5IHdhcyBkZXRhY2hlZCB3aGlsZSBpdCB3YXMgd2FpdGluZyB0byBsb2FkLgogICAgICAgIGlmICghc2VsZi5wYXJlbnRFbCkgeyByZXR1cm47IH0KCiAgICAgICAgc2VsZi51cGRhdGVDb21wb25lbnRzKCk7CiAgICAgICAgaWYgKHNlbGYuaXNTY2VuZSB8fCBzZWxmLnBhcmVudEVsLmlzUGxheWluZykgeyBzZWxmLnBsYXkoKTsgfQogICAgICB9KTsKICAgIH0sCiAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIGNoaWxkIGVudGl0eS4KICAgKgogICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgLSBDaGlsZCBlbnRpdHkuCiAgICovCiAgcmVtb3ZlOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKGVsKSB7CiAgICAgIGlmIChlbCkgewogICAgICAgIHRoaXMub2JqZWN0M0QucmVtb3ZlKGVsLm9iamVjdDNEKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBAcmV0dXJucyB7YXJyYXl9IERpcmVjdCBjaGlsZHJlbiB0aGF0IGFyZSBlbnRpdGllcy4KICAgKi8KICBnZXRDaGlsZEVudGl0aWVzOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwogICAgICB2YXIgY2hpbGRFbnRpdGllcyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldOwogICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEFFbnRpdHkpIHsKICAgICAgICAgIGNoaWxkRW50aXRpZXMucHVzaChjaGlsZCk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gY2hpbGRFbnRpdGllczsKICAgIH0KICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplIGNvbXBvbmVudC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyTmFtZSAtIEF0dHJpYnV0ZSBuYW1lIGFzb2NpYXRlZCB0byB0aGUgY29tcG9uZW50LgogICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQ29tcG9uZW50IGRhdGEKICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRGVwZW5kZW5jeSAtIFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlcGVuZGVuY3kuCiAgICovCiAgaW5pdENvbXBvbmVudDogewogICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyTmFtZSwgZGF0YSwgaXNEZXBlbmRlbmN5KSB7CiAgICAgIHZhciBjb21wb25lbnQ7CiAgICAgIHZhciBjb21wb25lbnRJZDsKICAgICAgdmFyIGNvbXBvbmVudEluZm87CiAgICAgIHZhciBjb21wb25lbnROYW1lOwogICAgICB2YXIgaXNDb21wb25lbnREZWZpbmVkOwoKICAgICAgY29tcG9uZW50SW5mbyA9IHV0aWxzLnNwbGl0KGF0dHJOYW1lLCBNVUxUSVBMRV9DT01QT05FTlRfREVMSU1JVEVSKTsKICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudEluZm9bMF07CiAgICAgIGNvbXBvbmVudElkID0gY29tcG9uZW50SW5mby5sZW5ndGggPiAyCiAgICAgICAgPyBjb21wb25lbnRJbmZvLnNsaWNlKDEpLmpvaW4oJ19fJykKICAgICAgICA6IGNvbXBvbmVudEluZm9bMV07CgogICAgICAvLyBOb3QgYSByZWdpc3RlcmVkIGNvbXBvbmVudC4KICAgICAgaWYgKCFDT01QT05FTlRTW2NvbXBvbmVudE5hbWVdKSB7IHJldHVybjsgfQoKICAgICAgLy8gQ29tcG9uZW50IGlzIG5vdCBhIGRlcGVuZGVuY3kgYW5kIGlzIHVuZGVmaW5lZC4KICAgICAgLy8gSWYgYSBjb21wb25lbnQgaXMgYSBkZXBlbmRlbmN5LCB0aGVuIGl0IGlzIG9rYXkgdG8gaGF2ZSBubyBkYXRhLgogICAgICBpc0NvbXBvbmVudERlZmluZWQgPSBjaGVja0NvbXBvbmVudERlZmluZWQodGhpcywgYXR0ck5hbWUpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgIT09IHVuZGVmaW5lZDsKICAgICAgaWYgKCFpc0NvbXBvbmVudERlZmluZWQgJiYgIWlzRGVwZW5kZW5jeSkgeyByZXR1cm47IH0KCiAgICAgIC8vIENvbXBvbmVudCBhbHJlYWR5IGluaXRpYWxpemVkLgogICAgICBpZiAoYXR0ck5hbWUgaW4gdGhpcy5jb21wb25lbnRzKSB7IHJldHVybjsgfQoKICAgICAgLy8gSW5pdGlhbGl6ZSBkZXBlbmRlbmNpZXMgZmlyc3QKICAgICAgdGhpcy5pbml0Q29tcG9uZW50RGVwZW5kZW5jaWVzKGNvbXBvbmVudE5hbWUpOwoKICAgICAgLy8gSWYgY29tcG9uZW50IG5hbWUgaGFzIGFuIGlkIHdlIGNoZWNrIGNvbXBvbmVudCB0eXBlIG11bHRpcGxpYwogICAgICBpZiAoY29tcG9uZW50SWQgJiYgIUNPTVBPTkVOVFNbY29tcG9uZW50TmFtZV0ubXVsdGlwbGUpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byBpbml0aWFsaXplIG11bHRpcGxlICcgKwogICAgICAgICAgICAgICAgICAgICAgICAnY29tcG9uZW50cyBvZiB0eXBlIGAnICsgY29tcG9uZW50TmFtZSArCiAgICAgICAgICAgICAgICAgICAgICAgICdgLiBUaGVyZSBjYW4gb25seSBiZSBvbmUgY29tcG9uZW50IG9mIHRoaXMgdHlwZSBwZXIgZW50aXR5LicpOwogICAgICB9CiAgICAgIGNvbXBvbmVudCA9IG5ldyBDT01QT05FTlRTW2NvbXBvbmVudE5hbWVdLkNvbXBvbmVudCh0aGlzLCBkYXRhLCBjb21wb25lbnRJZCk7CiAgICAgIGlmICh0aGlzLmlzUGxheWluZykgeyBjb21wb25lbnQucGxheSgpOyB9CgogICAgICAvLyBDb21wb25lbnRzIGFyZSByZWZsZWN0ZWQgaW4gdGhlIERPTSBhcyBhdHRyaWJ1dGVzIGJ1dCB0aGUgc3RhdGUgaXMgbm90IHNob3duCiAgICAgIC8vIGhlbmNlIHdlIHNldCB0aGUgYXR0cmlidXRlIHRvIGVtcHR5IHN0cmluZy4KICAgICAgLy8gVGhlIGZsYWcganVzdEluaXRpYWxpemVkIGlzIGZvciBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgdG8gbm90IG92ZXJ3cml0ZQogICAgICAvLyB0aGUgY29tcG9uZW50IHdpdGggdGhlIGVtcHR5IHN0cmluZy4KICAgICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSkpIHsKICAgICAgICBjb21wb25lbnQuanVzdEluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHJOYW1lLCAnJyk7CiAgICAgIH0KCiAgICAgIGRlYnVnKCdDb21wb25lbnQgaW5pdGlhbGl6ZWQ6ICVzJywgYXR0ck5hbWUpOwogICAgfSwKICAgIHdyaXRhYmxlOiB3aW5kb3cuZGVidWcKICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplIGRlcGVuZGVuY2llcyBvZiBhIGNvbXBvbmVudC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gUm9vdCBjb21wb25lbnQgbmFtZS4KICAgKi8KICBpbml0Q29tcG9uZW50RGVwZW5kZW5jaWVzOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgY29tcG9uZW50ID0gQ09NUE9ORU5UU1tuYW1lXTsKICAgICAgdmFyIGRlcGVuZGVuY2llczsKICAgICAgdmFyIGk7CgogICAgICAvLyBOb3QgYSBjb21wb25lbnQuCiAgICAgIGlmICghY29tcG9uZW50KSB7IHJldHVybjsgfQoKICAgICAgLy8gTm8gZGVwZW5kZW5jaWVzLgogICAgICBkZXBlbmRlbmNpZXMgPSBDT01QT05FTlRTW25hbWVdLmRlcGVuZGVuY2llczsKCiAgICAgIGlmICghZGVwZW5kZW5jaWVzKSB7IHJldHVybjsgfQoKICAgICAgLy8gSW5pdGlhbGl6ZSBkZXBlbmRlbmNpZXMuCiAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyBDYWxsIGdldEF0dHJpYnV0ZSB0byBpbml0aWFsaXplIHRoZSBkYXRhIGZyb20gdGhlIERPTS4KICAgICAgICBzZWxmLmluaXRDb21wb25lbnQoCiAgICAgICAgICBkZXBlbmRlbmNpZXNbaV0sCiAgICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHNlbGYsIGRlcGVuZGVuY2llc1tpXSkgfHwgdW5kZWZpbmVkLAogICAgICAgICAgdHJ1ZQogICAgICAgICk7CiAgICAgIH0KICAgIH0KICB9LAoKICByZW1vdmVDb21wb25lbnQ6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAobmFtZSwgZGVzdHJveSkgewogICAgICB2YXIgY29tcG9uZW50OwoKICAgICAgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW25hbWVdOwogICAgICBpZiAoIWNvbXBvbmVudCkgeyByZXR1cm47IH0KCiAgICAgIC8vIFdhaXQgZm9yIGNvbXBvbmVudCB0byBpbml0aWFsaXplLgogICAgICBpZiAoIWNvbXBvbmVudC5pbml0aWFsaXplZCkgewogICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9uZW50aW5pdGlhbGl6ZWQnLCBmdW5jdGlvbiB0cnlSZW1vdmVMYXRlciAoZXZ0KSB7CiAgICAgICAgICBpZiAoZXZ0LmRldGFpbC5uYW1lICE9PSBuYW1lKSB7IHJldHVybjsgfQogICAgICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQobmFtZSwgZGVzdHJveSk7CiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBvbmVudGluaXRpYWxpemVkJywgdHJ5UmVtb3ZlTGF0ZXIpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY29tcG9uZW50LnBhdXNlKCk7CiAgICAgIGNvbXBvbmVudC5yZW1vdmUoKTsKCiAgICAgIC8vIEtlZXAgY29tcG9uZW50IGF0dGFjaGVkIHRvIGVudGl0eSBpbiBjYXNlIG9mIGp1c3QgZnVsbCBlbnRpdHkgZGV0YWNoLgogICAgICBpZiAoZGVzdHJveSkgewogICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7CiAgICAgICAgZGVsZXRlIHRoaXMuY29tcG9uZW50c1tuYW1lXTsKICAgICAgfQoKICAgICAgdGhpcy5lbWl0KCdjb21wb25lbnRyZW1vdmVkJywgY29tcG9uZW50LmV2dERldGFpbCwgZmFsc2UpOwogICAgfSwKICAgIHdyaXRhYmxlOiB3aW5kb3cuZGVidWcKICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplIG9yIHVwZGF0ZSBhbGwgY29tcG9uZW50cy4KICAgKiBCdWlsZCBkYXRhIHVzaW5nIGluaXRpYWwgY29tcG9uZW50cywgZGVmaW5lZCBhdHRyaWJ1dGVzLCBtaXhpbnMsIGFuZCBkZWZhdWx0cy4KICAgKiBVcGRhdGUgZGVmYXVsdCBjb21wb25lbnRzIGJlZm9yZSB0aGUgcmVzdC4KICAgKgogICAqIEBtZW1iZXIge2Z1bmN0aW9ufSBnZXRFeHRyYUNvbXBvbmVudHMgLSBDYW4gYmUgaW1wbGVtZW50ZWQgdG8gaW5jbHVkZSBjb21wb25lbnQgZGF0YQogICAqICAgZnJvbSBvdGhlciBzb3VyY2VzIChlLmcuLCBpbXBsZW1lbnRlZCBieSBwcmltaXRpdmVzKS4KICAgKi8KICB1cGRhdGVDb21wb25lbnRzOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgZGF0YTsKICAgICAgdmFyIGV4dHJhQ29tcG9uZW50czsKICAgICAgdmFyIGk7CiAgICAgIHZhciBuYW1lOwogICAgICB2YXIgY29tcG9uZW50c1RvVXBkYXRlID0gdGhpcy5jb21wb25lbnRzVG9VcGRhdGU7CgogICAgICBpZiAoIXRoaXMuaGFzTG9hZGVkKSB7IHJldHVybjsgfQoKICAgICAgLy8gR2F0aGVyIG1peGluLWRlZmluZWQgY29tcG9uZW50cy4KICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubWl4aW5FbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBmb3IgKG5hbWUgaW4gdGhpcy5taXhpbkVsc1tpXS5jb21wb25lbnRDYWNoZSkgewogICAgICAgICAgaWYgKGlzQ29tcG9uZW50KG5hbWUpKSB7IGNvbXBvbmVudHNUb1VwZGF0ZVtuYW1lXSA9IHRydWU7IH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIEdhdGhlciBmcm9tIGV4dHJhIGluaXRpYWwgY29tcG9uZW50IGRhdGEgaWYgZGVmaW5lZCAoZS5nLiwgcHJpbWl0aXZlcykuCiAgICAgIGlmICh0aGlzLmdldEV4dHJhQ29tcG9uZW50cykgewogICAgICAgIGV4dHJhQ29tcG9uZW50cyA9IHRoaXMuZ2V0RXh0cmFDb21wb25lbnRzKCk7CiAgICAgICAgZm9yIChuYW1lIGluIGV4dHJhQ29tcG9uZW50cykgewogICAgICAgICAgaWYgKGlzQ29tcG9uZW50KG5hbWUpKSB7IGNvbXBvbmVudHNUb1VwZGF0ZVtuYW1lXSA9IHRydWU7IH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIEdhdGhlciBlbnRpdHktZGVmaW5lZCBjb21wb25lbnRzLgogICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5hdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgbmFtZSA9IHRoaXMuYXR0cmlidXRlc1tpXS5uYW1lOwogICAgICAgIGlmIChPQkpFQ1QzRF9DT01QT05FTlRTLmluZGV4T2YobmFtZSkgIT09IC0xKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgaWYgKGlzQ29tcG9uZW50KG5hbWUpKSB7IGNvbXBvbmVudHNUb1VwZGF0ZVtuYW1lXSA9IHRydWU7IH0KICAgICAgfQoKICAgICAgLy8gb2JqZWN0M0QgY29tcG9uZW50cyBmaXJzdCAocG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZSwgdmlzaWJsZSkuCiAgICAgIGZvciAoaSA9IDA7IGkgPCBPQkpFQ1QzRF9DT01QT05FTlRTLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbmFtZSA9IE9CSkVDVDNEX0NPTVBPTkVOVFNbaV07CiAgICAgICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZShuYW1lKSkgeyBjb250aW51ZTsgfQogICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KG5hbWUsIHRoaXMuZ2V0RE9NQXR0cmlidXRlKG5hbWUpKTsKICAgICAgfQoKICAgICAgLy8gSW5pdGlhbGl6ZSBvciB1cGRhdGUgcmVzdCBvZiBjb21wb25lbnRzLgogICAgICBmb3IgKG5hbWUgaW4gY29tcG9uZW50c1RvVXBkYXRlKSB7CiAgICAgICAgZGF0YSA9IG1lcmdlQ29tcG9uZW50RGF0YSh0aGlzLmdldERPTUF0dHJpYnV0ZShuYW1lKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhQ29tcG9uZW50cyAmJiBleHRyYUNvbXBvbmVudHNbbmFtZV0pOwogICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KG5hbWUsIGRhdGEpOwogICAgICAgIGRlbGV0ZSBjb21wb25lbnRzVG9VcGRhdGVbbmFtZV07CiAgICAgIH0KICAgIH0sCiAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgfSwKCiAgLyoqCiAgICogSW5pdGlhbGl6ZSwgdXBkYXRlLCBvciByZW1vdmUgYSBzaW5nbGUgY29tcG9uZW50LgogICAqCiAgICogV2hlbiBpbml0aWFsaXppbmcsIHdlIHNldCB0aGUgY29tcG9uZW50IG9uIGB0aGlzLmNvbXBvbmVudHNgLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIgLSBDb21wb25lbnQgbmFtZS4KICAgKiBAcGFyYW0ge29iamVjdH0gYXR0clZhbHVlIC0gVmFsdWUgb2YgdGhlIERPTSBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtib29sZWFufSBjbG9iYmVyIC0gSWYgbmV3IGF0dHJWYWx1ZSBjb21wbGV0ZWx5IHJlcGxhY2VzIHByZXZpb3VzIHByb3BlcnRpZXMuCiAgICovCiAgdXBkYXRlQ29tcG9uZW50OiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKGF0dHIsIGF0dHJWYWx1ZSwgY2xvYmJlcikgewogICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2F0dHJdOwoKICAgICAgaWYgKGNvbXBvbmVudCkgewogICAgICAgIC8vIFJlbW92ZSBjb21wb25lbnQuCiAgICAgICAgaWYgKGF0dHJWYWx1ZSA9PT0gbnVsbCAmJiAhY2hlY2tDb21wb25lbnREZWZpbmVkKHRoaXMsIGF0dHIpKSB7CiAgICAgICAgICB0aGlzLnJlbW92ZUNvbXBvbmVudChhdHRyLCB0cnVlKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8gQ29tcG9uZW50IGFscmVhZHkgaW5pdGlhbGl6ZWQuIFVwZGF0ZSBjb21wb25lbnQuCiAgICAgICAgY29tcG9uZW50LnVwZGF0ZVByb3BlcnRpZXMoYXR0clZhbHVlLCBjbG9iYmVyKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vIENvbXBvbmVudCBub3QgeWV0IGluaXRpYWxpemVkLiBJbml0aWFsaXplIGNvbXBvbmVudC4KICAgICAgdGhpcy5pbml0Q29tcG9uZW50KGF0dHIsIGF0dHJWYWx1ZSwgZmFsc2UpOwogICAgfQogIH0sCgogIC8qKgogICAqIElmIGBhdHRyYCBpcyBhIGNvbXBvbmVudCBuYW1lLCBkZXRhY2ggdGhlIGNvbXBvbmVudCBmcm9tIHRoZSBlbnRpdHkuCiAgICoKICAgKiBJZiBgcHJvcGVydHlOYW1lYCBpcyBnaXZlbiwgcmVzZXQgdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB2YWx1ZSB0byBpdHMgZGVmYXVsdC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyIC0gQXR0cmlidXRlIG5hbWUsIHdoaWNoIGNvdWxkIGFsc28gYmUgYSBjb21wb25lbnQgbmFtZS4KICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlOYW1lIC0gQ29tcG9uZW50IHByb3AgbmFtZSwgaWYgcmVzZXR0aW5nIGFuIGluZGl2aWR1YWwgcHJvcC4KICAgKi8KICByZW1vdmVBdHRyaWJ1dGU6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgcHJvcGVydHlOYW1lKSB7CiAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbYXR0cl07CgogICAgICAvLyBSZW1vdmUgY29tcG9uZW50LgogICAgICBpZiAoY29tcG9uZW50ICYmIHByb3BlcnR5TmFtZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQoYXR0ciwgdHJ1ZSk7CiAgICAgIH0KCiAgICAgIC8vIFJlc2V0IGNvbXBvbmVudCBwcm9wZXJ0eSB2YWx1ZS4KICAgICAgaWYgKGNvbXBvbmVudCAmJiBwcm9wZXJ0eU5hbWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGNvbXBvbmVudC5yZXNldFByb3BlcnR5KHByb3BlcnR5TmFtZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvLyBSZW1vdmUgbWl4aW5zLgogICAgICBpZiAoYXR0ciA9PT0gJ21peGluJykgewogICAgICAgIHRoaXMubWl4aW5VcGRhdGUoJycpOwogICAgICB9CgogICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHIpOwogICAgfQogIH0sCgogIC8qKgogICAqIFN0YXJ0IGR5bmFtaWMgYmVoYXZpb3IgYXNzb2NpYXRlZCB3aXRoIGVudGl0eSBzdWNoIGFzIGR5bmFtaWMgY29tcG9uZW50cyBhbmQgYW5pbWF0aW9ucy4KICAgKiBUZWxsIGFsbCBjaGlsZHJlbiBlbnRpdGllcyB0byBhbHNvIHBsYXkuCiAgICovCiAgcGxheTogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGVudGl0aWVzOwogICAgICB2YXIgaTsKICAgICAgdmFyIGtleTsKCiAgICAgIC8vIEFscmVhZHkgcGxheWluZy4KICAgICAgaWYgKHRoaXMuaXNQbGF5aW5nIHx8ICF0aGlzLmhhc0xvYWRlZCkgeyByZXR1cm47IH0KICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlOwoKICAgICAgLy8gV2FrZSB1cCBhbGwgY29tcG9uZW50cy4KICAgICAgZm9yIChrZXkgaW4gdGhpcy5jb21wb25lbnRzKSB7IHRoaXMuY29tcG9uZW50c1trZXldLnBsYXkoKTsgfQoKICAgICAgLy8gVGVsbCBhbGwgY2hpbGQgZW50aXRpZXMgdG8gcGxheS4KICAgICAgZW50aXRpZXMgPSB0aGlzLmdldENoaWxkRW50aXRpZXMoKTsKICAgICAgZm9yIChpID0gMDsgaSA8IGVudGl0aWVzLmxlbmd0aDsgaSsrKSB7IGVudGl0aWVzW2ldLnBsYXkoKTsgfQoKICAgICAgdGhpcy5lbWl0KCdwbGF5Jyk7CiAgICB9LAogICAgd3JpdGFibGU6IHRydWUKICB9LAoKICAvKioKICAgKiBQYXVzZSBkeW5hbWljIGJlaGF2aW9yIGFzc29jaWF0ZWQgd2l0aCBlbnRpdHkgc3VjaCBhcyBkeW5hbWljIGNvbXBvbmVudHMgYW5kIGFuaW1hdGlvbnMuCiAgICogVGVsbCBhbGwgY2hpbGRyZW4gZW50aXRpZXMgdG8gYWxzbyBwYXVzZS4KICAgKi8KICBwYXVzZTogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGVudGl0aWVzOwogICAgICB2YXIgaTsKICAgICAgdmFyIGtleTsKCiAgICAgIGlmICghdGhpcy5pc1BsYXlpbmcpIHsgcmV0dXJuOyB9CiAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7CgogICAgICAvLyBTbGVlcCBhbGwgY29tcG9uZW50cy4KICAgICAgZm9yIChrZXkgaW4gdGhpcy5jb21wb25lbnRzKSB7IHRoaXMuY29tcG9uZW50c1trZXldLnBhdXNlKCk7IH0KCiAgICAgIC8vIFRlbGwgYWxsIGNoaWxkIGVudGl0aWVzIHRvIHBhdXNlLgogICAgICBlbnRpdGllcyA9IHRoaXMuZ2V0Q2hpbGRFbnRpdGllcygpOwogICAgICBmb3IgKGkgPSAwOyBpIDwgZW50aXRpZXMubGVuZ3RoOyBpKyspIHsgZW50aXRpZXNbaV0ucGF1c2UoKTsgfQoKICAgICAgdGhpcy5lbWl0KCdwYXVzZScpOwogICAgfSwKICAgIHdyaXRhYmxlOiB0cnVlCiAgfSwKCiAgLyoqCiAgICogRGVhbHMgd2l0aCB1cGRhdGVzIG9uIGVudGl0eS1zcGVjaWZpYyBhdHRyaWJ1dGVzIChpLmUuLCBjb21wb25lbnRzIGFuZCBtaXhpbnMpLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHIKICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkVmFsCiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBuZXdWYWwKICAgKi8KICBzZXRFbnRpdHlBdHRyaWJ1dGU6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHsKICAgICAgaWYgKENPTVBPTkVOVFNbYXR0cl0gfHwgdGhpcy5jb21wb25lbnRzW2F0dHJdKSB7CiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQoYXR0ciwgbmV3VmFsKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKGF0dHIgPT09ICdtaXhpbicpIHsKICAgICAgICAvLyBJZ25vcmUgaWYgYDxhLW5vZGU+YCBjb2RlIGlzIGp1c3QgdXBkYXRpbmcgY29tcHV0ZWQgbWl4aW4gaW4gdGhlIERPTS4KICAgICAgICBpZiAobmV3VmFsID09PSB0aGlzLmNvbXB1dGVkTWl4aW5TdHIpIHsgcmV0dXJuOyB9CiAgICAgICAgdGhpcy5taXhpblVwZGF0ZShuZXdWYWwsIG9sZFZhbCk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBXaGVuIG1peGlucyB1cGRhdGVkLCB0cmlnZ2VyIGluaXQgb3Igb3B0aW1pemVkLXVwZGF0ZSBvZiByZWxldmFudCBjb21wb25lbnRzLgogICAqLwogIG1peGluVXBkYXRlOiB7CiAgICB2YWx1ZTogKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNvbXBvbmVudHNVcGRhdGVkID0gW107CgogICAgICByZXR1cm4gZnVuY3Rpb24gKG5ld01peGlucywgb2xkTWl4aW5zKSB7CiAgICAgICAgdmFyIGNvbXBvbmVudDsKICAgICAgICB2YXIgbWl4aW5FbDsKICAgICAgICB2YXIgbWl4aW5JZHM7CiAgICAgICAgdmFyIGk7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICBpZiAoIXRoaXMuaGFzTG9hZGVkKSB7CiAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2VsZi5taXhpblVwZGF0ZShuZXdNaXhpbnMsIG9sZE1peGlucyk7CiAgICAgICAgICB9LCBPTkNFKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIG9sZE1peGlucyA9IG9sZE1peGlucyB8fCB0aGlzLmdldEF0dHJpYnV0ZSgnbWl4aW4nKTsKICAgICAgICBtaXhpbklkcyA9IHRoaXMudXBkYXRlTWl4aW5zKG5ld01peGlucywgb2xkTWl4aW5zKTsKCiAgICAgICAgLy8gTG9vcCBvdmVyIGN1cnJlbnQgbWl4aW5zLgogICAgICAgIGNvbXBvbmVudHNVcGRhdGVkLmxlbmd0aCA9IDA7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubWl4aW5FbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGZvciAoY29tcG9uZW50IGluIHRoaXMubWl4aW5FbHNbaV0uY29tcG9uZW50Q2FjaGUpIHsKICAgICAgICAgICAgaWYgKGNvbXBvbmVudHNVcGRhdGVkLmluZGV4T2YoY29tcG9uZW50KSA9PT0gLTEpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudF0pIHsKICAgICAgICAgICAgICAgIC8vIFVwZGF0ZS4gSnVzdCByZWJ1aWxkIGRhdGEuCiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50XS5oYW5kbGVNaXhpblVwZGF0ZSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBJbml0LiBidWlsZERhdGEgd2lsbCBnYXRoZXIgbWl4aW4gdmFsdWVzLgogICAgICAgICAgICAgICAgdGhpcy5pbml0Q29tcG9uZW50KGNvbXBvbmVudCwgbnVsbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbXBvbmVudHNVcGRhdGVkLnB1c2goY29tcG9uZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gTG9vcCBvdmVyIG9sZCBtaXhpbnMgdG8gY2FsbCBmb3IgZGF0YSByZWJ1aWxkLgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaXhpbklkcy5vbGRNaXhpbklkcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgbWl4aW5FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1peGluSWRzLm9sZE1peGluSWRzW2ldKTsKICAgICAgICAgIGlmICghbWl4aW5FbCkgeyBjb250aW51ZTsgfQogICAgICAgICAgZm9yIChjb21wb25lbnQgaW4gbWl4aW5FbC5jb21wb25lbnRDYWNoZSkgewogICAgICAgICAgICBpZiAoY29tcG9uZW50c1VwZGF0ZWQuaW5kZXhPZihjb21wb25lbnQpID09PSAtMSkgewogICAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50XSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0RE9NQXR0cmlidXRlKGNvbXBvbmVudCkpIHsKICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudCBpZiBleHBsaWNpdGx5IGRlZmluZWQuCiAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50c1tjb21wb25lbnRdLmhhbmRsZU1peGluVXBkYXRlKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY29tcG9uZW50IGlmIG5vdCBleHBsaWNpdGx5IGRlZmluZWQuCiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgfSkoKQogIH0sCgogIC8qKgogICAqIHNldEF0dHJpYnV0ZSBjYW46CiAgICoKICAgKiAxLiBTZXQgYSBzaW5nbGUgcHJvcGVydHkgb2YgYSBtdWx0aS1wcm9wZXJ0eSBjb21wb25lbnQuCiAgICogMi4gU2V0IG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSBtdWx0aS1wcm9wZXJ0eSBjb21wb25lbnQuCiAgICogMy4gUmVwbGFjZSBwcm9wZXJ0aWVzIG9mIGEgbXVsdGktcHJvcGVydHkgY29tcG9uZW50LgogICAqIDQuIFNldCBhIHZhbHVlIGZvciBhIHNpbmdsZS1wcm9wZXJ0eSBjb21wb25lbnQsIG1peGluLCBvciBub3JtYWwgSFRNTCBhdHRyaWJ1dGUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0ck5hbWUgLSBDb21wb25lbnQgb3IgYXR0cmlidXRlIG5hbWUuCiAgICogQHBhcmFtIHsqfSBhcmcxIC0gQ2FuIGJlIGEgdmFsdWUsIHByb3BlcnR5IG5hbWUsIENTUy1zdHlsZSBwcm9wZXJ0eSBzdHJpbmcsIG9yCiAgICogICBvYmplY3Qgb2YgcHJvcGVydGllcy4KICAgKiBAcGFyYW0geyp8Ym9vbH0gYXJnMiAtIElmIGFyZzEgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGlzIHNob3VsZCBiZSBhIHZhbHVlLiBPdGhlcndpc2UsCiAgICogICBpdCBpcyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGNsb2JiZXIgcHJldmlvdXMgdmFsdWVzIChkZWZhdWx0cyB0byBmYWxzZSkuCiAgICovCiAgc2V0QXR0cmlidXRlOiB7CiAgICB2YWx1ZTogKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHNpbmdsZVByb3BVcGRhdGUgPSB7fTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXR0ck5hbWUsIGFyZzEsIGFyZzIpIHsKICAgICAgICB2YXIgbmV3QXR0clZhbHVlOwogICAgICAgIHZhciBjbG9iYmVyOwogICAgICAgIHZhciBjb21wb25lbnROYW1lOwogICAgICAgIHZhciBkZWxpbWl0ZXJJbmRleDsKICAgICAgICB2YXIgaXNEZWJ1Z01vZGU7CiAgICAgICAgdmFyIGtleTsKCiAgICAgICAgZGVsaW1pdGVySW5kZXggPSBhdHRyTmFtZS5pbmRleE9mKE1VTFRJUExFX0NPTVBPTkVOVF9ERUxJTUlURVIpOwogICAgICAgIGNvbXBvbmVudE5hbWUgPSBkZWxpbWl0ZXJJbmRleCA+IDAgPyBhdHRyTmFtZS5zdWJzdHJpbmcoMCwgZGVsaW1pdGVySW5kZXgpIDogYXR0ck5hbWU7CgogICAgICAgIC8vIE5vdCBhIGNvbXBvbmVudC4gTm9ybWFsIHNldCBhdHRyaWJ1dGUuCiAgICAgICAgaWYgKCFDT01QT05FTlRTW2NvbXBvbmVudE5hbWVdKSB7CiAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdtaXhpbicpIHsgdGhpcy5taXhpblVwZGF0ZShhcmcxKTsgfQogICAgICAgICAgQU5vZGUucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHJOYW1lLCBhcmcxKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIC8vIEluaXRpYWxpemUgY29tcG9uZW50IGZpcnN0IGlmIG5vdCB5ZXQgaW5pdGlhbGl6ZWQuCiAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudHNbYXR0ck5hbWVdICYmIHRoaXMuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSkgewogICAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQoCiAgICAgICAgICAgIGF0dHJOYW1lLAogICAgICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHJOYW1lKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBEZXRlcm1pbmUgbmV3IGF0dHJpYnV0ZXMgZnJvbSB0aGUgYXJndW1lbnRzCiAgICAgICAgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJyAmJgogICAgICAgICAgICB0eXBlb2YgYXJnMSA9PT0gJ3N0cmluZycgJiYKICAgICAgICAgICAgYXJnMS5sZW5ndGggPiAwICYmCiAgICAgICAgICAgIHR5cGVvZiB1dGlscy5zdHlsZVBhcnNlci5wYXJzZShhcmcxKSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgIC8vIFVwZGF0ZSBhIHNpbmdsZSBwcm9wZXJ0eSBvZiBhIG11bHRpLXByb3BlcnR5IGNvbXBvbmVudAogICAgICAgICAgZm9yIChrZXkgaW4gc2luZ2xlUHJvcFVwZGF0ZSkgeyBkZWxldGUgc2luZ2xlUHJvcFVwZGF0ZVtrZXldOyB9CiAgICAgICAgICBuZXdBdHRyVmFsdWUgPSBzaW5nbGVQcm9wVXBkYXRlOwogICAgICAgICAgbmV3QXR0clZhbHVlW2FyZzFdID0gYXJnMjsKICAgICAgICAgIGNsb2JiZXIgPSBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gVXBkYXRlIHdpdGggYSB2YWx1ZSwgb2JqZWN0LCBvciBDU1Mtc3R5bGUgcHJvcGVydHkgc3RyaW5nLCB3aXRoIHRoZSBwb3NzaWJsaXR5CiAgICAgICAgICAvLyBvZiBjbG9iYmVyaW5nIHByZXZpb3VzIHZhbHVlcy4KICAgICAgICAgIG5ld0F0dHJWYWx1ZSA9IGFyZzE7CiAgICAgICAgICBjbG9iYmVyID0gKGFyZzIgPT09IHRydWUpOwogICAgICAgIH0KCiAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudAogICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KGF0dHJOYW1lLCBuZXdBdHRyVmFsdWUsIGNsb2JiZXIpOwoKICAgICAgICAvLyBJbiBkZWJ1ZyBtb2RlLCB3cml0ZSBjb21wb25lbnQgZGF0YSB1cCB0byB0aGUgRE9NLgogICAgICAgIGlzRGVidWdNb2RlID0gdGhpcy5zY2VuZUVsICYmIHRoaXMuc2NlbmVFbC5nZXRBdHRyaWJ1dGUoJ2RlYnVnJyk7CiAgICAgICAgaWYgKGlzRGVidWdNb2RlKSB7IHRoaXMuY29tcG9uZW50c1thdHRyTmFtZV0uZmx1c2hUb0RPTSgpOyB9CiAgICAgIH07CiAgICB9KSgpLAogICAgd3JpdGFibGU6IHdpbmRvdy5kZWJ1ZwogIH0sCgogIC8qKgogICAqIFJlZmxlY3QgY29tcG9uZW50IGRhdGEgaW4gdGhlIERPTSAoYXMgc2VlbiBmcm9tIHRoZSBicm93c2VyIERPTSBJbnNwZWN0b3IpLgogICAqCiAgICogQHBhcmFtIHtib29sfSByZWN1cnNpdmUgLSBBbHNvIGZsdXNoVG9ET00gb24gdGhlIGNoaWxkcmVuLgogICAqKi8KICBmbHVzaFRvRE9NOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKHJlY3Vyc2l2ZSkgewogICAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50czsKICAgICAgdmFyIGNoaWxkOwogICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwogICAgICB2YXIgaTsKICAgICAgdmFyIGtleTsKCiAgICAgIC8vIEZsdXNoIGVudGl0eSdzIGNvbXBvbmVudHMgdG8gRE9NLgogICAgICBmb3IgKGtleSBpbiBjb21wb25lbnRzKSB7CiAgICAgICAgY29tcG9uZW50c1trZXldLmZsdXNoVG9ET00oKTsKICAgICAgfQoKICAgICAgLy8gUmVjdXJzZS4KICAgICAgaWYgKCFyZWN1cnNpdmUpIHsgcmV0dXJuOyB9CiAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkgewogICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07CiAgICAgICAgaWYgKCFjaGlsZC5mbHVzaFRvRE9NKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgY2hpbGQuZmx1c2hUb0RPTShyZWN1cnNpdmUpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogSWYgYGF0dHJgIGlzIGEgY29tcG9uZW50LCByZXR1cm5zIEFMTCBjb21wb25lbnQgZGF0YSBpbmNsdWRpbmcgYXBwbGllZCBtaXhpbnMgYW5kCiAgICogZGVmYXVsdHMuCiAgICoKICAgKiBJZiBgYXR0cmAgaXMgbm90IGEgY29tcG9uZW50LCBmYWxsIGJhY2sgdG8gSFRNTCBnZXRBdHRyaWJ1dGUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cgogICAqIEByZXR1cm5zIHtvYmplY3R8c3RyaW5nfSBPYmplY3QgaWYgY29tcG9uZW50LCBlbHNlIHN0cmluZy4KICAgKi8KICBnZXRBdHRyaWJ1dGU6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAvLyBJZiBjb21wb25lbnQsIHJldHVybiBjb21wb25lbnQgZGF0YS4KICAgICAgdmFyIGNvbXBvbmVudDsKICAgICAgaWYgKGF0dHIgPT09ICdwb3NpdGlvbicpIHsgcmV0dXJuIHRoaXMub2JqZWN0M0QucG9zaXRpb247IH0KICAgICAgaWYgKGF0dHIgPT09ICdyb3RhdGlvbicpIHsgcmV0dXJuIGdldFJvdGF0aW9uKHRoaXMpOyB9CiAgICAgIGlmIChhdHRyID09PSAnc2NhbGUnKSB7IHJldHVybiB0aGlzLm9iamVjdDNELnNjYWxlOyB9CiAgICAgIGlmIChhdHRyID09PSAndmlzaWJsZScpIHsgcmV0dXJuIHRoaXMub2JqZWN0M0QudmlzaWJsZTsgfQogICAgICBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbYXR0cl07CiAgICAgIGlmIChjb21wb25lbnQpIHsgcmV0dXJuIGNvbXBvbmVudC5kYXRhOyB9CiAgICAgIHJldHVybiB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHIpOwogICAgfSwKICAgIHdyaXRhYmxlOiB3aW5kb3cuZGVidWcKICB9LAoKICAvKioKICAgKiBJZiBgYXR0cmAgaXMgYSBjb21wb25lbnQsIHJldHVybnMgSlVTVCB0aGUgY29tcG9uZW50IGRhdGEgZGVmaW5lZCBvbiB0aGUgZW50aXR5LgogICAqIExpa2UgYSBwYXJ0aWFsIHZlcnNpb24gb2YgYGdldENvbXB1dGVkQXR0cmlidXRlYCBhcyByZXR1cm5lZCBjb21wb25lbnQgZGF0YQogICAqIGRvZXMgbm90IGluY2x1ZGUgYXBwbGllZCBtaXhpbnMgb3IgZGVmYXVsdHMuCiAgICoKICAgKiBJZiBgYXR0cmAgaXMgbm90IGEgY29tcG9uZW50LCBmYWxsIGJhY2sgdG8gSFRNTCBnZXRBdHRyaWJ1dGUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cgogICAqIEByZXR1cm5zIHtvYmplY3R8c3RyaW5nfSBPYmplY3QgaWYgY29tcG9uZW50LCBlbHNlIHN0cmluZy4KICAgKi8KICBnZXRET01BdHRyaWJ1dGU6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAvLyBJZiBjYWNoZWQgdmFsdWUgZXhpc3RzLCByZXR1cm4gcGFydGlhbCBjb21wb25lbnQgZGF0YS4KICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1thdHRyXTsKICAgICAgaWYgKGNvbXBvbmVudCkgeyByZXR1cm4gY29tcG9uZW50LmF0dHJWYWx1ZTsgfQogICAgICByZXR1cm4gd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBhdHRyKTsKICAgIH0sCiAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgfSwKCiAgYWRkU3RhdGU6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgaWYgKHRoaXMuaXMoc3RhdGUpKSB7IHJldHVybjsgfQogICAgICB0aGlzLnN0YXRlcy5wdXNoKHN0YXRlKTsKICAgICAgdGhpcy5lbWl0KCdzdGF0ZWFkZGVkJywgc3RhdGUpOwogICAgfQogIH0sCgogIHJlbW92ZVN0YXRlOiB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgIHZhciBzdGF0ZUluZGV4ID0gdGhpcy5zdGF0ZXMuaW5kZXhPZihzdGF0ZSk7CiAgICAgIGlmIChzdGF0ZUluZGV4ID09PSAtMSkgeyByZXR1cm47IH0KICAgICAgdGhpcy5zdGF0ZXMuc3BsaWNlKHN0YXRlSW5kZXgsIDEpOwogICAgICB0aGlzLmVtaXQoJ3N0YXRlcmVtb3ZlZCcsIHN0YXRlKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBDaGVja3MgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYSBnaXZlbiBzdGF0ZS4gZS5nLiBlbC5pcygnYWxpdmUnKTsKICAgKiBAdHlwZSB7c3RyaW5nfSBzdGF0ZSAtIE5hbWUgb2YgdGhlIHN0YXRlIHdlIHdhbnQgdG8gY2hlY2sKICAgKi8KICBpczogewogICAgdmFsdWU6IGZ1bmN0aW9uIChzdGF0ZSkgewogICAgICByZXR1cm4gdGhpcy5zdGF0ZXMuaW5kZXhPZihzdGF0ZSkgIT09IC0xOwogICAgfQogIH0sCgogIC8qKgogICAqIE9wZW4gSW5zcGVjdG9yIHRvIHRoaXMgZW50aXR5LgogICAqLwogIGluc3BlY3Q6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMuc2NlbmVFbC5jb21wb25lbnRzLmluc3BlY3Rvci5vcGVuSW5zcGVjdG9yKHRoaXMpOwogICAgfQogIH0sCgogIC8qKgogICAqIENsZWFuIHVwIG1lbW9yeSBhbmQgcmV0dXJuIG1lbW9yeSB0byBvYmplY3QgcG9vbHMuCiAgICovCiAgZGVzdHJveTogewogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGtleTsKICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSkgewogICAgICAgIHdhcm4oJ0VudGl0eSBjYW4gb25seSBiZSBkZXN0cm95ZWQgaWYgZGV0YWNoZWQgZnJvbSBzY2VuZWdyYXBoLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBmb3IgKGtleSBpbiB0aGlzLmNvbXBvbmVudHMpIHsKICAgICAgICB0aGlzLmNvbXBvbmVudHNba2V5XS5kZXN0cm95KCk7CiAgICAgIH0KICAgIH0KICB9Cn0pOwoKLyoqCiAqIENoZWNrIGlmIGEgY29tcG9uZW50IGlzICpkZWZpbmVkKiBmb3IgYW4gZW50aXR5LCBpbmNsdWRpbmcgZGVmYXVsdHMgYW5kIG1peGlucy4KICogRG9lcyBub3QgY2hlY2sgd2hldGhlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuICppbml0aWFsaXplZCogZm9yIGFuIGVudGl0eS4KICoKICogQHBhcmFtIHtzdHJpbmd9IGVsIC0gRW50aXR5LgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIENvbXBvbmVudCBuYW1lLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0KICovCmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50RGVmaW5lZCAoZWwsIG5hbWUpIHsKICAvLyBDaGVjayBpZiBlbGVtZW50IGNvbnRhaW5zIHRoZSBjb21wb25lbnQuCiAgaWYgKGVsLmNvbXBvbmVudHNbbmFtZV0gJiYgZWwuY29tcG9uZW50c1tuYW1lXS5hdHRyVmFsdWUpIHsgcmV0dXJuIHRydWU7IH0KCiAgcmV0dXJuIGlzQ29tcG9uZW50TWl4ZWRJbihuYW1lLCBlbC5taXhpbkVscyk7Cn0KCi8qKgogKiBDaGVjayBpZiBhbnkgbWl4aW5zIGNvbnRhaW5zIGEgY29tcG9uZW50LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIENvbXBvbmVudCBuYW1lLgogKiBAcGFyYW0ge2FycmF5fSBtaXhpbkVscyAtIEFycmF5IG9mIDxhLW1peGluPnMuCiAqLwpmdW5jdGlvbiBpc0NvbXBvbmVudE1peGVkSW4gKG5hbWUsIG1peGluRWxzKSB7CiAgdmFyIGk7CiAgdmFyIGluTWl4aW4gPSBmYWxzZTsKICBmb3IgKGkgPSAwOyBpIDwgbWl4aW5FbHMubGVuZ3RoOyArK2kpIHsKICAgIGluTWl4aW4gPSBtaXhpbkVsc1tpXS5oYXNBdHRyaWJ1dGUobmFtZSk7CiAgICBpZiAoaW5NaXhpbikgeyBicmVhazsgfQogIH0KICByZXR1cm4gaW5NaXhpbjsKfQoKLyoqCiAqIEdpdmVuIGVudGl0eSBkZWZpbmVkIHZhbHVlLCBtZXJnZSBpbiBleHRyYSBkYXRhIGlmIG5lY2Vzc2FyeS4KICogSGFuZGxlIGJvdGggc2luZ2xlIGFuZCBtdWx0aS1wcm9wZXJ0eSBjb21wb25lbnRzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gYXR0clZhbHVlIC0gRW50aXR5IGRhdGEuCiAqIEBwYXJhbSBleHRyYURhdGEgLSBFbnRpdHkgZGF0YSBmcm9tIGFub3RoZXIgc291cmNlIHRvIG1lcmdlIGluLgogKi8KZnVuY3Rpb24gbWVyZ2VDb21wb25lbnREYXRhIChhdHRyVmFsdWUsIGV4dHJhRGF0YSkgewogIC8vIEV4dHJhIGRhdGEgbm90IGRlZmluZWQsIGp1c3QgcmV0dXJuIGF0dHJWYWx1ZS4KICBpZiAoIWV4dHJhRGF0YSkgeyByZXR1cm4gYXR0clZhbHVlOyB9CgogIC8vIE1lcmdlIG11bHRpLXByb3BlcnR5IGRhdGEuCiAgaWYgKGV4dHJhRGF0YS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICByZXR1cm4gdXRpbHMuZXh0ZW5kKGV4dHJhRGF0YSwgdXRpbHMuc3R5bGVQYXJzZXIucGFyc2UoYXR0clZhbHVlIHx8IHt9KSk7CiAgfQoKICAvLyBSZXR1cm4gZGF0YSwgcHJlY2VuZGVuY2UgdG8gdGhlIGRlZmluZWQgdmFsdWUuCiAgcmV0dXJuIGF0dHJWYWx1ZSB8fCBleHRyYURhdGE7Cn0KCmZ1bmN0aW9uIGlzQ29tcG9uZW50IChjb21wb25lbnROYW1lKSB7CiAgaWYgKGNvbXBvbmVudE5hbWUuaW5kZXhPZihNVUxUSVBMRV9DT01QT05FTlRfREVMSU1JVEVSKSAhPT0gLTEpIHsKICAgIGNvbXBvbmVudE5hbWUgPSB1dGlscy5zcGxpdChjb21wb25lbnROYW1lLCBNVUxUSVBMRV9DT01QT05FTlRfREVMSU1JVEVSKVswXTsKICB9CiAgaWYgKCFDT01QT05FTlRTW2NvbXBvbmVudE5hbWVdKSB7IHJldHVybiBmYWxzZTsgfQogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBnZXRSb3RhdGlvbiAoZW50aXR5RWwpIHsKICB2YXIgcmFkVG9EZWcgPSBUSFJFRS5NYXRoLnJhZFRvRGVnOwogIHZhciByb3RhdGlvbiA9IGVudGl0eUVsLm9iamVjdDNELnJvdGF0aW9uOwogIHZhciByb3RhdGlvbk9iaiA9IGVudGl0eUVsLnJvdGF0aW9uT2JqOwogIHJvdGF0aW9uT2JqLnggPSByYWRUb0RlZyhyb3RhdGlvbi54KTsKICByb3RhdGlvbk9iai55ID0gcmFkVG9EZWcocm90YXRpb24ueSk7CiAgcm90YXRpb25PYmoueiA9IHJhZFRvRGVnKHJvdGF0aW9uLnopOwogIHJldHVybiByb3RhdGlvbk9iajsKfQoKQUVudGl0eSA9IHJlZ2lzdGVyRWxlbWVudCgnYS1lbnRpdHknLCB7cHJvdG90eXBlOiBwcm90b30pOwptb2R1bGUuZXhwb3J0cyA9IEFFbnRpdHk7Cgp9LHsiLi4vbGliL3RocmVlIjoxNTcsIi4uL3V0aWxzLyI6MTgyLCIuL2Etbm9kZSI6MTA3LCIuL2EtcmVnaXN0ZXItZWxlbWVudCI6MTA4LCIuL2NvbXBvbmVudCI6MTA5fV0sMTA2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFOb2RlID0gX2RlcmVxXygnLi9hLW5vZGUnKTsKdmFyIHJlZ2lzdGVyRWxlbWVudCA9IF9kZXJlcV8oJy4vYS1yZWdpc3Rlci1lbGVtZW50JykucmVnaXN0ZXJFbGVtZW50Owp2YXIgY29tcG9uZW50cyA9IF9kZXJlcV8oJy4vY29tcG9uZW50JykuY29tcG9uZW50czsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMnKTsKCnZhciBNVUxUSVBMRV9DT01QT05FTlRfREVMSU1JVEVSID0gJ19fJzsKCi8qKgogKiBAbWVtYmVyIHtvYmplY3R9IGNvbXBvbmVudENhY2hlIC0gQ2FjaGUgb2YgcHJlLXBhcnNlZCB2YWx1ZXMuIEFuIG9iamVjdCB3aGVyZSB0aGUga2V5cwogKiAgICAgICAgIGFyZSBjb21wb25lbnQgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIGFscmVhZHkgcGFyc2VkIGJ5IHRoZSBjb21wb25lbnQuCiAqLwptb2R1bGUuZXhwb3J0cyA9IHJlZ2lzdGVyRWxlbWVudCgnYS1taXhpbicsIHsKICBwcm90b3R5cGU6IE9iamVjdC5jcmVhdGUoQU5vZGUucHJvdG90eXBlLCB7CiAgICBjcmVhdGVkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLmNvbXBvbmVudENhY2hlID0ge307CiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdpZCcpOwogICAgICAgIHRoaXMuaXNNaXhpbiA9IHRydWU7CiAgICAgIH0KICAgIH0sCgogICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHsKICAgICAgICB0aGlzLmNhY2hlQXR0cmlidXRlKGF0dHIsIG5ld1ZhbCk7CiAgICAgICAgdGhpcy51cGRhdGVFbnRpdGllcygpOwogICAgICB9CiAgICB9LAoKICAgIGF0dGFjaGVkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnNjZW5lRWwgPSB0aGlzLmNsb3Nlc3RTY2VuZSgpOwogICAgICAgIHRoaXMuY2FjaGVBdHRyaWJ1dGVzKCk7CiAgICAgICAgdGhpcy51cGRhdGVFbnRpdGllcygpOwogICAgICAgIHRoaXMubG9hZCgpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogc2V0QXR0cmlidXRlIHRoYXQgcGFyc2VzIGFuZCBjYWNoZXMgY29tcG9uZW50IHZhbHVlcy4KICAgICAqLwogICAgc2V0QXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgdmFsdWUpIHsKICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHIsIHZhbHVlKTsKICAgICAgICB0aGlzLmNhY2hlQXR0cmlidXRlKGF0dHIsIHZhbHVlKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIElmIGBhdHRyYCBpcyBhIGNvbXBvbmVudCwgdGhlbiBwYXJzZSB0aGUgdmFsdWUgdXNpbmcgdGhlIHNjaGVtYSBhbmQgc3RvcmUgaXQuCiAgICAgKi8KICAgIGNhY2hlQXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgdmFsdWUpIHsKICAgICAgICB2YXIgY29tcG9uZW50OwogICAgICAgIHZhciBjb21wb25lbnROYW1lOwoKICAgICAgICAvLyBHZXQgY29tcG9uZW50IGRhdGEuCiAgICAgICAgY29tcG9uZW50TmFtZSA9IHV0aWxzLnNwbGl0KGF0dHIsIE1VTFRJUExFX0NPTVBPTkVOVF9ERUxJTUlURVIpWzBdOwogICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbY29tcG9uZW50TmFtZV07CiAgICAgICAgaWYgKCFjb21wb25lbnQpIHsgcmV0dXJuOyB9CiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHZhbHVlID0gd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBhdHRyKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5jb21wb25lbnRDYWNoZVthdHRyXSA9IGNvbXBvbmVudC5wYXJzZUF0dHJWYWx1ZUZvckNhY2hlKHZhbHVlKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIElmIGBhdHRyYCBpcyBhIGNvbXBvbmVudCwgdGhlbiBncmFiIHByZS1wYXJzZWQgdmFsdWUgZnJvbSB0aGUgY2FjaGUuCiAgICAgKiBFbHNlIGRvIGEgbm9ybWFsIGdldEF0dHJpYnV0ZS4KICAgICAqLwogICAgZ2V0QXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudENhY2hlW2F0dHJdIHx8CiAgICAgICAgICAgICAgIHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlLmNhbGwodGhpcywgYXR0cik7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBQYXJzZSBhbmQgY2FjaGUgZXZlcnkgY29tcG9uZW50IGRlZmluZWQgb24gdGhlIG1peGluLgogICAgICovCiAgICBjYWNoZUF0dHJpYnV0ZXM6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlczsKICAgICAgICB2YXIgYXR0ck5hbWU7CiAgICAgICAgdmFyIGk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGF0dHJOYW1lID0gYXR0cmlidXRlc1tpXS5uYW1lOwogICAgICAgICAgdGhpcy5jYWNoZUF0dHJpYnV0ZShhdHRyTmFtZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogRm9yIGVudGl0aWVzIHRoYXQgYWxyZWFkeSBoYXZlIGJlZW4gbG9hZGVkIGJ5IHRoZSB0aW1lIHRoZSBtaXhpbiB3YXMgYXR0YWNoZWQsIHRlbGwKICAgICAqIHRob3NlIGVudGl0aWVzIHRvIHJlZ2lzdGVyIHRoZSBtaXhpbiBhbmQgcmVmcmVzaCB0aGVpciBjb21wb25lbnQgZGF0YS4KICAgICAqLwogICAgdXBkYXRlRW50aXRpZXM6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZW50aXR5OwogICAgICAgIHZhciBlbnRpdGllczsKICAgICAgICB2YXIgaTsKCiAgICAgICAgaWYgKCF0aGlzLnNjZW5lRWwpIHsgcmV0dXJuOyB9CgogICAgICAgIGVudGl0aWVzID0gdGhpcy5zY2VuZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1ttaXhpbn49JyArIHRoaXMuaWQgKyAnXScpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbnRpdGllcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgZW50aXR5ID0gZW50aXRpZXNbaV07CiAgICAgICAgICBpZiAoIWVudGl0eS5oYXNMb2FkZWQgfHwgZW50aXR5LmlzTWl4aW4pIHsgY29udGludWU7IH0KICAgICAgICAgIGVudGl0eS5taXhpblVwZGF0ZSh0aGlzLmlkKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KQp9KTsKCn0seyIuLi91dGlscyI6MTgyLCIuL2Etbm9kZSI6MTA3LCIuL2EtcmVnaXN0ZXItZWxlbWVudCI6MTA4LCIuL2NvbXBvbmVudCI6MTA5fV0sMTA3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIEN1c3RvbUV2ZW50ICovCnZhciByZWdpc3RlckVsZW1lbnQgPSBfZGVyZXFfKCcuL2EtcmVnaXN0ZXItZWxlbWVudCcpLnJlZ2lzdGVyRWxlbWVudDsKdmFyIGlzTm9kZSA9IF9kZXJlcV8oJy4vYS1yZWdpc3Rlci1lbGVtZW50JykuaXNOb2RlOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKCnZhciB3YXJuID0gdXRpbHMuZGVidWcoJ2NvcmU6YS1ub2RlOndhcm4nKTsKdmFyIGVycm9yID0gdXRpbHMuZGVidWcoJ2NvcmU6YS1ub2RlOmVycm9yJyk7CgovKioKICogQmFzZSBjbGFzcyBmb3IgQS1GcmFtZSB0aGF0IG1hbmFnZXMgbG9hZGluZyBvZiBvYmplY3RzLgogKgogKiBOb2RlcyBjYW4gYmUgbW9kaWZpZWQgdXNpbmcgbWl4aW5zLgogKiBOb2RlcyBlbWl0IGEgYGxvYWRlZGAgZXZlbnQgd2hlbiB0aGV5IGFuZCB0aGVpciBjaGlsZHJlbiBoYXZlIGluaXRpYWxpemVkLgogKi8KbW9kdWxlLmV4cG9ydHMgPSByZWdpc3RlckVsZW1lbnQoJ2Etbm9kZScsIHsKICBwcm90b3R5cGU6IE9iamVjdC5jcmVhdGUod2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSwgewogICAgY3JlYXRlZENhbGxiYWNrOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5jb21wdXRlZE1peGluU3RyID0gJyc7CiAgICAgICAgdGhpcy5oYXNMb2FkZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmlzTm9kZSA9IHRydWU7CiAgICAgICAgdGhpcy5taXhpbkVscyA9IFtdOwogICAgICB9LAogICAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgICB9LAoKICAgIGF0dGFjaGVkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgbWl4aW5zOwogICAgICAgIHRoaXMuc2NlbmVFbCA9IHRoaXMuY2xvc2VzdFNjZW5lKCk7CgogICAgICAgIGlmICghdGhpcy5zY2VuZUVsKSB7CiAgICAgICAgICB3YXJuKCdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gYXR0YWNoIDwnICsgdGhpcy50YWdOYW1lICsgJz4gb3V0c2lkZSBvZiBhbiBBLUZyYW1lICcgKwogICAgICAgICAgICAgICAnc2NlbmUuIEFwcGVuZCB0aGlzIGVsZW1lbnQgdG8gYDxhLXNjZW5lPmAgaW5zdGVhZC4nKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuaGFzTG9hZGVkID0gZmFsc2U7CiAgICAgICAgdGhpcy5lbWl0KCdub2RlcmVhZHknLCB1bmRlZmluZWQsIGZhbHNlKTsKCiAgICAgICAgaWYgKCF0aGlzLmlzTWl4aW4pIHsKICAgICAgICAgIG1peGlucyA9IHRoaXMuZ2V0QXR0cmlidXRlKCdtaXhpbicpOwogICAgICAgICAgaWYgKG1peGlucykgeyB0aGlzLnVwZGF0ZU1peGlucyhtaXhpbnMpOyB9CiAgICAgICAgfQogICAgICB9LAogICAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgICB9LAoKICAgIC8qKgogICAgICogSGFuZGxlIG1peGluLgogICAgICovCiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyLCBvbGRWYWwsIG5ld1ZhbCkgewogICAgICAgIC8vIElnbm9yZSBpZiBgPGEtbm9kZT5gIGNvZGUgaXMganVzdCB1cGRhdGluZyBjb21wdXRlZCBtaXhpbiBpbiB0aGUgRE9NLgogICAgICAgIGlmIChuZXdWYWwgPT09IHRoaXMuY29tcHV0ZWRNaXhpblN0cikgeyByZXR1cm47IH0KCiAgICAgICAgaWYgKGF0dHIgPT09ICdtaXhpbicgJiYgIXRoaXMuaXNNaXhpbikgewogICAgICAgICAgdGhpcy51cGRhdGVNaXhpbnMobmV3VmFsLCBvbGRWYWwpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgIC8qKgogICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBzY2VuZSBieSB0cmF2ZXJzaW5nIHVwIHRoZSB0cmVlIHN0YXJ0aW5nIGZyb20gYW5kCiAgICAqIGluY2x1ZGluZyByZWNlaXZlciBlbGVtZW50LgogICAgKi8KICAgIGNsb3Nlc3RTY2VuZTogewogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VzdCAoKSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzOwogICAgICAgIHdoaWxlIChlbGVtZW50KSB7CiAgICAgICAgICBpZiAoZWxlbWVudC5pc1NjZW5lKSB7IGJyZWFrOyB9CiAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgIH0KICAgICAgICByZXR1cm4gZWxlbWVudDsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybnMgZmlyc3QgZWxlbWVudCBtYXRjaGluZyBhIHNlbGVjdG9yIGJ5IHRyYXZlcnNpbmcgdXAgdGhlIHRyZWUgc3RhcnRpbmcKICAgICAqIGZyb20gYW5kIGluY2x1ZGluZyByZWNlaXZlciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAtIFNlbGVjdG9yIG9mIGVsZW1lbnQgdG8gZmluZC4KICAgICAqLwogICAgY2xvc2VzdDogewogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VzdCAoc2VsZWN0b3IpIHsKICAgICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMubWF0Y2hlcyB8fCB0aGlzLm1vek1hdGNoZXNTZWxlY3RvciB8fAogICAgICAgICAgdGhpcy5tc01hdGNoZXNTZWxlY3RvciB8fCB0aGlzLm9NYXRjaGVzU2VsZWN0b3IgfHwgdGhpcy53ZWJraXRNYXRjaGVzU2VsZWN0b3I7CiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzOwogICAgICAgIHdoaWxlIChlbGVtZW50KSB7CiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKSkgeyBicmVhazsgfQogICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICAgIH0KICAgIH0sCgogICAgZGV0YWNoZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuaGFzTG9hZGVkID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBXYWl0IGZvciBjaGlsZHJlbiB0byBsb2FkLCBpZiBhbnkuCiAgICAgKiBUaGVuIGVtaXQgYGxvYWRlZGAgZXZlbnQgYW5kIHNldCBgaGFzTG9hZGVkYC4KICAgICAqLwogICAgbG9hZDogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKGNiLCBjaGlsZEZpbHRlcikgewogICAgICAgIHZhciBjaGlsZHJlbjsKICAgICAgICB2YXIgY2hpbGRyZW5Mb2FkZWQ7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICBpZiAodGhpcy5oYXNMb2FkZWQpIHsgcmV0dXJuOyB9CgogICAgICAgIC8vIERlZmF1bHQgdG8gd2FpdGluZyBmb3IgYWxsIG5vZGVzLgogICAgICAgIGNoaWxkRmlsdGVyID0gY2hpbGRGaWx0ZXIgfHwgaXNOb2RlOwogICAgICAgIC8vIFdhaXQgZm9yIGNoaWxkcmVuIHRvIGxvYWQgKGlmIGFueSksIHRoZW4gbG9hZC4KICAgICAgICBjaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTsKICAgICAgICBjaGlsZHJlbkxvYWRlZCA9IGNoaWxkcmVuLmZpbHRlcihjaGlsZEZpbHRlcikubWFwKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIHdhaXRGb3JMb2FkZWQgKHJlc29sdmUpIHsKICAgICAgICAgICAgaWYgKGNoaWxkLmhhc0xvYWRlZCkgeyByZXR1cm4gcmVzb2x2ZSgpOyB9CiAgICAgICAgICAgIGNoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIHJlc29sdmUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIFByb21pc2UuYWxsKGNoaWxkcmVuTG9hZGVkKS50aGVuKGZ1bmN0aW9uIGVtaXRMb2FkZWQgKCkgewogICAgICAgICAgc2VsZi5oYXNMb2FkZWQgPSB0cnVlOwogICAgICAgICAgaWYgKGNiKSB7IGNiKCk7IH0KICAgICAgICAgIHNlbGYuZW1pdCgnbG9hZGVkJywgdW5kZWZpbmVkLCBmYWxzZSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgZXJyb3IoJ0ZhaWx1cmUgbG9hZGluZyBub2RlOiAnLCBlcnIpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSwKCiAgICBnZXRDaGlsZHJlbjogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmNoaWxkcmVuLCAwKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFVucmVnaXN0ZXIgb2xkIG1peGlucyBhbmQgbGlzdGVuZXJzLgogICAgICogUmVnaXN0ZXIgbmV3IG1peGlucyBhbmQgbGlzdGVuZXJzLgogICAgICogUmVnaXN0ZXJpbmcgbWVhbnMgdG8gdXBkYXRlIGB0aGlzLm1peGluRWxzYCB3aXRoIGxpc3RlbmVycy4KICAgICAqLwogICAgdXBkYXRlTWl4aW5zOiB7CiAgICAgIHZhbHVlOiAoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBuZXdNaXhpbklkQXJyYXkgPSBbXTsKICAgICAgICB2YXIgb2xkTWl4aW5JZEFycmF5ID0gW107CiAgICAgICAgdmFyIG1peGluSWRzID0ge307CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV3TWl4aW5zLCBvbGRNaXhpbnMpIHsKICAgICAgICAgIHZhciBpOwogICAgICAgICAgdmFyIG5ld01peGluSWRzOwogICAgICAgICAgdmFyIG9sZE1peGluSWRzOwoKICAgICAgICAgIG5ld01peGluSWRBcnJheS5sZW5ndGggPSAwOwogICAgICAgICAgb2xkTWl4aW5JZEFycmF5Lmxlbmd0aCA9IDA7CiAgICAgICAgICBuZXdNaXhpbklkcyA9IG5ld01peGlucyA/IHV0aWxzLnNwbGl0KG5ld01peGlucy50cmltKCksIC9ccysvKSA6IG5ld01peGluSWRBcnJheTsKICAgICAgICAgIG9sZE1peGluSWRzID0gb2xkTWl4aW5zID8gdXRpbHMuc3BsaXQob2xkTWl4aW5zLnRyaW0oKSwgL1xzKy8pIDogb2xkTWl4aW5JZEFycmF5OwoKICAgICAgICAgIG1peGluSWRzLm5ld01peGluSWRzID0gbmV3TWl4aW5JZHM7CiAgICAgICAgICBtaXhpbklkcy5vbGRNaXhpbklkcyA9IG9sZE1peGluSWRzOwoKICAgICAgICAgIC8vIFVucmVnaXN0ZXIgb2xkIG1peGlucy4KICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvbGRNaXhpbklkcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAobmV3TWl4aW5JZHMuaW5kZXhPZihvbGRNaXhpbklkc1tpXSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgdGhpcy51bnJlZ2lzdGVyTWl4aW4ob2xkTWl4aW5JZHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gUmVnaXN0ZXIgbmV3IG1peGlucy4KICAgICAgICAgIHRoaXMuY29tcHV0ZWRNaXhpblN0ciA9ICcnOwogICAgICAgICAgdGhpcy5taXhpbkVscy5sZW5ndGggPSAwOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5ld01peGluSWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJNaXhpbihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdNaXhpbklkc1tpXSkpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIFVwZGF0ZSBET00uIEtlZXAgdHJhY2sgb2YgYGNvbXB1dGVkTWl4aW5TdHJgIHRvIG5vdCByZWN1cnNlIGJhY2sgaGVyZSBhZnRlcgogICAgICAgICAgLy8gdXBkYXRlLgogICAgICAgICAgaWYgKHRoaXMuY29tcHV0ZWRNaXhpblN0cikgewogICAgICAgICAgICB0aGlzLmNvbXB1dGVkTWl4aW5TdHIgPSB0aGlzLmNvbXB1dGVkTWl4aW5TdHIudHJpbSgpOwogICAgICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsICdtaXhpbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlZE1peGluU3RyKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbWl4aW5JZHM7CiAgICAgICAgfTsKICAgICAgfSkoKQogICAgfSwKCiAgICAvKioKICAgICAqIEZyb20gbWl4aW4gSUQsIGFkZCBtaXhpbiBlbGVtZW50IHRvIGBtaXhpbkVsc2AuCiAgICAgKgogICAgICogQHBhcmFtIHtFbGVtZW50fSBtaXhpbkVsCiAgICAgKi8KICAgIHJlZ2lzdGVyTWl4aW46IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChtaXhpbkVsKSB7CiAgICAgICAgdmFyIGNvbXBvc2l0ZWRNaXhpbklkczsKICAgICAgICB2YXIgaTsKICAgICAgICB2YXIgbWl4aW47CgogICAgICAgIGlmICghbWl4aW5FbCkgeyByZXR1cm47IH0KCiAgICAgICAgLy8gUmVnaXN0ZXIgY29tcG9zaXRlZCBtaXhpbnMgKGlmIG1peGluIGhhcyBtaXhpbnMpLgogICAgICAgIG1peGluID0gbWl4aW5FbC5nZXRBdHRyaWJ1dGUoJ21peGluJyk7CiAgICAgICAgaWYgKG1peGluKSB7CiAgICAgICAgICBjb21wb3NpdGVkTWl4aW5JZHMgPSB1dGlscy5zcGxpdChtaXhpbi50cmltKCksIC9ccysvKTsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21wb3NpdGVkTWl4aW5JZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck1peGluKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbXBvc2l0ZWRNaXhpbklkc1tpXSkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmVnaXN0ZXIgbWl4aW4uCiAgICAgICAgdGhpcy5jb21wdXRlZE1peGluU3RyID0gdGhpcy5jb21wdXRlZE1peGluU3RyICsgJyAnICsgbWl4aW5FbC5pZDsKICAgICAgICB0aGlzLm1peGluRWxzLnB1c2gobWl4aW5FbCk7CiAgICAgIH0KICAgIH0sCgogICAgc2V0QXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgbmV3VmFsdWUpIHsKICAgICAgICBpZiAoYXR0ciA9PT0gJ21peGluJykgeyB0aGlzLnVwZGF0ZU1peGlucyhuZXdWYWx1ZSk7IH0KICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHIsIG5ld1ZhbHVlKTsKICAgICAgfQogICAgfSwKCiAgICB1bnJlZ2lzdGVyTWl4aW46IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChtaXhpbklkKSB7CiAgICAgICAgdmFyIGk7CiAgICAgICAgdmFyIG1peGluRWxzID0gdGhpcy5taXhpbkVsczsKICAgICAgICB2YXIgbWl4aW5FbDsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWl4aW5FbHMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIG1peGluRWwgPSBtaXhpbkVsc1tpXTsKICAgICAgICAgIGlmIChtaXhpbklkID09PSBtaXhpbkVsLmlkKSB7CiAgICAgICAgICAgIG1peGluRWxzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogRW1pdCBhIERPTSBldmVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgZXZlbnQuCiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2RldGFpbD17fV0gLSBDdXN0b20gZGF0YSB0byBwYXNzIGFzIGBkZXRhaWxgIHRvIHRoZSBldmVudC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2J1YmJsZXM9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBldmVudCBzaG91bGQgYnViYmxlLgogICAgICogQHBhcmFtIHtvYmplY3R9IFtleHRyYURhdGFdIC0gRXh0cmEgZGF0YSB0byBwYXNzIHRvIHRoZSBldmVudCwgaWYgYW55LgogICAgICovCiAgICBlbWl0OiB7CiAgICAgIHZhbHVlOiAoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBkYXRhID0ge307CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSwgZGV0YWlsLCBidWJibGVzLCBleHRyYURhdGEpIHsKICAgICAgICAgIGlmIChidWJibGVzID09PSB1bmRlZmluZWQpIHsgYnViYmxlcyA9IHRydWU7IH0KICAgICAgICAgIGRhdGEuYnViYmxlcyA9ICEhYnViYmxlczsKICAgICAgICAgIGRhdGEuZGV0YWlsID0gZGV0YWlsOwoKICAgICAgICAgIC8vIElmIGV4dHJhIGRhdGEgaXMgcHJlc2VudCwgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgb2JqZWN0LgogICAgICAgICAgaWYgKGV4dHJhRGF0YSkgeyBkYXRhID0gdXRpbHMuZXh0ZW5kKHt9LCBleHRyYURhdGEsIGRhdGEpOyB9CgogICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChuYW1lLCBkYXRhKSk7CiAgICAgICAgfTsKICAgICAgfSkoKSwKICAgICAgd3JpdGFibGU6IHdpbmRvdy5kZWJ1ZwogICAgfQogIH0pCn0pOwoKfSx7Ii4uL3V0aWxzLyI6MTgyLCIuL2EtcmVnaXN0ZXItZWxlbWVudCI6MTA4fV0sMTA4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoKICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAtLS0tLS0tLS0tLS0tIFdBUk5JTkcgV0FSTklORyBXQVJOSU5HIFdBUk5JTkcgLS0tLS0tLS0tLS0tLS0KICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgVGhpcyBtb2R1bGUgd3JhcHMgcmVnaXN0ZXJFbGVtZW50IHRvIGRlYWwgd2l0aCBjb21wb25lbnRzIHRoYXQgaW5oZXJpdCBmcm9tCiAgYEFOb2RlYCBhbmQgYEFFbnRpdHlgLiAgSXQncyBhIHBhc3MgdGhyb3VnaCBpbiBhbnkgb3RoZXIgY2FzZS4KCiAgSXQgd3JhcHMgc29tZSBvZiB0aGUgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGhlIGNyZWF0ZWQgZWxlbWVudCB0byBtYWtlIHN1cmUKICB0aGF0IHRoZSBjb3JyZXNwb25kaW5nIGZ1bmN0aW9ucyBpbiB0aGUgYmFzZSBwcm90b3R5cGVzIChgQUVudGl0eWAgYW5kIGBBTm9kZWApCiAgYXJlIGFsc28gaW52b2tlZC4gVGhlIG1ldGhvZCBpbiB0aGUgYmFzZSBwcm90b3R5cGUgaXMgYWx3YXlzIGNhbGxlZCBiZWZvcmUgdGhlIG9uZQogIGluIHRoZSBkZXJpdmVkIHByb3RvdHlwZS4KKi8KCi8vIFBvbHlmaWxsIGBkb2N1bWVudC5yZWdpc3RlckVsZW1lbnRgLgpfZGVyZXFfKCdkb2N1bWVudC1yZWdpc3Rlci1lbGVtZW50Jyk7Cgp2YXIgQU5vZGU7ICAvLyBNdXN0IGRlY2xhcmUgYmVmb3JlIEFFbnRpdHkuIEluaXRpYWxpemVkIGF0IHRoZSBib3R0b20uCnZhciBBRW50aXR5Owp2YXIga25vd25UYWdzID0gbW9kdWxlLmV4cG9ydHMua25vd25UYWdzID0ge307CgpmdW5jdGlvbiBhZGRUYWdOYW1lICh0YWdOYW1lKSB7CiAga25vd25UYWdzW3RhZ05hbWUudG9Mb3dlckNhc2UoKV0gPSB0cnVlOwp9CgovKioKICogUmV0dXJuIHdoZXRoZXIgdGhlIGVsZW1lbnQgdHlwZSBpcyBvbmUgb2Ygb3VyIGtub3duIHJlZ2lzdGVyZWQgb25lcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5vZGUgLSBUaGUgbmFtZSBvZiB0aGUgdGFnIHRvIHJlZ2lzdGVyLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdGFnIG5hbWUgbWF0Y2hlcyB0aGF0IG9mIG91ciByZWdpc3RlcmVkIGN1c3RvbSBlbGVtZW50cy4KICovCm1vZHVsZS5leHBvcnRzLmlzTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7CiAgcmV0dXJuIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpIGluIGtub3duVGFncyB8fCBub2RlLmlzTm9kZTsKfTsKCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB0YWcgdG8gcmVnaXN0ZXIuCiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBUaGUgcHJvdG90eXBlIG9mIHRoZSBuZXcgZWxlbWVudC4KICogQHJldHVybnMge29iamVjdH0gVGhlIHByb3RvdHlwZSBvZiB0aGUgbmV3IGVsZW1lbnQuCiAqLwptb2R1bGUuZXhwb3J0cy5yZWdpc3RlckVsZW1lbnQgPSBmdW5jdGlvbiAodGFnTmFtZSwgb2JqKSB7CiAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iai5wcm90b3R5cGUpOwogIHZhciBuZXdPYmogPSBvYmo7CiAgdmFyIGlzQU5vZGUgPSBBTm9kZSAmJiBwcm90byA9PT0gQU5vZGUucHJvdG90eXBlOwogIHZhciBpc0FFbnRpdHkgPSBBRW50aXR5ICYmIHByb3RvID09PSBBRW50aXR5LnByb3RvdHlwZTsKCiAgaWYgKGlzQU5vZGUgfHwgaXNBRW50aXR5KSB7IGFkZFRhZ05hbWUodGFnTmFtZSk7IH0KCiAgLy8gV3JhcCBpZiBlbGVtZW50IGluaGVyaXRzIGZyb20gYEFOb2RlYC4KICBpZiAoaXNBTm9kZSkgewogICAgbmV3T2JqID0gd3JhcEFOb2RlTWV0aG9kcyhvYmoucHJvdG90eXBlKTsKICAgIG5ld09iaiA9IHtwcm90b3R5cGU6IE9iamVjdC5jcmVhdGUocHJvdG8sIG5ld09iail9OwogIH0KCiAgLy8gV3JhcCBpZiBlbGVtZW50IGluaGVyaXRzIGZyb20gYEFFbnRpdHlgLgogIGlmIChpc0FFbnRpdHkpIHsKICAgIG5ld09iaiA9IHdyYXBBRW50aXR5TWV0aG9kcyhvYmoucHJvdG90eXBlKTsKICAgIG5ld09iaiA9IHtwcm90b3R5cGU6IE9iamVjdC5jcmVhdGUocHJvdG8sIG5ld09iail9OwogIH0KCiAgLy8gR2l2ZSBhbGwgZnVuY3Rpb25zIHRoZWlyIHByb3BlciBuYW1lLgogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG5ld09iai5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7CiAgICB2YXIgcHJvcFZhbCA9IG5ld09iai5wcm90b3R5cGVbcHJvcE5hbWVdOwogICAgaWYgKHR5cGVvZiBwcm9wVmFsID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHByb3BWYWwuZGlzcGxheU5hbWUgPSBwcm9wTmFtZTsKICAgIH0KICB9KTsKCiAgcmV0dXJuIGRvY3VtZW50LnJlZ2lzdGVyRWxlbWVudCh0YWdOYW1lLCBuZXdPYmopOwp9OwoKLyoqCiAqIFdyYXAgc29tZSBvYmogbWV0aG9kcyB0byBjYWxsIHRob3NlIG9uIGBBTm9kZWAgYmFzZSBwcm90b3R5cGUuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBPYmplY3QgdGhhdCBjb250YWlucyB0aGUgbWV0aG9kcyB0aGF0IHdpbGwgYmUgd3JhcHBlZC4KICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHRoZSBpbnB1dCBwYXJhbWV0ZXIgYnV0CiAqIHdpdGggc29tZSBvZiBtZXRob2RzIHdyYXBwZWQuCiAqLwpmdW5jdGlvbiB3cmFwQU5vZGVNZXRob2RzIChvYmopIHsKICB2YXIgbmV3T2JqID0ge307CiAgdmFyIEFOb2RlTWV0aG9kcyA9IFsKICAgICdhdHRhY2hlZENhbGxiYWNrJywKICAgICdhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2snLAogICAgJ2NyZWF0ZWRDYWxsYmFjaycsCiAgICAnZGV0YWNoZWRDYWxsYmFjaycKICBdOwogIHdyYXBNZXRob2RzKG5ld09iaiwgQU5vZGVNZXRob2RzLCBvYmosIEFOb2RlLnByb3RvdHlwZSk7CiAgY29weVByb3BlcnRpZXMob2JqLCBuZXdPYmopOwogIHJldHVybiBuZXdPYmo7Cn0KCi8qKgogKiBUaGlzIHdyYXBzIHNvbWUgb2YgdGhlIG9iaiBtZXRob2RzIHRvIGNhbGwgdGhvc2Ugb24gYEFFbnRpdHlgIGJhc2UgcHJvdG90eXBlLgogKgogKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdHMgdGhhdCBjb250YWlucyB0aGUgbWV0aG9kcyB0aGF0IHdpbGwgYmUgd3JhcHBlZC4KICogQHJldHVybiB7b2JqZWN0fSAtIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgdGhlIGlucHV0IHBhcmFtZXRlciBidXQKICogd2l0aCBzb21lIG9mIG1ldGhvZHMgd3JhcHBlZC4KICovCmZ1bmN0aW9uIHdyYXBBRW50aXR5TWV0aG9kcyAob2JqKSB7CiAgdmFyIG5ld09iaiA9IHt9OwogIHZhciBBTm9kZU1ldGhvZHMgPSBbCiAgICAnYXR0YWNoZWRDYWxsYmFjaycsCiAgICAnYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJywKICAgICdjcmVhdGVkQ2FsbGJhY2snLAogICAgJ2RldGFjaGVkQ2FsbGJhY2snCiAgXTsKICB2YXIgQUVudGl0eU1ldGhvZHMgPSBbCiAgICAnYXR0YWNoZWRDYWxsYmFjaycsCiAgICAnYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJywKICAgICdjcmVhdGVkQ2FsbGJhY2snLAogICAgJ2RldGFjaGVkQ2FsbGJhY2snCiAgXTsKCiAgd3JhcE1ldGhvZHMobmV3T2JqLCBBTm9kZU1ldGhvZHMsIG9iaiwgQU5vZGUucHJvdG90eXBlKTsKICB3cmFwTWV0aG9kcyhuZXdPYmosIEFFbnRpdHlNZXRob2RzLCBvYmosIEFFbnRpdHkucHJvdG90eXBlKTsKICAvLyBDb3BpZXMgdGhlIHJlbWFpbmluZyBwcm9wZXJ0aWVzIGludG8gdGhlIG5ldyBvYmplY3QuCiAgY29weVByb3BlcnRpZXMob2JqLCBuZXdPYmopOwogIHJldHVybiBuZXdPYmo7Cn0KCi8qKgogKiBXcmFwIGEgbGlzdCBhIG1ldGhvZHMgdG8gZW5zdXJlIHRoYXQgdGhvc2UgaW4gdGhlIGJhc2UgcHJvdG90eXBlIGFyZSBjYWxsZWQKICogYmVmb3JlIHRoZSBkZXJpdmVkIG9uZS4KICoKICogQHBhcmFtIHtvYmplY3R9IHRhcmdldE9iaiAtIE9iamVjdCB0aGF0IHdpbGwgY29udGFpbiB0aGUgd3JhcHBlZCBtZXRob2RzLgogKiBAcGFyYW0ge2FycmF5fSBtZXRob2RMaXN0IC0gTGlzdCBvZiBtZXRob2RzIGZyb20gdGhlIGRlcml2ZWRPYmogdGhhdCB3aWxsIGJlIHdyYXBwZWQuCiAqIEBwYXJhbSB7b2JqZWN0fSBkZXJpdmVkT2JqZWN0IC0gT2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYmFzZU9iai4KICogQHBhcmFtIHtvYmplY3R9IGJhc2VPYmogLSBPYmplY3QgdGhhdCBkZXJpdmVkT2JqIGluaGVyaXRzIGZyb20uCiAqLwpmdW5jdGlvbiB3cmFwTWV0aG9kcyAodGFyZ2V0T2JqLCBtZXRob2RMaXN0LCBkZXJpdmVkT2JqLCBiYXNlT2JqKSB7CiAgbWV0aG9kTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7CiAgICB3cmFwTWV0aG9kKHRhcmdldE9iaiwgbWV0aG9kTmFtZSwgZGVyaXZlZE9iaiwgYmFzZU9iaik7CiAgfSk7Cn0KbW9kdWxlLmV4cG9ydHMud3JhcE1ldGhvZHMgPSB3cmFwTWV0aG9kczsKCi8qKgogKiBXcmFwIG9uZSBtZXRob2QgdG8gZW5zdXJlIHRoYXQgdGhlIG9uZSBpbiB0aGUgYmFzZSBwcm90b3R5cGUgaXMgY2FsbGVkIGJlZm9yZQogKiB0aGUgb25lIGluIHRoZSBkZXJpdmVkIG9uZS4KICoKICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIE9iamVjdCB0aGF0IHdpbGwgY29udGFpbiB0aGUgd3JhcHBlZCBtZXRob2QuCiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgd3JhcHBlZC4KICogQHBhcmFtIHtvYmplY3R9IGRlcml2ZWRPYmplY3QgLSBPYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBiYXNlT2JqLgogKiBAcGFyYW0ge29iamVjdH0gYmFzZU9iaiAtIE9iamVjdCB0aGF0IGRlcml2ZWRPYmogaW5oZXJpdHMgZnJvbS4KICovCmZ1bmN0aW9uIHdyYXBNZXRob2QgKG9iaiwgbWV0aG9kTmFtZSwgZGVyaXZlZE9iaiwgYmFzZU9iaikgewogIHZhciBkZXJpdmVkTWV0aG9kID0gZGVyaXZlZE9ialttZXRob2ROYW1lXTsKICB2YXIgYmFzZU1ldGhvZCA9IGJhc2VPYmpbbWV0aG9kTmFtZV07CgogIC8vIERlcml2ZWQgcHJvdG90eXBlIGRvZXMgbm90IGRlZmluZSBtZXRob2QsIG5vIG5lZWQgdG8gd3JhcC4KICBpZiAoIWRlcml2ZWRNZXRob2QgfHwgIWJhc2VNZXRob2QpIHsgcmV0dXJuOyB9CgogIC8vIERlcml2ZWQgcHJvdG90eXBlIGRvZXNuJ3Qgb3ZlcnJpZGUgdGhlIG9uZSBpbiB0aGUgYmFzZSBvbmUsIG5vIG5lZWQgdG8gd3JhcC4KICBpZiAoZGVyaXZlZE1ldGhvZCA9PT0gYmFzZU1ldGhvZCkgeyByZXR1cm47IH0KCiAgLy8gV3JhcCB0byBlbnN1cmUgdGhlIGJhc2UgbWV0aG9kIGlzIGNhbGxlZCBiZWZvcmUgdGhlIG9uZSBpbiB0aGUgZGVyaXZlZCBwcm90b3R5cGUuCiAgb2JqW21ldGhvZE5hbWVdID0gewogICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBwZWRNZXRob2QgKCkgewogICAgICBiYXNlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIHJldHVybiBkZXJpdmVkTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAogICAgd3JpdGFibGU6IHdpbmRvdy5kZWJ1ZwogIH07Cn0KCi8qKgogKiBJdCBjb3BpZXMgdGhlIHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gZGVzdGluYXRpb24gb2JqZWN0IGlmIHRoZXkgZG9uJ3QKICogZXhpc3QgYWxyZWFkeS4KICoKICogQHBhcmFtIHtvYmplY3R9IHNvdXJjZSAtIFRoZSBvYmplY3Qgd2hlcmUgcHJvcGVydGllcyBhcmUgY29waWVkIGZyb20uCiAqIEBwYXJhbSB7dHlwZX0gZGVzdGluYXRpb24gLSBUaGUgb2JqZWN0IHdoZXJlIHByb3BlcnRpZXMgYXJlIGNvcGllZCB0by4KICovCmZ1bmN0aW9uIGNvcHlQcm9wZXJ0aWVzIChzb3VyY2UsIGRlc3RpbmF0aW9uKSB7CiAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKTsKICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7CiAgICB2YXIgZGVzYzsKICAgIGlmICghZGVzdGluYXRpb25bcHJvcF0pIHsKICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wKTsKICAgICAgZGVzdGluYXRpb25bcHJvcF0gPSB7dmFsdWU6IHNvdXJjZVtwcm9wXSwgd3JpdGFibGU6IGRlc2Mud3JpdGFibGV9OwogICAgfQogIH0pOwp9CgpBTm9kZSA9IF9kZXJlcV8oJy4vYS1ub2RlJyk7CkFFbnRpdHkgPSBfZGVyZXFfKCcuL2EtZW50aXR5Jyk7Cgp9LHsiLi9hLWVudGl0eSI6MTA1LCIuL2Etbm9kZSI6MTA3LCJkb2N1bWVudC1yZWdpc3Rlci1lbGVtZW50IjoxM31dLDEwOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBOb2RlICovCnZhciBzY2hlbWEgPSBfZGVyZXFfKCcuL3NjaGVtYScpOwp2YXIgc2NlbmVzID0gX2RlcmVxXygnLi9zY2VuZS9zY2VuZXMnKTsKdmFyIHN5c3RlbXMgPSBfZGVyZXFfKCcuL3N5c3RlbScpOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKCnZhciBjb21wb25lbnRzID0gbW9kdWxlLmV4cG9ydHMuY29tcG9uZW50cyA9IHt9OyAgLy8gS2VlcCB0cmFjayBvZiByZWdpc3RlcmVkIGNvbXBvbmVudHMuCnZhciBwYXJzZVByb3BlcnRpZXMgPSBzY2hlbWEucGFyc2VQcm9wZXJ0aWVzOwp2YXIgcGFyc2VQcm9wZXJ0eSA9IHNjaGVtYS5wYXJzZVByb3BlcnR5Owp2YXIgcHJvY2Vzc1NjaGVtYSA9IHNjaGVtYS5wcm9jZXNzOwp2YXIgaXNTaW5nbGVQcm9wID0gc2NoZW1hLmlzU2luZ2xlUHJvcGVydHk7CnZhciBzdHJpbmdpZnlQcm9wZXJ0aWVzID0gc2NoZW1hLnN0cmluZ2lmeVByb3BlcnRpZXM7CnZhciBzdHJpbmdpZnlQcm9wZXJ0eSA9IHNjaGVtYS5zdHJpbmdpZnlQcm9wZXJ0eTsKdmFyIHN0eWxlUGFyc2VyID0gdXRpbHMuc3R5bGVQYXJzZXI7CnZhciB3YXJuID0gdXRpbHMuZGVidWcoJ2NvcmU6Y29tcG9uZW50Ondhcm4nKTsKCnZhciBhZnJhbWVTY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0Owp2YXIgdXBwZXJDYXNlUmVnRXhwID0gbmV3IFJlZ0V4cCgnW0EtWl0rJyk7CgovLyBPYmplY3QgcG9vbHMgYnkgY29tcG9uZW50LCBjcmVhdGVkIHVwb24gcmVnaXN0cmF0aW9uLgp2YXIgb2JqZWN0UG9vbHMgPSB7fTsKCi8qKgogKiBDb21wb25lbnQgY2xhc3MgZGVmaW5pdGlvbi4KICoKICogQ29tcG9uZW50cyBjb25maWd1cmUgYXBwZWFyYW5jZSwgbW9kaWZ5IGJlaGF2aW9yLCBvciBhZGQgZnVuY3Rpb25hbGl0eSB0bwogKiBlbnRpdGllcy4gVGhlIGJlaGF2aW9yIGFuZCBhcHBlYXJhbmNlIG9mIGFuIGVudGl0eSBjYW4gYmUgY2hhbmdlZCBhdCBydW50aW1lCiAqIGJ5IGFkZGluZywgcmVtb3ZpbmcsIG9yIHVwZGF0aW5nIGNvbXBvbmVudHMuIEVudGl0aWVzIGRvIG5vdCBzaGFyZSBpbnN0YW5jZXMKICogb2YgY29tcG9uZW50cy4KICoKICogQG1lbWJlciB7b2JqZWN0fSBlbCAtIFJlZmVyZW5jZSB0byB0aGUgZW50aXR5IGVsZW1lbnQuCiAqIEBtZW1iZXIge3N0cmluZ30gYXR0clZhbHVlIC0gVmFsdWUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgSFRNTCBhdHRyaWJ1dGUuCiAqIEBtZW1iZXIge29iamVjdH0gZGF0YSAtIENvbXBvbmVudCBkYXRhIHBvcHVsYXRlZCBieSBwYXJzaW5nIHRoZQogKiAgICAgICAgIG1hcHBlZCBhdHRyaWJ1dGUgb2YgdGhlIGNvbXBvbmVudCBwbHVzIGFwcGx5aW5nIGRlZmF1bHRzIGFuZCBtaXhpbnMuCiAqLwp2YXIgQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMuQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsLCBhdHRyVmFsdWUsIGlkKSB7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHRoaXMuZWwgPSBlbDsKICB0aGlzLmlkID0gaWQ7CiAgdGhpcy5hdHRyTmFtZSA9IHRoaXMubmFtZSArIChpZCA/ICdfXycgKyBpZCA6ICcnKTsKICB0aGlzLmV2dERldGFpbCA9IHtpZDogdGhpcy5pZCwgbmFtZTogdGhpcy5uYW1lfTsKICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7CiAgdGhpcy5pc1NpbmdsZVByb3BlcnR5ID0gaXNTaW5nbGVQcm9wKHRoaXMuc2NoZW1hKTsKICB0aGlzLmlzU2luZ2xlUHJvcGVydHlPYmplY3QgPSB0aGlzLmlzU2luZ2xlUHJvcGVydHkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09iamVjdChwYXJzZVByb3BlcnR5KHVuZGVmaW5lZCwgdGhpcy5zY2hlbWEpKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEodGhpcy5zY2hlbWEuZGVmYXVsdCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCk7CiAgdGhpcy5pc09iamVjdEJhc2VkID0gIXRoaXMuaXNTaW5nbGVQcm9wZXJ0eSB8fCB0aGlzLmlzU2luZ2xlUHJvcGVydHlPYmplY3Q7CiAgdGhpcy5lbC5jb21wb25lbnRzW3RoaXMuYXR0ck5hbWVdID0gdGhpczsKICB0aGlzLm9iamVjdFBvb2wgPSBvYmplY3RQb29sc1t0aGlzLm5hbWVdOwoKICBjb25zdCBldmVudHMgPSB0aGlzLmV2ZW50czsKICB0aGlzLmV2ZW50cyA9IHt9OwogIGV2ZW50c0JpbmQodGhpcywgZXZlbnRzKTsKCiAgLy8gU3RvcmUgY29tcG9uZW50IGRhdGEgZnJvbSBwcmV2aW91cyB1cGRhdGUgY2FsbC4KICB0aGlzLmF0dHJWYWx1ZSA9IHVuZGVmaW5lZDsKICBpZiAodGhpcy5pc09iamVjdEJhc2VkKSB7CiAgICB0aGlzLm5leHREYXRhID0gdGhpcy5vYmplY3RQb29sLnVzZSgpOwogICAgLy8gRHJvcCBhbnkgcHJvcGVydGllcyBhZGRlZCBieSBkeW5hbWljIHNjaGVtYXMgaW4gcHJldmlvdXMgdXNlCiAgICB1dGlscy5vYmplY3RQb29sLnJlbW92ZVVudXNlZEtleXModGhpcy5uZXh0RGF0YSwgdGhpcy5zY2hlbWEpOwogICAgdGhpcy5vbGREYXRhID0gdGhpcy5vYmplY3RQb29sLnVzZSgpOwogICAgdXRpbHMub2JqZWN0UG9vbC5yZW1vdmVVbnVzZWRLZXlzKHRoaXMub2xkRGF0YSwgdGhpcy5zY2hlbWEpOwogICAgdGhpcy5wcmV2aW91c09sZERhdGEgPSB0aGlzLm9iamVjdFBvb2wudXNlKCk7CiAgICB1dGlscy5vYmplY3RQb29sLnJlbW92ZVVudXNlZEtleXModGhpcy5wcmV2aW91c09sZERhdGEsIHRoaXMuc2NoZW1hKTsKICAgIHRoaXMucGFyc2luZ0F0dHJWYWx1ZSA9IHRoaXMub2JqZWN0UG9vbC51c2UoKTsKICAgIHV0aWxzLm9iamVjdFBvb2wucmVtb3ZlVW51c2VkS2V5cyh0aGlzLnBhcnNpbmdBdHRyVmFsdWUsIHRoaXMuc2NoZW1hKTsKICB9IGVsc2UgewogICAgdGhpcy5uZXh0RGF0YSA9IHVuZGVmaW5lZDsKICAgIHRoaXMub2xkRGF0YSA9IHVuZGVmaW5lZDsKICAgIHRoaXMucHJldmlvdXNPbGREYXRhID0gdW5kZWZpbmVkOwogICAgdGhpcy5wYXJzaW5nQXR0clZhbHVlID0gdW5kZWZpbmVkOwogIH0KCiAgLy8gTGFzdCB2YWx1ZSBwYXNzZWQgdG8gdXBkYXRlUHJvcGVydGllcy4KICB0aGlzLnRocm90dGxlZEVtaXRDb21wb25lbnRDaGFuZ2VkID0gdXRpbHMudGhyb3R0bGUoZnVuY3Rpb24gZW1pdENoYW5nZSAoKSB7CiAgICBlbC5lbWl0KCdjb21wb25lbnRjaGFuZ2VkJywgc2VsZi5ldnREZXRhaWwsIGZhbHNlKTsKICB9LCAyMDApOwogIHRoaXMudXBkYXRlUHJvcGVydGllcyhhdHRyVmFsdWUpOwp9OwoKQ29tcG9uZW50LnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBDb250YWlucyB0aGUgdHlwZSBzY2hlbWEgYW5kIGRlZmF1bHRzIGZvciB0aGUgZGF0YSB2YWx1ZXMuCiAgICogRGF0YSBpcyBjb2VyY2VkIGludG8gdGhlIHR5cGVzIG9mIHRoZSB2YWx1ZXMgb2YgdGhlIGRlZmF1bHRzLgogICAqLwogIHNjaGVtYToge30sCgogIC8qKgogICAqIEluaXQgaGFuZGxlci4gU2ltaWxhciB0byBhdHRhY2hlZENhbGxiYWNrLgogICAqIENhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpemF0aW9uIGFuZCBpcyBvbmx5IHJ1biBvbmNlLgogICAqIENvbXBvbmVudHMgY2FuIHVzZSB0aGlzIHRvIHNldCBpbml0aWFsIHN0YXRlLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uICgpIHsgLyogbm8tb3AgKi8gfSwKCiAgLyoqCiAgICogTWFwIG9mIGV2ZW50IG5hbWVzIHRvIGJpbmRlZCBldmVudCBoYW5kbGVycyB0aGF0IHdpbGwgYmUgbGlmZWN5Y2xlLWhhbmRsZWQuCiAgICogV2lsbCBiZSBkZXRhY2hlZCBvbiBwYXVzZSAvIHJlbW92ZS4KICAgKiBXaWxsIGJlIGF0dGFjaGVkIG9uIHBsYXkuCiAgICovCiAgZXZlbnRzOiB7fSwKCiAgLyoqCiAgICogVXBkYXRlIGhhbmRsZXIuIFNpbWlsYXIgdG8gYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLgogICAqIENhbGxlZCB3aGVuZXZlciBjb21wb25lbnQncyBkYXRhIGNoYW5nZXMuCiAgICogQWxzbyBjYWxsZWQgb24gY29tcG9uZW50IGluaXRpYWxpemF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCByZWNlaXZlcyBpbml0aWFsIGRhdGEuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gcHJldkRhdGEgLSBQcmV2aW91cyBhdHRyaWJ1dGVzIG9mIHRoZSBjb21wb25lbnQuCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbiAocHJldkRhdGEpIHsgLyogbm8tb3AgKi8gfSwKCiAgdXBkYXRlU2NoZW1hOiB1bmRlZmluZWQsCgogIC8qKgogICAqIFRpY2sgaGFuZGxlci4KICAgKiBDYWxsZWQgb24gZWFjaCB0aWNrIG9mIHRoZSBzY2VuZSByZW5kZXIgbG9vcC4KICAgKiBBZmZlY3RlZCBieSBwbGF5IGFuZCBwYXVzZS4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gU2NlbmUgdGljayB0aW1lLgogICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lRGVsdGEgLSBEaWZmZXJlbmNlIGluIGN1cnJlbnQgcmVuZGVyIHRpbWUgYW5kIHByZXZpb3VzIHJlbmRlciB0aW1lLgogICAqLwogIHRpY2s6IHVuZGVmaW5lZCwKCiAgLyoqCiAgICogVG9jayBoYW5kbGVyLgogICAqIENhbGxlZCBvbiBlYWNoIHRvY2sgb2YgdGhlIHNjZW5lIHJlbmRlciBsb29wLgogICAqIEFmZmVjdGVkIGJ5IHBsYXkgYW5kIHBhdXNlLgogICAqCiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBTY2VuZSB0aWNrIHRpbWUuCiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVEZWx0YSAtIERpZmZlcmVuY2UgaW4gY3VycmVudCByZW5kZXIgdGltZSBhbmQgcHJldmlvdXMgcmVuZGVyIHRpbWUuCiAgICogQHBhcmFtIHtvYmplY3R9IGNhbWVyYSAtIENhbWVyYSB1c2VkIHRvIHJlbmRlciB0aGUgbGFzdCBmcmFtZS4KICAgKi8KICB0b2NrOiB1bmRlZmluZWQsCgogIC8qKgogICAqIENhbGxlZCB0byBzdGFydCBhbnkgZHluYW1pYyBiZWhhdmlvciAoZS5nLiwgYW5pbWF0aW9uLCBBSSwgZXZlbnRzLCBwaHlzaWNzKS4KICAgKi8KICBwbGF5OiBmdW5jdGlvbiAoKSB7IC8qIG5vLW9wICovIH0sCgogIC8qKgogICAqIENhbGxlZCB0byBzdG9wIGFueSBkeW5hbWljIGJlaGF2aW9yIChlLmcuLCBhbmltYXRpb24sIEFJLCBldmVudHMsIHBoeXNpY3MpLgogICAqLwogIHBhdXNlOiBmdW5jdGlvbiAoKSB7IC8qIG5vLW9wICovIH0sCgogIC8qKgogICAqIFJlbW92ZSBoYW5kbGVyLiBTaW1pbGFyIHRvIGRldGFjaGVkQ2FsbGJhY2suCiAgICogQ2FsbGVkIHdoZW5ldmVyIGNvbXBvbmVudCBpcyByZW1vdmVkIGZyb20gdGhlIGVudGl0eSAoaS5lLiwgcmVtb3ZlQXR0cmlidXRlKS4KICAgKiBDb21wb25lbnRzIGNhbiB1c2UgdGhpcyB0byByZXNldCBiZWhhdmlvciBvbiB0aGUgZW50aXR5LgogICAqLwogIHJlbW92ZTogZnVuY3Rpb24gKCkgeyAvKiBuby1vcCAqLyB9LAoKICAvKioKICAgKiBQYXJzZXMgZWFjaCBwcm9wZXJ0eSBiYXNlZCBvbiBwcm9wZXJ0eSB0eXBlLgogICAqIElmIGNvbXBvbmVudCBpcyBzaW5nbGUtcHJvcGVydHksIHRoZW4gcGFyc2VzIHRoZSBzaW5nbGUgcHJvcGVydHkgdmFsdWUuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBIVE1MIGF0dHJpYnV0ZSB2YWx1ZS4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNpbGVudCAtIFN1cHByZXNzIHdhcm5pbmcgbWVzc2FnZXMuCiAgICogQHJldHVybnMge29iamVjdH0gQ29tcG9uZW50IGRhdGEuCiAgICovCiAgcGFyc2U6IGZ1bmN0aW9uICh2YWx1ZSwgc2lsZW50KSB7CiAgICB2YXIgc2NoZW1hID0gdGhpcy5zY2hlbWE7CiAgICBpZiAodGhpcy5pc1NpbmdsZVByb3BlcnR5KSB7IHJldHVybiBwYXJzZVByb3BlcnR5KHZhbHVlLCBzY2hlbWEpOyB9CiAgICByZXR1cm4gcGFyc2VQcm9wZXJ0aWVzKHN0eWxlUGFyc2VyLnBhcnNlKHZhbHVlKSwgc2NoZW1hLCB0cnVlLCB0aGlzLm5hbWUsIHNpbGVudCk7CiAgfSwKCiAgLyoqCiAgICogU3RyaW5naWZ5IHByb3BlcnRpZXMgaWYgbmVjZXNzYXJ5LgogICAqCiAgICogT25seSBjYWxsZWQgZnJvbSBgRW50aXR5LnNldEF0dHJpYnV0ZWAgZm9yIHByb3BlcnRpZXMgd2hvc2UgcGFyc2VycyBhY2NlcHQgYSBub24tc3RyaW5nCiAgICogdmFsdWUgKGUuZy4sIHNlbGVjdG9yLCB2ZWMzIHByb3BlcnR5IHR5cGVzKS4KICAgKgogICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQ29tcGxldGUgY29tcG9uZW50IGRhdGEuCiAgICogQHJldHVybnMge3N0cmluZ30KICAgKi8KICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgc2NoZW1hID0gdGhpcy5zY2hlbWE7CiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7IHJldHVybiBkYXRhOyB9CiAgICBpZiAodGhpcy5pc1NpbmdsZVByb3BlcnR5KSB7IHJldHVybiBzdHJpbmdpZnlQcm9wZXJ0eShkYXRhLCBzY2hlbWEpOyB9CiAgICBkYXRhID0gc3RyaW5naWZ5UHJvcGVydGllcyhkYXRhLCBzY2hlbWEpOwogICAgcmV0dXJuIHN0eWxlUGFyc2VyLnN0cmluZ2lmeShkYXRhKTsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgdGhlIGNhY2hlIG9mIHRoZSBwcmUtcGFyc2VkIGF0dHJpYnV0ZSB2YWx1ZS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIE5ldyBkYXRhLgogICAqIEBwYXJhbSB7Ym9vbGVhbiB9IGNsb2JiZXIgLSBXaGV0aGVyIHRvIHdpcGUgb3V0IGFuZCByZXBsYWNlIHByZXZpb3VzIGRhdGEuCiAgICovCiAgdXBkYXRlQ2FjaGVkQXR0clZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGNsb2JiZXIpIHsKICAgIHZhciBuZXdBdHRyVmFsdWU7CiAgICB2YXIgdGVtcE9iamVjdDsKICAgIHZhciBwcm9wZXJ0eTsKCiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH0KCiAgICAvLyBJZiBudWxsIHZhbHVlIGlzIHRoZSBuZXcgYXR0cmlidXRlIHZhbHVlLCBtYWtlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgZmFsc3kuCiAgICBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgICAgaWYgKHRoaXMuaXNPYmplY3RCYXNlZCAmJiB0aGlzLmF0dHJWYWx1ZSkgewogICAgICAgIHRoaXMub2JqZWN0UG9vbC5yZWN5Y2xlKHRoaXMuYXR0clZhbHVlKTsKICAgICAgfQogICAgICB0aGlzLmF0dHJWYWx1ZSA9IHVuZGVmaW5lZDsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSkgewogICAgICAvLyBJZiB2YWx1ZSBpcyBhbiBvYmplY3QsIGNvcHkgaXQgdG8gb3VyIHBvb2xlZCBuZXdBdHRyVmFsdWUgb2JqZWN0IHRvIHVzZSB0byB1cGRhdGUKICAgICAgLy8gdGhlIGF0dHJWYWx1ZS4KICAgICAgdGVtcE9iamVjdCA9IHRoaXMub2JqZWN0UG9vbC51c2UoKTsKICAgICAgbmV3QXR0clZhbHVlID0gdXRpbHMuZXh0ZW5kKHRlbXBPYmplY3QsIHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIG5ld0F0dHJWYWx1ZSA9IHRoaXMucGFyc2VBdHRyVmFsdWVGb3JDYWNoZSh2YWx1ZSk7CiAgICB9CgogICAgLy8gTWVyZ2UgbmV3IGRhdGEgd2l0aCBwcmV2aW91cyBgYXR0clZhbHVlYCBpZiB1cGRhdGluZyBhbmQgbm90IGNsb2JiZXJpbmcuCiAgICBpZiAodGhpcy5pc09iamVjdEJhc2VkICYmICFjbG9iYmVyICYmIHRoaXMuYXR0clZhbHVlKSB7CiAgICAgIGZvciAocHJvcGVydHkgaW4gdGhpcy5hdHRyVmFsdWUpIHsKICAgICAgICBpZiAobmV3QXR0clZhbHVlW3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBuZXdBdHRyVmFsdWVbcHJvcGVydHldID0gdGhpcy5hdHRyVmFsdWVbcHJvcGVydHldOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8vIFVwZGF0ZSBhdHRyVmFsdWUuCiAgICBpZiAodGhpcy5pc09iamVjdEJhc2VkICYmICF0aGlzLmF0dHJWYWx1ZSkgewogICAgICB0aGlzLmF0dHJWYWx1ZSA9IHRoaXMub2JqZWN0UG9vbC51c2UoKTsKICAgIH0KICAgIHV0aWxzLm9iamVjdFBvb2wuY2xlYXJPYmplY3QodGhpcy5hdHRyVmFsdWUpOwogICAgdGhpcy5hdHRyVmFsdWUgPSBleHRlbmRQcm9wZXJ0aWVzKHRoaXMuYXR0clZhbHVlLCBuZXdBdHRyVmFsdWUsIHRoaXMuaXNPYmplY3RCYXNlZCk7CiAgICB1dGlscy5vYmplY3RQb29sLmNsZWFyT2JqZWN0KHRlbXBPYmplY3QpOwogIH0sCgogIC8qKgogICAqIEdpdmVuIGFuIEhUTUwgYXR0cmlidXRlIHZhbHVlIHBhcnNlcyB0aGUgc3RyaW5nIGJhc2VkIG9uIHRoZSBjb21wb25lbnQgc2NoZW1hLgogICAqIFRvIGF2b2lkIGRvdWJsZSBwYXJzaW5ncyBvZiBzdHJpbmdzIGludG8gc3RyaW5ncyB3ZSBzdG9yZSB0aGUgb3JpZ2luYWwgaW5zdGVhZAogICAqIG9mIHRoZSBwYXJzZWQgb25lCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBIVE1MIGF0dHJpYnV0ZSB2YWx1ZQogICAqLwogIHBhcnNlQXR0clZhbHVlRm9yQ2FjaGU6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgdmFyIHBhcnNlZFZhbHVlOwogICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIHZhbHVlOyB9CiAgICBpZiAodGhpcy5pc1NpbmdsZVByb3BlcnR5KSB7CiAgICAgIHBhcnNlZFZhbHVlID0gdGhpcy5zY2hlbWEucGFyc2UodmFsdWUpOwogICAgICAvKioKICAgICAgICogVG8gYXZvaWQgYm9ndXMgZG91YmxlIHBhcnNpbmdzLiBDYWNoZWQgdmFsdWVzIHdpbGwgYmUgcGFyc2VkIHdoZW4gYnVpbGRpbmcKICAgICAgICogY29tcG9uZW50IGRhdGEuIEZvciBpbnN0YW5jZSB3aGVuIHBhcnNpbmcgYSBzcmMgaWQgdG8gaXRzIHVybCwgd2Ugd2FudCB0byBjYWNoZQogICAgICAgKiBvcmlnaW5hbCBzdHJpbmcgYW5kIG5vdCB0aGUgcGFyc2VkIG9uZSAoI21vbnN0ZXIgLT4gbW9kZWxzL21vbnN0ZXIuZGFlKQogICAgICAgKiBzbyB3aGVuIGJ1aWxkaW5nIGRhdGEgd2UgcGFyc2UgdGhlIGV4cGVjdGVkIHZhbHVlLgogICAgICAgKi8KICAgICAgaWYgKHR5cGVvZiBwYXJzZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHsgcGFyc2VkVmFsdWUgPSB2YWx1ZTsgfQogICAgfSBlbHNlIHsKICAgICAgLy8gUGFyc2UgdXNpbmcgdGhlIHN0eWxlIHBhcnNlciB0byBhdm9pZCBkb3VibGUgcGFyc2luZyBvZiBpbmRpdmlkdWFsIHByb3BlcnRpZXMuCiAgICAgIHV0aWxzLm9iamVjdFBvb2wuY2xlYXJPYmplY3QodGhpcy5wYXJzaW5nQXR0clZhbHVlKTsKICAgICAgcGFyc2VkVmFsdWUgPSBzdHlsZVBhcnNlci5wYXJzZSh2YWx1ZSwgdGhpcy5wYXJzaW5nQXR0clZhbHVlKTsKICAgIH0KICAgIHJldHVybiBwYXJzZWRWYWx1ZTsKICB9LAoKICAvKioKICAgKiBXcml0ZSBjYWNoZWQgYXR0cmlidXRlIGRhdGEgdG8gdGhlIGVudGl0eSBET00gZWxlbWVudC4KICAgKgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNEZWZhdWx0IC0gV2hldGhlciBjb21wb25lbnQgaXMgYSBkZWZhdWx0IGNvbXBvbmVudC4gQWx3YXlzIGZsdXNoIGZvcgogICAqICAgZGVmYXVsdCBjb21wb25lbnRzLgogICAqLwogIGZsdXNoVG9ET006IGZ1bmN0aW9uIChpc0RlZmF1bHQpIHsKICAgIHZhciBhdHRyVmFsdWUgPSBpc0RlZmF1bHQgPyB0aGlzLmRhdGEgOiB0aGlzLmF0dHJWYWx1ZTsKICAgIGlmIChhdHRyVmFsdWUgPT09IG51bGwgfHwgYXR0clZhbHVlID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9CiAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMuZWwsIHRoaXMuYXR0ck5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyaW5naWZ5KGF0dHJWYWx1ZSkpOwogIH0sCgogIC8qKgogICAqIEFwcGx5IG5ldyBjb21wb25lbnQgZGF0YSBpZiBkYXRhIGhhcyBjaGFuZ2VkIChmcm9tIHNldEF0dHJpYnV0ZSkuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0clZhbHVlIC0gSFRNTCBhdHRyaWJ1dGUgdmFsdWUuCiAgICogICAgICAgIElmIHVuZGVmaW5lZCwgdXNlIHRoZSBjYWNoZWQgYXR0cmlidXRlIHZhbHVlIGFuZCBjb250aW51ZSB1cGRhdGluZyBwcm9wZXJ0aWVzLgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvYmJlciAtIFRoZSBwcmV2aW91cyBjb21wb25lbnQgZGF0YSBpcyBvdmVyd3JpdHRlbiBieSB0aGUgYXRyclZhbHVlCiAgICovCiAgdXBkYXRlUHJvcGVydGllczogZnVuY3Rpb24gKGF0dHJWYWx1ZSwgY2xvYmJlcikgewogICAgdmFyIGVsID0gdGhpcy5lbDsKCiAgICAvLyBKdXN0IGNhY2hlIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIGVudGl0eSBoYXMgbm90IGxvYWRlZAogICAgLy8gQ29tcG9uZW50cyBhcmUgbm90IGluaXRpYWxpemVkIHVudGlsIHRoZSBlbnRpdHkgaGFzIGxvYWRlZAogICAgaWYgKCFlbC5oYXNMb2FkZWQpIHsKICAgICAgdGhpcy51cGRhdGVDYWNoZWRBdHRyVmFsdWUoYXR0clZhbHVlKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIFBhcnNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUuCiAgICAvLyBDYWNoZSBjdXJyZW50IGF0dHJWYWx1ZSBmb3IgZnV0dXJlIHVwZGF0ZXMuIFVwZGF0ZXMgYHRoaXMuYXR0clZhbHVlYC4KICAgIC8vIGBudWxsYCBtZWFucyBubyB2YWx1ZSBvbiBwdXJwb3NlLCBkbyBub3Qgc2V0IGEgZGVmYXVsdCB2YWx1ZSwgbGV0IG1peGlucyB0YWtlIG92ZXIuCiAgICBpZiAoYXR0clZhbHVlICE9PSBudWxsKSB7CiAgICAgIGF0dHJWYWx1ZSA9IHRoaXMucGFyc2VBdHRyVmFsdWVGb3JDYWNoZShhdHRyVmFsdWUpOwogICAgfQoKICAgIC8vIENhY2hlIGN1cnJlbnQgYXR0clZhbHVlIGZvciBmdXR1cmUgdXBkYXRlcy4KICAgIHRoaXMudXBkYXRlQ2FjaGVkQXR0clZhbHVlKGF0dHJWYWx1ZSwgY2xvYmJlcik7CgogICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHsKICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQoYXR0clZhbHVlLCBjbG9iYmVyKTsKICAgICAgdGhpcy5jYWxsVXBkYXRlSGFuZGxlcigpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5pbml0Q29tcG9uZW50KCk7CiAgICB9CiAgfSwKCiAgaW5pdENvbXBvbmVudDogZnVuY3Rpb24gKCkgewogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBpbml0aWFsT2xkRGF0YTsKCiAgICAvLyBCdWlsZCBkYXRhLgogICAgaWYgKHRoaXMudXBkYXRlU2NoZW1hKSB7IHRoaXMudXBkYXRlU2NoZW1hKHRoaXMuYnVpbGREYXRhKHRoaXMuYXR0clZhbHVlLCBmYWxzZSwgdHJ1ZSkpOyB9CiAgICB0aGlzLmRhdGEgPSB0aGlzLmJ1aWxkRGF0YSh0aGlzLmF0dHJWYWx1ZSk7CgogICAgLy8gQ29tcG9uZW50IGlzIGJlaW5nIGFscmVhZHkgaW5pdGlhbGl6ZWQuCiAgICBpZiAoZWwuaW5pdGlhbGl6aW5nQ29tcG9uZW50c1t0aGlzLm5hbWVdKSB7IHJldHVybjsgfQoKICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIG9mIGluaXQgbWV0aG9kIHNldHRpbmcgc2FtZSBjb21wb25lbnQgb24gdGhlIGVudGl0eS4KICAgIGVsLmluaXRpYWxpemluZ0NvbXBvbmVudHNbdGhpcy5uYW1lXSA9IHRydWU7CiAgICAvLyBJbml0aWFsaXplIGNvbXBvbmVudC4KICAgIHRoaXMuaW5pdCgpOwogICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7CiAgICBkZWxldGUgZWwuaW5pdGlhbGl6aW5nQ29tcG9uZW50c1t0aGlzLm5hbWVdOwoKICAgIC8vIFN0b3JlIGN1cnJlbnQgZGF0YSBhcyBwcmV2aW91cyBkYXRhIGZvciBmdXR1cmUgdXBkYXRlcy4KICAgIHRoaXMub2xkRGF0YSA9IGV4dGVuZFByb3BlcnRpZXModGhpcy5vbGREYXRhLCB0aGlzLmRhdGEsIHRoaXMuaXNPYmplY3RCYXNlZCk7CgogICAgLy8gRm9yIG9sZERhdGEsIHBhc3MgZW1wdHkgb2JqZWN0IHRvIG11bHRpcGxlLXByb3Agc2NoZW1hcyBvciBvYmplY3Qgc2luZ2xlLXByb3Agc2NoZW1hLgogICAgLy8gUGFzcyB1bmRlZmluZWQgdG8gcmVzdCBvZiB0eXBlcy4KICAgIGluaXRpYWxPbGREYXRhID0gdGhpcy5pc09iamVjdEJhc2VkID8gdGhpcy5vYmplY3RQb29sLnVzZSgpIDogdW5kZWZpbmVkOwogICAgdGhpcy51cGRhdGUoaW5pdGlhbE9sZERhdGEpOwogICAgaWYgKHRoaXMuaXNPYmplY3RCYXNlZCkgeyB0aGlzLm9iamVjdFBvb2wucmVjeWNsZShpbml0aWFsT2xkRGF0YSk7IH0KCiAgICAvLyBQbGF5IHRoZSBjb21wb25lbnQgaWYgdGhlIGVudGl0eSBpcyBwbGF5aW5nLgogICAgaWYgKGVsLmlzUGxheWluZykgeyB0aGlzLnBsYXkoKTsgfQogICAgZWwuZW1pdCgnY29tcG9uZW50aW5pdGlhbGl6ZWQnLCB0aGlzLmV2dERldGFpbCwgZmFsc2UpOwogIH0sCgogIC8qKgogICAqIEBwYXJhbSBhdHRyVmFsdWUgLSBQYXNzZWQgYXJndW1lbnQgZnJvbSBzZXRBdHRyaWJ1dGUuCiAgICovCiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAoYXR0clZhbHVlLCBjbG9iYmVyKSB7CiAgICB2YXIga2V5OwogICAgdmFyIG1heU5lZWRTY2hlbWFVcGRhdGU7CgogICAgaWYgKGNsb2JiZXIpIHsKICAgICAgLy8gQ2xvYmJlci4gUmVidWlsZC4KICAgICAgaWYgKHRoaXMudXBkYXRlU2NoZW1hKSB7CiAgICAgICAgdGhpcy51cGRhdGVTY2hlbWEodGhpcy5idWlsZERhdGEodGhpcy5hdHRyVmFsdWUsIHRydWUsIHRydWUpKTsKICAgICAgfQogICAgICB0aGlzLmRhdGEgPSB0aGlzLmJ1aWxkRGF0YSh0aGlzLmF0dHJWYWx1ZSwgdHJ1ZSwgZmFsc2UpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gQXBwbHkgbmV3IHZhbHVlIHRvIHRoaXMuZGF0YSBpbiBwbGFjZSBzaW5jZSBkaXJlY3QgdXBkYXRlLgogICAgaWYgKHRoaXMuaXNTaW5nbGVQcm9wZXJ0eSkgewogICAgICBpZiAodGhpcy5pc09iamVjdEJhc2VkKSB7CiAgICAgICAgcGFyc2VQcm9wZXJ0eShhdHRyVmFsdWUsIHRoaXMuc2NoZW1hKTsKICAgICAgfQogICAgICAvLyBTaW5nbGUtcHJvcGVydHkgKGFscmVhZHkgcGFyc2VkKS4KICAgICAgdGhpcy5kYXRhID0gYXR0clZhbHVlOwogICAgICByZXR1cm47CiAgICB9CgogICAgcGFyc2VQcm9wZXJ0aWVzKGF0dHJWYWx1ZSwgdGhpcy5zY2hlbWEsIHRydWUsIHRoaXMubmFtZSk7CgogICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgc2NoZW1hLgogICAgaWYgKHRoaXMuc2NoZW1hQ2hhbmdlS2V5cy5sZW5ndGgpIHsKICAgICAgZm9yIChrZXkgaW4gYXR0clZhbHVlKSB7CiAgICAgICAgaWYgKHRoaXMuc2NoZW1hW2tleV0uc2NoZW1hQ2hhbmdlKSB7CiAgICAgICAgICBtYXlOZWVkU2NoZW1hVXBkYXRlID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKG1heU5lZWRTY2hlbWFVcGRhdGUpIHsKICAgICAgLy8gUmVidWlsZCBkYXRhIGlmIG5lZWQgc2NoZW1hIHVwZGF0ZS4KICAgICAgaWYgKHRoaXMudXBkYXRlU2NoZW1hKSB7CiAgICAgICAgdGhpcy51cGRhdGVTY2hlbWEodGhpcy5idWlsZERhdGEodGhpcy5hdHRyVmFsdWUsIHRydWUsIHRydWUpKTsKICAgICAgfQogICAgICB0aGlzLmRhdGEgPSB0aGlzLmJ1aWxkRGF0YSh0aGlzLmF0dHJWYWx1ZSwgdHJ1ZSwgZmFsc2UpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gTm9ybWFsIHVwZGF0ZS4KICAgIGZvciAoa2V5IGluIGF0dHJWYWx1ZSkgewogICAgICBpZiAoYXR0clZhbHVlW2tleV0gPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfQogICAgICB0aGlzLmRhdGFba2V5XSA9IGF0dHJWYWx1ZVtrZXldOwogICAgfQogIH0sCgogIC8qKgogICAqIENoZWNrIGlmIGNvbXBvbmVudCBzaG91bGQgZmlyZSB1cGRhdGUgYW5kIGZpcmUgdXBkYXRlIGxpZmVjeWNsZSBoYW5kbGVyLgogICAqLwogIGNhbGxVcGRhdGVIYW5kbGVyOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaGFzQ29tcG9uZW50Q2hhbmdlZDsKCiAgICAvLyBTdG9yZSB0aGUgcHJldmlvdXMgb2xkIGRhdGEgYmVmb3JlIHdlIGNhbGN1bGF0ZSB0aGUgbmV3IG9sZERhdGEuCiAgICBpZiAodGhpcy5wcmV2aW91c09sZERhdGEgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgICAgdXRpbHMub2JqZWN0UG9vbC5jbGVhck9iamVjdCh0aGlzLnByZXZpb3VzT2xkRGF0YSk7CiAgICB9CiAgICBpZiAodGhpcy5pc09iamVjdEJhc2VkKSB7CiAgICAgIGNvcHlEYXRhKHRoaXMucHJldmlvdXNPbGREYXRhLCB0aGlzLm9sZERhdGEpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5wcmV2aW91c09sZERhdGEgPSB0aGlzLm9sZERhdGE7CiAgICB9CgogICAgaGFzQ29tcG9uZW50Q2hhbmdlZCA9ICF1dGlscy5kZWVwRXF1YWwodGhpcy5vbGREYXRhLCB0aGlzLmRhdGEpOwoKICAgIC8vIERvbid0IHVwZGF0ZSBpZiBwcm9wZXJ0aWVzIGhhdmVuJ3QgY2hhbmdlZC4KICAgIC8vIEFsd2F5cyB1cGRhdGUgcm90YXRpb24sIHBvc2l0aW9uLCBzY2FsZS4KICAgIGlmICghdGhpcy5pc1Bvc2l0aW9uUm90YXRpb25TY2FsZSAmJiAhaGFzQ29tcG9uZW50Q2hhbmdlZCkgeyByZXR1cm47IH0KCiAgICAvLyBTdG9yZSBjdXJyZW50IGRhdGEgYXMgcHJldmlvdXMgZGF0YSBmb3IgZnV0dXJlIHVwZGF0ZXMuCiAgICAvLyBSZXVzZSBgdGhpcy5vbGREYXRhYCBvYmplY3QgdG8gdHJ5IG5vdCB0byBhbGxvY2F0ZSBhbm90aGVyIG9uZS4KICAgIGlmICh0aGlzLm9sZERhdGEgaW5zdGFuY2VvZiBPYmplY3QpIHsgdXRpbHMub2JqZWN0UG9vbC5jbGVhck9iamVjdCh0aGlzLm9sZERhdGEpOyB9CiAgICB0aGlzLm9sZERhdGEgPSBleHRlbmRQcm9wZXJ0aWVzKHRoaXMub2xkRGF0YSwgdGhpcy5kYXRhLCB0aGlzLmlzT2JqZWN0QmFzZWQpOwoKICAgIC8vIFVwZGF0ZSBjb21wb25lbnQgd2l0aCB0aGUgcHJldmlvdXMgb2xkIGRhdGEuCiAgICB0aGlzLnVwZGF0ZSh0aGlzLnByZXZpb3VzT2xkRGF0YSk7CgogICAgdGhpcy50aHJvdHRsZWRFbWl0Q29tcG9uZW50Q2hhbmdlZCgpOwogIH0sCgogIGhhbmRsZU1peGluVXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRhdGEgPSB0aGlzLmJ1aWxkRGF0YSh0aGlzLmF0dHJWYWx1ZSk7CiAgICB0aGlzLmNhbGxVcGRhdGVIYW5kbGVyKCk7CiAgfSwKCiAgLyoqCiAgICogUmVzZXQgdmFsdWUgb2YgYSBwcm9wZXJ0eSB0byB0aGUgcHJvcGVydHkncyBkZWZhdWx0IHZhbHVlLgogICAqIElmIHNpbmdsZS1wcm9wIGNvbXBvbmVudCwgcmVzZXQgdmFsdWUgdG8gY29tcG9uZW50J3MgZGVmYXVsdCB2YWx1ZS4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eU5hbWUgLSBOYW1lIG9mIHByb3BlcnR5IHRvIHJlc2V0LgogICAqLwogIHJlc2V0UHJvcGVydHk6IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUpIHsKICAgIGlmICh0aGlzLmlzT2JqZWN0QmFzZWQpIHsKICAgICAgaWYgKCEocHJvcGVydHlOYW1lIGluIHRoaXMuYXR0clZhbHVlKSkgeyByZXR1cm47IH0KICAgICAgZGVsZXRlIHRoaXMuYXR0clZhbHVlW3Byb3BlcnR5TmFtZV07CiAgICAgIHRoaXMuZGF0YVtwcm9wZXJ0eU5hbWVdID0gdGhpcy5zY2hlbWFbcHJvcGVydHlOYW1lXS5kZWZhdWx0OwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5hdHRyVmFsdWUgPSB0aGlzLnNjaGVtYS5kZWZhdWx0OwogICAgICB0aGlzLmRhdGEgPSB0aGlzLnNjaGVtYS5kZWZhdWx0OwogICAgfQogICAgdGhpcy51cGRhdGVQcm9wZXJ0aWVzKHRoaXMuYXR0clZhbHVlKTsKICB9LAoKICAvKioKICAgKiBFeHRlbmQgc2NoZW1hIG9mIGNvbXBvbmVudCBnaXZlbiBhIHBhcnRpYWwgc2NoZW1hLgogICAqCiAgICogU29tZSBjb21wb25lbnRzIG1pZ2h0IHdhbnQgdG8gbXV0YXRlIHRoZWlyIHNjaGVtYSBiYXNlZCBvbiBjZXJ0YWluIHByb3BlcnRpZXMuCiAgICogZS5nLiwgTWF0ZXJpYWwgY29tcG9uZW50IGNoYW5nZXMgaXRzIHNjaGVtYSBiYXNlZCBvbiBgc2hhZGVyYCB0byBhY2NvdW50IGZvciBkaWZmZXJlbnQKICAgKiB1bmlmb3JtcwogICAqCiAgICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYUFkZG9uIC0gU2NoZW1hIGNodW5rIHRoYXQgZXh0ZW5kIGJhc2Ugc2NoZW1hLgogICAqLwogIGV4dGVuZFNjaGVtYTogZnVuY3Rpb24gKHNjaGVtYUFkZG9uKSB7CiAgICB2YXIgZXh0ZW5kZWRTY2hlbWE7CiAgICAvLyBDbG9uZSBiYXNlIHNjaGVtYS4KICAgIGV4dGVuZGVkU2NoZW1hID0gdXRpbHMuZXh0ZW5kKHt9LCBjb21wb25lbnRzW3RoaXMubmFtZV0uc2NoZW1hKTsKICAgIC8vIEV4dGVuZCBiYXNlIHNjaGVtYSB3aXRoIG5ldyBzY2hlbWEgY2h1bmsuCiAgICB1dGlscy5leHRlbmQoZXh0ZW5kZWRTY2hlbWEsIHNjaGVtYUFkZG9uKTsKICAgIHRoaXMuc2NoZW1hID0gcHJvY2Vzc1NjaGVtYShleHRlbmRlZFNjaGVtYSk7CiAgICB0aGlzLmVsLmVtaXQoJ3NjaGVtYWNoYW5nZWQnLCB0aGlzLmV2dERldGFpbCk7CiAgfSwKCiAgLyoqCiAgICogQnVpbGQgY29tcG9uZW50IGRhdGEgZnJvbSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZW50aXR5LmRhdGEuCiAgICoKICAgKiBQcmVjZWRlbmNlOgogICAqIDEuIERlZmF1bHRzIGRhdGEKICAgKiAyLiBNaXhpbiBkYXRhLgogICAqIDMuIEF0dHJpYnV0ZSBkYXRhLgogICAqCiAgICogRmluYWxseSBjb2VyY2UgdGhlIGRhdGEgdG8gdGhlIHR5cGVzIG9mIHRoZSBkZWZhdWx0cy4KICAgKgogICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdEYXRhIC0gRWxlbWVudCBuZXcgZGF0YS4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsb2JiZXIgLSBUaGUgcHJldmlvdXMgZGF0YSBpcyBjb21wbGV0ZWx5IHJlcGxhY2VkIGJ5IHRoZSBuZXcgb25lLgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2lsZW50IC0gU3VwcHJlc3Mgd2FybmluZyBtZXNzYWdlcy4KICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBjb21wb25lbnQgZGF0YQogICAqLwogIGJ1aWxkRGF0YTogZnVuY3Rpb24gKG5ld0RhdGEsIGNsb2JiZXIsIHNpbGVudCkgewogICAgdmFyIGNvbXBvbmVudERlZmluZWQ7CiAgICB2YXIgZGF0YTsKICAgIHZhciBkZWZhdWx0VmFsdWU7CiAgICB2YXIga2V5OwogICAgdmFyIG1peGluRGF0YTsKICAgIHZhciBuZXh0RGF0YSA9IHRoaXMubmV4dERhdGE7CiAgICB2YXIgc2NoZW1hID0gdGhpcy5zY2hlbWE7CiAgICB2YXIgaTsKICAgIHZhciBtaXhpbkVscyA9IHRoaXMuZWwubWl4aW5FbHM7CiAgICB2YXIgcHJldmlvdXNEYXRhOwoKICAgIC8vIFdoZXRoZXIgY29tcG9uZW50IGhhcyBhIGRlZmluZWQgdmFsdWUuIEZvciBhcnJheXMsIHRyZWF0IGVtcHR5IGFzIG5vdCBkZWZpbmVkLgogICAgY29tcG9uZW50RGVmaW5lZCA9IG5ld0RhdGEgJiYgbmV3RGF0YS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkKICAgICAgPyBuZXdEYXRhLmxlbmd0aAogICAgICA6IG5ld0RhdGEgIT09IHVuZGVmaW5lZCAmJiBuZXdEYXRhICE9PSBudWxsOwoKICAgIGlmICh0aGlzLmlzT2JqZWN0QmFzZWQpIHsgdXRpbHMub2JqZWN0UG9vbC5jbGVhck9iamVjdChuZXh0RGF0YSk7IH0KCiAgICAvLyAxLiBHYXRoZXIgZGVmYXVsdCB2YWx1ZXMgKGxvd2VzdCBwcmVjZW5kZW5jZSkuCiAgICBpZiAodGhpcy5pc1NpbmdsZVByb3BlcnR5KSB7CiAgICAgIGlmICh0aGlzLmlzT2JqZWN0QmFzZWQpIHsKICAgICAgICAvLyBJZiBvYmplY3QtYmFzZWQgc2luZ2xlLXByb3AsIHRoZW4gY29weSBvdmVyIHRoZSBkYXRhIHRvIG91ciBwb29sZWQgb2JqZWN0LgogICAgICAgIGRhdGEgPSBjb3B5RGF0YShuZXh0RGF0YSwgc2NoZW1hLmRlZmF1bHQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIElmIGlzIHBsYWluIHNpbmdsZS1wcm9wLCBjb3B5IGJ5IHZhbHVlIHRoZSBkZWZhdWx0LgogICAgICAgIGRhdGEgPSBpc09iamVjdE9yQXJyYXkoc2NoZW1hLmRlZmF1bHQpCiAgICAgICAgICA/IHV0aWxzLmNsb25lKHNjaGVtYS5kZWZhdWx0KQogICAgICAgICAgOiBzY2hlbWEuZGVmYXVsdDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gUHJlc2VydmUgcHJldmlvdXNseSBzZXQgcHJvcGVydGllcyBpZiBjbG9iYmVyIG5vdCBlbmFibGVkLgogICAgICBwcmV2aW91c0RhdGEgPSAhY2xvYmJlciAmJiB0aGlzLmF0dHJWYWx1ZTsKCiAgICAgIC8vIENsb25lIGRlZmF1bHQgdmFsdWUgaWYgb2JqZWN0IHNvIGNvbXBvbmVudHMgZG9uJ3Qgc2hhcmUgb2JqZWN0CiAgICAgIGRhdGEgPSBwcmV2aW91c0RhdGEgaW5zdGFuY2VvZiBPYmplY3QKICAgICAgICA/IGNvcHlEYXRhKG5leHREYXRhLCBwcmV2aW91c0RhdGEpCiAgICAgICAgOiBuZXh0RGF0YTsKCiAgICAgIC8vIEFwcGx5IGRlZmF1bHRzLgogICAgICBmb3IgKGtleSBpbiBzY2hlbWEpIHsKICAgICAgICBkZWZhdWx0VmFsdWUgPSBzY2hlbWFba2V5XS5kZWZhdWx0OwogICAgICAgIGlmIChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfQogICAgICAgIC8vIENsb25lIGRlZmF1bHQgdmFsdWUgaWYgb2JqZWN0IHNvIGNvbXBvbmVudHMgZG9uJ3Qgc2hhcmUgb2JqZWN0CiAgICAgICAgZGF0YVtrZXldID0gaXNPYmplY3RPckFycmF5KGRlZmF1bHRWYWx1ZSkKICAgICAgICAgID8gdXRpbHMuY2xvbmUoZGVmYXVsdFZhbHVlKQogICAgICAgICAgOiBkZWZhdWx0VmFsdWU7CiAgICAgIH0KICAgIH0KCiAgICAvLyAyLiBHYXRoZXIgbWl4aW4gdmFsdWVzLgogICAgZm9yIChpID0gMDsgaSA8IG1peGluRWxzLmxlbmd0aDsgaSsrKSB7CiAgICAgIG1peGluRGF0YSA9IG1peGluRWxzW2ldLmdldEF0dHJpYnV0ZSh0aGlzLmF0dHJOYW1lKTsKICAgICAgaWYgKCFtaXhpbkRhdGEpIHsgY29udGludWU7IH0KICAgICAgZGF0YSA9IGV4dGVuZFByb3BlcnRpZXMoZGF0YSwgbWl4aW5EYXRhLCB0aGlzLmlzT2JqZWN0QmFzZWQpOwogICAgfQoKICAgIC8vIDMuIEdhdGhlciBhdHRyaWJ1dGUgdmFsdWVzIChoaWdoZXN0IHByZWNlbmRlbmNlKS4KICAgIGlmIChjb21wb25lbnREZWZpbmVkKSB7CiAgICAgIGlmICh0aGlzLmlzU2luZ2xlUHJvcGVydHkpIHsKICAgICAgICAvLyBJZiBvYmplY3QtYmFzZWQsIGNvcHkgdGhlIHZhbHVlIHRvIG5vdCBtb2RpZnkgdGhlIG9yaWdpbmFsLgogICAgICAgIGlmIChpc09iamVjdChuZXdEYXRhKSkgewogICAgICAgICAgY29weURhdGEodGhpcy5wYXJzaW5nQXR0clZhbHVlLCBuZXdEYXRhKTsKICAgICAgICAgIHJldHVybiBwYXJzZVByb3BlcnR5KHRoaXMucGFyc2luZ0F0dHJWYWx1ZSwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnNlUHJvcGVydHkobmV3RGF0YSwgc2NoZW1hKTsKICAgICAgfQogICAgICBkYXRhID0gZXh0ZW5kUHJvcGVydGllcyhkYXRhLCBuZXdEYXRhLCB0aGlzLmlzT2JqZWN0QmFzZWQpOwogICAgfSBlbHNlIHsKICAgICAgLy8gUGFyc2UgYW5kIGNvZXJjZSB1c2luZyB0aGUgc2NoZW1hLgogICAgICBpZiAodGhpcy5pc1NpbmdsZVByb3BlcnR5KSB7IHJldHVybiBwYXJzZVByb3BlcnR5KGRhdGEsIHNjaGVtYSk7IH0KICAgIH0KCiAgICByZXR1cm4gcGFyc2VQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgdW5kZWZpbmVkLCB0aGlzLm5hbWUsIHNpbGVudCk7CiAgfSwKCiAgLyoqCiAgICogQXR0YWNoIGV2ZW50cyBmcm9tIGNvbXBvbmVudC1kZWZpbmVkIGV2ZW50cyBtYXAuCiAgICovCiAgZXZlbnRzQXR0YWNoOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXZlbnROYW1lOwogICAgLy8gU2FmZXR5IGRldGFjaCB0byBwcmV2ZW50IGRvdWJsZS1yZWdpc3RyYXRpb24uCiAgICB0aGlzLmV2ZW50c0RldGFjaCgpOwogICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5ldmVudHMpIHsKICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5ldmVudHNbZXZlbnROYW1lXSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRGV0YWNoIGV2ZW50cyBmcm9tIGNvbXBvbmVudC1kZWZpbmVkIGV2ZW50cyBtYXAuCiAgICovCiAgZXZlbnRzRGV0YWNoOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXZlbnROYW1lOwogICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5ldmVudHMpIHsKICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5ldmVudHNbZXZlbnROYW1lXSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVsZWFzZSBhbmQgZnJlZSBtZW1vcnkuCiAgICovCiAgZGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5vYmplY3RQb29sLnJlY3ljbGUodGhpcy5hdHRyVmFsdWUpOwogICAgdGhpcy5vYmplY3RQb29sLnJlY3ljbGUodGhpcy5vbGREYXRhKTsKICAgIHRoaXMub2JqZWN0UG9vbC5yZWN5Y2xlKHRoaXMucGFyc2luZ0F0dHJWYWx1ZSk7CiAgICB0aGlzLmF0dHJWYWx1ZSA9IHRoaXMub2xkRGF0YSA9IHRoaXMucGFyc2luZ0F0dHJWYWx1ZSA9IHVuZGVmaW5lZDsKICB9Cn07CgpmdW5jdGlvbiBldmVudHNCaW5kIChjb21wb25lbnQsIGV2ZW50cykgewogIHZhciBldmVudE5hbWU7CiAgZm9yIChldmVudE5hbWUgaW4gZXZlbnRzKSB7CiAgICBjb21wb25lbnQuZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudHNbZXZlbnROYW1lXS5iaW5kKGNvbXBvbmVudCk7CiAgfQp9CgovLyBGb3IgdGVzdGluZy4KaWYgKHdpbmRvdy5kZWJ1ZykgewogIHZhciByZWdpc3RyYXRpb25PcmRlcldhcm5pbmdzID0gbW9kdWxlLmV4cG9ydHMucmVnaXN0cmF0aW9uT3JkZXJXYXJuaW5ncyA9IHt9Owp9CgovKioKICogUmVnaXN0ZXIgYSBjb21wb25lbnQgdG8gQS1GcmFtZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBDb21wb25lbnQgbmFtZS4KICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb24gLSBDb21wb25lbnQgc2NoZW1hIGFuZCBsaWZlY3ljbGUgbWV0aG9kIGhhbmRsZXJzLgogKiBAcmV0dXJucyB7b2JqZWN0fSBDb21wb25lbnQuCiAqLwptb2R1bGUuZXhwb3J0cy5yZWdpc3RlckNvbXBvbmVudCA9IGZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uKSB7CiAgdmFyIE5ld0NvbXBvbmVudDsKICB2YXIgcHJvcGVydHlOYW1lOwogIHZhciBwcm90byA9IHt9OwogIHZhciBzY2hlbWE7CiAgdmFyIHNjaGVtYUlzU2luZ2xlUHJvcDsKCiAgLy8gV2FybmluZyBpZiBjb21wb25lbnQgaXMgc3RhdGljYWxseSByZWdpc3RlcmVkIGFmdGVyIHRoZSBzY2VuZS4KICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICE9PSBhZnJhbWVTY3JpcHQpIHsKICAgIHNjZW5lcy5mb3JFYWNoKGZ1bmN0aW9uIGNoZWNrUG9zaXRpb24gKHNjZW5lRWwpIHsKICAgICAgLy8gT2theSB0byByZWdpc3RlciBjb21wb25lbnQgYWZ0ZXIgdGhlIHNjZW5lIGF0IHJ1bnRpbWUuCiAgICAgIGlmIChzY2VuZUVsLmhhc0xvYWRlZCkgeyByZXR1cm47IH0KCiAgICAgIC8vIENoZWNrIHRoYXQgY29tcG9uZW50IGlzIGRlY2xhcmVkIGJlZm9yZSB0aGUgc2NlbmUuCiAgICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHNjZW5lRWwpID09PQogICAgICAgICAgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcpIHsgcmV0dXJuOyB9CgogICAgICB3YXJuKCdUaGUgY29tcG9uZW50IGAnICsgbmFtZSArICdgIHdhcyByZWdpc3RlcmVkIGluIGEgPHNjcmlwdD4gdGFnIGFmdGVyIHRoZSBzY2VuZS4gJyArCiAgICAgICAgICAgJ0NvbXBvbmVudCA8c2NyaXB0PiB0YWdzIGluIGFuIEhUTUwgZmlsZSBzaG91bGQgYmUgZGVjbGFyZWQgKmJlZm9yZSogdGhlIHNjZW5lICcgKwogICAgICAgICAgICdzdWNoIHRoYXQgdGhlIGNvbXBvbmVudCBpcyBhdmFpbGFibGUgdG8gZW50aXRpZXMgZHVyaW5nIHNjZW5lIGluaXRpYWxpemF0aW9uLicpOwoKICAgICAgLy8gRm9yIHRlc3RpbmcuCiAgICAgIGlmICh3aW5kb3cuZGVidWcpIHsgcmVnaXN0cmF0aW9uT3JkZXJXYXJuaW5nc1tuYW1lXSA9IHRydWU7IH0KICAgIH0pOwogIH0KCiAgaWYgKHVwcGVyQ2FzZVJlZ0V4cC50ZXN0KG5hbWUpID09PSB0cnVlKSB7CiAgICB3YXJuKCdUaGUgY29tcG9uZW50IG5hbWUgYCcgKyBuYW1lICsgJ2AgY29udGFpbnMgdXBwZXJjYXNlIGNoYXJhY3RlcnMsIGJ1dCAnICsKICAgICAgICAgJ0hUTUwgd2lsbCBpZ25vcmUgdGhlIGNhcGl0YWxpemF0aW9uIG9mIGF0dHJpYnV0ZSBuYW1lcy4gJyArCiAgICAgICAgICdDaGFuZ2UgdGhlIG5hbWUgdG8gYmUgbG93ZXJjYXNlOiBgJyArIG5hbWUudG9Mb3dlckNhc2UoKSArICdgJyk7CiAgfQoKICBpZiAobmFtZS5pbmRleE9mKCdfXycpICE9PSAtMSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29tcG9uZW50IG5hbWUgYCcgKyBuYW1lICsgJ2AgaXMgbm90IGFsbG93ZWQuICcgKwogICAgICAgICAgICAgICAgICAgICdUaGUgc2VxdWVuY2UgX18gKGRvdWJsZSB1bmRlcnNjb3JlKSBpcyByZXNlcnZlZCB0byBzcGVjaWZ5IGFuIGlkJyArCiAgICAgICAgICAgICAgICAgICAgJyBmb3IgbXVsdGlwbGUgY29tcG9uZW50cyBvZiB0aGUgc2FtZSB0eXBlJyk7CiAgfQoKICAvLyBGb3JtYXQgZGVmaW5pdGlvbiBvYmplY3QgdG8gcHJvdG90eXBlIG9iamVjdC4KICBPYmplY3Qua2V5cyhkZWZpbml0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIHByb3RvW2tleV0gPSB7CiAgICAgIHZhbHVlOiBkZWZpbml0aW9uW2tleV0sCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9OwogIH0pOwoKICBpZiAoY29tcG9uZW50c1tuYW1lXSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29tcG9uZW50IGAnICsgbmFtZSArICdgIGhhcyBiZWVuIGFscmVhZHkgcmVnaXN0ZXJlZC4gJyArCiAgICAgICAgICAgICAgICAgICAgJ0NoZWNrIHRoYXQgeW91IGFyZSBub3QgbG9hZGluZyB0d28gdmVyc2lvbnMgb2YgdGhlIHNhbWUgY29tcG9uZW50ICcgKwogICAgICAgICAgICAgICAgICAgICdvciB0d28gZGlmZmVyZW50IGNvbXBvbmVudHMgb2YgdGhlIHNhbWUgbmFtZS4nKTsKICB9CgogIE5ld0NvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCwgYXR0ciwgaWQpIHsKICAgIENvbXBvbmVudC5jYWxsKHRoaXMsIGVsLCBhdHRyLCBpZCk7CiAgfTsKCiAgTmV3Q29tcG9uZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29tcG9uZW50LnByb3RvdHlwZSwgcHJvdG8pOwogIE5ld0NvbXBvbmVudC5wcm90b3R5cGUubmFtZSA9IG5hbWU7CiAgTmV3Q29tcG9uZW50LnByb3RvdHlwZS5pc1Bvc2l0aW9uUm90YXRpb25TY2FsZSA9CiAgICBuYW1lID09PSAncG9zaXRpb24nIHx8IG5hbWUgPT09ICdyb3RhdGlvbicgfHwgbmFtZSA9PT0gJ3NjYWxlJzsKICBOZXdDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTmV3Q29tcG9uZW50OwogIE5ld0NvbXBvbmVudC5wcm90b3R5cGUuc3lzdGVtID0gc3lzdGVtcyAmJiBzeXN0ZW1zLnN5c3RlbXNbbmFtZV07CiAgTmV3Q29tcG9uZW50LnByb3RvdHlwZS5wbGF5ID0gd3JhcFBsYXkoTmV3Q29tcG9uZW50LnByb3RvdHlwZS5wbGF5KTsKICBOZXdDb21wb25lbnQucHJvdG90eXBlLnBhdXNlID0gd3JhcFBhdXNlKE5ld0NvbXBvbmVudC5wcm90b3R5cGUucGF1c2UpOwoKICBzY2hlbWEgPSB1dGlscy5leHRlbmQocHJvY2Vzc1NjaGVtYShOZXdDb21wb25lbnQucHJvdG90eXBlLnNjaGVtYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXdDb21wb25lbnQucHJvdG90eXBlLm5hbWUpKTsKICBzY2hlbWFJc1NpbmdsZVByb3AgPSBpc1NpbmdsZVByb3AoTmV3Q29tcG9uZW50LnByb3RvdHlwZS5zY2hlbWEpOwoKICAvLyBLZWVwIHRyYWNrIG9mIGtleXMgdGhhdCBtYXkgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBzY2hlbWEuCiAgaWYgKCFzY2hlbWFJc1NpbmdsZVByb3ApIHsKICAgIE5ld0NvbXBvbmVudC5wcm90b3R5cGUuc2NoZW1hQ2hhbmdlS2V5cyA9IFtdOwogICAgZm9yIChwcm9wZXJ0eU5hbWUgaW4gc2NoZW1hKSB7CiAgICAgIGlmIChzY2hlbWFbcHJvcGVydHlOYW1lXS5zY2hlbWFDaGFuZ2UpIHsKICAgICAgICBOZXdDb21wb25lbnQucHJvdG90eXBlLnNjaGVtYUNoYW5nZUtleXMucHVzaChwcm9wZXJ0eU5hbWUpOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBDcmVhdGUgb2JqZWN0IHBvb2wgZm9yIGNsYXNzIG9mIGNvbXBvbmVudHMuCiAgb2JqZWN0UG9vbHNbbmFtZV0gPSB1dGlscy5vYmplY3RQb29sLmNyZWF0ZVBvb2woKTsKCiAgY29tcG9uZW50c1tuYW1lXSA9IHsKICAgIENvbXBvbmVudDogTmV3Q29tcG9uZW50LAogICAgZGVwZW5kZW5jaWVzOiBOZXdDb21wb25lbnQucHJvdG90eXBlLmRlcGVuZGVuY2llcywKICAgIGlzU2luZ2xlUHJvcDogc2NoZW1hSXNTaW5nbGVQcm9wLAogICAgbXVsdGlwbGU6IE5ld0NvbXBvbmVudC5wcm90b3R5cGUubXVsdGlwbGUsCiAgICBuYW1lOiBuYW1lLAogICAgcGFyc2U6IE5ld0NvbXBvbmVudC5wcm90b3R5cGUucGFyc2UsCiAgICBwYXJzZUF0dHJWYWx1ZUZvckNhY2hlOiBOZXdDb21wb25lbnQucHJvdG90eXBlLnBhcnNlQXR0clZhbHVlRm9yQ2FjaGUsCiAgICBzY2hlbWE6IHNjaGVtYSwKICAgIHN0cmluZ2lmeTogTmV3Q29tcG9uZW50LnByb3RvdHlwZS5zdHJpbmdpZnksCiAgICB0eXBlOiBOZXdDb21wb25lbnQucHJvdG90eXBlLnR5cGUKICB9OwogIHJldHVybiBOZXdDb21wb25lbnQ7Cn07CgovKioKKiBDbG9uZSBjb21wb25lbnQgZGF0YS4KKiBDbG9uZSBvbmx5IHRoZSBwcm9wZXJ0aWVzIHRoYXQgYXJlIHBsYWluIG9iamVjdHMgd2hpbGUga2VlcGluZyBhIHJlZmVyZW5jZSBmb3IgdGhlIHJlc3QuCioKKiBAcGFyYW0gZGF0YSAtIENvbXBvbmVudCBkYXRhIHRvIGNsb25lLgoqIEByZXR1cm5zIENsb25lZCBkYXRhLgoqLwpmdW5jdGlvbiBjb3B5RGF0YSAoZGVzdCwgc291cmNlRGF0YSkgewogIHZhciBwYXJzZWRQcm9wZXJ0eTsKICB2YXIga2V5OwogIGZvciAoa2V5IGluIHNvdXJjZURhdGEpIHsKICAgIGlmIChzb3VyY2VEYXRhW2tleV0gPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfQogICAgcGFyc2VkUHJvcGVydHkgPSBzb3VyY2VEYXRhW2tleV07CiAgICBkZXN0W2tleV0gPSBpc09iamVjdE9yQXJyYXkocGFyc2VkUHJvcGVydHkpCiAgICAgID8gdXRpbHMuY2xvbmUocGFyc2VkUHJvcGVydHkpCiAgICAgIDogcGFyc2VkUHJvcGVydHk7CiAgfQogIHJldHVybiBkZXN0Owp9CgovKioKKiBPYmplY3QgZXh0ZW5kaW5nIHdpdGggY2hlY2tpbmcgZm9yIHNpbmdsZS1wcm9wZXJ0eSBzY2hlbWEuCioKKiBAcGFyYW0gZGVzdCAtIERlc3RpbmF0aW9uIG9iamVjdCBvciB2YWx1ZS4KKiBAcGFyYW0gc291cmNlIC0gU291cmNlIG9iamVjdCBvciB2YWx1ZQoqIEBwYXJhbSB7Ym9vbGVhbn0gaXNPYmplY3RCYXNlZCAtIFdoZXRoZXIgdmFsdWVzIGFyZSBvYmplY3RzLgoqIEByZXR1cm5zIE92ZXJyaWRkZW4gb2JqZWN0IG9yIHZhbHVlLgoqLwpmdW5jdGlvbiBleHRlbmRQcm9wZXJ0aWVzIChkZXN0LCBzb3VyY2UsIGlzT2JqZWN0QmFzZWQpIHsKICB2YXIga2V5OwogIGlmIChpc09iamVjdEJhc2VkICYmIHNvdXJjZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHsKICAgICAgaWYgKHNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHsgY29udGludWU7IH0KICAgICAgaWYgKHNvdXJjZVtrZXldICYmIHNvdXJjZVtrZXldLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHsKICAgICAgICBkZXN0W2tleV0gPSB1dGlscy5jbG9uZShzb3VyY2Vba2V5XSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVzdFtrZXldID0gc291cmNlW2tleV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkZXN0OwogIH0KICByZXR1cm4gc291cmNlOwp9CgovKioKICogQ2hlY2tzIGlmIGEgY29tcG9uZW50IGhhcyBkZWZpbmVkIGEgbWV0aG9kIHRoYXQgbmVlZHMgdG8gcnVuIGV2ZXJ5IGZyYW1lLgogKi8KZnVuY3Rpb24gaGFzQmVoYXZpb3IgKGNvbXBvbmVudCkgewogIHJldHVybiBjb21wb25lbnQudGljayB8fCBjb21wb25lbnQudG9jazsKfQoKLyoqCiAqIFdyYXBwZXIgZm9yIGRlZmluZWQgcGF1c2UgbWV0aG9kLgogKiBQYXVzZSBjb21wb25lbnQgYnkgcmVtb3ZpbmcgdGljayBiZWhhdmlvciBhbmQgY2FsbGluZyB1c2VyJ3MgcGF1c2UgbWV0aG9kLgogKgogKiBAcGFyYW0gcGF1c2VNZXRob2Qge2Z1bmN0aW9ufQogKi8KZnVuY3Rpb24gd3JhcFBhdXNlIChwYXVzZU1ldGhvZCkgewogIHJldHVybiBmdW5jdGlvbiBwYXVzZSAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWwuc2NlbmVFbDsKICAgIGlmICghdGhpcy5pc1BsYXlpbmcpIHsgcmV0dXJuOyB9CiAgICBwYXVzZU1ldGhvZC5jYWxsKHRoaXMpOwogICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTsKICAgIHRoaXMuZXZlbnRzRGV0YWNoKCk7CiAgICAvLyBSZW1vdmUgdGljayBiZWhhdmlvci4KICAgIGlmICghaGFzQmVoYXZpb3IodGhpcykpIHsgcmV0dXJuOyB9CiAgICBzY2VuZUVsLnJlbW92ZUJlaGF2aW9yKHRoaXMpOwogIH07Cn0KCi8qKgogKiBXcmFwcGVyIGZvciBkZWZpbmVkIHBsYXkgbWV0aG9kLgogKiBQbGF5IGNvbXBvbmVudCBieSBhZGRpbmcgdGljayBiZWhhdmlvciBhbmQgY2FsbGluZyB1c2VyJ3MgcGxheSBtZXRob2QuCiAqCiAqIEBwYXJhbSBwbGF5TWV0aG9kIHtmdW5jdGlvbn0KICovCmZ1bmN0aW9uIHdyYXBQbGF5IChwbGF5TWV0aG9kKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHBsYXkgKCkgewogICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7CiAgICB2YXIgc2hvdWxkUGxheSA9IHRoaXMuZWwuaXNQbGF5aW5nICYmICF0aGlzLmlzUGxheWluZzsKICAgIGlmICghdGhpcy5pbml0aWFsaXplZCB8fCAhc2hvdWxkUGxheSkgeyByZXR1cm47IH0KICAgIHBsYXlNZXRob2QuY2FsbCh0aGlzKTsKICAgIHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTsKICAgIHRoaXMuZXZlbnRzQXR0YWNoKCk7CiAgICAvLyBBZGQgdGljayBiZWhhdmlvci4KICAgIGlmICghaGFzQmVoYXZpb3IodGhpcykpIHsgcmV0dXJuOyB9CiAgICBzY2VuZUVsLmFkZEJlaGF2aW9yKHRoaXMpOwogIH07Cn0KCmZ1bmN0aW9uIGlzT2JqZWN0ICh2YWx1ZSkgewogIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpOwp9CgpmdW5jdGlvbiBpc09iamVjdE9yQXJyYXkgKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlICYmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkgJiYKICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCk7Cn0KCn0seyIuLi91dGlscy8iOjE4MiwiLi9zY2VuZS9zY2VuZXMiOjExNiwiLi9zY2hlbWEiOjExOCwiLi9zeXN0ZW0iOjEyMH1dLDExMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBzY2hlbWEgPSBfZGVyZXFfKCcuL3NjaGVtYScpOwoKdmFyIHByb2Nlc3NTY2hlbWEgPSBzY2hlbWEucHJvY2VzczsKdmFyIGdlb21ldHJpZXMgPSBtb2R1bGUuZXhwb3J0cy5nZW9tZXRyaWVzID0ge307ICAvLyBSZWdpc3RlcmVkIGdlb21ldHJpZXMuCnZhciBnZW9tZXRyeU5hbWVzID0gbW9kdWxlLmV4cG9ydHMuZ2VvbWV0cnlOYW1lcyA9IFtdOyAgLy8gTmFtZXMgb2YgcmVnaXN0ZXJlZCBnZW9tZXRyaWVzLgp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCi8qKgogKiBHZW9tZXRyeSBjbGFzcyBkZWZpbml0aW9uLgogKgogKiBHZW9tZXRyaWVzIGV4dGVuZCB0aGUgZ2VvbWV0cnkgY29tcG9uZW50IEFQSSB0byBjcmVhdGUgYW5kIHJlZ2lzdGVyIGdlb21ldHJ5IHR5cGVzLgogKi8KdmFyIEdlb21ldHJ5ID0gbW9kdWxlLmV4cG9ydHMuR2VvbWV0cnkgPSBmdW5jdGlvbiAoKSB7fTsKCkdlb21ldHJ5LnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBDb250YWlucyB0aGUgdHlwZSBzY2hlbWEgYW5kIGRlZmF1bHRzIGZvciB0aGUgZGF0YSB2YWx1ZXMuCiAgICogRGF0YSBpcyBjb2VyY2VkIGludG8gdGhlIHR5cGVzIG9mIHRoZSB2YWx1ZXMgb2YgdGhlIGRlZmF1bHRzLgogICAqLwogIHNjaGVtYToge30sCgogIC8qKgogICAqIEluaXQgaGFuZGxlci4gU2ltaWxhciB0byBhdHRhY2hlZENhbGxiYWNrLgogICAqIENhbGxlZCBkdXJpbmcgc2hhZGVyIGluaXRpYWxpemF0aW9uIGFuZCBpcyBvbmx5IHJ1biBvbmNlLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7CiAgICByZXR1cm4gdGhpcy5nZW9tZXRyeTsKICB9LAoKICAvKioKICAgKiBVcGRhdGUgaGFuZGxlci4gU2ltaWxhciB0byBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suCiAgICogQ2FsbGVkIHdoZW5ldmVyIHRoZSBhc3NvY2lhdGVkIGdlb21ldHJ5IGRhdGEgY2hhbmdlcy4KICAgKgogICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gTmV3IGdlb21ldHJ5IGRhdGEuCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbiAoZGF0YSkgeyAvKiBuby1vcCAqLyB9Cn07CgovKioKICogUmVnaXN0ZXJzIGEgZ2VvbWV0cnkgdG8gQS1GcmFtZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBHZW9tZXRyeSBuYW1lLgogKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbiAtIEdlb21ldHJ5IHByb3BlcnR5IGFuZCBtZXRob2RzLgogKiBAcmV0dXJucyB7b2JqZWN0fSBHZW9tZXRyeS4KICovCm1vZHVsZS5leHBvcnRzLnJlZ2lzdGVyR2VvbWV0cnkgPSBmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikgewogIHZhciBOZXdHZW9tZXRyeTsKICB2YXIgcHJvdG8gPSB7fTsKCiAgLy8gRm9ybWF0IGRlZmluaXRpb24gb2JqZWN0IHRvIHByb3RvdHlwZSBvYmplY3QuCiAgT2JqZWN0LmtleXMoZGVmaW5pdGlvbikuZm9yRWFjaChmdW5jdGlvbiBleHBhbmREZWZpbml0aW9uIChrZXkpIHsKICAgIHByb3RvW2tleV0gPSB7CiAgICAgIHZhbHVlOiBkZWZpbml0aW9uW2tleV0sCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9OwogIH0pOwoKICBpZiAoZ2VvbWV0cmllc1tuYW1lXSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZ2VvbWV0cnkgYCcgKyBuYW1lICsgJ2AgaGFzIGJlZW4gYWxyZWFkeSByZWdpc3RlcmVkJyk7CiAgfQogIE5ld0dlb21ldHJ5ID0gZnVuY3Rpb24gKCkgeyBHZW9tZXRyeS5jYWxsKHRoaXMpOyB9OwogIE5ld0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlLCBwcm90byk7CiAgTmV3R2VvbWV0cnkucHJvdG90eXBlLm5hbWUgPSBuYW1lOwogIE5ld0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5ld0dlb21ldHJ5OwogIGdlb21ldHJpZXNbbmFtZV0gPSB7CiAgICBHZW9tZXRyeTogTmV3R2VvbWV0cnksCiAgICBzY2hlbWE6IHByb2Nlc3NTY2hlbWEoTmV3R2VvbWV0cnkucHJvdG90eXBlLnNjaGVtYSkKICB9OwogIGdlb21ldHJ5TmFtZXMucHVzaChuYW1lKTsKICByZXR1cm4gTmV3R2VvbWV0cnk7Cn07Cgp9LHsiLi4vbGliL3RocmVlIjoxNTcsIi4vc2NoZW1hIjoxMTh9XSwxMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY29vcmRpbmF0ZXMgPSBfZGVyZXFfKCcuLi91dGlscy9jb29yZGluYXRlcycpOwp2YXIgZGVidWcgPSBfZGVyZXFfKCdkZWJ1ZycpOwoKdmFyIGVycm9yID0gZGVidWcoJ2NvcmU6cHJvcGVydHlUeXBlczp3YXJuJyk7CnZhciB3YXJuID0gZGVidWcoJ2NvcmU6cHJvcGVydHlUeXBlczp3YXJuJyk7Cgp2YXIgcHJvcGVydHlUeXBlcyA9IG1vZHVsZS5leHBvcnRzLnByb3BlcnR5VHlwZXMgPSB7fTsKdmFyIG5vbkNoYXJSZWdleCA9IC9bLD4gLltcXTpdLzsKdmFyIHVybFJlZ2V4ID0gL1x1cmxcKCguKylcKS87CgovLyBCdWlsdC1pbiBwcm9wZXJ0eSB0eXBlcy4KcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ2F1ZGlvJywgJycsIGFzc2V0UGFyc2UpOwpyZWdpc3RlclByb3BlcnR5VHlwZSgnYXJyYXknLCBbXSwgYXJyYXlQYXJzZSwgYXJyYXlTdHJpbmdpZnkpOwpyZWdpc3RlclByb3BlcnR5VHlwZSgnYXNzZXQnLCAnJywgYXNzZXRQYXJzZSk7CnJlZ2lzdGVyUHJvcGVydHlUeXBlKCdib29sZWFuJywgZmFsc2UsIGJvb2xQYXJzZSk7CnJlZ2lzdGVyUHJvcGVydHlUeXBlKCdjb2xvcicsICcjRkZGJywgZGVmYXVsdFBhcnNlLCBkZWZhdWx0U3RyaW5naWZ5KTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ2ludCcsIDAsIGludFBhcnNlKTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ251bWJlcicsIDAsIG51bWJlclBhcnNlKTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ21hcCcsICcnLCBhc3NldFBhcnNlKTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ21vZGVsJywgJycsIGFzc2V0UGFyc2UpOwpyZWdpc3RlclByb3BlcnR5VHlwZSgnc2VsZWN0b3InLCBudWxsLCBzZWxlY3RvclBhcnNlLCBzZWxlY3RvclN0cmluZ2lmeSk7CnJlZ2lzdGVyUHJvcGVydHlUeXBlKCdzZWxlY3RvckFsbCcsIG51bGwsIHNlbGVjdG9yQWxsUGFyc2UsIHNlbGVjdG9yQWxsU3RyaW5naWZ5KTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ3NyYycsICcnLCBzcmNQYXJzZSk7CnJlZ2lzdGVyUHJvcGVydHlUeXBlKCdzdHJpbmcnLCAnJywgZGVmYXVsdFBhcnNlLCBkZWZhdWx0U3RyaW5naWZ5KTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ3RpbWUnLCAwLCBpbnRQYXJzZSk7CnJlZ2lzdGVyUHJvcGVydHlUeXBlKCd2ZWMyJywge3g6IDAsIHk6IDB9LCB2ZWNQYXJzZSwgY29vcmRpbmF0ZXMuc3RyaW5naWZ5KTsKcmVnaXN0ZXJQcm9wZXJ0eVR5cGUoJ3ZlYzMnLCB7eDogMCwgeTogMCwgejogMH0sIHZlY1BhcnNlLCBjb29yZGluYXRlcy5zdHJpbmdpZnkpOwpyZWdpc3RlclByb3BlcnR5VHlwZSgndmVjNCcsIHt4OiAwLCB5OiAwLCB6OiAwLCB3OiAxfSwgdmVjUGFyc2UsIGNvb3JkaW5hdGVzLnN0cmluZ2lmeSk7CgovKioKICogUmVnaXN0ZXIgYSBwYXJzZXIgZm9yIHJlLXVzZSBzdWNoIHRoYXQgd2hlbiBzb21lb25lIHVzZXMgYHR5cGVgIGluIHRoZSBzY2hlbWEsCiAqIGBzY2hlbWEucHJvY2Vzc2Agd2lsbCBzZXQgdGhlIHByb3BlcnR5IGBwYXJzZWAgYW5kIGBzdHJpbmdpZnlgLgogKgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFR5cGUgbmFtZS4KICogQHBhcmFtIFtkZWZhdWx0VmFsdWU9bnVsbF0gLQogKiAgIERlZmF1bHQgdmFsdWUgdG8gdXNlIGlmIGNvbXBvbmVudCBkb2VzIG5vdCBkZWZpbmUgZGVmYXVsdCB2YWx1ZS4KICogQHBhcmFtIHtmdW5jdGlvbn0gW3BhcnNlPWRlZmF1bHRQYXJzZV0gLSBQYXJzZSBzdHJpbmcgZnVuY3Rpb24uCiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtzdHJpbmdpZnk9ZGVmYXVsdFN0cmluZ2lmeV0gLSBTdHJpbmdpZnkgdG8gRE9NIGZ1bmN0aW9uLgogKi8KZnVuY3Rpb24gcmVnaXN0ZXJQcm9wZXJ0eVR5cGUgKHR5cGUsIGRlZmF1bHRWYWx1ZSwgcGFyc2UsIHN0cmluZ2lmeSkgewogIGlmICgndHlwZScgaW4gcHJvcGVydHlUeXBlcykgewogICAgZXJyb3IoJ1Byb3BlcnR5IHR5cGUgJyArIHR5cGUgKyAnIGlzIGFscmVhZHkgcmVnaXN0ZXJlZC4nKTsKICAgIHJldHVybjsKICB9CgogIHByb3BlcnR5VHlwZXNbdHlwZV0gPSB7CiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsCiAgICBwYXJzZTogcGFyc2UgfHwgZGVmYXVsdFBhcnNlLAogICAgc3RyaW5naWZ5OiBzdHJpbmdpZnkgfHwgZGVmYXVsdFN0cmluZ2lmeQogIH07Cn0KbW9kdWxlLmV4cG9ydHMucmVnaXN0ZXJQcm9wZXJ0eVR5cGUgPSByZWdpc3RlclByb3BlcnR5VHlwZTsKCmZ1bmN0aW9uIGFycmF5UGFyc2UgKHZhbHVlKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfQogIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgeyByZXR1cm4gW107IH0KICByZXR1cm4gdmFsdWUuc3BsaXQoJywnKS5tYXAodHJpbSk7CiAgZnVuY3Rpb24gdHJpbSAoc3RyKSB7IHJldHVybiBzdHIudHJpbSgpOyB9Cn0KCmZ1bmN0aW9uIGFycmF5U3RyaW5naWZ5ICh2YWx1ZSkgewogIHJldHVybiB2YWx1ZS5qb2luKCcsICcpOwp9CgovKioKICogRm9yIGdlbmVyYWwgYXNzZXRzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBDYW4gZWl0aGVyIGJlIGB1cmwoPHZhbHVlPilgLCBhbiBJRCBzZWxlY3RvciB0byBhbiBhc3NldCwgb3IKICogICBqdXN0IHN0cmluZy4KICogQHJldHVybnMge3N0cmluZ30gUGFyc2VkIHZhbHVlIGZyb20gYHVybCg8dmFsdWU+KWAsIHNyYyBmcm9tIGA8c29tZWFzc2V0IHNyYz5gLCBvcgogKiAgIGp1c3Qgc3RyaW5nLgogKi8KZnVuY3Rpb24gYXNzZXRQYXJzZSAodmFsdWUpIHsKICB2YXIgZWw7CiAgdmFyIHBhcnNlZFVybDsKCiAgLy8gSWYgYW4gZWxlbWVudCB3YXMgcHJvdmlkZWQgKGUuZy4gY2FudmFzIG9yIHZpZGVvKSwganVzdCByZXR1cm4gaXQuCiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIHZhbHVlOyB9CgogIC8vIFdyYXBwZWQgYHVybCgpYCBpbiBjYXNlIG9mIGRhdGEgVVJJLgogIHBhcnNlZFVybCA9IHZhbHVlLm1hdGNoKHVybFJlZ2V4KTsKICBpZiAocGFyc2VkVXJsKSB7IHJldHVybiBwYXJzZWRVcmxbMV07IH0KCiAgLy8gSUQuCiAgaWYgKHZhbHVlLmNoYXJBdCgwKSA9PT0gJyMnKSB7CiAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZhbHVlLnN1YnN0cmluZygxKSk7CiAgICBpZiAoZWwpIHsKICAgICAgLy8gUGFzcyB0aHJvdWdoIG1lZGlhIGVsZW1lbnRzLiBJZiB3ZSBoYXZlIHRoZSBlbGVtZW50cywgd2UgZG9uJ3QgaGF2ZSB0byBjYWxsCiAgICAgIC8vIHRocmVlLmpzIGxvYWRlcnMgd2hpY2ggd291bGQgcmUtcmVxdWVzdCB0aGUgYXNzZXRzLgogICAgICBpZiAoZWwudGFnTmFtZSA9PT0gJ0NBTlZBUycgfHwgZWwudGFnTmFtZSA9PT0gJ1ZJREVPJyB8fCBlbC50YWdOYW1lID09PSAnSU1HJykgewogICAgICAgIHJldHVybiBlbDsKICAgICAgfQogICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCdzcmMnKTsKICAgIH0KICAgIHdhcm4oJyInICsgdmFsdWUgKyAnIiBhc3NldCBub3QgZm91bmQuJyk7CiAgICByZXR1cm47CiAgfQoKICAvLyBOb24td3JhcHBlZCB1cmwoKS4KICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIGRlZmF1bHRQYXJzZSAodmFsdWUpIHsKICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIGRlZmF1bHRTdHJpbmdpZnkgKHZhbHVlKSB7CiAgaWYgKHZhbHVlID09PSBudWxsKSB7IHJldHVybiAnbnVsbCc7IH0KICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKfQoKZnVuY3Rpb24gYm9vbFBhcnNlICh2YWx1ZSkgewogIHJldHVybiB2YWx1ZSAhPT0gJ2ZhbHNlJyAmJiB2YWx1ZSAhPT0gZmFsc2U7Cn0KCmZ1bmN0aW9uIGludFBhcnNlICh2YWx1ZSkgewogIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApOwp9CgpmdW5jdGlvbiBudW1iZXJQYXJzZSAodmFsdWUpIHsKICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSwgMTApOwp9CgpmdW5jdGlvbiBzZWxlY3RvclBhcnNlICh2YWx1ZSkgewogIGlmICghdmFsdWUpIHsgcmV0dXJuIG51bGw7IH0KICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgeyByZXR1cm4gdmFsdWU7IH0KICBpZiAodmFsdWVbMF0gPT09ICcjJyAmJiAhbm9uQ2hhclJlZ2V4LnRlc3QodmFsdWUpKSB7CiAgICAvLyBXaGVuIHNlbGVjdGluZyBlbGVtZW50IGJ5IElEIG9ubHksIHVzZSBnZXRFbGVtZW50QnlJZCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLgogICAgLy8gRG9uJ3QgbWF0Y2ggbGlrZSAjbXlJZCAuY2hpbGQuCiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodmFsdWUuc3Vic3RyaW5nKDEpKTsKICB9CiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpOwp9CgpmdW5jdGlvbiBzZWxlY3RvckFsbFBhcnNlICh2YWx1ZSkgewogIGlmICghdmFsdWUpIHsgcmV0dXJuIG51bGw7IH0KICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgeyByZXR1cm4gdmFsdWU7IH0KICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApOwp9CgpmdW5jdGlvbiBzZWxlY3RvclN0cmluZ2lmeSAodmFsdWUpIHsKICBpZiAodmFsdWUuZ2V0QXR0cmlidXRlKSB7CiAgICByZXR1cm4gJyMnICsgdmFsdWUuZ2V0QXR0cmlidXRlKCdpZCcpOwogIH0KICByZXR1cm4gZGVmYXVsdFN0cmluZ2lmeSh2YWx1ZSk7Cn0KCmZ1bmN0aW9uIHNlbGVjdG9yQWxsU3RyaW5naWZ5ICh2YWx1ZSkgewogIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgIHJldHVybiAnIycgKyBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKTsKICAgIH0pLmpvaW4oJywgJyk7CiAgfQogIHJldHVybiBkZWZhdWx0U3RyaW5naWZ5KHZhbHVlKTsKfQoKZnVuY3Rpb24gc3JjUGFyc2UgKHZhbHVlKSB7CiAgd2FybignYHNyY2AgcHJvcGVydHkgdHlwZSBpcyBkZXByZWNhdGVkLiBVc2UgYGFzc2V0YCBpbnN0ZWFkLicpOwogIHJldHVybiBhc3NldFBhcnNlKHZhbHVlKTsKfQoKZnVuY3Rpb24gdmVjUGFyc2UgKHZhbHVlKSB7CiAgcmV0dXJuIGNvb3JkaW5hdGVzLnBhcnNlKHZhbHVlLCB0aGlzLmRlZmF1bHQpOwp9CgovKioKICogVmFsaWRhdGUgdGhlIGRlZmF1bHQgdmFsdWVzIGluIGEgc2NoZW1hIHRvIG1hdGNoIHRoZWlyIHR5cGUuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gUHJvcGVydHkgdHlwZSBuYW1lLgogKiBAcGFyYW0gZGVmYXVsdFZhbCAtIFByb3BlcnR5IHR5cGUgZGVmYXVsdCB2YWx1ZS4KICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgZGVmYXVsdCB2YWx1ZSBpcyBhY2N1cmF0ZSBnaXZlbiB0aGUgdHlwZS4KICovCmZ1bmN0aW9uIGlzVmFsaWREZWZhdWx0VmFsdWUgKHR5cGUsIGRlZmF1bHRWYWwpIHsKICBpZiAodHlwZSA9PT0gJ2F1ZGlvJyAmJiB0eXBlb2YgZGVmYXVsdFZhbCAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9CiAgaWYgKHR5cGUgPT09ICdhcnJheScgJiYgIUFycmF5LmlzQXJyYXkoZGVmYXVsdFZhbCkpIHsgcmV0dXJuIGZhbHNlOyB9CiAgaWYgKHR5cGUgPT09ICdhc3NldCcgJiYgdHlwZW9mIGRlZmF1bHRWYWwgIT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfQogIGlmICh0eXBlID09PSAnYm9vbGVhbicgJiYgdHlwZW9mIGRlZmF1bHRWYWwgIT09ICdib29sZWFuJykgeyByZXR1cm4gZmFsc2U7IH0KICBpZiAodHlwZSA9PT0gJ2NvbG9yJyAmJiB0eXBlb2YgZGVmYXVsdFZhbCAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9CiAgaWYgKHR5cGUgPT09ICdpbnQnICYmIHR5cGVvZiBkZWZhdWx0VmFsICE9PSAnbnVtYmVyJykgeyByZXR1cm4gZmFsc2U7IH0KICBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGRlZmF1bHRWYWwgIT09ICdudW1iZXInKSB7IHJldHVybiBmYWxzZTsgfQogIGlmICh0eXBlID09PSAnbWFwJyAmJiB0eXBlb2YgZGVmYXVsdFZhbCAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9CiAgaWYgKHR5cGUgPT09ICdtb2RlbCcgJiYgdHlwZW9mIGRlZmF1bHRWYWwgIT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfQogIGlmICh0eXBlID09PSAnc2VsZWN0b3InICYmIHR5cGVvZiBkZWZhdWx0VmFsICE9PSAnc3RyaW5nJyAmJgogICAgICBkZWZhdWx0VmFsICE9PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfQogIGlmICh0eXBlID09PSAnc2VsZWN0b3JBbGwnICYmIHR5cGVvZiBkZWZhdWx0VmFsICE9PSAnc3RyaW5nJyAmJgogICAgICBkZWZhdWx0VmFsICE9PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfQogIGlmICh0eXBlID09PSAnc3JjJyAmJiB0eXBlb2YgZGVmYXVsdFZhbCAhPT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9CiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkZWZhdWx0VmFsICE9PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH0KICBpZiAodHlwZSA9PT0gJ3RpbWUnICYmIHR5cGVvZiBkZWZhdWx0VmFsICE9PSAnbnVtYmVyJykgeyByZXR1cm4gZmFsc2U7IH0KICBpZiAodHlwZSA9PT0gJ3ZlYzInKSB7IHJldHVybiBpc1ZhbGlkRGVmYXVsdENvb3JkaW5hdGUoZGVmYXVsdFZhbCwgMik7IH0KICBpZiAodHlwZSA9PT0gJ3ZlYzMnKSB7IHJldHVybiBpc1ZhbGlkRGVmYXVsdENvb3JkaW5hdGUoZGVmYXVsdFZhbCwgMyk7IH0KICBpZiAodHlwZSA9PT0gJ3ZlYzQnKSB7IHJldHVybiBpc1ZhbGlkRGVmYXVsdENvb3JkaW5hdGUoZGVmYXVsdFZhbCwgNCk7IH0KICByZXR1cm4gdHJ1ZTsKfQptb2R1bGUuZXhwb3J0cy5pc1ZhbGlkRGVmYXVsdFZhbHVlID0gaXNWYWxpZERlZmF1bHRWYWx1ZTsKCi8qKgogKiBDaGVja3MgaWYgZGVmYXVsdCBjb29yZGluYXRlcyBhcmUgdmFsaWQuCiAqCiAqIEBwYXJhbSBwb3NzaWJsZUNvb3JkaW5hdGVzCiAqIEBwYXJhbSB7bnVtYmVyfSBkaW1lbnNpb25zIC0gMiBmb3IgMkQgVmVjdG9yLCAzIGZvciAzRCB2ZWN0b3IuCiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIGNvb3JkaW5hdGVzIGFyZSBwYXJzZWQgY29ycmVjdGx5LgogKi8KZnVuY3Rpb24gaXNWYWxpZERlZmF1bHRDb29yZGluYXRlIChwb3NzaWJsZUNvb3JkaW5hdGVzLCBkaW1lbnNpb25zKSB7CiAgaWYgKHBvc3NpYmxlQ29vcmRpbmF0ZXMgPT09IG51bGwpIHsgcmV0dXJuIHRydWU7IH0KICBpZiAodHlwZW9mIHBvc3NpYmxlQ29vcmRpbmF0ZXMgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfQoKICBpZiAoT2JqZWN0LmtleXMocG9zc2libGVDb29yZGluYXRlcykubGVuZ3RoICE9PSBkaW1lbnNpb25zKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSBlbHNlIHsKICAgIHZhciB4ID0gcG9zc2libGVDb29yZGluYXRlcy54OwogICAgdmFyIHkgPSBwb3NzaWJsZUNvb3JkaW5hdGVzLnk7CiAgICB2YXIgeiA9IHBvc3NpYmxlQ29vcmRpbmF0ZXMuejsKICAgIHZhciB3ID0gcG9zc2libGVDb29yZGluYXRlcy53OwoKICAgIGlmICh0eXBlb2YgeCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHkgIT09ICdudW1iZXInKSB7IHJldHVybiBmYWxzZTsgfQogICAgaWYgKGRpbWVuc2lvbnMgPiAyICYmIHR5cGVvZiB6ICE9PSAnbnVtYmVyJykgeyByZXR1cm4gZmFsc2U7IH0KICAgIGlmIChkaW1lbnNpb25zID4gMyAmJiB0eXBlb2YgdyAhPT0gJ251bWJlcicpIHsgcmV0dXJuIGZhbHNlOyB9CiAgfQoKICByZXR1cm4gdHJ1ZTsKfQptb2R1bGUuZXhwb3J0cy5pc1ZhbGlkRGVmYXVsdENvb3JkaW5hdGUgPSBpc1ZhbGlkRGVmYXVsdENvb3JkaW5hdGU7Cgp9LHsiLi4vdXRpbHMvY29vcmRpbmF0ZXMiOjE3NywiZGVidWciOjEwfV0sMTEyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIFByb21pc2UsIHNjcmVlbiwgQ3VzdG9tRXZlbnQgKi8KdmFyIGluaXRNZXRhVGFncyA9IF9kZXJlcV8oJy4vbWV0YVRhZ3MnKS5pbmplY3Q7CnZhciBpbml0V2FrZWxvY2sgPSBfZGVyZXFfKCcuL3dha2Vsb2NrJyk7CnZhciBsb2FkaW5nU2NyZWVuID0gX2RlcmVxXygnLi9sb2FkaW5nU2NyZWVuJyk7CnZhciByZSA9IF9kZXJlcV8oJy4uL2EtcmVnaXN0ZXItZWxlbWVudCcpOwp2YXIgc2NlbmVzID0gX2RlcmVxXygnLi9zY2VuZXMnKTsKdmFyIHN5c3RlbXMgPSBfZGVyZXFfKCcuLi9zeXN0ZW0nKS5zeXN0ZW1zOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi8uLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJyk7Ci8vIFJlcXVpcmUgYWZ0ZXIuCnZhciBBRW50aXR5ID0gX2RlcmVxXygnLi4vYS1lbnRpdHknKTsKdmFyIEFOb2RlID0gX2RlcmVxXygnLi4vYS1ub2RlJyk7CnZhciBpbml0UG9zdE1lc3NhZ2VBUEkgPSBfZGVyZXFfKCcuL3Bvc3RNZXNzYWdlJyk7Cgp2YXIgYmluZCA9IHV0aWxzLmJpbmQ7CnZhciBpc0lPUyA9IHV0aWxzLmRldmljZS5pc0lPUygpOwp2YXIgaXNNb2JpbGUgPSB1dGlscy5kZXZpY2UuaXNNb2JpbGUoKTsKdmFyIGlzV2ViWFJBdmFpbGFibGUgPSB1dGlscy5kZXZpY2UuaXNXZWJYUkF2YWlsYWJsZTsKdmFyIHJlZ2lzdGVyRWxlbWVudCA9IHJlLnJlZ2lzdGVyRWxlbWVudDsKdmFyIHdhcm4gPSB1dGlscy5kZWJ1ZygnY29yZTphLXNjZW5lOndhcm4nKTsKCi8qKgogKiBTY2VuZSBlbGVtZW50LCBob2xkcyBhbGwgZW50aXRpZXMuCiAqCiAqIEBtZW1iZXIge2FycmF5fSBiZWhhdmlvcnMgLSBDb21wb25lbnQgaW5zdGFuY2VzIHRoYXQgaGF2ZSByZWdpc3RlcmVkIHRoZW1zZWx2ZXMgdG8gYmUKICAgICAgICAgICB1cGRhdGVkIG9uIGV2ZXJ5IHRpY2suCiAqIEBtZW1iZXIge29iamVjdH0gY2FtZXJhIC0gdGhyZWUuanMgQ2FtZXJhIG9iamVjdC4KICogQG1lbWJlciB7b2JqZWN0fSBjYW52YXMKICogQG1lbWJlciB7Ym9vbH0gaXNTY2VuZSAtIERpZmZlcmVudGlhdGVzIGFzIHNjZW5lIGVudGl0eSBhcyBvcHBvc2VkIHRvIG90aGVyIGVudGl0ZXMuCiAqIEBtZW1iZXIge2Jvb2x9IGlzTW9iaWxlIC0gV2hldGhlciBicm93c2VyIGlzIG1vYmlsZSAodmlhIFVBIGRldGVjdGlvbikuCiAqIEBtZW1iZXIge29iamVjdH0gb2JqZWN0M0QgLSBSb290IHRocmVlLmpzIFNjZW5lIG9iamVjdC4KICogQG1lbWJlciB7b2JqZWN0fSByZW5kZXJlcgogKiBAbWVtYmVyIHtib29sfSByZW5kZXJTdGFydGVkCiAqIEBtZW1iZXIge29iamVjdH0gc3lzdGVtcyAtIFJlZ2lzdGVyZWQgaW5zdGFudGlhdGVkIHN5c3RlbXMuCiAqIEBtZW1iZXIge251bWJlcn0gdGltZQogKi8KbW9kdWxlLmV4cG9ydHMuQVNjZW5lID0gcmVnaXN0ZXJFbGVtZW50KCdhLXNjZW5lJywgewogIHByb3RvdHlwZTogT2JqZWN0LmNyZWF0ZShBRW50aXR5LnByb3RvdHlwZSwgewogICAgY3JlYXRlZENhbGxiYWNrOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5jbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpOwogICAgICAgIHRoaXMuaXNJT1MgPSBpc0lPUzsKICAgICAgICB0aGlzLmlzTW9iaWxlID0gaXNNb2JpbGU7CiAgICAgICAgdGhpcy5oYXNXZWJYUiA9IGlzV2ViWFJBdmFpbGFibGU7CiAgICAgICAgdGhpcy5pc0FSID0gZmFsc2U7CiAgICAgICAgdGhpcy5pc1NjZW5lID0gdHJ1ZTsKICAgICAgICB0aGlzLm9iamVjdDNEID0gbmV3IFRIUkVFLlNjZW5lKCk7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHRoaXMub2JqZWN0M0Qub25BZnRlclJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSkgewogICAgICAgICAgLy8gVEhSRUUgbWF5IHN3YXAgdGhlIGNhbWVyYSB1c2VkIGZvciB0aGUgcmVuZGVyaW5nIGlmIGluIFZSLCBzbyB3ZSBwYXNzIGl0IHRvIHRvY2sKICAgICAgICAgIGlmIChzZWxmLmlzUGxheWluZykgeyBzZWxmLnRvY2soc2VsZi50aW1lLCBzZWxmLmRlbHRhLCBjYW1lcmEpOyB9CiAgICAgICAgfTsKICAgICAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpOwogICAgICAgIHRoaXMuc3lzdGVtcyA9IHt9OwogICAgICAgIHRoaXMuc3lzdGVtTmFtZXMgPSBbXTsKICAgICAgICB0aGlzLnRpbWUgPSB0aGlzLmRlbHRhID0gMDsKCiAgICAgICAgdGhpcy5iZWhhdmlvcnMgPSB7dGljazogW10sIHRvY2s6IFtdfTsKICAgICAgICB0aGlzLmhhc0xvYWRlZCA9IGZhbHNlOwogICAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5vcmlnaW5hbEhUTUwgPSB0aGlzLmlubmVySFRNTDsKCiAgICAgICAgLy8gRGVmYXVsdCBjb21wb25lbnRzLgogICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpbnNwZWN0b3InLCAnJyk7CiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2tleWJvYXJkLXNob3J0Y3V0cycsICcnKTsKICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2NyZWVuc2hvdCcsICcnKTsKICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndnItbW9kZS11aScsICcnKTsKICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGV2aWNlLW9yaWVudGF0aW9uLXBlcm1pc3Npb24tdWknLCAnJyk7CiAgICAgIH0KICAgIH0sCgogICAgYWRkRnVsbFNjcmVlblN0eWxlczogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhLWZ1bGxzY3JlZW4nKTsKICAgICAgfQogICAgfSwKCiAgICByZW1vdmVGdWxsU2NyZWVuU3R5bGVzOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2EtZnVsbHNjcmVlbicpOwogICAgICB9CiAgICB9LAoKICAgIGF0dGFjaGVkQ2FsbGJhY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIGVtYmVkZGVkID0gdGhpcy5oYXNBdHRyaWJ1dGUoJ2VtYmVkZGVkJyk7CiAgICAgICAgLy8gUmVuZGVyZXIgaW5pdGlhbGl6YXRpb24KICAgICAgICBzZXR1cENhbnZhcyh0aGlzKTsKICAgICAgICB0aGlzLnNldHVwUmVuZGVyZXIoKTsKCiAgICAgICAgdGhpcy5yZXNpemUoKTsKICAgICAgICBpZiAoIWVtYmVkZGVkKSB7IHRoaXMuYWRkRnVsbFNjcmVlblN0eWxlcygpOyB9CiAgICAgICAgaW5pdFBvc3RNZXNzYWdlQVBJKHRoaXMpOwoKICAgICAgICBpbml0TWV0YVRhZ3ModGhpcyk7CiAgICAgICAgaW5pdFdha2Vsb2NrKHRoaXMpOwoKICAgICAgICAvLyBIYW5kbGVyIHRvIGV4aXQgVlIgKGUuZy4sIE9jdWx1cyBCcm93c2VyIGJhY2sgYnV0dG9uKS4KICAgICAgICB0aGlzLm9uVlJQcmVzZW50Q2hhbmdlQm91bmQgPSBiaW5kKHRoaXMub25WUlByZXNlbnRDaGFuZ2UsIHRoaXMpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgdGhpcy5vblZSUHJlc2VudENoYW5nZUJvdW5kKTsKCiAgICAgICAgLy8gQmluZCBmdW5jdGlvbnMuCiAgICAgICAgdGhpcy5lbnRlclZSQm91bmQgPSBmdW5jdGlvbiAoKSB7IHNlbGYuZW50ZXJWUigpOyB9OwogICAgICAgIHRoaXMuZXhpdFZSQm91bmQgPSBmdW5jdGlvbiAoKSB7IHNlbGYuZXhpdFZSKCk7IH07CiAgICAgICAgdGhpcy5leGl0VlJUcnVlQm91bmQgPSBmdW5jdGlvbiAoKSB7IHNlbGYuZXhpdFZSKHRydWUpOyB9OwogICAgICAgIHRoaXMucG9pbnRlclJlc3RyaWN0ZWRCb3VuZCA9IGZ1bmN0aW9uICgpIHsgc2VsZi5wb2ludGVyUmVzdHJpY3RlZCgpOyB9OwogICAgICAgIHRoaXMucG9pbnRlclVucmVzdHJpY3RlZEJvdW5kID0gZnVuY3Rpb24gKCkgeyBzZWxmLnBvaW50ZXJVbnJlc3RyaWN0ZWQoKTsgfTsKCiAgICAgICAgaWYgKCFpc1dlYlhSQXZhaWxhYmxlKSB7CiAgICAgICAgICAvLyBFeGl0IFZSIG9uIGB2cmRpc3BsYXlkZWFjdGl2YXRlYCAoZS5nLiB0YWtpbmcgb2ZmIFJpZnQgaGVhZHNldCkuCiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5ZGVhY3RpdmF0ZScsIHRoaXMuZXhpdFZSQm91bmQpOwoKICAgICAgICAgIC8vIEV4aXQgVlIgb24gYHZyZGlzcGxheWRpc2Nvbm5lY3RgIChlLmcuIHVucGx1Z2dpbmcgUmlmdCBoZWFkc2V0KS4KICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlkaXNjb25uZWN0JywgdGhpcy5leGl0VlJUcnVlQm91bmQpOwoKICAgICAgICAgIC8vIFJlZ2lzdGVyIGZvciBtb3VzZSByZXN0cmljdGVkIGV2ZW50cyB3aGlsZSBpbiBWUgogICAgICAgICAgLy8gKGUuZy4gbW91c2Ugbm8gbG9uZ2VyIGF2YWlsYWJsZSBvbiBkZXNrdG9wIDJEIHZpZXcpCiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5cG9pbnRlcnJlc3RyaWN0ZWQnLCB0aGlzLnBvaW50ZXJSZXN0cmljdGVkQm91bmQpOwoKICAgICAgICAgIC8vIFJlZ2lzdGVyIGZvciBtb3VzZSB1bnJlc3RyaWN0ZWQgZXZlbnRzIHdoaWxlIGluIFZSCiAgICAgICAgICAvLyAoZS5nLiBtb3VzZSBvbmNlIGFnYWluIGF2YWlsYWJsZSBvbiBkZXNrdG9wIDJEIHZpZXcpCiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5cG9pbnRlcnVucmVzdHJpY3RlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJVbnJlc3RyaWN0ZWRCb3VuZCk7CiAgICAgICAgfQoKICAgICAgICAvLyBDYW1lcmEgc2V0IHVwIGJ5IGNhbWVyYSBzeXN0ZW0uCiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjYW1lcmFyZWFkeScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNlbGYuYXR0YWNoZWRDYWxsYmFja1Bvc3RDYW1lcmEoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5pbml0U3lzdGVtcygpOwogICAgICB9CiAgICB9LAoKICAgIGF0dGFjaGVkQ2FsbGJhY2tQb3N0Q2FtZXJhOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJlc2l6ZTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgIHJlc2l6ZSA9IGJpbmQodGhpcy5yZXNpemUsIHRoaXMpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzaXplKTsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYSBXZWJraXQgYnVnIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTcwNTk1KQogICAgICAgICAgLy8gd2hlcmUgdGhlIHdpbmRvdyBkb2VzIG5vdCBjb250YWluIHRoZSBjb3JyZWN0IHZpZXdwb3J0IHNpemUKICAgICAgICAgIC8vIGFmdGVyIGFuIG9yaWVudGF0aW9uIGNoYW5nZS4gVGhlIHdpbmRvdyBzaXplIGlzIGNvcnJlY3QgaWYgdGhlIG9wZXJhdGlvbgogICAgICAgICAgLy8gaXMgcG9zdHBvbmVkIGEgZmV3IG1pbGxpc2Vjb25kcy4KICAgICAgICAgIC8vIHNlbGYucmVzaXplIGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgb25jZSB0aGUgYnVnIGFib3ZlIGlzIGZpeGVkLgogICAgICAgICAgaWYgKHNlbGYuaXNJT1MpIHsKICAgICAgICAgICAgc2V0VGltZW91dChyZXNpemUsIDEwMCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNpemUoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLnBsYXkoKTsKCiAgICAgICAgLy8gQWRkIHRvIHNjZW5lIGluZGV4LgogICAgICAgIHNjZW5lcy5wdXNoKHRoaXMpOwogICAgICB9LAogICAgICB3cml0YWJsZTogd2luZG93LmRlYnVnCiAgICB9LAoKICAgIC8qKgogICAgICogSW5pdGlhbGl6ZSBhbGwgc3lzdGVtcy4KICAgICAqLwogICAgaW5pdFN5c3RlbXM6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgbmFtZTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBjYW1lcmEgc3lzdGVtIGZpcnN0LgogICAgICAgIHRoaXMuaW5pdFN5c3RlbSgnY2FtZXJhJyk7CgogICAgICAgIGZvciAobmFtZSBpbiBzeXN0ZW1zKSB7CiAgICAgICAgICBpZiAobmFtZSA9PT0gJ2NhbWVyYScpIHsgY29udGludWU7IH0KICAgICAgICAgIHRoaXMuaW5pdFN5c3RlbShuYW1lKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBJbml0aWFsaXplIGEgc3lzdGVtLgogICAgICovCiAgICBpbml0U3lzdGVtOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAobmFtZSkgewogICAgICAgIGlmICh0aGlzLnN5c3RlbXNbbmFtZV0pIHsgcmV0dXJuOyB9CiAgICAgICAgdGhpcy5zeXN0ZW1zW25hbWVdID0gbmV3IHN5c3RlbXNbbmFtZV0odGhpcyk7CiAgICAgICAgdGhpcy5zeXN0ZW1OYW1lcy5wdXNoKG5hbWUpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogU2h1dCBkb3duIHNjZW5lIG9uIGRldGFjaC4KICAgICAqLwogICAgZGV0YWNoZWRDYWxsYmFjazogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIC8vIFJlbW92ZSBmcm9tIHNjZW5lIGluZGV4LgogICAgICAgIHZhciBzY2VuZUluZGV4ID0gc2NlbmVzLmluZGV4T2YodGhpcyk7CiAgICAgICAgc2NlbmVzLnNwbGljZShzY2VuZUluZGV4LCAxKTsKCiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCB0aGlzLm9uVlJQcmVzZW50Q2hhbmdlQm91bmQpOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlhY3RpdmF0ZScsIHRoaXMuZW50ZXJWUkJvdW5kKTsKICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5ZGVhY3RpdmF0ZScsIHRoaXMuZXhpdFZSQm91bmQpOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXljb25uZWN0JywgdGhpcy5lbnRlclZSQm91bmQpOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlkaXNjb25uZWN0JywgdGhpcy5leGl0VlJUcnVlQm91bmQpOwogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwb2ludGVycmVzdHJpY3RlZCcsIHRoaXMucG9pbnRlclJlc3RyaWN0ZWRCb3VuZCk7CiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXBvaW50ZXJ1bnJlc3RyaWN0ZWQnLCB0aGlzLnBvaW50ZXJVbnJlc3RyaWN0ZWRCb3VuZCk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGQgdGlja3MgYW5kIHRvY2tzLgogICAgICoKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBiZWhhdmlvciAtIEEgY29tcG9uZW50LgogICAgICovCiAgICBhZGRCZWhhdmlvcjogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKGJlaGF2aW9yKSB7CiAgICAgICAgdmFyIGJlaGF2aW9yQXJyOwogICAgICAgIHZhciBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9yczsKICAgICAgICB2YXIgYmVoYXZpb3JUeXBlOwoKICAgICAgICAvLyBDaGVjayBpZiBiZWhhdmlvciBoYXMgdGljayBhbmQvb3IgdG9jayBhbmQgYWRkIHRoZSBiZWhhdmlvciB0byB0aGUgYXBwcm9wcmlhdGUgbGlzdC4KICAgICAgICBmb3IgKGJlaGF2aW9yVHlwZSBpbiBiZWhhdmlvcnMpIHsKICAgICAgICAgIGlmICghYmVoYXZpb3JbYmVoYXZpb3JUeXBlXSkgeyBjb250aW51ZTsgfQogICAgICAgICAgYmVoYXZpb3JBcnIgPSB0aGlzLmJlaGF2aW9yc1tiZWhhdmlvclR5cGVdOwogICAgICAgICAgaWYgKGJlaGF2aW9yQXJyLmluZGV4T2YoYmVoYXZpb3IpID09PSAtMSkgewogICAgICAgICAgICBiZWhhdmlvckFyci5wdXNoKGJlaGF2aW9yKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBGb3IgdGVzdHMuCiAgICAgKi8KICAgIGdldFBvaW50ZXJMb2NrRWxlbWVudDogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQ7CiAgICAgIH0sCiAgICAgIHdyaXRhYmxlOiB3aW5kb3cuZGVidWcKICAgIH0sCgogICAgLyoqCiAgICAgKiBGb3IgdGVzdHMuCiAgICAgKi8KICAgIGNoZWNrSGVhZHNldENvbm5lY3RlZDogewogICAgICB2YWx1ZTogdXRpbHMuZGV2aWNlLmNoZWNrSGVhZHNldENvbm5lY3RlZCwKICAgICAgd3JpdGFibGU6IHdpbmRvdy5kZWJ1ZwogICAgfSwKCiAgICBlbnRlckFSOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCF0aGlzLmhhc1dlYlhSKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBlbnRlciBBUiBtb2RlLCBXZWJYUiBub3Qgc3VwcG9ydGVkLicpOwogICAgICAgIH0KICAgICAgICB0aGlzLmVudGVyVlIodHJ1ZSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBDYWxsIGByZXF1ZXN0UHJlc2VudGAgaWYgV2ViVlIgb3IgV2ViVlIgcG9seWZpbGwuCiAgICAgKiBDYWxsIGByZXF1ZXN0RnVsbHNjcmVlbmAgb24gZGVza3RvcC4KICAgICAqIEhhbmRsZSBldmVudHMsIHN0YXRlcywgZnVsbHNjcmVlbiBzdHlsZXMuCiAgICAgKgogICAgICogQHBhcmFtIHtib29sP30gdXNlQVIgLSBpZiB0cnVlLCB0cnkgaW1tZXJzaXZlLWFyIG1vZGUKICAgICAqIEByZXR1cm5zIHtQcm9taXNlfQogICAgICovCiAgICBlbnRlclZSOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAodXNlQVIpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIHZyRGlzcGxheTsKICAgICAgICB2YXIgdnJNYW5hZ2VyID0gc2VsZi5yZW5kZXJlci54cjsKCiAgICAgICAgLy8gRG9uJ3QgZW50ZXIgVlIgaWYgYWxyZWFkeSBpbiBWUi4KICAgICAgICBpZiAodGhpcy5pcygndnItbW9kZScpKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoJ0FscmVhZHkgaW4gVlIuJyk7IH0KCiAgICAgICAgLy8gSGFzIFZSLgogICAgICAgIGlmICh0aGlzLmNoZWNrSGVhZHNldENvbm5lY3RlZCgpIHx8IHRoaXMuaXNNb2JpbGUpIHsKICAgICAgICAgIHZyTWFuYWdlci5lbmFibGVkID0gdHJ1ZTsKCiAgICAgICAgICBpZiAodGhpcy5oYXNXZWJYUikgewogICAgICAgICAgICAvLyBYUiBBUEkuCiAgICAgICAgICAgIGlmICh0aGlzLnhyU2Vzc2lvbikgewogICAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIHRoaXMuZXhpdFZSQm91bmQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG5hdmlnYXRvci54ci5yZXF1ZXN0U2Vzc2lvbih1c2VBUiA/ICdpbW1lcnNpdmUtYXInIDogJ2ltbWVyc2l2ZS12cicsIHsKICAgICAgICAgICAgICByZXF1aXJlZEZlYXR1cmVzOiBbJ2xvY2FsLWZsb29yJ10sCiAgICAgICAgICAgICAgb3B0aW9uYWxGZWF0dXJlczogWydib3VuZGVkLWZsb29yJ10KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiByZXF1ZXN0U3VjY2VzcyAoeHJTZXNzaW9uKSB7CiAgICAgICAgICAgICAgc2VsZi54clNlc3Npb24gPSB4clNlc3Npb247CiAgICAgICAgICAgICAgdnJNYW5hZ2VyLnNldFNlc3Npb24oeHJTZXNzaW9uKTsKICAgICAgICAgICAgICB4clNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgc2VsZi5leGl0VlJCb3VuZCk7CiAgICAgICAgICAgICAgaWYgKHVzZUFSKSB7CiAgICAgICAgICAgICAgICBzZWxmLmFkZFN0YXRlKCdhci1tb2RlJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVudGVyVlJTdWNjZXNzKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdnJEaXNwbGF5ID0gdXRpbHMuZGV2aWNlLmdldFZSRGlzcGxheSgpOwogICAgICAgICAgICB2ck1hbmFnZXIuc2V0RGV2aWNlKHZyRGlzcGxheSk7CiAgICAgICAgICAgIGlmICh2ckRpc3BsYXkuaXNQcmVzZW50aW5nICYmCiAgICAgICAgICAgICAgICAhd2luZG93Lmhhc05hdGl2ZVdlYlZSSW1wbGVtZW50YXRpb24pIHsKICAgICAgICAgICAgICBlbnRlclZSU3VjY2VzcygpOwogICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVuZGVyZXJTeXN0ZW0gPSB0aGlzLmdldEF0dHJpYnV0ZSgncmVuZGVyZXInKTsKICAgICAgICAgICAgdmFyIHByZXNlbnRhdGlvbkF0dHJpYnV0ZXMgPSB7CiAgICAgICAgICAgICAgaGlnaFJlZnJlc2hSYXRlOiByZW5kZXJlclN5c3RlbS5oaWdoUmVmcmVzaFJhdGUsCiAgICAgICAgICAgICAgZm92ZWF0aW9uTGV2ZWw6IHJlbmRlcmVyU3lzdGVtLmZvdmVhdGlvbkxldmVsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICByZXR1cm4gdnJEaXNwbGF5LnJlcXVlc3RQcmVzZW50KFt7CiAgICAgICAgICAgICAgc291cmNlOiB0aGlzLmNhbnZhcywKICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBwcmVzZW50YXRpb25BdHRyaWJ1dGVzCiAgICAgICAgICAgIH1dKS50aGVuKGVudGVyVlJTdWNjZXNzLCBlbnRlclZSRmFpbHVyZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBObyBWUi4KICAgICAgICBlbnRlclZSU3VjY2VzcygpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKCiAgICAgICAgLy8gQ2FsbGJhY2sgdGhhdCBoYXBwZW5zIG9uIGVudGVyIFZSIHN1Y2Nlc3Mgb3IgZW50ZXIgZnVsbHNjcmVlbiAoYW55IEFQSSkuCiAgICAgICAgZnVuY3Rpb24gZW50ZXJWUlN1Y2Nlc3MgKCkgewogICAgICAgICAgLy8gdnJkaXNwbGF5cHJlc2VudGNoYW5nZSBmaXJlcyBvbmx5IG9uY2Ugd2hlbiB0aGUgZmlyc3QgcmVxdWVzdFByZXNlbnQgaXMgY29tcGxldGVkOwogICAgICAgICAgLy8gdGhlIGZpcnN0IHJlcXVlc3RQcmVzZW50IGNvdWxkIGJlIGNhbGxlZCBmcm9tIG9uZGlzcGxheWFjdGl2YXRlIGFuZCB0aGVyZSBpcyBubyB3YXkKICAgICAgICAgIC8vIHRvIHNldHVwIGV2ZXJ5dGhpbmcgZnJvbSB0aGVyZS4gVGh1cywgd2UgbmVlZCB0byBlbXVsYXRlIGFub3RoZXIgdnJkaXNwbGF5cHJlc2VudGNoYW5nZQogICAgICAgICAgLy8gZm9yIHRoZSBhY3R1YWwgcmVxdWVzdFByZXNlbnQuIE5lZWQgdG8gbWFrZSBzdXJlIHRoZXJlIGFyZSBubyBpc3N1ZXMgd2l0aCBmaXJpbmcgdGhlCiAgICAgICAgICAvLyB2cmRpc3BsYXlwcmVzZW50Y2hhbmdlIG11bHRpcGxlIHRpbWVzLgogICAgICAgICAgdmFyIGV2ZW50OwogICAgICAgICAgaWYgKHdpbmRvdy5oYXNOYXRpdmVXZWJWUkltcGxlbWVudGF0aW9uICYmICF3aW5kb3cuaGFzTmF0aXZlV2ViWFJJbXBsZW1lbnRhdGlvbikgewogICAgICAgICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudCgndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsIHtkZXRhaWw6IHtkaXNwbGF5OiB1dGlscy5kZXZpY2UuZ2V0VlJEaXNwbGF5KCl9fSk7CiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgIH0KCiAgICAgICAgICBzZWxmLmFkZFN0YXRlKCd2ci1tb2RlJyk7CiAgICAgICAgICBzZWxmLmVtaXQoJ2VudGVyLXZyJywge3RhcmdldDogc2VsZn0pOwogICAgICAgICAgLy8gTG9jayB0byBsYW5kc2NhcGUgb3JpZW50YXRpb24gb24gbW9iaWxlLgogICAgICAgICAgaWYgKCFpc1dlYlhSQXZhaWxhYmxlICYmIHNlbGYuaXNNb2JpbGUgJiYgc2NyZWVuLm9yaWVudGF0aW9uICYmIHNjcmVlbi5vcmllbnRhdGlvbi5sb2NrKSB7CiAgICAgICAgICAgIHNjcmVlbi5vcmllbnRhdGlvbi5sb2NrKCdsYW5kc2NhcGUnKTsKICAgICAgICAgIH0KICAgICAgICAgIHNlbGYuYWRkRnVsbFNjcmVlblN0eWxlcygpOwoKICAgICAgICAgIC8vIE9uIG1vYmlsZSwgdGhlIHBvbHlmaWxsIGhhbmRsZXMgZnVsbHNjcmVlbi4KICAgICAgICAgIC8vIFRPRE86IDA3LzE2IENocm9taXVtIGJ1aWxkcyBicmVhayB3aGVuIGByZXF1ZXN0RnVsbHNjcmVlbmBpbmcgb24gYSBjYW52YXMKICAgICAgICAgIC8vIHRoYXQgd2UgYXJlIGFsc28gYHJlcXVlc3RQcmVzZW50YGluZy4gVW50aWwgdGhlbiwgZG9uJ3QgZnVsbHNjcmVlbiBpZiBoZWFkc2V0CiAgICAgICAgICAvLyBjb25uZWN0ZWQuCiAgICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUgJiYgIXNlbGYuY2hlY2tIZWFkc2V0Q29ubmVjdGVkKCkpIHsKICAgICAgICAgICAgcmVxdWVzdEZ1bGxzY3JlZW4oc2VsZi5jYW52YXMpOwogICAgICAgICAgfQoKICAgICAgICAgIHNlbGYucmVuZGVyZXIuc2V0QW5pbWF0aW9uTG9vcChzZWxmLnJlbmRlcik7CiAgICAgICAgICBzZWxmLnJlc2l6ZSgpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZW50ZXJWUkZhaWx1cmUgKGVycikgewogICAgICAgICAgaWYgKGVyciAmJiBlcnIubWVzc2FnZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBlbnRlciBWUiBtb2RlIChgcmVxdWVzdFByZXNlbnRgKTogJyArIGVyci5tZXNzYWdlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGVudGVyIFZSIG1vZGUgKGByZXF1ZXN0UHJlc2VudGApLicpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0sCiAgICAgLyoqCiAgICAgKiBDYWxsIGBleGl0UHJlc2VudGAgaWYgV2ViVlIgLyBXZWJYUiBvciBXZWJWUiBwb2x5ZmlsbC4KICAgICAqIEhhbmRsZSBldmVudHMsIHN0YXRlcywgZnVsbHNjcmVlbiBzdHlsZXMuCiAgICAgKgogICAgICogQHJldHVybnMge1Byb21pc2V9CiAgICAgKi8KICAgIGV4aXRWUjogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgdnJEaXNwbGF5OwogICAgICAgIHZhciB2ck1hbmFnZXIgPSB0aGlzLnJlbmRlcmVyLnhyOwoKICAgICAgICAvLyBEb24ndCBleGl0IFZSIGlmIG5vdCBpbiBWUi4KICAgICAgICBpZiAoIXRoaXMuaXMoJ3ZyLW1vZGUnKSkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdOb3QgaW4gVlIuJyk7IH0KCiAgICAgICAgLy8gSGFuZGxlIGV4aXRpbmcgVlIgaWYgbm90IHlldCBhbHJlYWR5IGFuZCBpbiBhIGhlYWRzZXQgb3IgcG9seWZpbGwuCiAgICAgICAgaWYgKHRoaXMuY2hlY2tIZWFkc2V0Q29ubmVjdGVkKCkgfHwgdGhpcy5pc01vYmlsZSkgewogICAgICAgICAgdnJNYW5hZ2VyLmVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIHZyRGlzcGxheSA9IHV0aWxzLmRldmljZS5nZXRWUkRpc3BsYXkoKTsKICAgICAgICAgIGlmICh0aGlzLmhhc1dlYlhSKSB7CiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIHRoaXMuZXhpdFZSQm91bmQpOwogICAgICAgICAgICAvLyBDYXB0dXJlIHByb21pc2UgdG8gYXZvaWQgZXJyb3JzLgogICAgICAgICAgICB0aGlzLnhyU2Vzc2lvbi5lbmQoKS50aGVuKGZ1bmN0aW9uICgpIHt9LCBmdW5jdGlvbiAoKSB7fSk7CiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uID0gdW5kZWZpbmVkOwogICAgICAgICAgICB2ck1hbmFnZXIuc2V0U2Vzc2lvbihudWxsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh2ckRpc3BsYXkuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZyRGlzcGxheS5leGl0UHJlc2VudCgpLnRoZW4oZXhpdFZSU3VjY2VzcywgZXhpdFZSRmFpbHVyZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZXhpdEZ1bGxzY3JlZW4oKTsKICAgICAgICB9CgogICAgICAgIC8vIEhhbmRsZSBleGl0aW5nIFZSIGluIGFsbCBvdGhlciBjYXNlcyAoMkQgZnVsbHNjcmVlbiwgZXh0ZXJuYWwgZXhpdCBWUiBldmVudCkuCiAgICAgICAgZXhpdFZSU3VjY2VzcygpOwoKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CgogICAgICAgIGZ1bmN0aW9uIGV4aXRWUlN1Y2Nlc3MgKCkgewogICAgICAgICAgc2VsZi5yZW1vdmVTdGF0ZSgndnItbW9kZScpOwogICAgICAgICAgc2VsZi5yZW1vdmVTdGF0ZSgnYXItbW9kZScpOwogICAgICAgICAgLy8gTG9jayB0byBsYW5kc2NhcGUgb3JpZW50YXRpb24gb24gbW9iaWxlLgogICAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUgJiYgc2NyZWVuLm9yaWVudGF0aW9uICYmIHNjcmVlbi5vcmllbnRhdGlvbi51bmxvY2spIHsKICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaygpOwogICAgICAgICAgfQogICAgICAgICAgLy8gRXhpdGluZyBWUiBpbiBlbWJlZGRlZCBtb2RlLCBubyBsb25nZXIgbmVlZCBmdWxsc2NyZWVuIHN0eWxlcy4KICAgICAgICAgIGlmIChzZWxmLmhhc0F0dHJpYnV0ZSgnZW1iZWRkZWQnKSkgeyBzZWxmLnJlbW92ZUZ1bGxTY3JlZW5TdHlsZXMoKTsgfQogICAgICAgICAgc2VsZi5yZXNpemUoKTsKICAgICAgICAgIGlmIChzZWxmLmlzSU9TKSB7IHV0aWxzLmZvcmNlQ2FudmFzUmVzaXplU2FmYXJpTW9iaWxlKHNlbGYuY2FudmFzKTsgfQogICAgICAgICAgc2VsZi5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsKICAgICAgICAgIHNlbGYuZW1pdCgnZXhpdC12cicsIHt0YXJnZXQ6IHNlbGZ9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGV4aXRWUkZhaWx1cmUgKGVycikgewogICAgICAgICAgaWYgKGVyciAmJiBlcnIubWVzc2FnZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBleGl0IFZSIG1vZGUgKGBleGl0UHJlc2VudGApOiAnICsgZXJyLm1lc3NhZ2UpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZXhpdCBWUiBtb2RlIChgZXhpdFByZXNlbnRgKS4nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9LAoKICAgIHBvaW50ZXJSZXN0cmljdGVkOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHRoaXMuY2FudmFzKSB7CiAgICAgICAgICB2YXIgcG9pbnRlckxvY2tFbGVtZW50ID0gdGhpcy5nZXRQb2ludGVyTG9ja0VsZW1lbnQoKTsKICAgICAgICAgIGlmIChwb2ludGVyTG9ja0VsZW1lbnQgJiYgcG9pbnRlckxvY2tFbGVtZW50ICE9PSB0aGlzLmNhbnZhcyAmJiBkb2N1bWVudC5leGl0UG9pbnRlckxvY2spIHsKICAgICAgICAgICAgLy8gUmVjcmVhdGUgcG9pbnRlciBsb2NrIG9uIHRoZSBjYW52YXMsIGlmIHRha2VuIG9uIGFub3RoZXIgZWxlbWVudC4KICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRoaXMuY2FudmFzLnJlcXVlc3RQb2ludGVyTG9jaykgewogICAgICAgICAgICB0aGlzLmNhbnZhcy5yZXF1ZXN0UG9pbnRlckxvY2soKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgcG9pbnRlclVucmVzdHJpY3RlZDogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBwb2ludGVyTG9ja0VsZW1lbnQgPSB0aGlzLmdldFBvaW50ZXJMb2NrRWxlbWVudCgpOwogICAgICAgIGlmIChwb2ludGVyTG9ja0VsZW1lbnQgJiYgcG9pbnRlckxvY2tFbGVtZW50ID09PSB0aGlzLmNhbnZhcyAmJiBkb2N1bWVudC5leGl0UG9pbnRlckxvY2spIHsKICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEhhbmRsZSBgdnJkaXNwbGF5cHJlc2VudGNoYW5nZWAgZXZlbnQgZm9yIGV4aXRpbmcgVlIgdGhyb3VnaCBvdGhlciBtZWFucyB0aGFuCiAgICAgKiBgPEVTQz5gIGtleS4gRm9yIGV4YW1wbGUsIEdlYXJWUiBiYWNrIGJ1dHRvbiBvbiBPY3VsdXMgQnJvd3Nlci4KICAgICAqLwogICAgb25WUlByZXNlbnRDaGFuZ2U6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAvLyBQb2x5ZmlsbCBwbGFjZXMgZGlzcGxheSBpbnNpZGUgdGhlIGRldGFpbCBwcm9wZXJ0eQogICAgICAgIHZhciBkaXNwbGF5ID0gZXZ0LmRpc3BsYXkgfHwgZXZ0LmRldGFpbC5kaXNwbGF5OwogICAgICAgIC8vIEVudGVyaW5nIFZSLgogICAgICAgIGlmIChkaXNwbGF5ICYmIGRpc3BsYXkuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICB0aGlzLmVudGVyVlIoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8gRXhpdGluZyBWUi4KICAgICAgICB0aGlzLmV4aXRWUigpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogV3JhcHMgRW50aXR5LmdldEF0dHJpYnV0ZSB0byB0YWtlIGludG8gYWNjb3VudCBmb3Igc3lzdGVtcy4KICAgICAqIElmIHN5c3RlbSBleGlzdHMsIHRoZW4gcmV0dXJuIHN5c3RlbSBkYXRhIHJhdGhlciB0aGFuIHBvc3NpYmxlIGNvbXBvbmVudCBkYXRhLgogICAgICovCiAgICBnZXRBdHRyaWJ1dGU6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyKSB7CiAgICAgICAgdmFyIHN5c3RlbSA9IHRoaXMuc3lzdGVtc1thdHRyXTsKICAgICAgICBpZiAoc3lzdGVtKSB7IHJldHVybiBzeXN0ZW0uZGF0YTsgfQogICAgICAgIHJldHVybiBBRW50aXR5LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBhdHRyKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIGBnZXRBdHRyaWJ1dGVgIHVzZWQgdG8gYmUgYGdldERPTUF0dHJpYnV0ZWAgYW5kIGBnZXRDb21wdXRlZEF0dHJpYnV0ZWAgdXNlZCB0byBiZQogICAgICogd2hhdCBgZ2V0QXR0cmlidXRlYCBpcyBub3cuIE5vdyBsZWdhY3kgY29kZS4KICAgICAqLwogICAgZ2V0Q29tcHV0ZWRBdHRyaWJ1dGU6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyKSB7CiAgICAgICAgd2FybignYGdldENvbXB1dGVkQXR0cmlidXRlYCBpcyBkZXByZWNhdGVkLiBVc2UgYGdldEF0dHJpYnV0ZWAgaW5zdGVhZC4nKTsKICAgICAgICB0aGlzLmdldEF0dHJpYnV0ZShhdHRyKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFdyYXBzIEVudGl0eS5nZXRET01BdHRyaWJ1dGUgdG8gdGFrZSBpbnRvIGFjY291bnQgZm9yIHN5c3RlbXMuCiAgICAgKiBJZiBzeXN0ZW0gZXhpc3RzLCB0aGVuIHJldHVybiBzeXN0ZW0gZGF0YSByYXRoZXIgdGhhbiBwb3NzaWJsZSBjb21wb25lbnQgZGF0YS4KICAgICAqLwogICAgZ2V0RE9NQXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAgIHZhciBzeXN0ZW0gPSB0aGlzLnN5c3RlbXNbYXR0cl07CiAgICAgICAgaWYgKHN5c3RlbSkgeyByZXR1cm4gc3lzdGVtLmRhdGE7IH0KICAgICAgICByZXR1cm4gQUVudGl0eS5wcm90b3R5cGUuZ2V0RE9NQXR0cmlidXRlLmNhbGwodGhpcywgYXR0cik7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBXcmFwIEVudGl0eS5zZXRBdHRyaWJ1dGUgdG8gdGFrZSBpbnRvIGFjY291bnQgZm9yIHN5c3RlbXMuCiAgICAgKiBJZiBzeXN0ZW0gZXhpc3RzLCB0aGVuIHNraXAgY29tcG9uZW50IGluaXRpYWxpemF0aW9uIGNoZWNrcyBhbmQgZG8gYSBub3JtYWwKICAgICAqIHNldEF0dHJpYnV0ZS4KICAgICAqLwogICAgc2V0QXR0cmlidXRlOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgdmFsdWUsIGNvbXBvbmVudFByb3BWYWx1ZSkgewogICAgICAgIHZhciBzeXN0ZW0gPSB0aGlzLnN5c3RlbXNbYXR0cl07CiAgICAgICAgaWYgKHN5c3RlbSkgewogICAgICAgICAgQU5vZGUucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIGF0dHIsIHZhbHVlKTsKICAgICAgICAgIHN5c3RlbS51cGRhdGVQcm9wZXJ0aWVzKHZhbHVlKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgQUVudGl0eS5wcm90b3R5cGUuc2V0QXR0cmlidXRlLmNhbGwodGhpcywgYXR0ciwgdmFsdWUsIGNvbXBvbmVudFByb3BWYWx1ZSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge29iamVjdH0gYmVoYXZpb3IgLSBBIGNvbXBvbmVudC4KICAgICAqLwogICAgcmVtb3ZlQmVoYXZpb3I6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uIChiZWhhdmlvcikgewogICAgICAgIHZhciBiZWhhdmlvckFycjsKICAgICAgICB2YXIgYmVoYXZpb3JUeXBlOwogICAgICAgIHZhciBiZWhhdmlvcnMgPSB0aGlzLmJlaGF2aW9yczsKICAgICAgICB2YXIgaW5kZXg7CgogICAgICAgIC8vIENoZWNrIGlmIGJlaGF2aW9yIGhhcyB0aWNrIGFuZC9vciB0b2NrIGFuZCByZW1vdmUgdGhlIGJlaGF2aW9yIGZyb20gdGhlIGFwcHJvcHJpYXRlCiAgICAgICAgLy8gYXJyYXkuCiAgICAgICAgZm9yIChiZWhhdmlvclR5cGUgaW4gYmVoYXZpb3JzKSB7CiAgICAgICAgICBpZiAoIWJlaGF2aW9yW2JlaGF2aW9yVHlwZV0pIHsgY29udGludWU7IH0KICAgICAgICAgIGJlaGF2aW9yQXJyID0gdGhpcy5iZWhhdmlvcnNbYmVoYXZpb3JUeXBlXTsKICAgICAgICAgIGluZGV4ID0gYmVoYXZpb3JBcnIuaW5kZXhPZihiZWhhdmlvcik7CiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7IGJlaGF2aW9yQXJyLnNwbGljZShpbmRleCwgMSk7IH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgcmVzaXplOiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhOwogICAgICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhczsKICAgICAgICB2YXIgZW1iZWRkZWQ7CiAgICAgICAgdmFyIGlzVlJQcmVzZW50aW5nOwogICAgICAgIHZhciBzaXplOwoKICAgICAgICB2YXIgaXNQcmVzZW50aW5nID0gdGhpcy5yZW5kZXJlci54ci5pc1ByZXNlbnRpbmcoKTsKICAgICAgICBpc1ZSUHJlc2VudGluZyA9IHRoaXMucmVuZGVyZXIueHIuZW5hYmxlZCAmJiBpc1ByZXNlbnRpbmc7CgogICAgICAgIC8vIERvIG5vdCB1cGRhdGUgcmVuZGVyZXIsIGlmIGEgY2FtZXJhIG9yIGEgY2FudmFzIGhhdmUgbm90IGJlZW4gaW5qZWN0ZWQuCiAgICAgICAgLy8gSW4gVlIgbW9kZSwgdGhyZWUgaGFuZGxlcyBjYW52YXMgcmVzaXplIGJhc2VkIG9uIHRoZSBkaW1lbnNpb25zIHJldHVybmVkIGJ5CiAgICAgICAgLy8gdGhlIGdldEV5ZVBhcmFtZXRlcnMgZnVuY3Rpb24gb2YgdGhlIFdlYlZSIEFQSS4gVGhlc2UgZGltZW5zaW9ucyBhcmUgaW5kZXBlbmRlbnQgb2YKICAgICAgICAvLyB0aGUgd2luZG93IHNpemUsIHRoZXJlZm9yZSBzaG91bGQgbm90IGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIHdpbmRvdydzIHdpZHRoIGFuZAogICAgICAgIC8vIGhlaWdodCwgLy8gZXhjZXB0IHdoZW4gaW4gZnVsbHNjcmVlbiBtb2RlLgogICAgICAgIGlmICghY2FtZXJhIHx8ICFjYW52YXMgfHwgKHRoaXMuaXMoJ3ZyLW1vZGUnKSAmJiAodGhpcy5pc01vYmlsZSB8fCBpc1ZSUHJlc2VudGluZykpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBVcGRhdGUgY2FtZXJhLgogICAgICAgIGVtYmVkZGVkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2VtYmVkZGVkJykgJiYgIXRoaXMuaXMoJ3ZyLW1vZGUnKTsKICAgICAgICBzaXplID0gZ2V0Q2FudmFzU2l6ZShjYW52YXMsIGVtYmVkZGVkLCB0aGlzLm1heENhbnZhc1NpemUsIHRoaXMuaXMoJ3ZyLW1vZGUnKSk7CiAgICAgICAgY2FtZXJhLmFzcGVjdCA9IHNpemUud2lkdGggLyBzaXplLmhlaWdodDsKICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwoKICAgICAgICAvLyBOb3RpZnkgcmVuZGVyZXIgb2Ygc2l6ZSBjaGFuZ2UuCiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBmYWxzZSk7CiAgICAgICAgdGhpcy5lbWl0KCdyZW5kZXJlcnJlc2l6ZScsIG51bGwsIGZhbHNlKTsKICAgICAgfSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0sCgogICAgc2V0dXBSZW5kZXJlcjogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgcmVuZGVyZXI7CiAgICAgICAgdmFyIHJlbmRlcmVyQXR0cjsKICAgICAgICB2YXIgcmVuZGVyZXJBdHRyU3RyaW5nOwogICAgICAgIHZhciByZW5kZXJlckNvbmZpZzsKCiAgICAgICAgcmVuZGVyZXJDb25maWcgPSB7CiAgICAgICAgICBhbHBoYTogdHJ1ZSwKICAgICAgICAgIGFudGlhbGlhczogIWlzTW9iaWxlLAogICAgICAgICAgY2FudmFzOiB0aGlzLmNhbnZhcywKICAgICAgICAgIGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGZhbHNlCiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5tYXhDYW52YXNTaXplID0ge2hlaWdodDogMTkyMCwgd2lkdGg6IDE5MjB9OwoKICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3JlbmRlcmVyJykpIHsKICAgICAgICAgIHJlbmRlcmVyQXR0clN0cmluZyA9IHRoaXMuZ2V0QXR0cmlidXRlKCdyZW5kZXJlcicpOwogICAgICAgICAgcmVuZGVyZXJBdHRyID0gdXRpbHMuc3R5bGVQYXJzZXIucGFyc2UocmVuZGVyZXJBdHRyU3RyaW5nKTsKCiAgICAgICAgICBpZiAocmVuZGVyZXJBdHRyLnByZWNpc2lvbikgewogICAgICAgICAgICByZW5kZXJlckNvbmZpZy5wcmVjaXNpb24gPSByZW5kZXJlckF0dHIucHJlY2lzaW9uICsgJ3AnOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChyZW5kZXJlckF0dHIuYW50aWFsaWFzICYmIHJlbmRlcmVyQXR0ci5hbnRpYWxpYXMgIT09ICdhdXRvJykgewogICAgICAgICAgICByZW5kZXJlckNvbmZpZy5hbnRpYWxpYXMgPSByZW5kZXJlckF0dHIuYW50aWFsaWFzID09PSAndHJ1ZSc7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlbmRlcmVyQXR0ci5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmIHJlbmRlcmVyQXR0ci5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICE9PSAnYXV0bycpIHsKICAgICAgICAgICAgcmVuZGVyZXJDb25maWcubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IHJlbmRlcmVyQXR0ci5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSAndHJ1ZSc7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJlbmRlcmVyQXR0ci5hbHBoYSkgewogICAgICAgICAgICByZW5kZXJlckNvbmZpZy5hbHBoYSA9IHJlbmRlcmVyQXR0ci5hbHBoYSA9PT0gJ3RydWUnOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMubWF4Q2FudmFzU2l6ZSA9IHsKICAgICAgICAgICAgd2lkdGg6IHJlbmRlcmVyQXR0ci5tYXhDYW52YXNXaWR0aAogICAgICAgICAgICAgID8gcGFyc2VJbnQocmVuZGVyZXJBdHRyLm1heENhbnZhc1dpZHRoKQogICAgICAgICAgICAgIDogdGhpcy5tYXhDYW52YXNTaXplLndpZHRoLAogICAgICAgICAgICBoZWlnaHQ6IHJlbmRlcmVyQXR0ci5tYXhDYW52YXNIZWlnaHQKICAgICAgICAgICAgICA/IHBhcnNlSW50KHJlbmRlcmVyQXR0ci5tYXhDYW52YXNIZWlnaHQpCiAgICAgICAgICAgICAgOiB0aGlzLm1heENhbnZhc1NpemUuaGVpZ2h0CiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIocmVuZGVyZXJDb25maWcpOwogICAgICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pOwogICAgICAgIHJlbmRlcmVyLnNvcnRPYmplY3RzID0gZmFsc2U7CiAgICAgICAgaWYgKHRoaXMuY2FtZXJhKSB7IHJlbmRlcmVyLnhyLnNldFBvc2VUYXJnZXQodGhpcy5jYW1lcmEuZWwub2JqZWN0M0QpOyB9CiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjYW1lcmEtc2V0LWFjdGl2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlbmRlcmVyLnhyLnNldFBvc2VUYXJnZXQoc2VsZi5jYW1lcmEuZWwub2JqZWN0M0QpOwogICAgICAgIH0pOwogICAgICAgIGxvYWRpbmdTY3JlZW4uc2V0dXAodGhpcywgZ2V0Q2FudmFzU2l6ZSk7CiAgICAgIH0sCiAgICAgIHdyaXRhYmxlOiB3aW5kb3cuZGVidWcKICAgIH0sCgogICAgLyoqCiAgICAgKiBIYW5kbGVyIGF0dGFjaGVkIHRvIGVsZW1lbnRzIHRvIGhlbHAgc2NlbmUga25vdyB3aGVuIHRvIGtpY2sgb2ZmLgogICAgICogU2NlbmUgd2FpdHMgZm9yIGFsbCBlbnRpdGllcyB0byBsb2FkLgogICAgICovCiAgICBwbGF5OiB7CiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHZhciBzY2VuZUVsID0gdGhpczsKCiAgICAgICAgaWYgKHRoaXMucmVuZGVyU3RhcnRlZCkgewogICAgICAgICAgQUVudGl0eS5wcm90b3R5cGUucGxheS5jYWxsKHRoaXMpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyOwogICAgICAgICAgdmFyIHZyRGlzcGxheTsKICAgICAgICAgIHZhciB2ck1hbmFnZXIgPSB0aGlzLnJlbmRlcmVyLnhyOwogICAgICAgICAgQUVudGl0eS5wcm90b3R5cGUucGxheS5jYWxsKHRoaXMpOyAgLy8gLnBsYXkoKSAqYmVmb3JlKiByZW5kZXIuCgogICAgICAgICAgaWYgKHNjZW5lRWwucmVuZGVyU3RhcnRlZCkgeyByZXR1cm47IH0KICAgICAgICAgIHNjZW5lRWwucmVzaXplKCk7CgogICAgICAgICAgLy8gS2ljayBvZmYgcmVuZGVyIGxvb3AuCiAgICAgICAgICBpZiAoc2NlbmVFbC5yZW5kZXJlcikgewogICAgICAgICAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlKSB7IHdpbmRvdy5wZXJmb3JtYW5jZS5tYXJrKCdyZW5kZXItc3RhcnRlZCcpOyB9CiAgICAgICAgICAgIGxvYWRpbmdTY3JlZW4ucmVtb3ZlKCk7CiAgICAgICAgICAgIHZyRGlzcGxheSA9IHV0aWxzLmRldmljZS5nZXRWUkRpc3BsYXkoKTsKICAgICAgICAgICAgaWYgKHZyRGlzcGxheSAmJiB2ckRpc3BsYXkuaXNQcmVzZW50aW5nKSB7CiAgICAgICAgICAgICAgdnJNYW5hZ2VyLnNldERldmljZSh2ckRpc3BsYXkpOwogICAgICAgICAgICAgIHZyTWFuYWdlci5lbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICBzY2VuZUVsLmVudGVyVlIoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZW5kZXJlci5zZXRBbmltYXRpb25Mb29wKHRoaXMucmVuZGVyKTsKICAgICAgICAgICAgc2NlbmVFbC5yZW5kZXJTdGFydGVkID0gdHJ1ZTsKICAgICAgICAgICAgc2NlbmVFbC5lbWl0KCdyZW5kZXJzdGFydCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyBzZXRUaW1lb3V0IHRvIHdhaXQgZm9yIGFsbCBub2RlcyB0byBhdHRhY2ggYW5kIHJ1biB0aGVpciBjYWxsYmFja3MuCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBBRW50aXR5LnByb3RvdHlwZS5sb2FkLmNhbGwoc2VsZik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBXcmFwIGB1cGRhdGVDb21wb25lbnRgIHRvIG5vdCBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgaWYgdGhlIGNvbXBvbmVudCBoYXMgYSBzeXN0ZW0KICAgICAqIChhZnJhbWV2ci9hZnJhbWUjMjM2NSkuCiAgICAgKi8KICAgIHVwZGF0ZUNvbXBvbmVudDogewogICAgICB2YWx1ZTogZnVuY3Rpb24gKGNvbXBvbmVudE5hbWUpIHsKICAgICAgICBpZiAoY29tcG9uZW50TmFtZSBpbiBzeXN0ZW1zKSB7IHJldHVybjsgfQogICAgICAgIEFFbnRpdHkucHJvdG90eXBlLnVwZGF0ZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQmVoYXZpb3ItdXBkYXRlciBtZWFudCB0byBiZSBjYWxsZWQgZnJvbSBzY2VuZSByZW5kZXIuCiAgICAgKiBBYnN0cmFjdGVkIHRvIGEgZGlmZmVyZW50IGZ1bmN0aW9uIHRvIGZhY2lsaXRhdGUgdW5pdCB0ZXN0aW5nIChgc2NlbmUudGljaygpYCkgd2l0aG91dAogICAgICogbmVlZGluZyB0byByZW5kZXIuCiAgICAgKi8KICAgIHRpY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0aW1lLCB0aW1lRGVsdGEpIHsKICAgICAgICB2YXIgaTsKICAgICAgICB2YXIgc3lzdGVtcyA9IHRoaXMuc3lzdGVtczsKCiAgICAgICAgLy8gQ29tcG9uZW50cy4KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5iZWhhdmlvcnMudGljay5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKCF0aGlzLmJlaGF2aW9ycy50aWNrW2ldLmVsLmlzUGxheWluZykgeyBjb250aW51ZTsgfQogICAgICAgICAgdGhpcy5iZWhhdmlvcnMudGlja1tpXS50aWNrKHRpbWUsIHRpbWVEZWx0YSk7CiAgICAgICAgfQoKICAgICAgICAvLyBTeXN0ZW1zLgogICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnN5c3RlbU5hbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAoIXN5c3RlbXNbdGhpcy5zeXN0ZW1OYW1lc1tpXV0udGljaykgeyBjb250aW51ZTsgfQogICAgICAgICAgc3lzdGVtc1t0aGlzLnN5c3RlbU5hbWVzW2ldXS50aWNrKHRpbWUsIHRpbWVEZWx0YSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQmVoYXZpb3ItdXBkYXRlciBtZWFudCB0byBiZSBjYWxsZWQgYWZ0ZXIgc2NlbmUgcmVuZGVyIGZvciBwb3N0IHByb2Nlc3NpbmcgcHVycG9zZXMuCiAgICAgKiBBYnN0cmFjdGVkIHRvIGEgZGlmZmVyZW50IGZ1bmN0aW9uIHRvIGZhY2lsaXRhdGUgdW5pdCB0ZXN0aW5nIChgc2NlbmUudG9jaygpYCkgd2l0aG91dAogICAgICogbmVlZGluZyB0byByZW5kZXIuCiAgICAgKi8KICAgIHRvY2s6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0aW1lLCB0aW1lRGVsdGEsIGNhbWVyYSkgewogICAgICAgIHZhciBpOwogICAgICAgIHZhciBzeXN0ZW1zID0gdGhpcy5zeXN0ZW1zOwoKICAgICAgICAvLyBDb21wb25lbnRzLgogICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmJlaGF2aW9ycy50b2NrLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAoIXRoaXMuYmVoYXZpb3JzLnRvY2tbaV0uZWwuaXNQbGF5aW5nKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICB0aGlzLmJlaGF2aW9ycy50b2NrW2ldLnRvY2sodGltZSwgdGltZURlbHRhLCBjYW1lcmEpOwogICAgICAgIH0KCiAgICAgICAgLy8gU3lzdGVtcy4KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zeXN0ZW1OYW1lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKCFzeXN0ZW1zW3RoaXMuc3lzdGVtTmFtZXNbaV1dLnRvY2spIHsgY29udGludWU7IH0KICAgICAgICAgIHN5c3RlbXNbdGhpcy5zeXN0ZW1OYW1lc1tpXV0udG9jayh0aW1lLCB0aW1lRGVsdGEsIGNhbWVyYSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogVGhlIHJlbmRlciBsb29wLgogICAgICoKICAgICAqIFVwZGF0ZXMgYW5pbWF0aW9ucy4KICAgICAqIFVwZGF0ZXMgYmVoYXZpb3JzLgogICAgICogUmVuZGVycyB3aXRoIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lLgogICAgICovCiAgICByZW5kZXI6IHsKICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0aW1lLCBmcmFtZSkgewogICAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7CgogICAgICAgIHRoaXMuZnJhbWUgPSBmcmFtZTsKICAgICAgICB0aGlzLmRlbHRhID0gdGhpcy5jbG9jay5nZXREZWx0YSgpICogMTAwMDsKICAgICAgICB0aGlzLnRpbWUgPSB0aGlzLmNsb2NrLmVsYXBzZWRUaW1lICogMTAwMDsKCiAgICAgICAgaWYgKHRoaXMuaXNQbGF5aW5nKSB7IHRoaXMudGljayh0aGlzLnRpbWUsIHRoaXMuZGVsdGEpOyB9CiAgICAgICAgdmFyIHNhdmVkQmFja2dyb3VuZCA9IG51bGw7CiAgICAgICAgaWYgKHRoaXMuaXMoJ2FyLW1vZGUnKSkgewogICAgICAgICAgLy8gSW4gQVIgbW9kZSwgZG9uJ3QgcmVuZGVyIHRoZSBkZWZhdWx0IGJhY2tncm91bmQuIEhpZGUgaXQsIHRoZW4KICAgICAgICAgIC8vIHJlc3RvcmUgaXQgYWdhaW4gYWZ0ZXIgcmVuZGVyaW5nLgogICAgICAgICAgc2F2ZWRCYWNrZ3JvdW5kID0gdGhpcy5vYmplY3QzRC5iYWNrZ3JvdW5kOwogICAgICAgICAgdGhpcy5vYmplY3QzRC5iYWNrZ3JvdW5kID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmVuZGVyZXIucmVuZGVyKHRoaXMub2JqZWN0M0QsIHRoaXMuY2FtZXJhKTsKICAgICAgICBpZiAoc2F2ZWRCYWNrZ3JvdW5kKSB7CiAgICAgICAgICB0aGlzLm9iamVjdDNELmJhY2tncm91bmQgPSBzYXZlZEJhY2tncm91bmQ7CiAgICAgICAgfQogICAgICB9LAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfQogIH0pCn0pOwoKLyoqCiAqIFJldHVybiB0aGUgY2FudmFzIHNpemUgd2hlcmUgdGhlIHNjZW5lIHdpbGwgYmUgcmVuZGVyZWQuCiAqIFdpbGwgYmUgYWx3YXlzIHRoZSB3aW5kb3cgc2l6ZSBleGNlcHQgd2hlbiB0aGUgc2NlbmUgaXMgZW1iZWRkZWQuCiAqIFRoZSBwYXJlbnQgc2l6ZSAobGVzcyB0aGFuIG1heCBzaXplKSB3aWxsIGJlIHJldHVybmVkIGluIHRoYXQgY2FzZS4KICoKICogQHBhcmFtIHtvYmplY3R9IGNhbnZhc0VsIC0gdGhlIGNhbnZhcyBlbGVtZW50CiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW1iZWRkZWQgLSBJcyB0aGUgc2NlbmUgZW1iZWRkZWQ/CiAqIEBwYXJhbSB7b2JqZWN0fSBtYXggLSBNYXggc2l6ZSBwYXJhbWV0ZXJzCiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWUiAtIElmIGluIFZSCiAqLwpmdW5jdGlvbiBnZXRDYW52YXNTaXplIChjYW52YXNFbCwgZW1iZWRkZWQsIG1heFNpemUsIGlzVlIpIHsKICBpZiAoZW1iZWRkZWQpIHsKICAgIHJldHVybiB7CiAgICAgIGhlaWdodDogY2FudmFzRWwucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQsCiAgICAgIHdpZHRoOiBjYW52YXNFbC5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoCiAgICB9OwogIH0KICByZXR1cm4gZ2V0TWF4U2l6ZShtYXhTaXplLCBpc1ZSKTsKfQoKLyoqCiAqIFJldHVybiB0aGUgY2FudmFzIHNpemUuIFdpbGwgYmUgdGhlIHdpbmRvdyBzaXplIHVubGVzcyB0aGF0IHNpemUgaXMgZ3JlYXRlciB0aGFuIHRoZQogKiBtYXhpbXVtIHNpemUgKDE5MjB4MTkyMCBieSBkZWZhdWx0KS4gIFRoZSBjb25zdHJhaW5lZCBzaXplIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhhdCBjYXNlLAogKiBtYWludGFpbmluZyBhc3BlY3QgcmF0aW8KICoKICogQHBhcmFtIHtvYmplY3R9IG1heFNpemUgLSBNYXggc2l6ZSBwYXJhbWV0ZXJzICh3aWR0aCBhbmQgaGVpZ2h0KS4KICogQHBhcmFtIHtib29sZWFufSBpc1ZSIC0gSWYgaW4gVlIuCiAqIEByZXR1cm5zIHtvYmplY3R9IFdpZHRoIGFuZCBoZWlnaHQuCiAqLwpmdW5jdGlvbiBnZXRNYXhTaXplIChtYXhTaXplLCBpc1ZSKSB7CiAgdmFyIGFzcGVjdFJhdGlvOwogIHZhciBzaXplOwogIHZhciBwaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87CgogIHNpemUgPSB7aGVpZ2h0OiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCwgd2lkdGg6IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGh9OwogIGlmICghbWF4U2l6ZSB8fCBpc1ZSIHx8IChtYXhTaXplLndpZHRoID09PSAtMSAmJiBtYXhTaXplLmhlaWdodCA9PT0gLTEpKSB7CiAgICByZXR1cm4gc2l6ZTsKICB9CgogIGlmIChzaXplLndpZHRoICogcGl4ZWxSYXRpbyA8IG1heFNpemUud2lkdGggJiYKICAgIHNpemUuaGVpZ2h0ICogcGl4ZWxSYXRpbyA8IG1heFNpemUuaGVpZ2h0KSB7CiAgICByZXR1cm4gc2l6ZTsKICB9CgogIGFzcGVjdFJhdGlvID0gc2l6ZS53aWR0aCAvIHNpemUuaGVpZ2h0OwoKICBpZiAoKHNpemUud2lkdGggKiBwaXhlbFJhdGlvKSA+IG1heFNpemUud2lkdGggJiYgbWF4U2l6ZS53aWR0aCAhPT0gLTEpIHsKICAgIHNpemUud2lkdGggPSBNYXRoLnJvdW5kKG1heFNpemUud2lkdGggLyBwaXhlbFJhdGlvKTsKICAgIHNpemUuaGVpZ2h0ID0gTWF0aC5yb3VuZChtYXhTaXplLndpZHRoIC8gYXNwZWN0UmF0aW8gLyBwaXhlbFJhdGlvKTsKICB9CgogIGlmICgoc2l6ZS5oZWlnaHQgKiBwaXhlbFJhdGlvKSA+IG1heFNpemUuaGVpZ2h0ICYmIG1heFNpemUuaGVpZ2h0ICE9PSAtMSkgewogICAgc2l6ZS5oZWlnaHQgPSBNYXRoLnJvdW5kKG1heFNpemUuaGVpZ2h0IC8gcGl4ZWxSYXRpbyk7CiAgICBzaXplLndpZHRoID0gTWF0aC5yb3VuZChtYXhTaXplLmhlaWdodCAqIGFzcGVjdFJhdGlvIC8gcGl4ZWxSYXRpbyk7CiAgfQoKICByZXR1cm4gc2l6ZTsKfQoKZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4gKGNhbnZhcykgewogIHZhciByZXF1ZXN0RnVsbHNjcmVlbiA9CiAgICBjYW52YXMucmVxdWVzdEZ1bGxzY3JlZW4gfHwKICAgIGNhbnZhcy53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiB8fAogICAgY2FudmFzLm1velJlcXVlc3RGdWxsU2NyZWVuIHx8ICAvLyBUaGUgY2FwaXRhbGl6ZWQgYFNgIGlzIG5vdCBhIHR5cG8uCiAgICBjYW52YXMubXNSZXF1ZXN0RnVsbHNjcmVlbjsKICAvLyBIaWRlIG5hdmlnYXRpb24gYnV0dG9ucyBvbiBBbmRyb2lkLgogIHJlcXVlc3RGdWxsc2NyZWVuLmFwcGx5KGNhbnZhcywgW3tuYXZpZ2F0aW9uVUk6ICdoaWRlJ31dKTsKfQoKZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4gKCkgewogIHZhciBmdWxsc2NyZWVuRWwgPQogICAgZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHwKICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8CiAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudDsKICBpZiAoIWZ1bGxzY3JlZW5FbCkgeyByZXR1cm47IH0KICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHsKICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7CiAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7CiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7CiAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikgewogICAgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTsKICB9Cn0KCmZ1bmN0aW9uIHNldHVwQ2FudmFzIChzY2VuZUVsKSB7CiAgdmFyIGNhbnZhc0VsOwoKICBjYW52YXNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogIGNhbnZhc0VsLmNsYXNzTGlzdC5hZGQoJ2EtY2FudmFzJyk7CiAgLy8gTWFyayBjYW52YXMgYXMgcHJvdmlkZWQvaW5qZWN0ZWQgYnkgQS1GcmFtZS4KICBjYW52YXNFbC5kYXRhc2V0LmFmcmFtZUNhbnZhcyA9IHRydWU7CiAgc2NlbmVFbC5hcHBlbmRDaGlsZChjYW52YXNFbCk7CgogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBvbkZ1bGxTY3JlZW5DaGFuZ2UpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBvbkZ1bGxTY3JlZW5DaGFuZ2UpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBvbkZ1bGxTY3JlZW5DaGFuZ2UpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ01TRnVsbHNjcmVlbkNoYW5nZScsIG9uRnVsbFNjcmVlbkNoYW5nZSk7CgogIC8vIFByZXZlbnQgb3ZlcnNjcm9sbCBvbiBtb2JpbGUuCiAgY2FudmFzRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pOwoKICAvLyBTZXQgY2FudmFzIG9uIHNjZW5lLgogIHNjZW5lRWwuY2FudmFzID0gY2FudmFzRWw7CiAgc2NlbmVFbC5lbWl0KCdyZW5kZXItdGFyZ2V0LWxvYWRlZCcsIHt0YXJnZXQ6IGNhbnZhc0VsfSk7CiAgLy8gRm9yIHVua25vd24gcmVhc29ucyBhIHN5bmNocm9ub3VzIHJlc2l6ZSBkb2VzIG5vdCB3b3JrIG9uIGRlc2t0b3Agd2hlbgogIC8vIGVudGVyaW5nL2V4aXRpbmcgZnVsbHNjcmVlbi4KICBzZXRUaW1lb3V0KGJpbmQoc2NlbmVFbC5yZXNpemUsIHNjZW5lRWwpLCAwKTsKCiAgZnVuY3Rpb24gb25GdWxsU2NyZWVuQ2hhbmdlICgpIHsKICAgIHZhciBmdWxsc2NyZWVuRWwgPQogICAgICBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fAogICAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fAogICAgICBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDsKICAgIC8vIE5vIGZ1bGxzY3JlbiBlbGVtZW50ID09PSBleGl0IGZ1bGxzY3JlZW4KICAgIGlmICghZnVsbHNjcmVlbkVsKSB7IHNjZW5lRWwuZXhpdFZSKCk7IH0KICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpOwogICAgZG9jdW1lbnQuYm9keS5mb2N1cygpOwogIH0KfQptb2R1bGUuZXhwb3J0cy5zZXR1cENhbnZhcyA9IHNldHVwQ2FudmFzOyAgLy8gRm9yIHRlc3RpbmcuCgp9LHsiLi4vLi4vbGliL3RocmVlIjoxNTcsIi4uLy4uL3V0aWxzLyI6MTgyLCIuLi9hLWVudGl0eSI6MTA1LCIuLi9hLW5vZGUiOjEwNywiLi4vYS1yZWdpc3Rlci1lbGVtZW50IjoxMDgsIi4uL3N5c3RlbSI6MTIwLCIuL2xvYWRpbmdTY3JlZW4iOjExMywiLi9tZXRhVGFncyI6MTE0LCIuL3Bvc3RNZXNzYWdlIjoxMTUsIi4vc2NlbmVzIjoxMTYsIi4vd2FrZWxvY2siOjExN31dLDExMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBUSFJFRSAqLwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi8uLi91dGlscy8nKTsKdmFyIHN0eWxlUGFyc2VyID0gdXRpbHMuc3R5bGVQYXJzZXI7Cgp2YXIgc2NlbmVFbDsKdmFyIHRpdGxlRWw7CnZhciBnZXRTY2VuZUNhbnZhc1NpemU7Cgp2YXIgQVRUUl9OQU1FID0gJ2xvYWRpbmctc2NyZWVuJzsKdmFyIExPQURFUl9USVRMRV9DTEFTUyA9ICdhLWxvYWRlci10aXRsZSc7Cgptb2R1bGUuZXhwb3J0cy5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwIChlbCwgZ2V0Q2FudmFzU2l6ZSkgewogIHNjZW5lRWwgPSBlbDsKICBnZXRTY2VuZUNhbnZhc1NpemUgPSBnZXRDYW52YXNTaXplOwogIHZhciBsb2FkZXJBdHRyaWJ1dGUgPSBzY2VuZUVsLmhhc0F0dHJpYnV0ZShBVFRSX05BTUUpID8gc3R5bGVQYXJzZXIucGFyc2Uoc2NlbmVFbC5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSkgOiB1bmRlZmluZWQ7CiAgdmFyIGRvdHNDb2xvciA9IGxvYWRlckF0dHJpYnV0ZSAmJiBsb2FkZXJBdHRyaWJ1dGUuZG90c0NvbG9yIHx8ICd3aGl0ZSc7CiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGxvYWRlckF0dHJpYnV0ZSAmJiBsb2FkZXJBdHRyaWJ1dGUuYmFja2dyb3VuZENvbG9yIHx8ICcjMjRDQUZGJzsKICB2YXIgbG9hZGVyRW5hYmxlZCA9IGxvYWRlckF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkIHx8IGxvYWRlckF0dHJpYnV0ZS5lbmFibGVkID09PSAndHJ1ZScgfHwgbG9hZGVyQXR0cmlidXRlLmVuYWJsZWQgPT09IHVuZGVmaW5lZDsgLy8gdHJ1ZSBkZWZhdWx0CiAgdmFyIGxvYWRlclNjZW5lOwogIHZhciBzcGhlcmVHZW9tZXRyeTsKICB2YXIgc3BoZXJlTWF0ZXJpYWw7CiAgdmFyIHNwaGVyZU1lc2gxOwogIHZhciBzcGhlcmVNZXNoMjsKICB2YXIgc3BoZXJlTWVzaDM7CiAgdmFyIGNhbWVyYTsKICB2YXIgY2xvY2s7CiAgdmFyIHRpbWU7CiAgdmFyIHJlbmRlcjsKCiAgaWYgKCFsb2FkZXJFbmFibGVkKSB7IHJldHVybjsgfQoKICAvLyBTZXR1cCBTY2VuZS4KICBsb2FkZXJTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpOwogIHNwaGVyZUdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuMjAsIDM2LCAxOCwgMCwgMiAqIE1hdGguUEksIDAsIE1hdGguUEkpOwogIHNwaGVyZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjogZG90c0NvbG9yfSk7CiAgc3BoZXJlTWVzaDEgPSBuZXcgVEhSRUUuTWVzaChzcGhlcmVHZW9tZXRyeSwgc3BoZXJlTWF0ZXJpYWwpOwogIHNwaGVyZU1lc2gyID0gc3BoZXJlTWVzaDEuY2xvbmUoKTsKICBzcGhlcmVNZXNoMyA9IHNwaGVyZU1lc2gxLmNsb25lKCk7CiAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDgwLCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4wMDA1LCAxMDAwMCk7CiAgY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTsKICB0aW1lID0gMDsKICByZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICBzY2VuZUVsLnJlbmRlcmVyLnJlbmRlcihsb2FkZXJTY2VuZSwgY2FtZXJhKTsKICAgIHRpbWUgPSBjbG9jay5nZXRFbGFwc2VkVGltZSgpICUgNDsKICAgIHNwaGVyZU1lc2gxLnZpc2libGUgPSB0aW1lID49IDE7CiAgICBzcGhlcmVNZXNoMi52aXNpYmxlID0gdGltZSA+PSAyOwogICAgc3BoZXJlTWVzaDMudmlzaWJsZSA9IHRpbWUgPj0gMzsKICB9OwoKICBsb2FkZXJTY2VuZS5iYWNrZ3JvdW5kID0gbmV3IFRIUkVFLkNvbG9yKGJhY2tncm91bmRDb2xvcik7CiAgbG9hZGVyU2NlbmUuYWRkKGNhbWVyYSk7CiAgc3BoZXJlTWVzaDEucG9zaXRpb24uc2V0KC0xLCAwLCAtMTUpOwogIHNwaGVyZU1lc2gyLnBvc2l0aW9uLnNldCgwLCAwLCAtMTUpOwogIHNwaGVyZU1lc2gzLnBvc2l0aW9uLnNldCgxLCAwLCAtMTUpOwogIGNhbWVyYS5hZGQoc3BoZXJlTWVzaDEpOwogIGNhbWVyYS5hZGQoc3BoZXJlTWVzaDIpOwogIGNhbWVyYS5hZGQoc3BoZXJlTWVzaDMpOwogIHNldHVwVGl0bGUoKTsKCiAgLy8gRGVsYXkgMjAwbXMgdG8gYXZvaWQgbG9hZGVyIGZsYXNoZXMuCiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICBpZiAoc2NlbmVFbC5oYXNMb2FkZWQpIHsgcmV0dXJuOyB9CiAgICByZXNpemUoY2FtZXJhKTsKICAgIHRpdGxlRWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXNpemUoY2FtZXJhKTsgfSk7CiAgICBzY2VuZUVsLnJlbmRlcmVyLnNldEFuaW1hdGlvbkxvb3AocmVuZGVyKTsKICB9LCAyMDApOwp9OwoKbW9kdWxlLmV4cG9ydHMucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlICgpIHsKICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplKTsKICBpZiAoIXRpdGxlRWwpIHsgcmV0dXJuOyB9CiAgLy8gSGlkZSB0aXRsZS4KICB0aXRsZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7Cn07CgpmdW5jdGlvbiByZXNpemUgKGNhbWVyYSkgewogIHZhciBlbWJlZGRlZCA9IHNjZW5lRWwuaGFzQXR0cmlidXRlKCdlbWJlZGRlZCcpOwogIHZhciBzaXplID0gZ2V0U2NlbmVDYW52YXNTaXplKHNjZW5lRWwuY2FudmFzLCBlbWJlZGRlZCwgc2NlbmVFbC5tYXhDYW52YXNTaXplLCBzY2VuZUVsLmlzKCd2ci1tb2RlJykpOwogIGNhbWVyYS5hc3BlY3QgPSBzaXplLndpZHRoIC8gc2l6ZS5oZWlnaHQ7CiAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsKICAgLy8gTm90aWZ5IHJlbmRlcmVyIG9mIHNpemUgY2hhbmdlLgogIHNjZW5lRWwucmVuZGVyZXIuc2V0U2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodCwgZmFsc2UpOwp9CgpmdW5jdGlvbiBzZXR1cFRpdGxlICgpIHsKICB0aXRsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgdGl0bGVFbC5jbGFzc05hbWUgPSBMT0FERVJfVElUTEVfQ0xBU1M7CiAgdGl0bGVFbC5pbm5lckhUTUwgPSBkb2N1bWVudC50aXRsZTsKICB0aXRsZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgc2NlbmVFbC5hcHBlbmRDaGlsZCh0aXRsZUVsKTsKfQoKfSx7Ii4uLy4uL3V0aWxzLyI6MTgyfV0sMTE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uLy4uL2NvbnN0YW50cy8nKTsKdmFyIGV4dGVuZCA9IF9kZXJlcV8oJy4uLy4uL3V0aWxzJykuZXh0ZW5kOwoKdmFyIE1PQklMRV9IRUFEX1RBR1MgPSBtb2R1bGUuZXhwb3J0cy5NT0JJTEVfSEVBRF9UQUdTID0gWwogIE1ldGEoe25hbWU6ICd2aWV3cG9ydCcsIGNvbnRlbnQ6ICd3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLG1heGltdW0tc2NhbGU9MSxzaHJpbmstdG8tZml0PW5vLHVzZXItc2NhbGFibGU9bm8sbWluaW1hbC11aSx2aWV3cG9ydC1maXQ9Y292ZXInfSksCgogIC8vIFczQy1zdGFuZGFyZGlzZWQgbWV0YSB0YWdzLgogIE1ldGEoe25hbWU6ICdtb2JpbGUtd2ViLWFwcC1jYXBhYmxlJywgY29udGVudDogJ3llcyd9KSwKICBNZXRhKHtuYW1lOiAndGhlbWUtY29sb3InLCBjb250ZW50OiAnYmxhY2snfSkKXTsKCnZhciBNT0JJTEVfSU9TX0hFQURfVEFHUyA9IFsKICAvLyBpT1Mtc3BlY2lmaWMgbWV0YSB0YWdzIGZvciBmdWxsc2NyZWVuIHdoZW4gcGlubmluZyB0byBob21lc2NyZWVuLgogIE1ldGEoe25hbWU6ICdhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlJywgY29udGVudDogJ3llcyd9KSwKICBNZXRhKHtuYW1lOiAnYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZScsIGNvbnRlbnQ6ICdibGFjayd9KSwKICBMaW5rKHtyZWw6ICdhcHBsZS10b3VjaC1pY29uJywgaHJlZjogJ2h0dHBzOi8vYWZyYW1lLmlvL2ltYWdlcy9hZnJhbWUtbG9nby0xNTIucG5nJ30pCl07CgpmdW5jdGlvbiBNZXRhIChhdHRycykgewogIHJldHVybiB7CiAgICB0YWdOYW1lOiAnbWV0YScsCiAgICBhdHRyaWJ1dGVzOiBhdHRycywKICAgIGV4aXN0czogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPSInICsgYXR0cnMubmFtZSArICciXScpOyB9CiAgfTsKfQoKZnVuY3Rpb24gTGluayAoYXR0cnMpIHsKICByZXR1cm4gewogICAgdGFnTmFtZTogJ2xpbmsnLAogICAgYXR0cmlidXRlczogYXR0cnMsCiAgICBleGlzdHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xpbmtbcmVsPSInICsgYXR0cnMucmVsICsgJyJdJyk7IH0KICB9Owp9CgovKioKICogSW5qZWN0cyB0aGUgbmVjZXNzYXJ5IG1ldGF0YWdzIGluIHRoZSBkb2N1bWVudCBmb3IgbW9iaWxlIHN1cHBvcnQ6CiAqIDEuIFByZXZlbnQgdGhlIHVzZXIgdG8gem9vbSBpbiB0aGUgZG9jdW1lbnQuCiAqIDIuIEVuc3VyZSB0aGF0IHdpbmRvdy5pbm5lcldpZHRoIGFuZCB3aW5kb3cuaW5uZXJIZWlnaHQgaGF2ZSB0aGUgY29ycmVjdAogKiAgICB2YWx1ZXMgYW5kIHRoZSBjYW52YXMgaXMgcHJvcGVybHkgc2NhbGVkLgogKiAzLiBUbyBhbGxvdyBmdWxsc2NyZWVuIG1vZGUgd2hlbiBwaW5uaW5nIGEgd2ViIGFwcCBvbiB0aGUgaG9tZSBzY3JlZW4gb24KICogICAgaU9TLgogKiBBZGFwdGVkIGZyb20gaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3dlYl9kZXNpZ24vY29tbWVudHMvM2xhMDRwLwogKgogKiBAcGFyYW0ge29iamVjdH0gc2NlbmUgLSBTY2VuZSBlbGVtZW50CiAqIEByZXR1cm5zIHtBcnJheX0KICovCm1vZHVsZS5leHBvcnRzLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdEhlYWRUYWdzIChzY2VuZSkgewogIHZhciBoZWFkRWwgPSBkb2N1bWVudC5oZWFkOwogIHZhciBoZWFkU2NyaXB0RWwgPSBoZWFkRWwucXVlcnlTZWxlY3Rvcignc2NyaXB0Jyk7CiAgdmFyIHRhZzsKICB2YXIgaGVhZFRhZ3MgPSBbXTsKICBNT0JJTEVfSEVBRF9UQUdTLmZvckVhY2goY3JlYXRlQW5kSW5qZWN0VGFnKTsKICBpZiAoc2NlbmUuaXNJT1MpIHsKICAgIE1PQklMRV9JT1NfSEVBRF9UQUdTLmZvckVhY2goY3JlYXRlQW5kSW5qZWN0VGFnKTsKICB9CiAgcmV0dXJuIGhlYWRUYWdzOwoKICBmdW5jdGlvbiBjcmVhdGVBbmRJbmplY3RUYWcgKHRhZ09iaikgewogICAgaWYgKCF0YWdPYmogfHwgdGFnT2JqLmV4aXN0cygpKSB7IHJldHVybjsgfQoKICAgIHRhZyA9IGNyZWF0ZVRhZyh0YWdPYmopOwogICAgaWYgKCF0YWcpIHsgcmV0dXJuOyB9CgogICAgaWYgKGhlYWRTY3JpcHRFbCkgewogICAgICBoZWFkU2NyaXB0RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBoZWFkU2NyaXB0RWwpOwogICAgfSBlbHNlIHsKICAgICAgaGVhZEVsLmFwcGVuZENoaWxkKHRhZyk7CiAgICB9CgogICAgaGVhZFRhZ3MucHVzaCh0YWcpOwogIH0KfTsKCmZ1bmN0aW9uIGNyZWF0ZVRhZyAodGFnT2JqKSB7CiAgaWYgKCF0YWdPYmogfHwgIXRhZ09iai50YWdOYW1lKSB7IHJldHVybjsgfQogIHZhciBtZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdPYmoudGFnTmFtZSk7CiAgbWV0YS5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwogIHJldHVybiBleHRlbmQobWV0YSwgdGFnT2JqLmF0dHJpYnV0ZXMpOwp9Cgp9LHsiLi4vLi4vY29uc3RhbnRzLyI6MTAxLCIuLi8uLi91dGlscyI6MTgyfV0sMTE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGJpbmQgPSBfZGVyZXFfKCcuLi8uLi91dGlscy9iaW5kJyk7CnZhciBpc0lmcmFtZWQgPSBfZGVyZXFfKCcuLi8uLi91dGlscy8nKS5pc0lmcmFtZWQ7CgovKioKICogUHJvdmlkZXMgYSBwb3N0IG1lc3NhZ2UgQVBJIGZvciBzY2VuZXMgY29udGFpbmVkCiAqIGluIGFuIGlmcmFtZS4KICovCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5pdFBvc3RNZXNzYWdlQVBJIChzY2VuZSkgewogIC8vIEhhbmRsZXMgZnVsbHNjcmVlbiBiZWhhdmlvciB3aGVuIGluc2lkZSBhbiBpZnJhbWUuCiAgaWYgKCFpc0lmcmFtZWQoKSkgeyByZXR1cm47IH0KICAvLyBwb3N0TWVzc2FnZSBBUEkgaGFuZGxlcgogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYmluZChwb3N0TWVzc2FnZUFQSUhhbmRsZXIsIHNjZW5lKSk7Cn07CgpmdW5jdGlvbiBwb3N0TWVzc2FnZUFQSUhhbmRsZXIgKGV2ZW50KSB7CiAgdmFyIHNjZW5lID0gdGhpczsKICBpZiAoIWV2ZW50LmRhdGEpIHsgcmV0dXJuOyB9CgogIHN3aXRjaCAoZXZlbnQuZGF0YS50eXBlKSB7CiAgICBjYXNlICd2cic6IHsKICAgICAgc3dpdGNoIChldmVudC5kYXRhLmRhdGEpIHsKICAgICAgICBjYXNlICdlbnRlcic6CiAgICAgICAgICBzY2VuZS5lbnRlclZSKCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdleGl0JzoKICAgICAgICAgIHNjZW5lLmV4aXRWUigpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9Cn0KCn0seyIuLi8uLi91dGlscy8iOjE4MiwiLi4vLi4vdXRpbHMvYmluZCI6MTc2fV0sMTE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoKICBTY2VuZSBpbmRleCBmb3Iga2VlcGluZyB0cmFjayBvZiBjcmVhdGVkIHNjZW5lcy4KKi8KbW9kdWxlLmV4cG9ydHMgPSBbXTsKCn0se31dLDExNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBXYWtlbG9jayA9IF9kZXJlcV8oJy4uLy4uLy4uL3ZlbmRvci93YWtlbG9jay93YWtlbG9jaycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbml0V2FrZWxvY2sgKHNjZW5lKSB7CiAgaWYgKCFzY2VuZS5pc01vYmlsZSkgeyByZXR1cm47IH0KCiAgdmFyIHdha2Vsb2NrID0gc2NlbmUud2FrZWxvY2sgPSBuZXcgV2FrZWxvY2soKTsKICBzY2VuZS5hZGRFdmVudExpc3RlbmVyKCdlbnRlci12cicsIGZ1bmN0aW9uICgpIHsgd2FrZWxvY2sucmVxdWVzdCgpOyB9KTsKICBzY2VuZS5hZGRFdmVudExpc3RlbmVyKCdleGl0LXZyJywgZnVuY3Rpb24gKCkgeyB3YWtlbG9jay5yZWxlYXNlKCk7IH0pOwp9OwoKfSx7Ii4uLy4uLy4uL3ZlbmRvci93YWtlbG9jay93YWtlbG9jayI6MTk2fV0sMTE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7CnZhciBQcm9wZXJ0eVR5cGVzID0gX2RlcmVxXygnLi9wcm9wZXJ0eVR5cGVzJyk7Cgp2YXIgZGVidWcgPSB1dGlscy5kZWJ1ZzsKdmFyIGlzVmFsaWREZWZhdWx0VmFsdWUgPSBQcm9wZXJ0eVR5cGVzLmlzVmFsaWREZWZhdWx0VmFsdWU7CnZhciBwcm9wZXJ0eVR5cGVzID0gUHJvcGVydHlUeXBlcy5wcm9wZXJ0eVR5cGVzOwoKdmFyIHdhcm4gPSBkZWJ1ZygnY29yZTpzY2hlbWE6d2FybicpOwoKLyoqCiAqIEEgc2NoZW1hIGlzIGNsYXNzaWZpZWQgYXMgYSBzY2hlbWEgZm9yIGEgc2luZ2xlIHByb3BlcnR5IGlmOgogKiAtIGB0eXBlYCBpcyBkZWZpbmVkIG9uIHRoZSBzY2hlbWEgYXMgYSBzdHJpbmcuCiAqIC0gT1IgYGRlZmF1bHRgIGlzIGRlZmluZWQgb24gdGhlIHNjaGVtYSwgYXMgYSByZXNlcnZlZCBrZXl3b3JkLgogKiAtIE9SIHNjaGVtYSBpcyBlbXB0eS4KICovCmZ1bmN0aW9uIGlzU2luZ2xlUHJvcGVydHkgKHNjaGVtYSkgewogIGlmICgndHlwZScgaW4gc2NoZW1hKSB7CiAgICByZXR1cm4gdHlwZW9mIHNjaGVtYS50eXBlID09PSAnc3RyaW5nJzsKICB9CiAgcmV0dXJuICdkZWZhdWx0JyBpbiBzY2hlbWE7Cn0KbW9kdWxlLmV4cG9ydHMuaXNTaW5nbGVQcm9wZXJ0eSA9IGlzU2luZ2xlUHJvcGVydHk7CgovKioKICogQnVpbGQgc3RlcCB0byBzY2hlbWEgdG8gdXNlIGB0eXBlYCB0byBpbmplY3QgZGVmYXVsdCB2YWx1ZSwgcGFyc2VyLCBhbmQgc3RyaW5naWZpZXIuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWEKICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUKICogQHJldHVybnMge29iamVjdH0gU2NoZW1hLgogKi8KbW9kdWxlLmV4cG9ydHMucHJvY2VzcyA9IGZ1bmN0aW9uIChzY2hlbWEsIGNvbXBvbmVudE5hbWUpIHsKICB2YXIgcHJvcE5hbWU7CgogIC8vIEZvciBzaW5nbGUgcHJvcGVydHkgc2NoZW1hLCBydW4gcHJvY2Vzc1Byb3BEZWZpbml0aW9uIG92ZXIgdGhlIHdob2xlIHNjaGVtYS4KICBpZiAoaXNTaW5nbGVQcm9wZXJ0eShzY2hlbWEpKSB7CiAgICByZXR1cm4gcHJvY2Vzc1Byb3BlcnR5RGVmaW5pdGlvbihzY2hlbWEsIGNvbXBvbmVudE5hbWUpOwogIH0KCiAgLy8gRm9yIG11bHRpLXByb3BlcnR5IHNjaGVtYSwgcnVuIHByb2Nlc3NQcm9wRGVmaW5pdGlvbiBvdmVyIGVhY2ggcHJvcGVydHkgZGVmaW5pdGlvbi4KICBmb3IgKHByb3BOYW1lIGluIHNjaGVtYSkgewogICAgc2NoZW1hW3Byb3BOYW1lXSA9IHByb2Nlc3NQcm9wZXJ0eURlZmluaXRpb24oc2NoZW1hW3Byb3BOYW1lXSwgY29tcG9uZW50TmFtZSk7CiAgfQogIHJldHVybiBzY2hlbWE7Cn07CgovKioKICogSW5qZWN0IGRlZmF1bHQgdmFsdWUsIHBhcnNlciwgc3RyaW5naWZpZXIgZm9yIHNpbmdsZSBwcm9wZXJ0eS4KICoKICogQHBhcmFtIHtvYmplY3R9IHByb3BEZWZpbml0aW9uCiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lCiAqLwpmdW5jdGlvbiBwcm9jZXNzUHJvcGVydHlEZWZpbml0aW9uIChwcm9wRGVmaW5pdGlvbiwgY29tcG9uZW50TmFtZSkgewogIHZhciBkZWZhdWx0VmFsID0gcHJvcERlZmluaXRpb24uZGVmYXVsdDsKICB2YXIgaXNDdXN0b21UeXBlOwogIHZhciBwcm9wVHlwZTsKICB2YXIgdHlwZU5hbWUgPSBwcm9wRGVmaW5pdGlvbi50eXBlOwoKICAvLyBUeXBlIGluZmVyZW5jZS4KICBpZiAoIXByb3BEZWZpbml0aW9uLnR5cGUpIHsKICAgIGlmIChkZWZhdWx0VmFsICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAodHlwZW9mIGRlZmF1bHRWYWwgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZGVmYXVsdFZhbCA9PT0gJ251bWJlcicpKSB7CiAgICAgIC8vIFR5cGUgaW5mZXJlbmNlLgogICAgICB0eXBlTmFtZSA9IHR5cGVvZiBkZWZhdWx0VmFsOwogICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlZmF1bHRWYWwpKSB7CiAgICAgIHR5cGVOYW1lID0gJ2FycmF5JzsKICAgIH0gZWxzZSB7CiAgICAgIC8vIEZhbGwgYmFjayB0byBzdHJpbmcuCiAgICAgIHR5cGVOYW1lID0gJ3N0cmluZyc7CiAgICB9CiAgfSBlbHNlIGlmIChwcm9wRGVmaW5pdGlvbi50eXBlID09PSAnYm9vbCcpIHsKICAgIHR5cGVOYW1lID0gJ2Jvb2xlYW4nOwogIH0gZWxzZSBpZiAocHJvcERlZmluaXRpb24udHlwZSA9PT0gJ2Zsb2F0JykgewogICAgdHlwZU5hbWUgPSAnbnVtYmVyJzsKICB9CgogIHByb3BUeXBlID0gcHJvcGVydHlUeXBlc1t0eXBlTmFtZV07CiAgaWYgKCFwcm9wVHlwZSkgewogICAgd2FybignVW5rbm93biBwcm9wZXJ0eSB0eXBlIGZvciBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2A6ICcgKyB0eXBlTmFtZSk7CiAgfQoKICAvLyBGaWxsIGluIHBhcnNlIGFuZCBzdHJpbmdpZnkgdXNpbmcgcHJvcGVydHkgdHlwZXMuCiAgaXNDdXN0b21UeXBlID0gISFwcm9wRGVmaW5pdGlvbi5wYXJzZTsKICBwcm9wRGVmaW5pdGlvbi5wYXJzZSA9IHByb3BEZWZpbml0aW9uLnBhcnNlIHx8IHByb3BUeXBlLnBhcnNlOwogIHByb3BEZWZpbml0aW9uLnN0cmluZ2lmeSA9IHByb3BEZWZpbml0aW9uLnN0cmluZ2lmeSB8fCBwcm9wVHlwZS5zdHJpbmdpZnk7CgogIC8vIEZpbGwgaW4gdHlwZSBuYW1lLgogIHByb3BEZWZpbml0aW9uLnR5cGUgPSB0eXBlTmFtZTsKCiAgLy8gQ2hlY2sgdGhhdCBkZWZhdWx0IHZhbHVlIGV4aXN0cy4KICBpZiAoJ2RlZmF1bHQnIGluIHByb3BEZWZpbml0aW9uKSB7CiAgICAvLyBDaGVjayB0aGF0IGRlZmF1bHQgdmFsdWVzIGFyZSB2YWxpZC4KICAgIGlmICghaXNDdXN0b21UeXBlICYmICFpc1ZhbGlkRGVmYXVsdFZhbHVlKHR5cGVOYW1lLCBkZWZhdWx0VmFsKSkgewogICAgICB3YXJuKCdEZWZhdWx0IHZhbHVlIGAnICsgZGVmYXVsdFZhbCArICdgIGRvZXMgbm90IG1hdGNoIHR5cGUgYCcgKyB0eXBlTmFtZSArCiAgICAgICAgICAgJ2AgaW4gY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgJyk7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIEZpbGwgaW4gZGVmYXVsdCB2YWx1ZS4KICAgIHByb3BEZWZpbml0aW9uLmRlZmF1bHQgPSBwcm9wVHlwZS5kZWZhdWx0OwogIH0KCiAgcmV0dXJuIHByb3BEZWZpbml0aW9uOwp9Cm1vZHVsZS5leHBvcnRzLnByb2Nlc3NQcm9wZXJ0eURlZmluaXRpb24gPSBwcm9jZXNzUHJvcGVydHlEZWZpbml0aW9uOwoKLyoqCiAqIFBhcnNlIHByb3BEYXRhIHVzaW5nIHNjaGVtYS4gVXNlIGRlZmF1bHQgdmFsdWVzIGlmIG5vdCBleGlzdGluZyBpbiBwcm9wRGF0YS4KICoKICogQHBhcmFtIHtvYmplY3R9IHByb3BEYXRhIC0gVW5wYXJzZWQgcHJvcGVydGllcy4KICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYSAtIFByb3BlcnR5IHR5cGVzIGRlZmluaXRpb24uCiAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0UGFydGlhbERhdGEgLSBXaGV0aGVyIHRvIHJldHVybiBmdWxsIGNvbXBvbmVudCBkYXRhIG9yIGp1c3QgdGhlIGRhdGEKICogICAgICAgIHdpdGgga2V5cyBpbiBgcHJvcERhdGFgLgogKiBAcGFyYW0ge3N0cmluZyB9IGNvbXBvbmVudE5hbWUgLSBOYW1lIG9mIHRoZSBjb21wb25lbnQsIHVzZWQgZm9yIHRoZSBwcm9wZXJ0eSB3YXJuaW5nLgogKiBAcGFyYW0ge2Jvb2xlYW59IHNpbGVudCAtIFN1cHByZXNzIHdhcm5pbmcgbWVzc2FnZXMuCiAqLwptb2R1bGUuZXhwb3J0cy5wYXJzZVByb3BlcnRpZXMgPSAoZnVuY3Rpb24gKCkgewogIHZhciBwcm9wTmFtZXMgPSBbXTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wRGF0YSwgc2NoZW1hLCBnZXRQYXJ0aWFsRGF0YSwgY29tcG9uZW50TmFtZSwgc2lsZW50KSB7CiAgICB2YXIgaTsKICAgIHZhciBwcm9wTmFtZTsKICAgIHZhciBwcm9wRGVmaW5pdGlvbjsKICAgIHZhciBwcm9wVmFsdWU7CgogICAgcHJvcE5hbWVzLmxlbmd0aCA9IDA7CiAgICBmb3IgKHByb3BOYW1lIGluIChnZXRQYXJ0aWFsRGF0YSA/IHByb3BEYXRhIDogc2NoZW1hKSkgewogICAgICBpZiAoZ2V0UGFydGlhbERhdGEgJiYgcHJvcERhdGFbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHsgY29udGludWU7IH0KICAgICAgcHJvcE5hbWVzLnB1c2gocHJvcE5hbWUpOwogICAgfQoKICAgIGlmIChwcm9wRGF0YSA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvcERhdGEgIT09ICdvYmplY3QnKSB7IHJldHVybiBwcm9wRGF0YTsgfQoKICAgIC8vIFZhbGlkYXRpb24gZXJyb3JzLgogICAgZm9yIChwcm9wTmFtZSBpbiBwcm9wRGF0YSkgewogICAgICBpZiAocHJvcERhdGFbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQgJiYgIXNjaGVtYVtwcm9wTmFtZV0gJiYgIXNpbGVudCkgewogICAgICAgIHdhcm4oJ1Vua25vd24gcHJvcGVydHkgYCcgKyBwcm9wTmFtZSArCiAgICAgICAgICAgICAnYCBmb3IgY29tcG9uZW50L3N5c3RlbSBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKTsKICAgICAgfQogICAgfQoKICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgcHJvcE5hbWUgPSBwcm9wTmFtZXNbaV07CiAgICAgIHByb3BEZWZpbml0aW9uID0gc2NoZW1hW3Byb3BOYW1lXTsKICAgICAgcHJvcFZhbHVlID0gcHJvcERhdGFbcHJvcE5hbWVdOwogICAgICBpZiAoIShzY2hlbWFbcHJvcE5hbWVdKSkgeyByZXR1cm47IH0KICAgICAgcHJvcERhdGFbcHJvcE5hbWVdID0gcGFyc2VQcm9wZXJ0eShwcm9wVmFsdWUsIHByb3BEZWZpbml0aW9uKTsKICAgIH0KCiAgICByZXR1cm4gcHJvcERhdGE7CiAgfTsKfSkoKTsKCi8qKgogKiBEZXNlcmlhbGl6ZSBhIHNpbmdsZSBwcm9wZXJ0eS4KICovCmZ1bmN0aW9uIHBhcnNlUHJvcGVydHkgKHZhbHVlLCBwcm9wRGVmaW5pdGlvbikgewogIC8vIFVzZSBkZWZhdWx0IHZhbHVlIGlmIHZhbHVlIGlzIGZhbHN5LgogIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJykgewogICAgdmFsdWUgPSBwcm9wRGVmaW5pdGlvbi5kZWZhdWx0OwogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7IHZhbHVlID0gdmFsdWUuc2xpY2UoKTsgfQogIH0KICAvLyBJbnZva2UgcHJvcGVydHkgdHlwZSBwYXJzZXIuCiAgcmV0dXJuIHByb3BEZWZpbml0aW9uLnBhcnNlKHZhbHVlLCBwcm9wRGVmaW5pdGlvbi5kZWZhdWx0KTsKfQptb2R1bGUuZXhwb3J0cy5wYXJzZVByb3BlcnR5ID0gcGFyc2VQcm9wZXJ0eTsKCi8qKgogKiBTZXJpYWxpemUgYSBncm91cCBvZiBwcm9wZXJ0aWVzLgogKi8KbW9kdWxlLmV4cG9ydHMuc3RyaW5naWZ5UHJvcGVydGllcyA9IGZ1bmN0aW9uIChwcm9wRGF0YSwgc2NoZW1hKSB7CiAgdmFyIHByb3BOYW1lOwogIHZhciBwcm9wRGVmaW5pdGlvbjsKICB2YXIgcHJvcFZhbHVlOwogIHZhciBzdHJpbmdpZmllZERhdGEgPSB7fTsKICB2YXIgdmFsdWU7CgogIGZvciAocHJvcE5hbWUgaW4gcHJvcERhdGEpIHsKICAgIHByb3BEZWZpbml0aW9uID0gc2NoZW1hW3Byb3BOYW1lXTsKICAgIHByb3BWYWx1ZSA9IHByb3BEYXRhW3Byb3BOYW1lXTsKICAgIHZhbHVlID0gcHJvcFZhbHVlOwogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgdmFsdWUgPSBzdHJpbmdpZnlQcm9wZXJ0eShwcm9wVmFsdWUsIHByb3BEZWZpbml0aW9uKTsKICAgICAgaWYgKCFwcm9wRGVmaW5pdGlvbikgeyB3YXJuKCdVbmtub3duIGNvbXBvbmVudCBwcm9wZXJ0eTogJyArIHByb3BOYW1lKTsgfQogICAgfQogICAgc3RyaW5naWZpZWREYXRhW3Byb3BOYW1lXSA9IHZhbHVlOwogIH0KICByZXR1cm4gc3RyaW5naWZpZWREYXRhOwp9OwoKLyoqCiAqIFNlcmlhbGl6ZSBhIHNpbmdsZSBwcm9wZXJ0eS4KICovCmZ1bmN0aW9uIHN0cmluZ2lmeVByb3BlcnR5ICh2YWx1ZSwgcHJvcERlZmluaXRpb24pIHsKICAvLyBUaGlzIGZ1bmN0aW9uIHN0cmluZ2lmaWVzIGJ1dCBpdCdzIHVzZWQgaW4gYSBjb250ZXh0IHdoZXJlCiAgLy8gdGhlcmUncyBhbHdheXMgc2Vjb25kIHN0cmluZ2lmaWNhdGlvbiBwYXNzLiBCeSByZXR1cm5pbmcgdGhlIG9yaWdpbmFsCiAgLy8gdmFsdWUgd2hlbiBpdCdzIG5vdCBhbiBvYmplY3Qgd2Ugc2F2ZSBvbmUgdW5uZWNlc3NhcnkgY2FsbAogIC8vIHRvIEpTT04uc3RyaW5naWZ5LgogIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiB2YWx1ZTsgfQogIC8vIGlmIHRoZXJlJ3Mgbm8gc2NoZW1hIGZvciB0aGUgcHJvcGVydHkgd2UgdXNlIHN0YW5kYXIgSlNPTiBzdHJpbmdpZnkKICBpZiAoIXByb3BEZWZpbml0aW9uIHx8IHZhbHVlID09PSBudWxsKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7IH0KICByZXR1cm4gcHJvcERlZmluaXRpb24uc3RyaW5naWZ5KHZhbHVlKTsKfQptb2R1bGUuZXhwb3J0cy5zdHJpbmdpZnlQcm9wZXJ0eSA9IHN0cmluZ2lmeVByb3BlcnR5OwoKfSx7Ii4uL3V0aWxzLyI6MTgyLCIuL3Byb3BlcnR5VHlwZXMiOjExMX1dLDExOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBzY2hlbWEgPSBfZGVyZXFfKCcuL3NjaGVtYScpOwoKdmFyIHByb2Nlc3NTY2hlbWEgPSBzY2hlbWEucHJvY2VzczsKdmFyIHNoYWRlcnMgPSBtb2R1bGUuZXhwb3J0cy5zaGFkZXJzID0ge307ICAvLyBLZWVwIHRyYWNrIG9mIHJlZ2lzdGVyZWQgc2hhZGVycy4KdmFyIHNoYWRlck5hbWVzID0gbW9kdWxlLmV4cG9ydHMuc2hhZGVyTmFtZXMgPSBbXTsgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIG5hbWVzIG9mIHJlZ2lzdGVyZWQgc2hhZGVycy4KdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzJyk7CgovLyBBLUZyYW1lIHByb3BlcnRpZXMgdG8gdGhyZWUuanMgdW5pZm9ybSB0eXBlcy4KdmFyIHByb3BlcnR5VG9UaHJlZU1hcHBpbmcgPSB7CiAgYXJyYXk6ICd2MycsCiAgY29sb3I6ICd2MycsCiAgaW50OiAnaScsCiAgbnVtYmVyOiAnZicsCiAgbWFwOiAndCcsCiAgdGltZTogJ2YnLAogIHZlYzI6ICd2MicsCiAgdmVjMzogJ3YzJywKICB2ZWM0OiAndjQnCn07CgovKioKICogU2hhZGVyIGNsYXNzIGRlZmluaXRpb24uCiAqCiAqIFNoYWRlcnMgZXh0ZW5kIHRoZSBtYXRlcmlhbCBjb21wb25lbnQgQVBJIHNvIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIGxpYnJhcnkKICogb2YgY3VzdG9taXplZCBtYXRlcmlhbHMKICoKICovCnZhciBTaGFkZXIgPSBtb2R1bGUuZXhwb3J0cy5TaGFkZXIgPSBmdW5jdGlvbiAoKSB7fTsKClNoYWRlci5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogQ29udGFpbnMgdGhlIHR5cGUgc2NoZW1hIGFuZCBkZWZhdWx0cyBmb3IgdGhlIGRhdGEgdmFsdWVzLgogICAqIERhdGEgaXMgY29lcmNlZCBpbnRvIHRoZSB0eXBlcyBvZiB0aGUgdmFsdWVzIG9mIHRoZSBkZWZhdWx0cy4KICAgKi8KICBzY2hlbWE6IHt9LAoKICB2ZXJ0ZXhTaGFkZXI6CiAgICAndm9pZCBtYWluKCkgeycgKwogICAgICAnZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTsnICsKICAgICd9JywKCiAgZnJhZ21lbnRTaGFkZXI6CiAgICAndm9pZCBtYWluKCkgeycgKwogICAgICAnZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMS4wLCAxLjApOycgKwogICAgJ30nLAoKICAvKioKICAgKiBJbml0IGhhbmRsZXIuIFNpbWlsYXIgdG8gYXR0YWNoZWRDYWxsYmFjay4KICAgKiBDYWxsZWQgZHVyaW5nIHNoYWRlciBpbml0aWFsaXphdGlvbiBhbmQgaXMgb25seSBydW4gb25jZS4KICAgKi8KICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5hdHRyaWJ1dGVzID0gdGhpcy5pbml0VmFyaWFibGVzKGRhdGEsICdhdHRyaWJ1dGUnKTsKICAgIHRoaXMudW5pZm9ybXMgPSB0aGlzLmluaXRWYXJpYWJsZXMoZGF0YSwgJ3VuaWZvcm0nKTsKICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgKHRoaXMucmF3ID8gVEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWwgOiBUSFJFRS5TaGFkZXJNYXRlcmlhbCkoewogICAgICAvLyBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsCiAgICAgIHVuaWZvcm1zOiB0aGlzLnVuaWZvcm1zLAogICAgICB2ZXJ0ZXhTaGFkZXI6IHRoaXMudmVydGV4U2hhZGVyLAogICAgICBmcmFnbWVudFNoYWRlcjogdGhpcy5mcmFnbWVudFNoYWRlcgogICAgfSk7CiAgICByZXR1cm4gdGhpcy5tYXRlcmlhbDsKICB9LAoKICBpbml0VmFyaWFibGVzOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSkgewogICAgdmFyIGtleTsKICAgIHZhciBzY2hlbWEgPSB0aGlzLnNjaGVtYTsKICAgIHZhciB2YXJpYWJsZXMgPSB7fTsKICAgIHZhciB2YXJUeXBlOwoKICAgIGZvciAoa2V5IGluIHNjaGVtYSkgewogICAgICBpZiAoc2NoZW1hW2tleV0uaXMgIT09IHR5cGUpIHsgY29udGludWU7IH0KICAgICAgdmFyVHlwZSA9IHByb3BlcnR5VG9UaHJlZU1hcHBpbmdbc2NoZW1hW2tleV0udHlwZV07CiAgICAgIHZhcmlhYmxlc1trZXldID0gewogICAgICAgIHR5cGU6IHZhclR5cGUsCiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCAgLy8gTGV0IHVwZGF0ZVZhcmlhYmxlcyBoYW5kbGUgc2V0dGluZyB0aGVzZS4KICAgICAgfTsKICAgIH0KICAgIHJldHVybiB2YXJpYWJsZXM7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIGhhbmRsZXIuIFNpbWlsYXIgdG8gYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLgogICAqIENhbGxlZCB3aGVuZXZlciB0aGUgYXNzb2NpYXRlZCBtYXRlcmlhbCBkYXRhIGNoYW5nZXMuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIE5ldyBtYXRlcmlhbCBkYXRhLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMudXBkYXRlVmFyaWFibGVzKGRhdGEsICdhdHRyaWJ1dGUnKTsKICAgIHRoaXMudXBkYXRlVmFyaWFibGVzKGRhdGEsICd1bmlmb3JtJyk7CiAgfSwKCiAgdXBkYXRlVmFyaWFibGVzOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSkgewogICAgdmFyIGtleTsKICAgIHZhciBtYXRlcmlhbEtleTsKICAgIHZhciBzY2hlbWEgPSB0aGlzLnNjaGVtYTsKICAgIHZhciB2YXJpYWJsZXM7CgogICAgdmFyaWFibGVzID0gdHlwZSA9PT0gJ3VuaWZvcm0nID8gdGhpcy51bmlmb3JtcyA6IHRoaXMuYXR0cmlidXRlczsKICAgIGZvciAoa2V5IGluIGRhdGEpIHsKICAgICAgaWYgKCFzY2hlbWFba2V5XSB8fCBzY2hlbWFba2V5XS5pcyAhPT0gdHlwZSkgeyBjb250aW51ZTsgfQoKICAgICAgaWYgKHNjaGVtYVtrZXldLnR5cGUgPT09ICdtYXAnKSB7CiAgICAgICAgLy8gSWYgZGF0YSB1bmNoYW5nZWQsIGdldCBvdXQgZWFybHkuCiAgICAgICAgaWYgKCF2YXJpYWJsZXNba2V5XSB8fCB2YXJpYWJsZXNba2V5XS52YWx1ZSA9PT0gZGF0YVtrZXldKSB7IGNvbnRpbnVlOyB9CgogICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgaXMgbmVlZGVkIGZvciB0ZXh0dXJlcy4KICAgICAgICBtYXRlcmlhbEtleSA9ICdfdGV4dHVyZV8nICsga2V5OwoKICAgICAgICAvLyBXZSBjYW4ndCBhY3R1YWxseSBzZXQgdGhlIHZhcmlhYmxlIGNvcnJlY3RseSB1bnRpbCB3ZSd2ZSBsb2FkZWQgdGhlIHRleHR1cmUuCiAgICAgICAgdGhpcy5zZXRNYXBPblRleHR1cmVMb2FkKHZhcmlhYmxlcywga2V5LCBtYXRlcmlhbEtleSk7CgogICAgICAgIC8vIEtpY2sgb2ZmIHRoZSB0ZXh0dXJlIHVwZGF0ZSBub3cgdGhhdCBoYW5kbGVyIGlzIGFkZGVkLgogICAgICAgIHV0aWxzLm1hdGVyaWFsLnVwZGF0ZU1hcE1hdGVyaWFsRnJvbURhdGEobWF0ZXJpYWxLZXksIGtleSwgdGhpcywgZGF0YSk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgdmFyaWFibGVzW2tleV0udmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoc2NoZW1hW2tleV0udHlwZSwgZGF0YVtrZXldKTsKICAgICAgdmFyaWFibGVzW2tleV0ubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgfQogIH0sCgogIHBhcnNlVmFsdWU6IGZ1bmN0aW9uICh0eXBlLCB2YWx1ZSkgewogICAgdmFyIGNvbG9yOwogICAgc3dpdGNoICh0eXBlKSB7CiAgICAgIGNhc2UgJ3ZlYzInOiB7CiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKHZhbHVlLngsIHZhbHVlLnkpOwogICAgICB9CiAgICAgIGNhc2UgJ3ZlYzMnOiB7CiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnopOwogICAgICB9CiAgICAgIGNhc2UgJ3ZlYzQnOiB7CiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3I0KHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnosIHZhbHVlLncpOwogICAgICB9CiAgICAgIGNhc2UgJ2NvbG9yJzogewogICAgICAgIGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKHZhbHVlKTsKICAgICAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjMoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7CiAgICAgIH0KICAgICAgY2FzZSAnbWFwJzogewogICAgICAgIHJldHVybiBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKHZhbHVlKTsKICAgICAgfQogICAgICBkZWZhdWx0OiB7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICB9CiAgfSwKCiAgc2V0TWFwT25UZXh0dXJlTG9hZDogZnVuY3Rpb24gKHZhcmlhYmxlcywga2V5LCBtYXRlcmlhbEtleSkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtYXRlcmlhbHRleHR1cmVsb2FkZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhcmlhYmxlc1trZXldLnZhbHVlID0gc2VsZi5tYXRlcmlhbFttYXRlcmlhbEtleV07CiAgICAgIHZhcmlhYmxlc1trZXldLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIH0pOwogIH0KfTsKCi8qKgogKiBSZWdpc3RlcnMgYSBzaGFkZXIgdG8gQS1GcmFtZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBzaGFkZXIgbmFtZS4KICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb24gLSBzaGFkZXIgcHJvcGVydHkgYW5kIG1ldGhvZHMuCiAqIEByZXR1cm5zIHtvYmplY3R9IFNoYWRlci4KICovCm1vZHVsZS5leHBvcnRzLnJlZ2lzdGVyU2hhZGVyID0gZnVuY3Rpb24gKG5hbWUsIGRlZmluaXRpb24pIHsKICB2YXIgTmV3U2hhZGVyOwogIHZhciBwcm90byA9IHt9OwoKICAvLyBGb3JtYXQgZGVmaW5pdGlvbiBvYmplY3QgdG8gcHJvdG90eXBlIG9iamVjdC4KICBPYmplY3Qua2V5cyhkZWZpbml0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIHByb3RvW2tleV0gPSB7CiAgICAgIHZhbHVlOiBkZWZpbml0aW9uW2tleV0sCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9OwogIH0pOwoKICBpZiAoc2hhZGVyc1tuYW1lXSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2hhZGVyICcgKyBuYW1lICsgJyBoYXMgYmVlbiBhbHJlYWR5IHJlZ2lzdGVyZWQnKTsKICB9CiAgTmV3U2hhZGVyID0gZnVuY3Rpb24gKCkgeyBTaGFkZXIuY2FsbCh0aGlzKTsgfTsKICBOZXdTaGFkZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTaGFkZXIucHJvdG90eXBlLCBwcm90byk7CiAgTmV3U2hhZGVyLnByb3RvdHlwZS5uYW1lID0gbmFtZTsKICBOZXdTaGFkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTmV3U2hhZGVyOwogIHNoYWRlcnNbbmFtZV0gPSB7CiAgICBTaGFkZXI6IE5ld1NoYWRlciwKICAgIHNjaGVtYTogcHJvY2Vzc1NjaGVtYShOZXdTaGFkZXIucHJvdG90eXBlLnNjaGVtYSkKICB9OwogIHNoYWRlck5hbWVzLnB1c2gobmFtZSk7CiAgcmV0dXJuIE5ld1NoYWRlcjsKfTsKCn0seyIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMiOjE4MiwiLi9zY2hlbWEiOjExOH1dLDEyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb21wb25lbnRzID0gX2RlcmVxXygnLi9jb21wb25lbnQnKTsKdmFyIHNjaGVtYSA9IF9kZXJlcV8oJy4vc2NoZW1hJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzLycpOwoKdmFyIHBhcnNlUHJvcGVydGllcyA9IHNjaGVtYS5wYXJzZVByb3BlcnRpZXM7CnZhciBwYXJzZVByb3BlcnR5ID0gc2NoZW1hLnBhcnNlUHJvcGVydHk7CnZhciBwcm9jZXNzU2NoZW1hID0gc2NoZW1hLnByb2Nlc3M7CnZhciBpc1NpbmdsZVByb3AgPSBzY2hlbWEuaXNTaW5nbGVQcm9wZXJ0eTsKdmFyIHN0eWxlUGFyc2VyID0gdXRpbHMuc3R5bGVQYXJzZXI7Cgp2YXIgc3lzdGVtcyA9IG1vZHVsZS5leHBvcnRzLnN5c3RlbXMgPSB7fTsgIC8vIEtlZXAgdHJhY2sgb2YgcmVnaXN0ZXJlZCBzeXN0ZW1zLgoKLyoqCiAqIFN5c3RlbSBjbGFzcyBkZWZpbml0aW9uLgogKgogKiBTeXN0ZW1zIHByb3ZpZGUgZ2xvYmFsIHNjb3BlIGFuZCBzZXJ2aWNlcyB0byBhIGdyb3VwIG9mIGluc3RhbnRpYXRlZCBjb21wb25lbnRzIG9mIHRoZQogKiBzYW1lIGNsYXNzLiBUaGV5IGNhbiBhbHNvIGhlbHAgYWJzdHJhY3QgbG9naWMgYXdheSBmcm9tIGNvbXBvbmVudHMgc3VjaCB0aGF0IGNvbXBvbmVudHMKICogb25seSBoYXZlIHRvIHdvcnJ5IGFib3V0IGRhdGEuCiAqCiAqIEZvciBleGFtcGxlLCBhIHBoeXNpY3MgY29tcG9uZW50IHRoYXQgY3JlYXRlcyBhIHBoeXNpY3Mgd29ybGQgdGhhdCBvdmVyc2VlcwogKiBhbGwgZW50aXRpZXMgd2l0aCBhIHBoeXNpY3Mgb3IgcmlnaWQgYm9keSBjb21wb25lbnQuCiAqCiAqIFRPRE86IEhhdmUgdGhlIFN5c3RlbSBwcm90b3R5cGUgcmV1c2UgdGhlIENvbXBvbmVudCBwcm90b3R5cGUuIE1vc3QgY29kZSBpcyBjb3BpZWQKICogYW5kIHNvbWUgcGllY2VzIGFyZSBtaXNzaW5nIGZyb20gdGhlIENvbXBvbmVudCBmYWNpbGl0aWVzIChlLmcuLCBhdHRyaWJ1dGUgY2FjaGluZywKICogc2V0QXR0cmlidXRlIGJlaGF2aW9yKS4KICoKICogQG1lbWJlciB7c3RyaW5nfSBuYW1lIC0gTmFtZSB0aGF0IHN5c3RlbSBpcyByZWdpc3RlcmVkIHVuZGVyLgogKiBAbWVtYmVyIHtFbGVtZW50fSBzY2VuZUVsIC0gSGFuZGxlIHRvIHRoZSBzY2VuZSBlbGVtZW50IHdoZXJlIHN5c3RlbSBhcHBsaWVzIHRvLgogKi8KdmFyIFN5c3RlbSA9IG1vZHVsZS5leHBvcnRzLlN5c3RlbSA9IGZ1bmN0aW9uIChzY2VuZUVsKSB7CiAgdmFyIGNvbXBvbmVudCA9IGNvbXBvbmVudHMgJiYgY29tcG9uZW50cy5jb21wb25lbnRzW3RoaXMubmFtZV07CgogIC8vIFNldCByZWZlcmVuY2UgdG8gc2NlbmUuCiAgdGhpcy5lbCA9IHNjZW5lRWw7CiAgdGhpcy5zY2VuZUVsID0gc2NlbmVFbDsKCiAgLy8gU2V0IHJlZmVyZW5jZSB0byBtYXRjaGluZyBjb21wb25lbnQgKGlmIGV4aXN0cykuCiAgaWYgKGNvbXBvbmVudCkgeyBjb21wb25lbnQuQ29tcG9uZW50LnByb3RvdHlwZS5zeXN0ZW0gPSB0aGlzOyB9CgogIC8vIFByb2Nlc3Mgc3lzdGVtIGNvbmZpZ3VyYXRpb24uCiAgdGhpcy5idWlsZERhdGEoKTsKICB0aGlzLmluaXQoKTsKICB0aGlzLnVwZGF0ZSh7fSk7Cn07CgpTeXN0ZW0ucHJvdG90eXBlID0gewogIC8qKgogICAqIFNjaGVtYSB0byBjb25maWd1cmUgc3lzdGVtLgogICAqLwogIHNjaGVtYToge30sCgogIC8qKgogICAqIEluaXQgaGFuZGxlci4gQ2FsbGVkIGR1cmluZyBzY2VuZSBpbml0aWFsaXphdGlvbiBhbmQgaXMgb25seSBydW4gb25jZS4KICAgKiBTeXN0ZW1zIGNhbiB1c2UgdGhpcyB0byBzZXQgaW5pdGlhbCBzdGF0ZS4KICAgKi8KICBpbml0OiBmdW5jdGlvbiAoKSB7IC8qIG5vLW9wICovIH0sCgogIC8qKgogICAqIFVwZGF0ZSBoYW5kbGVyLiBDYWxsZWQgZHVyaW5nIHNjZW5lIGF0dHJpYnV0ZSB1cGRhdGVzLgogICAqIFN5c3RlbXMgY2FuIHVzZSB0aGlzIHRvIGR5bmFtaWNhbGx5IHVwZGF0ZSB0aGVpciBzdGF0ZS4KICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uIChvbGREYXRhKSB7IC8qIG5vLW9wICovIH0sCgogIC8qKgogICAqIEJ1aWxkIGRhdGEgYW5kIGNhbGwgdXBkYXRlIGhhbmRsZXIuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqLwogIHVwZGF0ZVByb3BlcnRpZXM6IGZ1bmN0aW9uIChyYXdEYXRhKSB7CiAgICB2YXIgb2xkRGF0YSA9IHRoaXMuZGF0YTsKICAgIGlmICghT2JqZWN0LmtleXMoc2NoZW1hKS5sZW5ndGgpIHsgcmV0dXJuOyB9CiAgICB0aGlzLmJ1aWxkRGF0YShyYXdEYXRhKTsKICAgIHRoaXMudXBkYXRlKG9sZERhdGEpOwogIH0sCgogIC8qKgogICAqIFBhcnNlIGRhdGEuCiAgICovCiAgYnVpbGREYXRhOiBmdW5jdGlvbiAocmF3RGF0YSkgewogICAgdmFyIHNjaGVtYSA9IHRoaXMuc2NoZW1hOwogICAgaWYgKCFPYmplY3Qua2V5cyhzY2hlbWEpLmxlbmd0aCkgeyByZXR1cm47IH0KICAgIHJhd0RhdGEgPSByYXdEYXRhIHx8IHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlLmNhbGwodGhpcy5zY2VuZUVsLCB0aGlzLm5hbWUpOwogICAgaWYgKGlzU2luZ2xlUHJvcChzY2hlbWEpKSB7CiAgICAgIHRoaXMuZGF0YSA9IHBhcnNlUHJvcGVydHkocmF3RGF0YSwgc2NoZW1hKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGF0YSA9IHBhcnNlUHJvcGVydGllcyhzdHlsZVBhcnNlci5wYXJzZShyYXdEYXRhKSB8fCB7fSwgc2NoZW1hKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBUaWNrIGhhbmRsZXIuCiAgICogQ2FsbGVkIG9uIGVhY2ggdGljayBvZiB0aGUgc2NlbmUgcmVuZGVyIGxvb3AuCiAgICogQWZmZWN0ZWQgYnkgcGxheSBhbmQgcGF1c2UuCiAgICoKICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFNjZW5lIHRpY2sgdGltZS4KICAgKiBAcGFyYW0ge251bWJlcn0gdGltZURlbHRhIC0gRGlmZmVyZW5jZSBpbiBjdXJyZW50IHJlbmRlciB0aW1lIGFuZCBwcmV2aW91cyByZW5kZXIgdGltZS4KICAgKi8KICB0aWNrOiB1bmRlZmluZWQsCgogIC8qKgogICAqIFRvY2sgaGFuZGxlci4KICAgKiBDYWxsZWQgb24gZWFjaCB0b2NrIG9mIHRoZSBzY2VuZSByZW5kZXIgbG9vcC4KICAgKiBBZmZlY3RlZCBieSBwbGF5IGFuZCBwYXVzZS4KICAgKgogICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gU2NlbmUgdGljayB0aW1lLgogICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lRGVsdGEgLSBEaWZmZXJlbmNlIGluIGN1cnJlbnQgcmVuZGVyIHRpbWUgYW5kIHByZXZpb3VzIHJlbmRlciB0aW1lLgogICAqLwogIHRvY2s6IHVuZGVmaW5lZCwKCiAgLyoqCiAgICogQ2FsbGVkIHRvIHN0YXJ0IGFueSBkeW5hbWljIGJlaGF2aW9yIChlLmcuLCBhbmltYXRpb24sIEFJLCBldmVudHMsIHBoeXNpY3MpLgogICAqLwogIHBsYXk6IGZ1bmN0aW9uICgpIHsgLyogbm8tb3AgKi8gfSwKCiAgLyoqCiAgICogQ2FsbGVkIHRvIHN0b3AgYW55IGR5bmFtaWMgYmVoYXZpb3IgKGUuZy4sIGFuaW1hdGlvbiwgQUksIGV2ZW50cywgcGh5c2ljcykuCiAgICovCiAgcGF1c2U6IGZ1bmN0aW9uICgpIHsgLyogbm8tb3AgKi8gfQp9OwoKLyoqCiAqIFJlZ2lzdGVycyBhIHN5c3RlbSB0byBBLUZyYW1lLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIENvbXBvbmVudCBuYW1lLgogKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbiAtIENvbXBvbmVudCBwcm9wZXJ0eSBhbmQgbWV0aG9kcy4KICogQHJldHVybnMge29iamVjdH0gQ29tcG9uZW50LgogKi8KbW9kdWxlLmV4cG9ydHMucmVnaXN0ZXJTeXN0ZW0gPSBmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikgewogIHZhciBpOwogIHZhciBOZXdTeXN0ZW07CiAgdmFyIHByb3RvID0ge307CiAgdmFyIHNjZW5lcyA9IHV0aWxzLmZpbmRBbGxTY2VuZXMoZG9jdW1lbnQpOwoKICAvLyBGb3JtYXQgZGVmaW5pdGlvbiBvYmplY3QgdG8gcHJvdG90eXBlIG9iamVjdC4KICBPYmplY3Qua2V5cyhkZWZpbml0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIHByb3RvW2tleV0gPSB7CiAgICAgIHZhbHVlOiBkZWZpbml0aW9uW2tleV0sCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9OwogIH0pOwoKICBpZiAoc3lzdGVtc1tuYW1lXSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc3lzdGVtIGAnICsgbmFtZSArICdgIGhhcyBiZWVuIGFscmVhZHkgcmVnaXN0ZXJlZC4gJyArCiAgICAgICAgICAgICAgICAgICAgJ0NoZWNrIHRoYXQgeW91IGFyZSBub3QgbG9hZGluZyB0d28gdmVyc2lvbnMgb2YgdGhlIHNhbWUgc3lzdGVtICcgKwogICAgICAgICAgICAgICAgICAgICdvciB0d28gZGlmZmVyZW50IHN5c3RlbXMgb2YgdGhlIHNhbWUgbmFtZS4nKTsKICB9CiAgTmV3U3lzdGVtID0gZnVuY3Rpb24gKHNjZW5lRWwpIHsgU3lzdGVtLmNhbGwodGhpcywgc2NlbmVFbCk7IH07CiAgTmV3U3lzdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3lzdGVtLnByb3RvdHlwZSwgcHJvdG8pOwogIE5ld1N5c3RlbS5wcm90b3R5cGUubmFtZSA9IG5hbWU7CiAgTmV3U3lzdGVtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5ld1N5c3RlbTsKICBOZXdTeXN0ZW0ucHJvdG90eXBlLnNjaGVtYSA9IHV0aWxzLmV4dGVuZChwcm9jZXNzU2NoZW1hKE5ld1N5c3RlbS5wcm90b3R5cGUuc2NoZW1hKSk7CiAgc3lzdGVtc1tuYW1lXSA9IE5ld1N5c3RlbTsKCiAgLy8gSW5pdGlhbGl6ZSBzeXN0ZW1zIGZvciBleGlzdGluZyBzY2VuZXMKICBmb3IgKGkgPSAwOyBpIDwgc2NlbmVzLmxlbmd0aDsgaSsrKSB7IHNjZW5lc1tpXS5pbml0U3lzdGVtKG5hbWUpOyB9Cn07Cgp9LHsiLi4vdXRpbHMvIjoxODIsIi4vY29tcG9uZW50IjoxMDksIi4vc2NoZW1hIjoxMTh9XSwxMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpfZGVyZXFfKCcuL3Bpdm90Jyk7Cgp9LHsiLi9waXZvdCI6MTIyfV0sMTIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyQ29tcG9uZW50ID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5yZWdpc3RlckNvbXBvbmVudDsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vLi4vbGliL3RocmVlJyk7Cgp2YXIgb3JpZ2luYWxQb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CnZhciBvcmlnaW5hbFJvdGF0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKCi8qKgogKiBXcmFwIGVsLm9iamVjdDNEIHdpdGhpbiBhbiBvdXRlciBncm91cC4gQXBwbHkgcGl2b3QgdG8gZWwub2JqZWN0M0QgYXMgcG9zaXRpb24uCiAqLwpyZWdpc3RlckNvbXBvbmVudCgncGl2b3QnLCB7CiAgZGVwZW5kZW5jaWVzOiBbJ3Bvc2l0aW9uJ10sCgogIHNjaGVtYToge3R5cGU6ICd2ZWMzJ30sCgogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgdmFyIGVsID0gdGhpcy5lbDsKICAgIHZhciBvcmlnaW5hbFBhcmVudCA9IGVsLm9iamVjdDNELnBhcmVudDsKICAgIHZhciBvcmlnaW5hbEdyb3VwID0gZWwub2JqZWN0M0Q7CiAgICB2YXIgb3V0ZXJHcm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpOwoKICAgIG9yaWdpbmFsUG9zaXRpb24uY29weShvcmlnaW5hbEdyb3VwLnBvc2l0aW9uKTsKICAgIG9yaWdpbmFsUm90YXRpb24uY29weShvcmlnaW5hbEdyb3VwLnJvdGF0aW9uKTsKCiAgICAvLyBEZXRhY2ggY3VycmVudCBncm91cCBmcm9tIHBhcmVudC4KICAgIG9yaWdpbmFsUGFyZW50LnJlbW92ZShvcmlnaW5hbEdyb3VwKTsKICAgIG91dGVyR3JvdXAuYWRkKG9yaWdpbmFsR3JvdXApOwoKICAgIC8vIFNldCBuZXcgZ3JvdXAgYXMgdGhlIG91dGVyIGdyb3VwLgogICAgb3JpZ2luYWxQYXJlbnQuYWRkKG91dGVyR3JvdXApOwoKICAgIC8vIFNldCBvdXRlciBncm91cCBhcyBuZXcgb2JqZWN0M0QuCiAgICBlbC5vYmplY3QzRCA9IG91dGVyR3JvdXA7CgogICAgLy8gQXBwbHkgcGl2b3QgdG8gb3JpZ2luYWwgZ3JvdXAuCiAgICBvcmlnaW5hbEdyb3VwLnBvc2l0aW9uLnNldCgtMSAqIGRhdGEueCwgLTEgKiBkYXRhLnksIC0xICogZGF0YS56KTsKCiAgICAvLyBPZmZzZXQgdGhlIHBpdm90IHNvIHRoYXQgd29ybGQgcG9zaXRpb24gbm90IGFmZmVjdGVkLgogICAgLy8gQW5kIHJlc3RvcmUgcG9zaXRpb24gb250byBvdXRlciBncm91cC4KICAgIG91dGVyR3JvdXAucG9zaXRpb24uc2V0KGRhdGEueCArIG9yaWdpbmFsUG9zaXRpb24ueCwgZGF0YS55ICsgb3JpZ2luYWxQb3NpdGlvbi55LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS56ICsgb3JpZ2luYWxQb3NpdGlvbi56KTsKCiAgICAvLyBUcmFuc2ZlciByb3RhdGlvbiB0byBvdXRlciBncm91cC4KICAgIG91dGVyR3JvdXAucm90YXRpb24uY29weShvcmlnaW5hbEdyb3VwLnJvdGF0aW9uKTsKICAgIG9yaWdpbmFsR3JvdXAucm90YXRpb24uc2V0KDAsIDAsIDApOwogIH0KfSk7Cgp9LHsiLi4vLi4vY29yZS9jb21wb25lbnQiOjEwOSwiLi4vLi4vbGliL3RocmVlIjoxNTd9XSwxMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKioKICogQ29tbW9uIG1lc2ggZGVmYXVsdHMsIG1hcHBpbmdzLCBhbmQgdHJhbnNmb3Jtcy4KICovCnZhciBjb21wb25lbnRzID0gX2RlcmVxXygnLi4vLi4vY29yZS9jb21wb25lbnQnKS5jb21wb25lbnRzOwp2YXIgc2hhZGVycyA9IF9kZXJlcV8oJy4uLy4uL2NvcmUvc2hhZGVyJykuc2hhZGVyczsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJyk7Cgp2YXIgbWF0ZXJpYWxNYXBwaW5ncyA9IHt9OwpPYmplY3Qua2V5cyhjb21wb25lbnRzLm1hdGVyaWFsLnNjaGVtYSkuZm9yRWFjaChhZGRNYXBwaW5nKTsKT2JqZWN0LmtleXMoc2hhZGVycy5zdGFuZGFyZC5zY2hlbWEpLmZvckVhY2goYWRkTWFwcGluZyk7CgpmdW5jdGlvbiBhZGRNYXBwaW5nIChwcm9wKSB7CiAgLy8gVG8gaHlwaGVuYXRlZC4KICB2YXIgaHRtbEF0dHJOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpOwogIGlmIChwcm9wID09PSAnZm9nJykgeyBodG1sQXR0ck5hbWUgPSAnbWF0ZXJpYWwtZm9nJzsgfQogIGlmIChwcm9wID09PSAndmlzaWJsZScpIHsgaHRtbEF0dHJOYW1lID0gJ21hdGVyaWFsLXZpc2libGUnOyB9CiAgbWF0ZXJpYWxNYXBwaW5nc1todG1sQXR0ck5hbWVdID0gJ21hdGVyaWFsLicgKyBwcm9wOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE1lc2hNaXhpbiAoKSB7CiAgcmV0dXJuIHsKICAgIGRlZmF1bHRDb21wb25lbnRzOiB7bWF0ZXJpYWw6IHt9fSwKICAgIG1hcHBpbmdzOiB1dGlscy5leHRlbmQoe30sIG1hdGVyaWFsTWFwcGluZ3MpCiAgfTsKfTsKCn0seyIuLi8uLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuLi8uLi9jb3JlL3NoYWRlciI6MTE5LCIuLi8uLi91dGlscy8iOjE4Mn1dLDEyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oJy4vcHJpbWl0aXZlcy9hLWNhbWVyYScpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS1jdXJzb3InKTsKX2RlcmVxXygnLi9wcmltaXRpdmVzL2EtY3VydmVkaW1hZ2UnKTsKX2RlcmVxXygnLi9wcmltaXRpdmVzL2EtZ2x0Zi1tb2RlbCcpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS1pbWFnZScpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS1saWdodCcpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS1saW5rJyk7Cl9kZXJlcV8oJy4vcHJpbWl0aXZlcy9hLW9iai1tb2RlbCcpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS1za3knKTsKX2RlcmVxXygnLi9wcmltaXRpdmVzL2Etc291bmQnKTsKX2RlcmVxXygnLi9wcmltaXRpdmVzL2EtdGV4dCcpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS12aWRlbycpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvYS12aWRlb3NwaGVyZScpOwpfZGVyZXFfKCcuL3ByaW1pdGl2ZXMvbWVzaFByaW1pdGl2ZXMnKTsKCn0seyIuL3ByaW1pdGl2ZXMvYS1jYW1lcmEiOjEyNiwiLi9wcmltaXRpdmVzL2EtY3Vyc29yIjoxMjcsIi4vcHJpbWl0aXZlcy9hLWN1cnZlZGltYWdlIjoxMjgsIi4vcHJpbWl0aXZlcy9hLWdsdGYtbW9kZWwiOjEyOSwiLi9wcmltaXRpdmVzL2EtaW1hZ2UiOjEzMCwiLi9wcmltaXRpdmVzL2EtbGlnaHQiOjEzMSwiLi9wcmltaXRpdmVzL2EtbGluayI6MTMyLCIuL3ByaW1pdGl2ZXMvYS1vYmotbW9kZWwiOjEzMywiLi9wcmltaXRpdmVzL2Etc2t5IjoxMzQsIi4vcHJpbWl0aXZlcy9hLXNvdW5kIjoxMzUsIi4vcHJpbWl0aXZlcy9hLXRleHQiOjEzNiwiLi9wcmltaXRpdmVzL2EtdmlkZW8iOjEzNywiLi9wcmltaXRpdmVzL2EtdmlkZW9zcGhlcmUiOjEzOCwiLi9wcmltaXRpdmVzL21lc2hQcmltaXRpdmVzIjoxMzl9XSwxMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgQUVudGl0eSA9IF9kZXJlcV8oJy4uLy4uL2NvcmUvYS1lbnRpdHknKTsKdmFyIGNvbXBvbmVudHMgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2NvbXBvbmVudCcpLmNvbXBvbmVudHM7CnZhciByZWdpc3RlckVsZW1lbnQgPSBfZGVyZXFfKCcuLi8uLi9jb3JlL2EtcmVnaXN0ZXItZWxlbWVudCcpLnJlZ2lzdGVyRWxlbWVudDsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vdXRpbHMvJyk7Cgp2YXIgZGVidWcgPSB1dGlscy5kZWJ1ZzsKdmFyIHNldENvbXBvbmVudFByb3BlcnR5ID0gdXRpbHMuZW50aXR5LnNldENvbXBvbmVudFByb3BlcnR5Owp2YXIgbG9nID0gZGVidWcoJ2V4dHJhczpwcmltaXRpdmVzOmRlYnVnJyk7CnZhciB3YXJuID0gZGVidWcoJ2V4dHJhczpwcmltaXRpdmVzOndhcm4nKTsKCnZhciBwcmltaXRpdmVzID0gbW9kdWxlLmV4cG9ydHMucHJpbWl0aXZlcyA9IHt9OwoKbW9kdWxlLmV4cG9ydHMucmVnaXN0ZXJQcmltaXRpdmUgPSBmdW5jdGlvbiByZWdpc3RlclByaW1pdGl2ZSAobmFtZSwgZGVmaW5pdGlvbikgewogIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgbG9nKCdSZWdpc3RlcmluZyA8JXM+JywgbmFtZSk7CgogIC8vIERlcHJlY2F0aW9uIHdhcm5pbmcgZm9yIGRlZmF1bHRBdHRyaWJ1dGVzIHVzYWdlLgogIGlmIChkZWZpbml0aW9uLmRlZmF1bHRBdHRyaWJ1dGVzKSB7CiAgICB3YXJuKCJUaGUgJ2RlZmF1bHRBdHRyaWJ1dGVzJyBvYmplY3QgaXMgZGVwcmVjYXRlZC4gVXNlICdkZWZhdWx0Q29tcG9uZW50cycgaW5zdGVhZC4iKTsKICB9CgogIHZhciBwcmltaXRpdmUgPSByZWdpc3RlckVsZW1lbnQobmFtZSwgewogICAgcHJvdG90eXBlOiBPYmplY3QuY3JlYXRlKEFFbnRpdHkucHJvdG90eXBlLCB7CiAgICAgIGRlZmF1bHRDb21wb25lbnRzRnJvbVByaW1pdGl2ZTogewogICAgICAgIHZhbHVlOiBkZWZpbml0aW9uLmRlZmF1bHRDb21wb25lbnRzIHx8IGRlZmluaXRpb24uZGVmYXVsdEF0dHJpYnV0ZXMgfHwge30KICAgICAgfSwKICAgICAgZGVwcmVjYXRlZDoge3ZhbHVlOiBkZWZpbml0aW9uLmRlcHJlY2F0ZWQgfHwgbnVsbH0sCiAgICAgIGRlcHJlY2F0ZWRNYXBwaW5nczoge3ZhbHVlOiBkZWZpbml0aW9uLmRlcHJlY2F0ZWRNYXBwaW5ncyB8fCB7fX0sCiAgICAgIG1hcHBpbmdzOiB7dmFsdWU6IGRlZmluaXRpb24ubWFwcGluZ3MgfHwge319LAoKICAgICAgY3JlYXRlZENhbGxiYWNrOiB7CiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmIChkZWZpbml0aW9uLmRlcHJlY2F0ZWQpIHsgY29uc29sZS53YXJuKGRlZmluaXRpb24uZGVwcmVjYXRlZCk7IH0KICAgICAgICAgIHRoaXMucmVzb2x2ZU1hcHBpbmdDb2xsaXNpb25zKCk7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIElmIGEgbWFwcGluZyBjb2xsaWRlcyB3aXRoIGEgcmVnaXN0ZXJlZCBjb21wb25lbnQgbmFtZQogICAgICAgKiBpdCByZW5hbWVzIHRoZSBtYXBwaW5nIHRvIGNvbXBvbmVudG5hbWUtcHJvcGVydHkKICAgICAgICovCiAgICAgIHJlc29sdmVNYXBwaW5nQ29sbGlzaW9uczogewogICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLm1hcHBpbmdzOwogICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgT2JqZWN0LmtleXMobWFwcGluZ3MpLmZvckVhY2goZnVuY3Rpb24gcmVzb2x2ZUNvbGxpc2lvbiAoa2V5KSB7CiAgICAgICAgICAgIHZhciBuZXdBdHRyaWJ1dGU7CiAgICAgICAgICAgIGlmIChrZXkgIT09IGtleS50b0xvd2VyQ2FzZSgpKSB7IHdhcm4oJ01hcHBpbmcga2V5cyBzaG91bGQgYmUgc3BlY2lmaWVkIGluIGxvd2VyIGNhc2UuIFRoZSBtYXBwaW5nIGtleSAnICsga2V5ICsgJyBtYXkgbm90IGJlIHJlY29nbml6ZWQnKTsgfQogICAgICAgICAgICBpZiAoY29tcG9uZW50c1trZXldKSB7CiAgICAgICAgICAgICAgbmV3QXR0cmlidXRlID0gbWFwcGluZ3Nba2V5XS5yZXBsYWNlKCcuJywgJy0nKTsKICAgICAgICAgICAgICBtYXBwaW5nc1tuZXdBdHRyaWJ1dGVdID0gbWFwcGluZ3Nba2V5XTsKICAgICAgICAgICAgICBkZWxldGUgbWFwcGluZ3Nba2V5XTsKICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBwcmltaXRpdmUgJyArIHNlbGYudGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgJyBoYXMgYSBtYXBwaW5nIGNvbGxpc2lvbi4gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgYXR0cmlidXRlICcgKyBrZXkgKyAnIGhhcyB0aGUgc2FtZSBuYW1lIGFzIGEgcmVnaXN0ZXJlZCBjb21wb25lbnQgYW5kJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICcgaGFzIGJlZW4gcmVuYW1lZCB0byAnICsgbmV3QXR0cmlidXRlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgZ2V0RXh0cmFDb21wb25lbnRzOiB7CiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBhdHRyOwogICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICB2YXIgaTsKICAgICAgICAgIHZhciBtYXBwaW5nOwogICAgICAgICAgdmFyIG1peGluczsKICAgICAgICAgIHZhciBwYXRoOwogICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICAgIC8vIEdhdGhlciBjb21wb25lbnQgZGF0YSBmcm9tIGRlZmF1bHQgY29tcG9uZW50cy4KICAgICAgICAgIGRhdGEgPSB1dGlscy5jbG9uZSh0aGlzLmRlZmF1bHRDb21wb25lbnRzRnJvbVByaW1pdGl2ZSk7CgogICAgICAgICAgLy8gRmFjdG9yIGluIG1peGlucyB0byBvdmVyd3JpdGUgZGVmYXVsdCBjb21wb25lbnRzLgogICAgICAgICAgbWl4aW5zID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ21peGluJyk7CiAgICAgICAgICBpZiAobWl4aW5zKSB7CiAgICAgICAgICAgIG1peGlucyA9IG1peGlucy50cmltKCkuc3BsaXQoJyAnKTsKICAgICAgICAgICAgbWl4aW5zLmZvckVhY2goZnVuY3Rpb24gYXBwbHlNaXhpbiAobWl4aW5JZCkgewogICAgICAgICAgICAgIHZhciBtaXhpbkNvbXBvbmVudHMgPSBzZWxmLnNjZW5lRWwucXVlcnlTZWxlY3RvcignIycgKyBtaXhpbklkKS5jb21wb25lbnRDYWNoZTsKICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtaXhpbkNvbXBvbmVudHMpLmZvckVhY2goZnVuY3Rpb24gc2V0Q29tcG9uZW50IChuYW1lKSB7CiAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gZXh0ZW5kKGRhdGFbbmFtZV0sIG1peGluQ29tcG9uZW50c1tuYW1lXSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEdhdGhlciBjb21wb25lbnQgZGF0YSBmcm9tIG1hcHBpbmdzLgogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICBtYXBwaW5nID0gdGhpcy5tYXBwaW5nc1thdHRyLm5hbWVdOwogICAgICAgICAgICBpZiAobWFwcGluZykgewogICAgICAgICAgICAgIHBhdGggPSB1dGlscy5lbnRpdHkuZ2V0Q29tcG9uZW50UHJvcGVydHlQYXRoKG1hcHBpbmcpOwogICAgICAgICAgICAgIGlmIChwYXRoLmNvbnN0cnVjdG9yID09PSBBcnJheSkgewogICAgICAgICAgICAgICAgZGF0YVtwYXRoWzBdXSA9IGRhdGFbcGF0aFswXV0gfHwge307CiAgICAgICAgICAgICAgICBkYXRhW3BhdGhbMF1dW3BhdGhbMV1dID0gYXR0ci52YWx1ZS50cmltKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRhdGFbcGF0aF0gPSBhdHRyLnZhbHVlLnRyaW0oKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZGF0YTsKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEZvciB0aGUgYmFzZSB0byBiZSBleHRlbnNpYmxlLCBib3RoIG9iamVjdHMgbXVzdCBiZSBwdXJlIEphdmFTY3JpcHQgb2JqZWN0cy4KICAgICAgICAgICAqIFRoZSBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYmFzZSBpcyB1bmRlZmluZWQsIG9yIG51bGwgb3IgYSBwdXJlIG9iamVjdC4KICAgICAgICAgICAqLwogICAgICAgICAgZnVuY3Rpb24gZXh0ZW5kIChiYXNlLCBleHRlbnNpb24pIHsKICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGJhc2UpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNvcHkoZXh0ZW5zaW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXh0ZW5zaW9uKSkgewogICAgICAgICAgICAgIHJldHVybiBjb3B5KGJhc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc1B1cmVPYmplY3QoYmFzZSkgJiYgaXNQdXJlT2JqZWN0KGV4dGVuc2lvbikpIHsKICAgICAgICAgICAgICByZXR1cm4gdXRpbHMuZXh0ZW5kRGVlcChiYXNlLCBleHRlbnNpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjb3B5KGV4dGVuc2lvbik7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNVbmRlZmluZWQgKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGNvcHkgKHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChpc1B1cmVPYmplY3QodmFsdWUpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmV4dGVuZERlZXAoe30sIHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNQdXJlT2JqZWN0ICh2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogU3luYyB0byBhdHRyaWJ1dGUgdG8gY29tcG9uZW50IHByb3BlcnR5IHdoZW5ldmVyIG1hcHBlZCBhdHRyaWJ1dGUgY2hhbmdlcy4KICAgICAgICogSWYgYXR0cmlidXRlIGlzIG1hcHBlZCB0byBhIGNvbXBvbmVudCBwcm9wZXJ0eSwgc2V0IHRoZSBjb21wb25lbnQgcHJvcGVydHkgdXNpbmcKICAgICAgICogdGhlIGF0dHJpYnV0ZSB2YWx1ZS4KICAgICAgICovCiAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazogewogICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoYXR0ciwgb2xkVmFsLCB2YWx1ZSkgewogICAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLm1hcHBpbmdzW2F0dHJdOwoKICAgICAgICAgIGlmIChhdHRyIGluIHRoaXMuZGVwcmVjYXRlZE1hcHBpbmdzKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLmRlcHJlY2F0ZWRNYXBwaW5nc1thdHRyXSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCFhdHRyIHx8ICFjb21wb25lbnROYW1lKSB7IHJldHVybjsgfQoKICAgICAgICAgIC8vIFNldCB2YWx1ZS4KICAgICAgICAgIHNldENvbXBvbmVudFByb3BlcnR5KHRoaXMsIGNvbXBvbmVudE5hbWUsIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pCiAgfSk7CgogIC8vIFN0b3JlLgogIHByaW1pdGl2ZXNbbmFtZV0gPSBwcmltaXRpdmU7CiAgcmV0dXJuIHByaW1pdGl2ZTsKfTsKCi8qKgogKiBBZGQgY29tcG9uZW50IG1hcHBpbmdzIHVzaW5nIHNjaGVtYS4KICovCmZ1bmN0aW9uIGFkZENvbXBvbmVudE1hcHBpbmcgKGNvbXBvbmVudE5hbWUsIG1hcHBpbmdzKSB7CiAgdmFyIHNjaGVtYSA9IGNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uc2NoZW1hOwogIE9iamVjdC5rZXlzKHNjaGVtYSkubWFwKGZ1bmN0aW9uIChwcm9wKSB7CiAgICAvLyBIeXBoZW5hdGUgd2hlcmUgdGhlcmUgaXMgY2FtZWxDYXNlLgogICAgdmFyIGF0dHJOYW1lID0gcHJvcC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpOwogICAgLy8gSWYgdGhlcmUgaXMgYSBtYXBwaW5nIGNvbGxpc2lvbiwgcHJlZml4IHdpdGggY29tcG9uZW50IG5hbWUgYW5kIGh5cGhlbi4KICAgIGlmIChtYXBwaW5nc1thdHRyTmFtZV0gIT09IHVuZGVmaW5lZCkgeyBhdHRyTmFtZSA9IGNvbXBvbmVudE5hbWUgKyAnLScgKyBwcm9wOyB9CiAgICBtYXBwaW5nc1thdHRyTmFtZV0gPSBjb21wb25lbnROYW1lICsgJy4nICsgcHJvcDsKICB9KTsKfQoKLyoqCiAqIEhlbHBlciB0byBkZWZpbmUgYSBwcmltaXRpdmUsIGJ1aWxkaW5nIG1hcHBpbmdzIHVzaW5nIGEgY29tcG9uZW50IHNjaGVtYS4KICovCmZ1bmN0aW9uIGRlZmluZVByaW1pdGl2ZSAodGFnTmFtZSwgZGVmYXVsdENvbXBvbmVudHMsIG1hcHBpbmdzKSB7CiAgLy8gSWYgbm8gaW5pdGlhbCBtYXBwaW5ncyBwcm92aWRlZCwgc3RhcnQgZnJvbSBlbXB0eSBtYXAuCiAgbWFwcGluZ3MgPSBtYXBwaW5ncyB8fCB7fTsKCiAgLy8gRnJvbSB0aGUgZGVmYXVsdCBjb21wb25lbnRzLCBhZGQgbWFwcGluZyBhdXRvbWFnaWNhbGx5LgogIE9iamVjdC5rZXlzKGRlZmF1bHRDb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gYnVpbGRNYXBwaW5ncyAoY29tcG9uZW50TmFtZSkgewogICAgYWRkQ29tcG9uZW50TWFwcGluZyhjb21wb25lbnROYW1lLCBtYXBwaW5ncyk7CiAgfSk7CgogIC8vIFJlZ2lzdGVyIHRoZSBwcmltaXRpdmUuCiAgbW9kdWxlLmV4cG9ydHMucmVnaXN0ZXJQcmltaXRpdmUodGFnTmFtZSwgdXRpbHMuZXh0ZW5kRGVlcCh7fSwgbnVsbCwgewogICAgZGVmYXVsdENvbXBvbmVudHM6IGRlZmF1bHRDb21wb25lbnRzLAogICAgbWFwcGluZ3M6IG1hcHBpbmdzCiAgfSkpOwp9Cm1vZHVsZS5leHBvcnRzLmRlZmluZVByaW1pdGl2ZSA9IGRlZmluZVByaW1pdGl2ZTsKCn0seyIuLi8uLi9jb3JlL2EtZW50aXR5IjoxMDUsIi4uLy4uL2NvcmUvYS1yZWdpc3Rlci1lbGVtZW50IjoxMDgsIi4uLy4uL2NvcmUvY29tcG9uZW50IjoxMDksIi4uLy4uL3V0aWxzLyI6MTgyfV0sMTI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2EtY2FtZXJhJywgewogIGRlZmF1bHRDb21wb25lbnRzOiB7CiAgICAnY2FtZXJhJzoge30sCiAgICAnbG9vay1jb250cm9scyc6IHt9LAogICAgJ3dhc2QtY29udHJvbHMnOiB7fSwKICAgICdwb3NpdGlvbic6IHt4OiAwLCB5OiAxLjYsIHo6IDB9CiAgfSwKCiAgbWFwcGluZ3M6IHsKICAgIGFjdGl2ZTogJ2NhbWVyYS5hY3RpdmUnLAogICAgZmFyOiAnY2FtZXJhLmZhcicsCiAgICBmb3Y6ICdjYW1lcmEuZm92JywKICAgICdsb29rLWNvbnRyb2xzLWVuYWJsZWQnOiAnbG9vay1jb250cm9scy5lbmFibGVkJywKICAgIG5lYXI6ICdjYW1lcmEubmVhcicsCiAgICAncG9pbnRlci1sb2NrLWVuYWJsZWQnOiAnbG9vay1jb250cm9scy5wb2ludGVyTG9ja0VuYWJsZWQnLAogICAgJ3dhc2QtY29udHJvbHMtZW5hYmxlZCc6ICd3YXNkLWNvbnRyb2xzLmVuYWJsZWQnLAogICAgJ3JldmVyc2UtbW91c2UtZHJhZyc6ICdsb29rLWNvbnRyb2xzLnJldmVyc2VNb3VzZURyYWcnLAogICAgem9vbTogJ2NhbWVyYS56b29tJwogIH0KfSk7Cgp9LHsiLi4vcHJpbWl0aXZlcyI6MTI1fV0sMTI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdldE1lc2hNaXhpbiA9IF9kZXJlcV8oJy4uL2dldE1lc2hNaXhpbicpOwp2YXIgcmVnaXN0ZXJQcmltaXRpdmUgPSBfZGVyZXFfKCcuLi9wcmltaXRpdmVzJykucmVnaXN0ZXJQcmltaXRpdmU7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uLy4uLy4uL3V0aWxzLycpOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2EtY3Vyc29yJywgdXRpbHMuZXh0ZW5kRGVlcCh7fSwgZ2V0TWVzaE1peGluKCksIHsKICBkZWZhdWx0Q29tcG9uZW50czogewogICAgY3Vyc29yOiB7fSwKICAgIGdlb21ldHJ5OiB7CiAgICAgIHByaW1pdGl2ZTogJ3JpbmcnLAogICAgICByYWRpdXNPdXRlcjogMC4wMTYsCiAgICAgIHJhZGl1c0lubmVyOiAwLjAxLAogICAgICBzZWdtZW50c1RoZXRhOiAzMgogICAgfSwKICAgIG1hdGVyaWFsOiB7CiAgICAgIGNvbG9yOiAnIzAwMCcsCiAgICAgIHNoYWRlcjogJ2ZsYXQnLAogICAgICBvcGFjaXR5OiAwLjgKICAgIH0sCiAgICBwb3NpdGlvbjogewogICAgICB4OiAwLAogICAgICB5OiAwLAogICAgICB6OiAtMQogICAgfQogIH0sCgogIG1hcHBpbmdzOiB7CiAgICBmYXI6ICdyYXljYXN0ZXIuZmFyJywKICAgIGZ1c2U6ICdjdXJzb3IuZnVzZScsCiAgICAnZnVzZS10aW1lb3V0JzogJ2N1cnNvci5mdXNlVGltZW91dCcsCiAgICBpbnRlcnZhbDogJ3JheWNhc3Rlci5pbnRlcnZhbCcsCiAgICBvYmplY3RzOiAncmF5Y2FzdGVyLm9iamVjdHMnCiAgfQp9KSk7Cgp9LHsiLi4vLi4vLi4vdXRpbHMvIjoxODIsIi4uL2dldE1lc2hNaXhpbiI6MTIzLCIuLi9wcmltaXRpdmVzIjoxMjV9XSwxMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2V0TWVzaE1peGluID0gX2RlcmVxXygnLi4vZ2V0TWVzaE1peGluJyk7CnZhciByZWdpc3RlclByaW1pdGl2ZSA9IF9kZXJlcV8oJy4uL3ByaW1pdGl2ZXMnKS5yZWdpc3RlclByaW1pdGl2ZTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vLi4vdXRpbHMvJyk7CgpyZWdpc3RlclByaW1pdGl2ZSgnYS1jdXJ2ZWRpbWFnZScsIHV0aWxzLmV4dGVuZERlZXAoe30sIGdldE1lc2hNaXhpbigpLCB7CiAgZGVmYXVsdENvbXBvbmVudHM6IHsKICAgIGdlb21ldHJ5OiB7CiAgICAgIGhlaWdodDogMSwKICAgICAgcHJpbWl0aXZlOiAnY3lsaW5kZXInLAogICAgICByYWRpdXM6IDIsCiAgICAgIHNlZ21lbnRzUmFkaWFsOiA0OCwKICAgICAgdGhldGFMZW5ndGg6IDI3MCwKICAgICAgb3BlbkVuZGVkOiB0cnVlLAogICAgICB0aGV0YVN0YXJ0OiAwCiAgICB9LAogICAgbWF0ZXJpYWw6IHsKICAgICAgY29sb3I6ICcjRkZGJywKICAgICAgc2hhZGVyOiAnZmxhdCcsCiAgICAgIHNpZGU6ICdkb3VibGUnLAogICAgICB0cmFuc3BhcmVudDogdHJ1ZSwKICAgICAgcmVwZWF0OiAnLTEgMScKICAgIH0KICB9LAoKICBtYXBwaW5nczogewogICAgaGVpZ2h0OiAnZ2VvbWV0cnkuaGVpZ2h0JywKICAgICdvcGVuLWVuZGVkJzogJ2dlb21ldHJ5Lm9wZW5FbmRlZCcsCiAgICByYWRpdXM6ICdnZW9tZXRyeS5yYWRpdXMnLAogICAgc2VnbWVudHM6ICdnZW9tZXRyeS5zZWdtZW50c1JhZGlhbCcsCiAgICBzdGFydDogJ2dlb21ldHJ5LnRoZXRhU3RhcnQnLAogICAgJ3RoZXRhLWxlbmd0aCc6ICdnZW9tZXRyeS50aGV0YUxlbmd0aCcsCiAgICAndGhldGEtc3RhcnQnOiAnZ2VvbWV0cnkudGhldGFTdGFydCcsCiAgICAnd2lkdGgnOiAnZ2VvbWV0cnkudGhldGFMZW5ndGgnCiAgfQp9KSk7Cgp9LHsiLi4vLi4vLi4vdXRpbHMvIjoxODIsIi4uL2dldE1lc2hNaXhpbiI6MTIzLCIuLi9wcmltaXRpdmVzIjoxMjV9XSwxMjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJQcmltaXRpdmUgPSBfZGVyZXFfKCcuLi9wcmltaXRpdmVzJykucmVnaXN0ZXJQcmltaXRpdmU7CgpyZWdpc3RlclByaW1pdGl2ZSgnYS1nbHRmLW1vZGVsJywgewogIG1hcHBpbmdzOiB7CiAgICBzcmM6ICdnbHRmLW1vZGVsJwogIH0KfSk7Cgp9LHsiLi4vcHJpbWl0aXZlcyI6MTI1fV0sMTMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdldE1lc2hNaXhpbiA9IF9kZXJlcV8oJy4uL2dldE1lc2hNaXhpbicpOwp2YXIgcmVnaXN0ZXJQcmltaXRpdmUgPSBfZGVyZXFfKCcuLi9wcmltaXRpdmVzJykucmVnaXN0ZXJQcmltaXRpdmU7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uLy4uLy4uL3V0aWxzLycpOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2EtaW1hZ2UnLCB1dGlscy5leHRlbmREZWVwKHt9LCBnZXRNZXNoTWl4aW4oKSwgewogIGRlZmF1bHRDb21wb25lbnRzOiB7CiAgICBnZW9tZXRyeTogewogICAgICBwcmltaXRpdmU6ICdwbGFuZScKICAgIH0sCiAgICBtYXRlcmlhbDogewogICAgICBjb2xvcjogJyNGRkYnLAogICAgICBzaGFkZXI6ICdmbGF0JywKICAgICAgc2lkZTogJ2RvdWJsZScsCiAgICAgIHRyYW5zcGFyZW50OiB0cnVlCiAgICB9CiAgfSwKCiAgbWFwcGluZ3M6IHsKICAgIGhlaWdodDogJ2dlb21ldHJ5LmhlaWdodCcsCiAgICB3aWR0aDogJ2dlb21ldHJ5LndpZHRoJwogIH0KfSkpOwoKfSx7Ii4uLy4uLy4uL3V0aWxzLyI6MTgyLCIuLi9nZXRNZXNoTWl4aW4iOjEyMywiLi4vcHJpbWl0aXZlcyI6MTI1fV0sMTMxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2EtbGlnaHQnLCB7CiAgZGVmYXVsdENvbXBvbmVudHM6IHsKICAgIGxpZ2h0OiB7fQogIH0sCgogIG1hcHBpbmdzOiB7CiAgICBhbmdsZTogJ2xpZ2h0LmFuZ2xlJywKICAgIGNvbG9yOiAnbGlnaHQuY29sb3InLAogICAgJ2dyb3VuZC1jb2xvcic6ICdsaWdodC5ncm91bmRDb2xvcicsCiAgICBkZWNheTogJ2xpZ2h0LmRlY2F5JywKICAgIGRpc3RhbmNlOiAnbGlnaHQuZGlzdGFuY2UnLAogICAgaW50ZW5zaXR5OiAnbGlnaHQuaW50ZW5zaXR5JywKICAgIHBlbnVtYnJhOiAnbGlnaHQucGVudW1icmEnLAogICAgdHlwZTogJ2xpZ2h0LnR5cGUnLAogICAgdGFyZ2V0OiAnbGlnaHQudGFyZ2V0JwogIH0KfSk7Cgp9LHsiLi4vcHJpbWl0aXZlcyI6MTI1fV0sMTMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2EtbGluaycsIHsKICBkZWZhdWx0Q29tcG9uZW50czogewogICAgbGluazogewogICAgICB2aXN1YWxBc3BlY3RFbmFibGVkOiB0cnVlCiAgICB9CiAgfSwKCiAgbWFwcGluZ3M6IHsKICAgIGhyZWY6ICdsaW5rLmhyZWYnLAogICAgaW1hZ2U6ICdsaW5rLmltYWdlJywKICAgIHRpdGxlOiAnbGluay50aXRsZScKICB9Cn0pOwoKfSx7Ii4uL3ByaW1pdGl2ZXMiOjEyNX1dLDEzMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXNoTWl4aW4gPSBfZGVyZXFfKCcuLi9nZXRNZXNoTWl4aW4nKSgpOwp2YXIgcmVnaXN0ZXJQcmltaXRpdmUgPSBfZGVyZXFfKCcuLi9wcmltaXRpdmVzJykucmVnaXN0ZXJQcmltaXRpdmU7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uLy4uLy4uL3V0aWxzLycpOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2Etb2JqLW1vZGVsJywgdXRpbHMuZXh0ZW5kRGVlcCh7fSwgbWVzaE1peGluLCB7CiAgZGVmYXVsdENvbXBvbmVudHM6IHsKICAgICdvYmotbW9kZWwnOiB7fQogIH0sCgogIG1hcHBpbmdzOiB7CiAgICBzcmM6ICdvYmotbW9kZWwub2JqJywKICAgIG10bDogJ29iai1tb2RlbC5tdGwnCiAgfQp9KSk7Cgp9LHsiLi4vLi4vLi4vdXRpbHMvIjoxODIsIi4uL2dldE1lc2hNaXhpbiI6MTIzLCIuLi9wcmltaXRpdmVzIjoxMjV9XSwxMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2V0TWVzaE1peGluID0gX2RlcmVxXygnLi4vZ2V0TWVzaE1peGluJyk7CnZhciByZWdpc3RlclByaW1pdGl2ZSA9IF9kZXJlcV8oJy4uL3ByaW1pdGl2ZXMnKS5yZWdpc3RlclByaW1pdGl2ZTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vLi4vdXRpbHMvJyk7CnZhciBtZXNoUHJpbWl0aXZlcyA9IF9kZXJlcV8oJy4vbWVzaFByaW1pdGl2ZXMnKTsKCnJlZ2lzdGVyUHJpbWl0aXZlKCdhLXNreScsIHV0aWxzLmV4dGVuZERlZXAoe30sIGdldE1lc2hNaXhpbigpLCB7CiAgZGVmYXVsdENvbXBvbmVudHM6IHsKICAgIGdlb21ldHJ5OiB7CiAgICAgIHByaW1pdGl2ZTogJ3NwaGVyZScsCiAgICAgIHJhZGl1czogNTAwLAogICAgICBzZWdtZW50c1dpZHRoOiA2NCwKICAgICAgc2VnbWVudHNIZWlnaHQ6IDMyCiAgICB9LAogICAgbWF0ZXJpYWw6IHsKICAgICAgY29sb3I6ICcjRkZGJywKICAgICAgc2lkZTogJ2JhY2snLAogICAgICBzaGFkZXI6ICdmbGF0JywKICAgICAgbnBvdDogdHJ1ZQogICAgfSwKICAgIHNjYWxlOiAnLTEgMSAxJwogIH0sCgogIG1hcHBpbmdzOiB1dGlscy5leHRlbmREZWVwKHt9LCBtZXNoUHJpbWl0aXZlc1snYS1zcGhlcmUnXS5wcm90b3R5cGUubWFwcGluZ3MpCn0pKTsKCn0seyIuLi8uLi8uLi91dGlscy8iOjE4MiwiLi4vZ2V0TWVzaE1peGluIjoxMjMsIi4uL3ByaW1pdGl2ZXMiOjEyNSwiLi9tZXNoUHJpbWl0aXZlcyI6MTM5fV0sMTM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwoKcmVnaXN0ZXJQcmltaXRpdmUoJ2Etc291bmQnLCB7CiAgZGVmYXVsdENvbXBvbmVudHM6IHsKICAgIHNvdW5kOiB7fQogIH0sCgogIG1hcHBpbmdzOiB7CiAgICBzcmM6ICdzb3VuZC5zcmMnLAogICAgb246ICdzb3VuZC5vbicsCiAgICBhdXRvcGxheTogJ3NvdW5kLmF1dG9wbGF5JywKICAgIGxvb3A6ICdzb3VuZC5sb29wJywKICAgIHZvbHVtZTogJ3NvdW5kLnZvbHVtZScKICB9Cn0pOwoKfSx7Ii4uL3ByaW1pdGl2ZXMiOjEyNX1dLDEzNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDxhLXRleHQ+IHVzaW5nIGBkZWZpbmVQcmltaXRpdmVgIGhlbHBlci4KdmFyIGRlZmluZVByaW1pdGl2ZSA9IF9kZXJlcV8oJy4uL3ByaW1pdGl2ZXMnKS5kZWZpbmVQcmltaXRpdmU7CmRlZmluZVByaW1pdGl2ZSgnYS10ZXh0Jywge3RleHQ6IHthbmNob3I6ICdhbGlnbicsIHdpZHRoOiA1fX0pOwoKfSx7Ii4uL3ByaW1pdGl2ZXMiOjEyNX1dLDEzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRNZXNoTWl4aW4gPSBfZGVyZXFfKCcuLi9nZXRNZXNoTWl4aW4nKTsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi8uLi8uLi91dGlscy8nKTsKCnJlZ2lzdGVyUHJpbWl0aXZlKCdhLXZpZGVvJywgdXRpbHMuZXh0ZW5kRGVlcCh7fSwgZ2V0TWVzaE1peGluKCksIHsKICBkZWZhdWx0Q29tcG9uZW50czogewogICAgZ2VvbWV0cnk6IHsKICAgICAgcHJpbWl0aXZlOiAncGxhbmUnCiAgICB9LAogICAgbWF0ZXJpYWw6IHsKICAgICAgY29sb3I6ICcjRkZGJywKICAgICAgc2hhZGVyOiAnZmxhdCcsCiAgICAgIHNpZGU6ICdkb3VibGUnLAogICAgICB0cmFuc3BhcmVudDogdHJ1ZQogICAgfQogIH0sCgogIG1hcHBpbmdzOiB7CiAgICBoZWlnaHQ6ICdnZW9tZXRyeS5oZWlnaHQnLAogICAgd2lkdGg6ICdnZW9tZXRyeS53aWR0aCcKICB9Cn0pKTsKCn0seyIuLi8uLi8uLi91dGlscy8iOjE4MiwiLi4vZ2V0TWVzaE1peGluIjoxMjMsIi4uL3ByaW1pdGl2ZXMiOjEyNX1dLDEzODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRNZXNoTWl4aW4gPSBfZGVyZXFfKCcuLi9nZXRNZXNoTWl4aW4nKTsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi4vcHJpbWl0aXZlcycpLnJlZ2lzdGVyUHJpbWl0aXZlOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi8uLi8uLi91dGlscy8nKTsKCnJlZ2lzdGVyUHJpbWl0aXZlKCdhLXZpZGVvc3BoZXJlJywgdXRpbHMuZXh0ZW5kRGVlcCh7fSwgZ2V0TWVzaE1peGluKCksIHsKICBkZWZhdWx0Q29tcG9uZW50czogewogICAgZ2VvbWV0cnk6IHsKICAgICAgcHJpbWl0aXZlOiAnc3BoZXJlJywKICAgICAgcmFkaXVzOiA1MDAsCiAgICAgIHNlZ21lbnRzV2lkdGg6IDY0LAogICAgICBzZWdtZW50c0hlaWdodDogMzIKICAgIH0sCiAgICBtYXRlcmlhbDogewogICAgICBjb2xvcjogJyNGRkYnLAogICAgICBzaGFkZXI6ICdmbGF0JywKICAgICAgc2lkZTogJ2JhY2snLAogICAgICBucG90OiB0cnVlCiAgICB9LAogICAgc2NhbGU6ICctMSAxIDEnCiAgfSwKCiAgbWFwcGluZ3M6IHsKICAgIHJhZGl1czogJ2dlb21ldHJ5LnJhZGl1cycsCiAgICAnc2VnbWVudHMtaGVpZ2h0JzogJ2dlb21ldHJ5LnNlZ21lbnRzSGVpZ2h0JywKICAgICdzZWdtZW50cy13aWR0aCc6ICdnZW9tZXRyeS5zZWdtZW50c1dpZHRoJwogIH0KfSkpOwoKfSx7Ii4uLy4uLy4uL3V0aWxzLyI6MTgyLCIuLi9nZXRNZXNoTWl4aW4iOjEyMywiLi4vcHJpbWl0aXZlcyI6MTI1fV0sMTM5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEF1dG9tYXRlZCBtZXNoIHByaW1pdGl2ZSByZWdpc3RyYXRpb24uCiAqLwp2YXIgZ2V0TWVzaE1peGluID0gX2RlcmVxXygnLi4vZ2V0TWVzaE1peGluJyk7CnZhciBnZW9tZXRyaWVzID0gX2RlcmVxXygnLi4vLi4vLi4vY29yZS9nZW9tZXRyeScpLmdlb21ldHJpZXM7CnZhciBnZW9tZXRyeU5hbWVzID0gX2RlcmVxXygnLi4vLi4vLi4vY29yZS9nZW9tZXRyeScpLmdlb21ldHJ5TmFtZXM7CnZhciByZWdpc3RlclByaW1pdGl2ZSA9IF9kZXJlcV8oJy4uL3ByaW1pdGl2ZXMnKS5yZWdpc3RlclByaW1pdGl2ZTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vLi4vLi4vdXRpbHMvJyk7CgovLyBGb3IgdGVzdGluZy4KdmFyIG1lc2hQcmltaXRpdmVzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTsKCi8vIEdlbmVyYXRlIHByaW1pdGl2ZSBmb3IgZWFjaCBnZW9tZXRyeSB0eXBlLgpnZW9tZXRyeU5hbWVzLmZvckVhY2goZnVuY3Rpb24gcmVnaXN0ZXJNZXNoUHJpbWl0aXZlIChnZW9tZXRyeU5hbWUpIHsKICB2YXIgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzW2dlb21ldHJ5TmFtZV07CiAgdmFyIGdlb21ldHJ5SHlwaGVuZWQgPSB1bkNhbWVsQ2FzZShnZW9tZXRyeU5hbWUpOwoKICAvLyBHZW5lcmF0ZSBtYXBwaW5ncy4KICB2YXIgbWFwcGluZ3MgPSB7fTsKICBPYmplY3Qua2V5cyhnZW9tZXRyeS5zY2hlbWEpLmZvckVhY2goZnVuY3Rpb24gY3JlYXRlTWFwcGluZyAocHJvcGVydHkpIHsKICAgIG1hcHBpbmdzW3VuQ2FtZWxDYXNlKHByb3BlcnR5KV0gPSAnZ2VvbWV0cnkuJyArIHByb3BlcnR5OwogIH0pOwoKICAvLyBSZWdpc3Rlci4KICB2YXIgdGFnTmFtZSA9ICdhLScgKyBnZW9tZXRyeUh5cGhlbmVkOwogIHZhciBwcmltaXRpdmUgPSByZWdpc3RlclByaW1pdGl2ZSh0YWdOYW1lLCB1dGlscy5leHRlbmREZWVwKHt9LCBnZXRNZXNoTWl4aW4oKSwgewogICAgZGVmYXVsdENvbXBvbmVudHM6IHtnZW9tZXRyeToge3ByaW1pdGl2ZTogZ2VvbWV0cnlOYW1lfX0sCiAgICBtYXBwaW5nczogbWFwcGluZ3MKICB9KSk7CiAgbWVzaFByaW1pdGl2ZXNbdGFnTmFtZV0gPSBwcmltaXRpdmU7Cn0pOwoKLyoqCiAqIGNhbWVsQ2FzZSB0byBoeXBoZW5lZC1zdHJpbmcuCiAqLwpmdW5jdGlvbiB1bkNhbWVsQ2FzZSAoc3RyKSB7CiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpOwp9Cgp9LHsiLi4vLi4vLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi8uLi8uLi91dGlscy8iOjE4MiwiLi4vZ2V0TWVzaE1peGluIjoxMjMsIi4uL3ByaW1pdGl2ZXMiOjEyNX1dLDE0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi4vY29yZS9nZW9tZXRyeScpLnJlZ2lzdGVyR2VvbWV0cnk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKcmVnaXN0ZXJHZW9tZXRyeSgnYm94JywgewogIHNjaGVtYTogewogICAgZGVwdGg6IHtkZWZhdWx0OiAxLCBtaW46IDB9LAogICAgaGVpZ2h0OiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHdpZHRoOiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHNlZ21lbnRzSGVpZ2h0OiB7ZGVmYXVsdDogMSwgbWluOiAxLCBtYXg6IDIwLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c1dpZHRoOiB7ZGVmYXVsdDogMSwgbWluOiAxLCBtYXg6IDIwLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c0RlcHRoOiB7ZGVmYXVsdDogMSwgbWluOiAxLCBtYXg6IDIwLCB0eXBlOiAnaW50J30KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgKICAgICAgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsCiAgICAgIGRhdGEuc2VnbWVudHNXaWR0aCwgZGF0YS5zZWdtZW50c0hlaWdodCwgZGF0YS5zZWdtZW50c0RlcHRoKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNDE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBkZWdUb1JhZCA9IFRIUkVFLk1hdGguZGVnVG9SYWQ7CgpyZWdpc3Rlckdlb21ldHJ5KCdjaXJjbGUnLCB7CiAgc2NoZW1hOiB7CiAgICByYWRpdXM6IHtkZWZhdWx0OiAxLCBtaW46IDB9LAogICAgc2VnbWVudHM6IHtkZWZhdWx0OiAzMiwgbWluOiAzLCB0eXBlOiAnaW50J30sCiAgICB0aGV0YUxlbmd0aDoge2RlZmF1bHQ6IDM2MCwgbWluOiAwfSwKICAgIHRoZXRhU3RhcnQ6IHtkZWZhdWx0OiAwfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLkNpcmNsZUdlb21ldHJ5KAogICAgICBkYXRhLnJhZGl1cywgZGF0YS5zZWdtZW50cywgZGVnVG9SYWQoZGF0YS50aGV0YVN0YXJ0KSwgZGVnVG9SYWQoZGF0YS50aGV0YUxlbmd0aCkpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi9saWIvdGhyZWUiOjE1N31dLDE0MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi4vY29yZS9nZW9tZXRyeScpLnJlZ2lzdGVyR2VvbWV0cnk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIGRlZ1RvUmFkID0gVEhSRUUuTWF0aC5kZWdUb1JhZDsKCnJlZ2lzdGVyR2VvbWV0cnkoJ2NvbmUnLCB7CiAgc2NoZW1hOiB7CiAgICBoZWlnaHQ6IHtkZWZhdWx0OiAxLCBtaW46IDB9LAogICAgb3BlbkVuZGVkOiB7ZGVmYXVsdDogZmFsc2V9LAogICAgcmFkaXVzQm90dG9tOiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHJhZGl1c1RvcDoge2RlZmF1bHQ6IDAuMDEsIG1pbjogMH0sCiAgICBzZWdtZW50c0hlaWdodDoge2RlZmF1bHQ6IDE4LCBtaW46IDEsIHR5cGU6ICdpbnQnfSwKICAgIHNlZ21lbnRzUmFkaWFsOiB7ZGVmYXVsdDogMzYsIG1pbjogMywgdHlwZTogJ2ludCd9LAogICAgdGhldGFMZW5ndGg6IHtkZWZhdWx0OiAzNjAsIG1pbjogMH0sCiAgICB0aGV0YVN0YXJ0OiB7ZGVmYXVsdDogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KAogICAgICAgIGRhdGEucmFkaXVzVG9wLCBkYXRhLnJhZGl1c0JvdHRvbSwgZGF0YS5oZWlnaHQsIGRhdGEuc2VnbWVudHNSYWRpYWwsCiAgICAgICAgZGF0YS5zZWdtZW50c0hlaWdodCwgZGF0YS5vcGVuRW5kZWQsIGRlZ1RvUmFkKGRhdGEudGhldGFTdGFydCksCiAgICAgICAgZGVnVG9SYWQoZGF0YS50aGV0YUxlbmd0aCkpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi9saWIvdGhyZWUiOjE1N31dLDE0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi4vY29yZS9nZW9tZXRyeScpLnJlZ2lzdGVyR2VvbWV0cnk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIGRlZ1RvUmFkID0gVEhSRUUuTWF0aC5kZWdUb1JhZDsKCnJlZ2lzdGVyR2VvbWV0cnkoJ2N5bGluZGVyJywgewogIHNjaGVtYTogewogICAgaGVpZ2h0OiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIG9wZW5FbmRlZDoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIHJhZGl1czoge2RlZmF1bHQ6IDEsIG1pbjogMH0sCiAgICBzZWdtZW50c0hlaWdodDoge2RlZmF1bHQ6IDE4LCBtaW46IDEsIHR5cGU6ICdpbnQnfSwKICAgIHNlZ21lbnRzUmFkaWFsOiB7ZGVmYXVsdDogMzYsIG1pbjogMywgdHlwZTogJ2ludCd9LAogICAgdGhldGFMZW5ndGg6IHtkZWZhdWx0OiAzNjAsIG1pbjogMH0sCiAgICB0aGV0YVN0YXJ0OiB7ZGVmYXVsdDogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KAogICAgICAgIGRhdGEucmFkaXVzLCBkYXRhLnJhZGl1cywgZGF0YS5oZWlnaHQsIGRhdGEuc2VnbWVudHNSYWRpYWwsIGRhdGEuc2VnbWVudHNIZWlnaHQsCiAgICAgICAgZGF0YS5vcGVuRW5kZWQsIGRlZ1RvUmFkKGRhdGEudGhldGFTdGFydCksIGRlZ1RvUmFkKGRhdGEudGhldGFMZW5ndGgpKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ2RvZGVjYWhlZHJvbicsIHsKICBzY2hlbWE6IHsKICAgIGRldGFpbDoge2RlZmF1bHQ6IDAsIG1pbjogMCwgbWF4OiA1LCB0eXBlOiAnaW50J30sCiAgICByYWRpdXM6IHtkZWZhdWx0OiAxLCBtaW46IDB9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgVEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnkoZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ2ljb3NhaGVkcm9uJywgewogIHNjaGVtYTogewogICAgZGV0YWlsOiB7ZGVmYXVsdDogMCwgbWluOiAwLCBtYXg6IDUsIHR5cGU6ICdpbnQnfSwKICAgIHJhZGl1czoge2RlZmF1bHQ6IDEsIG1pbjogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCk7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2dlb21ldHJ5IjoxMTAsIi4uL2xpYi90aHJlZSI6MTU3fV0sMTQ2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygnLi9ib3guanMnKTsKX2RlcmVxXygnLi9jaXJjbGUuanMnKTsKX2RlcmVxXygnLi9jb25lLmpzJyk7Cl9kZXJlcV8oJy4vY3lsaW5kZXIuanMnKTsKX2RlcmVxXygnLi9kb2RlY2FoZWRyb24uanMnKTsKX2RlcmVxXygnLi9pY29zYWhlZHJvbi5qcycpOwpfZGVyZXFfKCcuL29jdGFoZWRyb24uanMnKTsKX2RlcmVxXygnLi9wbGFuZS5qcycpOwpfZGVyZXFfKCcuL3JpbmcuanMnKTsKX2RlcmVxXygnLi9zcGhlcmUuanMnKTsKX2RlcmVxXygnLi90ZXRyYWhlZHJvbi5qcycpOwpfZGVyZXFfKCcuL3RvcnVzLmpzJyk7Cl9kZXJlcV8oJy4vdG9ydXNLbm90LmpzJyk7Cl9kZXJlcV8oJy4vdHJpYW5nbGUuanMnKTsKCn0seyIuL2JveC5qcyI6MTQwLCIuL2NpcmNsZS5qcyI6MTQxLCIuL2NvbmUuanMiOjE0MiwiLi9jeWxpbmRlci5qcyI6MTQzLCIuL2RvZGVjYWhlZHJvbi5qcyI6MTQ0LCIuL2ljb3NhaGVkcm9uLmpzIjoxNDUsIi4vb2N0YWhlZHJvbi5qcyI6MTQ3LCIuL3BsYW5lLmpzIjoxNDgsIi4vcmluZy5qcyI6MTQ5LCIuL3NwaGVyZS5qcyI6MTUwLCIuL3RldHJhaGVkcm9uLmpzIjoxNTEsIi4vdG9ydXMuanMiOjE1MiwiLi90b3J1c0tub3QuanMiOjE1MywiLi90cmlhbmdsZS5qcyI6MTU0fV0sMTQ3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyR2VvbWV0cnkgPSBfZGVyZXFfKCcuLi9jb3JlL2dlb21ldHJ5JykucmVnaXN0ZXJHZW9tZXRyeTsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CgpyZWdpc3Rlckdlb21ldHJ5KCdvY3RhaGVkcm9uJywgewogIHNjaGVtYTogewogICAgZGV0YWlsOiB7ZGVmYXVsdDogMCwgbWluOiAwLCBtYXg6IDUsIHR5cGU6ICdpbnQnfSwKICAgIHJhZGl1czoge2RlZmF1bHQ6IDEsIG1pbjogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnkoZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ3BsYW5lJywgewogIHNjaGVtYTogewogICAgaGVpZ2h0OiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHdpZHRoOiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHNlZ21lbnRzSGVpZ2h0OiB7ZGVmYXVsdDogMSwgbWluOiAxLCBtYXg6IDIwLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c1dpZHRoOiB7ZGVmYXVsdDogMSwgbWluOiAxLCBtYXg6IDIwLCB0eXBlOiAnaW50J30KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0LCBkYXRhLnNlZ21lbnRzV2lkdGgsIGRhdGEuc2VnbWVudHNIZWlnaHQpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi9saWIvdGhyZWUiOjE1N31dLDE0OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi4vY29yZS9nZW9tZXRyeScpLnJlZ2lzdGVyR2VvbWV0cnk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIGRlZ1RvUmFkID0gVEhSRUUuTWF0aC5kZWdUb1JhZDsKCnJlZ2lzdGVyR2VvbWV0cnkoJ3JpbmcnLCB7CiAgc2NoZW1hOiB7CiAgICByYWRpdXNJbm5lcjoge2RlZmF1bHQ6IDAuOCwgbWluOiAwfSwKICAgIHJhZGl1c091dGVyOiB7ZGVmYXVsdDogMS4yLCBtaW46IDB9LAogICAgc2VnbWVudHNQaGk6IHtkZWZhdWx0OiAxMCwgbWluOiAxLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c1RoZXRhOiB7ZGVmYXVsdDogMzIsIG1pbjogMywgdHlwZTogJ2ludCd9LAogICAgdGhldGFMZW5ndGg6IHtkZWZhdWx0OiAzNjAsIG1pbjogMH0sCiAgICB0aGV0YVN0YXJ0OiB7ZGVmYXVsdDogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5SaW5nR2VvbWV0cnkoCiAgICAgICAgZGF0YS5yYWRpdXNJbm5lciwgZGF0YS5yYWRpdXNPdXRlciwgZGF0YS5zZWdtZW50c1RoZXRhLCBkYXRhLnNlZ21lbnRzUGhpLAogICAgICAgIGRlZ1RvUmFkKGRhdGEudGhldGFTdGFydCksIGRlZ1RvUmFkKGRhdGEudGhldGFMZW5ndGgpKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBkZWdUb1JhZCA9IFRIUkVFLk1hdGguZGVnVG9SYWQ7CgpyZWdpc3Rlckdlb21ldHJ5KCdzcGhlcmUnLCB7CiAgc2NoZW1hOiB7CiAgICByYWRpdXM6IHtkZWZhdWx0OiAxLCBtaW46IDB9LAogICAgcGhpTGVuZ3RoOiB7ZGVmYXVsdDogMzYwfSwKICAgIHBoaVN0YXJ0OiB7ZGVmYXVsdDogMCwgbWluOiAwfSwKICAgIHRoZXRhTGVuZ3RoOiB7ZGVmYXVsdDogMTgwLCBtaW46IDB9LAogICAgdGhldGFTdGFydDoge2RlZmF1bHQ6IDB9LAogICAgc2VnbWVudHNIZWlnaHQ6IHtkZWZhdWx0OiAxOCwgbWluOiAyLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c1dpZHRoOiB7ZGVmYXVsdDogMzYsIG1pbjogMywgdHlwZTogJ2ludCd9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoCiAgICAgIGRhdGEucmFkaXVzLCBkYXRhLnNlZ21lbnRzV2lkdGgsIGRhdGEuc2VnbWVudHNIZWlnaHQsIGRlZ1RvUmFkKGRhdGEucGhpU3RhcnQpLAogICAgICBkZWdUb1JhZChkYXRhLnBoaUxlbmd0aCksIGRlZ1RvUmFkKGRhdGEudGhldGFTdGFydCksIGRlZ1RvUmFkKGRhdGEudGhldGFMZW5ndGgpKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ3RldHJhaGVkcm9uJywgewogIHNjaGVtYTogewogICAgZGV0YWlsOiB7ZGVmYXVsdDogMCwgbWluOiAwLCBtYXg6IDUsIHR5cGU6ICdpbnQnfSwKICAgIHJhZGl1czoge2RlZmF1bHQ6IDEsIG1pbjogMH0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5KGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCk7CiAgfQp9KTsKCn0seyIuLi9jb3JlL2dlb21ldHJ5IjoxMTAsIi4uL2xpYi90aHJlZSI6MTU3fV0sMTUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyR2VvbWV0cnkgPSBfZGVyZXFfKCcuLi9jb3JlL2dlb21ldHJ5JykucmVnaXN0ZXJHZW9tZXRyeTsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7Cgp2YXIgZGVnVG9SYWQgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkOwoKcmVnaXN0ZXJHZW9tZXRyeSgndG9ydXMnLCB7CiAgc2NoZW1hOiB7CiAgICBhcmM6IHtkZWZhdWx0OiAzNjB9LAogICAgcmFkaXVzOiB7ZGVmYXVsdDogMSwgbWluOiAwfSwKICAgIHJhZGl1c1R1YnVsYXI6IHtkZWZhdWx0OiAwLjIsIG1pbjogMH0sCiAgICBzZWdtZW50c1JhZGlhbDoge2RlZmF1bHQ6IDM2LCBtaW46IDIsIHR5cGU6ICdpbnQnfSwKICAgIHNlZ21lbnRzVHVidWxhcjoge2RlZmF1bHQ6IDMyLCBtaW46IDMsIHR5cGU6ICdpbnQnfQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLlRvcnVzR2VvbWV0cnkoCiAgICAgIGRhdGEucmFkaXVzLCBkYXRhLnJhZGl1c1R1YnVsYXIgKiAyLCBkYXRhLnNlZ21lbnRzUmFkaWFsLCBkYXRhLnNlZ21lbnRzVHVidWxhciwKICAgICAgZGVnVG9SYWQoZGF0YS5hcmMpKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5yZWdpc3Rlckdlb21ldHJ5Owp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ3RvcnVzS25vdCcsIHsKICBzY2hlbWE6IHsKICAgIHA6IHtkZWZhdWx0OiAyLCBtaW46IDF9LAogICAgcToge2RlZmF1bHQ6IDMsIG1pbjogMX0sCiAgICByYWRpdXM6IHtkZWZhdWx0OiAxLCBtaW46IDB9LAogICAgcmFkaXVzVHVidWxhcjoge2RlZmF1bHQ6IDAuMiwgbWluOiAwfSwKICAgIHNlZ21lbnRzUmFkaWFsOiB7ZGVmYXVsdDogOCwgbWluOiAzLCB0eXBlOiAnaW50J30sCiAgICBzZWdtZW50c1R1YnVsYXI6IHtkZWZhdWx0OiAxMDAsIG1pbjogMywgdHlwZTogJ2ludCd9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVG9ydXNLbm90R2VvbWV0cnkoCiAgICAgIGRhdGEucmFkaXVzLCBkYXRhLnJhZGl1c1R1YnVsYXIgKiAyLCBkYXRhLnNlZ21lbnRzVHVidWxhciwgZGF0YS5zZWdtZW50c1JhZGlhbCwKICAgICAgZGF0YS5wLCBkYXRhLnEpOwogIH0KfSk7Cgp9LHsiLi4vY29yZS9nZW9tZXRyeSI6MTEwLCIuLi9saWIvdGhyZWUiOjE1N31dLDE1NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi4vY29yZS9nZW9tZXRyeScpLnJlZ2lzdGVyR2VvbWV0cnk7CnZhciBUSFJFRSA9IF9kZXJlcV8oJy4uL2xpYi90aHJlZScpOwoKdmFyIHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpOwp2YXIgcm90YXRlVmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMSk7CnZhciB1dk1pblZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7CnZhciB1dk1heFZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7CnZhciB1dlNjYWxlVmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjIoKTsKCnJlZ2lzdGVyR2VvbWV0cnkoJ3RyaWFuZ2xlJywgewogIHNjaGVtYTogewogICAgdmVydGV4QToge3R5cGU6ICd2ZWMzJywgZGVmYXVsdDoge3g6IDAsIHk6IDAuNSwgejogMH19LAogICAgdmVydGV4Qjoge3R5cGU6ICd2ZWMzJywgZGVmYXVsdDoge3g6IC0wLjUsIHk6IC0wLjUsIHo6IDB9fSwKICAgIHZlcnRleEM6IHt0eXBlOiAndmVjMycsIGRlZmF1bHQ6IHt4OiAwLjUsIHk6IC0wLjUsIHo6IDB9fQogIH0sCgogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgZ2VvbWV0cnk7CiAgICB2YXIgbm9ybWFsOwogICAgdmFyIHRyaWFuZ2xlOwogICAgdmFyIHV2QTsKICAgIHZhciB1dkI7CiAgICB2YXIgdXZDOwoKICAgIHRyaWFuZ2xlID0gbmV3IFRIUkVFLlRyaWFuZ2xlKCk7CiAgICB0cmlhbmdsZS5hLnNldChkYXRhLnZlcnRleEEueCwgZGF0YS52ZXJ0ZXhBLnksIGRhdGEudmVydGV4QS56KTsKICAgIHRyaWFuZ2xlLmIuc2V0KGRhdGEudmVydGV4Qi54LCBkYXRhLnZlcnRleEIueSwgZGF0YS52ZXJ0ZXhCLnopOwogICAgdHJpYW5nbGUuYy5zZXQoZGF0YS52ZXJ0ZXhDLngsIGRhdGEudmVydGV4Qy55LCBkYXRhLnZlcnRleEMueik7CiAgICBub3JtYWwgPSB0cmlhbmdsZS5nZXROb3JtYWwobmV3IFRIUkVFLlZlY3RvcjMoKSk7CgogICAgLy8gUm90YXRlIHRoZSAzRCB0cmlhbmdsZSB0byBiZSBwYXJhbGxlbCB0byBYWSBwbGFuZS4KICAgIHF1YXRlcm5pb24uc2V0RnJvbVVuaXRWZWN0b3JzKG5vcm1hbCwgcm90YXRlVmVjdG9yKTsKICAgIHV2QSA9IHRyaWFuZ2xlLmEuY2xvbmUoKS5hcHBseVF1YXRlcm5pb24ocXVhdGVybmlvbik7CiAgICB1dkIgPSB0cmlhbmdsZS5iLmNsb25lKCkuYXBwbHlRdWF0ZXJuaW9uKHF1YXRlcm5pb24pOwogICAgdXZDID0gdHJpYW5nbGUuYy5jbG9uZSgpLmFwcGx5UXVhdGVybmlvbihxdWF0ZXJuaW9uKTsKCiAgICAvLyBDb21wdXRlIFVWcy4KICAgIC8vIE5vcm1hbGl6ZSB4L3kgdmFsdWVzIG9mIFVWIHNvIHRoZXkgYXJlIHdpdGhpbiAwIHRvIDEuCiAgICB1dk1pblZlY3Rvci5zZXQoTWF0aC5taW4odXZBLngsIHV2Qi54LCB1dkMueCksIE1hdGgubWluKHV2QS55LCB1dkIueSwgdXZDLnkpKTsKICAgIHV2TWF4VmVjdG9yLnNldChNYXRoLm1heCh1dkEueCwgdXZCLngsIHV2Qy54KSwgTWF0aC5tYXgodXZBLnksIHV2Qi55LCB1dkMueSkpOwogICAgdXZTY2FsZVZlY3Rvci5zZXQoMCwgMCkuc3ViVmVjdG9ycyh1dk1heFZlY3RvciwgdXZNaW5WZWN0b3IpOwogICAgdXZBID0gbmV3IFRIUkVFLlZlY3RvcjIoKS5zdWJWZWN0b3JzKHV2QSwgdXZNaW5WZWN0b3IpLmRpdmlkZSh1dlNjYWxlVmVjdG9yKTsKICAgIHV2QiA9IG5ldyBUSFJFRS5WZWN0b3IyKCkuc3ViVmVjdG9ycyh1dkIsIHV2TWluVmVjdG9yKS5kaXZpZGUodXZTY2FsZVZlY3Rvcik7CiAgICB1dkMgPSBuZXcgVEhSRUUuVmVjdG9yMigpLnN1YlZlY3RvcnModXZDLCB1dk1pblZlY3RvcikuZGl2aWRlKHV2U2NhbGVWZWN0b3IpOwoKICAgIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpOwogICAgZ2VvbWV0cnkudmVydGljZXMucHVzaCh0cmlhbmdsZS5hKTsKICAgIGdlb21ldHJ5LnZlcnRpY2VzLnB1c2godHJpYW5nbGUuYik7CiAgICBnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKHRyaWFuZ2xlLmMpOwogICAgZ2VvbWV0cnkuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoMCwgMSwgMiwgbm9ybWFsKSk7CiAgICBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdID0gW1t1dkEsIHV2QiwgdXZDXV07CiAgfQp9KTsKCn0seyIuLi9jb3JlL2dlb21ldHJ5IjoxMTAsIi4uL2xpYi90aHJlZSI6MTU3fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gUG9seWZpbGwgYFByb21pc2VgLgp3aW5kb3cuUHJvbWlzZSA9IHdpbmRvdy5Qcm9taXNlIHx8IF9kZXJlcV8oJ3Byb21pc2UtcG9seWZpbGwnKTsKCi8vIFdlYlZSIHBvbHlmaWxsCi8vIENoZWNrIGJlZm9yZSB0aGUgcG9seWZpbGwgcnVucy4Kd2luZG93Lmhhc05hdGl2ZVdlYlZSSW1wbGVtZW50YXRpb24gPSAhIXdpbmRvdy5uYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cyB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEhd2luZG93Lm5hdmlnYXRvci5nZXRWUkRldmljZXM7CndpbmRvdy5oYXNOYXRpdmVXZWJYUkltcGxlbWVudGF0aW9uID0gbmF2aWdhdG9yLnhyICE9PSB1bmRlZmluZWQ7CgovLyBJZiBuYXRpdmUgV2ViWFIgb3IgV2ViVlIgYXJlIGRlZmluZWQgV2ViVlJQb2x5ZmlsbCBkb2VzIG5vdCBpbml0aWFsaXplLgppZiAoIXdpbmRvdy5oYXNOYXRpdmVXZWJYUkltcGxlbWVudGF0aW9uICYmICF3aW5kb3cuaGFzTmF0aXZlV2ViVlJJbXBsZW1lbnRhdGlvbikgewogIHZhciBpc0lPU09sZGVyVGhhbjEwID0gX2RlcmVxXygnLi91dGlscy9pc0lPU09sZGVyVGhhbjEwJyk7CiAgLy8gV29ya2Fyb3VuZCBmb3IgaU9TIFNhZmFyaSBjYW52YXMgc2l6aW5nIGlzc3VlcyBpbiBzdGVyZW8gKHdlYnZyLXBvbHlmaWxsL2lzc3Vlcy8xMDIpLgogIC8vIE9ubHkgZm9yIGlPUyBvbiB2ZXJzaW9ucyBvbGRlciB0aGFuIDEwLgogIHZhciBidWZmZXJTY2FsZSA9IGlzSU9TT2xkZXJUaGFuMTAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gMSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDogMTsKICB2YXIgV2ViVlJQb2x5ZmlsbCA9IF9kZXJlcV8oJ3dlYnZyLXBvbHlmaWxsJyk7CiAgdmFyIHBvbHlmaWxsQ29uZmlnID0gewogICAgQlVGRkVSX1NDQUxFOiBidWZmZXJTY2FsZSwKICAgIENBUkRCT0FSRF9VSV9ESVNBQkxFRDogdHJ1ZSwKICAgIFJPVEFURV9JTlNUUlVDVElPTlNfRElTQUJMRUQ6IHRydWUKICB9OwogIHdpbmRvdy53ZWJ2cnBvbHlmaWxsID0gbmV3IFdlYlZSUG9seWZpbGwocG9seWZpbGxDb25maWcpOwp9Cgp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzLycpOwp2YXIgZGVidWcgPSB1dGlscy5kZWJ1ZzsKCmlmICh1dGlscy5pc0lFMTEpIHsKICAvLyBQb2x5ZmlsbCBgQ3VzdG9tRXZlbnRgLgogIF9kZXJlcV8oJ2N1c3RvbS1ldmVudC1wb2x5ZmlsbCcpOwogIC8vIFBvbHlmaWxsIFN0cmluZy5zdGFydHNXaXRoLgogIF9kZXJlcV8oJy4uL3ZlbmRvci9zdGFydHMtd2l0aC1wb2x5ZmlsbCcpOwp9Cgp2YXIgZXJyb3IgPSBkZWJ1ZygnQS1GcmFtZTplcnJvcicpOwp2YXIgd2FybiA9IGRlYnVnKCdBLUZyYW1lOndhcm4nKTsKCmlmICh3aW5kb3cuZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiB3aW5kb3cuZG9jdW1lbnQuY3VycmVudFNjcmlwdC5wYXJlbnROb2RlICE9PQogICAgd2luZG93LmRvY3VtZW50LmhlYWQgJiYgIXdpbmRvdy5kZWJ1ZykgewogIHdhcm4oJ1B1dCB0aGUgQS1GcmFtZSA8c2NyaXB0PiB0YWcgaW4gdGhlIDxoZWFkPiBvZiB0aGUgSFRNTCAqYmVmb3JlKiB0aGUgc2NlbmUgdG8gJyArCiAgICAgICAnZW5zdXJlIGV2ZXJ5dGhpbmcgZm9yIEEtRnJhbWUgaXMgcHJvcGVybHkgcmVnaXN0ZXJlZCBiZWZvcmUgdGhleSBhcmUgdXNlZCBmcm9tICcgKwogICAgICAgJ0hUTUwuJyk7Cn0KCi8vIEVycm9yIGlmIG5vdCB1c2luZyBhIHNlcnZlci4KaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6JykgewogIGVycm9yKAogICAgJ1RoaXMgSFRNTCBmaWxlIGlzIGN1cnJlbnRseSBiZWluZyBzZXJ2ZWQgdmlhIHRoZSBmaWxlOi8vIHByb3RvY29sLiAnICsKICAgICdBc3NldHMsIHRleHR1cmVzLCBhbmQgbW9kZWxzIFdJTEwgTk9UIFdPUksgZHVlIHRvIGNyb3NzLW9yaWdpbiBwb2xpY3khICcgKwogICAgJ1BsZWFzZSB1c2UgYSBsb2NhbCBvciBob3N0ZWQgc2VydmVyOiAnICsKICAgICdodHRwczovL2FmcmFtZS5pby9kb2NzLzAuNS4wL2ludHJvZHVjdGlvbi9nZXR0aW5nLXN0YXJ0ZWQuaHRtbCN1c2luZy1hLWxvY2FsLXNlcnZlci4nKTsKfQoKX2RlcmVxXygncHJlc2VudCcpOyAvLyBQb2x5ZmlsbCBgcGVyZm9ybWFuY2Uubm93KClgLgoKLy8gQ1NTLgppZiAodXRpbHMuZGV2aWNlLmlzQnJvd3NlckVudmlyb25tZW50KSB7CiAgX2RlcmVxXygnLi9zdHlsZS9hZnJhbWUuY3NzJyk7CiAgX2RlcmVxXygnLi9zdHlsZS9yU3RhdHMuY3NzJyk7Cn0KCi8vIFJlcXVpcmVkIGJlZm9yZSBgQUVudGl0eWAgc28gdGhhdCBhbGwgY29tcG9uZW50cyBhcmUgcmVnaXN0ZXJlZC4KdmFyIEFTY2VuZSA9IF9kZXJlcV8oJy4vY29yZS9zY2VuZS9hLXNjZW5lJykuQVNjZW5lOwp2YXIgY29tcG9uZW50cyA9IF9kZXJlcV8oJy4vY29yZS9jb21wb25lbnQnKS5jb21wb25lbnRzOwp2YXIgcmVnaXN0ZXJDb21wb25lbnQgPSBfZGVyZXFfKCcuL2NvcmUvY29tcG9uZW50JykucmVnaXN0ZXJDb21wb25lbnQ7CnZhciByZWdpc3Rlckdlb21ldHJ5ID0gX2RlcmVxXygnLi9jb3JlL2dlb21ldHJ5JykucmVnaXN0ZXJHZW9tZXRyeTsKdmFyIHJlZ2lzdGVyUHJpbWl0aXZlID0gX2RlcmVxXygnLi9leHRyYXMvcHJpbWl0aXZlcy9wcmltaXRpdmVzJykucmVnaXN0ZXJQcmltaXRpdmU7CnZhciByZWdpc3RlclNoYWRlciA9IF9kZXJlcV8oJy4vY29yZS9zaGFkZXInKS5yZWdpc3RlclNoYWRlcjsKdmFyIHJlZ2lzdGVyU3lzdGVtID0gX2RlcmVxXygnLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgc2hhZGVycyA9IF9kZXJlcV8oJy4vY29yZS9zaGFkZXInKS5zaGFkZXJzOwp2YXIgc3lzdGVtcyA9IF9kZXJlcV8oJy4vY29yZS9zeXN0ZW0nKS5zeXN0ZW1zOwovLyBFeHBvcnRzIFRIUkVFIHRvIHdpbmRvdyBzbyB0aHJlZS5qcyBjYW4gYmUgdXNlZCB3aXRob3V0IGFsdGVyYXRpb24uCnZhciBUSFJFRSA9IHdpbmRvdy5USFJFRSA9IF9kZXJlcV8oJy4vbGliL3RocmVlJyk7Cgp2YXIgcGtnID0gX2RlcmVxXygnLi4vcGFja2FnZScpOwoKX2RlcmVxXygnLi9jb21wb25lbnRzL2luZGV4Jyk7IC8vIFJlZ2lzdGVyIHN0YW5kYXJkIGNvbXBvbmVudHMuCl9kZXJlcV8oJy4vZ2VvbWV0cmllcy9pbmRleCcpOyAvLyBSZWdpc3RlciBzdGFuZGFyZCBnZW9tZXRyaWVzLgpfZGVyZXFfKCcuL3NoYWRlcnMvaW5kZXgnKTsgLy8gUmVnaXN0ZXIgc3RhbmRhcmQgc2hhZGVycy4KX2RlcmVxXygnLi9zeXN0ZW1zL2luZGV4Jyk7IC8vIFJlZ2lzdGVyIHN0YW5kYXJkIHN5c3RlbXMuCnZhciBBTm9kZSA9IF9kZXJlcV8oJy4vY29yZS9hLW5vZGUnKTsKdmFyIEFFbnRpdHkgPSBfZGVyZXFfKCcuL2NvcmUvYS1lbnRpdHknKTsgLy8gRGVwZW5kcyBvbiBBTm9kZSBhbmQgY29yZSBjb21wb25lbnRzLgoKX2RlcmVxXygnLi9jb3JlL2EtYXNzZXRzJyk7Cl9kZXJlcV8oJy4vY29yZS9hLWN1YmVtYXAnKTsKX2RlcmVxXygnLi9jb3JlL2EtbWl4aW4nKTsKCi8vIEV4dHJhcy4KX2RlcmVxXygnLi9leHRyYXMvY29tcG9uZW50cy8nKTsKX2RlcmVxXygnLi9leHRyYXMvcHJpbWl0aXZlcy8nKTsKCmNvbnNvbGUubG9nKCdBLUZyYW1lIFZlcnNpb246IDEuMC40IChEYXRlIDIwMjAtMDItMDUsIENvbW1pdCAjMmIzNTkyNDYpJyk7CmNvbnNvbGUubG9nKCd0aHJlZSBWZXJzaW9uIChodHRwczovL2dpdGh1Yi5jb20vc3VwZXJtZWRpdW0vdGhyZWUuanMpOicsCiAgICAgICAgICAgIHBrZy5kZXBlbmRlbmNpZXNbJ3N1cGVyLXRocmVlJ10pOwpjb25zb2xlLmxvZygnV2ViVlIgUG9seWZpbGwgVmVyc2lvbjonLCBwa2cuZGVwZW5kZW5jaWVzWyd3ZWJ2ci1wb2x5ZmlsbCddKTsKCm1vZHVsZS5leHBvcnRzID0gd2luZG93LkFGUkFNRSA9IHsKICBBQ29tcG9uZW50OiBfZGVyZXFfKCcuL2NvcmUvY29tcG9uZW50JykuQ29tcG9uZW50LAogIEFFbnRpdHk6IEFFbnRpdHksCiAgQU5vZGU6IEFOb2RlLAogIEFOSU1FOiBfZGVyZXFfKCdzdXBlci1hbmltZWpzJyksCiAgQVNjZW5lOiBBU2NlbmUsCiAgY29tcG9uZW50czogY29tcG9uZW50cywKICBjb3JlQ29tcG9uZW50czogT2JqZWN0LmtleXMoY29tcG9uZW50cyksCiAgZ2VvbWV0cmllczogX2RlcmVxXygnLi9jb3JlL2dlb21ldHJ5JykuZ2VvbWV0cmllcywKICByZWdpc3RlckNvbXBvbmVudDogcmVnaXN0ZXJDb21wb25lbnQsCiAgcmVnaXN0ZXJFbGVtZW50OiBfZGVyZXFfKCcuL2NvcmUvYS1yZWdpc3Rlci1lbGVtZW50JykucmVnaXN0ZXJFbGVtZW50LAogIHJlZ2lzdGVyR2VvbWV0cnk6IHJlZ2lzdGVyR2VvbWV0cnksCiAgcmVnaXN0ZXJQcmltaXRpdmU6IHJlZ2lzdGVyUHJpbWl0aXZlLAogIHJlZ2lzdGVyU2hhZGVyOiByZWdpc3RlclNoYWRlciwKICByZWdpc3RlclN5c3RlbTogcmVnaXN0ZXJTeXN0ZW0sCiAgcHJpbWl0aXZlczogewogICAgZ2V0TWVzaE1peGluOiBfZGVyZXFfKCcuL2V4dHJhcy9wcmltaXRpdmVzL2dldE1lc2hNaXhpbicpLAogICAgcHJpbWl0aXZlczogX2RlcmVxXygnLi9leHRyYXMvcHJpbWl0aXZlcy9wcmltaXRpdmVzJykucHJpbWl0aXZlcwogIH0sCiAgc2NlbmVzOiBfZGVyZXFfKCcuL2NvcmUvc2NlbmUvc2NlbmVzJyksCiAgc2NoZW1hOiBfZGVyZXFfKCcuL2NvcmUvc2NoZW1hJyksCiAgc2hhZGVyczogc2hhZGVycywKICBzeXN0ZW1zOiBzeXN0ZW1zLAogIFRIUkVFOiBUSFJFRSwKICB1dGlsczogdXRpbHMsCiAgdmVyc2lvbjogcGtnLnZlcnNpb24KfTsKCn0seyIuLi9wYWNrYWdlIjo1NCwiLi4vdmVuZG9yL3N0YXJ0cy13aXRoLXBvbHlmaWxsIjoxOTQsIi4vY29tcG9uZW50cy9pbmRleCI6NjQsIi4vY29yZS9hLWFzc2V0cyI6MTAzLCIuL2NvcmUvYS1jdWJlbWFwIjoxMDQsIi4vY29yZS9hLWVudGl0eSI6MTA1LCIuL2NvcmUvYS1taXhpbiI6MTA2LCIuL2NvcmUvYS1ub2RlIjoxMDcsIi4vY29yZS9hLXJlZ2lzdGVyLWVsZW1lbnQiOjEwOCwiLi9jb3JlL2NvbXBvbmVudCI6MTA5LCIuL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi9jb3JlL3NjZW5lL2Etc2NlbmUiOjExMiwiLi9jb3JlL3NjZW5lL3NjZW5lcyI6MTE2LCIuL2NvcmUvc2NoZW1hIjoxMTgsIi4vY29yZS9zaGFkZXIiOjExOSwiLi9jb3JlL3N5c3RlbSI6MTIwLCIuL2V4dHJhcy9jb21wb25lbnRzLyI6MTIxLCIuL2V4dHJhcy9wcmltaXRpdmVzLyI6MTI0LCIuL2V4dHJhcy9wcmltaXRpdmVzL2dldE1lc2hNaXhpbiI6MTIzLCIuL2V4dHJhcy9wcmltaXRpdmVzL3ByaW1pdGl2ZXMiOjEyNSwiLi9nZW9tZXRyaWVzL2luZGV4IjoxNDYsIi4vbGliL3RocmVlIjoxNTcsIi4vc2hhZGVycy9pbmRleCI6MTU5LCIuL3N0eWxlL2FmcmFtZS5jc3MiOjE2NCwiLi9zdHlsZS9yU3RhdHMuY3NzIjoxNjUsIi4vc3lzdGVtcy9pbmRleCI6MTY5LCIuL3V0aWxzLyI6MTgyLCIuL3V0aWxzL2lzSU9TT2xkZXJUaGFuMTAiOjE4NCwiY3VzdG9tLWV2ZW50LXBvbHlmaWxsIjo5LCJwcmVzZW50IjozMywicHJvbWlzZS1wb2x5ZmlsbCI6MzQsInN1cGVyLWFuaW1lanMiOjM2LCJ3ZWJ2ci1wb2x5ZmlsbCI6NDl9XSwxNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp3aW5kb3cuYWZyYW1lU3RhdHMgPSBmdW5jdGlvbiAoc2NlbmUpIHsKICB2YXIgX3JTID0gbnVsbDsKICB2YXIgX3NjZW5lID0gc2NlbmU7CiAgdmFyIF92YWx1ZXMgPSB7CiAgICB0ZTogewogICAgICBjYXB0aW9uOiAnRW50aXRpZXMnCiAgICB9LAogICAgbHQ6IHsKICAgICAgY2FwdGlvbjogJ0xvYWQgVGltZScKICAgIH0KICB9OwogIHZhciBfZ3JvdXBzID0gWyB7CiAgICBjYXB0aW9uOiAnQS1GcmFtZScsCiAgICB2YWx1ZXM6IFsgJ3RlJywgJ2x0JyBdCiAgfSBdOwoKICBmdW5jdGlvbiBfdXBkYXRlICgpIHsKICAgIF9yUygndGUnKS5zZXQoZ2V0RW50aXR5Q291bnQoKSk7CiAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUpIHsKICAgICAgX3JTKCdsdCcpLnNldCh3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSgncmVuZGVyLXN0YXJ0ZWQnKVswXS5zdGFydFRpbWUudG9GaXhlZCgwKSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRFbnRpdHlDb3VudCAoKSB7CiAgICB2YXIgZWxlbWVudHMgPSBfc2NlbmUucXVlcnlTZWxlY3RvckFsbCgnKicpOwogICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudHMpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsKICAgICAgcmV0dXJuIGVsLmlzRW50aXR5OwogICAgfSk7CiAgICByZXR1cm4gZWxlbWVudHMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gX3N0YXJ0ICgpIHt9CgogIGZ1bmN0aW9uIF9lbmQgKCkge30KCiAgZnVuY3Rpb24gX2F0dGFjaCAocikgewogICAgX3JTID0gcjsKICB9CgogIHJldHVybiB7CiAgICB1cGRhdGU6IF91cGRhdGUsCiAgICBzdGFydDogX3N0YXJ0LAogICAgZW5kOiBfZW5kLAogICAgYXR0YWNoOiBfYXR0YWNoLAogICAgdmFsdWVzOiBfdmFsdWVzLAogICAgZ3JvdXBzOiBfZ3JvdXBzLAogICAgZnJhY3Rpb25zOiBbXQogIH07Cn07CgppZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHsKICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgIGFmcmFtZVN0YXRzOiB3aW5kb3cuYWZyYW1lU3RhdHMKICB9Owp9Cgp9LHt9XSwxNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CnZhciBUSFJFRSA9IGdsb2JhbC5USFJFRSA9IF9kZXJlcV8oJ3N1cGVyLXRocmVlJyk7CgovLyBBbGxvdyBjcm9zcy1vcmlnaW4gaW1hZ2VzIHRvIGJlIGxvYWRlZC4KCi8vIFRoaXMgc2hvdWxkIG5vdCBiZSBvbiBgVEhSRUUuTG9hZGVyYCBub3IgYFRIUkVFLkltYWdlVXRpbHNgLgovLyBNdXN0IGJlIG9uIGBUSFJFRS5UZXh0dXJlTG9hZGVyYC4KaWYgKFRIUkVFLlRleHR1cmVMb2FkZXIpIHsKICBUSFJFRS5UZXh0dXJlTG9hZGVyLnByb3RvdHlwZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnOwp9CgovLyBUaGlzIGlzIGZvciBpbWFnZXMgbG9hZGVkIGZyb20gdGhlIG1vZGVsIGxvYWRlcnMuCmlmIChUSFJFRS5JbWFnZUxvYWRlcikgewogIFRIUkVFLkltYWdlTG9hZGVyLnByb3RvdHlwZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnOwp9CgovLyBJbi1tZW1vcnkgY2FjaGluZyBmb3IgWEhScyAoZm9yIGltYWdlcywgYXVkaW8gZmlsZXMsIHRleHR1cmVzLCBldGMuKS4KaWYgKFRIUkVFLkNhY2hlKSB7CiAgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWU7Cn0KCi8vIFRPRE86IEV2ZW50dWFsbHkgaW5jbHVkZSB0aGVzZSBvbmx5IGlmIHRoZXkgYXJlIG5lZWRlZCBieSBhIGNvbXBvbmVudC4KX2RlcmVxXygnLi4vLi4vdmVuZG9yL0RldmljZU9yaWVudGF0aW9uQ29udHJvbHMnKTsgLy8gVEhSRUUuRGV2aWNlT3JpZW50YXRpb25Db250cm9scwpfZGVyZXFfKCdzdXBlci10aHJlZS9leGFtcGxlcy9qcy9sb2FkZXJzL0RSQUNPTG9hZGVyJyk7ICAvLyBUSFJFRS5EUkFDT0xvYWRlcgpfZGVyZXFfKCdzdXBlci10aHJlZS9leGFtcGxlcy9qcy9sb2FkZXJzL0dMVEZMb2FkZXInKTsgIC8vIFRIUkVFLkdMVEZMb2FkZXIKX2RlcmVxXygnc3VwZXItdGhyZWUvZXhhbXBsZXMvanMvbG9hZGVycy9PQkpMb2FkZXInKTsgIC8vIFRIUkVFLk9CSkxvYWRlcgpfZGVyZXFfKCdzdXBlci10aHJlZS9leGFtcGxlcy9qcy9sb2FkZXJzL01UTExvYWRlcicpOyAgLy8gVEhSRUUuTVRMTG9hZGVyCgpUSFJFRS5EUkFDT0xvYWRlci5wcm90b3R5cGUuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJzsKVEhSRUUuR0xURkxvYWRlci5wcm90b3R5cGUuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJzsKVEhSRUUuTVRMTG9hZGVyLnByb3RvdHlwZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnOwpUSFJFRS5PQkpMb2FkZXIucHJvdG90eXBlLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7Cgptb2R1bGUuZXhwb3J0cyA9IFRIUkVFOwoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiLi4vLi4vdmVuZG9yL0RldmljZU9yaWVudGF0aW9uQ29udHJvbHMiOjE5MSwic3VwZXItdGhyZWUiOjM3LCJzdXBlci10aHJlZS9leGFtcGxlcy9qcy9sb2FkZXJzL0RSQUNPTG9hZGVyIjozOCwic3VwZXItdGhyZWUvZXhhbXBsZXMvanMvbG9hZGVycy9HTFRGTG9hZGVyIjozOSwic3VwZXItdGhyZWUvZXhhbXBsZXMvanMvbG9hZGVycy9NVExMb2FkZXIiOjQwLCJzdXBlci10aHJlZS9leGFtcGxlcy9qcy9sb2FkZXJzL09CSkxvYWRlciI6NDF9XSwxNTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTaGFkZXIgPSBfZGVyZXFfKCcuLi9jb3JlL3NoYWRlcicpLnJlZ2lzdGVyU2hhZGVyOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7CgovKioKICogRmxhdCBzaGFkZXIgdXNpbmcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwuCiAqLwptb2R1bGUuZXhwb3J0cy5TaGFkZXIgPSByZWdpc3RlclNoYWRlcignZmxhdCcsIHsKICBzY2hlbWE6IHsKICAgIGNvbG9yOiB7dHlwZTogJ2NvbG9yJ30sCiAgICBmb2c6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGhlaWdodDoge2RlZmF1bHQ6IDI1Nn0sCiAgICBvZmZzZXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAwLCB5OiAwfX0sCiAgICByZXBlYXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCiAgICBzcmM6IHt0eXBlOiAnbWFwJ30sCiAgICB3aWR0aDoge2RlZmF1bHQ6IDUxMn0sCiAgICB3aXJlZnJhbWU6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICB3aXJlZnJhbWVMaW5ld2lkdGg6IHtkZWZhdWx0OiAyfQogIH0sCgogIC8qKgogICAqIEluaXRpYWxpemVzIHRoZSBzaGFkZXIuCiAgICogQWRkcyBhIHJlZmVyZW5jZSBmcm9tIHRoZSBzY2VuZSB0byB0aGlzIGVudGl0eSBhcyB0aGUgY2FtZXJhLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtID0gdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMucmVuZGVyZXI7CiAgICB0aGlzLm1hdGVyaWFsRGF0YSA9IHtjb2xvcjogbmV3IFRIUkVFLkNvbG9yKCl9OwogICAgdGhpcy50ZXh0dXJlU3JjID0gbnVsbDsKICAgIGdldE1hdGVyaWFsRGF0YShkYXRhLCB0aGlzLm1hdGVyaWFsRGF0YSk7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKHRoaXMubWF0ZXJpYWxEYXRhLmNvbG9yKTsKICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwodGhpcy5tYXRlcmlhbERhdGEpOwogICAgdXRpbHMubWF0ZXJpYWwudXBkYXRlTWFwKHRoaXMsIGRhdGEpOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMudXBkYXRlTWF0ZXJpYWwoZGF0YSk7CiAgICB1dGlscy5tYXRlcmlhbC51cGRhdGVNYXAodGhpcywgZGF0YSk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRpbmcgZXhpc3RpbmcgbWF0ZXJpYWwuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIE1hdGVyaWFsIGNvbXBvbmVudCBkYXRhLgogICAqLwogIHVwZGF0ZU1hdGVyaWFsOiBmdW5jdGlvbiAoZGF0YSkgewogICAgdmFyIGtleTsKICAgIGdldE1hdGVyaWFsRGF0YShkYXRhLCB0aGlzLm1hdGVyaWFsRGF0YSk7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKHRoaXMubWF0ZXJpYWxEYXRhLmNvbG9yKTsKICAgIGZvciAoa2V5IGluIHRoaXMubWF0ZXJpYWxEYXRhKSB7CiAgICAgIHRoaXMubWF0ZXJpYWxba2V5XSA9IHRoaXMubWF0ZXJpYWxEYXRhW2tleV07CiAgICB9CiAgfQp9KTsKCi8qKgogKiBCdWlsZHMgYW5kIG5vcm1hbGl6ZSBtYXRlcmlhbCBkYXRhLCBub3JtYWxpemluZyBzdHVmZiBhbG9uZyB0aGUgd2F5LgogKgogKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIE1hdGVyaWFsIGRhdGEuCiAqIEBwYXJhbSB7b2JqZWN0fSBtYXRlcmlhbERhdGEgLSBPYmplY3QgdG8gcmV1c2UuCiAqIEByZXR1cm5zIHtvYmplY3R9IFVwZGF0ZWQgbWF0ZXJpYWwgZGF0YS4KICovCmZ1bmN0aW9uIGdldE1hdGVyaWFsRGF0YSAoZGF0YSwgbWF0ZXJpYWxEYXRhKSB7CiAgbWF0ZXJpYWxEYXRhLmNvbG9yLnNldChkYXRhLmNvbG9yKTsKICBtYXRlcmlhbERhdGEuZm9nID0gZGF0YS5mb2c7CiAgbWF0ZXJpYWxEYXRhLndpcmVmcmFtZSA9IGRhdGEud2lyZWZyYW1lOwogIG1hdGVyaWFsRGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSBkYXRhLndpcmVmcmFtZUxpbmV3aWR0aDsKICByZXR1cm4gbWF0ZXJpYWxEYXRhOwp9Cgp9LHsiLi4vY29yZS9zaGFkZXIiOjExOSwiLi4vbGliL3RocmVlIjoxNTcsIi4uL3V0aWxzLyI6MTgyfV0sMTU5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygnLi9mbGF0Jyk7Cl9kZXJlcV8oJy4vc3RhbmRhcmQnKTsKX2RlcmVxXygnLi9zZGYnKTsKX2RlcmVxXygnLi9tc2RmJyk7Cl9kZXJlcV8oJy4vaW9zMTBobHMnKTsKCn0seyIuL2ZsYXQiOjE1OCwiLi9pb3MxMGhscyI6MTYwLCIuL21zZGYiOjE2MSwiLi9zZGYiOjE2MiwiLi9zdGFuZGFyZCI6MTYzfV0sMTYwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyU2hhZGVyID0gX2RlcmVxXygnLi4vY29yZS9zaGFkZXInKS5yZWdpc3RlclNoYWRlcjsKCi8qKgogKiBDdXN0b20gc2hhZGVyIGZvciBpT1MgMTAgSFRUUCBMaXZlIFN0cmVhbWluZyAoSExTKS4KICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gSExTLCBzZWUgaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvZHJhZnQtcGFudG9zLWh0dHAtbGl2ZS1zdHJlYW1pbmcvCiAqLwptb2R1bGUuZXhwb3J0cy5TaGFkZXIgPSByZWdpc3RlclNoYWRlcignaW9zMTBobHMnLCB7CiAgc2NoZW1hOiB7CiAgICBzcmM6IHt0eXBlOiAnbWFwJywgaXM6ICd1bmlmb3JtJ30sCiAgICBvcGFjaXR5OiB7dHlwZTogJ251bWJlcicsIGlzOiAndW5pZm9ybScsIGRlZmF1bHQ6IDF9CiAgfSwKCiAgdmVydGV4U2hhZGVyOiBbCiAgICAndmFyeWluZyB2ZWMyIHZVVjsnLAogICAgJ3ZvaWQgbWFpbih2b2lkKSB7JywKICAgICcgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7JywKICAgICcgIHZVViA9IHV2OycsCiAgICAnfScKICBdLmpvaW4oJ1xuJyksCgogIGZyYWdtZW50U2hhZGVyOiBbCiAgICAndW5pZm9ybSBzYW1wbGVyMkQgc3JjOycsCiAgICAndW5pZm9ybSBmbG9hdCBvcGFjaXR5OycsCiAgICAndmFyeWluZyB2ZWMyIHZVVjsnLAogICAgJ3ZvaWQgbWFpbigpIHsnLAogICAgJyAgdmVjMiBvZmZzZXQgPSB2ZWMyKDAsIDApOycsCiAgICAnICB2ZWMyIHJlcGVhdCA9IHZlYzIoMSwgMSk7JywKICAgICcgIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQoc3JjLCB2ZWMyKHZVVi54IC8gcmVwZWF0LnggKyBvZmZzZXQueCwgKDEuMCAtIHZVVi55KSAvIHJlcGVhdC55ICsgb2Zmc2V0LnkpKS5iZ3JhOycsCiAgICAnICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgb3BhY2l0eSk7JywKICAgICd9JwogIF0uam9pbignXG4nKQp9KTsKCgp9LHsiLi4vY29yZS9zaGFkZXIiOjExOX1dLDE2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWdpc3RlclNoYWRlciA9IF9kZXJlcV8oJy4uL2NvcmUvc2hhZGVyJykucmVnaXN0ZXJTaGFkZXI7CgovKioKICogTXVsdGktY2hhbm5lbCBzaWduZWQgZGlzdGFuY2UgZmllbGQuCiAqIFVzZWQgYnkgdGV4dCBjb21wb25lbnQuCiAqLwptb2R1bGUuZXhwb3J0cy5TaGFkZXIgPSByZWdpc3RlclNoYWRlcignbXNkZicsIHsKICBzY2hlbWE6IHsKICAgIGFscGhhVGVzdDoge3R5cGU6ICdudW1iZXInLCBpczogJ3VuaWZvcm0nLCBkZWZhdWx0OiAwLjV9LAogICAgY29sb3I6IHt0eXBlOiAnY29sb3InLCBpczogJ3VuaWZvcm0nLCBkZWZhdWx0OiAnd2hpdGUnfSwKICAgIG1hcDoge3R5cGU6ICdtYXAnLCBpczogJ3VuaWZvcm0nfSwKICAgIG5lZ2F0ZToge3R5cGU6ICdib29sZWFuJywgaXM6ICd1bmlmb3JtJywgZGVmYXVsdDogdHJ1ZX0sCiAgICBvcGFjaXR5OiB7dHlwZTogJ251bWJlcicsIGlzOiAndW5pZm9ybScsIGRlZmF1bHQ6IDEuMH0KICB9LAoKICByYXc6IHRydWUsCgogIHZlcnRleFNoYWRlcjogWwogICAgJ2F0dHJpYnV0ZSB2ZWMyIHV2OycsCiAgICAnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247JywKICAgICd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLAogICAgJ3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7JywKICAgICd2YXJ5aW5nIHZlYzIgdlVWOycsCiAgICAndm9pZCBtYWluKHZvaWQpIHsnLAogICAgJyAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTsnLAogICAgJyAgdlVWID0gdXY7JywKICAgICd9JwogIF0uam9pbignXG4nKSwKCiAgZnJhZ21lbnRTaGFkZXI6IFsKICAgICcjaWZkZWYgR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJywKICAgICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlczogZW5hYmxlJywKICAgICcjZW5kaWYnLAoKICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JywKICAgICd1bmlmb3JtIGJvb2wgbmVnYXRlOycsCiAgICAndW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7JywKICAgICd1bmlmb3JtIGZsb2F0IG9wYWNpdHk7JywKICAgICd1bmlmb3JtIHNhbXBsZXIyRCBtYXA7JywKICAgICd1bmlmb3JtIHZlYzMgY29sb3I7JywKICAgICd2YXJ5aW5nIHZlYzIgdlVWOycsCgogICAgJ2Zsb2F0IG1lZGlhbihmbG9hdCByLCBmbG9hdCBnLCBmbG9hdCBiKSB7JywKICAgICcgIHJldHVybiBtYXgobWluKHIsIGcpLCBtaW4obWF4KHIsIGcpLCBiKSk7JywKICAgICd9JywKCiAgICAvLyBGSVhNRTogRXhwZXJpbWVudGFsbHkgZGV0ZXJtaW5lZCBjb25zdGFudHMuCiAgICAnI2RlZmluZSBCSUdfRU5PVUdIIDAuMDAxJywKICAgICcjZGVmaW5lIE1PRElGSUVEX0FMUEhBVEVTVCAoMC4wMiAqIGlzQmlnRW5vdWdoIC8gQklHX0VOT1VHSCknLAoKICAgICd2b2lkIG1haW4oKSB7JywKICAgICcgIHZlYzMgc2FtcGxlID0gdGV4dHVyZTJEKG1hcCwgdlVWKS5yZ2I7JywKICAgICcgIGlmIChuZWdhdGUpIHsgc2FtcGxlID0gMS4wIC0gc2FtcGxlOyB9JywKCiAgICAnICBmbG9hdCBzaWdEaXN0ID0gbWVkaWFuKHNhbXBsZS5yLCBzYW1wbGUuZywgc2FtcGxlLmIpIC0gMC41OycsCiAgICAnICBmbG9hdCBhbHBoYSA9IGNsYW1wKHNpZ0Rpc3QgLyBmd2lkdGgoc2lnRGlzdCkgKyAwLjUsIDAuMCwgMS4wKTsnLAogICAgJyAgZmxvYXQgZHNjYWxlID0gMC4zNTM1MDU7JywKICAgICcgIHZlYzIgZHV2ID0gZHNjYWxlICogKGRGZHgodlVWKSArIGRGZHkodlVWKSk7JywKICAgICcgIGZsb2F0IGlzQmlnRW5vdWdoID0gbWF4KGFicyhkdXYueCksIGFicyhkdXYueSkpOycsCgogICAgLy8gV2hlbiB0ZXhlbCBpcyB0b28gc21hbGwsIGJsZW5kIHJhdyBhbHBoYSB2YWx1ZSByYXRoZXIgdGhhbiBzdXBlcnNhbXBsaW5nLgogICAgLy8gRklYTUU6IEV4cGVyaW1lbnRhbGx5IGRldGVybWluZWQgY29uc3RhbnQuCiAgICAnICAvLyBEbyBtb2RpZmllZCBhbHBoYSB0ZXN0LicsCiAgICAnICBpZiAoaXNCaWdFbm91Z2ggPiBCSUdfRU5PVUdIKSB7JywKICAgICcgICAgZmxvYXQgcmF0aW8gPSBCSUdfRU5PVUdIIC8gaXNCaWdFbm91Z2g7JywKICAgICcgICAgYWxwaGEgPSByYXRpbyAqIGFscGhhICsgKDEuMCAtIHJhdGlvKSAqIChzaWdEaXN0ICsgMC41KTsnLAogICAgJyAgfScsCgogICAgJyAgLy8gRG8gbW9kaWZpZWQgYWxwaGEgdGVzdC4nLAogICAgJyAgaWYgKGFscGhhIDwgYWxwaGFUZXN0ICogTU9ESUZJRURfQUxQSEFURVNUKSB7IGRpc2NhcmQ7IHJldHVybjsgfScsCiAgICAnICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnh5eiwgYWxwaGEgKiBvcGFjaXR5KTsnLAogICAgJ30nCiAgXS5qb2luKCdcbicpCn0pOwoKfSx7Ii4uL2NvcmUvc2hhZGVyIjoxMTl9XSwxNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTaGFkZXIgPSBfZGVyZXFfKCcuLi9jb3JlL3NoYWRlcicpLnJlZ2lzdGVyU2hhZGVyOwoKLyoqCiAqIFNpZ25lZCBkaXN0YW5jZSBmaWVsZC4KICogVXNlZCBieSB0ZXh0IGNvbXBvbmVudC4KICovCm1vZHVsZS5leHBvcnRzLlNoYWRlciA9IHJlZ2lzdGVyU2hhZGVyKCdzZGYnLCB7CiAgc2NoZW1hOiB7CiAgICBhbHBoYVRlc3Q6IHt0eXBlOiAnbnVtYmVyJywgaXM6ICd1bmlmb3JtJywgZGVmYXVsdDogMC41fSwKICAgIGNvbG9yOiB7dHlwZTogJ2NvbG9yJywgaXM6ICd1bmlmb3JtJywgZGVmYXVsdDogJ3doaXRlJ30sCiAgICBtYXA6IHt0eXBlOiAnbWFwJywgaXM6ICd1bmlmb3JtJ30sCiAgICBvcGFjaXR5OiB7dHlwZTogJ251bWJlcicsIGlzOiAndW5pZm9ybScsIGRlZmF1bHQ6IDEuMH0KICB9LAoKICByYXc6IHRydWUsCgogIHZlcnRleFNoYWRlcjogWwogICAgJ2F0dHJpYnV0ZSB2ZWMyIHV2OycsCiAgICAnYXR0cmlidXRlIHZlYzMgcG9zaXRpb247JywKICAgICd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLAogICAgJ3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7JywKICAgICd2YXJ5aW5nIHZlYzIgdlVWOycsCiAgICAndm9pZCBtYWluKHZvaWQpIHsnLAogICAgJyAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTsnLAogICAgJyAgdlVWID0gdXY7JywKICAgICd9JwogIF0uam9pbignXG4nKSwKCiAgZnJhZ21lbnRTaGFkZXI6IFsKICAgICcjaWZkZWYgR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJywKICAgICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlczogZW5hYmxlJywKICAgICcjZW5kaWYnLAoKICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JywKICAgICd1bmlmb3JtIGZsb2F0IGFscGhhVGVzdDsnLAogICAgJ3VuaWZvcm0gZmxvYXQgb3BhY2l0eTsnLAogICAgJ3VuaWZvcm0gc2FtcGxlcjJEIG1hcDsnLAogICAgJ3VuaWZvcm0gdmVjMyBjb2xvcjsnLAogICAgJ3ZhcnlpbmcgdmVjMiB2VVY7JywKCiAgICAnI2lmZGVmIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycsCiAgICAnICBmbG9hdCBjb250b3VyKGZsb2F0IHdpZHRoLCBmbG9hdCB2YWx1ZSkgeycsCiAgICAnICAgIHJldHVybiBzbW9vdGhzdGVwKDAuNSAtIHZhbHVlLCAwLjUgKyB2YWx1ZSwgd2lkdGgpOycsCiAgICAnICB9JywKICAgICcjZWxzZScsCiAgICAnICBmbG9hdCBhYXN0ZXAoZmxvYXQgdmFsdWUsIGZsb2F0IGFmd2lkdGgpIHsnLAogICAgJyAgICByZXR1cm4gc21vb3Roc3RlcCgwLjUgLSBhZndpZHRoLCAwLjUgKyBhZndpZHRoLCB2YWx1ZSk7JywKICAgICcgIH0nLAogICAgJyNlbmRpZicsCgogICAgLy8gRklYTUU6IEV4cGVyaW1lbnRhbGx5IGRldGVybWluZWQgY29uc3RhbnRzLgogICAgJyNkZWZpbmUgQklHX0VOT1VHSCAwLjAwMScsCiAgICAnI2RlZmluZSBNT0RJRklFRF9BTFBIQVRFU1QgKDAuMDIgKiBpc0JpZ0Vub3VnaCAvIEJJR19FTk9VR0gpJywKICAgICcjZGVmaW5lIEFMTF9TTU9PVEggMC40JywKICAgICcjZGVmaW5lIEFMTF9ST1VHSCAwLjAyJywKICAgICcjZGVmaW5lIERJU0NBUkRfQUxQSEEgKGFscGhhVGVzdCAvICgyLjIgLSAxLjIgKiByYXRpbykpJywKCiAgICAndm9pZCBtYWluKCkgeycsCiAgICAgICAvLyBXaGVuIHdlIGhhdmUgZGVyaXZhdGl2ZXMgYW5kIGNhbiBnZXQgdGV4ZWwgc2l6ZSBmb3Igc3VwZXJzYW1wbGluZy4KICAgICcgICNpZmRlZiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnLAogICAgJyAgICB2ZWMyIHV2ID0gdlVWOycsCiAgICAnICAgIHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQobWFwLCB1dik7JywKICAgICcgICAgZmxvYXQgZGlzdCA9IHRleENvbG9yLmE7JywKICAgICcgICAgZmxvYXQgd2lkdGggPSBmd2lkdGgoZGlzdCk7JywKICAgICcgICAgZmxvYXQgYWxwaGEgPSBjb250b3VyKGRpc3QsIHdpZHRoKTsnLAogICAgJyAgICBmbG9hdCBkc2NhbGUgPSAwLjM1MzUwNTsnLAoKICAgICcgICAgdmVjMiBkdXYgPSBkc2NhbGUgKiAoZEZkeCh1dikgKyBkRmR5KHV2KSk7JywKICAgICcgICAgZmxvYXQgaXNCaWdFbm91Z2ggPSBtYXgoYWJzKGR1di54KSwgYWJzKGR1di55KSk7JywKCiAgICAgICAgIC8vIFdoZW4gdGV4ZWwgaXMgdG9vIHNtYWxsLCBibGVuZCByYXcgYWxwaGEgdmFsdWUgcmF0aGVyIHRoYW4gc3VwZXJzYW1wbGluZy4KICAgICAgICAgLy8gRklYTUU6IGV4cGVyaW1lbnRhbGx5IGRldGVybWluZWQgY29uc3RhbnQKICAgICcgICAgaWYgKGlzQmlnRW5vdWdoID4gQklHX0VOT1VHSCkgeycsCiAgICAnICAgICAgZmxvYXQgcmF0aW8gPSBCSUdfRU5PVUdIIC8gaXNCaWdFbm91Z2g7JywKICAgICcgICAgICBhbHBoYSA9IHJhdGlvICogYWxwaGEgKyAoMS4wIC0gcmF0aW8pICogZGlzdDsnLAogICAgJyAgICB9JywKCiAgICAgICAgIC8vIE90aGVyd2lzZSBkbyB3ZWlnaHRlZCBzdXBlcnNhbXBsaW5nLgogICAgICAgICAvLyBGSVhNRTogd2h5IHRoaXMgd2VpZ2h0aW5nPwogICAgJyAgICBpZiAoaXNCaWdFbm91Z2ggPD0gQklHX0VOT1VHSCkgeycsCiAgICAnICAgICAgdmVjNCBib3ggPSB2ZWM0ICh1diAtIGR1diwgdXYgKyBkdXYpOycsCiAgICAnICAgICAgYWxwaGEgPSAoYWxwaGEgKyAwLjUgKiAoJywKICAgICcgICAgICAgIGNvbnRvdXIodGV4dHVyZTJEKG1hcCwgYm94Lnh5KS5hLCB3aWR0aCknLAogICAgJyAgICAgICAgKyBjb250b3VyKHRleHR1cmUyRChtYXAsIGJveC56dykuYSwgd2lkdGgpJywKICAgICcgICAgICAgICsgY29udG91cih0ZXh0dXJlMkQobWFwLCBib3gueHcpLmEsIHdpZHRoKScsCiAgICAnICAgICAgICArIGNvbnRvdXIodGV4dHVyZTJEKG1hcCwgYm94Lnp5KS5hLCB3aWR0aCknLAogICAgJyAgICAgICkpIC8gMy4wOycsCiAgICAnICAgIH0nLAoKICAgICAgICAgLy8gRG8gbW9kaWZpZWQgYWxwaGEgdGVzdC4KICAgICcgICAgaWYgKGFscGhhIDwgYWxwaGFUZXN0ICogTU9ESUZJRURfQUxQSEFURVNUKSB7IGRpc2NhcmQ7IHJldHVybjsgfScsCgogICAgJyAgI2Vsc2UnLAogICAgICAgICAvLyBXaGVuIHdlIGRvbid0IGhhdmUgZGVyaXZhdGl2ZXMsIHVzZSBhcHByb3hpbWF0aW9ucy4KICAgICcgICAgdmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRChtYXAsIHZVVik7JywKICAgICcgICAgZmxvYXQgdmFsdWUgPSB0ZXhDb2xvci5hOycsCiAgICAgICAgIC8vIEZJWE1FOiBpZiB3ZSB1bmRlcnN0b29kIGZvbnQgcGl4ZWwgZGltZW5zaW9ucywgdGhpcyBjb3VsZCBwcm9iYWJseSBiZSBpbXByb3ZlZAogICAgJyAgICBmbG9hdCBhZndpZHRoID0gKDEuMCAvIDMyLjApICogKDEuNDE0MjEzNTYyMzczMDk1MSAvICgyLjAgKiBnbF9GcmFnQ29vcmQudykpOycsCiAgICAnICAgIGZsb2F0IGFscGhhID0gYWFzdGVwKHZhbHVlLCBhZndpZHRoKTsnLAoKICAgICAgICAgLy8gVXNlIGdsX0ZyYWdDb29yZC53IHRvIGd1ZXNzIHdoZW4gd2Ugc2hvdWxkIGJsZW5kLgogICAgICAgICAvLyBGSVhNRTogSWYgd2UgdW5kZXJzdG9vZCBmb250IHBpeGVsIGRpbWVuc2lvbnMsIHRoaXMgY291bGQgcHJvYmFibHkgYmUgaW1wcm92ZWQuCiAgICAnICAgIGZsb2F0IHJhdGlvID0gKGdsX0ZyYWdDb29yZC53ID49IEFMTF9TTU9PVEgpID8gMS4wIDogKGdsX0ZyYWdDb29yZC53IDwgQUxMX1JPVUdIKSA/IDAuMCA6IChnbF9GcmFnQ29vcmQudyAtIEFMTF9ST1VHSCkgLyAoQUxMX1NNT09USCAtIEFMTF9ST1VHSCk7JywKICAgICcgICAgaWYgKGFscGhhIDwgYWxwaGFUZXN0KSB7IGlmIChyYXRpbyA+PSAxLjApIHsgZGlzY2FyZDsgcmV0dXJuOyB9IGFscGhhID0gMC4wOyB9JywKICAgICcgICAgYWxwaGEgPSBhbHBoYSAqIHJhdGlvICsgKDEuMCAtIHJhdGlvKSAqIHZhbHVlOycsCiAgICAnICAgIGlmIChyYXRpbyA8IDEuMCAmJiBhbHBoYSA8PSBESVNDQVJEX0FMUEhBKSB7IGRpc2NhcmQ7IHJldHVybjsgfScsCiAgICAnICAjZW5kaWYnLAoKICAgICcgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsIG9wYWNpdHkgKiBhbHBoYSk7JywKICAgICd9JwogIF0uam9pbignXG4nKQp9KTsKCn0seyIuLi9jb3JlL3NoYWRlciI6MTE5fV0sMTYzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZ2lzdGVyU2hhZGVyID0gX2RlcmVxXygnLi4vY29yZS9zaGFkZXInKS5yZWdpc3RlclNoYWRlcjsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7CnZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzLycpOwoKdmFyIEN1YmVMb2FkZXIgPSBuZXcgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKTsKdmFyIHRleHR1cmVQcm9taXNlcyA9IHt9OwoKLyoqCiAqIFN0YW5kYXJkIChwaHlzaWNhbGx5LWJhc2VkKSBzaGFkZXIgdXNpbmcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwuCiAqLwptb2R1bGUuZXhwb3J0cy5TaGFkZXIgPSByZWdpc3RlclNoYWRlcignc3RhbmRhcmQnLCB7CiAgc2NoZW1hOiB7CiAgICBhbWJpZW50T2NjbHVzaW9uTWFwOiB7dHlwZTogJ21hcCd9LAogICAgYW1iaWVudE9jY2x1c2lvbk1hcEludGVuc2l0eToge2RlZmF1bHQ6IDF9LAogICAgYW1iaWVudE9jY2x1c2lvblRleHR1cmVPZmZzZXQ6IHt0eXBlOiAndmVjMid9LAogICAgYW1iaWVudE9jY2x1c2lvblRleHR1cmVSZXBlYXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCgogICAgY29sb3I6IHt0eXBlOiAnY29sb3InfSwKCiAgICBkaXNwbGFjZW1lbnRNYXA6IHt0eXBlOiAnbWFwJ30sCiAgICBkaXNwbGFjZW1lbnRTY2FsZToge2RlZmF1bHQ6IDF9LAogICAgZGlzcGxhY2VtZW50Qmlhczoge2RlZmF1bHQ6IDAuNX0sCiAgICBkaXNwbGFjZW1lbnRUZXh0dXJlT2Zmc2V0OiB7dHlwZTogJ3ZlYzInfSwKICAgIGRpc3BsYWNlbWVudFRleHR1cmVSZXBlYXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCiAgICBlbWlzc2l2ZToge3R5cGU6ICdjb2xvcicsIGRlZmF1bHQ6ICcjMDAwJ30sCiAgICBlbWlzc2l2ZUludGVuc2l0eToge2RlZmF1bHQ6IDF9LAogICAgZW52TWFwOiB7ZGVmYXVsdDogJyd9LAoKICAgIGZvZzoge2RlZmF1bHQ6IHRydWV9LAogICAgaGVpZ2h0OiB7ZGVmYXVsdDogMjU2fSwKCiAgICBtZXRhbG5lc3M6IHtkZWZhdWx0OiAwLjAsIG1pbjogMC4wLCBtYXg6IDEuMH0sCiAgICBtZXRhbG5lc3NNYXA6IHt0eXBlOiAnbWFwJ30sCiAgICBtZXRhbG5lc3NUZXh0dXJlT2Zmc2V0OiB7dHlwZTogJ3ZlYzInfSwKICAgIG1ldGFsbmVzc1RleHR1cmVSZXBlYXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCgogICAgbm9ybWFsTWFwOiB7dHlwZTogJ21hcCd9LAogICAgbm9ybWFsU2NhbGU6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCiAgICBub3JtYWxUZXh0dXJlT2Zmc2V0OiB7dHlwZTogJ3ZlYzInfSwKICAgIG5vcm1hbFRleHR1cmVSZXBlYXQ6IHt0eXBlOiAndmVjMicsIGRlZmF1bHQ6IHt4OiAxLCB5OiAxfX0sCgogICAgb2Zmc2V0OiB7dHlwZTogJ3ZlYzInLCBkZWZhdWx0OiB7eDogMCwgeTogMH19LAogICAgcmVwZWF0OiB7dHlwZTogJ3ZlYzInLCBkZWZhdWx0OiB7eDogMSwgeTogMX19LAoKICAgIHJvdWdobmVzczoge2RlZmF1bHQ6IDAuNSwgbWluOiAwLjAsIG1heDogMS4wfSwKICAgIHJvdWdobmVzc01hcDoge3R5cGU6ICdtYXAnfSwKICAgIHJvdWdobmVzc1RleHR1cmVPZmZzZXQ6IHt0eXBlOiAndmVjMid9LAogICAgcm91Z2huZXNzVGV4dHVyZVJlcGVhdDoge3R5cGU6ICd2ZWMyJywgZGVmYXVsdDoge3g6IDEsIHk6IDF9fSwKCiAgICBzcGhlcmljYWxFbnZNYXA6IHt0eXBlOiAnbWFwJ30sCiAgICBzcmM6IHt0eXBlOiAnbWFwJ30sCiAgICB3aWR0aDoge2RlZmF1bHQ6IDUxMn0sCiAgICB3aXJlZnJhbWU6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICB3aXJlZnJhbWVMaW5ld2lkdGg6IHtkZWZhdWx0OiAyfQogIH0sCgogIC8qKgogICAqIEluaXRpYWxpemVzIHRoZSBzaGFkZXIuCiAgICogQWRkcyBhIHJlZmVyZW5jZSBmcm9tIHRoZSBzY2VuZSB0byB0aGlzIGVudGl0eSBhcyB0aGUgY2FtZXJhLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtID0gdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMucmVuZGVyZXI7CiAgICB0aGlzLm1hdGVyaWFsRGF0YSA9IHtjb2xvcjogbmV3IFRIUkVFLkNvbG9yKCksIGVtaXNzaXZlOiBuZXcgVEhSRUUuQ29sb3IoKX07CiAgICBnZXRNYXRlcmlhbERhdGEoZGF0YSwgdGhpcy5tYXRlcmlhbERhdGEpOwogICAgdGhpcy5yZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbih0aGlzLm1hdGVyaWFsRGF0YS5jb2xvcik7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKHRoaXMubWF0ZXJpYWxEYXRhLmVtaXNzaXZlKTsKICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwodGhpcy5tYXRlcmlhbERhdGEpOwoKICAgIHV0aWxzLm1hdGVyaWFsLnVwZGF0ZU1hcCh0aGlzLCBkYXRhKTsKICAgIGlmIChkYXRhLm5vcm1hbE1hcCkgeyB1dGlscy5tYXRlcmlhbC51cGRhdGVEaXN0b3J0aW9uTWFwKCdub3JtYWwnLCB0aGlzLCBkYXRhKTsgfQogICAgaWYgKGRhdGEuZGlzcGxhY2VtZW50TWFwKSB7IHV0aWxzLm1hdGVyaWFsLnVwZGF0ZURpc3RvcnRpb25NYXAoJ2Rpc3BsYWNlbWVudCcsIHRoaXMsIGRhdGEpOyB9CiAgICBpZiAoZGF0YS5hbWJpZW50T2NjbHVzaW9uTWFwKSB7IHV0aWxzLm1hdGVyaWFsLnVwZGF0ZURpc3RvcnRpb25NYXAoJ2FtYmllbnRPY2NsdXNpb24nLCB0aGlzLCBkYXRhKTsgfQogICAgaWYgKGRhdGEubWV0YWxuZXNzTWFwKSB7IHV0aWxzLm1hdGVyaWFsLnVwZGF0ZURpc3RvcnRpb25NYXAoJ21ldGFsbmVzcycsIHRoaXMsIGRhdGEpOyB9CiAgICBpZiAoZGF0YS5yb3VnaG5lc3NNYXApIHsgdXRpbHMubWF0ZXJpYWwudXBkYXRlRGlzdG9ydGlvbk1hcCgncm91Z2huZXNzJywgdGhpcywgZGF0YSk7IH0KICAgIHRoaXMudXBkYXRlRW52TWFwKGRhdGEpOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHRoaXMudXBkYXRlTWF0ZXJpYWwoZGF0YSk7CiAgICB1dGlscy5tYXRlcmlhbC51cGRhdGVNYXAodGhpcywgZGF0YSk7CiAgICBpZiAoZGF0YS5ub3JtYWxNYXApIHsgdXRpbHMubWF0ZXJpYWwudXBkYXRlRGlzdG9ydGlvbk1hcCgnbm9ybWFsJywgdGhpcywgZGF0YSk7IH0KICAgIGlmIChkYXRhLmRpc3BsYWNlbWVudE1hcCkgeyB1dGlscy5tYXRlcmlhbC51cGRhdGVEaXN0b3J0aW9uTWFwKCdkaXNwbGFjZW1lbnQnLCB0aGlzLCBkYXRhKTsgfQogICAgaWYgKGRhdGEuYW1iaWVudE9jY2x1c2lvbk1hcCkgeyB1dGlscy5tYXRlcmlhbC51cGRhdGVEaXN0b3J0aW9uTWFwKCdhbWJpZW50T2NjbHVzaW9uJywgdGhpcywgZGF0YSk7IH0KICAgIGlmIChkYXRhLm1ldGFsbmVzc01hcCkgeyB1dGlscy5tYXRlcmlhbC51cGRhdGVEaXN0b3J0aW9uTWFwKCdtZXRhbG5lc3MnLCB0aGlzLCBkYXRhKTsgfQogICAgaWYgKGRhdGEucm91Z2huZXNzTWFwKSB7IHV0aWxzLm1hdGVyaWFsLnVwZGF0ZURpc3RvcnRpb25NYXAoJ3JvdWdobmVzcycsIHRoaXMsIGRhdGEpOyB9CiAgICB0aGlzLnVwZGF0ZUVudk1hcChkYXRhKTsKICB9LAoKICAvKioKICAgKiBVcGRhdGluZyBleGlzdGluZyBtYXRlcmlhbC4KICAgKgogICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gTWF0ZXJpYWwgY29tcG9uZW50IGRhdGEuCiAgICogQHJldHVybnMge29iamVjdH0gTWF0ZXJpYWwuCiAgICovCiAgdXBkYXRlTWF0ZXJpYWw6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIga2V5OwogICAgdmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDsKICAgIGdldE1hdGVyaWFsRGF0YShkYXRhLCB0aGlzLm1hdGVyaWFsRGF0YSk7CiAgICB0aGlzLnJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKHRoaXMubWF0ZXJpYWxEYXRhLmNvbG9yKTsKICAgIHRoaXMucmVuZGVyZXJTeXN0ZW0uYXBwbHlDb2xvckNvcnJlY3Rpb24odGhpcy5tYXRlcmlhbERhdGEuZW1pc3NpdmUpOwogICAgZm9yIChrZXkgaW4gdGhpcy5tYXRlcmlhbERhdGEpIHsKICAgICAgbWF0ZXJpYWxba2V5XSA9IHRoaXMubWF0ZXJpYWxEYXRhW2tleV07CiAgICB9CiAgfSwKCiAgLyoqCiAgICogSGFuZGxlIGVudmlyb25tZW50IGN1YmVtYXAuIFRleHR1cmVzIGFyZSBjYWNoZWQgaW4gdGV4dHVyZVByb21pc2VzLgogICAqLwogIHVwZGF0ZUVudk1hcDogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7CiAgICB2YXIgZW52TWFwID0gZGF0YS5lbnZNYXA7CiAgICB2YXIgc3BoZXJpY2FsRW52TWFwID0gZGF0YS5zcGhlcmljYWxFbnZNYXA7CgogICAgLy8gTm8gZW52TWFwIGRlZmluZWQgb3IgYWxyZWFkeSBsb2FkaW5nLgogICAgaWYgKCghZW52TWFwICYmICFzcGhlcmljYWxFbnZNYXApIHx8IHRoaXMuaXNMb2FkaW5nRW52TWFwKSB7CiAgICAgIG1hdGVyaWFsLmVudk1hcCA9IG51bGw7CiAgICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdGhpcy5pc0xvYWRpbmdFbnZNYXAgPSB0cnVlOwoKICAgIC8vIGlmIGEgc3BoZXJpY2FsIGVudiBtYXAgaXMgZGVmaW5lZCB0aGVuIHVzZSBpdC4KICAgIGlmIChzcGhlcmljYWxFbnZNYXApIHsKICAgICAgdGhpcy5lbC5zY2VuZUVsLnN5c3RlbXMubWF0ZXJpYWwubG9hZFRleHR1cmUoc3BoZXJpY2FsRW52TWFwLCB7c3JjOiBzcGhlcmljYWxFbnZNYXB9LCBmdW5jdGlvbiB0ZXh0dXJlTG9hZGVkICh0ZXh0dXJlKSB7CiAgICAgICAgc2VsZi5pc0xvYWRpbmdFbnZNYXAgPSBmYWxzZTsKICAgICAgICB0ZXh0dXJlLm1hcHBpbmcgPSBUSFJFRS5TcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzsKICAgICAgICBtYXRlcmlhbC5lbnZNYXAgPSB0ZXh0dXJlOwogICAgICAgIHV0aWxzLm1hdGVyaWFsLmhhbmRsZVRleHR1cmVFdmVudHMoc2VsZi5lbCwgdGV4dHVyZSk7CiAgICAgICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIEFub3RoZXIgbWF0ZXJpYWwgaXMgYWxyZWFkeSBsb2FkaW5nIHRoaXMgdGV4dHVyZS4gV2FpdCBvbiBwcm9taXNlLgogICAgaWYgKHRleHR1cmVQcm9taXNlc1tlbnZNYXBdKSB7CiAgICAgIHRleHR1cmVQcm9taXNlc1tlbnZNYXBdLnRoZW4oZnVuY3Rpb24gKGN1YmUpIHsKICAgICAgICBzZWxmLmlzTG9hZGluZ0Vudk1hcCA9IGZhbHNlOwogICAgICAgIG1hdGVyaWFsLmVudk1hcCA9IGN1YmU7CiAgICAgICAgdXRpbHMubWF0ZXJpYWwuaGFuZGxlVGV4dHVyZUV2ZW50cyhzZWxmLmVsLCBjdWJlKTsKICAgICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7CiAgICAgIH0pOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gTWF0ZXJpYWwgaXMgZmlyc3QgdG8gbG9hZCB0aGlzIHRleHR1cmUuIExvYWQgYW5kIHJlc29sdmUgdGV4dHVyZS4KICAgIHRleHR1cmVQcm9taXNlc1tlbnZNYXBdID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgdXRpbHMuc3JjTG9hZGVyLnZhbGlkYXRlQ3ViZW1hcFNyYyhlbnZNYXAsIGZ1bmN0aW9uIGxvYWRFbnZNYXAgKHVybHMpIHsKICAgICAgICBDdWJlTG9hZGVyLmxvYWQodXJscywgZnVuY3Rpb24gKGN1YmUpIHsKICAgICAgICAgIC8vIFRleHR1cmUgbG9hZGVkLgogICAgICAgICAgc2VsZi5pc0xvYWRpbmdFbnZNYXAgPSBmYWxzZTsKICAgICAgICAgIG1hdGVyaWFsLmVudk1hcCA9IGN1YmU7CiAgICAgICAgICB1dGlscy5tYXRlcmlhbC5oYW5kbGVUZXh0dXJlRXZlbnRzKHNlbGYuZWwsIGN1YmUpOwogICAgICAgICAgcmVzb2x2ZShjdWJlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9Cn0pOwoKLyoqCiAqIEJ1aWxkcyBhbmQgbm9ybWFsaXplIG1hdGVyaWFsIGRhdGEsIG5vcm1hbGl6aW5nIHN0dWZmIGFsb25nIHRoZSB3YXkuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gTWF0ZXJpYWwgZGF0YS4KICogQHBhcmFtIHtvYmplY3R9IG1hdGVyaWFsRGF0YSAtIE9iamVjdCB0byB1c2UuCiAqIEByZXR1cm5zIHtvYmplY3R9IFVwZGF0ZWQgbWF0ZXJpYWxEYXRhLgogKi8KZnVuY3Rpb24gZ2V0TWF0ZXJpYWxEYXRhIChkYXRhLCBtYXRlcmlhbERhdGEpIHsKICBtYXRlcmlhbERhdGEuY29sb3Iuc2V0KGRhdGEuY29sb3IpOwogIG1hdGVyaWFsRGF0YS5lbWlzc2l2ZS5zZXQoZGF0YS5lbWlzc2l2ZSk7CiAgbWF0ZXJpYWxEYXRhLmVtaXNzaXZlSW50ZW5zaXR5ID0gZGF0YS5lbWlzc2l2ZUludGVuc2l0eTsKICBtYXRlcmlhbERhdGEuZm9nID0gZGF0YS5mb2c7CiAgbWF0ZXJpYWxEYXRhLm1ldGFsbmVzcyA9IGRhdGEubWV0YWxuZXNzOwogIG1hdGVyaWFsRGF0YS5yb3VnaG5lc3MgPSBkYXRhLnJvdWdobmVzczsKICBtYXRlcmlhbERhdGEud2lyZWZyYW1lID0gZGF0YS53aXJlZnJhbWU7CiAgbWF0ZXJpYWxEYXRhLndpcmVmcmFtZUxpbmV3aWR0aCA9IGRhdGEud2lyZWZyYW1lTGluZXdpZHRoOwoKICBpZiAoZGF0YS5ub3JtYWxNYXApIHsgbWF0ZXJpYWxEYXRhLm5vcm1hbFNjYWxlID0gZGF0YS5ub3JtYWxTY2FsZTsgfQoKICBpZiAoZGF0YS5hbWJpZW50T2NjbHVzaW9uTWFwKSB7CiAgICBtYXRlcmlhbERhdGEuYW9NYXBJbnRlbnNpdHkgPSBkYXRhLmFtYmllbnRPY2NsdXNpb25NYXBJbnRlbnNpdHk7CiAgfQoKICBpZiAoZGF0YS5kaXNwbGFjZW1lbnRNYXApIHsKICAgIG1hdGVyaWFsRGF0YS5kaXNwbGFjZW1lbnRTY2FsZSA9IGRhdGEuZGlzcGxhY2VtZW50U2NhbGU7CiAgICBtYXRlcmlhbERhdGEuZGlzcGxhY2VtZW50QmlhcyA9IGRhdGEuZGlzcGxhY2VtZW50QmlhczsKICB9CgogIHJldHVybiBtYXRlcmlhbERhdGE7Cn0KCn0seyIuLi9jb3JlL3NoYWRlciI6MTE5LCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvIjoxODJ9XSwxNjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY3NzID0gImh0bWwuYS1mdWxsc2NyZWVue2JvdHRvbTowO2xlZnQ6MDtwb3NpdGlvbjpmaXhlZDtyaWdodDowO3RvcDowfWh0bWwuYS1mdWxsc2NyZWVuIGJvZHl7aGVpZ2h0OjEwMCU7bWFyZ2luOjA7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MDt3aWR0aDoxMDAlfWh0bWwuYS1mdWxsc2NyZWVuIC5hLWNhbnZhc3t3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7dG9wOjAhaW1wb3J0YW50O2xlZnQ6MCFpbXBvcnRhbnQ7cmlnaHQ6MCFpbXBvcnRhbnQ7Ym90dG9tOjAhaW1wb3J0YW50O3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudH1odG1sOm5vdCguYS1mdWxsc2NyZWVuKSAuYS1lbnRlci1hcixodG1sOm5vdCguYS1mdWxsc2NyZWVuKSAuYS1lbnRlci12cntyaWdodDo1cHg7Ym90dG9tOjVweH06LXdlYmtpdC1mdWxsLXNjcmVlbntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5hLWhpZGRlbntkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5hLWNhbnZhc3toZWlnaHQ6MTAwJTtsZWZ0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7d2lkdGg6MTAwJX0uYS1jYW52YXMuYS1ncmFiLWN1cnNvcjpob3ZlcntjdXJzb3I6Z3JhYjtjdXJzb3I6LW1vei1ncmFiO2N1cnNvcjotd2Via2l0LWdyYWJ9Y2FudmFzLmEtY2FudmFzLmEtbW91c2UtY3Vyc29yLWhvdmVyOmhvdmVye2N1cnNvcjpwb2ludGVyfS5hLWluc3BlY3Rvci1sb2FkZXJ7YmFja2dyb3VuZC1jb2xvcjojZWQzMTYwO3Bvc2l0aW9uOmZpeGVkO2xlZnQ6M3B4O3RvcDozcHg7cGFkZGluZzo2cHggMTBweDtjb2xvcjojZmZmO3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtZmFtaWx5OlJvYm90byxzYW5zLXNlcmlmO3RleHQtYWxpZ246Y2VudGVyO3otaW5kZXg6OTk5OTk7d2lkdGg6MjA0cHh9QGtleWZyYW1lcyBkb3RzLTF7ZnJvbXtvcGFjaXR5OjB9MjUle29wYWNpdHk6MX19QGtleWZyYW1lcyBkb3RzLTJ7ZnJvbXtvcGFjaXR5OjB9NTAle29wYWNpdHk6MX19QGtleWZyYW1lcyBkb3RzLTN7ZnJvbXtvcGFjaXR5OjB9NzUle29wYWNpdHk6MX19QC13ZWJraXQta2V5ZnJhbWVzIGRvdHMtMXtmcm9te29wYWNpdHk6MH0yNSV7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgZG90cy0ye2Zyb217b3BhY2l0eTowfTUwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBkb3RzLTN7ZnJvbXtvcGFjaXR5OjB9NzUle29wYWNpdHk6MX19LmEtaW5zcGVjdG9yLWxvYWRlciAuZG90cyBzcGFue2FuaW1hdGlvbjpkb3RzLTEgMnMgaW5maW5pdGUgc3RlcHMoMSk7LXdlYmtpdC1hbmltYXRpb246ZG90cy0xIDJzIGluZmluaXRlIHN0ZXBzKDEpfS5hLWluc3BlY3Rvci1sb2FkZXIgLmRvdHMgc3BhbjpmaXJzdC1jaGlsZCtzcGFue2FuaW1hdGlvbi1uYW1lOmRvdHMtMjstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmRvdHMtMn0uYS1pbnNwZWN0b3ItbG9hZGVyIC5kb3RzIHNwYW46Zmlyc3QtY2hpbGQrc3BhbitzcGFue2FuaW1hdGlvbi1uYW1lOmRvdHMtMzstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmRvdHMtM31hLXNjZW5le2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX1hLWFzc2V0cyxhLXNjZW5lIGF1ZGlvLGEtc2NlbmUgaW1nLGEtc2NlbmUgdmlkZW97ZGlzcGxheTpub25lfS5hLWVudGVyLXZyLW1vZGFsLC5hLW9yaWVudGF0aW9uLW1vZGFse2ZvbnQtZmFtaWx5OkNvbnNvbGFzLEFuZGFsZSBNb25vLENvdXJpZXIgTmV3LG1vbm9zcGFjZX0uYS1lbnRlci12ci1tb2RhbCBhe2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNmZmY7cGFkZGluZzoycHggMDt0ZXh0LWRlY29yYXRpb246bm9uZTt0cmFuc2l0aW9uOi4xcyBjb2xvciBlYXNlLWlufS5hLWVudGVyLXZyLW1vZGFsIGE6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbG9yOiMxMTE7cGFkZGluZzoycHggNHB4O3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6LTRweH0uYS1lbnRlci1hciwuYS1lbnRlci12cntmb250LWZhbWlseTpzYW5zLXNlcmlmLG1vbm9zcGFjZTtmb250LXNpemU6MTNweDt3aWR0aDoxMDAlO2ZvbnQtd2VpZ2h0OjIwMDtsaW5lLWhlaWdodDoxNnB4O3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjIwcHg7Ym90dG9tOjIwcHh9LmEtZW50ZXItYXJ7cmlnaHQ6ODBweH0uYS1lbnRlci12ci1idXR0b24sLmEtZW50ZXItdnItbW9kYWwsLmEtZW50ZXItdnItbW9kYWwgYXtjb2xvcjojZmZmO3VzZXItc2VsZWN0Om5vbmU7b3V0bGluZTowfS5hLWVudGVyLXZyLWJ1dHRvbntiYWNrZ3JvdW5kOnVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMTA4JyBoZWlnaHQ9JzYyJyB2aWV3Qm94PScwIDAgMTA4IDYyJyUzRSUzQ3RpdGxlJTNFYWZyYW1lLXZybW9kZS1ub2JvcmRlci1yZWR1Y2VkLXRyYWNraW5nJTNDL3RpdGxlJTNFJTNDcGF0aCBkPSdNNjguODEsMjEuNTZINjQuMjN2OC4yN2g0LjU4YTQuMTMsNC4xMywwLDAsMCwzLjEtMS4wOSw0LjIsNC4yLDAsMCwwLDEtMyw0LjI0LDQuMjQsMCwwLDAtMS0zQTQuMDUsNC4wNSwwLDAsMCw2OC44MSwyMS41NlonIGZpbGw9JyUyM2ZmZicvJTNFJTNDcGF0aCBkPSdNOTYsMEgxMkExMiwxMiwwLDAsMCwwLDEyVjUwQTEyLDEyLDAsMCwwLDEyLDYySDk2YTEyLDEyLDAsMCwwLDEyLTEyVjEyQTEyLDEyLDAsMCwwLDk2LDBaTTQxLjksNDZIMzRMMjQsMTZoOGw2LDIxLjg0LDYtMjEuODRINTJabTM5LjI5LDBINzMuNDRMNjguMTUsMzUuMzlINjQuMjNWNDZINTdWMTZINjguODFxNS4zMiwwLDguMzQsMi4zN2E4LDgsMCwwLDEsMyw2LjY5LDkuNjgsOS42OCwwLDAsMS0xLjI3LDUuMTgsOC45LDguOSwwLDAsMS00LDMuMzRsNi4yNiwxMi4xMVonIGZpbGw9JyUyM2ZmZicvJTNFJTNDL3N2ZyUzRVwiKSA1MCUgNTAlIG5vLXJlcGVhdCByZ2JhKDAsMCwwLC4zNSl9LmEtZW50ZXItYXItYnV0dG9ue2JhY2tncm91bmQ6dXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScxMDgnIGhlaWdodD0nNjInIHZpZXdCb3g9JzAgMCAxMDggNjInJTNFJTNDdGl0bGUlM0VhZnJhbWUtYXJtb2RlLW5vYm9yZGVyLXJlZHVjZWQtdHJhY2tpbmclM0MvdGl0bGUlM0UlM0NwYXRoIGQ9J005NiwwSDEyQTEyLDEyLDAsMCwwLDAsMTJWNTBBMTIsMTIsMCwwLDAsMTIsNjJIOTZhMTIsMTIsMCwwLDAsMTItMTJWMTJBMTIsMTIsMCwwLDAsOTYsMFptOCw1MGE4LDgsMCwwLDEtOCw4SDEyYTgsOCwwLDAsMS04LThWMTJhOCw4LDAsMCwxLDgtOEg5NmE4LDgsMCwwLDEsOCw4WicgZmlsbD0nJTIzZmZmJy8lM0UlM0NwYXRoIGQ9J000My4zNSwzOS44MkgzMi41MUwzMC40NSw0NkgyMy44OEwzNSwxNmg1LjczTDUyLDQ2SDQ1LjQzWm0tOS4xNy01aDcuNUwzNy45MSwyMy41OFonIGZpbGw9JyUyM2ZmZicvJTNFJTNDcGF0aCBkPSdNNjguMTEsMzVINjMuMThWNDZINTdWMTZINjguMTVxNS4zMSwwLDguMiwyLjM3YTguMTgsOC4xOCwwLDAsMSwyLjg4LDYuNyw5LjIyLDkuMjIsMCwwLDEtMS4zMyw1LjEyLDkuMDksOS4wOSwwLDAsMS00LDMuMjZsNi40OSwxMi4yNlY0Nkg3My43M1ptLTQuOTMtNWg1YTUuMDksNS4wOSwwLDAsMCwzLjYtMS4xOCw0LjIxLDQuMjEsMCwwLDAsMS4yOC0zLjI3LDQuNTYsNC41NiwwLDAsMC0xLjItMy4zNEE1LDUsMCwwLDAsNjguMTUsMjFoLTVaJyBmaWxsPSclMjNmZmYnLyUzRSUzQy9zdmclM0VcIikgNTAlIDUwJSBuby1yZXBlYXQgcmdiYSgwLDAsMCwuMil9LmEtZW50ZXItYXItYnV0dG9uLC5hLWVudGVyLXZyLWJ1dHRvbntiYWNrZ3JvdW5kLXNpemU6OTAlIDkwJTtib3JkZXI6MDtib3R0b206MDtjdXJzb3I6cG9pbnRlcjttaW4td2lkdGg6NThweDttaW4taGVpZ2h0OjM0cHg7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjA1cyBlYXNlOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4wNXMgZWFzZTt6LWluZGV4Ojk5OTk7Ym9yZGVyLXJhZGl1czo4cHg7dG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbn0uYS1lbnRlci1hci1idXR0b257YmFja2dyb3VuZC1zaXplOjEwMCUgOTAlO21hcmdpbi1yaWdodDoxMHB4O2JvcmRlci1yYWRpdXM6N3B4fS5hLWVudGVyLWFyLWJ1dHRvbjphY3RpdmUsLmEtZW50ZXItYXItYnV0dG9uOmhvdmVyLC5hLWVudGVyLXZyLWJ1dHRvbjphY3RpdmUsLmEtZW50ZXItdnItYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmMmQ1ZX0uYS1lbnRlci12ci1idXR0b24ucmVzZXRob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjM1KX1bZGF0YS1hLWVudGVyLXZyLW5vLXdlYnZyXSAuYS1lbnRlci12ci1idXR0b257Ym9yZGVyLWNvbG9yOiM2NjY7b3BhY2l0eTouNjV9W2RhdGEtYS1lbnRlci12ci1uby13ZWJ2cl0gLmEtZW50ZXItdnItYnV0dG9uOmFjdGl2ZSxbZGF0YS1hLWVudGVyLXZyLW5vLXdlYnZyXSAuYS1lbnRlci12ci1idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4zNSk7Y3Vyc29yOm5vdC1hbGxvd2VkfS5hLWVudGVyLXZyLW1vZGFse2JhY2tncm91bmQtY29sb3I6IzY2Njtib3JkZXItcmFkaXVzOjA7ZGlzcGxheTpub25lO21pbi1oZWlnaHQ6MzJweDttYXJnaW4tcmlnaHQ6NzBweDtwYWRkaW5nOjlweDt3aWR0aDoyODBweDtyaWdodDoyJTtwb3NpdGlvbjphYnNvbHV0ZX0uYS1lbnRlci12ci1tb2RhbDphZnRlcntib3JkZXItYm90dG9tOjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZCAjNjY2O2JvcmRlci10b3A6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtkaXNwbGF5OmlubGluZS1ibG9jaztjb250ZW50OicnO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0Oi01cHg7dG9wOjVweDt3aWR0aDowO2hlaWdodDowfS5hLWVudGVyLXZyLW1vZGFsIGEsLmEtZW50ZXItdnItbW9kYWwgcHtkaXNwbGF5OmlubGluZX0uYS1lbnRlci12ci1tb2RhbCBwe21hcmdpbjowfS5hLWVudGVyLXZyLW1vZGFsIHA6YWZ0ZXJ7Y29udGVudDonICd9W2RhdGEtYS1lbnRlci12ci1uby1oZWFkc2V0XS5hLWVudGVyLXZyOmhvdmVyIC5hLWVudGVyLXZyLW1vZGFsLFtkYXRhLWEtZW50ZXItdnItbm8td2VidnJdLmEtZW50ZXItdnI6aG92ZXIgLmEtZW50ZXItdnItbW9kYWx7ZGlzcGxheTpibG9ja30uYS1vcmllbnRhdGlvbi1tb2RhbHtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIweG1sbnMlM0QlMjJodHRwJTNBLy93d3cudzMub3JnLzIwMDAvc3ZnJTIyJTIweG1sbnMlM0F4bGluayUzRCUyMmh0dHAlM0EvL3d3dy53My5vcmcvMTk5OS94bGluayUyMiUyMHZlcnNpb24lM0QlMjIxLjElMjIlMjB4JTNEJTIyMHB4JTIyJTIweSUzRCUyMjBweCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDkwJTIwOTAlMjIlMjBlbmFibGUtYmFja2dyb3VuZCUzRCUyMm5ldyUyMDAlMjAwJTIwOTAlMjA5MCUyMiUyMHhtbCUzQXNwYWNlJTNEJTIycHJlc2VydmUlMjIlM0UlM0Nwb2x5Z29uJTIwcG9pbnRzJTNEJTIyMCUyQzAlMjAwJTJDMCUyMDAlMkMwJTIwJTIyJTNFJTNDL3BvbHlnb24lM0UlM0NnJTNFJTNDcGF0aCUyMGQlM0QlMjJNNzEuNTQ1JTJDNDguMTQ1aC0zMS45OFYyMC43NDNjMC0yLjYyNy0yLjEzOC00Ljc2NS00Ljc2NS00Ljc2NUgxOC40NTZjLTIuNjI4JTJDMC00Ljc2NyUyQzIuMTM4LTQuNzY3JTJDNC43NjV2NDIuNzg5JTIwJTIwJTIwYzAlMkMyLjYyOCUyQzIuMTM4JTJDNC43NjYlMkM0Ljc2NyUyQzQuNzY2aDUuNTM1djAuOTU5YzAlMkMyLjYyOCUyQzIuMTM4JTJDNC43NjUlMkM0Ljc2NiUyQzQuNzY1aDQyLjc4OGMyLjYyOCUyQzAlMkM0Ljc2Ni0yLjEzNyUyQzQuNzY2LTQuNzY1VjUyLjkxNCUyMCUyMCUyMEM3Ni4zMTElMkM1MC4yODQlMkM3NC4xNzMlMkM0OC4xNDUlMkM3MS41NDUlMkM0OC4xNDV6JTIwTTE4LjQ1NSUyQzE2LjkzNWgxNi4zNDRjMi4xJTJDMCUyQzMuODA4JTJDMS43MDglMkMzLjgwOCUyQzMuODA4djI3LjQwMUgzNy4yNVYyMi42MzYlMjAlMjAlMjBjMC0wLjI2NC0wLjIxNS0wLjQ3OC0wLjQ3OS0wLjQ3OEgxNi40ODJjLTAuMjY0JTJDMC0wLjQ3OSUyQzAuMjE0LTAuNDc5JTJDMC40Nzh2MzYuNTg1YzAlMkMwLjI2NCUyQzAuMjE1JTJDMC40NzglMkMwLjQ3OSUyQzAuNDc4aDcuNTA3djcuNjQ0JTIwJTIwJTIwaC01LjUzNGMtMi4xMDElMkMwLTMuODEtMS43MDktMy44MS0zLjgxVjIwLjc0M0MxNC42NDUlMkMxOC42NDMlMkMxNi4zNTQlMkMxNi45MzUlMkMxOC40NTUlMkMxNi45MzV6JTIwTTE2Ljk2JTJDMjMuMTE2aDE5LjMzMXYyNS4wMzFoLTcuNTM1JTIwJTIwJTIwYy0yLjYyOCUyQzAtNC43NjYlMkMyLjEzOS00Ljc2NiUyQzQuNzY4djUuODI4aC03LjAzVjIzLjExNnolMjBNNzEuNTQ1JTJDNzMuMDY0SDI4Ljc1N2MtMi4xMDElMkMwLTMuODEtMS43MDgtMy44MS0zLjgwOFY1Mi45MTQlMjAlMjAlMjBjMC0yLjEwMiUyQzEuNzA5LTMuODEyJTJDMy44MS0zLjgxMmg0Mi43ODhjMi4xJTJDMCUyQzMuODA5JTJDMS43MSUyQzMuODA5JTJDMy44MTJ2MTYuMzQzQzc1LjM1NCUyQzcxLjM1NiUyQzczLjY0NSUyQzczLjA2NCUyQzcxLjU0NSUyQzczLjA2NHolMjIlM0UlM0MvcGF0aCUzRSUzQ3BhdGglMjBkJTNEJTIyTTI4LjkxOSUyQzU4LjQyNGMtMS40NjYlMkMwLTIuNjU5JTJDMS4xOTMtMi42NTklMkMyLjY2YzAlMkMxLjQ2NiUyQzEuMTkzJTJDMi42NTglMkMyLjY1OSUyQzIuNjU4YzEuNDY4JTJDMCUyQzIuNjYyLTEuMTkyJTJDMi42NjItMi42NTglMjAlMjAlMjBDMzEuNTgxJTJDNTkuNjE3JTJDMzAuMzg3JTJDNTguNDI0JTJDMjguOTE5JTJDNTguNDI0eiUyME0yOC45MTklMkM2Mi43ODZjLTAuOTM5JTJDMC0xLjcwMy0wLjc2NC0xLjcwMy0xLjcwMmMwLTAuOTM5JTJDMC43NjQtMS43MDQlMkMxLjcwMy0xLjcwNCUyMCUyMCUyMGMwLjk0JTJDMCUyQzEuNzA1JTJDMC43NjUlMkMxLjcwNSUyQzEuNzA0QzMwLjYyMyUyQzYyLjAyMiUyQzI5Ljg1OCUyQzYyLjc4NiUyQzI4LjkxOSUyQzYyLjc4NnolMjIlM0UlM0MvcGF0aCUzRSUzQ3BhdGglMjBkJTNEJTIyTTY5LjY1NCUyQzUwLjQ2MUgzMy4wNjljLTAuMjY0JTJDMC0wLjQ3OSUyQzAuMjE1LTAuNDc5JTJDMC40Nzl2MjAuMjg4YzAlMkMwLjI2NCUyQzAuMjE1JTJDMC40NzglMkMwLjQ3OSUyQzAuNDc4aDM2LjU4NSUyMCUyMCUyMGMwLjI2MyUyQzAlMkMwLjQ3Ny0wLjIxNCUyQzAuNDc3LTAuNDc4VjUwLjkzOUM3MC4xMzElMkM1MC42NzYlMkM2OS45MTclMkM1MC40NjElMkM2OS42NTQlMkM1MC40NjF6JTIwTTY5LjE3NCUyQzUxLjQxN1Y3MC43NUgzMy41NDhWNTEuNDE3SDY5LjE3NHolMjIlM0UlM0MvcGF0aCUzRSUzQ3BhdGglMjBkJTNEJTIyTTQ1LjIwMSUyQzMwLjI5NmM2LjY1MSUyQzAlMkMxMi4yMzMlMkM1LjM1MSUyQzEyLjU1MSUyQzExLjk3N2wtMy4wMzMtMi42MzhjLTAuMTkzLTAuMTY1LTAuNTA3LTAuMTQyLTAuNjc1JTJDMC4wNDglMjAlMjAlMjBjLTAuMTc0JTJDMC4xOTgtMC4xNTMlMkMwLjUwMSUyQzAuMDQ1JTJDMC42NzZsMy44ODMlMkMzLjM3NWMwLjA5JTJDMC4wNzUlMkMwLjE5OCUyQzAuMTE1JTJDMC4zMTIlMkMwLjExNWMwLjE0MSUyQzAlMkMwLjI3My0wLjA2MSUyQzAuMzYyLTAuMTY2JTIwJTIwJTIwbDMuMzcxLTMuODc3YzAuMTczLTAuMiUyQzAuMTUxLTAuNTAyLTAuMDQ3LTAuNjc1Yy0wLjE5NC0wLjE2Ni0wLjUwOC0wLjE0NC0wLjY3NiUyQzAuMDQ4bC0yLjU5MiUyQzIuOTc5JTIwJTIwJTIwYy0wLjE4LTMuNDE3LTEuNjI5LTYuNjA1LTQuMDk5LTkuMDAxYy0yLjUzOC0yLjQ2MS01Ljg3Ny0zLjgxNy05LjQwNC0zLjgxN2MtMC4yNjQlMkMwLTAuNDc5JTJDMC4yMTUtMC40NzklMkMwLjQ3OSUyMCUyMCUyMEM0NC43MiUyQzMwLjA4MyUyQzQ0LjkzNiUyQzMwLjI5NiUyQzQ1LjIwMSUyQzMwLjI5NnolMjIlM0UlM0MvcGF0aCUzRSUzQy9nJTNFJTNDL3N2ZyUzRSkgY2VudGVyLzUwJSA1MCUgbm8tcmVwZWF0IHJnYmEoMjQ0LDI0NCwyNDQsMSk7Ym90dG9tOjA7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NjAwO2xlZnQ6MDtsaW5lLWhlaWdodDoyMHB4O3JpZ2h0OjA7cG9zaXRpb246Zml4ZWQ7dG9wOjA7ei1pbmRleDo5OTk5OTk5fS5hLW9yaWVudGF0aW9uLW1vZGFsOmFmdGVye2NvbG9yOiM2NjY7Y29udGVudDpcIkluc2VydCBwaG9uZSBpbnRvIENhcmRib2FyZCBob2xkZXIuXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6NzAlO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC03MCUpO3dpZHRoOjEwMCV9LmEtb3JpZW50YXRpb24tbW9kYWwgYnV0dG9ue2JhY2tncm91bmQ6dXJsKGRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0EvL3d3dy53My5vcmcvMjAwMC9zdmclMjIlMjB4bWxucyUzQXhsaW5rJTNEJTIyaHR0cCUzQS8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJTIyJTIwdmVyc2lvbiUzRCUyMjEuMSUyMiUyMHglM0QlMjIwcHglMjIlMjB5JTNEJTIyMHB4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTAwJTIwMTAwJTIyJTIwZW5hYmxlLWJhY2tncm91bmQlM0QlMjJuZXclMjAwJTIwMCUyMDEwMCUyMDEwMCUyMiUyMHhtbCUzQXNwYWNlJTNEJTIycHJlc2VydmUlMjIlM0UlM0NwYXRoJTIwZmlsbCUzRCUyMiUyMzAwMDAwMCUyMiUyMGQlM0QlMjJNNTUuMjA5JTJDNTBsMTcuODAzLTE3LjgwM2MxLjQxNi0xLjQxNiUyQzEuNDE2LTMuNzEzJTJDMC01LjEyOWMtMS40MTYtMS40MTctMy43MTMtMS40MTctNS4xMjklMkMwTDUwLjA4JTJDNDQuODcyJTIwJTIwTDMyLjI3OCUyQzI3LjA2OWMtMS40MTYtMS40MTctMy43MTQtMS40MTctNS4xMjklMkMwYy0xLjQxNyUyQzEuNDE2LTEuNDE3JTJDMy43MTMlMkMwJTJDNS4xMjlMNDQuOTUxJTJDNTBMMjcuMTQ5JTJDNjcuODAzJTIwJTIwYy0xLjQxNyUyQzEuNDE2LTEuNDE3JTJDMy43MTMlMkMwJTJDNS4xMjljMC43MDglMkMwLjcwOCUyQzEuNjM2JTJDMS4wNjIlMkMyLjU2NCUyQzEuMDYyYzAuOTI4JTJDMCUyQzEuODU2LTAuMzU0JTJDMi41NjQtMS4wNjJMNTAuMDglMkM1NS4xM2wxNy44MDMlMkMxNy44MDIlMjAlMjBjMC43MDglMkMwLjcwOCUyQzEuNjM3JTJDMS4wNjIlMkMyLjU2NCUyQzEuMDYyczEuODU2LTAuMzU0JTJDMi41NjQtMS4wNjJjMS40MTYtMS40MTYlMkMxLjQxNi0zLjcxMyUyQzAtNS4xMjlMNTUuMjA5JTJDNTB6JTIyJTNFJTNDL3BhdGglM0UlM0Mvc3ZnJTNFKSBuby1yZXBlYXQ7Ym9yZGVyOm5vbmU7aGVpZ2h0OjUwcHg7dGV4dC1pbmRlbnQ6LTk5OTlweDt3aWR0aDo1MHB4fS5hLWxvYWRlci10aXRsZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjYpO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWYsbW9ub3NwYWNlO3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToyMHB4O2hlaWdodDo1MHB4O2ZvbnQtd2VpZ2h0OjMwMDtsaW5lLWhlaWdodDo1MHB4O3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7bGVmdDowO3RvcDowO2NvbG9yOiNmZmZ9LmEtbW9kYWx7YmFja2dyb3VuZDowIDAvNTAlIDUwJSByZ2JhKDAsMCwwLC42KTtib3R0b206MDtmb250LXNpemU6MTRweDtmb250LXdlaWdodDo2MDA7bGVmdDowO2xpbmUtaGVpZ2h0OjIwcHg7cmlnaHQ6MDtwb3NpdGlvbjpmaXhlZDt0b3A6MDt6LWluZGV4Ojk5OTk5OTl9LmEtZGlhbG9ne3Bvc2l0aW9uOnJlbGF0aXZlO2xlZnQ6NTAlO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpO3otaW5kZXg6MTk5OTk1O3dpZHRoOjMwMHB4O2hlaWdodDoyMDBweDtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixtb25vc3BhY2U7Zm9udC1zaXplOjIwcHg7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZzo2cHh9LmEtZGlhbG9nLXRleHQtY29udGFpbmVye3dpZHRoOjEwMCU7aGVpZ2h0OjcwJTthbGlnbi1zZWxmOmZsZXgtc3RhcnQ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24tY29udGVudDpjZW50ZXI7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5hLWRpYWxvZy10ZXh0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MTRwdDttYXJnaW46OHB4fS5hLWRpYWxvZy1idXR0b25zLWNvbnRhaW5lcntkaXNwbGF5OmlubGluZS1mbGV4O2FsaWduLXNlbGY6ZmxleC1lbmQ7d2lkdGg6MTAwJTtoZWlnaHQ6MzAlfS5hLWRpYWxvZy1idXR0b257Y3Vyc29yOnBvaW50ZXI7YWxpZ24tc2VsZjpjZW50ZXI7b3BhY2l0eTouOTtoZWlnaHQ6ODAlO3dpZHRoOjUwJTtmb250LXNpemU6MTJwdDttYXJnaW46NHB4O2JvcmRlci1yYWRpdXM6MnB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlcjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjI1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmFsbCAuMjVzIGVhc2UtaW4tb3V0O2JveC1zaGFkb3c6MCAxcHggM3B4IHJnYmEoMCwwLDAsLjEpLDAgMXB4IDJweCByZ2JhKDAsMCwwLC4yKTt1c2VyLXNlbGVjdDpub25lfS5hLWRpYWxvZy1wZXJtaXNzaW9uLWJ1dHRvbjpob3Zlcntib3gtc2hhZG93OjAgN3B4IDE0cHggcmdiYSgwLDAsMCwuMiksMCAycHggMnB4IHJnYmEoMCwwLDAsLjIpfS5hLWRpYWxvZy1hbGxvdy1idXR0b257YmFja2dyb3VuZC1jb2xvcjojMDBjZWZmfS5hLWRpYWxvZy1kZW55LWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZjAwNWJ9LmEtZGlhbG9nLW9rLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiMwMGNlZmY7d2lkdGg6MTAwJX0iOyAoX2RlcmVxXygiYnJvd3NlcmlmeS1jc3MiKS5jcmVhdGVTdHlsZShjc3MsIHsgImhyZWYiOiAic3JjXFxzdHlsZVxcYWZyYW1lLmNzcyJ9KSk7IG1vZHVsZS5leHBvcnRzID0gY3NzOwp9LHsiYnJvd3NlcmlmeS1jc3MiOjR9XSwxNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY3NzID0gIi5ycy1iYXNle2JhY2tncm91bmQtY29sb3I6IzMzMztjb2xvcjojZmFmYWZhO2JvcmRlci1yYWRpdXM6MDtmb250OjEwcHggbW9ub3NwYWNlO2xlZnQ6NXB4O2xpbmUtaGVpZ2h0OjFlbTtvcGFjaXR5Oi44NTtvdmVyZmxvdzpoaWRkZW47cGFkZGluZzoxMHB4O3Bvc2l0aW9uOmZpeGVkO3RvcDo1cHg7d2lkdGg6MzAwcHg7ei1pbmRleDoxMDAwMH0ucnMtYmFzZSBkaXYuaGlkZGVue2Rpc3BsYXk6bm9uZX0ucnMtYmFzZSBoMXtjb2xvcjojZmZmO2N1cnNvcjpwb2ludGVyO2ZvbnQtc2l6ZToxLjRlbTtmb250LXdlaWdodDozMDA7bWFyZ2luOjAgMCA1cHg7cGFkZGluZzowfS5ycy1ncm91cHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleDstd2Via2l0LWZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlO21hcmdpbi1ib3R0b206NXB4fS5ycy1ncm91cDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0ucnMtY291bnRlci1iYXNle2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleDtoZWlnaHQ6MTBweDstd2Via2l0LWp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbjoycHggMH0ucnMtY291bnRlci1iYXNlLmFsYXJte2NvbG9yOiNiNzAwMDA7dGV4dC1zaGFkb3c6MCAwIDAgI2I3MDAwMCwwIDAgMXB4ICNmZmYsMCAwIDFweCAjZmZmLDAgMCAycHggI2ZmZiwwIDAgMnB4ICNmZmYsMCAwIDNweCAjZmZmLDAgMCAzcHggI2ZmZiwwIDAgNHB4ICNmZmYsMCAwIDRweCAjZmZmfS5ycy1jb3VudGVyLWlke2ZvbnQtd2VpZ2h0OjMwMDstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjA7LXdlYmtpdC1vcmRlcjowO29yZGVyOjA7d2lkdGg6NTRweH0ucnMtY291bnRlci12YWx1ZXtmb250LXdlaWdodDozMDA7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDoxOy13ZWJraXQtb3JkZXI6MTtvcmRlcjoxO3RleHQtYWxpZ246cmlnaHQ7d2lkdGg6MzVweH0ucnMtY2FudmFzey13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6Mjstd2Via2l0LW9yZGVyOjI7b3JkZXI6Mn1AbWVkaWEgKG1pbi13aWR0aDo0ODBweCl7LnJzLWJhc2V7bGVmdDoyMHB4O3RvcDoyMHB4fX0iOyAoX2RlcmVxXygiYnJvd3NlcmlmeS1jc3MiKS5jcmVhdGVTdHlsZShjc3MsIHsgImhyZWYiOiAic3JjXFxzdHlsZVxcclN0YXRzLmNzcyJ9KSk7IG1vZHVsZS5leHBvcnRzID0gY3NzOwp9LHsiYnJvd3NlcmlmeS1jc3MiOjR9XSwxNjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi4vY29uc3RhbnRzLycpOwp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwoKdmFyIERFRkFVTFRfQ0FNRVJBX0FUVFIgPSAnZGF0YS1hZnJhbWUtZGVmYXVsdC1jYW1lcmEnOwoKLyoqCiAqIENhbWVyYSBzeXN0ZW0uIE1hbmFnZXMgd2hpY2ggY2FtZXJhIGlzIGFjdGl2ZSBhbW9uZyBtdWx0aXBsZSBjYW1lcmFzIGluIHNjZW5lLgogKgogKiBAbWVtYmVyIHtvYmplY3R9IGFjdGl2ZUNhbWVyYUVsIC0gQWN0aXZlIGNhbWVyYSBlbnRpdHkuCiAqLwptb2R1bGUuZXhwb3J0cy5TeXN0ZW0gPSByZWdpc3RlclN5c3RlbSgnY2FtZXJhJywgewogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuYWN0aXZlQ2FtZXJhRWwgPSBudWxsOwoKICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKTsKICAgIHRoaXMudW53cmFwUmVuZGVyID0gdGhpcy51bndyYXBSZW5kZXIuYmluZCh0aGlzKTsKICAgIHRoaXMud3JhcFJlbmRlciA9IHRoaXMud3JhcFJlbmRlci5iaW5kKHRoaXMpOwoKICAgIHRoaXMuaW5pdGlhbENhbWVyYUZvdW5kID0gZmFsc2U7CiAgICB0aGlzLm51bVVzZXJDYW1lcmFzID0gMDsKICAgIHRoaXMubnVtVXNlckNhbWVyYXNDaGVja2VkID0gMDsKICAgIHRoaXMuc2V0dXBJbml0aWFsQ2FtZXJhKCk7CiAgfSwKCiAgLyoqCiAgICogU2V0dXAgaW5pdGlhbCBjYW1lcmEsIGVpdGhlciBzZWFyY2hpbmcgZm9yIGNhbWVyYSBvcgogICAqIGNyZWF0aW5nIGEgZGVmYXVsdCBjYW1lcmEgaWYgdXNlciBoYXMgbm90IGFkZGVkIG9uZSBkdXJpbmcgdGhlIGluaXRpYWwgc2NlbmUgdHJhdmVyc2FsLgogICAqIFdlIHdhbnQgc2NlbmVFbC5jYW1lcmEgdG8gYmUgcmVhZHksIHNldCwgYW5kIGluaXRpYWxpemVkIGJlZm9yZSB0aGUgcmVzdCBvZiB0aGUgc2NlbmUKICAgKiBsb2Fkcy4KICAgKgogICAqIERlZmF1bHQgY2FtZXJhIG9mZnNldCBoZWlnaHQgaXMgYXQgYXZlcmFnZSBleWUgbGV2ZWwgKH4xLjZtKS4KICAgKi8KICBzZXR1cEluaXRpYWxDYW1lcmE6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjYW1lcmFFbHM7CiAgICB2YXIgaTsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5zY2VuZUVsOwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIC8vIENhbWVyYSBhbHJlYWR5IGRlZmluZWQgb3IgdGhlIG9uZSBkZWZpbmVkIGl0IGlzIGFuIHNwZWN0YXRvciBvbmUuCiAgICBpZiAoc2NlbmVFbC5jYW1lcmEgJiYgIXNjZW5lRWwuY2FtZXJhLmVsLmdldEF0dHJpYnV0ZSgnY2FtZXJhJykuc3BlY3RhdG9yKSB7CiAgICAgIHNjZW5lRWwuZW1pdCgnY2FtZXJhcmVhZHknLCB7Y2FtZXJhRWw6IHNjZW5lRWwuY2FtZXJhLmVsfSk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBTZWFyY2ggZm9yIGluaXRpYWwgdXNlci1kZWZpbmVkIGNhbWVyYS4KICAgIGNhbWVyYUVscyA9IHNjZW5lRWwucXVlcnlTZWxlY3RvckFsbCgnYS1jYW1lcmEsIFtjYW1lcmFdJyk7CgogICAgLy8gTm8gdXNlciBjYW1lcmFzLCBjcmVhdGUgZGVmYXVsdCBvbmUuCiAgICBpZiAoIWNhbWVyYUVscy5sZW5ndGgpIHsKICAgICAgdGhpcy5jcmVhdGVEZWZhdWx0Q2FtZXJhKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB0aGlzLm51bVVzZXJDYW1lcmFzID0gY2FtZXJhRWxzLmxlbmd0aDsKICAgIGZvciAoaSA9IDA7IGkgPCBjYW1lcmFFbHMubGVuZ3RoOyBpKyspIHsKICAgICAgY2FtZXJhRWxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ29iamVjdDNkc2V0JywgZnVuY3Rpb24gKGV2dCkgewogICAgICAgIGlmIChldnQuZGV0YWlsLnR5cGUgIT09ICdjYW1lcmEnKSB7IHJldHVybjsgfQogICAgICAgIHNlbGYuY2hlY2tVc2VyQ2FtZXJhKHRoaXMpOwogICAgICB9KTsKCiAgICAgIC8vIExvYWQgY2FtZXJhIGFuZCB3YWl0IGZvciBjYW1lcmEgdG8gaW5pdGlhbGl6ZS4KICAgICAgaWYgKGNhbWVyYUVsc1tpXS5pc05vZGUpIHsKICAgICAgICBjYW1lcmFFbHNbaV0ubG9hZCgpOwogICAgICB9IGVsc2UgewogICAgICAgIGNhbWVyYUVsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdub2RlcmVhZHknLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzLmxvYWQoKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIENoZWNrIGlmIGEgdXNlci1kZWZpbmVkIGNhbWVyYSBlbnRpdHkgaXMgYXBwcm9wcmlhdGUgdG8gYmUgaW5pdGlhbCBjYW1lcmEuCiAgICogKGFjdGl2ZSArIG5vbi1zcGVjdGF0b3IpLgogICAqCiAgICogS2VlcCB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGNhbWVyYXMgd2UgY2hlY2tlZCBhbmQgd2hldGhlciB3ZSBmb3VuZCBvbmUuCiAgICovCiAgY2hlY2tVc2VyQ2FtZXJhOiBmdW5jdGlvbiAoY2FtZXJhRWwpIHsKICAgIHZhciBjYW1lcmFEYXRhOwogICAgdmFyIHNjZW5lRWwgPSB0aGlzLmVsLnNjZW5lRWw7CiAgICB0aGlzLm51bVVzZXJDYW1lcmFzQ2hlY2tlZCsrOwoKICAgIC8vIEFscmVhZHkgZm91bmQgb25lLgogICAgaWYgKHRoaXMuaW5pdGlhbENhbWVyYUZvdW5kKSB7IHJldHVybjsgfQoKICAgIC8vIENoZWNrIGlmIGNhbWVyYSBpcyBhcHByb3ByaWF0ZSBmb3IgYmVpbmcgdGhlIGluaXRpYWwgY2FtZXJhLgogICAgY2FtZXJhRGF0YSA9IGNhbWVyYUVsLmdldEF0dHJpYnV0ZSgnY2FtZXJhJyk7CiAgICBpZiAoIWNhbWVyYURhdGEuYWN0aXZlIHx8IGNhbWVyYURhdGEuc3BlY3RhdG9yKSB7CiAgICAgIC8vIE5vIHVzZXIgY2FtZXJhcyBlbGlnaWJsZSwgY3JlYXRlIGRlZmF1bHQgY2FtZXJhLgogICAgICBpZiAodGhpcy5udW1Vc2VyQ2FtZXJhc0NoZWNrZWQgPT09IHRoaXMubnVtVXNlckNhbWVyYXMpIHsKICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHRDYW1lcmEoKTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5pbml0aWFsQ2FtZXJhRm91bmQgPSB0cnVlOwogICAgc2NlbmVFbC5jYW1lcmEgPSBjYW1lcmFFbC5nZXRPYmplY3QzRCgnY2FtZXJhJyk7CiAgICBzY2VuZUVsLmVtaXQoJ2NhbWVyYXJlYWR5Jywge2NhbWVyYUVsOiBjYW1lcmFFbH0pOwogIH0sCgogIGNyZWF0ZURlZmF1bHRDYW1lcmE6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkZWZhdWx0Q2FtZXJhRWw7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuc2NlbmVFbDsKCiAgICAvLyBTZXQgdXAgZGVmYXVsdCBjYW1lcmEuCiAgICBkZWZhdWx0Q2FtZXJhRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhLWVudGl0eScpOwogICAgZGVmYXVsdENhbWVyYUVsLnNldEF0dHJpYnV0ZSgnY2FtZXJhJywge2FjdGl2ZTogdHJ1ZX0pOwogICAgZGVmYXVsdENhbWVyYUVsLnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCB7CiAgICAgIHg6IDAsCiAgICAgIHk6IGNvbnN0YW50cy5ERUZBVUxUX0NBTUVSQV9IRUlHSFQsCiAgICAgIHo6IDAKICAgIH0pOwogICAgZGVmYXVsdENhbWVyYUVsLnNldEF0dHJpYnV0ZSgnd2FzZC1jb250cm9scycsICcnKTsKICAgIGRlZmF1bHRDYW1lcmFFbC5zZXRBdHRyaWJ1dGUoJ2xvb2stY29udHJvbHMnLCAnJyk7CiAgICBkZWZhdWx0Q2FtZXJhRWwuc2V0QXR0cmlidXRlKGNvbnN0YW50cy5BRlJBTUVfSU5KRUNURUQsICcnKTsKCiAgICBkZWZhdWx0Q2FtZXJhRWwuYWRkRXZlbnRMaXN0ZW5lcignb2JqZWN0M2RzZXQnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgIGlmIChldnQuZGV0YWlsLnR5cGUgIT09ICdjYW1lcmEnKSB7IHJldHVybjsgfQogICAgICBzY2VuZUVsLmNhbWVyYSA9IGV2dC5kZXRhaWwub2JqZWN0OwogICAgICBzY2VuZUVsLmVtaXQoJ2NhbWVyYXJlYWR5Jywge2NhbWVyYUVsOiBkZWZhdWx0Q2FtZXJhRWx9KTsKICAgIH0pOwoKICAgIHNjZW5lRWwuYXBwZW5kQ2hpbGQoZGVmYXVsdENhbWVyYUVsKTsKICB9LAoKICAvKioKICAgKiBTZXQgYSBkaWZmZXJlbnQgYWN0aXZlIGNhbWVyYS4KICAgKiBXaGVuIHdlIGNob29zZSBhIChzb3J0IG9mKSByYW5kb20gc2NlbmUgY2FtZXJhIGFzIHRoZSByZXBsYWNlbWVudCwgc2V0IGl0cyBgYWN0aXZlYCB0bwogICAqIHRydWUuIFRoZSBjYW1lcmEgY29tcG9uZW50IHdpbGwgY2FsbCBgc2V0QWN0aXZlQ2FtZXJhYCBhbmQgaGFuZGxlIHBhc3NpbmcgdGhlIHRvcmNoIHRvCiAgICogdGhlIG5ldyBjYW1lcmEuCiAgICovCiAgZGlzYWJsZUFjdGl2ZUNhbWVyYTogZnVuY3Rpb24gKCkgewogICAgdmFyIGNhbWVyYUVsczsKICAgIHZhciBuZXdBY3RpdmVDYW1lcmFFbDsKICAgIGNhbWVyYUVscyA9IHRoaXMuc2NlbmVFbC5xdWVyeVNlbGVjdG9yQWxsKCdbY2FtZXJhXScpOwogICAgbmV3QWN0aXZlQ2FtZXJhRWwgPSBjYW1lcmFFbHNbY2FtZXJhRWxzLmxlbmd0aCAtIDFdOwogICAgbmV3QWN0aXZlQ2FtZXJhRWwuc2V0QXR0cmlidXRlKCdjYW1lcmEnLCAnYWN0aXZlJywgdHJ1ZSk7CiAgfSwKCiAgLyoqCiAgICogU2V0IGFjdGl2ZSBjYW1lcmEgdG8gYmUgdXNlZCBieSByZW5kZXJlci4KICAgKiBSZW1vdmVzIHRoZSBkZWZhdWx0IGNhbWVyYSAoaWYgcHJlc2VudCkuCiAgICogRGlzYWJsZXMgYWxsIG90aGVyIGNhbWVyYXMgaW4gdGhlIHNjZW5lLgogICAqCiAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdDYW1lcmFFbCAtIEVudGl0eSB3aXRoIGNhbWVyYSBjb21wb25lbnQuCiAgICovCiAgc2V0QWN0aXZlQ2FtZXJhOiBmdW5jdGlvbiAobmV3Q2FtZXJhRWwpIHsKICAgIHZhciBjYW1lcmFFbDsKICAgIHZhciBjYW1lcmFFbHM7CiAgICB2YXIgaTsKICAgIHZhciBuZXdDYW1lcmE7CiAgICB2YXIgcHJldmlvdXNDYW1lcmEgPSB0aGlzLmFjdGl2ZUNhbWVyYUVsOwogICAgdmFyIHNjZW5lRWwgPSB0aGlzLnNjZW5lRWw7CgogICAgLy8gU2FtZSBjYW1lcmEuCiAgICBuZXdDYW1lcmEgPSBuZXdDYW1lcmFFbC5nZXRPYmplY3QzRCgnY2FtZXJhJyk7CiAgICBpZiAoIW5ld0NhbWVyYSB8fCBuZXdDYW1lcmFFbCA9PT0gdGhpcy5hY3RpdmVDYW1lcmFFbCkgeyByZXR1cm47IH0KCiAgICAvLyBHcmFiIHRoZSBkZWZhdWx0IGNhbWVyYS4KICAgIHZhciBkZWZhdWx0Q2FtZXJhV3JhcHBlciA9IHNjZW5lRWwucXVlcnlTZWxlY3RvcignWycgKyBERUZBVUxUX0NBTUVSQV9BVFRSICsgJ10nKTsKICAgIHZhciBkZWZhdWx0Q2FtZXJhRWwgPSBkZWZhdWx0Q2FtZXJhV3JhcHBlciAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYW1lcmFXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tjYW1lcmFdJyk7CgogICAgLy8gUmVtb3ZlIGRlZmF1bHQgY2FtZXJhIGlmIG5ldyBjYW1lcmEgaXMgbm90IHRoZSBkZWZhdWx0IGNhbWVyYS4KICAgIGlmIChuZXdDYW1lcmFFbCAhPT0gZGVmYXVsdENhbWVyYUVsKSB7IHJlbW92ZURlZmF1bHRDYW1lcmEoc2NlbmVFbCk7IH0KCiAgICAvLyBNYWtlIG5ldyBjYW1lcmEgYWN0aXZlLgogICAgdGhpcy5hY3RpdmVDYW1lcmFFbCA9IG5ld0NhbWVyYUVsOwogICAgdGhpcy5hY3RpdmVDYW1lcmFFbC5wbGF5KCk7CiAgICBzY2VuZUVsLmNhbWVyYSA9IG5ld0NhbWVyYTsKCiAgICAvLyBEaXNhYmxlIGN1cnJlbnQgY2FtZXJhCiAgICBpZiAocHJldmlvdXNDYW1lcmEpIHsKICAgICAgcHJldmlvdXNDYW1lcmEuc2V0QXR0cmlidXRlKCdjYW1lcmEnLCAnYWN0aXZlJywgZmFsc2UpOwogICAgfQoKICAgIC8vIERpc2FibGUgb3RoZXIgY2FtZXJhcyBpbiB0aGUgc2NlbmUKICAgIGNhbWVyYUVscyA9IHNjZW5lRWwucXVlcnlTZWxlY3RvckFsbCgnW2NhbWVyYV0nKTsKICAgIGZvciAoaSA9IDA7IGkgPCBjYW1lcmFFbHMubGVuZ3RoOyBpKyspIHsKICAgICAgY2FtZXJhRWwgPSBjYW1lcmFFbHNbaV07CiAgICAgIGlmICghY2FtZXJhRWwuaXNFbnRpdHkgfHwgbmV3Q2FtZXJhRWwgPT09IGNhbWVyYUVsKSB7IGNvbnRpbnVlOyB9CiAgICAgIGNhbWVyYUVsLnNldEF0dHJpYnV0ZSgnY2FtZXJhJywgJ2FjdGl2ZScsIGZhbHNlKTsKICAgICAgY2FtZXJhRWwucGF1c2UoKTsKICAgIH0KICAgIHNjZW5lRWwuZW1pdCgnY2FtZXJhLXNldC1hY3RpdmUnLCB7Y2FtZXJhRWw6IG5ld0NhbWVyYUVsfSk7CiAgfSwKCiAgLyoqCiAgICogU2V0IHNwZWN0YXRvciBjYW1lcmEgdG8gcmVuZGVyIHRoZSBzY2VuZSBvbiBhIDJEIGRpc3BsYXkuCiAgICoKICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5ld0NhbWVyYUVsIC0gRW50aXR5IHdpdGggY2FtZXJhIGNvbXBvbmVudC4KICAgKi8KICBzZXRTcGVjdGF0b3JDYW1lcmE6IGZ1bmN0aW9uIChuZXdDYW1lcmFFbCkgewogICAgdmFyIG5ld0NhbWVyYTsKICAgIHZhciBwcmV2aW91c0NhbWVyYSA9IHRoaXMuc3BlY3RhdG9yQ2FtZXJhRWw7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuc2NlbmVFbDsKICAgIHZhciBzcGVjdGF0b3JDYW1lcmFFbDsKCiAgICAvLyBTYW1lIGNhbWVyYS4KICAgIG5ld0NhbWVyYSA9IG5ld0NhbWVyYUVsLmdldE9iamVjdDNEKCdjYW1lcmEnKTsKICAgIGlmICghbmV3Q2FtZXJhIHx8IG5ld0NhbWVyYUVsID09PSB0aGlzLnNwZWN0YXRvckNhbWVyYUVsKSB7IHJldHVybjsgfQoKICAgIC8vIERpc2FibGUgY3VycmVudCBjYW1lcmEKICAgIGlmIChwcmV2aW91c0NhbWVyYSkgewogICAgICBwcmV2aW91c0NhbWVyYS5zZXRBdHRyaWJ1dGUoJ2NhbWVyYScsICdzcGVjdGF0b3InLCBmYWxzZSk7CiAgICB9CgogICAgc3BlY3RhdG9yQ2FtZXJhRWwgPSB0aGlzLnNwZWN0YXRvckNhbWVyYUVsID0gbmV3Q2FtZXJhRWw7CgogICAgc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdlbnRlci12cicsIHRoaXMud3JhcFJlbmRlcik7CiAgICBzY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2V4aXQtdnInLCB0aGlzLnVud3JhcFJlbmRlcik7CgogICAgc3BlY3RhdG9yQ2FtZXJhRWwuc2V0QXR0cmlidXRlKCdjYW1lcmEnLCAnYWN0aXZlJywgZmFsc2UpOwogICAgc3BlY3RhdG9yQ2FtZXJhRWwucGxheSgpOwoKICAgIHNjZW5lRWwuZW1pdCgnY2FtZXJhLXNldC1zcGVjdGF0b3InLCB7Y2FtZXJhRWw6IG5ld0NhbWVyYUVsfSk7CiAgfSwKCiAgLyoqCiAgICogRGlzYWJsZXMgY3VycmVudCBzcGVjdGF0b3IgY2FtZXJhLgogICAqLwogIGRpc2FibGVTcGVjdGF0b3JDYW1lcmE6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc3BlY3RhdG9yQ2FtZXJhRWwgPSB1bmRlZmluZWQ7CiAgfSwKCiAgLyoqCiAgICogV3JhcCB0aGUgcmVuZGVyIG1ldGhvZCBvZiB0aGUgcmVuZGVyZXIgdG8gcmVuZGVyCiAgICogdGhlIHNwZWN0YXRvciBjYW1lcmEgYWZ0ZXIgdnJEaXNwbGF5LnN1Ym1pdEZyYW1lLgogICAqLwogIHdyYXBSZW5kZXI6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5zcGVjdGF0b3JDYW1lcmFFbCkgeyByZXR1cm47IH0KICAgIHRoaXMub3JpZ2luYWxSZW5kZXIgPSB0aGlzLnNjZW5lRWwucmVuZGVyZXIucmVuZGVyOwogICAgdGhpcy5zY2VuZUVsLnJlbmRlcmVyLnJlbmRlciA9IHRoaXMucmVuZGVyOwogIH0sCgogIHVud3JhcFJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgaWYgKCF0aGlzLm9yaWdpbmFsUmVuZGVyKSB7IHJldHVybjsgfQogICAgdGhpcy5zY2VuZUVsLnJlbmRlcmVyLnJlbmRlciA9IHRoaXMub3JpZ2luYWxSZW5kZXI7CiAgICB0aGlzLm9yaWdpbmFsUmVuZGVyID0gdW5kZWZpbmVkOwogIH0sCgogIHJlbmRlcjogZnVuY3Rpb24gKHNjZW5lLCBjYW1lcmEpIHsKICAgIHZhciBpc1ZSRW5hYmxlZDsKICAgIHZhciBzY2VuZUVsID0gdGhpcy5zY2VuZUVsOwogICAgdmFyIHNwZWN0YXRvckNhbWVyYTsKCiAgICBpc1ZSRW5hYmxlZCA9IHNjZW5lRWwucmVuZGVyZXIueHIuZW5hYmxlZDsKICAgIHRoaXMub3JpZ2luYWxSZW5kZXIuY2FsbChzY2VuZUVsLnJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhKTsKICAgIGlmICghdGhpcy5zcGVjdGF0b3JDYW1lcmFFbCB8fCBzY2VuZUVsLmlzTW9iaWxlIHx8ICFpc1ZSRW5hYmxlZCkgeyByZXR1cm47IH0KICAgIHNwZWN0YXRvckNhbWVyYSA9IHRoaXMuc3BlY3RhdG9yQ2FtZXJhRWwuY29tcG9uZW50cy5jYW1lcmEuY2FtZXJhOwogICAgc2NlbmVFbC5yZW5kZXJlci54ci5lbmFibGVkID0gZmFsc2U7CiAgICB0aGlzLm9yaWdpbmFsUmVuZGVyLmNhbGwoc2NlbmVFbC5yZW5kZXJlciwgc2NlbmUsIHNwZWN0YXRvckNhbWVyYSk7CiAgICBzY2VuZUVsLnJlbmRlcmVyLnhyLmVuYWJsZWQgPSBpc1ZSRW5hYmxlZDsKICB9Cn0pOwoKLyoqCiAqIFJlbW92ZSBpbmplY3RlZCBkZWZhdWx0IGNhbWVyYSBmcm9tIHNjZW5lLCBpZiBwcmVzZW50LgogKgogKiBAcGFyYW0ge0VsZW1lbnR9IHNjZW5lRWwKICovCmZ1bmN0aW9uIHJlbW92ZURlZmF1bHRDYW1lcmEgKHNjZW5lRWwpIHsKICB2YXIgZGVmYXVsdENhbWVyYTsKICB2YXIgY2FtZXJhID0gc2NlbmVFbC5jYW1lcmE7CiAgaWYgKCFjYW1lcmEpIHsgcmV0dXJuOyB9CgogIC8vIFJlbW92ZSBkZWZhdWx0IGNhbWVyYSBpZiBwcmVzZW50LgogIGRlZmF1bHRDYW1lcmEgPSBzY2VuZUVsLnF1ZXJ5U2VsZWN0b3IoJ1snICsgREVGQVVMVF9DQU1FUkFfQVRUUiArICddJyk7CiAgaWYgKCFkZWZhdWx0Q2FtZXJhKSB7IHJldHVybjsgfQogIHNjZW5lRWwucmVtb3ZlQ2hpbGQoZGVmYXVsdENhbWVyYSk7Cn0KCn0seyIuLi9jb25zdGFudHMvIjoxMDEsIi4uL2NvcmUvc3lzdGVtIjoxMjB9XSwxNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2VvbWV0cmllcyA9IF9kZXJlcV8oJy4uL2NvcmUvZ2VvbWV0cnknKS5nZW9tZXRyaWVzOwp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCi8qKgogKiBTeXN0ZW0gZm9yIGdlb21ldHJ5IGNvbXBvbmVudC4KICogSGFuZGxlIGdlb21ldHJ5IGNhY2hpbmcuCiAqCiAqIEBtZW1iZXIge29iamVjdH0gY2FjaGUgLSBNYXBwaW5nIG9mIHN0cmluZ2lmaWVkIGNvbXBvbmVudCBkYXRhIHRvIFRIUkVFLkdlb21ldHJ5IG9iamVjdHMuCiAqIEBtZW1iZXIge29iamVjdH0gY2FjaGVDb3VudCAtIEtlZXAgdHJhY2sgb2YgbnVtYmVyIG9mIGVudGl0aWVzIHVzaW5nIGEgZ2VvbWV0cnkgdG8KICogICAgICAgICBrbm93IHdoZXRoZXIgdG8gZGlzcG9zZSBvbiByZW1vdmFsLgogKi8KbW9kdWxlLmV4cG9ydHMuU3lzdGVtID0gcmVnaXN0ZXJTeXN0ZW0oJ2dlb21ldHJ5JywgewogIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2FjaGUgPSB7fTsKICAgIHRoaXMuY2FjaGVDb3VudCA9IHt9OwogIH0sCgogIC8qKgogICAqIFJlc2V0IGNhY2hlLiBNYWlubHkgZm9yIHRlc3RpbmcuCiAgICovCiAgY2xlYXJDYWNoZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5jYWNoZSA9IHt9OwogICAgdGhpcy5jYWNoZUNvdW50ID0ge307CiAgfSwKCiAgLyoqCiAgICogQXR0ZW1wdCB0byByZXRyaWV2ZSBmcm9tIGNhY2hlLgogICAqCiAgICogQHJldHVybnMge09iamVjdHxudWxsfSBBIGdlb21ldHJ5IGlmIGl0IGV4aXN0cywgZWxzZSBudWxsLgogICAqLwogIGdldE9yQ3JlYXRlR2VvbWV0cnk6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlOwogICAgdmFyIGNhY2hlZEdlb21ldHJ5OwogICAgdmFyIGhhc2g7CgogICAgLy8gU2tpcCBhbGwgY2FjaGluZyBsb2dpYy4KICAgIGlmIChkYXRhLnNraXBDYWNoZSkgeyByZXR1cm4gY3JlYXRlR2VvbWV0cnkoZGF0YSk7IH0KCiAgICAvLyBUcnkgdG8gcmV0cmlldmUgZnJvbSBjYWNoZSBmaXJzdC4KICAgIGhhc2ggPSB0aGlzLmhhc2goZGF0YSk7CiAgICBjYWNoZWRHZW9tZXRyeSA9IGNhY2hlW2hhc2hdOwogICAgaW5jcmVtZW50Q2FjaGVDb3VudCh0aGlzLmNhY2hlQ291bnQsIGhhc2gpOwoKICAgIGlmIChjYWNoZWRHZW9tZXRyeSkgeyByZXR1cm4gY2FjaGVkR2VvbWV0cnk7IH0KCiAgICAvLyBDcmVhdGUgZ2VvbWV0cnkuCiAgICBjYWNoZWRHZW9tZXRyeSA9IGNyZWF0ZUdlb21ldHJ5KGRhdGEpOwoKICAgIC8vIENhY2hlIGFuZCByZXR1cm4gZ2VvbWV0cnkuCiAgICBjYWNoZVtoYXNoXSA9IGNhY2hlZEdlb21ldHJ5OwogICAgcmV0dXJuIGNhY2hlZEdlb21ldHJ5OwogIH0sCgogIC8qKgogICAqIExldCBzeXN0ZW0ga25vdyB0aGF0IGFuIGVudGl0eSBpcyBubyBsb25nZXIgdXNpbmcgYSBnZW9tZXRyeS4KICAgKi8KICB1bnVzZUdlb21ldHJ5OiBmdW5jdGlvbiAoZGF0YSkgewogICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTsKICAgIHZhciBjYWNoZUNvdW50ID0gdGhpcy5jYWNoZUNvdW50OwogICAgdmFyIGdlb21ldHJ5OwogICAgdmFyIGhhc2g7CgogICAgaWYgKGRhdGEuc2tpcENhY2hlKSB7IHJldHVybjsgfQoKICAgIGhhc2ggPSB0aGlzLmhhc2goZGF0YSk7CgogICAgaWYgKCFjYWNoZVtoYXNoXSkgeyByZXR1cm47IH0KCiAgICBkZWNyZW1lbnRDYWNoZUNvdW50KGNhY2hlQ291bnQsIGhhc2gpOwoKICAgIC8vIEFub3RoZXIgZW50aXR5IGlzIHN0aWxsIHVzaW5nIHRoaXMgZ2VvbWV0cnkuIE5vIG5lZWQgdG8gZG8gYW55dGhpbmcuCiAgICBpZiAoY2FjaGVDb3VudFtoYXNoXSA+IDApIHsgcmV0dXJuOyB9CgogICAgLy8gTm8gbW9yZSBlbnRpdGllcyBhcmUgdXNpbmcgdGhpcyBnZW9tZXRyeS4gRGlzcG9zZS4KICAgIGdlb21ldHJ5ID0gY2FjaGVbaGFzaF07CiAgICBnZW9tZXRyeS5kaXNwb3NlKCk7CiAgICBkZWxldGUgY2FjaGVbaGFzaF07CiAgICBkZWxldGUgY2FjaGVDb3VudFtoYXNoXTsKICB9LAoKICAvKioKICAgKiBVc2UgSlNPTi5zdHJpbmdpZnkgdG8gdHVybiBjb21wb25lbnQgZGF0YSBpbnRvIGhhc2guCiAgICogU2hvdWxkIGJlIGRldGVybWluaXN0aWMgd2l0aGluIGEgc2luZ2xlIGJyb3dzZXIgZW5naW5lLgogICAqIElmIG5vdCwgdGhlbiBsb29rIGludG8ganNvbi1zdGFibGUtc3RyaW5naWZ5LgogICAqLwogIGhhc2g6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgfQp9KTsKCi8qKgogKiBDcmVhdGUgZ2VvbWV0cnkgdXNpbmcgY29tcG9uZW50IGRhdGEuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQ29tcG9uZW50IGRhdGEuCiAqIEByZXR1cm5zIHtvYmplY3R9IEdlb21ldHJ5LgogKi8KZnVuY3Rpb24gY3JlYXRlR2VvbWV0cnkgKGRhdGEpIHsKICB2YXIgZ2VvbWV0cnlUeXBlID0gZGF0YS5wcmltaXRpdmU7CiAgdmFyIEdlb21ldHJ5Q2xhc3MgPSBnZW9tZXRyaWVzW2dlb21ldHJ5VHlwZV0gJiYgZ2VvbWV0cmllc1tnZW9tZXRyeVR5cGVdLkdlb21ldHJ5OwogIHZhciBnZW9tZXRyeUluc3RhbmNlID0gbmV3IEdlb21ldHJ5Q2xhc3MoKTsKCiAgaWYgKCFHZW9tZXRyeUNsYXNzKSB7IHRocm93IG5ldyBFcnJvcignVW5rbm93biBnZW9tZXRyeSBgJyArIGdlb21ldHJ5VHlwZSArICdgJyk7IH0KCiAgZ2VvbWV0cnlJbnN0YW5jZS5pbml0KGRhdGEpOwogIHJldHVybiB0b0J1ZmZlckdlb21ldHJ5KGdlb21ldHJ5SW5zdGFuY2UuZ2VvbWV0cnksIGRhdGEuYnVmZmVyKTsKfQoKLyoqCiAqIERlY3JlYXRlIGNvdW50IG9mIGVudGl0eSB1c2luZyBhIGdlb21ldHJ5LgogKi8KZnVuY3Rpb24gZGVjcmVtZW50Q2FjaGVDb3VudCAoY2FjaGVDb3VudCwgaGFzaCkgewogIGNhY2hlQ291bnRbaGFzaF0tLTsKfQoKLyoqCiAqIEluY3JlYXNlIGNvdW50IG9mIGVudGl0eSB1c2luZyBhIGdlb21ldHJ5LgogKi8KZnVuY3Rpb24gaW5jcmVtZW50Q2FjaGVDb3VudCAoY2FjaGVDb3VudCwgaGFzaCkgewogIGNhY2hlQ291bnRbaGFzaF0gPSBjYWNoZUNvdW50W2hhc2hdID09PSB1bmRlZmluZWQgPyAxIDogY2FjaGVDb3VudFtoYXNoXSArIDE7Cn0KCi8qKgogKiBUcmFuc2Zvcm0gZ2VvbWV0cnkgdG8gQnVmZmVyR2VvbWV0cnkgaWYgYGRvQnVmZmVyYC4KICoKICogQHBhcmFtIHtvYmplY3R9IGdlb21ldHJ5CiAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9CdWZmZXIKICogQHJldHVybnMge29iamVjdH0gR2VvbWV0cnkuCiAqLwpmdW5jdGlvbiB0b0J1ZmZlckdlb21ldHJ5IChnZW9tZXRyeSwgZG9CdWZmZXIpIHsKICB2YXIgYnVmZmVyR2VvbWV0cnk7CiAgaWYgKCFkb0J1ZmZlcikgeyByZXR1cm4gZ2VvbWV0cnk7IH0KCiAgYnVmZmVyR2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5mcm9tR2VvbWV0cnkoZ2VvbWV0cnkpOwogIGJ1ZmZlckdlb21ldHJ5Lm1ldGFkYXRhID0ge3R5cGU6IGdlb21ldHJ5LnR5cGUsIHBhcmFtZXRlcnM6IGdlb21ldHJ5LnBhcmFtZXRlcnMgfHwge319OwogIGdlb21ldHJ5LmRpc3Bvc2UoKTsgIC8vIERpc3Bvc2Ugbm8gbG9uZ2VyIG5lZWRlZCBub24tYnVmZmVyIGdlb21ldHJ5LgogIHJldHVybiBidWZmZXJHZW9tZXRyeTsKfQoKfSx7Ii4uL2NvcmUvZ2VvbWV0cnkiOjExMCwiLi4vY29yZS9zeXN0ZW0iOjEyMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCi8qKgogKiBnbFRGIG1vZGVsIHN5c3RlbS4KICoKICogQ29uZmlndXJlcyBnbFRGIGxvYWRpbmcgb3B0aW9ucy4gTW9kZWxzIHVzaW5nIGdsVEYgY29tcHJlc3Npb24gcmVxdWlyZSB0aGF0IGEgRHJhY28gZGVjb2RlciBiZQogKiBwcm92aWRlZCBleHRlcm5hbGx5LgogKgogKiBAcGFyYW0ge3N0cmluZ30gZHJhY29EZWNvZGVyUGF0aCAtIEJhc2UgcGF0aCBmcm9tIHdoaWNoIHRvIGxvYWQgRHJhY28gZGVjb2RlciBsaWJyYXJ5LgogKi8KbW9kdWxlLmV4cG9ydHMuU3lzdGVtID0gcmVnaXN0ZXJTeXN0ZW0oJ2dsdGYtbW9kZWwnLCB7CiAgc2NoZW1hOiB7CiAgICBkcmFjb0RlY29kZXJQYXRoOiB7ZGVmYXVsdDogJyd9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIHBhdGggPSB0aGlzLmRhdGEuZHJhY29EZWNvZGVyUGF0aDsKICAgIHRoaXMuZHJhY29Mb2FkZXIgPSBuZXcgVEhSRUUuRFJBQ09Mb2FkZXIoKTsKICAgIHRoaXMuZHJhY29Mb2FkZXIuc2V0RGVjb2RlclBhdGgocGF0aCk7CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgcGF0aDsKICAgIGlmICh0aGlzLmRyYWNvTG9hZGVyKSB7IHJldHVybjsgfQogICAgcGF0aCA9IHRoaXMuZGF0YS5kcmFjb0RlY29kZXJQYXRoOwogICAgdGhpcy5kcmFjb0xvYWRlciA9IG5ldyBUSFJFRS5EUkFDT0xvYWRlcigpOwogICAgdGhpcy5kcmFjb0xvYWRlci5zZXREZWNvZGVyUGF0aChwYXRoKTsKICB9LAoKICBnZXREUkFDT0xvYWRlcjogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZHJhY29Mb2FkZXI7CiAgfQp9KTsKCn0seyIuLi9jb3JlL3N5c3RlbSI6MTIwLCIuLi9saWIvdGhyZWUiOjE1N31dLDE2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oJy4vY2FtZXJhJyk7Cl9kZXJlcV8oJy4vZ2VvbWV0cnknKTsKX2RlcmVxXygnLi9nbHRmLW1vZGVsJyk7Cl9kZXJlcV8oJy4vbGlnaHQnKTsKX2RlcmVxXygnLi9tYXRlcmlhbCcpOwpfZGVyZXFfKCcuL3JlbmRlcmVyJyk7Cl9kZXJlcV8oJy4vc2hhZG93Jyk7Cl9kZXJlcV8oJy4vdHJhY2tlZC1jb250cm9scy13ZWJ2cicpOwpfZGVyZXFfKCcuL3RyYWNrZWQtY29udHJvbHMtd2VieHInKTsKCn0seyIuL2NhbWVyYSI6MTY2LCIuL2dlb21ldHJ5IjoxNjcsIi4vZ2x0Zi1tb2RlbCI6MTY4LCIuL2xpZ2h0IjoxNzAsIi4vbWF0ZXJpYWwiOjE3MSwiLi9yZW5kZXJlciI6MTcyLCIuL3NoYWRvdyI6MTczLCIuL3RyYWNrZWQtY29udHJvbHMtd2VidnIiOjE3NCwiLi90cmFja2VkLWNvbnRyb2xzLXdlYnhyIjoxNzV9XSwxNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgYmluZCA9IF9kZXJlcV8oJy4uL3V0aWxzL2JpbmQnKTsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uL2NvbnN0YW50cy8nKTsKCnZhciBERUZBVUxUX0xJR0hUX0FUVFIgPSAnZGF0YS1hZnJhbWUtZGVmYXVsdC1saWdodCc7CgovKioKICogTGlnaHQgc3lzdGVtLgogKgogKiBQcmVzY3JpYmVzIGRlZmF1bHQgbGlnaHRpbmcgaWYgbm90IHNwZWNpZmllZCAob25lIGFtYmllbnQsIG9uZSBkaXJlY3Rpb25hbCkuCiAqIFJlbW92ZXMgZGVmYXVsdCBsaWdodGluZyBmcm9tIHRoZSBzY2VuZSB3aGVuIGEgbmV3IGxpZ2h0IGlzIGFkZGVkLgogKgogKiBAcGFyYW0ge2Jvb2x9IGRlZmF1bHRMaWdodHMgLSBXaGV0aGVyIGRlZmF1bHQgbGlnaHRpbmcgYXJlIGRlZmluZWQuCiAqIEBwYXJhbSB7Ym9vbH0gdXNlckRlZmluZWRMaWdodHMgLSBXaGV0aGVyIHVzZXIgbGlnaHRpbmcgaXMgZGVmaW5lZC4KICovCm1vZHVsZS5leHBvcnRzLlN5c3RlbSA9IHJlZ2lzdGVyU3lzdGVtKCdsaWdodCcsIHsKICBzY2hlbWE6IHsKICAgIGRlZmF1bHRMaWdodHNFbmFibGVkOiB7ZGVmYXVsdDogdHJ1ZX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRlZmF1bHRMaWdodHMgPSBmYWxzZTsKICAgIHRoaXMudXNlckRlZmluZWRMaWdodHMgPSBmYWxzZTsKICAgIC8vIFdhaXQgZm9yIGFsbCBlbnRpdGllcyB0byBmdWxseSBsb2FkIGJlZm9yZSBjaGVja2luZyBmb3IgZXhpc3RlbmNlIG9mIGxpZ2h0cy4KICAgIC8vIFNpbmNlIGVudGl0aWVzIHdhaXQgZm9yIDxhLWFzc2V0cz4gdG8gbG9hZCwgYW55IGxpZ2h0cyBhdHRhY2hpbmcgdG8gdGhlIHNjZW5lCiAgICAvLyB3aWxsIGRvIHNvIGFzeW5jaHJvbm91c2x5LgogICAgdGhpcy5zY2VuZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGJpbmQodGhpcy5zZXR1cERlZmF1bHRMaWdodHMsIHRoaXMpKTsKICB9LAoKICAvKioKICAgKiBOb3RpZnkgc2NlbmUgdGhhdCBsaWdodCBoYXMgYmVlbiBhZGRlZCBhbmQgdG8gcmVtb3ZlIHRoZSBkZWZhdWx0LgogICAqCiAgICogQHBhcmFtIHtvYmplY3R9IGVsIC0gZWxlbWVudCBob2xkaW5nIHRoZSBsaWdodCBjb21wb25lbnQuCiAgICovCiAgcmVnaXN0ZXJMaWdodDogZnVuY3Rpb24gKGVsKSB7CiAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZShERUZBVUxUX0xJR0hUX0FUVFIpKSB7CiAgICAgIC8vIFVzZXIgYWRkZWQgYSBsaWdodCwgcmVtb3ZlIGRlZmF1bHQgbGlnaHRzIHRocm91Z2ggRE9NLgogICAgICB0aGlzLnJlbW92ZURlZmF1bHRMaWdodHMoKTsKICAgICAgdGhpcy51c2VyRGVmaW5lZExpZ2h0cyA9IHRydWU7CiAgICB9CiAgfSwKCiAgcmVtb3ZlRGVmYXVsdExpZ2h0czogZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZmF1bHRMaWdodHM7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuc2NlbmVFbDsKCiAgICBpZiAoIXRoaXMuZGVmYXVsdExpZ2h0cykgeyByZXR1cm47IH0KICAgIGRlZmF1bHRMaWdodHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIERFRkFVTFRfTElHSFRfQVRUUiArICddJyk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmF1bHRMaWdodHMubGVuZ3RoOyBpKyspIHsKICAgICAgc2NlbmVFbC5yZW1vdmVDaGlsZChkZWZhdWx0TGlnaHRzW2ldKTsKICAgIH0KICAgIHRoaXMuZGVmYXVsdExpZ2h0cyA9IGZhbHNlOwogIH0sCgogIC8qKgogICAqIFByZXNjaWJlIGRlZmF1bHQgbGlnaHRzIHRvIHRoZSBzY2VuZS4KICAgKiBEb2VzIHNvIGJ5IGluamVjdGluZyBtYXJrdXAgc3VjaCB0aGF0IHRoaXMgc3RhdGUgaXMgbm90IGludmlzaWJsZS4KICAgKiBUaGVzZSBsaWdodHMgYXJlIHJlbW92ZWQgaWYgdGhlIHVzZXIgYWRkcyBhbnkgbGlnaHRzLgogICAqLwogIHNldHVwRGVmYXVsdExpZ2h0czogZnVuY3Rpb24gKCkgewogICAgdmFyIHNjZW5lRWwgPSB0aGlzLnNjZW5lRWw7CiAgICB2YXIgYW1iaWVudExpZ2h0OwogICAgdmFyIGRpcmVjdGlvbmFsTGlnaHQ7CgogICAgaWYgKHRoaXMudXNlckRlZmluZWRMaWdodHMgfHwgdGhpcy5kZWZhdWx0TGlnaHRzIHx8ICF0aGlzLmRhdGEuZGVmYXVsdExpZ2h0c0VuYWJsZWQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGFtYmllbnRMaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EtZW50aXR5Jyk7CiAgICBhbWJpZW50TGlnaHQuc2V0QXR0cmlidXRlKCdsaWdodCcsIHtjb2xvcjogJyNCQkInLCB0eXBlOiAnYW1iaWVudCd9KTsKICAgIGFtYmllbnRMaWdodC5zZXRBdHRyaWJ1dGUoREVGQVVMVF9MSUdIVF9BVFRSLCAnJyk7CiAgICBhbWJpZW50TGlnaHQuc2V0QXR0cmlidXRlKGNvbnN0YW50cy5BRlJBTUVfSU5KRUNURUQsICcnKTsKICAgIHNjZW5lRWwuYXBwZW5kQ2hpbGQoYW1iaWVudExpZ2h0KTsKCiAgICBkaXJlY3Rpb25hbExpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYS1lbnRpdHknKTsKICAgIGRpcmVjdGlvbmFsTGlnaHQuc2V0QXR0cmlidXRlKCdsaWdodCcsIHtjb2xvcjogJyNGRkYnLCBpbnRlbnNpdHk6IDAuNiwgY2FzdFNoYWRvdzogdHJ1ZX0pOwogICAgZGlyZWN0aW9uYWxMaWdodC5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywge3g6IC0wLjUsIHk6IDEsIHo6IDF9KTsKICAgIGRpcmVjdGlvbmFsTGlnaHQuc2V0QXR0cmlidXRlKERFRkFVTFRfTElHSFRfQVRUUiwgJycpOwogICAgZGlyZWN0aW9uYWxMaWdodC5zZXRBdHRyaWJ1dGUoY29uc3RhbnRzLkFGUkFNRV9JTkpFQ1RFRCwgJycpOwogICAgc2NlbmVFbC5hcHBlbmRDaGlsZChkaXJlY3Rpb25hbExpZ2h0KTsKCiAgICB0aGlzLmRlZmF1bHRMaWdodHMgPSB0cnVlOwogIH0KfSk7Cgp9LHsiLi4vY29uc3RhbnRzLyI6MTAxLCIuLi9jb3JlL3N5c3RlbSI6MTIwLCIuLi91dGlscy9iaW5kIjoxNzZ9XSwxNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKdmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvJyk7CnZhciBpc0hMUyA9IF9kZXJlcV8oJy4uL3V0aWxzL21hdGVyaWFsJykuaXNITFM7Cgp2YXIgYmluZCA9IHV0aWxzLmJpbmQ7CnZhciBkZWJ1ZyA9IHV0aWxzLmRlYnVnOwp2YXIgZXJyb3IgPSBkZWJ1ZygnY29tcG9uZW50czp0ZXh0dXJlOmVycm9yJyk7CnZhciBUZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTsKdmFyIHdhcm4gPSBkZWJ1ZygnY29tcG9uZW50czp0ZXh0dXJlOndhcm4nKTsKClRleHR1cmVMb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oJ2Fub255bW91cycpOwoKLyoqCiAqIFN5c3RlbSBmb3IgbWF0ZXJpYWwgY29tcG9uZW50LgogKiBIYW5kbGUgbWF0ZXJpYWwgcmVnaXN0cmF0aW9uLCB1cGRhdGVzIChmb3IgZm9nKSwgYW5kIHRleHR1cmUgY2FjaGluZy4KICoKICogQG1lbWJlciB7b2JqZWN0fSBtYXRlcmlhbHMgLSBSZWdpc3RlcmVkIG1hdGVyaWFscy4KICogQG1lbWJlciB7b2JqZWN0fSB0ZXh0dXJlQ291bnRzIC0gTnVtYmVyIG9mIHRpbWVzIGVhY2ggdGV4dHVyZSBpcyB1c2VkLiBUcmFja2VkCiAqICAgICAgICAgc2VwYXJhdGVseSBmcm9tIHRleHR1cmVDYWNoZSwgYmVjYXVzZSB0aGUgY2FjaGUgKDEpIGlzIHBvcHVsYXRlZCBpbgogKiAgICAgICAgIG11bHRpcGxlIHBsYWNlcywgYW5kICgyKSBtYXkgYmUgY2xlYXJlZCBhdCBhbnkgdGltZS4KICogQG1lbWJlciB7b2JqZWN0fSB0ZXh0dXJlQ2FjaGUgLSBUZXh0dXJlIGNhY2hlIGZvcjoKICogICAtIEltYWdlczogdGV4dHVyZUNhY2hlIGhhcyBtYXBwaW5nIG9mIHNyYyAtPiByZXBlYXQgLT4gY2FjaGVkIHRocmVlLmpzIHRleHR1cmUuCiAqICAgLSBWaWRlb3M6IHRleHR1cmVDYWNoZSBoYXMgbWFwcGluZyBvZiB2aWRlb0VsZW1lbnQgLT4gY2FjaGVkIHRocmVlLmpzIHRleHR1cmUuCiAqLwptb2R1bGUuZXhwb3J0cy5TeXN0ZW0gPSByZWdpc3RlclN5c3RlbSgnbWF0ZXJpYWwnLCB7CiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdGhpcy5tYXRlcmlhbHMgPSB7fTsKICAgIHRoaXMudGV4dHVyZUNvdW50cyA9IHt9OwogICAgdGhpcy50ZXh0dXJlQ2FjaGUgPSB7fTsKCiAgICB0aGlzLnNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgJ21hdGVyaWFsdGV4dHVyZWxvYWRlZCcsCiAgICAgIGJpbmQodGhpcy5vbk1hdGVyaWFsVGV4dHVyZUxvYWRlZCwgdGhpcykKICAgICk7CiAgfSwKCiAgY2xlYXJUZXh0dXJlQ2FjaGU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMudGV4dHVyZUNhY2hlID0ge307CiAgfSwKCiAgLyoqCiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYHNyY2AgaXMgYSBpbWFnZSBvciB2aWRlby4gVGhlbiB0cnkgdG8gbG9hZCB0aGUgYXNzZXQsIHRoZW4gY2FsbCBiYWNrLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmcsIG9yIGVsZW1lbnR9IHNyYyAtIFRleHR1cmUgVVJMIG9yIGVsZW1lbnQuCiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSBSZWxldmFudCB0ZXh0dXJlIGRhdGEgdXNlZCBmb3IgY2FjaGluZy4KICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHBhc3MgdGV4dHVyZSB0by4KICAgKi8KICBsb2FkVGV4dHVyZTogZnVuY3Rpb24gKHNyYywgZGF0YSwgY2IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAvLyBDYW52YXMuCiAgICBpZiAoc3JjLnRhZ05hbWUgPT09ICdDQU5WQVMnKSB7CiAgICAgIHRoaXMubG9hZENhbnZhcyhzcmMsIGRhdGEsIGNiKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIFZpZGVvIGVsZW1lbnQuCiAgICBpZiAoc3JjLnRhZ05hbWUgPT09ICdWSURFTycpIHsKICAgICAgaWYgKCFzcmMuc3JjICYmICFzcmMuc3JjT2JqZWN0ICYmICFzcmMuY2hpbGRFbGVtZW50Q291bnQpIHsKICAgICAgICB3YXJuKCdWaWRlbyBlbGVtZW50IHdhcyBkZWZpbmVkIHdpdGggbmVpdGhlciBgc291cmNlYCBlbGVtZW50cyBub3IgYHNyY2AgLyBgc3JjT2JqZWN0YCBhdHRyaWJ1dGVzLicpOwogICAgICB9CiAgICAgIHRoaXMubG9hZFZpZGVvKHNyYywgZGF0YSwgY2IpOwogICAgICByZXR1cm47CiAgICB9CgogICAgdXRpbHMuc3JjTG9hZGVyLnZhbGlkYXRlU3JjKHNyYywgbG9hZEltYWdlQ2IsIGxvYWRWaWRlb0NiKTsKICAgIGZ1bmN0aW9uIGxvYWRJbWFnZUNiIChzcmMpIHsgc2VsZi5sb2FkSW1hZ2Uoc3JjLCBkYXRhLCBjYik7IH0KICAgIGZ1bmN0aW9uIGxvYWRWaWRlb0NiIChzcmMpIHsgc2VsZi5sb2FkVmlkZW8oc3JjLCBkYXRhLCBjYik7IH0KICB9LAoKICAvKioKICAgKiBIaWdoLWxldmVsIGZ1bmN0aW9uIGZvciBsb2FkaW5nIGltYWdlIHRleHR1cmVzIChUSFJFRS5UZXh0dXJlKS4KICAgKgogICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHNyYyAtIFRleHR1cmUgc291cmNlLgogICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gVGV4dHVyZSBkYXRhLgogICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gQ2FsbGJhY2sgdG8gcGFzcyB0ZXh0dXJlIHRvLgogICAqLwogIGxvYWRJbWFnZTogZnVuY3Rpb24gKHNyYywgZGF0YSwgaGFuZGxlSW1hZ2VUZXh0dXJlTG9hZGVkKSB7CiAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaChkYXRhKTsKICAgIHZhciB0ZXh0dXJlQ2FjaGUgPSB0aGlzLnRleHR1cmVDYWNoZTsKCiAgICAvLyBUZXh0dXJlIGFscmVhZHkgYmVpbmcgbG9hZGVkIG9yIGFscmVhZHkgbG9hZGVkLiBXYWl0IG9uIHByb21pc2UuCiAgICBpZiAodGV4dHVyZUNhY2hlW2hhc2hdKSB7CiAgICAgIHRleHR1cmVDYWNoZVtoYXNoXS50aGVuKGhhbmRsZUltYWdlVGV4dHVyZUxvYWRlZCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBUZXh0dXJlIG5vdCB5ZXQgYmVpbmcgbG9hZGVkLiBTdGFydCBsb2FkaW5nIGl0LgogICAgdGV4dHVyZUNhY2hlW2hhc2hdID0gbG9hZEltYWdlVGV4dHVyZShzcmMsIGRhdGEpOwogICAgdGV4dHVyZUNhY2hlW2hhc2hdLnRoZW4oaGFuZGxlSW1hZ2VUZXh0dXJlTG9hZGVkKTsKICB9LAoKICAvKioKICAgKiBIaWdoLWxldmVsIGZ1bmN0aW9uIGZvciBsb2FkaW5nIGNhbnZhcyB0ZXh0dXJlcyAoVEhSRUUuVGV4dHVyZSkuCiAgICoKICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSBzcmMgLSBUZXh0dXJlIHNvdXJjZS4KICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRleHR1cmUgZGF0YS4KICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHBhc3MgdGV4dHVyZSB0by4KICAgKi8KICBsb2FkQ2FudmFzOiBmdW5jdGlvbiAoc3JjLCBkYXRhLCBjYikgewogICAgdmFyIHRleHR1cmU7CiAgICB0ZXh0dXJlID0gbmV3IFRIUkVFLkNhbnZhc1RleHR1cmUoc3JjKTsKICAgIHNldFRleHR1cmVQcm9wZXJ0aWVzKHRleHR1cmUsIGRhdGEpOwogICAgY2IodGV4dHVyZSk7CiAgfSwKCiAgICAvKioKICAgKiBMb2FkIHZpZGVvIHRleHR1cmUgKFRIUkVFLlZpZGVvVGV4dHVyZSkuCiAgICogV2hpY2ggaXMganVzdCBhbiBpbWFnZSB0ZXh0dXJlIHRoYXQgUkFGcyArIG5lZWRzVXBkYXRlLgogICAqIE5vdGUgdGhhdCBjcmVhdGluZyBhIHZpZGVvIHRleHR1cmUgaXMgc3luY2hyb25vdXMgdW5saWtlIGxvYWRpbmcgYW4gaW1hZ2UgdGV4dHVyZS4KICAgKiBNYWRlIGFzeW5jaHJvbm91cyB0byBiZSBjb25zaXN0ZW50IHdpdGggaW1hZ2UgdGV4dHVyZXMuCiAgICoKICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSBzcmMgLSBUZXh0dXJlIHNvdXJjZS4KICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRleHR1cmUgZGF0YS4KICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHBhc3MgdGV4dHVyZSB0by4KICAgKi8KICBsb2FkVmlkZW86IGZ1bmN0aW9uIChzcmMsIGRhdGEsIGNiKSB7CiAgICB2YXIgaGFzaDsKICAgIHZhciB0ZXh0dXJlOwogICAgdmFyIHRleHR1cmVDYWNoZSA9IHRoaXMudGV4dHVyZUNhY2hlOwogICAgdmFyIHZpZGVvRWw7CiAgICB2YXIgdmlkZW9UZXh0dXJlUmVzdWx0OwoKICAgIGZ1bmN0aW9uIGhhbmRsZVZpZGVvVGV4dHVyZUxvYWRlZCAocmVzdWx0KSB7CiAgICAgIHJlc3VsdC50ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgICAgY2IocmVzdWx0LnRleHR1cmUsIHJlc3VsdC52aWRlb0VsKTsKICAgIH0KCiAgICAvLyBWaWRlbyBlbGVtZW50IHByb3ZpZGVkLgogICAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKSB7CiAgICAgIC8vIENoZWNrIGNhY2hlIGJlZm9yZSBjcmVhdGluZyB0ZXh0dXJlLgogICAgICB2aWRlb0VsID0gc3JjOwogICAgICBoYXNoID0gdGhpcy5oYXNoVmlkZW8oZGF0YSwgdmlkZW9FbCk7CiAgICAgIGlmICh0ZXh0dXJlQ2FjaGVbaGFzaF0pIHsKICAgICAgICB0ZXh0dXJlQ2FjaGVbaGFzaF0udGhlbihoYW5kbGVWaWRlb1RleHR1cmVMb2FkZWQpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAvLyBJZiBub3QgaW4gY2FjaGUsIGZpeCB1cCB0aGUgYXR0cmlidXRlcyB0aGVuIHN0YXJ0IHRvIGNyZWF0ZSB0aGUgdGV4dHVyZS4KICAgICAgZml4VmlkZW9BdHRyaWJ1dGVzKHZpZGVvRWwpOwogICAgfQoKICAgIC8vIE9ubHkgVVJMIHByb3ZpZGVkLiBVc2UgdmlkZW8gZWxlbWVudCB0byBjcmVhdGUgdGV4dHVyZS4KICAgIHZpZGVvRWwgPSB2aWRlb0VsIHx8IGNyZWF0ZVZpZGVvRWwoc3JjLCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCk7CgogICAgLy8gR2VuZXJhdGVkIHZpZGVvIGVsZW1lbnQgYWxyZWFkeSBjYWNoZWQuIFVzZSB0aGF0LgogICAgaGFzaCA9IHRoaXMuaGFzaFZpZGVvKGRhdGEsIHZpZGVvRWwpOwogICAgaWYgKHRleHR1cmVDYWNoZVtoYXNoXSkgewogICAgICB0ZXh0dXJlQ2FjaGVbaGFzaF0udGhlbihoYW5kbGVWaWRlb1RleHR1cmVMb2FkZWQpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gQ3JlYXRlIG5ldyB2aWRlbyB0ZXh0dXJlLgogICAgdGV4dHVyZSA9IG5ldyBUSFJFRS5WaWRlb1RleHR1cmUodmlkZW9FbCk7CiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjsKICAgIHNldFRleHR1cmVQcm9wZXJ0aWVzKHRleHR1cmUsIGRhdGEpOwoKICAgIC8vIElmIGlPUyBhbmQgdmlkZW8gaXMgSExTLCBkbyBzb21lIGhhY2tzLgogICAgaWYgKHRoaXMuc2NlbmVFbC5pc0lPUyAmJgogICAgICAgIGlzSExTKHZpZGVvRWwuc3JjIHx8IHZpZGVvRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwKICAgICAgICAgICAgICB2aWRlb0VsLnR5cGUgfHwgdmlkZW9FbC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSkpIHsKICAgICAgLy8gQWN0dWFsbHkgQkdSQS4gVGVsbCBzaGFkZXIgdG8gY29ycmVjdCBsYXRlci4KICAgICAgdGV4dHVyZS5mb3JtYXQgPSBUSFJFRS5SR0JBRm9ybWF0OwogICAgICB0ZXh0dXJlLm5lZWRzQ29ycmVjdGlvbkJHUkEgPSB0cnVlOwogICAgICAvLyBBcHBhcmVudGx5IG5lZWRlZCBmb3IgSExTLiBUZWxsIHNoYWRlciB0byBjb3JyZWN0IGxhdGVyLgogICAgICB0ZXh0dXJlLmZsaXBZID0gZmFsc2U7CiAgICAgIHRleHR1cmUubmVlZHNDb3JyZWN0aW9uRmxpcFkgPSB0cnVlOwogICAgfQoKICAgIC8vIENhY2hlIGFzIHByb21pc2UgdG8gYmUgY29uc2lzdGVudCB3aXRoIGltYWdlIHRleHR1cmUgY2FjaGluZy4KICAgIHZpZGVvVGV4dHVyZVJlc3VsdCA9IHt0ZXh0dXJlOiB0ZXh0dXJlLCB2aWRlb0VsOiB2aWRlb0VsfTsKICAgIHRleHR1cmVDYWNoZVtoYXNoXSA9IFByb21pc2UucmVzb2x2ZSh2aWRlb1RleHR1cmVSZXN1bHQpOwogICAgaGFuZGxlVmlkZW9UZXh0dXJlTG9hZGVkKHZpZGVvVGV4dHVyZVJlc3VsdCk7CiAgfSwKCiAgLyoqCiAgICogQ3JlYXRlIGEgaGFzaCBvZiB0aGUgbWF0ZXJpYWwgcHJvcGVydGllcyBmb3IgdGV4dHVyZSBjYWNoZSBrZXkuCiAgICovCiAgaGFzaDogZnVuY3Rpb24gKGRhdGEpIHsKICAgIGlmIChkYXRhLnNyYy50YWdOYW1lKSB7CiAgICAgIC8vIFNpbmNlIGBkYXRhLnNyY2AgY2FuIGJlIGFuIGVsZW1lbnQsIHBhcnNlIG91dCB0aGUgc3RyaW5nIGlmIG5lY2Vzc2FyeSBmb3IgdGhlIGhhc2guCiAgICAgIGRhdGEgPSB1dGlscy5leHRlbmREZWVwKHt9LCBkYXRhKTsKICAgICAgZGF0YS5zcmMgPSBkYXRhLnNyYy5zcmM7CiAgICB9CiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgfSwKCiAgaGFzaFZpZGVvOiBmdW5jdGlvbiAoZGF0YSwgdmlkZW9FbCkgewogICAgcmV0dXJuIGNhbGN1bGF0ZVZpZGVvQ2FjaGVIYXNoKGRhdGEsIHZpZGVvRWwpOwogIH0sCgogIC8qKgogICAqIEtlZXAgdHJhY2sgb2YgbWF0ZXJpYWwgaW4gY2FzZSBhbiB1cGRhdGUgdHJpZ2dlciBpcyBuZWVkZWQgKGUuZy4sIGZvZykuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gbWF0ZXJpYWwKICAgKi8KICByZWdpc3Rlck1hdGVyaWFsOiBmdW5jdGlvbiAobWF0ZXJpYWwpIHsKICAgIHRoaXMubWF0ZXJpYWxzW21hdGVyaWFsLnV1aWRdID0gbWF0ZXJpYWw7CiAgfSwKCiAgLyoqCiAgICogU3RvcCB0cmFja2luZyBtYXRlcmlhbCwgYW5kIGRpc3Bvc2Ugb2YgYW55IHRleHR1cmVzIG5vdCBiZWluZyB1c2VkIGJ5CiAgICogYW5vdGhlciBtYXRlcmlhbCBjb21wb25lbnQuCiAgICoKICAgKiBAcGFyYW0ge29iamVjdH0gbWF0ZXJpYWwKICAgKi8KICB1bnJlZ2lzdGVyTWF0ZXJpYWw6IGZ1bmN0aW9uIChtYXRlcmlhbCkgewogICAgZGVsZXRlIHRoaXMubWF0ZXJpYWxzW21hdGVyaWFsLnV1aWRdOwoKICAgIC8vIElmIGFueSB0ZXh0dXJlcyBvbiB0aGlzIG1hdGVyaWFsIGFyZSBubyBsb25nZXIgaW4gdXNlLCBkaXNwb3NlIG9mIHRoZW0uCiAgICB2YXIgdGV4dHVyZUNvdW50cyA9IHRoaXMudGV4dHVyZUNvdW50czsKICAgIE9iamVjdC5rZXlzKG1hdGVyaWFsKQogICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwcm9wTmFtZSkgewogICAgICAgIHJldHVybiBtYXRlcmlhbFtwcm9wTmFtZV0gJiYgbWF0ZXJpYWxbcHJvcE5hbWVdLmlzVGV4dHVyZTsKICAgICAgfSkKICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG1hcE5hbWUpIHsKICAgICAgICB0ZXh0dXJlQ291bnRzW21hdGVyaWFsW21hcE5hbWVdLnV1aWRdLS07CiAgICAgICAgaWYgKHRleHR1cmVDb3VudHNbbWF0ZXJpYWxbbWFwTmFtZV0udXVpZF0gPD0gMCkgewogICAgICAgICAgbWF0ZXJpYWxbbWFwTmFtZV0uZGlzcG9zZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgfSwKCiAgLyoqCiAgICogVHJpZ2dlciB1cGRhdGUgdG8gYWxsIHJlZ2lzdGVyZWQgbWF0ZXJpYWxzLgogICAqLwogIHVwZGF0ZU1hdGVyaWFsczogZnVuY3Rpb24gKG1hdGVyaWFsKSB7CiAgICB2YXIgbWF0ZXJpYWxzID0gdGhpcy5tYXRlcmlhbHM7CiAgICBPYmplY3Qua2V5cyhtYXRlcmlhbHMpLmZvckVhY2goZnVuY3Rpb24gKHV1aWQpIHsKICAgICAgbWF0ZXJpYWxzW3V1aWRdLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIFRyYWNrIHRleHR1cmVzIHVzZWQgYnkgbWF0ZXJpYWwgY29tcG9uZW50cywgc28gdGhhdCB0aGV5IGNhbiBiZSBzYWZlbHkKICAgKiBkaXNwb3NlZCB3aGVuIG5vIGxvbmdlciBpbiB1c2UuIFRleHR1cmVzIG11c3QgYmUgcmVnaXN0ZXJlZCBoZXJlLCBhbmQgbm90CiAgICogdGhyb3VnaCByZWdpc3Rlck1hdGVyaWFsKCksIGJlY2F1c2UgdGV4dHVyZXMgbWF5IG5vdCBiZSBhdHRhY2hlZCBhdCB0aGUKICAgKiB0aW1lIHRoZSBtYXRlcmlhbCBpcyByZWdpc3RlcmVkLgogICAqCiAgICogQHBhcmFtIHtFdmVudH0gZQogICAqLwogIG9uTWF0ZXJpYWxUZXh0dXJlTG9hZGVkOiBmdW5jdGlvbiAoZSkgewogICAgaWYgKCF0aGlzLnRleHR1cmVDb3VudHNbZS5kZXRhaWwudGV4dHVyZS51dWlkXSkgewogICAgICB0aGlzLnRleHR1cmVDb3VudHNbZS5kZXRhaWwudGV4dHVyZS51dWlkXSA9IDA7CiAgICB9CiAgICB0aGlzLnRleHR1cmVDb3VudHNbZS5kZXRhaWwudGV4dHVyZS51dWlkXSsrOwogIH0KfSk7CgovKioKICogQ2FsY3VsYXRlcyBjb25zaXN0ZW50IGhhc2ggZnJvbSBhIHZpZGVvIGVsZW1lbnQgdXNpbmcgaXRzIGF0dHJpYnV0ZXMuCiAqIElmIHRoZSB2aWRlbyBlbGVtZW50IGhhcyBhbiBJRCwgdXNlIHRoYXQuCiAqIEVsc2UgYnVpbGQgYSBoYXNoIHRoYXQgbG9va3MgbGlrZSBgc3JjOm15dmlkZW8ubXA0O2hlaWdodDoyMDA7d2lkdGg6NDAwO2AuCiAqCiAqIEBwYXJhbSBkYXRhIHtvYmplY3R9IC0gVGV4dHVyZSBkYXRhIHN1Y2ggYXMgcmVwZWF0LgogKiBAcGFyYW0gdmlkZW9FbCB7RWxlbWVudH0gLSBWaWRlbyBlbGVtZW50LgogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gY2FsY3VsYXRlVmlkZW9DYWNoZUhhc2ggKGRhdGEsIHZpZGVvRWwpIHsKICB2YXIgaTsKICB2YXIgaWQgPSB2aWRlb0VsLmdldEF0dHJpYnV0ZSgnaWQnKTsKICB2YXIgaGFzaDsKICB2YXIgdmlkZW9BdHRyaWJ1dGVzOwoKICBpZiAoaWQpIHsgcmV0dXJuIGlkOyB9CgogIC8vIENhbGN1bGF0ZSBoYXNoIHVzaW5nIHNvcnRlZCB2aWRlbyBhdHRyaWJ1dGVzLgogIGhhc2ggPSAnJzsKICB2aWRlb0F0dHJpYnV0ZXMgPSBkYXRhIHx8IHt9OwogIGZvciAoaSA9IDA7IGkgPCB2aWRlb0VsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKICAgIHZpZGVvQXR0cmlidXRlc1t2aWRlb0VsLmF0dHJpYnV0ZXNbaV0ubmFtZV0gPSB2aWRlb0VsLmF0dHJpYnV0ZXNbaV0udmFsdWU7CiAgfQogIE9iamVjdC5rZXlzKHZpZGVvQXR0cmlidXRlcykuc29ydCgpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgIGhhc2ggKz0gbmFtZSArICc6JyArIHZpZGVvQXR0cmlidXRlc1tuYW1lXSArICc7JzsKICB9KTsKCiAgcmV0dXJuIGhhc2g7Cn0KCi8qKgogKiBMb2FkIGltYWdlIHRleHR1cmUuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc3JjIC0gQW4gPGltZz4gZWxlbWVudCBvciB1cmwgdG8gYW4gaW1hZ2UgZmlsZS4KICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBEYXRhIHRvIHNldCB0ZXh0dXJlIHByb3BlcnRpZXMgbGlrZSBgcmVwZWF0YC4KICogQHJldHVybnMge1Byb21pc2V9IFJlc29sdmVzIG9uY2UgdGV4dHVyZSBpcyBsb2FkZWQuCiAqLwpmdW5jdGlvbiBsb2FkSW1hZ2VUZXh0dXJlIChzcmMsIGRhdGEpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZG9Mb2FkSW1hZ2VUZXh0dXJlKTsKCiAgZnVuY3Rpb24gZG9Mb2FkSW1hZ2VUZXh0dXJlIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciBpc0VsID0gdHlwZW9mIHNyYyAhPT0gJ3N0cmluZyc7CgogICAgZnVuY3Rpb24gcmVzb2x2ZVRleHR1cmUgKHRleHR1cmUpIHsKICAgICAgc2V0VGV4dHVyZVByb3BlcnRpZXModGV4dHVyZSwgZGF0YSk7CiAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgICByZXNvbHZlKHRleHR1cmUpOwogICAgfQoKICAgIC8vIENyZWF0ZSB0ZXh0dXJlIGZyb20gYW4gZWxlbWVudC4KICAgIGlmIChpc0VsKSB7CiAgICAgIHJlc29sdmVUZXh0dXJlKG5ldyBUSFJFRS5UZXh0dXJlKHNyYykpOwogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gUmVxdWVzdCBhbmQgbG9hZCB0ZXh0dXJlIGZyb20gc3JjIHN0cmluZy4gVEhSRUUgd2lsbCBjcmVhdGUgdW5kZXJseWluZyBlbGVtZW50LgogICAgLy8gVXNlIFRIUkVFLlRleHR1cmVMb2FkZXIgKHNyYywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB0byBsb2FkIHRleHR1cmUuCiAgICBUZXh0dXJlTG9hZGVyLmxvYWQoCiAgICAgIHNyYywKICAgICAgcmVzb2x2ZVRleHR1cmUsCiAgICAgIGZ1bmN0aW9uICgpIHsgLyogbm8tb3AgKi8gfSwKICAgICAgZnVuY3Rpb24gKHhocikgewogICAgICAgIGVycm9yKCdgJHNgIGNvdWxkIG5vdCBiZSBmZXRjaGVkIChFcnJvciBjb2RlOiAlczsgUmVzcG9uc2U6ICVzKScsIHhoci5zdGF0dXMsCiAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQpOwogICAgICB9CiAgICApOwogIH0KfQoKLyoqCiAqIFNldCB0ZXh0dXJlIHByb3BlcnRpZXMgc3VjaCBhcyByZXBlYXQgYW5kIG9mZnNldC4KICoKICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBXaXRoIGtleXMgbGlrZSBgcmVwZWF0YC4KICovCmZ1bmN0aW9uIHNldFRleHR1cmVQcm9wZXJ0aWVzICh0ZXh0dXJlLCBkYXRhKSB7CiAgdmFyIG9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt4OiAwLCB5OiAwfTsKICB2YXIgcmVwZWF0ID0gZGF0YS5yZXBlYXQgfHwge3g6IDEsIHk6IDF9OwogIHZhciBucG90ID0gZGF0YS5ucG90IHx8IGZhbHNlOwoKICAvLyBUbyBzdXBwb3J0IE5QT1QgdGV4dHVyZXMsIHdyYXAgbXVzdCBiZSBDbGFtcFRvRWRnZSAobm90IFJlcGVhdCksCiAgLy8gYW5kIGZpbHRlcnMgbXVzdCBub3QgdXNlIG1pcG1hcHMgKGkuZS4gTmVhcmVzdCBvciBMaW5lYXIpLgogIGlmIChucG90KSB7CiAgICB0ZXh0dXJlLndyYXBTID0gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZzsKICAgIHRleHR1cmUud3JhcFQgPSBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nOwogICAgdGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXI7CiAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjsKICB9CgogIC8vIERvbid0IGJvdGhlciBzZXR0aW5nIHJlcGVhdCBpZiBpdCBpcyAxLzEuIFBvd2VyLW9mLXR3byBpcyByZXF1aXJlZCB0byByZXBlYXQuCiAgaWYgKHJlcGVhdC54ICE9PSAxIHx8IHJlcGVhdC55ICE9PSAxKSB7CiAgICB0ZXh0dXJlLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7CiAgICB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7CiAgICB0ZXh0dXJlLnJlcGVhdC5zZXQocmVwZWF0LngsIHJlcGVhdC55KTsKICB9CiAgLy8gRG9uJ3QgYm90aGVyIHNldHRpbmcgb2Zmc2V0IGlmIGl0IGlzIDAvMC4KICBpZiAob2Zmc2V0LnggIT09IDAgfHwgb2Zmc2V0LnkgIT09IDApIHsKICAgIHRleHR1cmUub2Zmc2V0LnNldChvZmZzZXQueCwgb2Zmc2V0LnkpOwogIH0KfQoKLyoqCiAqIENyZWF0ZSB2aWRlbyBlbGVtZW50IHRvIGJlIHVzZWQgYXMgYSB0ZXh0dXJlLgogKgogKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gVXJsIHRvIGEgdmlkZW8gZmlsZS4KICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gV2lkdGggb2YgdGhlIHZpZGVvLgogKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IG9mIHRoZSB2aWRlby4KICogQHJldHVybnMge0VsZW1lbnR9IFZpZGVvIGVsZW1lbnQuCiAqLwpmdW5jdGlvbiBjcmVhdGVWaWRlb0VsIChzcmMsIHdpZHRoLCBoZWlnaHQpIHsKICB2YXIgdmlkZW9FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7CiAgdmlkZW9FbC53aWR0aCA9IHdpZHRoOwogIHZpZGVvRWwuaGVpZ2h0ID0gaGVpZ2h0OwogIC8vIFN1cHBvcnQgaW5saW5lIHZpZGVvcyBmb3IgaU9TIHdlYnZpZXdzLgogIHZpZGVvRWwuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTsKICB2aWRlb0VsLnNldEF0dHJpYnV0ZSgnd2Via2l0LXBsYXlzaW5saW5lJywgJycpOwogIHZpZGVvRWwuYXV0b3BsYXkgPSB0cnVlOwogIHZpZGVvRWwubG9vcCA9IHRydWU7CiAgdmlkZW9FbC5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnOwogIHZpZGVvRWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7CiAgICB3YXJuKCdgJHNgIGlzIG5vdCBhIHZhbGlkIHZpZGVvJywgc3JjKTsKICB9LCB0cnVlKTsKICB2aWRlb0VsLnNyYyA9IHNyYzsKICByZXR1cm4gdmlkZW9FbDsKfQoKLyoqCiAqIEZpeGVzIGEgdmlkZW8gZWxlbWVudCdzIGF0dHJpYnV0ZXMgdG8gcHJldmVudCBkZXZlbG9wZXJzIGZyb20gYWNjaWRlbnRhbGx5IHBhc3NpbmcgdGhlCiAqIHdyb25nIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gY29tbW9ubHkgbWlzdXNlZCB2aWRlbyBhdHRyaWJ1dGVzLgogKgogKiA8dmlkZW8+IGRvZXMgbm90IHRyZWF0IGBhdXRvcGxheWAsIGBjb250cm9sc2AsIGBjcm9zc29yaWdpbmAsIGBsb29wYCwgYW5kIGBwcmVsb2FkYCBhcwogKiBhcyBib29sZWFucy4gRXhpc3RlbmNlIG9mIHRob3NlIGF0dHJpYnV0ZXMgd2lsbCBtZWFuIHRydXRoeS4KICoKICogRm9yIGV4YW1wbGUsIHRyYW5zbGF0ZXMgPHZpZGVvIGxvb3A9ImZhbHNlIj4gdG8gPHZpZGVvPi4KICoKICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdmlkZW8jQXR0cmlidXRlcwogKiBAcGFyYW0ge0VsZW1lbnR9IHZpZGVvRWwgLSBWaWRlbyBlbGVtZW50LgogKiBAcmV0dXJucyB7RWxlbWVudH0gVmlkZW8gZWxlbWVudCB3aXRoIHRoZSBjb3JyZWN0IHByb3BlcnRpZXMgdXBkYXRlZC4KICovCmZ1bmN0aW9uIGZpeFZpZGVvQXR0cmlidXRlcyAodmlkZW9FbCkgewogIHZpZGVvRWwuYXV0b3BsYXkgPSB2aWRlb0VsLmhhc0F0dHJpYnV0ZSgnYXV0b3BsYXknKSAmJiB2aWRlb0VsLmdldEF0dHJpYnV0ZSgnYXV0b3BsYXknKSAhPT0gJ2ZhbHNlJzsKICB2aWRlb0VsLmNvbnRyb2xzID0gdmlkZW9FbC5oYXNBdHRyaWJ1dGUoJ2NvbnRyb2xzJykgJiYgdmlkZW9FbC5nZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJykgIT09ICdmYWxzZSc7CiAgaWYgKHZpZGVvRWwuZ2V0QXR0cmlidXRlKCdsb29wJykgPT09ICdmYWxzZScpIHsKICAgIHZpZGVvRWwucmVtb3ZlQXR0cmlidXRlKCdsb29wJyk7CiAgfQogIGlmICh2aWRlb0VsLmdldEF0dHJpYnV0ZSgncHJlbG9hZCcpID09PSAnZmFsc2UnKSB7CiAgICB2aWRlb0VsLnByZWxvYWQgPSAnbm9uZSc7CiAgfQogIHZpZGVvRWwuY3Jvc3NPcmlnaW4gPSB2aWRlb0VsLmNyb3NzT3JpZ2luIHx8ICdhbm9ueW1vdXMnOwogIC8vIFRvIHN1cHBvcnQgaW5saW5lIHZpZGVvcyBpbiBpT1Mgd2Vidmlld3MuCiAgdmlkZW9FbC5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgJycpOwogIHZpZGVvRWwuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnJyk7CiAgcmV0dXJuIHZpZGVvRWw7Cn0KCn0seyIuLi9jb3JlL3N5c3RlbSI6MTIwLCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvIjoxODIsIi4uL3V0aWxzL21hdGVyaWFsIjoxODV9XSwxNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy8nKTsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7Cgp2YXIgZGVidWcgPSB1dGlscy5kZWJ1ZzsKdmFyIHdhcm4gPSBkZWJ1ZygnY29tcG9uZW50czpyZW5kZXJlcjp3YXJuJyk7CgovKioKICogRGV0ZXJtaW5lcyBzdGF0ZSBvZiB2YXJpb3VzIHJlbmRlcmVyIHByb3BlcnRpZXMuCiAqLwptb2R1bGUuZXhwb3J0cy5TeXN0ZW0gPSByZWdpc3RlclN5c3RlbSgncmVuZGVyZXInLCB7CiAgc2NoZW1hOiB7CiAgICBhbnRpYWxpYXM6IHtkZWZhdWx0OiAnYXV0bycsIG9uZU9mOiBbJ3RydWUnLCAnZmFsc2UnLCAnYXV0byddfSwKICAgIGhpZ2hSZWZyZXNoUmF0ZToge2RlZmF1bHQ6IHV0aWxzLmRldmljZS5pc09jdWx1c0Jyb3dzZXIoKX0sCiAgICBsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiB7ZGVmYXVsdDogJ2F1dG8nLCBvbmVPZjogWyd0cnVlJywgJ2ZhbHNlJywgJ2F1dG8nXX0sCiAgICBtYXhDYW52YXNXaWR0aDoge2RlZmF1bHQ6IDE5MjB9LAogICAgbWF4Q2FudmFzSGVpZ2h0OiB7ZGVmYXVsdDogMTkyMH0sCiAgICBwaHlzaWNhbGx5Q29ycmVjdExpZ2h0czoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIHByZWNpc2lvbjoge2RlZmF1bHQ6ICdoaWdoJywgb25lT2Y6IFsnaGlnaCcsICdtZWRpdW0nLCAnbG93J119LAogICAgc29ydE9iamVjdHM6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICBjb2xvck1hbmFnZW1lbnQ6IHtkZWZhdWx0OiBmYWxzZX0sCiAgICBnYW1tYU91dHB1dDoge2RlZmF1bHQ6IGZhbHNlfSwKICAgIGFscGhhOiB7ZGVmYXVsdDogdHJ1ZX0sCiAgICBmb3ZlYXRpb25MZXZlbDoge2RlZmF1bHQ6IDB9CiAgfSwKCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuZWw7CiAgICAvLyBUaGlzIGlzIHRoZSByZW5kZXJpbmcgZW5naW5lLCBzdWNoIGFzIFRIUkVFLmpzIHNvIGNvcHkgb3ZlciBhbnkgcGVyc2lzdGVudCBwcm9wZXJ0aWVzIGZyb20gdGhlIHJlbmRlcmluZyBzeXN0ZW0uCiAgICB2YXIgcmVuZGVyZXIgPSBzY2VuZUVsLnJlbmRlcmVyOwoKICAgIHJlbmRlcmVyLnNvcnRPYmplY3RzID0gZGF0YS5zb3J0T2JqZWN0czsKICAgIHJlbmRlcmVyLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gZGF0YS5waHlzaWNhbGx5Q29ycmVjdExpZ2h0czsKCiAgICBpZiAoZGF0YS5jb2xvck1hbmFnZW1lbnQgfHwgZGF0YS5nYW1tYU91dHB1dCkgewogICAgICByZW5kZXJlci5nYW1tYU91dHB1dCA9IHRydWU7CiAgICAgIHJlbmRlcmVyLmdhbW1hRmFjdG9yID0gMi4yOwogICAgICBpZiAoZGF0YS5nYW1tYU91dHB1dCkgewogICAgICAgIHdhcm4oJ1Byb3BlcnR5IGBnYW1tYU91dHB1dGAgaXMgZGVwcmVjYXRlZC4gVXNlIGByZW5kZXJlcj0iY29sb3JNYW5hZ2VtZW50OiB0cnVlOyJgIGluc3RlYWQuJyk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoc2NlbmVFbC5oYXNBdHRyaWJ1dGUoJ2FudGlhbGlhcycpKSB7CiAgICAgIHdhcm4oJ0NvbXBvbmVudCBgYW50aWFsaWFzYCBpcyBkZXByZWNhdGVkLiBVc2UgYHJlbmRlcmVyPSJhbnRpYWxpYXM6IHRydWUiYCBpbnN0ZWFkLicpOwogICAgfQoKICAgIGlmIChzY2VuZUVsLmhhc0F0dHJpYnV0ZSgnbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcicpKSB7CiAgICAgIHdhcm4oJ0NvbXBvbmVudCBgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcmAgaXMgZGVwcmVjYXRlZC4gVXNlIGByZW5kZXJlcj0ibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogdHJ1ZSJgIGluc3RlYWQuJyk7CiAgICB9CiAgfSwKCiAgYXBwbHlDb2xvckNvcnJlY3Rpb246IGZ1bmN0aW9uIChjb2xvck9yVGV4dHVyZSkgewogICAgaWYgKCF0aGlzLmRhdGEuY29sb3JNYW5hZ2VtZW50IHx8ICFjb2xvck9yVGV4dHVyZSkgewogICAgICByZXR1cm47CiAgICB9IGVsc2UgaWYgKGNvbG9yT3JUZXh0dXJlLmlzQ29sb3IpIHsKICAgICAgY29sb3JPclRleHR1cmUuY29udmVydFNSR0JUb0xpbmVhcigpOwogICAgfSBlbHNlIGlmIChjb2xvck9yVGV4dHVyZS5pc1RleHR1cmUpIHsKICAgICAgY29sb3JPclRleHR1cmUuZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7CiAgICB9CiAgfQp9KTsKCn0seyIuLi9jb3JlL3N5c3RlbSI6MTIwLCIuLi9saWIvdGhyZWUiOjE1NywiLi4vdXRpbHMvIjoxODJ9XSwxNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgVEhSRUUgPSBfZGVyZXFfKCcuLi9saWIvdGhyZWUnKTsKCnZhciBTSEFET1dfTUFQX1RZUEVfTUFQID0gewogIGJhc2ljOiBUSFJFRS5CYXNpY1NoYWRvd01hcCwKICBwY2Y6IFRIUkVFLlBDRlNoYWRvd01hcCwKICBwY2Zzb2Z0OiBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwCn07CgovKioKICogU2hhZG93IHN5c3RlbS4KICoKICogRW5hYmxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gb25lIG9yIG1vcmUgc2hhZG93IGNvbXBvbmVudHMgYXJlIGFkZGVkIHRvIHRoZSBzY2VuZSwgdGhlIHN5c3RlbSBzZXRzCiAqIG9wdGlvbnMgb24gdGhlIFdlYkdMUmVuZGVyZXIgZm9yIGNvbmZpZ3VyaW5nIHNoYWRvdyBhcHBlYXJhbmNlLgogKi8KbW9kdWxlLmV4cG9ydHMuU3lzdGVtID0gcmVnaXN0ZXJTeXN0ZW0oJ3NoYWRvdycsIHsKICBzY2hlbWE6IHsKICAgIGVuYWJsZWQ6IHtkZWZhdWx0OiB0cnVlfSwKICAgIGF1dG9VcGRhdGU6IHtkZWZhdWx0OiB0cnVlfSwKICAgIHR5cGU6IHtkZWZhdWx0OiAncGNmJywgb25lT2Y6IFsnYmFzaWMnLCAncGNmJywgJ3BjZnNvZnQnXX0KICB9LAoKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IHRoaXMuc2NlbmVFbDsKICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwoKICAgIHRoaXMuc2hhZG93TWFwRW5hYmxlZCA9IGZhbHNlOwoKICAgIGlmICghc2NlbmVFbC5yZW5kZXJlcikgeyByZXR1cm47IH0gIC8vIEZvciB0ZXN0cy4KCiAgICBzY2VuZUVsLnJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gU0hBRE9XX01BUF9UWVBFX01BUFtkYXRhLnR5cGVdOwogICAgc2NlbmVFbC5yZW5kZXJlci5zaGFkb3dNYXAuYXV0b1VwZGF0ZSA9IGRhdGEuYXV0b1VwZGF0ZTsKICAgIHRoaXMuc2V0U2hhZG93TWFwRW5hYmxlZCh0aGlzLnNoYWRvd01hcEVuYWJsZWQpOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24gKHByZXZEYXRhKSB7CiAgICBpZiAocHJldkRhdGEuZW5hYmxlZCAhPT0gdGhpcy5kYXRhLmVuYWJsZWQpIHsKICAgICAgdGhpcy5zZXRTaGFkb3dNYXBFbmFibGVkKHRoaXMuZGF0YS5lbmFibGVkKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBFbmFibGVzL2Rpc2FibGVzIHRoZSByZW5kZXJlciBzaGFkb3cgbWFwLgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZAogICAqLwogIHNldFNoYWRvd01hcEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7CiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnNjZW5lRWwucmVuZGVyZXI7CiAgICB0aGlzLnNoYWRvd01hcEVuYWJsZWQgPSB0aGlzLmRhdGEuZW5hYmxlZCAmJiBlbmFibGVkOwogICAgaWYgKHJlbmRlcmVyKSB7CiAgICAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdGhpcy5zaGFkb3dNYXBFbmFibGVkOwogICAgfQogIH0KfSk7Cgp9LHsiLi4vY29yZS9zeXN0ZW0iOjEyMCwiLi4vbGliL3RocmVlIjoxNTd9XSwxNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscycpOwp2YXIgaXNXZWJYUkF2YWlsYWJsZSA9IHV0aWxzLmRldmljZS5pc1dlYlhSQXZhaWxhYmxlOwoKLyoqCiAqIFRyYWNrZWQgY29udHJvbHMgc3lzdGVtLgogKiBNYWludGFpbiBsaXN0IHdpdGggYXZhaWxhYmxlIHRyYWNrZWQgY29udHJvbGxlcnMuCiAqLwptb2R1bGUuZXhwb3J0cy5TeXN0ZW0gPSByZWdpc3RlclN5c3RlbSgndHJhY2tlZC1jb250cm9scy13ZWJ2cicsIHsKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgdGhpcy5jb250cm9sbGVycyA9IFtdOwogICAgdGhpcy5pc0Nocm9tZSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgIT09IC0xOwoKICAgIHRoaXMudXBkYXRlQ29udHJvbGxlckxpc3QoKTsKICAgIHRoaXMudGhyb3R0bGVkVXBkYXRlQ29udHJvbGxlckxpc3QgPSB1dGlscy50aHJvdHRsZSh0aGlzLnVwZGF0ZUNvbnRyb2xsZXJMaXN0LCA1MDAsIHRoaXMpOwoKICAgIC8vIERvbid0IHVzZSBXZWJWUiBpZiBXZWJYUiBpcyBhdmFpbGFibGU/CiAgICBpZiAoaXNXZWJYUkF2YWlsYWJsZSkgeyByZXR1cm47IH0KCiAgICBpZiAoIW5hdmlnYXRvci5nZXRWUkRpc3BsYXlzKSB7IHJldHVybjsgfQoKICAgIHRoaXMuc2NlbmVFbC5hZGRFdmVudExpc3RlbmVyKCdlbnRlci12cicsIGZ1bmN0aW9uICgpIHsKICAgICAgbmF2aWdhdG9yLmdldFZSRGlzcGxheXMoKS50aGVuKGZ1bmN0aW9uIChkaXNwbGF5cykgewogICAgICAgIGlmIChkaXNwbGF5cy5sZW5ndGgpIHsgc2VsZi52ckRpc3BsYXkgPSBkaXNwbGF5c1swXTsgfQogICAgICB9KTsKICAgIH0pOwogIH0sCgogIHRpY2s6IGZ1bmN0aW9uICgpIHsKICAgIGlmICh0aGlzLmlzQ2hyb21lKSB7CiAgICAgIC8vIFJldHJpZXZlIG5ldyBjb250cm9sbGVyIGhhbmRsZXJzIHdpdGggdXBkYXRlZCBzdGF0ZSAocG9zZSwgYnV0dG9ucy4uLikKICAgICAgdGhpcy51cGRhdGVDb250cm9sbGVyTGlzdCgpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy50aHJvdHRsZWRVcGRhdGVDb250cm9sbGVyTGlzdCgpOwogICAgfQogIH0sCgogIC8qKgogICAqIFVwZGF0ZSBjb250cm9sbGVyIGxpc3QuCiAgICovCiAgdXBkYXRlQ29udHJvbGxlckxpc3Q6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnM7CiAgICB2YXIgZ2FtZXBhZDsKICAgIHZhciBnYW1lcGFkczsKICAgIHZhciBpOwogICAgdmFyIHByZXZDb3VudDsKCiAgICBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcyAmJiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTsKICAgIGlmICghZ2FtZXBhZHMpIHsgcmV0dXJuOyB9CgogICAgcHJldkNvdW50ID0gY29udHJvbGxlcnMubGVuZ3RoOwogICAgY29udHJvbGxlcnMubGVuZ3RoID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCBnYW1lcGFkcy5sZW5ndGg7ICsraSkgewogICAgICBnYW1lcGFkID0gZ2FtZXBhZHNbaV07CiAgICAgIGlmIChnYW1lcGFkICYmIGdhbWVwYWQucG9zZSkgewogICAgICAgIGNvbnRyb2xsZXJzLnB1c2goZ2FtZXBhZCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoY29udHJvbGxlcnMubGVuZ3RoICE9PSBwcmV2Q291bnQpIHsKICAgICAgdGhpcy5lbC5lbWl0KCdjb250cm9sbGVyc3VwZGF0ZWQnLCB1bmRlZmluZWQsIGZhbHNlKTsKICAgIH0KICB9Cn0pOwoKfSx7Ii4uL2NvcmUvc3lzdGVtIjoxMjAsIi4uL3V0aWxzIjoxODJ9XSwxNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVnaXN0ZXJTeXN0ZW0gPSBfZGVyZXFfKCcuLi9jb3JlL3N5c3RlbScpLnJlZ2lzdGVyU3lzdGVtOwp2YXIgdXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscycpOwoKLyoqCiAqIFRyYWNrZWQgY29udHJvbHMgc3lzdGVtLgogKiBNYWludGFpbiBsaXN0IHdpdGggYXZhaWxhYmxlIHRyYWNrZWQgY29udHJvbGxlcnMuCiAqLwptb2R1bGUuZXhwb3J0cy5TeXN0ZW0gPSByZWdpc3RlclN5c3RlbSgndHJhY2tlZC1jb250cm9scy13ZWJ4cicsIHsKICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107CiAgICB0aGlzLm9sZENvbnRyb2xsZXJzTGVuZ3RoID0gMDsKICAgIHRoaXMudGhyb3R0bGVkVXBkYXRlQ29udHJvbGxlckxpc3QgPSB1dGlscy50aHJvdHRsZSh0aGlzLnVwZGF0ZUNvbnRyb2xsZXJMaXN0LCA1MDAsIHRoaXMpOwogICAgdGhpcy51cGRhdGVSZWZlcmVuY2VTcGFjZSA9IHRoaXMudXBkYXRlUmVmZXJlbmNlU3BhY2UuYmluZCh0aGlzKTsKICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXItdnInLCB0aGlzLnVwZGF0ZVJlZmVyZW5jZVNwYWNlKTsKICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignZXhpdC12cicsIHRoaXMudXBkYXRlUmVmZXJlbmNlU3BhY2UpOwogIH0sCgogIHRpY2s6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMudGhyb3R0bGVkVXBkYXRlQ29udHJvbGxlckxpc3QoKTsKICB9LAoKICB1cGRhdGVSZWZlcmVuY2VTcGFjZTogZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHhyU2Vzc2lvbiA9IHRoaXMuZWwueHJTZXNzaW9uOwogICAgaWYgKCF4clNlc3Npb24pIHsKICAgICAgdGhpcy5yZWZlcmVuY2VTcGFjZSA9IHVuZGVmaW5lZDsKICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdOwogICAgICBpZiAodGhpcy5vbGRDb250cm9sbGVyc0xlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLm9sZENvbnRyb2xsZXJzTGVuZ3RoID0gMDsKICAgICAgICB0aGlzLmVsLmVtaXQoJ2NvbnRyb2xsZXJzdXBkYXRlZCcsIHVuZGVmaW5lZCwgZmFsc2UpOwogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0KICAgIHhyU2Vzc2lvbi5yZXF1ZXN0UmVmZXJlbmNlU3BhY2UoJ2xvY2FsLWZsb29yJykudGhlbihmdW5jdGlvbiAocmVmZXJlbmNlU3BhY2UpIHsKICAgICAgc2VsZi5yZWZlcmVuY2VTcGFjZSA9IHJlZmVyZW5jZVNwYWNlOwogICAgfSk7CiAgfSwKCiAgdXBkYXRlQ29udHJvbGxlckxpc3Q6IGZ1bmN0aW9uICgpIHsKICAgIHZhciB4clNlc3Npb24gPSB0aGlzLmVsLnhyU2Vzc2lvbjsKICAgIGlmICgheHJTZXNzaW9uKSB7CiAgICAgIGlmICh0aGlzLm9sZENvbnRyb2xsZXJzTGVuZ3RoID09PSAwKSB7IHJldHVybjsgfQogICAgICAvLyBCcm9hZGNhc3QgdGhhdCB3ZSBub3cgaGF2ZSB6ZXJvIGNvbnRyb2xsZXJzIGNvbm5lY3RlZCBpZiB0aGVyZSBpcwogICAgICAvLyBubyBzZXNzaW9uCiAgICAgIHRoaXMub2xkQ29udHJvbGxlcnNMZW5ndGggPSAwOwogICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107CiAgICAgIHRoaXMuZWwuZW1pdCgnY29udHJvbGxlcnN1cGRhdGVkJywgdW5kZWZpbmVkLCBmYWxzZSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuY29udHJvbGxlcnMgPSB4clNlc3Npb24uaW5wdXRTb3VyY2VzOwogICAgaWYgKHRoaXMub2xkQ29udHJvbGxlcnNMZW5ndGggPT09IHRoaXMuY29udHJvbGxlcnMubGVuZ3RoKSB7IHJldHVybjsgfQogICAgdGhpcy5vbGRDb250cm9sbGVyc0xlbmd0aCA9IHRoaXMuY29udHJvbGxlcnMubGVuZ3RoOwogICAgdGhpcy5lbC5lbWl0KCdjb250cm9sbGVyc3VwZGF0ZWQnLCB1bmRlZmluZWQsIGZhbHNlKTsKICB9Cn0pOwoKfSx7Ii4uL2NvcmUvc3lzdGVtIjoxMjAsIi4uL3V0aWxzIjoxODJ9XSwxNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKioKICogRmFzdGVyIHZlcnNpb24gb2YgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBGdW5jdGlvbiB0byB3cmFwLgogKiBAcGFyYW0ge09iamVjdH0gY3R4IC0gV2hhdCB0byBiaW5kIGFzIGNvbnRleHQuCiAqIEBwYXJhbSB7Li4uKn0gYXJndW1lbnRzIC0gQXJndW1lbnRzIHRvIHBhc3MgdGhyb3VnaC4KICovCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCAoZm4sIGN0eC8qICwgYXJnMSwgYXJnMiAqLykgewogIHJldHVybiAoZnVuY3Rpb24gKHByZXBlbmRlZEFyZ3MpIHsKICAgIHJldHVybiBmdW5jdGlvbiBib3VuZCAoKSB7CiAgICAgIC8vIENvbmNhdCB0aGUgYm91bmQgZnVuY3Rpb24gYXJndW1lbnRzIHdpdGggdGhvc2UgcGFzc2VkIHRvIG9yaWdpbmFsIGJpbmQKICAgICAgdmFyIGFyZ3MgPSBwcmVwZW5kZWRBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTsKICAgICAgcmV0dXJuIGZuLmFwcGx5KGN0eCwgYXJncyk7CiAgICB9OwogIH0pKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpOwp9OwoKfSx7fV0sMTc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIFRIUkVFICovCnZhciBkZWJ1ZyA9IF9kZXJlcV8oJy4vZGVidWcnKTsKdmFyIGV4dGVuZCA9IF9kZXJlcV8oJ29iamVjdC1hc3NpZ24nKTsKCnZhciB3YXJuID0gZGVidWcoJ3V0aWxzOmNvb3JkaW5hdGVzOndhcm4nKTsKCi8vIE9yZGVyIG9mIGNvb3JkaW5hdGVzIHBhcnNlZCBieSBjb29yZGluYXRlcy5wYXJzZS4KdmFyIENPT1JESU5BVEVfS0VZUyA9IFsneCcsICd5JywgJ3onLCAndyddOwoKLy8gQ29vcmRpbmF0ZSBzdHJpbmcgcmVnZXguIEhhbmRsZXMgbmVnYXRpdmUsIHBvc2l0aXZlLCBhbmQgZGVjaW1hbHMuCnZhciByZWdleCA9IC9eXHMqKCgtP1xkKlwuezAsMX1cZCsoZS0/XGQrKT8pXHMrKXsyLDN9KC0/XGQqXC57MCwxfVxkKyhlLT9cZCspPylccyokLzsKbW9kdWxlLmV4cG9ydHMucmVnZXggPSByZWdleDsKCnZhciBPQkpFQ1QgPSAnb2JqZWN0JzsKdmFyIHdoaXRlc3BhY2VSZWdleCA9IC9ccysvZzsKCi8qKgogKiBQYXJzZXMgY29vcmRpbmF0ZXMgZnJvbSBhbiAieCB5IHoiIHN0cmluZy4KICogRXhhbXBsZTogIjMgMTAgLTUiIHRvIHt4OiAzLCB5OiAxMCwgejogLTV9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsIC0gQW4gInggeSB6IiBzdHJpbmcuCiAqIEBwYXJhbSB7c3RyaW5nfSBkZWZhdWx0cyAtIGZhbGxiYWNrIHZhbHVlLgogKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBrZXlzIFt4LCB5LCB6XS4KICovCmZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgZGVmYXVsdFZlYykgewogIHZhciBjb29yZGluYXRlOwogIHZhciBkZWZhdWx0VmFsOwogIHZhciBrZXk7CiAgdmFyIGk7CiAgdmFyIHZlYzsKICB2YXIgeDsKICB2YXIgeTsKICB2YXIgejsKICB2YXIgdzsKCiAgaWYgKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICB4ID0gdmFsdWUueCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZlYyAmJiBkZWZhdWx0VmVjLnggOiB2YWx1ZS54OwogICAgeSA9IHZhbHVlLnkgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWZWMgJiYgZGVmYXVsdFZlYy55IDogdmFsdWUueTsKICAgIHogPSB2YWx1ZS56ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmVjICYmIGRlZmF1bHRWZWMueiA6IHZhbHVlLno7CiAgICB3ID0gdmFsdWUudyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZlYyAmJiBkZWZhdWx0VmVjLncgOiB2YWx1ZS53OwogICAgaWYgKHggIT09IHVuZGVmaW5lZCAmJiB4ICE9PSBudWxsKSB7IHZhbHVlLnggPSBwYXJzZUlmU3RyaW5nKHgpOyB9CiAgICBpZiAoeSAhPT0gdW5kZWZpbmVkICYmIHkgIT09IG51bGwpIHsgdmFsdWUueSA9IHBhcnNlSWZTdHJpbmcoeSk7IH0KICAgIGlmICh6ICE9PSB1bmRlZmluZWQgJiYgeiAhPT0gbnVsbCkgeyB2YWx1ZS56ID0gcGFyc2VJZlN0cmluZyh6KTsgfQogICAgaWYgKHcgIT09IHVuZGVmaW5lZCAmJiB3ICE9PSBudWxsKSB7IHZhbHVlLncgPSBwYXJzZUlmU3RyaW5nKHcpOyB9CiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmVjID09PSBPQkpFQ1QgPyBleHRlbmQoe30sIGRlZmF1bHRWZWMpIDogZGVmYXVsdFZlYzsKICB9CgogIGNvb3JkaW5hdGUgPSB2YWx1ZS50cmltKCkuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KTsKICB2ZWMgPSB7fTsKICBmb3IgKGkgPSAwOyBpIDwgQ09PUkRJTkFURV9LRVlTLmxlbmd0aDsgaSsrKSB7CiAgICBrZXkgPSBDT09SRElOQVRFX0tFWVNbaV07CiAgICBpZiAoY29vcmRpbmF0ZVtpXSkgewogICAgICB2ZWNba2V5XSA9IHBhcnNlRmxvYXQoY29vcmRpbmF0ZVtpXSwgMTApOwogICAgfSBlbHNlIHsKICAgICAgZGVmYXVsdFZhbCA9IGRlZmF1bHRWZWMgJiYgZGVmYXVsdFZlY1trZXldOwogICAgICBpZiAoZGVmYXVsdFZhbCA9PT0gdW5kZWZpbmVkKSB7IGNvbnRpbnVlOyB9CiAgICAgIHZlY1trZXldID0gcGFyc2VJZlN0cmluZyhkZWZhdWx0VmFsKTsKICAgIH0KICB9CiAgcmV0dXJuIHZlYzsKfQptb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlOwoKLyoqCiAqIFN0cmluZ2lmeSBjb29yZGluYXRlcyBmcm9tIGFuIG9iamVjdCB3aXRoIGtleXMgW3ggeSB6XS4KICogRXhhbXBsZToge3g6IDMsIHk6IDEwLCB6OiAtNX0gdG8gIjMgMTAgLTUiLgogKgogKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IGRhdGEgLSBBbiBvYmplY3Qgd2l0aCBrZXlzIFt4IHkgel0uCiAqIEByZXR1cm5zIHtzdHJpbmd9IEFuICJ4IHkgeiIgc3RyaW5nLgogKi8KZnVuY3Rpb24gc3RyaW5naWZ5IChkYXRhKSB7CiAgdmFyIHN0cjsKICBpZiAodHlwZW9mIGRhdGEgIT09IE9CSkVDVCkgeyByZXR1cm4gZGF0YTsgfQogIHN0ciA9IGRhdGEueCArICcgJyArIGRhdGEueTsKICBpZiAoZGF0YS56ICE9IG51bGwpIHsgc3RyICs9ICcgJyArIGRhdGEuejsgfQogIGlmIChkYXRhLncgIT0gbnVsbCkgeyBzdHIgKz0gJyAnICsgZGF0YS53OyB9CiAgcmV0dXJuIHN0cjsKfQptb2R1bGUuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7CgovKioKICogQHJldHVybnMge2Jvb2x9CiAqLwpmdW5jdGlvbiBpc0Nvb3JkaW5hdGVzICh2YWx1ZSkgewogIHJldHVybiByZWdleC50ZXN0KHZhbHVlKTsKfQptb2R1bGUuZXhwb3J0cy5pc0Nvb3JkaW5hdGVzID0gaXNDb29yZGluYXRlczsKCm1vZHVsZS5leHBvcnRzLmlzQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogIHdhcm4oJ2BBRlJBTUUudXRpbHMuaXNDb29yZGluYXRlYCBoYXMgYmVlbiByZW5hbWVkIHRvIGBBRlJBTUUudXRpbHMuaXNDb29yZGluYXRlc2AnKTsKICByZXR1cm4gaXNDb29yZGluYXRlcyh2YWx1ZSk7Cn07CgpmdW5jdGlvbiBwYXJzZUlmU3RyaW5nICh2YWwpIHsKICBpZiAodmFsICE9PSBudWxsICYmIHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7CiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWwsIDEwKTsKICB9CiAgcmV0dXJuIHZhbDsKfQoKLyoqCiAqIENvbnZlcnQge3gsIHksIHp9IG9iamVjdCB0byB0aHJlZS5qcyBWZWN0b3IzLgogKi8KbW9kdWxlLmV4cG9ydHMudG9WZWN0b3IzID0gZnVuY3Rpb24gKHZlYzMpIHsKICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjModmVjMy54LCB2ZWMzLnksIHZlYzMueik7Cn07Cgp9LHsiLi9kZWJ1ZyI6MTc4LCJvYmplY3QtYXNzaWduIjoyN31dLDE3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7CnZhciBkZWJ1Z0xpYiA9IF9kZXJlcV8oJ2RlYnVnJyk7CnZhciBleHRlbmQgPSBfZGVyZXFfKCdvYmplY3QtYXNzaWduJyk7Cgp2YXIgc2V0dGluZ3MgPSB7CiAgY29sb3JzOiB7CiAgICBkZWJ1ZzogJ2dyYXknLAogICAgZXJyb3I6ICdyZWQnLAogICAgaW5mbzogJ2dyYXknLAogICAgd2FybjogJ29yYW5nZScKICB9Cn07CgovKioKICogTW9ua2V5cGF0Y2hlcyBgZGVidWdgIHNvIHdlIGNhbiBjb2xvcml6ZSBlcnJvci93YXJuaW5nIG1lc3NhZ2VzLgogKgogKiAoU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vdmlzaW9ubWVkaWEvZGVidWcvaXNzdWVzLzEzNykKICovCnZhciBkZWJ1ZyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsKICB2YXIgZCA9IGRlYnVnTGliKG5hbWVzcGFjZSk7CgogIGQuY29sb3IgPSBnZXREZWJ1Z05hbWVzcGFjZUNvbG9yKG5hbWVzcGFjZSk7CgogIHJldHVybiBkOwp9OwpleHRlbmQoZGVidWcsIGRlYnVnTGliKTsKCi8qKgogKiBSZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSBuYW1lc3BhY2UgKGUuZy4sIGBlcnJvcmAsIGB3YXJuYCkuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UKICogICBUaGUgZGVidWcgbG9nZ2VyJ3MgbmFtZXNwYWNlIChlLmcuLCBgY29tcG9uZW50czpnZW9tZXRyeTp3YXJuYCkuCiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSB0eXBlIG9mIHRoZSBuYW1lc3BhY2UgKGUuZy4sIGB3YXJuYCkuCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gZ2V0RGVidWdOYW1lc3BhY2VUeXBlIChuYW1lc3BhY2UpIHsKICB2YXIgY2h1bmtzID0gbmFtZXNwYWNlLnNwbGl0KCc6Jyk7CgogIHJldHVybiBjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdOyAgLy8gUmV0dXJuIHRoZSBsYXN0IG9uZQp9CgovKioKICogUmV0dXJucyB0aGUgY29sb3Igb2YgdGhlIG5hbWVzcGFjZSAoZS5nLiwgYG9yYW5nZWApLgogKgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlCiAqICAgVGhlIGRlYnVnIGxvZ2dlcidzIG5hbWVzcGFjZSAoZS5nLiwgYGNvbXBvbmVudHM6Z2VvbWV0cnk6d2FybmApLgogKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgY29sb3Igb2YgdGhlIG5hbWVzcGFjZSAoZS5nLiwgYG9yYW5nZWApLgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGdldERlYnVnTmFtZXNwYWNlQ29sb3IgKG5hbWVzcGFjZSkgewogIHZhciB0eXBlID0gZ2V0RGVidWdOYW1lc3BhY2VUeXBlKG5hbWVzcGFjZSk7CgogIHZhciBjb2xvciA9IHNldHRpbmdzLmNvbG9ycyAmJiBzZXR0aW5ncy5jb2xvcnNbdHlwZV07CgogIHJldHVybiBjb2xvciB8fCBudWxsOwp9CgovKioKICogUmV0dXJucyBgbG9jYWxTdG9yYWdlYCBpZiBwb3NzaWJsZS4KICoKICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBTYWZhcmkgdGhyb3dzIHdoZW4gYSB1c2VyIGRpc2FibGVzCiAqIGNvb2tpZXMgb3IgYGxvY2FsU3RvcmFnZWAgYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC4KICoKICogQHJldHVybnMge2xvY2FsU3RvcmFnZX0KICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBzdG9yYWdlICgpIHsKICB0cnkgewogICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7CiAgfSBjYXRjaCAoZSkgewogIH0KfQoKLyoqCiAqIFRvIGVuYWJsZSBjb25zb2xlIGxvZ2dpbmcsIHR5cGUgdGhpcyBpbiB0aGUgQ29uc29sZSBvZiB5b3VyIERldiBUb29sczoKICoKICogICBsb2NhbFN0b3JhZ2UubG9ncyA9IDEKICoKICogVG8gZGlzYWJsZSBjb25zb2xlIGxvZ2dpbmc6CiAqCiAqICAgbG9jYWxTdG9yYWdlLmxvZ3MgPSAwCiAqCiAqLwp2YXIgbHMgPSBzdG9yYWdlKCk7CmlmIChscyAmJiAocGFyc2VJbnQobHMubG9ncywgMTApIHx8IGxzLmxvZ3MgPT09ICd0cnVlJykpIHsKICBkZWJ1Zy5lbmFibGUoJyonKTsKfSBlbHNlIHsKICBkZWJ1Zy5lbmFibGUoJyo6ZXJyb3IsKjppbmZvLCo6d2FybicpOwp9CgppZiAocHJvY2Vzcy5icm93c2VyKSB7IHdpbmRvdy5sb2dzID0gZGVidWc7IH0KCm1vZHVsZS5leHBvcnRzID0gZGVidWc7Cgp9KS5jYWxsKHRoaXMsX2RlcmVxXygnX3Byb2Nlc3MnKSkKCn0seyJfcHJvY2VzcyI6NSwiZGVidWciOjEwLCJvYmplY3QtYXNzaWduIjoyN31dLDE3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7CnZhciBlcnJvciA9IF9kZXJlcV8oJ2RlYnVnJykoJ2RldmljZTplcnJvcicpOwoKdmFyIHZyRGlzcGxheTsKdmFyIHN1cHBvcnRzVlJTZXNzaW9uID0gZmFsc2U7CnZhciBzdXBwb3J0c0FSU2Vzc2lvbiA9IGZhbHNlOwoKLyoqCiAqIE9jdWx1cyBCcm93c2VyIDcgZG9lc24ndCBzdXBwb3J0IHRoZSBXZWJYUiBnYW1lcGFkcyBtb2R1bGUuCiAqIFdlIGZhbGxiYWNrIHRvIFdlYlZSIEFQSSBhbmQgd2lsbCBob3RmaXggd2hlbiBpbXBsZW1lbnRhdGlvbiBpcyBjb21wbGV0ZS4KICovCnZhciBpc1dlYlhSQXZhaWxhYmxlID0gbW9kdWxlLmV4cG9ydHMuaXNXZWJYUkF2YWlsYWJsZSA9ICF3aW5kb3cuZGVidWcgJiYgbmF2aWdhdG9yLnhyICE9PSB1bmRlZmluZWQ7CgovLyBDYXRjaCB2cmRpc3BsYXlhY3RpdmF0ZSBlYXJseSB0byBlbnN1cmUgd2UgY2FuIGVudGVyIFZSIG1vZGUgYWZ0ZXIgdGhlIHNjZW5lIGxvYWRzLgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5YWN0aXZhdGUnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgdmFyIGNhbnZhc0VsOwogIC8vIFdlYlhSIHRha2VzIHByaW9yaXR5IGlmIGF2YWlsYWJsZS4KICBpZiAoaXNXZWJYUkF2YWlsYWJsZSkgeyByZXR1cm47IH0KICBjYW52YXNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogIHZyRGlzcGxheSA9IGV2dC5kaXNwbGF5OwogIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBjYW52YXMgaGFzIGEgV2ViR0wgY29udGV4dCBhc3NvY2lhdGVkIHdpdGggaXQuCiAgLy8gT3RoZXJ3aXNlLCB0aGUgcmVxdWVzdFByZXNlbnQgY291bGQgYmUgZGVuaWVkLgogIGNhbnZhc0VsLmdldENvbnRleHQoJ3dlYmdsJywge30pOwogIC8vIFJlcXVlc3QgcHJlc2VudCBpbW1lZGlhdGVseS4gYS1zY2VuZSB3aWxsIGJlIGFsbG93ZWQgdG8gZW50ZXIgVlIgd2l0aG91dCB1c2VyIGdlc3R1cmUuCiAgdnJEaXNwbGF5LnJlcXVlc3RQcmVzZW50KFt7c291cmNlOiBjYW52YXNFbH1dKS50aGVuKGZ1bmN0aW9uICgpIHt9LCBmdW5jdGlvbiAoKSB7fSk7Cn0pOwoKLy8gU3VwcG9ydCBib3RoIFdlYlZSIGFuZCBXZWJYUiBBUElzLgppZiAoaXNXZWJYUkF2YWlsYWJsZSkgewogIHZhciB1cGRhdGVFbnRlckludGVyZmFjZXMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NlbmVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Etc2NlbmUnKTsKICAgIGlmICghc2NlbmVFbCkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHVwZGF0ZUVudGVySW50ZXJmYWNlcyk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChzY2VuZUVsLmhhc0xvYWRlZCkgewogICAgICBzY2VuZUVsLmNvbXBvbmVudHNbJ3ZyLW1vZGUtdWknXS51cGRhdGVFbnRlckludGVyZmFjZXMoKTsKICAgIH0gZWxzZSB7CiAgICAgIHNjZW5lRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkJywgdXBkYXRlRW50ZXJJbnRlcmZhY2VzKTsKICAgIH0KICB9OwogIHZhciBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyKSB7CiAgICBlcnJvcignV2ViWFIgc2Vzc2lvbiBzdXBwb3J0IGVycm9yOiAnICsgZXJyLm1lc3NhZ2UpOwogIH07CiAgaWYgKG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQpIHsKICAgIC8vIEN1cnJlbnQgV2ViWFIgc3BlYyB1c2VzIGEgYm9vbGVhbi1yZXR1cm5pbmcgaXNTZXNzaW9uU3VwcG9ydGVkIHByb21pc2UKICAgIG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoJ2ltbWVyc2l2ZS12cicpLnRoZW4oZnVuY3Rpb24gKHN1cHBvcnRlZCkgewogICAgICBzdXBwb3J0c1ZSU2Vzc2lvbiA9IHN1cHBvcnRlZDsKICAgICAgdXBkYXRlRW50ZXJJbnRlcmZhY2VzKCk7CiAgICB9KS5jYXRjaChlcnJvckhhbmRsZXIpOwoKICAgIG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoJ2ltbWVyc2l2ZS1hcicpLnRoZW4oZnVuY3Rpb24gKHN1cHBvcnRlZCkgewogICAgICBzdXBwb3J0c0FSU2Vzc2lvbiA9IHN1cHBvcnRlZDsKICAgICAgdXBkYXRlRW50ZXJJbnRlcmZhY2VzKCk7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7CiAgfSBlbHNlIGlmIChuYXZpZ2F0b3IueHIuc3VwcG9ydHNTZXNzaW9uKSB7CiAgICAvLyBGYWxsYmFjayBmb3IgaW1wbGVtZW50YXRpb25zIHRoYXQgaGF2ZW4ndCB1cGRhdGVkIHRvIHRoZSBuZXcgc3BlYyB5ZXQsCiAgICAvLyB0aGUgb2xkIHZlcnNpb24gdXNlZCBzdXBwb3J0c1Nlc3Npb24gd2hpY2ggaXMgcmVqZWN0ZWQgZm9yIG1pc3NpbmcKICAgIC8vIHN1cHBvcnQuCiAgICBuYXZpZ2F0b3IueHIuc3VwcG9ydHNTZXNzaW9uKCdpbW1lcnNpdmUtdnInKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgc3VwcG9ydHNWUlNlc3Npb24gPSB0cnVlOwogICAgICB1cGRhdGVFbnRlckludGVyZmFjZXMoKTsKICAgIH0pLmNhdGNoKGVycm9ySGFuZGxlcik7CiAgICBuYXZpZ2F0b3IueHIuc3VwcG9ydHNTZXNzaW9uKCdpbW1lcnNpdmUtYXInKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgc3VwcG9ydHNBUlNlc3Npb24gPSB0cnVlOwogICAgICB1cGRhdGVFbnRlckludGVyZmFjZXMoKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTsKICB9IGVsc2UgewogICAgZXJyb3IoJ1dlYlhSIGhhcyBuZWl0aGVyIGlzU2Vzc2lvblN1cHBvcnRlZCBvciBzdXBwb3J0c1Nlc3Npb24/IScpOwogIH0KfSBlbHNlIHsKICBpZiAobmF2aWdhdG9yLmdldFZSRGlzcGxheXMpIHsKICAgIG5hdmlnYXRvci5nZXRWUkRpc3BsYXlzKCkudGhlbihmdW5jdGlvbiAoZGlzcGxheXMpIHsKICAgICAgdmFyIHNjZW5lRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhLXNjZW5lJyk7CiAgICAgIHZyRGlzcGxheSA9IGRpc3BsYXlzLmxlbmd0aCAmJiBkaXNwbGF5c1swXTsKICAgICAgaWYgKHNjZW5lRWwpIHsgc2NlbmVFbC5lbWl0KCdkaXNwbGF5Y29ubmVjdGVkJywge3ZyRGlzcGxheTogdnJEaXNwbGF5fSk7IH0KICAgIH0pOwogIH0KfQoKZnVuY3Rpb24gZ2V0VlJEaXNwbGF5ICgpIHsgcmV0dXJuIHZyRGlzcGxheTsgfQptb2R1bGUuZXhwb3J0cy5nZXRWUkRpc3BsYXkgPSBnZXRWUkRpc3BsYXk7CgovKioKICogRGV0ZXJtaW5lIGlmIGEgaGVhZHNldCBpcyBjb25uZWN0ZWQgYnkgY2hlY2tpbmcgaWYgYSB2ckRpc3BsYXkgaXMgYXZhaWxhYmxlLgogKi8KZnVuY3Rpb24gY2hlY2tIZWFkc2V0Q29ubmVjdGVkICgpIHsKICByZXR1cm4gc3VwcG9ydHNWUlNlc3Npb24gfHwgc3VwcG9ydHNBUlNlc3Npb24gfHwgISFnZXRWUkRpc3BsYXkoKTsKfQptb2R1bGUuZXhwb3J0cy5jaGVja0hlYWRzZXRDb25uZWN0ZWQgPSBjaGVja0hlYWRzZXRDb25uZWN0ZWQ7CgpmdW5jdGlvbiBjaGVja0FSU3VwcG9ydCAoKSB7IHJldHVybiBzdXBwb3J0c0FSU2Vzc2lvbjsgfQptb2R1bGUuZXhwb3J0cy5jaGVja0FSU3VwcG9ydCA9IGNoZWNrQVJTdXBwb3J0OwoKLyoqCiAqIENoZWNrcyBpZiBicm93c2VyIGlzIG1vYmlsZSBhbmQgbm90IHN0YW5kLWFsb25lIGRlZGljYXRlZCB2ciBkZXZpY2UuCiAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgbW9iaWxlIGJyb3dzZXIgZGV0ZWN0ZWQuCiAqLwp2YXIgaXNNb2JpbGUgPSAoZnVuY3Rpb24gKCkgewogIHZhciBfaXNNb2JpbGUgPSBmYWxzZTsKICAoZnVuY3Rpb24gKGEpIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZQogICAgaWYgKC8oYW5kcm9pZHxiYlxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QoYSkgfHwgLzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1wtKG58dSl8YzU1XC98Y2FwaXxjY3dhfGNkbVwtfGNlbGx8Y2h0bXxjbGRjfGNtZFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXC01fGdcLW1vfGdvKFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFwtKG18cHx0KXxoZWlcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXC1jfGh0KGMoXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XC18XC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XC8pfGtsb258a3B0IHxrd2NcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XC8oa3xsfHUpfDUwfDU0fFwtW2Etd10pfGxpYnd8bHlueHxtMVwtd3xtM2dhfG01MFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XC1nfHFhXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFwtWzItN118aVwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXC18b298cFwtKXxzZGtcL3xzZShjKFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFwtfHNoYXJ8c2llKFwtfG0pfHNrXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcLXx2XC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcLXx0ZGdcLXx0ZWwoaXxtKXx0aW1cLXx0XC1tb3x0byhwbHxzaCl8dHMoNzB8bVwtfG0zfG01KXx0eFwtOXx1cChcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcLXx5b3VyfHpldG98enRlXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgewogICAgICBfaXNNb2JpbGUgPSB0cnVlOwogICAgfQogICAgaWYgKGlzSU9TKCkgfHwgaXNUYWJsZXQoKSB8fCBpc1I3KCkpIHsKICAgICAgX2lzTW9iaWxlID0gdHJ1ZTsKICAgIH0KICAgIGlmIChpc01vYmlsZVZSKCkpIHsKICAgICAgX2lzTW9iaWxlID0gZmFsc2U7CiAgICB9CiAgfSkod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKTsKCiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9pc01vYmlsZTsgfTsKfSkoKTsKbW9kdWxlLmV4cG9ydHMuaXNNb2JpbGUgPSBpc01vYmlsZTsKCi8qKgogKiAgRGV0ZWN0IHRhYmxldCBkZXZpY2VzLgogKiAgQHBhcmFtIHtzdHJpbmd9IG1vY2tVc2VyQWdlbnQgLSBBbGxvdyBwYXNzaW5nIGEgbW9jayB1c2VyIGFnZW50IGZvciB0ZXN0aW5nLgogKi8KZnVuY3Rpb24gaXNUYWJsZXQgKG1vY2tVc2VyQWdlbnQpIHsKICB2YXIgdXNlckFnZW50ID0gbW9ja1VzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsKICByZXR1cm4gL2lwYWR8TmV4dXMgKDd8OSl8eG9vbXxzY2gtaTgwMHxwbGF5Ym9va3x0YWJsZXR8a2luZGxlL2kudGVzdCh1c2VyQWdlbnQpOwp9Cm1vZHVsZS5leHBvcnRzLmlzVGFibGV0ID0gaXNUYWJsZXQ7CgpmdW5jdGlvbiBpc0lPUyAoKSB7CiAgcmV0dXJuIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0pOwp9Cm1vZHVsZS5leHBvcnRzLmlzSU9TID0gaXNJT1M7CgpmdW5jdGlvbiBpc01vYmlsZURldmljZVJlcXVlc3RpbmdEZXNrdG9wU2l0ZSAoKSB7CiAgcmV0dXJuICFpc01vYmlsZSgpICYmICFpc01vYmlsZVZSKCkgJiYgd2luZG93Lm9yaWVudGF0aW9uICE9PSB1bmRlZmluZWQ7Cn0KbW9kdWxlLmV4cG9ydHMuaXNNb2JpbGVEZXZpY2VSZXF1ZXN0aW5nRGVza3RvcFNpdGUgPSBpc01vYmlsZURldmljZVJlcXVlc3RpbmdEZXNrdG9wU2l0ZTsKCi8qKgogKiAgRGV0ZWN0IE9jdWx1cyBCcm93c2VyIChzdGFuZGFsb25lIGhlYWRzZXQpCiAqLwpmdW5jdGlvbiBpc09jdWx1c0Jyb3dzZXIgKCkgewogIHJldHVybiAvKE9jdWx1c0Jyb3dzZXIpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7Cn0KbW9kdWxlLmV4cG9ydHMuaXNPY3VsdXNCcm93c2VyID0gaXNPY3VsdXNCcm93c2VyOwoKLyoqCiAqICBEZXRlY3QgRmlyZWZveCBSZWFsaXR5IChzdGFuZGFsb25lIGhlYWRzZXQpCiAqLwpmdW5jdGlvbiBpc0ZpcmVmb3hSZWFsaXR5ICgpIHsKICByZXR1cm4gLyhNb2JpbGUgVlIpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7Cn0KbW9kdWxlLmV4cG9ydHMuaXNGaXJlZm94UmVhbGl0eSA9IGlzRmlyZWZveFJlYWxpdHk7CgovKioKICogIERldGVjdCBicm93c2VycyBpbiBTdGFuZC1BbG9uZSBoZWFkc2V0cwogKi8KZnVuY3Rpb24gaXNNb2JpbGVWUiAoKSB7CiAgcmV0dXJuIGlzT2N1bHVzQnJvd3NlcigpIHx8IGlzRmlyZWZveFJlYWxpdHkoKTsKfQptb2R1bGUuZXhwb3J0cy5pc01vYmlsZVZSID0gaXNNb2JpbGVWUjsKCmZ1bmN0aW9uIGlzUjcgKCkgewogIHJldHVybiAvUjcgQnVpbGQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpOwp9Cm1vZHVsZS5leHBvcnRzLmlzUjcgPSBpc1I3OwoKLyoqCiAqIENoZWNrcyBtb2JpbGUgZGV2aWNlIG9yaWVudGF0aW9uLgogKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIGxhbmRzY2FwZSBvcmllbnRhdGlvbi4KICovCm1vZHVsZS5leHBvcnRzLmlzTGFuZHNjYXBlID0gZnVuY3Rpb24gKCkgewogIHZhciBvcmllbnRhdGlvbiA9IHdpbmRvdy5vcmllbnRhdGlvbjsKICBpZiAoaXNSNygpKSB7IG9yaWVudGF0aW9uICs9IDkwOyB9CiAgcmV0dXJuIG9yaWVudGF0aW9uID09PSA5MCB8fCBvcmllbnRhdGlvbiA9PT0gLTkwOwp9OwoKLyoqCiAqIENoZWNrIGlmIHJ1bm5pbmcgaW4gYSBicm93c2VyIG9yIHNwb29mZWQgYnJvd3NlciAoYnVuZGxlcikuCiAqIFdlIG5lZWQgdG8gY2hlY2sgYSBub2RlIGFwaSB0aGF0IGlzbid0IG1vY2tlZCBvbiBlaXRoZXIgc2lkZS4KICogYHJlcXVpcmVgIGFuZCBgbW9kdWxlLmV4cG9ydHNgIGFyZSBtb2NrZWQgaW4gYnJvd3NlciBieSBidW5kbGVycy4KICogYHdpbmRvd2AgaXMgbW9ja2VkIGluIG5vZGUuCiAqIGBwcm9jZXNzYCBpcyBhbHNvIG1vY2tlZCBieSBicm93c2VyaWZ5LCBidXQgaGFzIGN1c3RvbSBwcm9wZXJ0aWVzLgogKi8KbW9kdWxlLmV4cG9ydHMuaXNCcm93c2VyRW52aXJvbm1lbnQgPSAhISghcHJvY2VzcyB8fCBwcm9jZXNzLmJyb3dzZXIpOwoKLyoqCiAqIENoZWNrIGlmIHJ1bm5pbmcgaW4gbm9kZSBvbiB0aGUgc2VydmVyLgogKi8KbW9kdWxlLmV4cG9ydHMuaXNOb2RlRW52aXJvbm1lbnQgPSAhbW9kdWxlLmV4cG9ydHMuaXNCcm93c2VyRW52aXJvbm1lbnQ7Cgp9KS5jYWxsKHRoaXMsX2RlcmVxXygnX3Byb2Nlc3MnKSkKCn0seyJfcHJvY2VzcyI6NSwiZGVidWciOjEwfV0sMTgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIFNwbGl0IGEgZGVsaW1pdGVkIGNvbXBvbmVudCBwcm9wZXJ0eSBzdHJpbmcgKGUuZy4sIGBtYXRlcmlhbC5jb2xvcmApIHRvIGFuIG9iamVjdAogKiBjb250YWluaW5nIGBjb21wb25lbnRgIG5hbWUgYW5kIGBwcm9wZXJ0eWAgbmFtZS4gSWYgdGhlcmUgaXMgbm8gZGVsaW1pdGVyLCBqdXN0IHJldHVybiB0aGUKICogc3RyaW5nIGJhY2suCiAqCiAqIENhY2hlIGFycmF5cyBmcm9tIHNwbGl0dGluZyBzdHJpbmdzIHZpYSBkZWxpbWl0ZXIgdG8gc2F2ZSBvbiBtZW1vcnkuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBlLmcuLCBgbWF0ZXJpYWwub3BhY2l0eWAuCiAqIEBwYXJhbSB7c3RyaW5nfSBkZWxpbWl0ZXIgLSBlLmcuLCBgLmAuCiAqIEByZXR1cm5zIHthcnJheX0gZS5nLiwgYFsnbWF0ZXJpYWwnLCAnb3BhY2l0eSddYC4KICovCnZhciBwcm9wZXJ0eVBhdGhDYWNoZSA9IHt9OwpmdW5jdGlvbiBnZXRDb21wb25lbnRQcm9wZXJ0eVBhdGggKHN0ciwgZGVsaW1pdGVyKSB7CiAgZGVsaW1pdGVyID0gZGVsaW1pdGVyIHx8ICcuJzsKICBpZiAoIXByb3BlcnR5UGF0aENhY2hlW2RlbGltaXRlcl0pIHsgcHJvcGVydHlQYXRoQ2FjaGVbZGVsaW1pdGVyXSA9IHt9OyB9CiAgaWYgKHN0ci5pbmRleE9mKGRlbGltaXRlcikgIT09IC0xKSB7CiAgICBwcm9wZXJ0eVBhdGhDYWNoZVtkZWxpbWl0ZXJdW3N0cl0gPSBzdHIuc3BsaXQoZGVsaW1pdGVyKTsKICB9IGVsc2UgewogICAgcHJvcGVydHlQYXRoQ2FjaGVbZGVsaW1pdGVyXVtzdHJdID0gc3RyOwogIH0KICByZXR1cm4gcHJvcGVydHlQYXRoQ2FjaGVbZGVsaW1pdGVyXVtzdHJdOwp9Cm1vZHVsZS5leHBvcnRzLmdldENvbXBvbmVudFByb3BlcnR5UGF0aCA9IGdldENvbXBvbmVudFByb3BlcnR5UGF0aDsKbW9kdWxlLmV4cG9ydHMucHJvcGVydHlQYXRoQ2FjaGUgPSBwcm9wZXJ0eVBhdGhDYWNoZTsKCi8qKgogKiBHZXQgY29tcG9uZW50IHByb3BlcnR5IHVzaW5nIGVuY29kZWQgY29tcG9uZW50IG5hbWUgKyBjb21wb25lbnQgcHJvcGVydHkgbmFtZSB3aXRoIGEKICogZGVsaW1pdGVyLgogKi8KbW9kdWxlLmV4cG9ydHMuZ2V0Q29tcG9uZW50UHJvcGVydHkgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIGRlbGltaXRlcikgewogIHZhciBzcGxpdE5hbWU7CiAgZGVsaW1pdGVyID0gZGVsaW1pdGVyIHx8ICcuJzsKICBpZiAobmFtZS5pbmRleE9mKGRlbGltaXRlcikgIT09IC0xKSB7CiAgICBzcGxpdE5hbWUgPSBnZXRDb21wb25lbnRQcm9wZXJ0eVBhdGgobmFtZSwgZGVsaW1pdGVyKTsKICAgIGlmIChzcGxpdE5hbWUuY29uc3RydWN0b3IgPT09IFN0cmluZykgewogICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHNwbGl0TmFtZSk7CiAgICB9CiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHNwbGl0TmFtZVswXSlbc3BsaXROYW1lWzFdXTsKICB9CiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKTsKfTsKCi8qKgogKiBTZXQgY29tcG9uZW50IHByb3BlcnR5IHVzaW5nIGVuY29kZWQgY29tcG9uZW50IG5hbWUgKyBjb21wb25lbnQgcHJvcGVydHkgbmFtZSB3aXRoIGEKICogZGVsaW1pdGVyLgogKi8KbW9kdWxlLmV4cG9ydHMuc2V0Q29tcG9uZW50UHJvcGVydHkgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbHVlLCBkZWxpbWl0ZXIpIHsKICB2YXIgc3BsaXROYW1lOwogIGRlbGltaXRlciA9IGRlbGltaXRlciB8fCAnLic7CiAgaWYgKG5hbWUuaW5kZXhPZihkZWxpbWl0ZXIpICE9PSAtMSkgewogICAgc3BsaXROYW1lID0gZ2V0Q29tcG9uZW50UHJvcGVydHlQYXRoKG5hbWUsIGRlbGltaXRlcik7CiAgICBpZiAoc3BsaXROYW1lLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHsKICAgICAgZWwuc2V0QXR0cmlidXRlKHNwbGl0TmFtZSwgdmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgZWwuc2V0QXR0cmlidXRlKHNwbGl0TmFtZVswXSwgc3BsaXROYW1lWzFdLCB2YWx1ZSk7CiAgICB9CiAgICByZXR1cm47CiAgfQogIGVsLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7Cn07Cgp9LHt9XSwxODE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvcmNlQ2FudmFzUmVzaXplU2FmYXJpTW9iaWxlIChjYW52YXNFbCkgewogIHZhciB3aWR0aCA9IGNhbnZhc0VsLnN0eWxlLndpZHRoOwogIHZhciBoZWlnaHQgPSBjYW52YXNFbC5zdHlsZS5oZWlnaHQ7CiAgLy8gVGFrZW4gZnJvbSB3ZWJ2ci1wb2x5ZmlsbCAoaHR0cHM6Ly9naXRodWIuY29tL2JvcmlzbXVzL3dlYnZyLXBvbHlmaWxsL2Jsb2IvODVmNjU3Y2Q1MDJlYzk0MTdiZjI2Yjg3YzNjYjJhZmE2YTcwZTA3OS9zcmMvdXRpbC5qcyNMMjAwKQogIC8vIGlPUyBvbmx5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTI1NTYKICAvLyBCeSBjaGFuZ2luZyB0aGUgc2l6ZSAxIHBpeGVsIGFuZCByZXN0b3JpbmcgdGhlIHByZXZpb3VzIHZhbHVlCiAgLy8gd2UgdHJpZ2dlciBhIHNpemUgcmVjYWxjdWxhdGlvbiBjeWNsZS4KICBjYW52YXNFbC5zdHlsZS53aWR0aCA9IChwYXJzZUludCh3aWR0aCwgMTApICsgMSkgKyAncHgnOwogIGNhbnZhc0VsLnN0eWxlLmhlaWdodCA9IChwYXJzZUludChoZWlnaHQsIDEwKSArIDEpICsgJ3B4JzsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIGNhbnZhc0VsLnN0eWxlLndpZHRoID0gd2lkdGg7CiAgICBjYW52YXNFbC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7CiAgfSwgMjAwKTsKfTsKCn0se31dLDE4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBsb2NhdGlvbiAqLwoKLyogQ2VudHJhbGl6ZWQgcGxhY2UgdG8gcmVmZXJlbmNlIHV0aWxpdGllcyBzaW5jZSB1dGlscyBpcyBleHBvc2VkIHRvIHRoZSB1c2VyLiAqLwp2YXIgZGVidWcgPSBfZGVyZXFfKCcuL2RlYnVnJyk7CnZhciBkZWVwQXNzaWduID0gX2RlcmVxXygnZGVlcC1hc3NpZ24nKTsKdmFyIGRldmljZSA9IF9kZXJlcV8oJy4vZGV2aWNlJyk7CnZhciBvYmplY3RBc3NpZ24gPSBfZGVyZXFfKCdvYmplY3QtYXNzaWduJyk7CnZhciBvYmplY3RQb29sID0gX2RlcmVxXygnLi9vYmplY3QtcG9vbCcpOwoKdmFyIHdhcm4gPSBkZWJ1ZygndXRpbHM6d2FybicpOwoKbW9kdWxlLmV4cG9ydHMuYmluZCA9IF9kZXJlcV8oJy4vYmluZCcpOwptb2R1bGUuZXhwb3J0cy5jb29yZGluYXRlcyA9IF9kZXJlcV8oJy4vY29vcmRpbmF0ZXMnKTsKbW9kdWxlLmV4cG9ydHMuZGVidWcgPSBkZWJ1ZzsKbW9kdWxlLmV4cG9ydHMuZGV2aWNlID0gZGV2aWNlOwptb2R1bGUuZXhwb3J0cy5lbnRpdHkgPSBfZGVyZXFfKCcuL2VudGl0eScpOwptb2R1bGUuZXhwb3J0cy5mb3JjZUNhbnZhc1Jlc2l6ZVNhZmFyaU1vYmlsZSA9IF9kZXJlcV8oJy4vZm9yY2VDYW52YXNSZXNpemVTYWZhcmlNb2JpbGUnKTsKbW9kdWxlLmV4cG9ydHMuaXNJRTExID0gX2RlcmVxXygnLi9pcy1pZTExJyk7Cm1vZHVsZS5leHBvcnRzLm1hdGVyaWFsID0gX2RlcmVxXygnLi9tYXRlcmlhbCcpOwptb2R1bGUuZXhwb3J0cy5vYmplY3RQb29sID0gb2JqZWN0UG9vbDsKbW9kdWxlLmV4cG9ydHMuc3BsaXQgPSBfZGVyZXFfKCcuL3NwbGl0Jykuc3BsaXQ7Cm1vZHVsZS5leHBvcnRzLnN0eWxlUGFyc2VyID0gX2RlcmVxXygnLi9zdHlsZVBhcnNlcicpOwptb2R1bGUuZXhwb3J0cy50cmFja2VkQ29udHJvbHMgPSBfZGVyZXFfKCcuL3RyYWNrZWQtY29udHJvbHMnKTsKCm1vZHVsZS5leHBvcnRzLmNoZWNrSGVhZHNldENvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHsKICB3YXJuKCdgdXRpbHMuY2hlY2tIZWFkc2V0Q29ubmVjdGVkYCBoYXMgbW92ZWQgdG8gYHV0aWxzLmRldmljZS5jaGVja0hlYWRzZXRDb25uZWN0ZWRgJyk7CiAgcmV0dXJuIGRldmljZS5jaGVja0hlYWRzZXRDb25uZWN0ZWQoYXJndW1lbnRzKTsKfTsKbW9kdWxlLmV4cG9ydHMuaXNHZWFyVlIgPSBtb2R1bGUuZXhwb3J0cy5kZXZpY2UuaXNHZWFyVlIgPSBmdW5jdGlvbiAoKSB7CiAgd2FybignYHV0aWxzLmlzR2VhclZSYCBoYXMgYmVlbiBkZXByZWNhdGVkLCB1c2UgYHV0aWxzLmRldmljZS5pc01vYmlsZVZSYCcpOwp9Owptb2R1bGUuZXhwb3J0cy5pc0lPUyA9IGZ1bmN0aW9uICgpIHsKICB3YXJuKCdgdXRpbHMuaXNJT1NgIGhhcyBtb3ZlZCB0byBgdXRpbHMuZGV2aWNlLmlzSU9TYCcpOwogIHJldHVybiBkZXZpY2UuaXNJT1MoYXJndW1lbnRzKTsKfTsKbW9kdWxlLmV4cG9ydHMuaXNPY3VsdXNHbyA9IG1vZHVsZS5leHBvcnRzLmRldmljZS5pc09jdWx1c0dvID0gZnVuY3Rpb24gKCkgewogIHdhcm4oJ2B1dGlscy5pc09jdWx1c0dvYCBoYXMgYmVlbiBkZXByZWNhdGVkLCB1c2UgYHV0aWxzLmRldmljZS5pc01vYmlsZVZSYCcpOwp9Owptb2R1bGUuZXhwb3J0cy5pc01vYmlsZSA9IGZ1bmN0aW9uICgpIHsKICB3YXJuKCdgdXRpbHMuaXNNb2JpbGUgaGFzIG1vdmVkIHRvIGB1dGlscy5kZXZpY2UuaXNNb2JpbGVgJyk7CiAgcmV0dXJuIGRldmljZS5pc01vYmlsZShhcmd1bWVudHMpOwp9OwoKLyoqCiAqIFJldHVybnMgdGhyb3R0bGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBhdCBtb3N0IG9uY2UgZXZlcnkgaW50ZXJ2YWwuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9uVG9UaHJvdHRsZQogKiBAcGFyYW0ge251bWJlcn0gbWluaW11bUludGVydmFsIC0gTWluaW1hbCBpbnRlcnZhbCBiZXR3ZWVuIGNhbGxzIChtaWxsaXNlY29uZHMpLgogKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uYWxDb250ZXh0IC0gSWYgZ2l2ZW4sIGJpbmQgZnVuY3Rpb24gdG8gdGhyb3R0bGUgdG8gdGhpcyBjb250ZXh0LgogKiBAcmV0dXJucyB7ZnVuY3Rpb259IFRocm90dGxlZCBmdW5jdGlvbi4KICovCm1vZHVsZS5leHBvcnRzLnRocm90dGxlID0gZnVuY3Rpb24gKGZ1bmN0aW9uVG9UaHJvdHRsZSwgbWluaW11bUludGVydmFsLCBvcHRpb25hbENvbnRleHQpIHsKICB2YXIgbGFzdFRpbWU7CiAgaWYgKG9wdGlvbmFsQ29udGV4dCkgewogICAgZnVuY3Rpb25Ub1Rocm90dGxlID0gbW9kdWxlLmV4cG9ydHMuYmluZChmdW5jdGlvblRvVGhyb3R0bGUsIG9wdGlvbmFsQ29udGV4dCk7CiAgfQogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgdGltZSA9IERhdGUubm93KCk7CiAgICB2YXIgc2luY2VMYXN0VGltZSA9IHR5cGVvZiBsYXN0VGltZSA9PT0gJ3VuZGVmaW5lZCcgPyBtaW5pbXVtSW50ZXJ2YWwgOiB0aW1lIC0gbGFzdFRpbWU7CiAgICBpZiAodHlwZW9mIGxhc3RUaW1lID09PSAndW5kZWZpbmVkJyB8fCAoc2luY2VMYXN0VGltZSA+PSBtaW5pbXVtSW50ZXJ2YWwpKSB7CiAgICAgIGxhc3RUaW1lID0gdGltZTsKICAgICAgZnVuY3Rpb25Ub1Rocm90dGxlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICB9CiAgfTsKfTsKCi8qKgogKiBSZXR1cm5zIHRocm90dGxlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgYXQgbW9zdCBvbmNlIGV2ZXJ5IGludGVydmFsLgogKiBVc2VzIHRoZSB0aW1lL3RpbWVEZWx0YSB0aW1lc3RhbXBzIHByb3ZpZGVkIGJ5IHRoZSBnbG9iYWwgcmVuZGVyIGxvb3AgZm9yIGJldHRlciBwZXJmLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvblRvVGhyb3R0bGUKICogQHBhcmFtIHtudW1iZXJ9IG1pbmltdW1JbnRlcnZhbCAtIE1pbmltYWwgaW50ZXJ2YWwgYmV0d2VlbiBjYWxscyAobWlsbGlzZWNvbmRzKS4KICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbmFsQ29udGV4dCAtIElmIGdpdmVuLCBiaW5kIGZ1bmN0aW9uIHRvIHRocm90dGxlIHRvIHRoaXMgY29udGV4dC4KICogQHJldHVybnMge2Z1bmN0aW9ufSBUaHJvdHRsZWQgZnVuY3Rpb24uCiAqLwptb2R1bGUuZXhwb3J0cy50aHJvdHRsZVRpY2sgPSBmdW5jdGlvbiAoZnVuY3Rpb25Ub1Rocm90dGxlLCBtaW5pbXVtSW50ZXJ2YWwsIG9wdGlvbmFsQ29udGV4dCkgewogIHZhciBsYXN0VGltZTsKICBpZiAob3B0aW9uYWxDb250ZXh0KSB7CiAgICBmdW5jdGlvblRvVGhyb3R0bGUgPSBtb2R1bGUuZXhwb3J0cy5iaW5kKGZ1bmN0aW9uVG9UaHJvdHRsZSwgb3B0aW9uYWxDb250ZXh0KTsKICB9CiAgcmV0dXJuIGZ1bmN0aW9uICh0aW1lLCBkZWx0YSkgewogICAgdmFyIHNpbmNlTGFzdFRpbWUgPSB0eXBlb2YgbGFzdFRpbWUgPT09ICd1bmRlZmluZWQnID8gZGVsdGEgOiB0aW1lIC0gbGFzdFRpbWU7CiAgICBpZiAodHlwZW9mIGxhc3RUaW1lID09PSAndW5kZWZpbmVkJyB8fCAoc2luY2VMYXN0VGltZSA+PSBtaW5pbXVtSW50ZXJ2YWwpKSB7CiAgICAgIGxhc3RUaW1lID0gdGltZTsKICAgICAgZnVuY3Rpb25Ub1Rocm90dGxlKHRpbWUsIHNpbmNlTGFzdFRpbWUpOwogICAgfQogIH07Cn07CgovKioKICogUmV0dXJucyBkZWJvdW5jZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIG9ubHkgb25jZSBhZnRlciBhIHNldCBvZiByZXBlYXRlZCBjYWxscy4KICoKICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25Ub0RlYm91bmNlCiAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IC0gVGltZSB0byB3YWl0IGZvciByZXBlYXRlZCBmdW5jdGlvbiBjYWxscyAobWlsbGlzZWNvbmRzKS4KICogQHBhcmFtIHtib29sZWFufSBpbW1lZGlhdGUgLSBDYWxscyB0aGUgZnVuY3Rpb24gaW1tZWRpYXRlbHkgcmVnYXJkbGVzcyBvZiBpZiBpdCBzaG91bGQgYmUgd2FpdGluZy4KICogQHJldHVybnMge2Z1bmN0aW9ufSBEZWJvdW5jZWQgZnVuY3Rpb24uCiAqLwptb2R1bGUuZXhwb3J0cy5kZWJvdW5jZSA9IGZ1bmN0aW9uIChmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHsKICB2YXIgdGltZW91dDsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbnRleHQgPSB0aGlzOwogICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgIH07CiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDsKICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTsKICAgIGlmIChjYWxsTm93KSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogIH07Cn07CgovKioKICogTWl4IHRoZSBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3QocykgaW50byBhIGRlc3RpbmF0aW9uIG9iamVjdC4KICoKICogQHBhcmFtICB7b2JqZWN0fSBkZXN0IC0gVGhlIG9iamVjdCB0byB3aGljaCBwcm9wZXJ0aWVzIHdpbGwgYmUgY29waWVkLgogKiBAcGFyYW0gIHsuLi5vYmplY3R9IHNvdXJjZSAtIFRoZSBvYmplY3QocykgZnJvbSB3aGljaCBwcm9wZXJ0aWVzIHdpbGwgYmUgY29waWVkLgogKi8KbW9kdWxlLmV4cG9ydHMuZXh0ZW5kID0gb2JqZWN0QXNzaWduOwptb2R1bGUuZXhwb3J0cy5leHRlbmREZWVwID0gZGVlcEFzc2lnbjsKCm1vZHVsZS5leHBvcnRzLmNsb25lID0gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpOwp9OwoKLyoqCiAqIENoZWNrcyBpZiB0d28gdmFsdWVzIGFyZSBlcXVhbC4KICogSW5jbHVkZXMgb2JqZWN0cyBhbmQgYXJyYXlzIGFuZCBuZXN0ZWQgb2JqZWN0cyBhbmQgYXJyYXlzLgogKiBUcnkgdG8ga2VlcCB0aGlzIGZ1bmN0aW9uIHBlcmZvcm1hbnQgYXMgaXQgd2lsbCBiZSBjYWxsZWQgb2Z0ZW4gdG8gc2VlIGlmIGEgY29tcG9uZW50CiAqIHNob3VsZCBiZSB1cGRhdGVkLgogKgogKiBAcGFyYW0ge29iamVjdH0gYSAtIEZpcnN0IG9iamVjdC4KICogQHBhcmFtIHtvYmplY3R9IGIgLSBTZWNvbmQgb2JqZWN0LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0d28gb2JqZWN0cyBhcmUgZGVlcGx5IGVxdWFsLgogKi8KdmFyIGRlZXBFcXVhbCA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIGFycmF5UG9vbCA9IG9iamVjdFBvb2wuY3JlYXRlUG9vbChmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSk7CgogIHJldHVybiBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGtleTsKICAgIHZhciBrZXlzQTsKICAgIHZhciBrZXlzQjsKICAgIHZhciBpOwogICAgdmFyIHZhbEE7CiAgICB2YXIgdmFsQjsKCiAgICAvLyBJZiBub3Qgb2JqZWN0cyBvciBhcnJheXMsIGNvbXBhcmUgYXMgdmFsdWVzLgogICAgaWYgKGEgPT09IHVuZGVmaW5lZCB8fCBiID09PSB1bmRlZmluZWQgfHwgYSA9PT0gbnVsbCB8fCBiID09PSBudWxsIHx8CiAgICAgICAgIShhICYmIGIgJiYgKGEuY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiBiLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHx8CiAgICAgICAgICAgICAgICAgICAgKGEuY29uc3RydWN0b3IgPT09IEFycmF5ICYmIGIuY29uc3RydWN0b3IgPT09IEFycmF5KSkpIHsKICAgICAgcmV0dXJuIGEgPT09IGI7CiAgICB9CgogICAgLy8gRGlmZmVyZW50IG51bWJlciBvZiBrZXlzLCBub3QgZXF1YWwuCiAgICBrZXlzQSA9IGFycmF5UG9vbC51c2UoKTsKICAgIGtleXNCID0gYXJyYXlQb29sLnVzZSgpOwogICAga2V5c0EubGVuZ3RoID0gMDsKICAgIGtleXNCLmxlbmd0aCA9IDA7CiAgICBmb3IgKGtleSBpbiBhKSB7IGtleXNBLnB1c2goa2V5KTsgfQogICAgZm9yIChrZXkgaW4gYikgeyBrZXlzQi5wdXNoKGtleSk7IH0KICAgIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgewogICAgICBhcnJheVBvb2wucmVjeWNsZShrZXlzQSk7CiAgICAgIGFycmF5UG9vbC5yZWN5Y2xlKGtleXNCKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vIFJldHVybiBgZmFsc2VgIGF0IHRoZSBmaXJzdCBzaWduIG9mIGluZXF1YWxpdHkuCiAgICBmb3IgKGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyArK2kpIHsKICAgICAgdmFsQSA9IGFba2V5c0FbaV1dOwogICAgICB2YWxCID0gYltrZXlzQVtpXV07CiAgICAgIC8vIENoZWNrIG5lc3RlZCBhcnJheSBhbmQgb2JqZWN0LgogICAgICBpZiAoKHR5cGVvZiB2YWxBID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsQiA9PT0gJ29iamVjdCcpIHx8CiAgICAgICAgICAoQXJyYXkuaXNBcnJheSh2YWxBKSAmJiBBcnJheS5pc0FycmF5KHZhbEIpKSkgewogICAgICAgIGlmICh2YWxBID09PSB2YWxCKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgaWYgKCFkZWVwRXF1YWwodmFsQSwgdmFsQikpIHsKICAgICAgICAgIGFycmF5UG9vbC5yZWN5Y2xlKGtleXNBKTsKICAgICAgICAgIGFycmF5UG9vbC5yZWN5Y2xlKGtleXNCKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodmFsQSAhPT0gdmFsQikgewogICAgICAgIGFycmF5UG9vbC5yZWN5Y2xlKGtleXNBKTsKICAgICAgICBhcnJheVBvb2wucmVjeWNsZShrZXlzQik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CgogICAgYXJyYXlQb29sLnJlY3ljbGUoa2V5c0EpOwogICAgYXJyYXlQb29sLnJlY3ljbGUoa2V5c0IpOwogICAgcmV0dXJuIHRydWU7CiAgfTsKfSkoKTsKbW9kdWxlLmV4cG9ydHMuZGVlcEVxdWFsID0gZGVlcEVxdWFsOwoKLyoqCiAqIENvbXB1dGVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIG9iamVjdHMuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBhIC0gRmlyc3Qgb2JqZWN0IHRvIGNvbXBhcmUgKGUuZy4sIG9sZERhdGEpLgogKiBAcGFyYW0ge29iamVjdH0gYiAtIFNlY29uZCBvYmplY3QgdG8gY29tcGFyZSAoZS5nLiwgbmV3RGF0YSkuCiAqIEByZXR1cm5zIHtvYmplY3R9CiAqICAgRGlmZmVyZW5jZSBvYmplY3Qgd2hlcmUgc2V0IG9mIGtleXMgbm90ZSB3aGljaCB2YWx1ZXMgd2VyZSBub3QgZXF1YWwsIGFuZCB2YWx1ZXMgYXJlCiAqICAgYGJgJ3MgdmFsdWVzLgogKi8KbW9kdWxlLmV4cG9ydHMuZGlmZiA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIGtleXMgPSBbXTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCB0YXJnZXRPYmplY3QpIHsKICAgIHZhciBhVmFsOwogICAgdmFyIGJWYWw7CiAgICB2YXIgYktleTsKICAgIHZhciBkaWZmOwogICAgdmFyIGtleTsKICAgIHZhciBpOwogICAgdmFyIGlzQ29tcGFyaW5nT2JqZWN0czsKCiAgICBkaWZmID0gdGFyZ2V0T2JqZWN0IHx8IHt9OwoKICAgIC8vIENvbGxlY3QgQSBrZXlzLgogICAga2V5cy5sZW5ndGggPSAwOwogICAgZm9yIChrZXkgaW4gYSkgeyBrZXlzLnB1c2goa2V5KTsgfQoKICAgIGlmICghYikgeyByZXR1cm4gZGlmZjsgfQoKICAgIC8vIENvbGxlY3QgQiBrZXlzLgogICAgZm9yIChiS2V5IGluIGIpIHsKICAgICAgaWYgKGtleXMuaW5kZXhPZihiS2V5KSA9PT0gLTEpIHsKICAgICAgICBrZXlzLnB1c2goYktleSk7CiAgICAgIH0KICAgIH0KCiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICBrZXkgPSBrZXlzW2ldOwogICAgICBhVmFsID0gYVtrZXldOwogICAgICBiVmFsID0gYltrZXldOwogICAgICBpc0NvbXBhcmluZ09iamVjdHMgPSBhVmFsICYmIGJWYWwgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBhVmFsLmNvbnN0cnVjdG9yID09PSBPYmplY3QgJiYgYlZhbC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0OwogICAgICBpZiAoKGlzQ29tcGFyaW5nT2JqZWN0cyAmJiAhZGVlcEVxdWFsKGFWYWwsIGJWYWwpKSB8fAogICAgICAgICAgKCFpc0NvbXBhcmluZ09iamVjdHMgJiYgYVZhbCAhPT0gYlZhbCkpIHsKICAgICAgICBkaWZmW2tleV0gPSBiVmFsOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZGlmZjsKICB9Owp9KSgpOwoKLyoqCiAqIFJldHVybnMgd2hldGhlciB3ZSBzaG91bGQgY2FwdHVyZSB0aGlzIGtleWJvYXJkIGV2ZW50IGZvciBrZXlib2FyZCBzaG9ydGN1dHMuCiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEV2ZW50IG9iamVjdC4KICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIGtleSBldmVudCBzaG91bGQgYmUgY2FwdHVyZWQuCiAqLwptb2R1bGUuZXhwb3J0cy5zaG91bGRDYXB0dXJlS2V5RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICBpZiAoZXZlbnQubWV0YUtleSkgeyByZXR1cm4gZmFsc2U7IH0KICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keTsKfTsKCi8qKgogKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBiYXNlZCBvbiBhIGRlbGltaXRlci4KICoKICogQHBhcmFtICAge3N0cmluZz19IFtzdHI9JyddICAgICAgICBTb3VyY2Ugc3RyaW5nCiAqIEBwYXJhbSAgIHtzdHJpbmc9fSBbZGVsaW1pdGVyPScgJ10gRGVsaW1pdGVyIHRvIHVzZQogKiBAcmV0dXJucyB7YXJyYXl9ICAgICAgICAgICAgICAgICAgIEFycmF5IG9mIGRlbGltaXRlZCBzdHJpbmdzCiAqLwptb2R1bGUuZXhwb3J0cy5zcGxpdFN0cmluZyA9IGZ1bmN0aW9uIChzdHIsIGRlbGltaXRlcikgewogIGlmICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJykgeyBkZWxpbWl0ZXIgPSAnICc7IH0KICAvLyBGaXJzdCBjb2xsYXBzZSB0aGUgd2hpdGVzcGFjZSAob3Igd2hhdGV2ZXIgdGhlIGRlbGltaXRlciBpcykuCiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChkZWxpbWl0ZXIsICdnJyk7CiAgc3RyID0gKHN0ciB8fCAnJykucmVwbGFjZShyZWdleCwgZGVsaW1pdGVyKTsKICAvLyBUaGVuIHNwbGl0LgogIHJldHVybiBzdHIuc3BsaXQoZGVsaW1pdGVyKTsKfTsKCi8qKgogKiBFeHRyYWN0cyBkYXRhIGZyb20gdGhlIGVsZW1lbnQgZ2l2ZW4gYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgZXhwZWN0ZWQga2V5cy4KICoKICogQHBhcmFtIHtFbGVtZW50fSBTb3VyY2UgZWxlbWVudC4KICogQHBhcmFtIHtPYmplY3R9IFtkZWZhdWx0cz17fV0gT2JqZWN0IG9mIGRlZmF1bHQga2V5LXZhbHVlIHBhaXJzLgogKiBAcmV0dXJucyB7T2JqZWN0fQogKi8KbW9kdWxlLmV4cG9ydHMuZ2V0RWxEYXRhID0gZnVuY3Rpb24gKGVsLCBkZWZhdWx0cykgewogIGRlZmF1bHRzID0gZGVmYXVsdHMgfHwge307CiAgdmFyIGRhdGEgPSB7fTsKICBPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChjb3B5QXR0cmlidXRlKTsKICBmdW5jdGlvbiBjb3B5QXR0cmlidXRlIChrZXkpIHsKICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoa2V5KSkgewogICAgICBkYXRhW2tleV0gPSBlbC5nZXRBdHRyaWJ1dGUoa2V5KTsKICAgIH0KICB9CiAgcmV0dXJuIGRhdGE7Cn07CgovKioKICogUmV0cmlldmVzIHF1ZXJ5c3RyaW5nIHZhbHVlLgogKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiBxdWVyeXN0cmluZyBrZXkuCiAqIEByZXR1cm4ge1N0cmluZ30gICAgICBWYWx1ZQogKi8KbW9kdWxlLmV4cG9ydHMuZ2V0VXJsUGFyYW1ldGVyID0gZnVuY3Rpb24gKG5hbWUpIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGUKICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFtdLywgJ1xcWycpLnJlcGxhY2UoL1tcXV0vLCAnXFxdJyk7CiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnW1xcPyZdJyArIG5hbWUgKyAnPShbXiYjXSopJyk7CiAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7CiAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAnJyA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1wrL2csICcgJykpOwp9OwoKLyoqCiAqIERldGVjdHMgd2hldGhlciBjb250ZXh0IGlzIHdpdGhpbiBpZnJhbWUuCiAqLwptb2R1bGUuZXhwb3J0cy5pc0lmcmFtZWQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHdpbmRvdy50b3AgIT09IHdpbmRvdy5zZWxmOwp9OwoKLyoqCiAqIEZpbmRzIGFsbCBlbGVtZW50cyB1bmRlciB0aGUgZWxlbWVudCB0aGF0IGhhdmUgdGhlIGlzU2NlbmUKICogcHJvcGVydHkgc2V0IHRvIHRydWUKICovCm1vZHVsZS5leHBvcnRzLmZpbmRBbGxTY2VuZXMgPSBmdW5jdGlvbiAoZWwpIHsKICB2YXIgbWF0Y2hpbmdFbGVtZW50cyA9IFtdOwogIHZhciBhbGxFbGVtZW50cyA9IGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJyk7CiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhbGxFbGVtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgIGlmIChhbGxFbGVtZW50c1tpXS5pc1NjZW5lKSB7CiAgICAgIC8vIEVsZW1lbnQgZXhpc3RzIHdpdGggaXNTY2VuZSBzZXQuCiAgICAgIG1hdGNoaW5nRWxlbWVudHMucHVzaChhbGxFbGVtZW50c1tpXSk7CiAgICB9CiAgfQogIHJldHVybiBtYXRjaGluZ0VsZW1lbnRzOwp9OwoKLy8gTXVzdCBiZSBhdCBib3R0b20gdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeS4KbW9kdWxlLmV4cG9ydHMuc3JjTG9hZGVyID0gX2RlcmVxXygnLi9zcmMtbG9hZGVyJyk7Cgp9LHsiLi9iaW5kIjoxNzYsIi4vY29vcmRpbmF0ZXMiOjE3NywiLi9kZWJ1ZyI6MTc4LCIuL2RldmljZSI6MTc5LCIuL2VudGl0eSI6MTgwLCIuL2ZvcmNlQ2FudmFzUmVzaXplU2FmYXJpTW9iaWxlIjoxODEsIi4vaXMtaWUxMSI6MTgzLCIuL21hdGVyaWFsIjoxODUsIi4vb2JqZWN0LXBvb2wiOjE4NiwiLi9zcGxpdCI6MTg3LCIuL3NyYy1sb2FkZXIiOjE4OCwiLi9zdHlsZVBhcnNlciI6MTg5LCIuL3RyYWNrZWQtY29udHJvbHMiOjE5MCwiZGVlcC1hc3NpZ24iOjEyLCJvYmplY3QtYXNzaWduIjoyN31dLDE4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNzkwNzU2MgpmdW5jdGlvbiBnZXRJbnRlcm5ldEV4cGxvcmVyVmVyc2lvbiAoKSB7CiAgdmFyIHZlcnNpb24gPSAtMTsKICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsKICB2YXIgcmU7CiAgaWYgKG5hdmlnYXRvci5hcHBOYW1lID09PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJykgewogICAgcmUgPSBuZXcgUmVnRXhwKCdNU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pJyk7CiAgICBpZiAocmUuZXhlYyh1c2VyQWdlbnQpICE9IG51bGwpIHsgdmVyc2lvbiA9IHBhcnNlRmxvYXQoUmVnRXhwLiQxKTsgfQogIH0gZWxzZSBpZiAobmF2aWdhdG9yLmFwcE5hbWUgPT09ICdOZXRzY2FwZScpIHsKICAgIHJlID0gbmV3IFJlZ0V4cCgnVHJpZGVudC8uKnJ2OihbMC05XXsxLH1bXFwuMC05XXswLH0pJyk7CiAgICBpZiAocmUuZXhlYyh1c2VyQWdlbnQpICE9IG51bGwpIHsgdmVyc2lvbiA9IHBhcnNlRmxvYXQoUmVnRXhwLiQxKTsgfQogIH0KICByZXR1cm4gdmVyc2lvbjsKfQoKbW9kdWxlLmV4cG9ydHMgPSBnZXRJbnRlcm5ldEV4cGxvcmVyVmVyc2lvbigpID09PSAxMTsKCn0se31dLDE4NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBDaGVjayBpZiBkZXZpY2UgaXMgaU9TIGFuZCBvbGRlciB0aGFuIHZlcnNpb24gMTAuCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSU9TT2xkZXJUaGFuMTAgKHVzZXJBZ2VudCkgewogIHJldHVybiAvKGlwaG9uZXxpcG9kfGlwYWQpLipvcy4oN198OF98OV8pL2kudGVzdCh1c2VyQWdlbnQpOwp9OwoKfSx7fV0sMTg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIFRIUkVFID0gX2RlcmVxXygnLi4vbGliL3RocmVlJyk7Cgp2YXIgSExTX01JTUVUWVBFUyA9IFsnYXBwbGljYXRpb24veC1tcGVndXJsJywgJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsJ107Cgp2YXIgQ09MT1JfTUFQUyA9IG5ldyBTZXQoWwogICdlbWlzc2l2ZU1hcCcsCiAgJ2Vudk1hcCcsCiAgJ21hcCcsCiAgJ3NwZWN1bGFyTWFwJwpdKTsKCi8qKgogKiBVcGRhdGUgYG1hdGVyaWFsYCB0ZXh0dXJlIHByb3BlcnR5ICh1c3VhbGx5IGJ1dCBub3QgYWx3YXlzIGBtYXBgKQogKiBmcm9tIGBkYXRhYCBwcm9wZXJ0eSAodXN1YWxseSBidXQgbm90IGFsd2F5cyBgc3JjYCkKICoKICogQHBhcmFtIHtvYmplY3R9IHNoYWRlciAtIEEtRnJhbWUgc2hhZGVyIGluc3RhbmNlLgogKiBAcGFyYW0ge29iamVjdH0gZGF0YQogKi8KbW9kdWxlLmV4cG9ydHMudXBkYXRlTWFwTWF0ZXJpYWxGcm9tRGF0YSA9IGZ1bmN0aW9uIChtYXRlcmlhbE5hbWUsIGRhdGFOYW1lLCBzaGFkZXIsIGRhdGEpIHsKICB2YXIgZWwgPSBzaGFkZXIuZWw7CiAgdmFyIG1hdGVyaWFsID0gc2hhZGVyLm1hdGVyaWFsOwogIHZhciByZW5kZXJlclN5c3RlbSA9IGVsLnNjZW5lRWwuc3lzdGVtcy5yZW5kZXJlcjsKICB2YXIgc3JjID0gZGF0YVtkYXRhTmFtZV07CgogIC8vIEJlY2F1c2UgYSBzaW5nbGUgbWF0ZXJpYWwgLyBzaGFkZXIgbWF5IGhhdmUgbXVsdGlwbGUgdGV4dHVyZXMsCiAgLy8gd2UgbmVlZCB0byByZW1lbWJlciB0aGUgc291cmNlIHZhbHVlIGZvciB0aGlzIGRhdGEgcHJvcGVydHkKICAvLyB0byBhdm9pZCByZWR1bmRhbnQgb3BlcmF0aW9ucyB3aGljaCBjYW4gYmUgZXhwZW5zaXZlIG90aGVyd2lzZQogIC8vIChlLmcuIHZpZGVvIHRleHR1cmUgbG9hZHMpLgogIGlmICghc2hhZGVyLm1hdGVyaWFsU3JjcykgeyBzaGFkZXIubWF0ZXJpYWxTcmNzID0ge307IH0KCiAgaWYgKCFzcmMpIHsKICAgIC8vIEZvcmdldCB0aGUgcHJpb3IgbWF0ZXJpYWwgc3JjLgogICAgZGVsZXRlIHNoYWRlci5tYXRlcmlhbFNyY3NbbWF0ZXJpYWxOYW1lXTsKICAgIC8vIFJlbW92ZSB0aGUgdGV4dHVyZS4KICAgIHNldE1hcChudWxsKTsKICAgIHJldHVybjsKICB9CgogIC8vIERvbid0IHByb2Nlc3MgaWYgbWF0ZXJpYWwgc3JjIGhhc24ndCBjaGFuZ2VkLgogIGlmIChzcmMgPT09IHNoYWRlci5tYXRlcmlhbFNyY3NbbWF0ZXJpYWxOYW1lXSkgeyByZXR1cm47IH0KCiAgLy8gUmVtZW1iZXIgdGhlIG5ldyBzcmMgZm9yIHRoaXMgdGV4dHVyZSAodGhlcmUgbWF5IGJlIG11bHRpcGxlKS4KICBzaGFkZXIubWF0ZXJpYWxTcmNzW21hdGVyaWFsTmFtZV0gPSBzcmM7CgogIC8vIElmIHRoZSBuZXcgbWF0ZXJpYWwgc3JjIGlzIGFscmVhZHkgYSB0ZXh0dXJlLCBqdXN0IHVzZSBpdC4KICBpZiAoc3JjIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZSkgeyBzZXRNYXAoc3JjKTsgfSBlbHNlIHsKICAgIC8vIExvYWQgdGV4dHVyZSBmb3IgdGhlIG5ldyBtYXRlcmlhbCBzcmMuCiAgICAvLyAoQW5kIGNoZWNrIGlmIHdlIHNob3VsZCBzdGlsbCB1c2UgaXQgb25jZSBhdmFpbGFibGUgaW4gY2FsbGJhY2suKQogICAgZWwuc2NlbmVFbC5zeXN0ZW1zLm1hdGVyaWFsLmxvYWRUZXh0dXJlKHNyYywKICAgICAge3NyYzogc3JjLCByZXBlYXQ6IGRhdGEucmVwZWF0LCBvZmZzZXQ6IGRhdGEub2Zmc2V0LCBucG90OiBkYXRhLm5wb3R9LAogICAgICBjaGVja1NldE1hcCk7CiAgfQoKICBmdW5jdGlvbiBjaGVja1NldE1hcCAodGV4dHVyZSkgewogICAgLy8gSWYgdGhlIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLCBkb24ndCB1c2UgbG9hZGVkIHRleHR1cmUuCiAgICBpZiAoc2hhZGVyLm1hdGVyaWFsU3Jjc1ttYXRlcmlhbE5hbWVdICE9PSBzcmMpIHsgcmV0dXJuOyB9CiAgICBzZXRNYXAodGV4dHVyZSk7CiAgfQoKICBmdW5jdGlvbiBzZXRNYXAgKHRleHR1cmUpIHsKICAgIG1hdGVyaWFsW21hdGVyaWFsTmFtZV0gPSB0ZXh0dXJlOwogICAgaWYgKHRleHR1cmUgJiYgQ09MT1JfTUFQUy5oYXMobWF0ZXJpYWxOYW1lKSkgewogICAgICByZW5kZXJlclN5c3RlbS5hcHBseUNvbG9yQ29ycmVjdGlvbih0ZXh0dXJlKTsKICAgIH0KICAgIG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTsKICAgIGhhbmRsZVRleHR1cmVFdmVudHMoZWwsIHRleHR1cmUpOwogIH0KfTsKCi8qKgogKiBVcGRhdGUgYG1hdGVyaWFsLm1hcGAgZ2l2ZW4gYGRhdGEuc3JjYC4gRm9yIHN0YW5kYXJkIGFuZCBmbGF0IHNoYWRlcnMuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBzaGFkZXIgLSBBLUZyYW1lIHNoYWRlciBpbnN0YW5jZS4KICogQHBhcmFtIHtvYmplY3R9IGRhdGEKICovCm1vZHVsZS5leHBvcnRzLnVwZGF0ZU1hcCA9IGZ1bmN0aW9uIChzaGFkZXIsIGRhdGEpIHsKICByZXR1cm4gbW9kdWxlLmV4cG9ydHMudXBkYXRlTWFwTWF0ZXJpYWxGcm9tRGF0YSgnbWFwJywgJ3NyYycsIHNoYWRlciwgZGF0YSk7Cn07CgovKioKICogVXBkYXRlcyB0aGUgbWF0ZXJpYWwncyBtYXBzIHdoaWNoIGdpdmUgdGhlIGlsbHVzaW9uIG9mIGV4dHJhIGdlb21ldHJ5LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbG9uZ1R5cGUgLSBUaGUgZnJpZW5kbHkgbmFtZSBvZiB0aGUgbWFwIGZyb20gdGhlIGNvbXBvbmVudCBlLmcuIGFtYmllbnRPY2NsdXNpb25NYXAgYmVjb21lcyBhb01hcCBpbiBUSFJFRS5qcwogKiBAcGFyYW0ge29iamVjdH0gc2hhZGVyIC0gQS1GcmFtZSBzaGFkZXIgaW5zdGFuY2UKICogQHBhcmFtIHtvYmplY3R9IGRhdGEKICovCm1vZHVsZS5leHBvcnRzLnVwZGF0ZURpc3RvcnRpb25NYXAgPSBmdW5jdGlvbiAobG9uZ1R5cGUsIHNoYWRlciwgZGF0YSkgewogIHZhciBzaG9ydFR5cGUgPSBsb25nVHlwZTsKICBpZiAobG9uZ1R5cGUgPT09ICdhbWJpZW50T2NjbHVzaW9uJykgeyBzaG9ydFR5cGUgPSAnYW8nOyB9CiAgdmFyIGVsID0gc2hhZGVyLmVsOwogIHZhciBtYXRlcmlhbCA9IHNoYWRlci5tYXRlcmlhbDsKICB2YXIgcmVuZGVyZXJTeXN0ZW0gPSBlbC5zY2VuZUVsLnN5c3RlbXMucmVuZGVyZXI7CiAgdmFyIHNyYyA9IGRhdGFbbG9uZ1R5cGUgKyAnTWFwJ107CiAgdmFyIGluZm8gPSB7fTsKICBpbmZvLnNyYyA9IHNyYzsKCiAgLy8gUGFzcyB0aHJvdWdoIHRoZSByZXBlYXQgYW5kIG9mZnNldCB0byBiZSBoYW5kbGVkIGJ5IHRoZSBtYXRlcmlhbCBsb2FkZXIuCiAgaW5mby5vZmZzZXQgPSBkYXRhW2xvbmdUeXBlICsgJ1RleHR1cmVPZmZzZXQnXTsKICBpbmZvLnJlcGVhdCA9IGRhdGFbbG9uZ1R5cGUgKyAnVGV4dHVyZVJlcGVhdCddOwogIGluZm8ud3JhcCA9IGRhdGFbbG9uZ1R5cGUgKyAnVGV4dHVyZVdyYXAnXTsKCiAgaWYgKHNyYykgewogICAgaWYgKHNyYyA9PT0gc2hhZGVyW2xvbmdUeXBlICsgJ1RleHR1cmVTcmMnXSkgeyByZXR1cm47IH0KCiAgICAvLyBUZXh0dXJlIGFkZGVkIG9yIGNoYW5nZWQuCiAgICBzaGFkZXJbbG9uZ1R5cGUgKyAnVGV4dHVyZVNyYyddID0gc3JjOwogICAgZWwuc2NlbmVFbC5zeXN0ZW1zLm1hdGVyaWFsLmxvYWRUZXh0dXJlKHNyYywgaW5mbywgc2V0TWFwKTsKICAgIHJldHVybjsKICB9CgogIC8vIFRleHR1cmUgcmVtb3ZlZC4KICBpZiAoIW1hdGVyaWFsLm1hcCkgeyByZXR1cm47IH0KICBzZXRNYXAobnVsbCk7CgogIGZ1bmN0aW9uIHNldE1hcCAodGV4dHVyZSkgewogICAgdmFyIHNsb3QgPSBzaG9ydFR5cGUgKyAnTWFwJzsKICAgIG1hdGVyaWFsW3Nsb3RdID0gdGV4dHVyZTsKICAgIGlmICh0ZXh0dXJlICYmIENPTE9SX01BUFMuaGFzKHNsb3QpKSB7CiAgICAgIHJlbmRlcmVyU3lzdGVtLmFwcGx5Q29sb3JDb3JyZWN0aW9uKHRleHR1cmUpOwogICAgfQogICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlOwogICAgaGFuZGxlVGV4dHVyZUV2ZW50cyhlbCwgdGV4dHVyZSk7CiAgfQp9OwoKLyoqCiAqIEVtaXQgZXZlbnQgb24gZW50aXRpZXMgb24gdGV4dHVyZS1yZWxhdGVkIGV2ZW50cy4KICoKICogQHBhcmFtIHtFbGVtZW50fSBlbCAtIEVudGl0eS4KICogQHBhcmFtIHtvYmplY3R9IHRleHR1cmUgLSB0aHJlZS5qcyBUZXh0dXJlLgogKi8KZnVuY3Rpb24gaGFuZGxlVGV4dHVyZUV2ZW50cyAoZWwsIHRleHR1cmUpIHsKICBpZiAoIXRleHR1cmUpIHsgcmV0dXJuOyB9CgogIGVsLmVtaXQoJ21hdGVyaWFsdGV4dHVyZWxvYWRlZCcsIHtzcmM6IHRleHR1cmUuaW1hZ2UsIHRleHR1cmU6IHRleHR1cmV9KTsKCiAgLy8gVmlkZW8gZXZlbnRzLgogIGlmICghdGV4dHVyZS5pbWFnZSB8fCB0ZXh0dXJlLmltYWdlLnRhZ05hbWUgIT09ICdWSURFTycpIHsgcmV0dXJuOyB9CgogIHRleHR1cmUuaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkZGF0YScsIGZ1bmN0aW9uIGVtaXRWaWRlb1RleHR1cmVMb2FkZWREYXRhQWxsICgpIHsKICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIHVzZSBpT1MgMTAgSExTIHNoYWRlci4KICAgIC8vIE9ubHkgb3ZlcnJpZGUgdGhlIHNoYWRlciBpZiBpdCBpcyBzdG9jayBzaGFkZXIgdGhhdCB3ZSBrbm93IGRvZXNuJ3QgY29ycmVjdC4KICAgIGlmICghZWwuY29tcG9uZW50cyB8fCAhZWwuY29tcG9uZW50cy5tYXRlcmlhbCkgeyByZXR1cm47IH0KCiAgICBpZiAodGV4dHVyZS5uZWVkc0NvcnJlY3Rpb25CR1JBICYmIHRleHR1cmUubmVlZHNDb3JyZWN0aW9uRmxpcFkgJiYKICAgICAgICBbJ3N0YW5kYXJkJywgJ2ZsYXQnXS5pbmRleE9mKGVsLmNvbXBvbmVudHMubWF0ZXJpYWwuZGF0YS5zaGFkZXIpICE9PSAtMSkgewogICAgICBlbC5zZXRBdHRyaWJ1dGUoJ21hdGVyaWFsJywgJ3NoYWRlcicsICdpb3MxMGhscycpOwogICAgfQoKICAgIGVsLmVtaXQoJ21hdGVyaWFsdmlkZW9sb2FkZWRkYXRhJywge3NyYzogdGV4dHVyZS5pbWFnZSwgdGV4dHVyZTogdGV4dHVyZX0pOwogIH0pOwogIHRleHR1cmUuaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBmdW5jdGlvbiBlbWl0VmlkZW9UZXh0dXJlRW5kZWRBbGwgKCkgewogICAgLy8gV29ya3MgZm9yIG5vbi1sb29waW5nIHZpZGVvcyBvbmx5LgogICAgZWwuZW1pdCgnbWF0ZXJpYWx2aWRlb2VuZGVkJywge3NyYzogdGV4dHVyZS5pbWFnZSwgdGV4dHVyZTogdGV4dHVyZX0pOwogIH0pOwp9Cm1vZHVsZS5leHBvcnRzLmhhbmRsZVRleHR1cmVFdmVudHMgPSBoYW5kbGVUZXh0dXJlRXZlbnRzOwoKLyoqCiAqIEdpdmVuIHZpZGVvIGVsZW1lbnQgc3JjIGFuZCB0eXBlLCBndWVzcyB3aGV0aGVyIHN0cmVhbSBpcyBITFMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSBzcmMgZnJvbSB2aWRlbyBlbGVtZW50IChnZW5lcmFsbHkgVVJMIHRvIGNvbnRlbnQpLgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIHR5cGUgZnJvbSB2aWRlbyBlbGVtZW50IChnZW5lcmFsbHkgTUlNRSB0eXBlIGlmIHByZXNlbnQpLgogKi8KbW9kdWxlLmV4cG9ydHMuaXNITFMgPSBmdW5jdGlvbiAoc3JjLCB0eXBlKSB7CiAgaWYgKHR5cGUgJiYgSExTX01JTUVUWVBFUy5pbmNsdWRlcyh0eXBlLnRvTG93ZXJDYXNlKCkpKSB7IHJldHVybiB0cnVlOyB9CiAgaWYgKHNyYyAmJiBzcmMudG9Mb3dlckNhc2UoKS5pbmRleE9mKCcubTN1OCcpID4gMCkgeyByZXR1cm4gdHJ1ZTsgfQogIHJldHVybiBmYWxzZTsKfTsKCn0seyIuLi9saWIvdGhyZWUiOjE1N31dLDE4NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAgQWRhcHRlZCBkZWVQb29sIGJ5IEt5bGUgU2ltcHNvbi4KICBNSVQgTGljZW5zZTogaHR0cDovL2dldGlmeS5taXQtbGljZW5zZS5vcmcKKi8KdmFyIEVNUFRZX1NMT1QgPSBPYmplY3QuZnJlZXplKE9iamVjdC5jcmVhdGUobnVsbCkpOwoKLy8gRGVmYXVsdCBvYmplY3QgZmFjdG9yeS4KZnVuY3Rpb24gZGVmYXVsdE9iamVjdEZhY3RvcnkgKCkgeyByZXR1cm4ge307IH0KCi8qKgogKiBDcmVhdGUgYSBuZXcgcG9vbC4KICovCm1vZHVsZS5leHBvcnRzLmNyZWF0ZVBvb2wgPSBmdW5jdGlvbiBjcmVhdGVQb29sIChvYmplY3RGYWN0b3J5KSB7CiAgdmFyIG9ialBvb2wgPSBbXTsKICB2YXIgbmV4dEZyZWVTbG90ID0gbnVsbDsgIC8vIFBvb2wgbG9jYXRpb24gdG8gbG9vayBmb3IgYSBmcmVlIG9iamVjdCB0byB1c2UuCgogIG9iamVjdEZhY3RvcnkgPSBvYmplY3RGYWN0b3J5IHx8IGRlZmF1bHRPYmplY3RGYWN0b3J5OwoKICBmdW5jdGlvbiB1c2UgKCkgewogICAgdmFyIG9ialRvVXNlOwogICAgaWYgKG5leHRGcmVlU2xvdCA9PT0gbnVsbCB8fCBuZXh0RnJlZVNsb3QgPT09IG9ialBvb2wubGVuZ3RoKSB7CiAgICAgIGdyb3cob2JqUG9vbC5sZW5ndGggfHwgNSk7CiAgICB9CiAgICBvYmpUb1VzZSA9IG9ialBvb2xbbmV4dEZyZWVTbG90XTsKICAgIG9ialBvb2xbbmV4dEZyZWVTbG90KytdID0gRU1QVFlfU0xPVDsKICAgIGNsZWFyT2JqZWN0KG9ialRvVXNlKTsKICAgIHJldHVybiBvYmpUb1VzZTsKICB9CgogIGZ1bmN0aW9uIHJlY3ljbGUgKG9iaikgewogICAgaWYgKCEob2JqIGluc3RhbmNlb2YgT2JqZWN0KSkgeyByZXR1cm47IH0KICAgIGlmIChuZXh0RnJlZVNsb3QgPT09IG51bGwgfHwgbmV4dEZyZWVTbG90ID09PSAtMSkgewogICAgICBvYmpQb29sW29ialBvb2wubGVuZ3RoXSA9IG9iajsKICAgICAgcmV0dXJuOwogICAgfQogICAgb2JqUG9vbFstLW5leHRGcmVlU2xvdF0gPSBvYmo7CiAgfQoKICBmdW5jdGlvbiBncm93IChjb3VudCkgewogICAgdmFyIGN1cnJlbnRMZW5ndGg7CiAgICB2YXIgaTsKCiAgICBjb3VudCA9IGNvdW50ID09PSB1bmRlZmluZWQgPyBvYmpQb29sLmxlbmd0aCA6IGNvdW50OwogICAgaWYgKGNvdW50ID4gMCAmJiBuZXh0RnJlZVNsb3QgPT0gbnVsbCkgewogICAgICBuZXh0RnJlZVNsb3QgPSAwOwogICAgfQoKICAgIGlmIChjb3VudCA+IDApIHsKICAgICAgY3VycmVudExlbmd0aCA9IG9ialBvb2wubGVuZ3RoOwogICAgICBvYmpQb29sLmxlbmd0aCArPSBOdW1iZXIoY291bnQpOwogICAgICBmb3IgKGkgPSBjdXJyZW50TGVuZ3RoOyBpIDwgb2JqUG9vbC5sZW5ndGg7IGkrKykgewogICAgICAgIC8vIEFkZCBuZXcgb2JqIHRvIHBvb2wuCiAgICAgICAgb2JqUG9vbFtpXSA9IG9iamVjdEZhY3RvcnkoKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBvYmpQb29sLmxlbmd0aDsKICB9CgogIGZ1bmN0aW9uIHNpemUgKCkgewogICAgcmV0dXJuIG9ialBvb2wubGVuZ3RoOwogIH0KCiAgcmV0dXJuIHsKICAgIGdyb3c6IGdyb3csCiAgICBwb29sOiBvYmpQb29sLAogICAgcmVjeWNsZTogcmVjeWNsZSwKICAgIHNpemU6IHNpemUsCiAgICB1c2U6IHVzZQogIH07Cn07CgpmdW5jdGlvbiBjbGVhck9iamVjdCAob2JqKSB7CiAgdmFyIGtleTsKICBpZiAoIW9iaiB8fCBvYmouY29uc3RydWN0b3IgIT09IE9iamVjdCkgeyByZXR1cm47IH0KICBmb3IgKGtleSBpbiBvYmopIHsgb2JqW2tleV0gPSB1bmRlZmluZWQ7IH0KfQptb2R1bGUuZXhwb3J0cy5jbGVhck9iamVjdCA9IGNsZWFyT2JqZWN0OwoKZnVuY3Rpb24gcmVtb3ZlVW51c2VkS2V5cyAob2JqLCBzY2hlbWEpIHsKICB2YXIga2V5OwogIGlmICghb2JqIHx8IG9iai5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7IHJldHVybjsgfQogIGZvciAoa2V5IGluIG9iaikgewogICAgaWYgKCEoa2V5IGluIHNjaGVtYSkpIHsKICAgICAgZGVsZXRlIG9ialtrZXldOwogICAgfQogIH0KfQptb2R1bGUuZXhwb3J0cy5yZW1vdmVVbnVzZWRLZXlzID0gcmVtb3ZlVW51c2VkS2V5czsKCn0se31dLDE4NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBTdHJpbmcgc3BsaXQgd2l0aCBjYWNoZWQgcmVzdWx0LgogKi8KbW9kdWxlLmV4cG9ydHMuc3BsaXQgPSAoZnVuY3Rpb24gKCkgewogIHZhciBzcGxpdENhY2hlID0ge307CgogIHJldHVybiBmdW5jdGlvbiAoc3RyLCBkZWxpbWl0ZXIpIHsKICAgIGlmICghKGRlbGltaXRlciBpbiBzcGxpdENhY2hlKSkgeyBzcGxpdENhY2hlW2RlbGltaXRlcl0gPSB7fTsgfQoKICAgIGlmIChzdHIgaW4gc3BsaXRDYWNoZVtkZWxpbWl0ZXJdKSB7IHJldHVybiBzcGxpdENhY2hlW2RlbGltaXRlcl1bc3RyXTsgfQoKICAgIHNwbGl0Q2FjaGVbZGVsaW1pdGVyXVtzdHJdID0gc3RyLnNwbGl0KGRlbGltaXRlcik7CiAgICByZXR1cm4gc3BsaXRDYWNoZVtkZWxpbWl0ZXJdW3N0cl07CiAgfTsKfSkoKTsKCn0se31dLDE4ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qIGdsb2JhbCBJbWFnZSwgWE1MSHR0cFJlcXVlc3QgKi8KdmFyIGRlYnVnID0gX2RlcmVxXygnLi9kZWJ1ZycpOwoKdmFyIHdhcm4gPSBkZWJ1ZygndXRpbHM6c3JjLWxvYWRlcjp3YXJuJyk7CgovKioKICogVmFsaWRhdGUgYSB0ZXh0dXJlLCBlaXRoZXIgYXMgYSBzZWxlY3RvciBvciBhcyBhIFVSTC4KICogRGV0ZWN0cyB3aGV0aGVyIGBzcmNgIGlzIHBvaW50aW5nIHRvIGFuIGltYWdlIG9yIHZpZGVvIGFuZCBpbnZva2VzIHRoZSBhcHByb3ByaWF0ZQogKiBjYWxsYmFjay4KICoKICogYHNyY2Agd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2sKICoKICogQHBhcmFtcyB7c3RyaW5nfEVsZW1lbnR9IHNyYyAtIFVSTCBvciBtZWRpYSBlbGVtZW50LgogKiBAcGFyYW1zIHtmdW5jdGlvbn0gaXNJbWFnZUNiIC0gY2FsbGJhY2sgaWYgdGV4dHVyZSBpcyBhbiBpbWFnZS4KICogQHBhcmFtcyB7ZnVuY3Rpb259IGlzVmlkZW9DYiAtIGNhbGxiYWNrIGlmIHRleHR1cmUgaXMgYSB2aWRlby4KICovCmZ1bmN0aW9uIHZhbGlkYXRlU3JjIChzcmMsIGlzSW1hZ2VDYiwgaXNWaWRlb0NiKSB7CiAgY2hlY2tJc0ltYWdlKHNyYywgZnVuY3Rpb24gaXNBbkltYWdlVXJsIChpc0ltYWdlKSB7CiAgICBpZiAoaXNJbWFnZSkgewogICAgICBpc0ltYWdlQ2Ioc3JjKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgaXNWaWRlb0NiKHNyYyk7CiAgfSk7Cn0KCi8qKgogKiBWYWxpZGF0ZXMgc2l4IGltYWdlcyBhcyBhIGN1YmVtYXAsIGVpdGhlciBhcyBzZWxlY3RvciBvciBjb21tYS1zZXBhcmF0ZWQKICogVVJMcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IHNyYyAtIEEgc2VsZWN0b3Igb3IgY29tbWEtc2VwYXJhdGVkIGltYWdlIFVSTHMuIEltYWdlIFVSTHMKICAgICAgICAgIG11c3QgYmUgd3JhcHBlZCBieSBgdXJsKClgLgogKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gQSBzZWxlY3RvciBvciBjb21tYS1zZXBhcmF0ZWQgaW1hZ2UgVVJMcy4gSW1hZ2UgVVJMcwogICAgICAgICAgbXVzdCBiZSB3cmFwcGVkIGJ5IGB1cmwoKWAuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUN1YmVtYXBTcmMgKHNyYywgY2IpIHsKICB2YXIgYUN1YmVtYXA7CiAgdmFyIGN1YmVtYXBTcmNSZWdleCA9ICcnOwogIHZhciBpOwogIHZhciB1cmxzOwogIHZhciB2YWxpZGF0ZWRVcmxzID0gW107CgogIGZvciAoaSA9IDA7IGkgPCA1OyBpKyspIHsKICAgIGN1YmVtYXBTcmNSZWdleCArPSAnKHVybFxcKCg/OlteXFwpXSspXFwpLFxccyopJzsKICB9CiAgY3ViZW1hcFNyY1JlZ2V4ICs9ICcodXJsXFwoKD86W15cXCldKylcXClcXHMqKSc7CiAgdXJscyA9IHNyYy5tYXRjaChuZXcgUmVnRXhwKGN1YmVtYXBTcmNSZWdleCkpOwoKICAvLyBgc3JjYCBpcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIFVSTHMuCiAgLy8gSW4gdGhpcyBjYXNlLCByZS11c2UgdmFsaWRhdGVTcmMgZm9yIGVhY2ggc2lkZSBvZiB0aGUgY3ViZS4KICBmdW5jdGlvbiBpc0ltYWdlQ2IgKHVybCkgewogICAgdmFsaWRhdGVkVXJscy5wdXNoKHVybCk7CiAgICBpZiAodmFsaWRhdGVkVXJscy5sZW5ndGggPT09IDYpIHsKICAgICAgY2IodmFsaWRhdGVkVXJscyk7CiAgICB9CiAgfQogIGlmICh1cmxzKSB7CiAgICBmb3IgKGkgPSAxOyBpIDwgNzsgaSsrKSB7CiAgICAgIHZhbGlkYXRlU3JjKHBhcnNlVXJsKHVybHNbaV0pLCBpc0ltYWdlQ2IpOwogICAgfQogICAgcmV0dXJuOwogIH0KCiAgLy8gYHNyY2AgaXMgYSBxdWVyeSBzZWxlY3RvciB0byA8YS1jdWJlbWFwPiBjb250YWluaW5nIHNpeCAkKFtzcmNdKXMuCiAgYUN1YmVtYXAgPSB2YWxpZGF0ZUFuZEdldFF1ZXJ5U2VsZWN0b3Ioc3JjKTsKICBpZiAoIWFDdWJlbWFwKSB7IHJldHVybjsgfQogIGlmIChhQ3ViZW1hcC50YWdOYW1lID09PSAnQS1DVUJFTUFQJyAmJiBhQ3ViZW1hcC5zcmNzKSB7CiAgICByZXR1cm4gY2IoYUN1YmVtYXAuc3Jjcyk7CiAgfQogIC8vIEVsc2UgaWYgYUN1YmVNYXAgaXMgbm90IGEgPGEtY3ViZW1hcD4uCiAgd2FybignU2VsZWN0b3IgIiVzIiBkb2VzIG5vdCBwb2ludCB0byA8YS1jdWJlbWFwPicsIHNyYyk7Cn0KCi8qKgogKiBQYXJzZXMgc3JjIGZyb20gYHVybChzcmMpYC4KICogQHBhcmFtICB7c3RyaW5nfSBzcmMgLSBTdHJpbmcgdG8gcGFyc2UuCiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhcnNlZCBzcmMsIGlmIHBhcnNlYWJsZS4KICovCmZ1bmN0aW9uIHBhcnNlVXJsIChzcmMpIHsKICB2YXIgcGFyc2VkU3JjID0gc3JjLm1hdGNoKC9cdXJsXCgoLispXCkvKTsKICBpZiAoIXBhcnNlZFNyYykgeyByZXR1cm47IH0KICByZXR1cm4gcGFyc2VkU3JjWzFdOwp9CgovKioKICogQ2FsbCBiYWNrIHdoZXRoZXIgYHNyY2AgaXMgYW4gaW1hZ2UuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IHNyYyAtIFVSTCBvciBlbGVtZW50IHRoYXQgd2lsbCBiZSB0ZXN0ZWQuCiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uUmVzdWx0IC0gQ2FsbGJhY2sgd2l0aCB3aGV0aGVyIGBzcmNgIGlzIGFuIGltYWdlLgogKi8KZnVuY3Rpb24gY2hlY2tJc0ltYWdlIChzcmMsIG9uUmVzdWx0KSB7CiAgdmFyIHJlcXVlc3Q7CgogIGlmIChzcmMudGFnTmFtZSkgewogICAgb25SZXN1bHQoc3JjLnRhZ05hbWUgPT09ICdJTUcnKTsKICAgIHJldHVybjsKICB9CiAgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAvLyBUcnkgdG8gc2VuZCBIRUFEIHJlcXVlc3QgdG8gY2hlY2sgaWYgaW1hZ2UgZmlyc3QuCiAgcmVxdWVzdC5vcGVuKCdIRUFEJywgc3JjKTsKICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgIHZhciBjb250ZW50VHlwZTsKICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA+PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgPCAzMDApIHsKICAgICAgY29udGVudFR5cGUgPSByZXF1ZXN0LmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTsKICAgICAgaWYgKGNvbnRlbnRUeXBlID09IG51bGwpIHsKICAgICAgICBjaGVja0lzSW1hZ2VGYWxsYmFjayhzcmMsIG9uUmVzdWx0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoY29udGVudFR5cGUuc3RhcnRzV2l0aCgnaW1hZ2UnKSkgewogICAgICAgICAgb25SZXN1bHQodHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9uUmVzdWx0KGZhbHNlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNoZWNrSXNJbWFnZUZhbGxiYWNrKHNyYywgb25SZXN1bHQpOwogICAgfQogICAgcmVxdWVzdC5hYm9ydCgpOwogIH0pOwogIHJlcXVlc3Quc2VuZCgpOwp9CgpmdW5jdGlvbiBjaGVja0lzSW1hZ2VGYWxsYmFjayAoc3JjLCBvblJlc3VsdCkgewogIHZhciB0ZXN0ZXIgPSBuZXcgSW1hZ2UoKTsKICB0ZXN0ZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7CiAgZnVuY3Rpb24gb25Mb2FkICgpIHsgb25SZXN1bHQodHJ1ZSk7IH0KICB0ZXN0ZXIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTsKICBmdW5jdGlvbiBvbkVycm9yICgpIHsgb25SZXN1bHQoZmFsc2UpOyB9CiAgdGVzdGVyLnNyYyA9IHNyYzsKfQoKLyoqCiAqIFF1ZXJ5IGFuZCB2YWxpZGF0ZSBhIHF1ZXJ5IHNlbGVjdG9yLAogKgogKiBAcGFyYW0gIHtzdHJpbmd9IHNlbGVjdG9yIC0gRE9NIHNlbGVjdG9yLgogKiBAcmV0dXJuIHtvYmplY3R8bnVsbHx1bmRlZmluZWR9IFNlbGVjdGVkIERPTSBlbGVtZW50IGlmIGV4aXN0cy4KICAgICAgICAgICBudWxsIGlmIHF1ZXJ5IHlpZWxkcyBubyByZXN1bHRzLgogICAgICAgICAgIHVuZGVmaW5lZCBpZiBgc2VsZWN0b3JgIGlzIG5vdCBhIHZhbGlkIHNlbGVjdG9yLgogKi8KZnVuY3Rpb24gdmFsaWRhdGVBbmRHZXRRdWVyeVNlbGVjdG9yIChzZWxlY3RvcikgewogIHRyeSB7CiAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICAgIGlmICghZWwpIHsKICAgICAgd2FybignTm8gZWxlbWVudCB3YXMgZm91bmQgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yOiAiJXMiJywgc2VsZWN0b3IpOwogICAgfQogICAgcmV0dXJuIGVsOwogIH0gY2F0Y2ggKGUpIHsgIC8vIENhcHR1cmUgZXhjZXB0aW9uIGlmIGl0J3Mgbm90IGEgdmFsaWQgc2VsZWN0b3IuCiAgICB3YXJuKCciJXMiIGlzIG5vdCBhIHZhbGlkIHNlbGVjdG9yJywgc2VsZWN0b3IpOwogICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIHBhcnNlVXJsOiBwYXJzZVVybCwKICB2YWxpZGF0ZVNyYzogdmFsaWRhdGVTcmMsCiAgdmFsaWRhdGVDdWJlbWFwU3JjOiB2YWxpZGF0ZUN1YmVtYXBTcmMKfTsKCn0seyIuL2RlYnVnIjoxNzh9XSwxODk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKioKICogVXRpbHMgZm9yIHBhcnNpbmcgc3R5bGUtbGlrZSBzdHJpbmdzIChlLmcuLCAicHJpbWl0aXZlOiBib3g7IHdpZHRoOiA1OyBoZWlnaHQ6IDQuNSIpLgogKiBTb21lIGNvZGUgYWRhcHRlZCBmcm9tIGBzdHlsZS1hdHRyYCAoaHR0cHM6Ly9naXRodWIuY29tL2pvc2h3bmovc3R5bGUtYXR0cikKICogYnkgSm9zaCBKb2huc3RvbiAoTUlUIExpY2Vuc2UpLgogKi8KdmFyIERBU0hfUkVHRVggPSAvLShbYS16XSkvZzsKCi8qKgogKiBEZXNlcmlhbGl6ZSBzdHlsZS1saWtlIHN0cmluZyBpbnRvIGFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBIVE1MIGF0dHJpYnV0ZSB2YWx1ZS4KICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIFJldXNlZCBvYmplY3QgZm9yIG9iamVjdCBwb29saW5nLgogKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9wZXJ0eSBkYXRhLgogKi8KbW9kdWxlLmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAodmFsdWUsIG9iaikgewogIHZhciBwYXJzZWREYXRhOwogIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7IHJldHVybiB2YWx1ZTsgfQogIHBhcnNlZERhdGEgPSBzdHlsZVBhcnNlKHZhbHVlLCBvYmopOwogIC8vIFRoZSBzdHlsZSBwYXJzZXIgcmV0dXJucyBhbiBvYmplY3QgeyAiIiA6ICJ0ZXN0In0gd2hlbiBmZWQgYSBzdHJpbmcKICBpZiAocGFyc2VkRGF0YVsnJ10pIHsgcmV0dXJuIHZhbHVlOyB9CiAgcmV0dXJuIHRyYW5zZm9ybUtleXNUb0NhbWVsQ2FzZShwYXJzZWREYXRhKTsKfTsKCi8qKgogKiBTZXJpYWxpemUgYW4gb2JqZWN0IG9mIHByb3BlcnRpZXMgaW50byBhIHN0eWxlLWxpa2Ugc3RyaW5nLgogKgogKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFByb3BlcnR5IGRhdGEuCiAqIEByZXR1cm5zIHtzdHJpbmd9CiAqLwptb2R1bGUuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoZGF0YSkgewogIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGRhdGE7IH0KICByZXR1cm4gc3R5bGVTdHJpbmdpZnkoZGF0YSk7Cn07CgovKioKICogQ29udmVydHMgc3RyaW5nIGZyb20gaHlwaGVuIHRvIGNhbWVsQ2FzZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFN0cmluZyB0byBjYW1lbENhc2UuCiAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWxDYXNlZCBzdHJpbmcuCiAqLwpmdW5jdGlvbiB0b0NhbWVsQ2FzZSAoc3RyKSB7CiAgcmV0dXJuIHN0ci5yZXBsYWNlKERBU0hfUkVHRVgsIHVwcGVyQ2FzZSk7Cn0KbW9kdWxlLmV4cG9ydHMudG9DYW1lbENhc2UgPSB0b0NhbWVsQ2FzZTsKCi8qKgogKiBDb252ZXJ0cyBvYmplY3QncyBrZXlzIGZyb20gaHlwaGVucyB0byBjYW1lbENhc2UgKGUuZy4sIGBtYXgtdmFsdWVgIHRvCiAqIGBtYXhWYWx1ZWApLgogKgogKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdCB0byBjYW1lbENhc2Uga2V5cy4KICogQHJldHVybiB7b2JqZWN0fSBUaGUgb2JqZWN0IHdpdGgga2V5cyBjYW1lbENhc2VkLgogKi8KZnVuY3Rpb24gdHJhbnNmb3JtS2V5c1RvQ2FtZWxDYXNlIChvYmopIHsKICB2YXIgY2FtZWxLZXk7CiAgdmFyIGtleTsKICBmb3IgKGtleSBpbiBvYmopIHsKICAgIGNhbWVsS2V5ID0gdG9DYW1lbENhc2Uoa2V5KTsKICAgIGlmIChrZXkgPT09IGNhbWVsS2V5KSB7IGNvbnRpbnVlOyB9CiAgICBvYmpbY2FtZWxLZXldID0gb2JqW2tleV07CiAgICBkZWxldGUgb2JqW2tleV07CiAgfQogIHJldHVybiBvYmo7Cn0KbW9kdWxlLmV4cG9ydHMudHJhbnNmb3JtS2V5c1RvQ2FtZWxDYXNlID0gdHJhbnNmb3JtS2V5c1RvQ2FtZWxDYXNlOwoKLyoqCiAqIFNwbGl0IGEgc3RyaW5nIGludG8gY2h1bmtzIG1hdGNoaW5nIGA8a2V5PjogPHZhbHVlPmAKICovCnZhciBnZXRLZXlWYWx1ZUNodW5rcyA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIGNodW5rcyA9IFtdOwogIHZhciBoYXNVbmNsb3NlZFVybCA9IC91cmxcKFteKV0rJC87CgogIHJldHVybiBmdW5jdGlvbiBnZXRLZXlWYWx1ZUNodW5rcyAocmF3KSB7CiAgICB2YXIgY2h1bmsgPSAnJzsKICAgIHZhciBuZXh0U3BsaXQ7CiAgICB2YXIgb2Zmc2V0ID0gMDsKICAgIHZhciBzZXAgPSAnOyc7CgogICAgY2h1bmtzLmxlbmd0aCA9IDA7CgogICAgd2hpbGUgKG9mZnNldCA8IHJhdy5sZW5ndGgpIHsKICAgICAgbmV4dFNwbGl0ID0gcmF3LmluZGV4T2Yoc2VwLCBvZmZzZXQpOwogICAgICBpZiAobmV4dFNwbGl0ID09PSAtMSkgeyBuZXh0U3BsaXQgPSByYXcubGVuZ3RoOyB9CgogICAgICBjaHVuayArPSByYXcuc3Vic3RyaW5nKG9mZnNldCwgbmV4dFNwbGl0KTsKCiAgICAgIC8vIGRhdGEgVVJJcyBjYW4gY29udGFpbiBzZW1pY29sb25zLCBzbyBtYWtlIHN1cmUgd2UgZ2V0IHRoZSB3aG9sZSB0aGluZwogICAgICBpZiAoaGFzVW5jbG9zZWRVcmwudGVzdChjaHVuaykpIHsKICAgICAgICBjaHVuayArPSAnOyc7CiAgICAgICAgb2Zmc2V0ID0gbmV4dFNwbGl0ICsgMTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgY2h1bmtzLnB1c2goY2h1bmsudHJpbSgpKTsKICAgICAgY2h1bmsgPSAnJzsKICAgICAgb2Zmc2V0ID0gbmV4dFNwbGl0ICsgMTsKICAgIH0KCiAgICByZXR1cm4gY2h1bmtzOwogIH07Cn0pKCk7CgovKioKICogQ29udmVydCBhIHN0eWxlIGF0dHJpYnV0ZSBzdHJpbmcgdG8gYW4gb2JqZWN0LgogKgogKiBAcGFyYW0ge29iamVjdH0gc3RyIC0gQXR0cmlidXRlIHN0cmluZy4KICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIE9iamVjdCB0byByZXVzZSBhcyBhIGJhc2UsIGVsc2UgYSBuZXcgb25lIHdpbGwgYmUgYWxsb2NhdGVkLgogKi8KZnVuY3Rpb24gc3R5bGVQYXJzZSAoc3RyLCBvYmopIHsKICB2YXIgY2h1bmtzOwogIHZhciBpOwogIHZhciBpdGVtOwogIHZhciBwb3M7CiAgdmFyIGtleTsKICB2YXIgdmFsOwoKICBvYmogPSBvYmogfHwge307CgogIGNodW5rcyA9IGdldEtleVZhbHVlQ2h1bmtzKHN0cik7CiAgZm9yIChpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykgewogICAgaXRlbSA9IGNodW5rc1tpXTsKICAgIGlmICghaXRlbSkgeyBjb250aW51ZTsgfQogICAgLy8gU3BsaXQgd2l0aCBgLmluZGV4T2ZgIHJhdGhlciB0aGFuIGAuc3BsaXRgIGJlY2F1c2UgdGhlIHZhbHVlIG1heSBhbHNvIGNvbnRhaW4gY29sb25zLgogICAgcG9zID0gaXRlbS5pbmRleE9mKCc6Jyk7CiAgICBrZXkgPSBpdGVtLnN1YnN0cigwLCBwb3MpLnRyaW0oKTsKICAgIHZhbCA9IGl0ZW0uc3Vic3RyKHBvcyArIDEpLnRyaW0oKTsKICAgIG9ialtrZXldID0gdmFsOwogIH0KICByZXR1cm4gb2JqOwp9CgovKioKICogQ29udmVydCBhbiBvYmplY3QgaW50byBhbiBhdHRyaWJ1dGUgc3RyaW5nCiAqKi8KZnVuY3Rpb24gc3R5bGVTdHJpbmdpZnkgKG9iaikgewogIHZhciBrZXk7CiAgdmFyIGtleUNvdW50ID0gMDsKICB2YXIgaSA9IDA7CiAgdmFyIHN0ciA9ICcnOwoKICBmb3IgKGtleSBpbiBvYmopIHsga2V5Q291bnQrKzsgfQoKICBmb3IgKGtleSBpbiBvYmopIHsKICAgIHN0ciArPSAoa2V5ICsgJzogJyArIG9ialtrZXldKTsKICAgIGlmIChpIDwga2V5Q291bnQgLSAxKSB7IHN0ciArPSAnOyAnOyB9CiAgICBpKys7CiAgfQogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIHVwcGVyQ2FzZSAoc3RyKSB7IHJldHVybiBzdHJbMV0udG9VcHBlckNhc2UoKTsgfQoKfSx7fV0sMTkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIERFRkFVTFRfSEFOREVETkVTUyA9IF9kZXJlcV8oJy4uL2NvbnN0YW50cycpLkRFRkFVTFRfSEFOREVETkVTUzsKdmFyIEFYSVNfTEFCRUxTID0gWyd4JywgJ3knLCAneicsICd3J107CnZhciBOVU1fSEFORFMgPSAyOyAgLy8gTnVtYmVyIG9mIGhhbmRzIGluIGEgcGFpci4gU2hvdWxkIGFsd2F5cyBiZSAyLgoKLyoqCiAqIENhbGxlZCBvbiBjb250cm9sbGVyIGNvbXBvbmVudCBgLnBsYXlgIGhhbmRsZXJzLgogKiBDaGVjayBpZiBjb250cm9sbGVyIG1hdGNoZXMgcGFyYW1ldGVycyBhbmQgaW5qZWN0IHRyYWNrZWQtY29udHJvbHMgY29tcG9uZW50LgogKiBIYW5kbGUgZXZlbnQgbGlzdGVuZXJzLgogKiBHZW5lcmF0ZSBjb250cm9sbGVyY29ubmVjdGVkIG9yIGNvbnRyb2xsZXJkaXNjb25uZWN0ZWQgZXZlbnRzLgogKgogKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IC0gVHJhY2tlZCBjb250cm9scyBjb21wb25lbnQuCiAqIEBwYXJhbSB7b2JqZWN0fSBpZFByZWZpeCAtIFByZWZpeCB0byBtYXRjaCBpbiBnYW1lcGFkIGlkIGlmIGFueS4KICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5T2JqZWN0IC0gTWFwIG9mIHZhbHVlcyB0byBtYXRjaC4KICovCm1vZHVsZS5leHBvcnRzLmNoZWNrQ29udHJvbGxlclByZXNlbnRBbmRTZXR1cCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGlkUHJlZml4LCBxdWVyeU9iamVjdCkgewogIHZhciBlbCA9IGNvbXBvbmVudC5lbDsKICB2YXIgY29udHJvbGxlcjsKICB2YXIgaGFzV2ViWFIgPSBlbC5zY2VuZUVsLmhhc1dlYlhSOwogIHZhciBpc0NvbnRyb2xsZXJQcmVzZW50ID0gaGFzV2ViWFIgPyBpc0NvbnRyb2xsZXJQcmVzZW50V2ViWFIgOiBpc0NvbnRyb2xsZXJQcmVzZW50V2ViVlI7CiAgdmFyIGlzUHJlc2VudDsKCiAgY29udHJvbGxlciA9IGlzQ29udHJvbGxlclByZXNlbnQoY29tcG9uZW50LCBpZFByZWZpeCwgcXVlcnlPYmplY3QpOwogIGlzUHJlc2VudCA9ICEhY29udHJvbGxlcjsKCiAgLy8gSWYgY29tcG9uZW50IHdhcyBwcmV2aW91c2x5IHBhdXNlZCBhbmQgbm93IHBsYXlpbmcsIHJlLWFkZCBldmVudCBsaXN0ZW5lcnMuCiAgLy8gSGFuZGxlIHRoZSBldmVudCBsaXN0ZW5lcnMgaGVyZSBzaW5jZSB0aGlzIGhlbHBlciBtZXRob2QgaXMgY29udHJvbCBvZiBjYWxsaW5nCiAgLy8gYC5hZGRFdmVudExpc3RlbmVyc2AgYW5kIGAucmVtb3ZlRXZlbnRMaXN0ZW5lcnNgLgogIGlmIChjb21wb25lbnQuY29udHJvbGxlclByZXNlbnQgJiYgIWNvbXBvbmVudC5jb250cm9sbGVyRXZlbnRzQWN0aXZlICYmICFoYXNXZWJYUikgewogICAgY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXJzKCk7CiAgfQoKICAvLyBOb3RoaW5nIGNoYW5nZWQsIG5vIG5lZWQgdG8gZG8gYW55dGhpbmcuCiAgaWYgKGlzUHJlc2VudCA9PT0gY29tcG9uZW50LmNvbnRyb2xsZXJQcmVzZW50KSB7IHJldHVybiBpc1ByZXNlbnQ7IH0KCiAgY29tcG9uZW50LmNvbnRyb2xsZXJQcmVzZW50ID0gaXNQcmVzZW50OwoKICAvLyBVcGRhdGUgY29udHJvbGxlciBwcmVzZW5jZS4KICBpZiAoaXNQcmVzZW50KSB7CiAgICBjb21wb25lbnQuaW5qZWN0VHJhY2tlZENvbnRyb2xzKCk7CiAgICBjb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcnMoKTsKICAgIGVsLmVtaXQoJ2NvbnRyb2xsZXJjb25uZWN0ZWQnLCB7bmFtZTogY29tcG9uZW50Lm5hbWUsIGNvbXBvbmVudDogY29tcG9uZW50fSk7CiAgfSBlbHNlIHsKICAgIGNvbXBvbmVudC5yZW1vdmVFdmVudExpc3RlbmVycygpOwogICAgZWwuZW1pdCgnY29udHJvbGxlcmRpc2Nvbm5lY3RlZCcsIHtuYW1lOiBjb21wb25lbnQubmFtZSwgY29tcG9uZW50OiBjb21wb25lbnR9KTsKICB9Cn07CgovKioKICogRW51bWVyYXRlIGNvbnRyb2xsZXIgKHRoYXQgaGF2ZSBwb3NlKSBhbmQgY2hlY2sgaWYgdGhleSBtYXRjaCBwYXJhbWV0ZXJzIGZvciBXZWJWUgogKgogKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IC0gVHJhY2tlZCBjb250cm9scyBjb21wb25lbnQuCiAqIEBwYXJhbSB7b2JqZWN0fSBpZFByZWZpeCAtIFByZWZpeCB0byBtYXRjaCBpbiBnYW1lcGFkIGlkIGlmIGFueS4KICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5T2JqZWN0IC0gTWFwIG9mIHZhbHVlcyB0byBtYXRjaC4KICovCmZ1bmN0aW9uIGlzQ29udHJvbGxlclByZXNlbnRXZWJWUiAoY29tcG9uZW50LCBpZFByZWZpeCwgcXVlcnlPYmplY3QpIHsKICB2YXIgZ2FtZXBhZHM7CiAgdmFyIHNjZW5lRWwgPSBjb21wb25lbnQuZWwuc2NlbmVFbDsKICB2YXIgdHJhY2tlZENvbnRyb2xzU3lzdGVtOwogIHZhciBmaWx0ZXJDb250cm9sbGVySW5kZXggPSBxdWVyeU9iamVjdC5pbmRleCB8fCAwOwoKICBpZiAoIWlkUHJlZml4KSB7IHJldHVybiBmYWxzZTsgfQoKICB0cmFja2VkQ29udHJvbHNTeXN0ZW0gPSBzY2VuZUVsICYmIHNjZW5lRWwuc3lzdGVtc1sndHJhY2tlZC1jb250cm9scy13ZWJ2ciddOwogIGlmICghdHJhY2tlZENvbnRyb2xzU3lzdGVtKSB7IHJldHVybiBmYWxzZTsgfQoKICBnYW1lcGFkcyA9IHRyYWNrZWRDb250cm9sc1N5c3RlbS5jb250cm9sbGVyczsKICBpZiAoIWdhbWVwYWRzLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH0KCiAgcmV0dXJuICEhZmluZE1hdGNoaW5nQ29udHJvbGxlcldlYlZSKGdhbWVwYWRzLCBudWxsLCBpZFByZWZpeCwgcXVlcnlPYmplY3QuaGFuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckNvbnRyb2xsZXJJbmRleCk7Cn0KCi8qKgogKgogKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IC0gVHJhY2tlZCBjb250cm9scyBjb21wb25lbnQuCiAqLwpmdW5jdGlvbiBpc0NvbnRyb2xsZXJQcmVzZW50V2ViWFIgKGNvbXBvbmVudCwgaWQsIHF1ZXJ5T2JqZWN0KSB7CiAgdmFyIGNvbnRyb2xsZXJzOwogIHZhciBzY2VuZUVsID0gY29tcG9uZW50LmVsLnNjZW5lRWw7CiAgdmFyIHRyYWNrZWRDb250cm9sc1N5c3RlbSA9IHNjZW5lRWwgJiYgc2NlbmVFbC5zeXN0ZW1zWyd0cmFja2VkLWNvbnRyb2xzLXdlYnhyJ107CiAgaWYgKCF0cmFja2VkQ29udHJvbHNTeXN0ZW0pIHsgcmV0dXJuIGZhbHNlOyB9CgogIGNvbnRyb2xsZXJzID0gdHJhY2tlZENvbnRyb2xzU3lzdGVtLmNvbnRyb2xsZXJzOwogIGlmICghY29udHJvbGxlcnMgfHwgIWNvbnRyb2xsZXJzLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH0KCiAgcmV0dXJuIGZpbmRNYXRjaGluZ0NvbnRyb2xsZXJXZWJYUigKICAgIGNvbnRyb2xsZXJzLCBpZCwKICAgIHF1ZXJ5T2JqZWN0LmhhbmQsIHF1ZXJ5T2JqZWN0LmluZGV4LCBxdWVyeU9iamVjdC5pdGVyYXRlQ29udHJvbGxlclByb2ZpbGVzKTsKfQoKbW9kdWxlLmV4cG9ydHMuaXNDb250cm9sbGVyUHJlc2VudFdlYlZSID0gaXNDb250cm9sbGVyUHJlc2VudFdlYlZSOwptb2R1bGUuZXhwb3J0cy5pc0NvbnRyb2xsZXJQcmVzZW50V2ViWFIgPSBpc0NvbnRyb2xsZXJQcmVzZW50V2ViWFI7CgovKioKICogV2FsayB0aHJvdWdoIHRoZSBnaXZlbiBjb250cm9sbGVycyB0byBmaW5kIGFueSB3aGVyZSB0aGUgZGV2aWNlIElEIGVxdWFscwogKiBmaWx0ZXJJZEV4YWN0LCBvciBzdGFydHNXaXRoIGZpbHRlcklkUHJlZml4LgogKiBBIGNvbnRyb2xsZXIgd2hlcmUgdGhpcyBjb25zaWRlcmVkIHRydWUgaXMgY29uc2lkZXJlZCBhICdtYXRjaCcuCiAqCiAqIEZvciBlYWNoIG1hdGNoaW5nIGNvbnRyb2xsZXI6CiAqICAgSWYgZmlsdGVySGFuZCBpcyBzZXQsIGFuZCB0aGUgY29udHJvbGxlcjoKICogICAgIGlzIGhhbmRlZCwgd2UgZnVydGhlciB2ZXJpZnkgdGhhdCBjb250cm9sbGVyLmhhbmQgZXF1YWxzIGZpbHRlckhhbmQuCiAqICAgICBpcyB1bmhhbmRlZCAoY29udHJvbGxlci5oYW5kIGlzICcnKSwgd2Ugc2tpcCB1bnRpbCB3ZSBoYXZlIGZvdW5kIGEKICogICAgIG51bWJlciBvZiBtYXRjaGluZyBjb250cm9sbGVycyB0aGF0IGVxdWFscyBmaWx0ZXJDb250cm9sbGVySW5kZXgKICogICBJZiBmaWx0ZXJIYW5kIGlzIG5vdCBzZXQsIHdlIHNraXAgdW50aWwgd2UgaGF2ZSBmb3VuZCB0aGUgbnRoIG1hdGNoaW5nCiAqICAgY29udHJvbGxlciwgd2hlcmUgbiBlcXVhbHMgZmlsdGVyQ29udHJvbGxlckluZGV4CiAqCiAqIFRoZSBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIG9uZSBvZjogW2ZpbHRlcklkRXhhY3QsIGZpbHRlcklkUHJlZml4XSBBTkQKICogb25lIG9yIGJvdGggb2Y6IFtmaWx0ZXJIYW5kLCBmaWx0ZXJDb250cm9sbGVySW5kZXhdCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sbGVycyAtIEFycmF5IG9mIGdhbWVwYWRzIHRvIHNlYXJjaAogKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVySWRFeGFjdCAtIElmIHNldCwgdXNlZCB0byBmaW5kIGNvbnRyb2xsZXJzIHdpdGggaWQgPT09IHRoaXMgdmFsdWUKICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlcklkUHJlZml4IC0gSWYgc2V0LCB1c2VkIHRvIGZpbmQgY29udHJvbGxlcnMgd2l0aCBpZCBzdGFydHNXaXRoIHRoaXMgdmFsdWUKICogQHBhcmFtIHtvYmplY3R9IGZpbHRlckhhbmQgLSBJZiBzZXQsIGZ1cnRoZXIgZmlsdGVycyBjb250cm9sbGVycyB3aXRoIG1hdGNoaW5nICdoYW5kJyBwcm9wZXJ0eQogKiBAcGFyYW0ge29iamVjdH0gZmlsdGVyQ29udHJvbGxlckluZGV4IC0gRmluZCB0aGUgbnRoIG1hdGNoaW5nIGNvbnRyb2xsZXIsCiAqIHdoZXJlIG4gZXF1YWxzIGZpbHRlckNvbnRyb2xsZXJJbmRleC4gZGVmYXVsdHMgdG8gMC4KICovCmZ1bmN0aW9uIGZpbmRNYXRjaGluZ0NvbnRyb2xsZXJXZWJWUiAoY29udHJvbGxlcnMsIGZpbHRlcklkRXhhY3QsIGZpbHRlcklkUHJlZml4LCBmaWx0ZXJIYW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJDb250cm9sbGVySW5kZXgpIHsKICB2YXIgY29udHJvbGxlcjsKICB2YXIgaTsKICB2YXIgbWF0Y2hpbmdDb250cm9sbGVyT2NjdXJlbmNlID0gMDsKICB2YXIgdGFyZ2V0Q29udHJvbGxlck1hdGNoID0gZmlsdGVyQ29udHJvbGxlckluZGV4ID49IDAgPyBmaWx0ZXJDb250cm9sbGVySW5kZXggOiAwOwoKICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpKyspIHsKICAgIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tpXTsKCiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGNvbnRyb2xsZXIgSUQgbWF0Y2hlcyBvdXIgY3JpdGVyaWEuCiAgICBpZiAoZmlsdGVySWRQcmVmaXggJiYgIWNvbnRyb2xsZXIuaWQuc3RhcnRzV2l0aChmaWx0ZXJJZFByZWZpeCkpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKCFmaWx0ZXJJZFByZWZpeCAmJiBjb250cm9sbGVyLmlkICE9PSBmaWx0ZXJJZEV4YWN0KSB7IGNvbnRpbnVlOyB9CgogICAgLy8gSWYgdGhlIGhhbmQgZmlsdGVyIGFuZCBjb250cm9sbGVyIGhhbmRlZG5lc3MgYXJlIGRlZmluZWQgd2UgY29tcGFyZSB0aGVtLgogICAgaWYgKGZpbHRlckhhbmQgJiYgY29udHJvbGxlci5oYW5kICYmIGZpbHRlckhhbmQgIT09IGNvbnRyb2xsZXIuaGFuZCkgeyBjb250aW51ZTsgfQoKICAgIC8vIElmIHdlIGhhdmUgZGV0ZWN0ZWQgYW4gdW5oYW5kZWQgY29udHJvbGxlciBhbmQgdGhlIGNvbXBvbmVudCB3YXMgYXNraW5nCiAgICAvLyBmb3IgYSBwYXJ0aWN1bGFyIGhhbmQsIHdlIG5lZWQgdG8gdHJlYXQgdGhlIGNvbnRyb2xsZXJzIGluIHRoZSBhcnJheSBhcwogICAgLy8gcGFpcnMgb2YgY29udHJvbGxlcnMuIFRoaXMgZWZmZWN0aXZlbHkgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNraXAKICAgIC8vIE5VTV9IQU5EUyBtYXRjaGVzIGZvciBlYWNoIGNvbnRyb2xsZXIgbnVtYmVyLCBpbnN0ZWFkIG9mIDEuCiAgICBpZiAoZmlsdGVySGFuZCAmJiAhY29udHJvbGxlci5oYW5kKSB7CiAgICAgIHRhcmdldENvbnRyb2xsZXJNYXRjaCA9IE5VTV9IQU5EUyAqIGZpbHRlckNvbnRyb2xsZXJJbmRleCArICgoZmlsdGVySGFuZCA9PT0gREVGQVVMVF9IQU5ERURORVNTKSA/IDAgOiAxKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjb250cm9sbGVyOwogICAgfQoKICAgIC8vIFdlIGFyZSBsb29raW5nIGZvciB0aGUgbnRoIG9jY3VyZW5jZSBvZiBhIG1hdGNoaW5nIGNvbnRyb2xsZXIKICAgIC8vIChuIGVxdWFscyB0YXJnZXRDb250cm9sbGVyTWF0Y2gpLgogICAgaWYgKG1hdGNoaW5nQ29udHJvbGxlck9jY3VyZW5jZSA9PT0gdGFyZ2V0Q29udHJvbGxlck1hdGNoKSB7IHJldHVybiBjb250cm9sbGVyOyB9CiAgICArK21hdGNoaW5nQ29udHJvbGxlck9jY3VyZW5jZTsKICB9CiAgcmV0dXJuIHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gZmluZE1hdGNoaW5nQ29udHJvbGxlcldlYlhSIChjb250cm9sbGVycywgaWRQcmVmaXgsIGhhbmRlZG5lc3MsIGluZGV4LCBpdGVyYXRlUHJvZmlsZXMpIHsKICB2YXIgaTsKICB2YXIgajsKICB2YXIgY29udHJvbGxlcjsKICB2YXIgY29udHJvbGxlck1hdGNoID0gZmFsc2U7CiAgdmFyIGNvbnRyb2xsZXJIYXNIYW5kZWRuZXNzOwogIHZhciBwcm9maWxlczsKICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpKyspIHsKICAgIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tpXTsKICAgIHByb2ZpbGVzID0gY29udHJvbGxlci5wcm9maWxlczsKICAgIGlmIChwcm9maWxlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9CiAgICBpZiAoaXRlcmF0ZVByb2ZpbGVzKSB7CiAgICAgIGZvciAoaiA9IDA7IGogPCBwcm9maWxlcy5sZW5ndGg7IGorKykgewogICAgICAgIGNvbnRyb2xsZXJNYXRjaCA9IHByb2ZpbGVzW2pdLnN0YXJ0c1dpdGgoaWRQcmVmaXgpOwogICAgICAgIGlmIChjb250cm9sbGVyTWF0Y2gpIHsgYnJlYWs7IH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29udHJvbGxlck1hdGNoID0gcHJvZmlsZXNbMF0uc3RhcnRzV2l0aChpZFByZWZpeCk7CiAgICB9CiAgICBpZiAoIWNvbnRyb2xsZXJNYXRjaCkgeyBjb250aW51ZTsgfQogICAgLy8gVml2ZSBjb250cm9sbGVycyBhcmUgYXNzaWduZWQgaGFuZGVkbmVzcyBhdCBydW50aW1lIGFuZCBpdCBtaWdodCBub3QgYmUgYWx3YXlzIGF2YWlsYWJsZS4KICAgIGNvbnRyb2xsZXJIYXNIYW5kZWRuZXNzID0gY29udHJvbGxlci5oYW5kZWRuZXNzID09PSAncmlnaHQnIHx8IGNvbnRyb2xsZXIuaGFuZGVkbmVzcyA9PT0gJ2xlZnQnOwogICAgaWYgKGNvbnRyb2xsZXJIYXNIYW5kZWRuZXNzKSB7CiAgICAgIGlmIChjb250cm9sbGVyLmhhbmRlZG5lc3MgPT09IGhhbmRlZG5lc3MpIHsgcmV0dXJuIGNvbnRyb2xsZXJzW2ldOyB9CiAgICB9IGVsc2UgeyAvLyBGYWxsYmFjayB0byBpbmRleCBpZiBjb250cm9sbGVyIGhhcyBubyBoYW5kZWRuZXNzLgogICAgICBpZiAoKGkgPT09IGluZGV4KSkgeyByZXR1cm4gY29udHJvbGxlcnNbaV07IH0KICAgIH0KICB9CiAgcmV0dXJuIHVuZGVmaW5lZDsKfQoKbW9kdWxlLmV4cG9ydHMuZmluZE1hdGNoaW5nQ29udHJvbGxlcldlYlZSID0gZmluZE1hdGNoaW5nQ29udHJvbGxlcldlYlZSOwptb2R1bGUuZXhwb3J0cy5maW5kTWF0Y2hpbmdDb250cm9sbGVyV2ViWFIgPSBmaW5kTWF0Y2hpbmdDb250cm9sbGVyV2ViWFI7CgovKioKICogRW1pdCBzcGVjaWZpYyBgbW92ZWRgIGV2ZW50KHMpIGlmIGF4ZXMgY2hhbmdlZCBiYXNlZCBvbiBvcmlnaW5hbCBheGlzbW92ZWQgZXZlbnQuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgLSBDb250cm9sbGVyIGNvbXBvbmVudCBpbiB1c2UuCiAqIEBwYXJhbSB7YXJyYXl9IGF4ZXNNYXBwaW5nIC0gRm9yIGV4YW1wbGUgYHt0aHVtYnN0aWNrOiBbMCwgMV19YC4KICogQHBhcmFtIHtvYmplY3R9IGV2dCAtIEV2ZW50IHRvIHByb2Nlc3MuCiAqLwptb2R1bGUuZXhwb3J0cy5lbWl0SWZBeGVzQ2hhbmdlZCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGF4ZXNNYXBwaW5nLCBldnQpIHsKICB2YXIgYXhlczsKICB2YXIgYnV0dG9uVHlwZTsKICB2YXIgY2hhbmdlZDsKICB2YXIgZGV0YWlsOwogIHZhciBqOwoKICBmb3IgKGJ1dHRvblR5cGUgaW4gYXhlc01hcHBpbmcpIHsKICAgIGF4ZXMgPSBheGVzTWFwcGluZ1tidXR0b25UeXBlXTsKCiAgICBjaGFuZ2VkID0gZmFsc2U7CiAgICBmb3IgKGogPSAwOyBqIDwgYXhlcy5sZW5ndGg7IGorKykgewogICAgICBpZiAoZXZ0LmRldGFpbC5jaGFuZ2VkW2F4ZXNbal1dKSB7IGNoYW5nZWQgPSB0cnVlOyB9CiAgICB9CgogICAgaWYgKCFjaGFuZ2VkKSB7IGNvbnRpbnVlOyB9CgogICAgLy8gQXhpcyBoYXMgY2hhbmdlZC4gRW1pdCB0aGUgc3BlY2lmaWMgbW92ZWQgZXZlbnQgd2l0aCBheGlzIHZhbHVlcyBpbiBkZXRhaWwuCiAgICBkZXRhaWwgPSB7fTsKICAgIGZvciAoaiA9IDA7IGogPCBheGVzLmxlbmd0aDsgaisrKSB7CiAgICAgIGRldGFpbFtBWElTX0xBQkVMU1tqXV0gPSBldnQuZGV0YWlsLmF4aXNbYXhlc1tqXV07CiAgICB9CiAgICBjb21wb25lbnQuZWwuZW1pdChidXR0b25UeXBlICsgJ21vdmVkJywgZGV0YWlsKTsKICB9Cn07CgovKioKICogSGFuZGxlIGEgYnV0dG9uIGV2ZW50IGFuZCByZWVtaXRzIHRoZSBldmVudHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGlkIG9mIHRoZSBidXR0b24uCiAqIEBwYXJhbSB7c3RyaW5nfSBldnROYW1lIC0gbmFtZSBvZiB0aGUgcmVlbWl0dGVkIGV2ZW50CiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgLSByZWZlcmVuY2UgdG8gdGhlIGNvbXBvbmVudAogKiBAcGFyYW0ge3N0cmluZ30gaGFuZCAtIGhhbmRlZG5lc3Mgb2YgdGhlIGNvbnRyb2xsZXI6IGxlZnQgb3IgcmlnaHQuCiAqLwptb2R1bGUuZXhwb3J0cy5vbkJ1dHRvbkV2ZW50ID0gZnVuY3Rpb24gKGlkLCBldnROYW1lLCBjb21wb25lbnQsIGhhbmQpIHsKICB2YXIgbWFwcGluZyA9IGhhbmQgPyBjb21wb25lbnQubWFwcGluZ1toYW5kXSA6IGNvbXBvbmVudC5tYXBwaW5nOwogIHZhciBidXR0b25OYW1lID0gbWFwcGluZy5idXR0b25zW2lkXTsKICBjb21wb25lbnQuZWwuZW1pdChidXR0b25OYW1lICsgZXZ0TmFtZSk7CiAgaWYgKGNvbXBvbmVudC51cGRhdGVNb2RlbCkgewogICAgY29tcG9uZW50LnVwZGF0ZU1vZGVsKGJ1dHRvbk5hbWUsIGV2dE5hbWUpOwogIH0KfTsKCn0seyIuLi9jb25zdGFudHMiOjEwMX1dLDE5MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBAYXV0aG9yIHJpY2h0IC8gaHR0cDovL3JpY2h0Lm1lCiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleQogKgogKiBXM0MgRGV2aWNlIE9yaWVudGF0aW9uIGNvbnRyb2wgKGh0dHA6Ly93M2MuZ2l0aHViLmlvL2RldmljZW9yaWVudGF0aW9uL3NwZWMtc291cmNlLW9yaWVudGF0aW9uLmh0bWwpCiAqLwoKVEhSRUUuRGV2aWNlT3JpZW50YXRpb25Db250cm9scyA9IGZ1bmN0aW9uICggb2JqZWN0ICkgewoKICB2YXIgc2NvcGUgPSB0aGlzOwoKICB0aGlzLm9iamVjdCA9IG9iamVjdDsKICB0aGlzLm9iamVjdC5yb3RhdGlvbi5yZW9yZGVyKCAnWVhaJyApOwoKICB0aGlzLmVuYWJsZWQgPSB0cnVlOwoKICB0aGlzLmRldmljZU9yaWVudGF0aW9uID0ge307CiAgdGhpcy5zY3JlZW5PcmllbnRhdGlvbiA9IDA7CgogIHRoaXMuYWxwaGFPZmZzZXQgPSAwOyAvLyByYWRpYW5zCgogIHZhciBvbkRldmljZU9yaWVudGF0aW9uQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoIGV2ZW50ICkgewoKICAgIHNjb3BlLmRldmljZU9yaWVudGF0aW9uID0gZXZlbnQ7CgogIH07CgogIHZhciBvblNjcmVlbk9yaWVudGF0aW9uQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoKSB7CgogICAgc2NvcGUuc2NyZWVuT3JpZW50YXRpb24gPSB3aW5kb3cub3JpZW50YXRpb24gfHwgMDsKCiAgfTsKCiAgLy8gVGhlIGFuZ2xlcyBhbHBoYSwgYmV0YSBhbmQgZ2FtbWEgZm9ybSBhIHNldCBvZiBpbnRyaW5zaWMgVGFpdC1CcnlhbiBhbmdsZXMgb2YgdHlwZSBaLVgnLVknJwoKICB2YXIgc2V0T2JqZWN0UXVhdGVybmlvbiA9IGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgemVlID0gbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDEgKTsKCiAgICB2YXIgZXVsZXIgPSBuZXcgVEhSRUUuRXVsZXIoKTsKCiAgICB2YXIgcTAgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpOwoKICAgIHZhciBxMSA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCAtIE1hdGguc3FydCggMC41ICksIDAsIDAsIE1hdGguc3FydCggMC41ICkgKTsgLy8gLSBQSS8yIGFyb3VuZCB0aGUgeC1heGlzCgogICAgcmV0dXJuIGZ1bmN0aW9uICggcXVhdGVybmlvbiwgYWxwaGEsIGJldGEsIGdhbW1hLCBvcmllbnQgKSB7CgogICAgICBldWxlci5zZXQoIGJldGEsIGFscGhhLCAtIGdhbW1hLCAnWVhaJyApOyAvLyAnWlhZJyBmb3IgdGhlIGRldmljZSwgYnV0ICdZWFonIGZvciB1cwoKICAgICAgcXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyICk7IC8vIG9yaWVudCB0aGUgZGV2aWNlCgogICAgICBxdWF0ZXJuaW9uLm11bHRpcGx5KCBxMSApOyAvLyBjYW1lcmEgbG9va3Mgb3V0IHRoZSBiYWNrIG9mIHRoZSBkZXZpY2UsIG5vdCB0aGUgdG9wCgogICAgICBxdWF0ZXJuaW9uLm11bHRpcGx5KCBxMC5zZXRGcm9tQXhpc0FuZ2xlKCB6ZWUsIC0gb3JpZW50ICkgKTsgLy8gYWRqdXN0IGZvciBzY3JlZW4gb3JpZW50YXRpb24KCiAgICB9OwoKICB9KCk7CgogIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKIAogICAgb25TY3JlZW5PcmllbnRhdGlvbkNoYW5nZUV2ZW50KCk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdvcmllbnRhdGlvbmNoYW5nZScsIG9uU2NyZWVuT3JpZW50YXRpb25DaGFuZ2VFdmVudCwgZmFsc2UgKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnZGV2aWNlb3JpZW50YXRpb24nLCBvbkRldmljZU9yaWVudGF0aW9uQ2hhbmdlRXZlbnQsIGZhbHNlICk7CgogICAgc2NvcGUuZW5hYmxlZCA9IHRydWU7CgogIH07CgogIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKCiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ29yaWVudGF0aW9uY2hhbmdlJywgb25TY3JlZW5PcmllbnRhdGlvbkNoYW5nZUV2ZW50LCBmYWxzZSApOwogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkZXZpY2VvcmllbnRhdGlvbicsIG9uRGV2aWNlT3JpZW50YXRpb25DaGFuZ2VFdmVudCwgZmFsc2UgKTsKCiAgICBzY29wZS5lbmFibGVkID0gZmFsc2U7CgogIH07CgogIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkgewoKICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47CgogICAgdmFyIGRldmljZSA9IHNjb3BlLmRldmljZU9yaWVudGF0aW9uOwoKICAgIGlmICggZGV2aWNlICkgewoKICAgICAgdmFyIGFscGhhID0gZGV2aWNlLmFscGhhID8gVEhSRUUuTWF0aC5kZWdUb1JhZCggZGV2aWNlLmFscGhhICkgKyBzY29wZS5hbHBoYU9mZnNldCA6IDA7IC8vIFoKCiAgICAgIHZhciBiZXRhID0gZGV2aWNlLmJldGEgPyBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBkZXZpY2UuYmV0YSApIDogMDsgLy8gWCcKCiAgICAgIHZhciBnYW1tYSA9IGRldmljZS5nYW1tYSA/IFRIUkVFLk1hdGguZGVnVG9SYWQoIGRldmljZS5nYW1tYSApIDogMDsgLy8gWScnCgogICAgICB2YXIgb3JpZW50ID0gc2NvcGUuc2NyZWVuT3JpZW50YXRpb24gPyBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBzY29wZS5zY3JlZW5PcmllbnRhdGlvbiApIDogMDsgLy8gTwoKICAgICAgc2V0T2JqZWN0UXVhdGVybmlvbiggc2NvcGUub2JqZWN0LnF1YXRlcm5pb24sIGFscGhhLCBiZXRhLCBnYW1tYSwgb3JpZW50ICk7CgogICAgfQoKCiAgfTsKCiAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkgewoKICAgIHNjb3BlLmRpc2Nvbm5lY3QoKTsKCiAgfTsKCiAgdGhpcy5jb25uZWN0KCk7Cgp9OwoKfSx7fV0sMTkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKd2luZG93LmdsU3RhdHMgPSBmdW5jdGlvbiAoKSB7CgogICAgdmFyIF9yUyA9IG51bGw7CgogICAgdmFyIF90b3RhbERyYXdBcnJheXNDYWxscyA9IDAsCiAgICAgICAgX3RvdGFsRHJhd0VsZW1lbnRzQ2FsbHMgPSAwLAogICAgICAgIF90b3RhbFVzZVByb2dyYW1DYWxscyA9IDAsCiAgICAgICAgX3RvdGFsRmFjZXMgPSAwLAogICAgICAgIF90b3RhbFZlcnRpY2VzID0gMCwKICAgICAgICBfdG90YWxQb2ludHMgPSAwLAogICAgICAgIF90b3RhbEJpbmRUZXh1cmVzID0gMDsKCiAgICBmdW5jdGlvbiBfaCAoIGYsIGMgKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgYy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgICAgIGYuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgIH07CiAgICB9CgogICAgV2ViR0xSZW5kZXJpbmdDb250ZXh0LnByb3RvdHlwZS5kcmF3QXJyYXlzID0gX2goIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5wcm90b3R5cGUuZHJhd0FycmF5cywgZnVuY3Rpb24gKCkgewogICAgICAgIF90b3RhbERyYXdBcnJheXNDYWxscysrOwogICAgICAgIGlmICggYXJndW1lbnRzWyAwIF0gPT0gdGhpcy5QT0lOVFMgKSBfdG90YWxQb2ludHMgKz0gYXJndW1lbnRzWyAyIF07CiAgICAgICAgZWxzZSBfdG90YWxWZXJ0aWNlcyArPSBhcmd1bWVudHNbIDIgXTsKICAgIH0gKTsKCiAgICBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlLmRyYXdFbGVtZW50cyA9IF9oKCBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlLmRyYXdFbGVtZW50cywgZnVuY3Rpb24gKCkgewogICAgICAgIF90b3RhbERyYXdFbGVtZW50c0NhbGxzKys7CiAgICAgICAgX3RvdGFsRmFjZXMgKz0gYXJndW1lbnRzWyAxIF0gLyAzOwogICAgICAgIF90b3RhbFZlcnRpY2VzICs9IGFyZ3VtZW50c1sgMSBdOwogICAgfSApOwoKICAgIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5wcm90b3R5cGUudXNlUHJvZ3JhbSA9IF9oKCBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlLnVzZVByb2dyYW0sIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdG90YWxVc2VQcm9ncmFtQ2FsbHMrKzsKICAgIH0gKTsKCiAgICBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlLmJpbmRUZXh0dXJlID0gX2goIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5wcm90b3R5cGUuYmluZFRleHR1cmUsIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdG90YWxCaW5kVGV4dXJlcysrOwogICAgfSApOwoKICAgIHZhciBfdmFsdWVzID0gewogICAgICAgIGFsbGNhbGxzOiB7CiAgICAgICAgICAgIG92ZXI6IDMwMDAsCiAgICAgICAgICAgIGNhcHRpb246ICdDYWxscyAoaG9vayknCiAgICAgICAgfSwKICAgICAgICBkcmF3ZWxlbWVudHM6IHsKICAgICAgICAgICAgY2FwdGlvbjogJ2RyYXdFbGVtZW50cyAoaG9vayknCiAgICAgICAgfSwKICAgICAgICBkcmF3YXJyYXlzOiB7CiAgICAgICAgICAgIGNhcHRpb246ICdkcmF3QXJyYXlzIChob29rKScKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBfZ3JvdXBzID0gWyB7CiAgICAgICAgY2FwdGlvbjogJ1dlYkdMJywKICAgICAgICB2YWx1ZXM6IFsgJ2FsbGNhbGxzJywgJ2RyYXdlbGVtZW50cycsICdkcmF3YXJyYXlzJywgJ3VzZXByb2dyYW0nLCAnYmluZHRleHR1cmUnLCAnZ2xmYWNlcycsICdnbHZlcnRpY2VzJywgJ2dscG9pbnRzJyBdCiAgICB9IF07CgogICAgdmFyIF9mcmFjdGlvbnMgPSBbIHsKICAgICAgICBiYXNlOiAnYWxsY2FsbHMnLAogICAgICAgIHN0ZXBzOiBbICdkcmF3ZWxlbWVudHMnLCAnZHJhd2FycmF5cycgXQogICAgfSBdOwoKICAgIGZ1bmN0aW9uIF91cGRhdGUgKCkgewogICAgICAgIF9yUyggJ2FsbGNhbGxzJyApLnNldCggX3RvdGFsRHJhd0FycmF5c0NhbGxzICsgX3RvdGFsRHJhd0VsZW1lbnRzQ2FsbHMgKTsKICAgICAgICBfclMoICdkcmF3RWxlbWVudHMnICkuc2V0KCBfdG90YWxEcmF3RWxlbWVudHNDYWxscyApOwogICAgICAgIF9yUyggJ2RyYXdBcnJheXMnICkuc2V0KCBfdG90YWxEcmF3QXJyYXlzQ2FsbHMgKTsKICAgICAgICBfclMoICdiaW5kVGV4dHVyZScgKS5zZXQoIF90b3RhbEJpbmRUZXh1cmVzICk7CiAgICAgICAgX3JTKCAndXNlUHJvZ3JhbScgKS5zZXQoIF90b3RhbFVzZVByb2dyYW1DYWxscyApOwogICAgICAgIF9yUyggJ2dsZmFjZXMnICkuc2V0KCBfdG90YWxGYWNlcyApOwogICAgICAgIF9yUyggJ2dsdmVydGljZXMnICkuc2V0KCBfdG90YWxWZXJ0aWNlcyApOwogICAgICAgIF9yUyggJ2dscG9pbnRzJyApLnNldCggX3RvdGFsUG9pbnRzICk7CiAgICB9CgogICAgZnVuY3Rpb24gX3N0YXJ0ICgpIHsKICAgICAgICBfdG90YWxEcmF3QXJyYXlzQ2FsbHMgPSAwOwogICAgICAgIF90b3RhbERyYXdFbGVtZW50c0NhbGxzID0gMDsKICAgICAgICBfdG90YWxVc2VQcm9ncmFtQ2FsbHMgPSAwOwogICAgICAgIF90b3RhbEZhY2VzID0gMDsKICAgICAgICBfdG90YWxWZXJ0aWNlcyA9IDA7CiAgICAgICAgX3RvdGFsUG9pbnRzID0gMDsKICAgICAgICBfdG90YWxCaW5kVGV4dXJlcyA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gX2VuZCAoKSB7fQoKICAgIGZ1bmN0aW9uIF9hdHRhY2ggKCByICkgewogICAgICAgIF9yUyA9IHI7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgICB1cGRhdGU6IF91cGRhdGUsCiAgICAgICAgc3RhcnQ6IF9zdGFydCwKICAgICAgICBlbmQ6IF9lbmQsCiAgICAgICAgYXR0YWNoOiBfYXR0YWNoLAogICAgICAgIHZhbHVlczogX3ZhbHVlcywKICAgICAgICBncm91cHM6IF9ncm91cHMsCiAgICAgICAgZnJhY3Rpb25zOiBfZnJhY3Rpb25zCiAgICB9OwoKfTsKCndpbmRvdy50aHJlZVN0YXRzID0gZnVuY3Rpb24gKCByZW5kZXJlciApIHsKCiAgICB2YXIgX3JTID0gbnVsbDsKCiAgICB2YXIgX3ZhbHVlcyA9IHsKICAgICAgICAncmVuZGVyZXIuaW5mby5tZW1vcnkuZ2VvbWV0cmllcyc6IHsKICAgICAgICAgICAgY2FwdGlvbjogJ0dlb21ldHJpZXMnCiAgICAgICAgfSwKICAgICAgICAncmVuZGVyZXIuaW5mby5tZW1vcnkudGV4dHVyZXMnOiB7CiAgICAgICAgICAgIGNhcHRpb246ICdUZXh0dXJlcycKICAgICAgICB9LAogICAgICAgICdyZW5kZXJlci5pbmZvLnByb2dyYW1zJzogewogICAgICAgICAgICBjYXB0aW9uOiAnUHJvZ3JhbXMnCiAgICAgICAgfSwKICAgICAgICAncmVuZGVyZXIuaW5mby5yZW5kZXIuY2FsbHMnOiB7CiAgICAgICAgICAgIGNhcHRpb246ICdDYWxscycKICAgICAgICB9LAogICAgICAgICdyZW5kZXJlci5pbmZvLnJlbmRlci50cmlhbmdsZXMnOiB7CiAgICAgICAgICAgIGNhcHRpb246ICdUcmlhbmdsZXMnLAogICAgICAgICAgICBvdmVyOiAxMDAwCiAgICAgICAgfSwKICAgICAgICAncmVuZGVyZXIuaW5mby5yZW5kZXIucG9pbnRzJzogewogICAgICAgICAgICBjYXB0aW9uOiAnUG9pbnRzJwogICAgICAgIH0KICAgIH07CgogICAgdmFyIF9ncm91cHMgPSBbIHsKICAgICAgICBjYXB0aW9uOiAnVGhyZWUuanMgLSBNZW1vcnknLAogICAgICAgIHZhbHVlczogWyAncmVuZGVyZXIuaW5mby5tZW1vcnkuZ2VvbWV0cmllcycsICdyZW5kZXJlci5pbmZvLnByb2dyYW1zJywgJ3JlbmRlcmVyLmluZm8ubWVtb3J5LnRleHR1cmVzJyBdCiAgICB9LCB7CiAgICAgICAgY2FwdGlvbjogJ1RocmVlLmpzIC0gUmVuZGVyJywKICAgICAgICB2YWx1ZXM6IFsgJ3JlbmRlcmVyLmluZm8ucmVuZGVyLmNhbGxzJywgJ3JlbmRlcmVyLmluZm8ucmVuZGVyLnRyaWFuZ2xlcycsICdyZW5kZXJlci5pbmZvLnJlbmRlci5wb2ludHMnIF0KICAgIH0gXTsKCiAgICB2YXIgX2ZyYWN0aW9ucyA9IFtdOwoKICAgIGZ1bmN0aW9uIF91cGRhdGUgKCkgewoKICAgICAgICBfclMoICdyZW5kZXJlci5pbmZvLm1lbW9yeS5nZW9tZXRyaWVzJyApLnNldCggcmVuZGVyZXIuaW5mby5tZW1vcnkuZ2VvbWV0cmllcyApOwogICAgICAgIF9yUyggJ3JlbmRlcmVyLmluZm8ucHJvZ3JhbXMnICkuc2V0KCByZW5kZXJlci5pbmZvLnByb2dyYW1zLmxlbmd0aCApOwogICAgICAgIF9yUyggJ3JlbmRlcmVyLmluZm8ubWVtb3J5LnRleHR1cmVzJyApLnNldCggcmVuZGVyZXIuaW5mby5tZW1vcnkudGV4dHVyZXMgKTsKICAgICAgICBfclMoICdyZW5kZXJlci5pbmZvLnJlbmRlci5jYWxscycgKS5zZXQoIHJlbmRlcmVyLmluZm8ucmVuZGVyLmNhbGxzICk7CiAgICAgICAgX3JTKCAncmVuZGVyZXIuaW5mby5yZW5kZXIudHJpYW5nbGVzJyApLnNldCggcmVuZGVyZXIuaW5mby5yZW5kZXIudHJpYW5nbGVzICk7CiAgICAgICAgX3JTKCAncmVuZGVyZXIuaW5mby5yZW5kZXIucG9pbnRzJyApLnNldCggcmVuZGVyZXIuaW5mby5yZW5kZXIucG9pbnRzICk7CgogICAgfQoKICAgIGZ1bmN0aW9uIF9zdGFydCAoKSB7fQoKICAgIGZ1bmN0aW9uIF9lbmQgKCkge30KCiAgICBmdW5jdGlvbiBfYXR0YWNoICggciApIHsKICAgICAgICBfclMgPSByOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgdXBkYXRlOiBfdXBkYXRlLAogICAgICAgIHN0YXJ0OiBfc3RhcnQsCiAgICAgICAgZW5kOiBfZW5kLAogICAgICAgIGF0dGFjaDogX2F0dGFjaCwKICAgICAgICB2YWx1ZXM6IF92YWx1ZXMsCiAgICAgICAgZ3JvdXBzOiBfZ3JvdXBzLAogICAgICAgIGZyYWN0aW9uczogX2ZyYWN0aW9ucwogICAgfTsKCn07CgovKgogKiAgIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxpcmlzaC9tZW1vcnktc3RhdHMuanMKICovCgp3aW5kb3cuQnJvd3NlclN0YXRzID0gZnVuY3Rpb24gKCkgewoKICAgIHZhciBfclMgPSBudWxsOwoKICAgIHZhciBfdXNlZEpTSGVhcFNpemUgPSAwLAogICAgICAgIF90b3RhbEpTSGVhcFNpemUgPSAwOwoKICAgIGlmICggd2luZG93LnBlcmZvcm1hbmNlICYmICFwZXJmb3JtYW5jZS5tZW1vcnkgKSB7CiAgICAgICAgcGVyZm9ybWFuY2UubWVtb3J5ID0gewogICAgICAgICAgICB1c2VkSlNIZWFwU2l6ZTogMCwKICAgICAgICAgICAgdG90YWxKU0hlYXBTaXplOiAwCiAgICAgICAgfTsKICAgIH0KCiAgICBpZiAoIHBlcmZvcm1hbmNlLm1lbW9yeS50b3RhbEpTSGVhcFNpemUgPT09IDAgKSB7CiAgICAgICAgY29uc29sZS53YXJuKCAndG90YWxKU0hlYXBTaXplID09PSAwLi4uIHBlcmZvcm1hbmNlLm1lbW9yeSBpcyBvbmx5IGF2YWlsYWJsZSBpbiBDaHJvbWUgLicgKTsKICAgIH0KCiAgICB2YXIgX3ZhbHVlcyA9IHsKICAgICAgICBtZW1vcnk6IHsKICAgICAgICAgICAgY2FwdGlvbjogJ1VzZWQgTWVtb3J5JywKICAgICAgICAgICAgYXZlcmFnZTogdHJ1ZSwKICAgICAgICAgICAgYXZnTXM6IDEwMDAsCiAgICAgICAgICAgIG92ZXI6IDIyCiAgICAgICAgfSwKICAgICAgICB0b3RhbDogewogICAgICAgICAgICBjYXB0aW9uOiAnVG90YWwgTWVtb3J5JwogICAgICAgIH0KICAgIH07CgogICAgdmFyIF9ncm91cHMgPSBbIHsKICAgICAgICBjYXB0aW9uOiAnQnJvd3NlcicsCiAgICAgICAgdmFsdWVzOiBbICdtZW1vcnknLCAndG90YWwnIF0KICAgIH0gXTsKCiAgICB2YXIgX2ZyYWN0aW9ucyA9IFsgewogICAgICAgIGJhc2U6ICd0b3RhbCcsCiAgICAgICAgc3RlcHM6IFsgJ21lbW9yeScgXQogICAgfSBdOwoKICAgIHZhciBsb2cxMDI0ID0gTWF0aC5sb2coIDEwMjQgKTsKCiAgICBmdW5jdGlvbiBfc2l6ZSAoIHYgKSB7CgogICAgICAgIHZhciBwcmVjaXNpb24gPSAxMDA7IC8vTWF0aC5wb3coMTAsIDIpOwogICAgICAgIHZhciBpID0gTWF0aC5mbG9vciggTWF0aC5sb2coIHYgKSAvIGxvZzEwMjQgKTsKICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCggdiAqIHByZWNpc2lvbiAvIE1hdGgucG93KCAxMDI0LCBpICkgKSAvIHByZWNpc2lvbjsgLy8gKyAnICcgKyBzaXplc1tpXTsKCiAgICB9CgogICAgZnVuY3Rpb24gX3VwZGF0ZSAoKSB7CiAgICAgICAgX3VzZWRKU0hlYXBTaXplID0gX3NpemUoIHBlcmZvcm1hbmNlLm1lbW9yeS51c2VkSlNIZWFwU2l6ZSApOwogICAgICAgIF90b3RhbEpTSGVhcFNpemUgPSBfc2l6ZSggcGVyZm9ybWFuY2UubWVtb3J5LnRvdGFsSlNIZWFwU2l6ZSApOwoKICAgICAgICBfclMoICdtZW1vcnknICkuc2V0KCBfdXNlZEpTSGVhcFNpemUgKTsKICAgICAgICBfclMoICd0b3RhbCcgKS5zZXQoIF90b3RhbEpTSGVhcFNpemUgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBfc3RhcnQgKCkgewogICAgICAgIF91c2VkSlNIZWFwU2l6ZSA9IDA7CiAgICB9CgogICAgZnVuY3Rpb24gX2VuZCAoKSB7fQoKICAgIGZ1bmN0aW9uIF9hdHRhY2ggKCByICkgewogICAgICAgIF9yUyA9IHI7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgICB1cGRhdGU6IF91cGRhdGUsCiAgICAgICAgc3RhcnQ6IF9zdGFydCwKICAgICAgICBlbmQ6IF9lbmQsCiAgICAgICAgYXR0YWNoOiBfYXR0YWNoLAogICAgICAgIHZhbHVlczogX3ZhbHVlcywKICAgICAgICBncm91cHM6IF9ncm91cHMsCiAgICAgICAgZnJhY3Rpb25zOiBfZnJhY3Rpb25zCiAgICB9OwoKfTsKCmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykgewogIG1vZHVsZS5leHBvcnRzID0gewogICAgZ2xTdGF0czogd2luZG93LmdsU3RhdHMsCiAgICB0aHJlZVN0YXRzOiB3aW5kb3cudGhyZWVTdGF0cywKICAgIEJyb3dzZXJTdGF0czogd2luZG93LkJyb3dzZXJTdGF0cwogIH07Cn0KCn0se31dLDE5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIHBlcmZvcm1hbmNlLm5vdygpIHBvbHlmaWxsIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzU0Mzg2NTAKJ3VzZSBzdHJpY3QnOwoKKCBmdW5jdGlvbiAoKSB7CgogICAgaWYgKCAncGVyZm9ybWFuY2UnIGluIHdpbmRvdyA9PSBmYWxzZSApIHsKICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7fTsKICAgIH0KCiAgICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7CgogICAgaWYgKCAnbm93JyBpbiBwZXJmb3JtYW5jZSA9PSBmYWxzZSApIHsKCiAgICAgICAgdmFyIG5vd09mZnNldCA9IERhdGUubm93KCk7CgogICAgICAgIGlmICggcGVyZm9ybWFuY2UudGltaW5nICYmIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQgKSB7CiAgICAgICAgICAgIG5vd09mZnNldCA9IHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQ7CiAgICAgICAgfQoKICAgICAgICBwZXJmb3JtYW5jZS5ub3cgPSBmdW5jdGlvbiBub3cgKCkgewogICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIG5vd09mZnNldDsKICAgICAgICB9OwoKICAgIH0KCiAgICBpZiggIXBlcmZvcm1hbmNlLm1hcmsgKSB7CiAgICAgICAgcGVyZm9ybWFuY2UubWFyayA9IGZ1bmN0aW9uKCl7fQogICAgfQoKICAgIGlmKCAhcGVyZm9ybWFuY2UubWVhc3VyZSApIHsKICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlID0gZnVuY3Rpb24oKXt9CiAgICB9Cgp9ICkoKTsKCndpbmRvdy5yU3RhdHMgPSBmdW5jdGlvbiByU3RhdHMgKCBzZXR0aW5ncyApIHsKCiAgICBmdW5jdGlvbiBpdGVyYXRlS2V5cyAoIGFycmF5LCBjYWxsYmFjayApIHsKICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBhcnJheSApOwogICAgICAgIGZvciAoIHZhciBqID0gMCwgbCA9IGtleXMubGVuZ3RoOyBqIDwgbDsgaisrICkgewogICAgICAgICAgICBjYWxsYmFjaygga2V5c1sgaiBdICk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGltcG9ydENTUyAoIHVybCApIHsKCiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnbGluaycgKTsKICAgICAgICBlbGVtZW50LmhyZWYgPSB1cmw7CiAgICAgICAgZWxlbWVudC5yZWwgPSAnc3R5bGVzaGVldCc7CiAgICAgICAgZWxlbWVudC50eXBlID0gJ3RleHQvY3NzJzsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ2hlYWQnIClbIDAgXS5hcHBlbmRDaGlsZCggZWxlbWVudCApOwoKICAgIH0KCiAgICB2YXIgX3NldHRpbmdzID0gc2V0dGluZ3MgfHwge307CiAgICB2YXIgX2NvbG91cnMgPSBfc2V0dGluZ3MuY29sb3VycyB8fCBbICcjODUwNzAwJywgJyNjNzQ5MDAnLCAnI2ZjYjMwMCcsICcjMjg0MjgwJywgJyM0YzdjMGMnIF07CgogICAgdmFyIF9jc3NGb250ID0gJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8rQ29uZGVuc2VkOjQwMCw3MDAsMzAwJzsKICAgIHZhciBfY3NzUlN0YXRzID0gKCBfc2V0dGluZ3MuQ1NTUGF0aCA/IF9zZXR0aW5ncy5DU1NQYXRoIDogJycgKSArICdyU3RhdHMuY3NzJzsKCiAgICB2YXIgX2NzcyA9IF9zZXR0aW5ncy5jc3MgfHwgWyBfY3NzRm9udCwgX2Nzc1JTdGF0cyBdOwogICAgX2Nzcy5mb3JFYWNoKGZ1bmN0aW9uICh1cmkpIHsKICAgICAgICBpbXBvcnRDU1MoIHVyaSApOwogICAgfSk7CgogICAgaWYgKCAhX3NldHRpbmdzLnZhbHVlcyApIF9zZXR0aW5ncy52YWx1ZXMgPSB7fTsKCiAgICB2YXIgX2Jhc2UsIF9kaXYsIF9lbEhlaWdodCA9IDEwLCBfZWxXaWR0aCA9IDIwMDsKICAgIHZhciBfcGVyZkNvdW50ZXJzID0ge307CgoKICAgIGZ1bmN0aW9uIEdyYXBoICggX2RvbSwgX2lkLCBfZGVmQXJnICkgewoKICAgICAgICB2YXIgX2RlZiA9IF9kZWZBcmcgfHwge307CiAgICAgICAgdmFyIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApLAogICAgICAgICAgICBfY3R4ID0gX2NhbnZhcy5nZXRDb250ZXh0KCAnMmQnICksCiAgICAgICAgICAgIF9tYXggPSAwLAogICAgICAgICAgICBfY3VycmVudCA9IDA7CgogICAgICAgIHZhciBjID0gX2RlZi5jb2xvciA/IF9kZWYuY29sb3IgOiAnIzY2NjY2Nic7CgogICAgICAgIHZhciBfZG90Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKSwKICAgICAgICAgICAgX2RvdEN0eCA9IF9kb3RDYW52YXMuZ2V0Q29udGV4dCggJzJkJyApOwogICAgICAgIF9kb3RDYW52YXMud2lkdGggPSAxOwogICAgICAgIF9kb3RDYW52YXMuaGVpZ2h0ID0gMiAqIF9lbEhlaWdodDsKICAgICAgICBfZG90Q3R4LmZpbGxTdHlsZSA9ICcjNDQ0NDQ0JzsKICAgICAgICBfZG90Q3R4LmZpbGxSZWN0KCAwLCAwLCAxLCAyICogX2VsSGVpZ2h0ICk7CiAgICAgICAgX2RvdEN0eC5maWxsU3R5bGUgPSBjOwogICAgICAgIF9kb3RDdHguZmlsbFJlY3QoIDAsIF9lbEhlaWdodCwgMSwgX2VsSGVpZ2h0ICk7CiAgICAgICAgX2RvdEN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7CiAgICAgICAgX2RvdEN0eC5nbG9iYWxBbHBoYSA9IDAuNTsKICAgICAgICBfZG90Q3R4LmZpbGxSZWN0KCAwLCBfZWxIZWlnaHQsIDEsIDEgKTsKICAgICAgICBfZG90Q3R4Lmdsb2JhbEFscGhhID0gMTsKCiAgICAgICAgdmFyIF9hbGFybUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICksCiAgICAgICAgICAgIF9hbGFybUN0eCA9IF9hbGFybUNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7CiAgICAgICAgX2FsYXJtQ2FudmFzLndpZHRoID0gMTsKICAgICAgICBfYWxhcm1DYW52YXMuaGVpZ2h0ID0gMiAqIF9lbEhlaWdodDsKICAgICAgICBfYWxhcm1DdHguZmlsbFN0eWxlID0gJyM0NDQ0NDQnOwogICAgICAgIF9hbGFybUN0eC5maWxsUmVjdCggMCwgMCwgMSwgMiAqIF9lbEhlaWdodCApOwogICAgICAgIF9hbGFybUN0eC5maWxsU3R5bGUgPSAnI2I3MDAwMCc7CiAgICAgICAgX2FsYXJtQ3R4LmZpbGxSZWN0KCAwLCBfZWxIZWlnaHQsIDEsIF9lbEhlaWdodCApOwogICAgICAgIF9hbGFybUN0eC5nbG9iYWxBbHBoYSA9IDAuNTsKICAgICAgICBfYWxhcm1DdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnOwogICAgICAgIF9hbGFybUN0eC5maWxsUmVjdCggMCwgX2VsSGVpZ2h0LCAxLCAxICk7CiAgICAgICAgX2FsYXJtQ3R4Lmdsb2JhbEFscGhhID0gMTsKCiAgICAgICAgZnVuY3Rpb24gX2luaXQgKCkgewoKICAgICAgICAgICAgX2NhbnZhcy53aWR0aCA9IF9lbFdpZHRoOwogICAgICAgICAgICBfY2FudmFzLmhlaWdodCA9IF9lbEhlaWdodDsKICAgICAgICAgICAgX2NhbnZhcy5zdHlsZS53aWR0aCA9IF9jYW52YXMud2lkdGggKyAncHgnOwogICAgICAgICAgICBfY2FudmFzLnN0eWxlLmhlaWdodCA9IF9jYW52YXMuaGVpZ2h0ICsgJ3B4JzsKICAgICAgICAgICAgX2NhbnZhcy5jbGFzc05hbWUgPSAncnMtY2FudmFzJzsKICAgICAgICAgICAgX2RvbS5hcHBlbmRDaGlsZCggX2NhbnZhcyApOwoKICAgICAgICAgICAgX2N0eC5maWxsU3R5bGUgPSAnIzQ0NDQ0NCc7CiAgICAgICAgICAgIF9jdHguZmlsbFJlY3QoIDAsIDAsIF9jYW52YXMud2lkdGgsIF9jYW52YXMuaGVpZ2h0ICk7CgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gX2RyYXcgKCB2LCBhbGFybSApIHsKICAgICAgICAgICAgX2N1cnJlbnQgKz0gKCB2IC0gX2N1cnJlbnQgKSAqIDAuMTsKICAgICAgICAgICAgX21heCAqPSAwLjk5OwogICAgICAgICAgICBpZiAoIF9jdXJyZW50ID4gX21heCApIF9tYXggPSBfY3VycmVudDsKICAgICAgICAgICAgX2N0eC5kcmF3SW1hZ2UoIF9jYW52YXMsIDEsIDAsIF9jYW52YXMud2lkdGggLSAxLCBfY2FudmFzLmhlaWdodCwgMCwgMCwgX2NhbnZhcy53aWR0aCAtIDEsIF9jYW52YXMuaGVpZ2h0ICk7CiAgICAgICAgICAgIGlmICggYWxhcm0gKSB7CiAgICAgICAgICAgICAgICBfY3R4LmRyYXdJbWFnZSggX2FsYXJtQ2FudmFzLCBfY2FudmFzLndpZHRoIC0gMSwgX2NhbnZhcy5oZWlnaHQgLSBfY3VycmVudCAqIF9jYW52YXMuaGVpZ2h0IC8gX21heCAtIF9lbEhlaWdodCApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX2N0eC5kcmF3SW1hZ2UoIF9kb3RDYW52YXMsIF9jYW52YXMud2lkdGggLSAxLCBfY2FudmFzLmhlaWdodCAtIF9jdXJyZW50ICogX2NhbnZhcy5oZWlnaHQgLyBfbWF4IC0gX2VsSGVpZ2h0ICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIF9pbml0KCk7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGRyYXc6IF9kcmF3CiAgICAgICAgfTsKCiAgICB9CgogICAgZnVuY3Rpb24gU3RhY2tHcmFwaCAoIF9kb20sIF9udW0gKSB7CgogICAgICAgIHZhciBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKSwKICAgICAgICAgICAgX2N0eCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApOwoKICAgICAgICBmdW5jdGlvbiBfaW5pdCAoKSB7CgogICAgICAgICAgICBfY2FudmFzLndpZHRoID0gX2VsV2lkdGg7CiAgICAgICAgICAgIF9jYW52YXMuaGVpZ2h0ID0gX2VsSGVpZ2h0ICogX251bTsKICAgICAgICAgICAgX2NhbnZhcy5zdHlsZS53aWR0aCA9IF9jYW52YXMud2lkdGggKyAncHgnOwogICAgICAgICAgICBfY2FudmFzLnN0eWxlLmhlaWdodCA9IF9jYW52YXMuaGVpZ2h0ICsgJ3B4JzsKICAgICAgICAgICAgX2NhbnZhcy5jbGFzc05hbWUgPSAncnMtY2FudmFzJzsKICAgICAgICAgICAgX2RvbS5hcHBlbmRDaGlsZCggX2NhbnZhcyApOwoKICAgICAgICAgICAgX2N0eC5maWxsU3R5bGUgPSAnIzQ0NDQ0NCc7CiAgICAgICAgICAgIF9jdHguZmlsbFJlY3QoIDAsIDAsIF9jYW52YXMud2lkdGgsIF9jYW52YXMuaGVpZ2h0ICk7CgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gX2RyYXcgKCB2ICkgewogICAgICAgICAgICBfY3R4LmRyYXdJbWFnZSggX2NhbnZhcywgMSwgMCwgX2NhbnZhcy53aWR0aCAtIDEsIF9jYW52YXMuaGVpZ2h0LCAwLCAwLCBfY2FudmFzLndpZHRoIC0gMSwgX2NhbnZhcy5oZWlnaHQgKTsKICAgICAgICAgICAgdmFyIHRoID0gMDsKICAgICAgICAgICAgaXRlcmF0ZUtleXMoIHYsIGZ1bmN0aW9uICggaiApIHsKICAgICAgICAgICAgICAgIHZhciBoID0gdlsgaiBdICogX2NhbnZhcy5oZWlnaHQ7CiAgICAgICAgICAgICAgICBfY3R4LmZpbGxTdHlsZSA9IF9jb2xvdXJzWyBqIF07CiAgICAgICAgICAgICAgICBfY3R4LmZpbGxSZWN0KCBfY2FudmFzLndpZHRoIC0gMSwgdGgsIDEsIGggKTsKICAgICAgICAgICAgICAgIHRoICs9IGg7CiAgICAgICAgICAgIH0gKTsKICAgICAgICB9CgogICAgICAgIF9pbml0KCk7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGRyYXc6IF9kcmF3CiAgICAgICAgfTsKCiAgICB9CgogICAgZnVuY3Rpb24gUGVyZkNvdW50ZXIgKCBpZCwgZ3JvdXAgKSB7CgogICAgICAgIHZhciBfaWQgPSBpZCwKICAgICAgICAgICAgX3RpbWUsCiAgICAgICAgICAgIF92YWx1ZSA9IDAsCiAgICAgICAgICAgIF90b3RhbCA9IDAsCiAgICAgICAgICAgIF9hdmVyYWdlVmFsdWUgPSAwLAogICAgICAgICAgICBfYWNjdW1WYWx1ZSA9IDAsCiAgICAgICAgICAgIF9hY2N1bVN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCksCiAgICAgICAgICAgIF9hY2N1bVNhbXBsZXMgPSAwLAogICAgICAgICAgICBfZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKSwKICAgICAgICAgICAgX3NwYW5JZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzcGFuJyApLAogICAgICAgICAgICBfc3BhblZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKSwKICAgICAgICAgICAgX3NwYW5WYWx1ZVRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggJycgKSwKICAgICAgICAgICAgX2RlZiA9IF9zZXR0aW5ncyA/IF9zZXR0aW5ncy52YWx1ZXNbIF9pZC50b0xvd2VyQ2FzZSgpIF0gOiBudWxsLAogICAgICAgICAgICBfZ3JhcGggPSBuZXcgR3JhcGgoIF9kb20sIF9pZCwgX2RlZiApLAogICAgICAgICAgICBfc3RhcnRlZCA9IGZhbHNlOwoKICAgICAgICBfc3BhbklkLmNsYXNzTmFtZSA9ICdycy1jb3VudGVyLWlkJzsKICAgICAgICBfc3BhbklkLnRleHRDb250ZW50ID0gKCBfZGVmICYmIF9kZWYuY2FwdGlvbiApID8gX2RlZi5jYXB0aW9uIDogX2lkOwoKICAgICAgICBfc3BhblZhbHVlLmNsYXNzTmFtZSA9ICdycy1jb3VudGVyLXZhbHVlJzsKICAgICAgICBfc3BhblZhbHVlLmFwcGVuZENoaWxkKCBfc3BhblZhbHVlVGV4dCApOwoKICAgICAgICBfZG9tLmFwcGVuZENoaWxkKCBfc3BhbklkICk7CiAgICAgICAgX2RvbS5hcHBlbmRDaGlsZCggX3NwYW5WYWx1ZSApOwogICAgICAgIGlmICggZ3JvdXAgKSBncm91cC5kaXYuYXBwZW5kQ2hpbGQoIF9kb20gKTsKICAgICAgICBlbHNlIF9kaXYuYXBwZW5kQ2hpbGQoIF9kb20gKTsKCiAgICAgICAgX3RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTsKCiAgICAgICAgZnVuY3Rpb24gX2F2ZXJhZ2UgKCB2ICkgewogICAgICAgICAgICBpZiAoIF9kZWYgJiYgX2RlZi5hdmVyYWdlICkgewogICAgICAgICAgICAgICAgX2FjY3VtVmFsdWUgKz0gdjsKICAgICAgICAgICAgICAgIF9hY2N1bVNhbXBsZXMrKzsKICAgICAgICAgICAgICAgIHZhciB0ID0gcGVyZm9ybWFuY2Uubm93KCk7CiAgICAgICAgICAgICAgICBpZiAoIHQgLSBfYWNjdW1TdGFydCA+PSAoIF9kZWYuYXZnTXMgfHwgMTAwMCApICkgewogICAgICAgICAgICAgICAgICAgIF9hdmVyYWdlVmFsdWUgPSBfYWNjdW1WYWx1ZSAvIF9hY2N1bVNhbXBsZXM7CiAgICAgICAgICAgICAgICAgICAgX2FjY3VtVmFsdWUgPSAwOwogICAgICAgICAgICAgICAgICAgIF9hY2N1bVN0YXJ0ID0gdDsKICAgICAgICAgICAgICAgICAgICBfYWNjdW1TYW1wbGVzID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gX3N0YXJ0ICgpIHsKICAgICAgICAgICAgX3RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTsKICAgICAgICAgICAgaWYoIF9zZXR0aW5ncy51c2VyVGltaW5nQVBJICkgcGVyZm9ybWFuY2UubWFyayggX2lkICsgJy1zdGFydCcgKTsKICAgICAgICAgICAgX3N0YXJ0ZWQgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gX2VuZCAoKSB7CiAgICAgICAgICAgIF92YWx1ZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gX3RpbWU7CiAgICAgICAgICAgIGlmKCBfc2V0dGluZ3MudXNlclRpbWluZ0FQSSApIHsKICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoIF9pZCArICctZW5kJyApOwogICAgICAgICAgICAgICAgaWYoIF9zdGFydGVkICkgewogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoIF9pZCwgX2lkICsgJy1zdGFydCcsIF9pZCArICctZW5kJyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIF9hdmVyYWdlKCBfdmFsdWUgKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF90aWNrICgpIHsKICAgICAgICAgICAgX2VuZCgpOwogICAgICAgICAgICBfc3RhcnQoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF9kcmF3ICgpIHsKICAgICAgICAgICAgdmFyIHYgPSAoIF9kZWYgJiYgX2RlZi5hdmVyYWdlICkgPyBfYXZlcmFnZVZhbHVlIDogX3ZhbHVlOwogICAgICAgICAgICBfc3BhblZhbHVlVGV4dC5ub2RlVmFsdWUgPSBNYXRoLnJvdW5kKCB2ICogMTAwICkgLyAxMDA7CiAgICAgICAgICAgIHZhciBhID0gKCBfZGVmICYmICggKCBfZGVmLmJlbG93ICYmIF92YWx1ZSA8IF9kZWYuYmVsb3cgKSB8fCAoIF9kZWYub3ZlciAmJiBfdmFsdWUgPiBfZGVmLm92ZXIgKSApICk7CiAgICAgICAgICAgIF9ncmFwaC5kcmF3KCBfdmFsdWUsIGEgKTsKICAgICAgICAgICAgX2RvbS5jbGFzc05hbWUgPSBhID8gJ3JzLWNvdW50ZXItYmFzZSBhbGFybScgOiAncnMtY291bnRlci1iYXNlJzsKCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBfZnJhbWUgKCkgewogICAgICAgICAgICB2YXIgdCA9IHBlcmZvcm1hbmNlLm5vdygpOwogICAgICAgICAgICB2YXIgZSA9IHQgLSBfdGltZTsKICAgICAgICAgICAgX3RvdGFsKys7CiAgICAgICAgICAgIGlmICggZSA+IDEwMDAgKSB7CiAgICAgICAgICAgICAgICBpZiAoIF9kZWYgJiYgX2RlZi5pbnRlcnBvbGF0ZSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlID0gX3RvdGFsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdmFsdWUgPSBfdG90YWwgKiAxMDAwIC8gZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF90b3RhbCA9IDA7CiAgICAgICAgICAgICAgICBfdGltZSA9IHQ7CiAgICAgICAgICAgICAgICBfYXZlcmFnZSggX3ZhbHVlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF9zZXQgKCB2ICkgewogICAgICAgICAgICBfdmFsdWUgPSB2OwogICAgICAgICAgICBfYXZlcmFnZSggX3ZhbHVlICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzZXQ6IF9zZXQsCiAgICAgICAgICAgIHN0YXJ0OiBfc3RhcnQsCiAgICAgICAgICAgIHRpY2s6IF90aWNrLAogICAgICAgICAgICBlbmQ6IF9lbmQsCiAgICAgICAgICAgIGZyYW1lOiBfZnJhbWUsCiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZhbHVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkcmF3OiBfZHJhdwogICAgICAgIH07CgogICAgfQoKICAgIGZ1bmN0aW9uIHNhbXBsZSAoKSB7CgogICAgICAgIHZhciBfdmFsdWUgPSAwOwoKICAgICAgICBmdW5jdGlvbiBfc2V0ICggdiApIHsKICAgICAgICAgICAgX3ZhbHVlID0gdjsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNldDogX3NldCwKICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgIH0KCiAgICBmdW5jdGlvbiBfcGVyZiAoIGlkQXJnICkgewoKICAgICAgICB2YXIgaWQgPSBpZEFyZy50b0xvd2VyQ2FzZSgpOwogICAgICAgIGlmICggaWQgPT09IHVuZGVmaW5lZCApIGlkID0gJ2RlZmF1bHQnOwogICAgICAgIGlmICggX3BlcmZDb3VudGVyc1sgaWQgXSApIHJldHVybiBfcGVyZkNvdW50ZXJzWyBpZCBdOwoKICAgICAgICB2YXIgZ3JvdXAgPSBudWxsOwogICAgICAgIGlmICggX3NldHRpbmdzICYmIF9zZXR0aW5ncy5ncm91cHMgKSB7CiAgICAgICAgICAgIGl0ZXJhdGVLZXlzKCBfc2V0dGluZ3MuZ3JvdXBzLCBmdW5jdGlvbiAoIGogKSB7CiAgICAgICAgICAgICAgICB2YXIgZyA9IF9zZXR0aW5ncy5ncm91cHNbIHBhcnNlSW50KCBqLCAxMCApIF07CiAgICAgICAgICAgICAgICBpZiAoICFncm91cCAmJiBnLnZhbHVlcy5pbmRleE9mKCBpZC50b0xvd2VyQ2FzZSgpICkgIT09IC0xICkgewogICAgICAgICAgICAgICAgICAgIGdyb3VwID0gZzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgdmFyIHAgPSBuZXcgUGVyZkNvdW50ZXIoIGlkLCBncm91cCApOwogICAgICAgIF9wZXJmQ291bnRlcnNbIGlkIF0gPSBwOwogICAgICAgIHJldHVybiBwOwoKICAgIH0KCiAgICBmdW5jdGlvbiBfaW5pdCAoKSB7CgogICAgICAgIGlmICggX3NldHRpbmdzLnBsdWdpbnMgKSB7CiAgICAgICAgICAgIGlmICggIV9zZXR0aW5ncy52YWx1ZXMgKSBfc2V0dGluZ3MudmFsdWVzID0ge307CiAgICAgICAgICAgIGlmICggIV9zZXR0aW5ncy5ncm91cHMgKSBfc2V0dGluZ3MuZ3JvdXBzID0gW107CiAgICAgICAgICAgIGlmICggIV9zZXR0aW5ncy5mcmFjdGlvbnMgKSBfc2V0dGluZ3MuZnJhY3Rpb25zID0gW107CiAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8IF9zZXR0aW5ncy5wbHVnaW5zLmxlbmd0aDsgaisrICkgewogICAgICAgICAgICAgICAgX3NldHRpbmdzLnBsdWdpbnNbIGogXS5hdHRhY2goIF9wZXJmICk7CiAgICAgICAgICAgICAgICBpdGVyYXRlS2V5cyggX3NldHRpbmdzLnBsdWdpbnNbIGogXS52YWx1ZXMsIGZ1bmN0aW9uICggayApIHsKICAgICAgICAgICAgICAgICAgICBfc2V0dGluZ3MudmFsdWVzWyBrIF0gPSBfc2V0dGluZ3MucGx1Z2luc1sgaiBdLnZhbHVlc1sgayBdOwogICAgICAgICAgICAgICAgfSApOwogICAgICAgICAgICAgICAgX3NldHRpbmdzLmdyb3VwcyA9IF9zZXR0aW5ncy5ncm91cHMuY29uY2F0KCBfc2V0dGluZ3MucGx1Z2luc1sgaiBdLmdyb3VwcyApOwogICAgICAgICAgICAgICAgX3NldHRpbmdzLmZyYWN0aW9ucyA9IF9zZXR0aW5ncy5mcmFjdGlvbnMuY29uY2F0KCBfc2V0dGluZ3MucGx1Z2luc1sgaiBdLmZyYWN0aW9ucyApOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3NldHRpbmdzLnBsdWdpbnMgPSB7fTsKICAgICAgICB9CgogICAgICAgIF9iYXNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTsKICAgICAgICBfYmFzZS5jbGFzc05hbWUgPSAncnMtYmFzZSc7CiAgICAgICAgX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7CiAgICAgICAgX2Rpdi5jbGFzc05hbWUgPSAncnMtY29udGFpbmVyJzsKICAgICAgICBfZGl2LnN0eWxlLmhlaWdodCA9ICdhdXRvJzsKICAgICAgICBfYmFzZS5hcHBlbmRDaGlsZCggX2RpdiApOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIF9iYXNlICk7CgogICAgICAgIGlmICggIV9zZXR0aW5ncyApIHJldHVybjsKCiAgICAgICAgaWYgKCBfc2V0dGluZ3MuZ3JvdXBzICkgewogICAgICAgICAgICBpdGVyYXRlS2V5cyggX3NldHRpbmdzLmdyb3VwcywgZnVuY3Rpb24gKCBqICkgewogICAgICAgICAgICAgICAgdmFyIGcgPSBfc2V0dGluZ3MuZ3JvdXBzWyBwYXJzZUludCggaiwgMTAgKSBdOwogICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7CiAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ3JzLWdyb3VwJzsKICAgICAgICAgICAgICAgIGcuZGl2ID0gZGl2OwogICAgICAgICAgICAgICAgdmFyIGgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2gxJyApOwogICAgICAgICAgICAgICAgaDEudGV4dENvbnRlbnQgPSBnLmNhcHRpb247CiAgICAgICAgICAgICAgICBoMS5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBmdW5jdGlvbiAoIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCAnaGlkZGVuJyApOwogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIH0uYmluZCggZGl2ICkgKTsKICAgICAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQoIGgxICk7CiAgICAgICAgICAgICAgICBfZGl2LmFwcGVuZENoaWxkKCBkaXYgKTsKICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBfc2V0dGluZ3MuZnJhY3Rpb25zICkgewogICAgICAgICAgICBpdGVyYXRlS2V5cyggX3NldHRpbmdzLmZyYWN0aW9ucywgZnVuY3Rpb24gKCBqICkgewogICAgICAgICAgICAgICAgdmFyIGYgPSBfc2V0dGluZ3MuZnJhY3Rpb25zWyBwYXJzZUludCggaiwgMTAgKSBdOwogICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7CiAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ3JzLWZyYWN0aW9uJzsKICAgICAgICAgICAgICAgIHZhciBsZWdlbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApOwogICAgICAgICAgICAgICAgbGVnZW5kLmNsYXNzTmFtZSA9ICdycy1sZWdlbmQnOwoKICAgICAgICAgICAgICAgIHZhciBoID0gMDsKICAgICAgICAgICAgICAgIGl0ZXJhdGVLZXlzKCBfc2V0dGluZ3MuZnJhY3Rpb25zWyBqIF0uc3RlcHMsIGZ1bmN0aW9uICggayApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdwJyApOwogICAgICAgICAgICAgICAgICAgIHAudGV4dENvbnRlbnQgPSBfc2V0dGluZ3MuZnJhY3Rpb25zWyBqIF0uc3RlcHNbIGsgXTsKICAgICAgICAgICAgICAgICAgICBwLnN0eWxlLmNvbG9yID0gX2NvbG91cnNbIGggXTsKICAgICAgICAgICAgICAgICAgICBsZWdlbmQuYXBwZW5kQ2hpbGQoIHAgKTsKICAgICAgICAgICAgICAgICAgICBoKys7CiAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoIGxlZ2VuZCApOwogICAgICAgICAgICAgICAgZGl2LnN0eWxlLmhlaWdodCA9IGggKiBfZWxIZWlnaHQgKyAncHgnOwogICAgICAgICAgICAgICAgZi5kaXYgPSBkaXY7CiAgICAgICAgICAgICAgICB2YXIgZ3JhcGggPSBuZXcgU3RhY2tHcmFwaCggZGl2LCBoICk7CiAgICAgICAgICAgICAgICBmLmdyYXBoID0gZ3JhcGg7CiAgICAgICAgICAgICAgICBfZGl2LmFwcGVuZENoaWxkKCBkaXYgKTsKICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICB9CgogICAgZnVuY3Rpb24gX3VwZGF0ZSAoKSB7CgogICAgICAgIGl0ZXJhdGVLZXlzKCBfc2V0dGluZ3MucGx1Z2lucywgZnVuY3Rpb24gKCBqICkgewogICAgICAgICAgICBfc2V0dGluZ3MucGx1Z2luc1sgaiBdLnVwZGF0ZSgpOwogICAgICAgIH0gKTsKCiAgICAgICAgaXRlcmF0ZUtleXMoIF9wZXJmQ291bnRlcnMsIGZ1bmN0aW9uICggaiApIHsKICAgICAgICAgICAgX3BlcmZDb3VudGVyc1sgaiBdLmRyYXcoKTsKICAgICAgICB9ICk7CgogICAgICAgIGlmICggX3NldHRpbmdzICYmIF9zZXR0aW5ncy5mcmFjdGlvbnMgKSB7CiAgICAgICAgICAgIGl0ZXJhdGVLZXlzKCBfc2V0dGluZ3MuZnJhY3Rpb25zLCBmdW5jdGlvbiAoIGogKSB7CiAgICAgICAgICAgICAgICB2YXIgZiA9IF9zZXR0aW5ncy5mcmFjdGlvbnNbIHBhcnNlSW50KCBqLCAxMCApIF07CiAgICAgICAgICAgICAgICB2YXIgdiA9IFtdOwogICAgICAgICAgICAgICAgdmFyIGJhc2UgPSBfcGVyZkNvdW50ZXJzWyBmLmJhc2UudG9Mb3dlckNhc2UoKSBdOwogICAgICAgICAgICAgICAgaWYgKCBiYXNlICkgewogICAgICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLnZhbHVlKCk7CiAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZUtleXMoIF9zZXR0aW5ncy5mcmFjdGlvbnNbIGogXS5zdGVwcywgZnVuY3Rpb24gKCBrICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9zZXR0aW5ncy5mcmFjdGlvbnNbIGogXS5zdGVwc1sgcGFyc2VJbnQoIGssIDEwICkgXS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gX3BlcmZDb3VudGVyc1sgcyBdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYucHVzaCggdmFsLnZhbHVlKCkgLyBiYXNlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmLmdyYXBoLmRyYXcoIHYgKTsKICAgICAgICAgICAgfSApOwogICAgICAgIH0KCiAgICAgICAgLyppZiggX2hlaWdodCAhPSBfZGl2LmNsaWVudEhlaWdodCApIHsKICAgICAgICAgICAgX2hlaWdodCA9IF9kaXYuY2xpZW50SGVpZ2h0OwogICAgICAgICAgICBfYmFzZS5zdHlsZS5oZWlnaHQgPSBfaGVpZ2h0ICsgMiAqIF9lbEhlaWdodCArICdweCc7CiAgICAgICAgY29uc29sZS5sb2coIF9iYXNlLmNsaWVudEhlaWdodCApOwogICAgICAgIH0qLwoKICAgIH0KCiAgICBfaW5pdCgpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoIGlkICkgewogICAgICAgIGlmICggaWQgKSByZXR1cm4gX3BlcmYoIGlkICk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZWxlbWVudDogX2Jhc2UsCiAgICAgICAgICAgIHVwZGF0ZTogX3VwZGF0ZQogICAgICAgIH07CiAgICB9OwoKfQoKaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7CiAgbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuclN0YXRzOwp9Cgp9LHt9XSwxOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzYyMTM0NjQKaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHsKICAgIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uKHNlYXJjaFN0cmluZywgcG9zaXRpb24pewogICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDA7CiAgICAgIHJldHVybiB0aGlzLnN1YnN0cihwb3NpdGlvbiwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZzsKICB9Owp9Cgp9LHt9XSwxOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKgogKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCnZhciBVdGlsID0ge307CgpVdGlsLmJhc2U2NCA9IGZ1bmN0aW9uKG1pbWVUeXBlLCBiYXNlNjQpIHsKICByZXR1cm4gJ2RhdGE6JyArIG1pbWVUeXBlICsgJztiYXNlNjQsJyArIGJhc2U2NDsKfTsKClV0aWwuaXNNb2JpbGUgPSBmdW5jdGlvbigpIHsKICB2YXIgY2hlY2sgPSBmYWxzZTsKICAoZnVuY3Rpb24oYSl7aWYoLyhhbmRyb2lkfGJiXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1wtKG58dSl8YzU1XC98Y2FwaXxjY3dhfGNkbVwtfGNlbGx8Y2h0bXxjbGRjfGNtZFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXC01fGdcLW1vfGdvKFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFwtKG18cHx0KXxoZWlcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXC1jfGh0KGMoXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XC18XC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XC8pfGtsb258a3B0IHxrd2NcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XC8oa3xsfHUpfDUwfDU0fFwtW2Etd10pfGxpYnd8bHlueHxtMVwtd3xtM2dhfG01MFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XC1nfHFhXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFwtWzItN118aVwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXC18b298cFwtKXxzZGtcL3xzZShjKFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFwtfHNoYXJ8c2llKFwtfG0pfHNrXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcLXx2XC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcLXx0ZGdcLXx0ZWwoaXxtKXx0aW1cLXx0XC1tb3x0byhwbHxzaCl8dHMoNzB8bVwtfG0zfG01KXx0eFwtOXx1cChcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcLXx5b3VyfHpldG98enRlXC0vaS50ZXN0KGEuc3Vic3RyKDAsNCkpKWNoZWNrID0gdHJ1ZX0pKG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYSk7CiAgcmV0dXJuIGNoZWNrOwp9OwoKVXRpbC5pc0lPUyA9IGZ1bmN0aW9uKCkgewogIHJldHVybiAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsKfTsKClV0aWwuaXNJRnJhbWUgPSBmdW5jdGlvbigpIHsKICB0cnkgewogICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wOwogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfTsKClV0aWwuYXBwZW5kUXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbih1cmwsIGtleSwgdmFsdWUpIHsKICAvLyBEZXRlcm1pbmUgZGVsaW1pdGVyIGJhc2VkIG9uIGlmIHRoZSBVUkwgYWxyZWFkeSBHRVQgcGFyYW1ldGVycyBpbiBpdC4KICB2YXIgZGVsaW1pdGVyID0gKHVybC5pbmRleE9mKCc/JykgPCAwID8gJz8nIDogJyYnKTsKICB1cmwgKz0gZGVsaW1pdGVyICsga2V5ICsgJz0nICsgdmFsdWU7CiAgcmV0dXJuIHVybDsKfTsKCi8vIEZyb20gaHR0cDovL2dvby5nbC80V1gzdGcKVXRpbC5nZXRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHsKICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFtdLywgIlxcWyIpLnJlcGxhY2UoL1tcXV0vLCAiXFxdIik7CiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgiW1xcPyZdIiArIG5hbWUgKyAiPShbXiYjXSopIiksCiAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7CiAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAiIiA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1wrL2csICIgIikpOwp9OwoKVXRpbC5pc0xhbmRzY2FwZU1vZGUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gKHdpbmRvdy5vcmllbnRhdGlvbiA9PSA5MCB8fCB3aW5kb3cub3JpZW50YXRpb24gPT0gLTkwKTsKfTsKCgptb2R1bGUuZXhwb3J0cyA9IFV0aWw7Cgp9LHt9XSwxOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovKgogKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7CgovKioKICogQW5kcm9pZCBhbmQgaU9TIGNvbXBhdGlibGUgd2FrZWxvY2sgaW1wbGVtZW50YXRpb24uCiAqCiAqIFJlZmFjdG9yZWQgdGhhbmtzIHRvIGRrb3ZhbGV2QC4KICovCmZ1bmN0aW9uIEFuZHJvaWRXYWtlTG9jaygpIHsKICB2YXIgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpOwoKICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uKCkgewogICAgdmlkZW8ucGxheSgpOwogIH0pOwoKICB0aGlzLnJlcXVlc3QgPSBmdW5jdGlvbigpIHsKICAgIGlmICh2aWRlby5wYXVzZWQpIHsKICAgICAgLy8gQmFzZTY0IHZlcnNpb24gb2YgdmlkZW9zX3NyYy9uby1zbGVlcC02MHMud2VibS4KICAgICAgdmlkZW8uc3JjID0gVXRpbC5iYXNlNjQoJ3ZpZGVvL3dlYm0nLCAnR2tYZm93RUFBQUFBQUFBZlFvYUJBVUwzZ1FGQzhvRUVRdk9CQ0VLQ2hIZGxZbTFDaDRFQ1FvV0JBaGhUZ0djQkFBQUFBQUFINHhGTm0zUkFMRTI3aTFPcmhCVkpxV1pUcklIZlRidU1VNnVFRmxTdWExT3NnZ0V3VGJ1TVU2dUVIRk83YTFPc2dnZkc3QUVBQUFBQUFBQ2tBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFWU2FsbUFRQUFBQUFBQUVVcTE3R0REMEpBVFlDTlRHRjJaalUyTGpRd0xqRXdNVmRCalV4aGRtWTFOaTQwTUM0eE1ERnpwSkFHU0pUTWJzTHBEdC95U2tpcGdYMWZSSW1JUU8xTUFBQUFBQUFXVks1ckFRQUFBQUFBQUR1dUFRQUFBQUFBQURMWGdRRnp4WUVCbklFQUlyV2NnM1Z1WklhRlZsOVdVRG1EZ1FFajQ0T0VPNXJLQU9BQkFBQUFBQUFBQnJDQnNMcUJrQjlEdG5VQkFBQUFBQUFBbytlQkFLT21nUUFBZ0tKSmcwSUFBVjRCSHNBSEJJT0RDb0FBQ21IMk1BQUFaeGd6NGRQU1RGaTVKQUNqbG9FRDZBQ21BRUNTbkFCTVFBQURZQUFBV2kwcXVvQ2psb0VIMEFDbUFFQ1NuQUJOd0FBRFlBQUFXaTBxdW9DamxvRUx1QUNtQUVDU25BQk5nQUFEWUFBQVdpMHF1b0NqbG9FUG9BQ21BRUNTbkFCTllBQURZQUFBV2kwcXVvQ2psb0VUaUFDbUFFQ1NuQUJOSUFBRFlBQUFXaTBxdW9BZlE3WjFBUUFBQUFBQUFKVG5naGR3bzVhQkFBQUFwZ0JBa3B3QVRPQUFBMkFBQUZvdEtycUFvNWFCQStnQXBnQkFrcHdBVE1BQUEyQUFBRm90S3JxQW81YUJCOUFBcGdCQWtwd0FUSUFBQTJBQUFGb3RLcnFBbzVhQkM3Z0FwZ0JBa3B3QVRFQUFBMkFBQUZvdEtycUFvNWFCRDZBQXBnREFrcHdBUTJBQUEyQUFBRm90S3JxQW81YUJFNGdBcGdCQWtwd0FUQ0FBQTJBQUFGb3RLcnFBSDBPMmRRRUFBQUFBQUFDVTU0SXU0S09XZ1FBQUFLWUFRSktjQUV2QUFBTmdBQUJhTFNxNmdLT1dnUVBvQUtZQVFKS2NBRXRnQUFOZ0FBQmFMU3E2Z0tPV2dRZlFBS1lBUUpLY0FFc0FBQU5nQUFCYUxTcTZnS09XZ1F1NEFLWUFRSktjQUVxQUFBTmdBQUJhTFNxNmdLT1dnUStnQUtZQVFKS2NBRW9nQUFOZ0FBQmFMU3E2Z0tPV2dST0lBS1lBUUpLY0FFbkFBQU5nQUFCYUxTcTZnQjlEdG5VQkFBQUFBQUFBbE9lQ1JsQ2psb0VBQUFDbUFFQ1NuQUJKZ0FBRFlBQUFXaTBxdW9DamxvRUQ2QUNtQUVDU25BQkpJQUFEWUFBQVdpMHF1b0NqbG9FSDBBQ21BTUNTbkFCRFlBQURZQUFBV2kwcXVvQ2psb0VMdUFDbUFFQ1NuQUJJNEFBRFlBQUFXaTBxdW9DamxvRVBvQUNtQUVDU25BQklvQUFEWUFBQVdpMHF1b0NqbG9FVGlBQ21BRUNTbkFCSVlBQURZQUFBV2kwcXVvQWZRN1oxQVFBQUFBQUFBSlRuZ2wzQW81YUJBQUFBcGdCQWtwd0FTQ0FBQTJBQUFGb3RLcnFBbzVhQkErZ0FwZ0JBa3B3QVNBQUFBMkFBQUZvdEtycUFvNWFCQjlBQXBnQkFrcHdBUjhBQUEyQUFBRm90S3JxQW81YUJDN2dBcGdCQWtwd0FSNEFBQTJBQUFGb3RLcnFBbzVhQkQ2QUFwZ0JBa3B3QVIyQUFBMkFBQUZvdEtycUFvNWFCRTRnQXBnQkFrcHdBUnlBQUEyQUFBRm90S3JxQUgwTzJkUUVBQUFBQUFBQ1U1NEoxTUtPV2dRQUFBS1lBd0pLY0FFTmdBQU5nQUFCYUxTcTZnS09XZ1FQb0FLWUFRSktjQUViZ0FBTmdBQUJhTFNxNmdLT1dnUWZRQUtZQVFKS2NBRWFnQUFOZ0FBQmFMU3E2Z0tPV2dRdTRBS1lBUUpLY0FFYUFBQU5nQUFCYUxTcTZnS09XZ1ErZ0FLWUFRSktjQUVaQUFBTmdBQUJhTFNxNmdLT1dnUk9JQUtZQVFKS2NBRVlBQUFOZ0FBQmFMU3E2Z0I5RHRuVUJBQUFBQUFBQWxPZUNqS0NqbG9FQUFBQ21BRUNTbkFCRjRBQURZQUFBV2kwcXVvQ2psb0VENkFDbUFFQ1NuQUJGd0FBRFlBQUFXaTBxdW9DamxvRUgwQUNtQUVDU25BQkZvQUFEWUFBQVdpMHF1b0NqbG9FTHVBQ21BRUNTbkFCRmdBQURZQUFBV2kwcXVvQ2psb0VQb0FDbUFNQ1NuQUJEWUFBRFlBQUFXaTBxdW9DamxvRVRpQUNtQUVDU25BQkZZQUFEWUFBQVdpMHF1b0FmUTdaMUFRQUFBQUFBQUpUbmdxUVFvNWFCQUFBQXBnQkFrcHdBUlVBQUEyQUFBRm90S3JxQW81YUJBK2dBcGdCQWtwd0FSU0FBQTJBQUFGb3RLcnFBbzVhQkI5QUFwZ0JBa3B3QVJRQUFBMkFBQUZvdEtycUFvNWFCQzdnQXBnQkFrcHdBUlFBQUEyQUFBRm90S3JxQW81YUJENkFBcGdCQWtwd0FST0FBQTJBQUFGb3RLcnFBbzVhQkU0Z0FwZ0JBa3B3QVJNQUFBMkFBQUZvdEtycUFIME8yZFFFQUFBQUFBQUNVNTRLN2dLT1dnUUFBQUtZQVFKS2NBRVNnQUFOZ0FBQmFMU3E2Z0tPV2dRUG9BS1lBUUpLY0FFU0FBQU5nQUFCYUxTcTZnS09XZ1FmUUFLWUF3SktjQUVOZ0FBTmdBQUJhTFNxNmdLT1dnUXU0QUtZQVFKS2NBRVJnQUFOZ0FBQmFMU3E2Z0tPV2dRK2dBS1lBUUpLY0FFUkFBQU5nQUFCYUxTcTZnS09XZ1JPSUFLWUFRSktjQUVRZ0FBTmdBQUJhTFNxNmdCOUR0blVCQUFBQUFBQUFsT2VDMHZDamxvRUFBQUNtQUVDU25BQkVJQUFEWUFBQVdpMHF1b0NqbG9FRDZBQ21BRUNTbkFCRUFBQURZQUFBV2kwcXVvQ2psb0VIMEFDbUFFQ1NuQUJENEFBRFlBQUFXaTBxdW9DamxvRUx1QUNtQUVDU25BQkR3QUFEWUFBQVdpMHF1b0NqbG9FUG9BQ21BRUNTbkFCRG9BQURZQUFBV2kwcXVvQ2psb0VUaUFDbUFFQ1NuQUJEZ0FBRFlBQUFXaTBxdW9BY1U3dHJBUUFBQUFBQUFCRzdqN09CQUxlSzk0RUI4WUlCZC9DQkF3PT0nKTsKICAgICAgdmlkZW8ucGxheSgpOwogICAgfQogIH07CgogIHRoaXMucmVsZWFzZSA9IGZ1bmN0aW9uKCkgewogICAgdmlkZW8ucGF1c2UoKTsKICAgIHZpZGVvLnNyYyA9ICcnOwogIH07Cn0KCmZ1bmN0aW9uIGlPU1dha2VMb2NrKCkgewogIHZhciB0aW1lciA9IG51bGw7CgogIHRoaXMucmVxdWVzdCA9IGZ1bmN0aW9uKCkgewogICAgaWYgKCF0aW1lcikgewogICAgICB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nOwogICAgICAgIHNldFRpbWVvdXQod2luZG93LnN0b3AsIDApOwogICAgICB9LCAxNTAwMCk7CiAgICB9CiAgfQoKICB0aGlzLnJlbGVhc2UgPSBmdW5jdGlvbigpIHsKICAgIGlmICh0aW1lcikgewogICAgICBjbGVhckludGVydmFsKHRpbWVyKTsKICAgICAgdGltZXIgPSBudWxsOwogICAgfQogIH0KfQoKCmZ1bmN0aW9uIGdldFdha2VMb2NrKCkgewogIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhOwogIGlmICh1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQb2QvaSkpIHsKICAgIHJldHVybiBpT1NXYWtlTG9jazsKICB9IGVsc2UgewogICAgcmV0dXJuIEFuZHJvaWRXYWtlTG9jazsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gZ2V0V2FrZUxvY2soKTsKCn0seyIuL3V0aWwuanMiOjE5NX1dfSx7fSxbMTU1XSkoMTU1KQp9KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWZyYW1lLXYxLjAuNC5qcy5tYXAK",
            "mime_type": "application/x-javascript"
        }
    ]
}